name: HumanEval_51_remove_vowels
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // remove_vowels is a function that takes string and returns string without\
  \ vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"\
  abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\"\
  )\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"\
  zbcd\"))\n    // (\"zbcd\")\n    def removeVowels(text : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(removeVowels((\"\"\
  )).equals((\"\")));\n    assert(removeVowels((\"abcdef\\nghijklm\")).equals((\"\
  bcdf\\nghjklm\")));\n    assert(removeVowels((\"fedcba\")).equals((\"fdcb\")));\n\
  \    assert(removeVowels((\"eeeee\")).equals((\"\")));\n    assert(removeVowels((\"\
  acBAA\")).equals((\"cB\")));\n    assert(removeVowels((\"EcBOO\")).equals((\"cB\"\
  )));\n    assert(removeVowels((\"ybcd\")).equals((\"ybcd\")));\n    }\n\n}\n"
completions: ['        text.filterNot("aeiouAEIOU".contains(_))', "        val vowels\
    \ = \"aeiou\"\n        text.filter(c => !vowels.contains(c.toLower))", "     \
    \   var s = \"\"\n        for (i <- 0 until text.length) {\n            val c\
    \ = text(i)\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c\
    \ != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n    \
    \            s += c\n            }\n        }\n        return s", "        text\
    \ match {\n            case \"\" => text\n            case _ => {\n          \
    \      val c = text.charAt(0).toLower\n                if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                    removeVowels(text.substring(1))\n\
    \                } else {\n                    c + removeVowels(text.substring(1))\n\
    \                }\n            }\n        }", "        text.filter(_ match {\n\
    \            case 'a' => false\n            case 'e' => false\n            case\
    \ 'i' => false\n            case 'o' => false\n            case 'u' => false\n\
    \            case _ => true\n        })", "        if (text.length() == 0) return\
    \ text\n        if (text.length() == 1) {\n            if (\"aeiouAEIOU\".contains(text.charAt(0)))\
    \ return \"\"\n            else return text\n        }\n        if (\"aeiouAEIOU\"\
    .contains(text.charAt(0))) {\n            return removeVowels(text.substring(1))\n\
    \        }\n        else {\n            return text.charAt(0) + removeVowels(text.substring(1))\n\
    \        }", "        val vowels = \"aeiou\"\n        var str = new StringBuilder(text)\n\
    \        for (i <- 0 until text.length) {\n            if (vowels.contains(text(i)))\
    \ {\n                str = str.deleteCharAt(i)\n            }\n        }\n   \
    \     str.toString", "        val vowels = \"aeiou\"\n        for (char <- text\
    \ if !vowels.contains(char)) yield char", '        return text.filterNot(c =>
    "aeiouAEIOU".contains(c))', "        return text.filter((x : Char) => !List('a',\
    \ 'e', 'i', 'o', 'u').contains(x.toLower))", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        text.filter(!vowels.contains(_))",
  "        val vowels = List('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n \
    \       text.toList.filterNot(vowels.contains(_)).mkString", "        var vowels\
    \ = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        var result\
    \ = new StringBuilder()\n        for (i <- 0 until text.length) {\n          \
    \  if (!vowels.contains(text(i))) {\n                result += text(i)\n     \
    \       }\n        }\n        return result.toString()", "        // Create new\
    \ string buffer\n        val stringBuffer = new StringBuffer()\n        // Remove\
    \ vowels from string\n        for (c <- text) {\n            if (c.toLower !=\
    \ 'a' && c.toLower != 'e' && c.toLower != 'i' && c.toLower != 'o' && c.toLower\
    \ != 'u') {\n                stringBuffer.append(c)\n            }\n        }\n\
    \        // Return new string buffer\n        stringBuffer.toString", "      \
    \  var ans = \"\"\n        for (c <- text) {\n            if (c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u') ans += c\n        }\n        return\
    \ ans", "        text.filter(c => c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')", " \
    \       var x = text.filterNot(_.toLower == 'a' || _.toLower == 'e' || _.toLower\
    \ == 'i' || _.toLower == 'o' || _.toLower == 'u')\n        return x", "      \
    \  var sb = new StringBuilder()\n        for (c <- text) {\n            if (\"\
    aeiouAEIOU\".indexOf(c) == -1) sb.append(c)\n        }\n        sb.toString",
  "        var vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  \
    \      var result = \"\"\n        for (c <- text) if (!vowels.contains(c)) result\
    \ += c\n        return result", "        val text_array = text.toCharArray\n \
    \       val vowels = Array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n\
    \        val result_array = new ListBuffer[Char]\n        for (i <- 0 until text_array.length)\
    \ {\n            if (!vowels.contains(text_array(i))) {\n                result_array\
    \ += text_array(i)\n            }\n        }\n        result_array.mkString",
  "      if (text.isEmpty) text else {\n        if (\"aeiouAEIOU\".contains(text.head))\
    \ removeVowels(text.tail) else text.head + removeVowels(text.tail)\n      }",
  "        var result : String = \"\"\n        for (c <- text) {\n            if (c.toLower\
    \ != 'a' && c.toLower != 'e' && c.toLower != 'i' && c.toLower != 'o' && c.toLower\
    \ != 'u') {\n                result += c\n            }\n        }\n        return\
    \ result", "        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U')\n        text.filterNot(vowels)", "        var Vowels = Set('a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        var sb = new StringBuilder\n   \
    \     for (c <- text) {\n            if (!Vowels.contains(c)) sb.append(c)\n \
    \       }\n        sb.toString", "        text.toLowerCase.filter(c => c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u')", "        val allVowels =\
    \ \"aeiouAEIOU\"\n        val textArray = text.toCharArray\n        var result\
    \ = \"\"\n        for (letter <- textArray) {\n            if (!allVowels.contains(letter))\
    \ {\n                result += letter\n            }\n        }\n        result",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\")\n        var newText = \"\"\n        for (c <- text if !vowels.contains(c.toString))\
    \ newText += c\n        newText", "        val toRemove : HashSet[Char] = HashSet('a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        text.filter(x => !toRemove.contains(x))",
  "        def remove(text : String, vowel : Char) : String = {\n            text.filter(x\
    \ => x != vowel)\n        }\n        val listOfVowels = List('a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U')\n        listOfVowels.foldLeft(text)(remove)",
  "      // ...\n      var stringList = new ListBuffer[Char]\n      for (c <- text)\
    \ {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n\
    \          stringList += c\n        }\n      }\n      stringList.mkString", " \
    \       var s = Set[Char]('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n\
    \        text.filterNot(s.contains(_))", "      text.filter(c => !c.isLetter ||\
    \ c.toLower != 'a' && c.toLower != 'e' && c.toLower != 'i' && c.toLower != 'o'\
    \ && c.toLower != 'u')", "        var result = \"\"\n        for (character <-\
    \ text) {\n            if (!(character == 'a' || character == 'e' || character\
    \ == 'i' || character == 'o' || character == 'u' || character == 'A' || character\
    \ == 'E' || character == 'I' || character == 'O' || character == 'U')) {\n   \
    \             result += character\n            }\n        }\n        return result",
  "        val regex = \"[aeiouAEIOU]\".r\n        regex.replaceAllIn(text, \"\")",
  '        text.filter(c => "aeiouAEIOU".indexOf(c) == -1)', '        return text.filter(!_.toString.matches("[aeiouAEIOU]"))',
  "        val vowels = List('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n \
    \       def loop(text : String, index : Int, result : String) : String = {\n \
    \           if (index == text.length) result\n            else if (vowels.contains(text(index)))\
    \ loop(text, index + 1, result)\n            else loop(text, index + 1, result\
    \ + text(index))\n        }\n        loop(text, 0, \"\")", '        text.replaceAll("[aeiouAEIOU]",
    "")', "        val vowels = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        var result = \"\"\n        for (i <- 0 until text.length) {\n      \
    \      if (consonants.contains(text(i))) {\n                result += text(i)\n\
    \            }\n        }\n        result", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        def helper(text : String, result\
    \ : String) : String = {\n            if (text.isEmpty) result\n            else\
    \ if (vowels.contains(text.head)) helper(text.tail, result)\n            else\
    \ helper(text.tail, result + text.head)\n        }\n        helper(text, \"\")",
  "        val vowels = List('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n \
    \       def remove(text : String, vowels : List[Char]) : String = {\n        \
    \    if (text.length == 0) return \"\"\n            val first = text.head\n  \
    \          val firstString = first.toString\n            if (vowels.contains(first))\
    \ return remove(text.tail, vowels)\n            return firstString + remove(text.tail,\
    \ vowels)\n        }\n        return remove(text, vowels)", "        text.toCharArray.filter(c\
    \ => {\n            \"aeiouAEIOU\".indexOf(c) == -1\n        }).mkString", " \
    \       // exception case\n        if (text == \"\")\n            return \"\"\n\
    \        var list = text.toList\n        var string : String = \"\"\n        for\
    \ (i <- 0 until list.length) {\n            var test = list(i)\n            test\
    \ match {\n                case 'a' => list.remove(i)\n                case 'e'\
    \ => list.remove(i)\n                case 'i' => list.remove(i)\n            \
    \    case 'o' => list.remove(i)\n                case 'u' => list.remove(i)\n\
    \                case 'A' => list.remove(i)\n                case 'E' => list.remove(i)\n\
    \                case 'I' => list.remove(i)\n                case 'O' => list.remove(i)\n\
    \                case 'U' => list.remove(i)\n                case _ => Unit\n\
    \            }\n        }\n        return list.mkString", "        var res = \"\
    \"\n        for (c <- text if !List('a', 'e', 'i', 'o', 'u').contains(c)) res\
    \ += c\n        res", "        // First, we need to create a data structure to\
    \ map from the vowels to their lowercase.\n        val vowelToLower = Map('a'\
    \ -> 'a', 'e' -> 'e', 'i' -> 'i', 'o' -> 'o', 'u' -> 'u', 'A' -> 'a', 'E' -> 'e',\
    \ 'I' -> 'i', 'O' -> 'o', 'U' -> 'u')\n        val textArray = text.toCharArray\n\
    \        val newTextArray = textArray.filter(x => !vowelToLower.contains(x))\n\
    \        val newText = newTextArray.mkString\n        newText", '        (for
    (i <- 0 until text.length if "aeiouAEIOU".indexOf(text(i)) == -1) yield text(i)).mkString',
  "        // convert string to lowercase\n        val lowerCase = text.toLowerCase\n\
    \        // remove vowels from the string.\n        return lowerCase.replaceAll(\"\
    [aeiou]\", \"\")", "        // TODO: Implement me in O(n)\n        return \"\"",
  "        // get rid of vowels\n        var vowels = List(\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        var chars = text.toList\n\
    \        var ans = ListBuffer[Char]()\n        for (i <- 0 until chars.length)\
    \ {\n            if (!vowels.contains(chars(i).toString)) ans += chars(i)\n  \
    \      }\n        ans.mkString", "        var str = \"\"\n        for (c <- text)\
    \ {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\
    \ {\n                str += c\n            }\n        }\n        return str",
  "        var result : String = \"\"\n        for (c <- text if c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u') result += c\n        return result",
  "        text.filter(_ match {\n            case 'a' => false\n            case\
    \ 'e' => false\n            case 'i' => false\n            case 'o' => false\n\
    \            case 'u' => false\n            case _ => true\n        })", "   \
    \   val vowels = Array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n   \
    \   var removed = text\n      for (i <- 0 until vowels.length) {\n        removed\
    \ = removed.replaceAll(vowels(i).toString, \"\")\n      }\n      removed", " \
    \       val vowels = List('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n\
    \        text.filter(ch => !vowels.contains(ch))", "        var result = text.replaceAll(\"\
    [aeiouAEIOU]\", \"\")\n        return result", "        text.toCharArray.filterNot(List('a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U').contains(_)).mkString", "     \
    \   // Start your code here.\n        var s: String = \"\"\n        for (i <-\
    \ 0 until text.length) {\n            if (text(i) != 'a' && text(i) != 'e' &&\
    \ text(i) != 'i' && text(i) != 'o' && text(i) != 'u')\n                s += text(i)\n\
    \        }\n        return s", "        if (text.length == 0) {\n            text\n\
    \        } else {\n            val vowels = Set('a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U')\n            if (vowels.contains(text(0))) {\n         \
    \       removeVowels(text.substring(1))\n            } else {\n              \
    \  text(0) + removeVowels(text.substring(1))\n            }\n        }", '        text.filterNot(
    "aeiouAEIOU".contains(_) )', "        def helper(current : String, i : Int, result\
    \ : String) : String = {\n            if (i == text.length) result\n         \
    \   else if (current.contains(text(i))) helper(current, i + 1, result)\n     \
    \       else helper(current + text(i), i + 1, result + text(i))\n        }\n \
    \       helper(\"aeiouAEIOU\", 0, \"\")", "        // iterate over string\n  \
    \      // if character is a vowel then add it to the accumulator\n        // else\
    \ add it to the list of characters\n        // else do nothing\n        var acc\
    \ = new StringBuilder()\n        for (i <- 0 until text.length) {\n          \
    \  if (\"aeiouAEIOU\".contains(text(i))) {\n                acc += text(i)\n \
    \           }\n        }\n        return acc.toString()", "        // TODO: implement\
    \ me\n        \"\"", "        if (text.length == 0) return text\n        else\
    \ if (text.charAt(0) == 'a' || text.charAt(0) == 'e' || text.charAt(0) == 'i'\
    \ || text.charAt(0) == 'o' || text.charAt(0) == 'u') return removeVowels(text.substring(1))\n\
    \        else return text.charAt(0) + removeVowels(text.substring(1))", "    \
    \    val vowels = List('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n   \
    \     var stringWithoutVowels = \"\"\n        for (character <- text) {\n    \
    \        if (!vowels.contains(character)) {\n                stringWithoutVowels\
    \ += character\n            }\n        }\n        stringWithoutVowels", "    \
    \    // your code here \n        return null;", "        var res = \"\"\n    \
    \    for (ch <- text) {\n            if (ch != 'a' && ch != 'e' && ch != 'i' &&\
    \ ch != 'o' && ch != 'u') res += ch\n        }\n        res", "      var lst =\
    \ text.toList\n      for (x <- lst) {\n        if (x == 'a' || x == 'e' || x ==\
    \ 'i' || x == 'o' || x == 'u' || x == 'A' || x == 'E' || x == 'I' || x == 'O'\
    \ || x == 'U') {\n          lst = lst.filterNot(_ == x)\n        }\n      }\n\
    \      return lst.mkString", "        val vowels = List('a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U')\n        var text_list = text.toList\n        var result\
    \ = List[Char]()\n        for (ch <- text_list) if (!vowels.contains(ch)) result\
    \ = result :+ ch\n        result.mkString", "        (text.filter(c => c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c\
    \ != 'I' && c != 'O' && c != 'U'))", "        text.filter(c => List('a', 'e',\
    \ 'i', 'o', 'u').forall(c != _))", "        var vowels = Set('a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U')\n        var result = \"\"\n        for (letter\
    \ <- text) if (!vowels.contains(letter)) result += letter\n        return result",
  '        text.replaceAll("[aeiouAEIOU]", "")', "        text.filter((c : Char) =>\
    \ !List('a', 'e', 'i', 'o', 'u').contains(c))", "        def removeVowels(text\
    \ : String, acc : String) : String = {\n            if (text.length == 0) return\
    \ acc\n            else if (\"aeiouAEIOU\".contains(text(0))) return removeVowels(text.substring(1),\
    \ acc)\n            else return removeVowels(text.substring(1), acc + text(0))\n\
    \        }\n        return removeVowels(text, \"\")", "        var result : String\
    \ = \"\"\n        var letters : String = \"aeiouAEIOU\"\n        for (c <- text)\
    \ {\n            if (!letters.contains(c)) {\n                result += c\n  \
    \          }\n        }\n        return result", "        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        text.filter(!vowels.contains(_))",
  "        val VOWELS = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  \
    \      text.filterNot(VOWELS.contains(_))", "        // for each character in\
    \ the text, check if it is a vowel, if so then remove it\n        var new_text\
    \ = \"\";\n        for (i <- 0 until text.length()) {\n            if (text(i)\
    \ != 'a' && text(i) != 'e' && text(i) != 'i' && text(i) != 'o' && text(i) != 'u')\
    \ {\n                new_text += text(i);\n            }\n        }\n        return\
    \ new_text;", "        val vowels = \"aeiou\"\n        return text.filterNot(vowels.contains(_))",
  '        return text.filter(!_.isLetter || ! "aeiouAEIOU".contains(_))', "     \
    \   if (text.isEmpty) return text\n        val c = text.charAt(0)\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U') return removeVowels(text.substring(1))\n\
    \        return c + removeVowels(text.substring(1))", "        var new_text =\
    \ \"\"\n        for (i <- 0 until text.length) {\n            if (text(i) != 'a'\
    \ && text(i) != 'e' && text(i) != 'i' && text(i) != 'o' && text(i) != 'u') {\n\
    \                new_text += text(i)\n            }\n        }\n        return\
    \ new_text", "      var vowels = \"aeiouAEIOU\"\n      var result = \"\"\n   \
    \   for (c <- text) {\n        if (!vowels.contains(c)) {\n          result +=\
    \ c\n        }\n      }\n      return result", "        var vowels = List(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        var\
    \ sb = new StringBuilder()\n        text.foreach { c => if (!vowels.contains(c.toString))\
    \ sb.append(c) }\n        sb.toString", "        var result = \"\"\n        for\
    \ (i <- 0 until text.length) {\n            if (List('a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U').indexOf(text(i)) == -1) result += text(i)\n       \
    \ }\n        return result", '        ""', "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        text.filter(x => !vowels.contains(x))",
  "        var result = \"\"\n        for (i <- 0 until text.length()) {\n       \
    \     if (isVowel(text(i)) == false) {\n                result += text(i)\n  \
    \          }\n        }\n        return result", "        if (text.length() ==\
    \ 0) {\n            return \"\"\n        }\n        else {\n            if (List('a',\
    \ 'e', 'i', 'o', 'u').contains(text(0))) {\n                return removeVowels(text.substring(1))\n\
    \            }\n            else {\n                return text(0) + removeVowels(text.substring(1))\n\
    \            }\n        }", '        return text.replaceAll("a", "").replaceAll("e",
    "").replaceAll("i", "").replaceAll("o", "").replaceAll("u", "")', "        var\
    \ result = \"\"\n        for (i <- 0 until text.length()) {\n            if (!List('a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U').contains(text(i))) {\n        \
    \        result += text(i)\n            }\n        }\n        return result",
  '        text.replaceAll("[aeiou]", "")', "        // Note that I use ListBuffer\
    \ because I append to the result string.\n        val result = new ListBuffer[Char]()\n\
    \        for (letter <- text) {\n            if (!(letter == 'a' || letter ==\
    \ 'e' || letter == 'i' || letter == 'o' || letter == 'u')) {\n               \
    \ result += letter\n            }\n        }\n        result.mkString", "    \
    \  val vowels = \"aeiou\"\n      text.filter(vowels.contains(_) == false)", " \
    \       var vowels = \"aeiouAEIOU\"\n        var newText = \"\"\n        for (i\
    \ <- 0 until text.length) {\n            if (!vowels.contains(text(i))) {\n  \
    \              newText += text(i)\n            }\n        }\n        return newText",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  \
    \      text.filter(c => !vowels.contains(c))", "        // Fill here!\n      \
    \  \"abcdef\"", "        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U')\n        text.filterNot(ch => vowels(ch))", "        val vowels =\
    \ Array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n\
    \        text.filterNot(vowels.contains(_))", '        text.filter(!_.toLower.matches("[aeiou]"))',
  "        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  \
    \      var result = new StringBuilder\n        for (c <- text) {\n           \
    \ if (!vowels.contains(c)) result += c\n        }\n        result.toString", '        return
    text.filterNot(c => "aeiouAEIOU".contains(c))', "        if (text.length == 0)\
    \ {\n            return text\n        }\n        var i = 0\n        var list =\
    \ ListBuffer[Char]()\n        while (i < text.length) {\n            if (text(i)\
    \ != 'a' && text(i) != 'e' && text(i) != 'i' && text(i) != 'o' && text(i) != 'u')\
    \ {\n                list += text(i)\n            }\n            i += 1\n    \
    \    }\n        list.mkString", "        text.filter(c => c.toLower != 'a' &&\
    \ c.toLower != 'e' && c.toLower != 'i' && c.toLower != 'o' && c.toLower != 'u')",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  \
    \      text.filterNot(vowels)", "        var result = new StringBuilder()\n  \
    \      var vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  \
    \      for (c <- text) {\n            if (!vowels.contains(c)) result += c\n \
    \       }\n        return result.toString()", "        val vowels = \"AEIOUaeiou\"\
    \n        var result = \"\"\n        for (c <- text) {\n            if (!vowels.contains(c))\
    \ {\n                result += c\n            }\n        }\n        return result",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n\
    \        text.filterNot(vowels.contains(_))", "        if (text.length == 0) {\n\
    \            return text\n        }\n        else {\n            var c : Char\
    \ = text.charAt(0)\n            var tail : String = text.substring(1)\n      \
    \      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                return removeVowels(tail)\n\
    \            }\n            else {\n                return c + removeVowels(tail)\n\
    \            }\n        }", "      def _removeVowels(index : Int, text : String,\
    \ vowels : Set[Char], res : String) : String = {\n        if (index == text.length)\
    \ res\n        else {\n          if (vowels.contains(text(index))) _removeVowels(index\
    \ + 1, text, vowels, res)\n          else _removeVowels(index + 1, text, vowels,\
    \ res + text(index))\n        }\n      }\n      _removeVowels(0, text, Set('a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'), \"\")", "        var res = \"\"\
    ;\n        var vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\");\n        text.foreach(x\
    \ => if (!vowels.contains(x.toLower)) res += x);\n        return res;", "    \
    \    var newtext = text\n        for (ch <- \"aeiouAEIOU\") {\n            newtext\
    \ = newtext.replace(ch, \"\")\n        }\n        return newtext", "        var\
    \ result = \"\"\n        for (ch <- text) {\n            if (!Set('a', 'e', 'i',\
    \ 'o', 'u').contains(ch)) {\n                result += ch\n            }\n   \
    \     }\n        result", "        var vowels : String = \"aeiouAEIOU\"\n    \
    \    var result : String = \"\"\n        for (ch <- text) {\n            if (!vowels.contains(ch))\
    \ {\n                result += ch\n            }\n        }\n        return result",
  "        var vset = Set[Char]('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n\
    \        var res = new StringBuilder\n        for (c <- text) {\n            if\
    \ (!vset.contains(c)) {\n                res += c\n            }\n        }\n\
    \        return res.toString", "        if (text.length == 0) return \"\"\n  \
    \      val head = text.charAt(0)\n        if (head == 'a' || head == 'e' || head\
    \ == 'i' || head == 'o' || head == 'u') return removeVowels(text.tail)\n     \
    \   return head + removeVowels(text.tail)", "        // This a regular expression\
    \ that will match vowels.\n        val vowelRegEx = \"[aeiouAEIOU]\".r\n     \
    \   // This is a regular expression that will match characters that are not vowels.\n\
    \        val notVowelRegEx = \"[^aeiouAEIOU]\".r\n        // Code goes here\n\
    \        // CODE_HERE\n        null", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        val textArray = text.toCharArray\n\
    \        var result = \"\"\n        textArray.foreach(letter => if (!vowels.contains(letter))\
    \ result += letter)\n        result", "        text.filter(x => x != 'a' && x\
    \ != 'e' && x != 'i' && x != 'o' && x != 'u' && x != 'A' && x != 'E' && x != 'I'\
    \ && x != 'O' && x != 'U')", "        if (text.length == 0) return text\n    \
    \    else {\n            if (\"aeiouAEIOU\".contains(text(0))) return removeVowels(text.substring(1))\n\
    \            else return text(0) + removeVowels(text.substring(1))\n        }",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  \
    \      var result = \"\"\n        for (i <- 0 until text.length) {\n         \
    \   if (!vowels.contains(text(i))) result += text(i)\n        }\n        result",
  "        return text.filter(x => x != 'a' && x != 'e' && x != 'i' && x != 'o' &&\
    \ x != 'u' && x != 'A' && x != 'E' && x != 'I' && x != 'O' && x != 'U')", "  \
    \      val vowels = List('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n \
    \       var result = \"\"\n        for (i <- 0 until text.length()) {\n      \
    \      if (!vowels.contains(text(i))) result += text(i)\n        }\n        result",
  "        return text.toLowerCase.filter(!List('a', 'e', 'i', 'o', 'u').contains(_))",
  '        return text.replaceAll("[aeiou]", "")', "        text.toList.filter(!List('a',\
    \ 'e', 'i', 'o', 'u').contains(_)).mkString", "        val VOWELS = Set('a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        val buffer = new StringBuilder\n\
    \        for (c <- text) {\n            if (!VOWELS.contains(c)) buffer.append(c)\n\
    \        }\n        buffer.toString", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        val withoutVowels = for (char <-\
    \ text if !vowels.contains(char)) yield char\n        withoutVowels.mkString",
  '        return text.filterNot("aeiouAEIOU".contains(_))', "      var text_wo_vowels\
    \ = new StringBuilder()\n      for (i <- 0 until text.length) {\n        var c\
    \ = text.charAt(i)\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n  \
    \        text_wo_vowels += c\n        }\n      }\n      return text_wo_vowels.toString()",
  "        val vowels = ('a' to 'z').filter(x => \"aeiou\".contains(x))\n        return\
    \ text.filter(x => !vowels.contains(x))", "        var temp : String = \"\"\n\
    \        for (char <- text) {\n            if (!List('a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U').contains(char)) {\n                temp += char\n \
    \           }\n        }\n        return temp", "        var res = text\n    \
    \    List(\"a\", \"e\", \"i\", \"o\", \"u\").foreach( c => res = res.replaceAll(c,\
    \ \"\"))\n        res", "        var res = \"\";\n        for (ch <- text) {\n\
    \            if (!ch.isLetter) res += ch;\n            else if (ch.toLower !=\
    \ 'a' && ch.toLower != 'e' && ch.toLower != 'i' && ch.toLower != 'o' && ch.toLower\
    \ != 'u') res += ch;\n        }\n        return res;", "        text.filterNot(x\
    \ => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'A' || x\
    \ == 'E' || x == 'I' || x == 'O' || x == 'U')", "        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        var\
    \ result = List[String]()\n        for (char <- text) {\n            if (!vowels.contains(char.toString))\
    \ {\n                result = result :+ char.toString\n            }\n       \
    \ }\n        result.mkString", "        var result = text\n        for (c <- \"\
    aeiouAEIOU\") {\n            result = result.replace(c.toString, \"\")\n     \
    \   }\n        return result", "        // replaceAll(\"[aeiou]\", \"\")\n   \
    \     var result : String = \"\"\n        for (i <- 0 until text.length) {\n \
    \           if (text(i) != 'a' && text(i) != 'e' && text(i) != 'i' && text(i)\
    \ != 'o' && text(i) != 'u') {\n                result += text(i)\n           \
    \ }\n        }\n        return result", "        val r = \"\"\"[aeiouAEIOU]\"\"\
    \".r\n        return r.replaceAllIn(text, \"\")", '        return text.replaceAll("[aeiouAEIOU]",
    "")', "        val vowels = \"aeiou\"\n        val textWithVowelsRemoved = new\
    \ StringBuilder()\n        for (i <- 0 until text.length) {\n            if (!vowels.contains(text(i)))\
    \ {\n                textWithVowelsRemoved.append(text(i))\n            }\n  \
    \      }\n        textWithVowelsRemoved.toString()", '        return text.replaceAll("[AEIOUaeiou]",
    "")', "        text.filter(!List('a', 'e', 'i', 'o', 'u').contains(_))", "   \
    \     val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n   \
    \     var newText = \"\"\n        for (l <- text) {\n            if (!vowels.contains(l))\
    \ newText += l\n        }\n        newText", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        text.filter(c => !vowels.contains(c))",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  \
    \      return text.filterNot(vowels.contains(_))", "        def takeVowels(text\
    \ : String) : String = {\n            text.filter(!Set('a', 'e', 'i', 'o', 'u').contains(_))\n\
    \        }\n        takeVowels(text.toLowerCase)", "        // I don't know how\
    \ to write this function.\n        \"\"", "        text.filter(c => !c.toLowerCase.equals('a')\
    \ && !c.toLowerCase.equals('e') && !c.toLowerCase.equals('i') && !c.toLowerCase.equals('o')\
    \ && !c.toLowerCase.equals('u'))", "        text.filter(_ != 'a').filter(_ !=\
    \ 'e').filter(_ != 'i').filter(_ != 'o').filter(_ != 'u')", "        text.filterNot(List('a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U').contains(_))", "        def isVowel(c\
    \ : Char) : Boolean = {\n            val vowels = \"aeiou\"\n            for (i\
    \ <- 0 until vowels.length) {\n                if (c == vowels(i)) {\n       \
    \             return true\n                }\n            }\n            return\
    \ false\n        }\n        val sb = new StringBuilder()\n        for (i <- 0\
    \ until text.length) {\n            if (!isVowel(text(i))) {\n               \
    \ sb.append(text(i))\n            }\n        }\n        return sb.toString()",
  "        var temp : String = \"\"\n        for (i <- 0 until text.length) {\n  \
    \          if (!(\"aeiouAEIOU\".contains(text(i)))) temp += text(i)\n        }\n\
    \        return temp", "        def helper(s : String) : String = {\n        \
    \    if (s.isEmpty) s\n            else if (s.head == 'a' || s.head == 'e' ||\
    \ s.head == 'i' || s.head == 'o' || s.head == 'u') helper(s.tail)\n          \
    \  else s.head + helper(s.tail)\n        }\n        helper(text)", "        var\
    \ str = \"\"\n        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    A\", \"E\", \"I\", \"O\", \"U\")\n        for (c <- text.split(\"\")) {\n    \
    \        if (!vowels.contains(c)) str += c\n        }\n        str", "       \
    \ val vowels = \"aeiouAEIOU\"\n        text.filter(!vowels.contains(_))", "  \
    \      if (text.isEmpty) \"\"\n        else {\n            val head = text.head\n\
    \            val tail = text.tail\n            if (head == 'a' || head == 'e'\
    \ || head == 'i' || head == 'o' || head == 'u') removeVowels(tail)\n         \
    \   else head + removeVowels(tail)\n        }", "        val vowels = Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        text.filterNot(vowels)",
  "        var mutableText = text.toCharArray\n        var index = 0\n        while\
    \ (index < mutableText.length) {\n            if (\"aeiouAEIOU\".contains(mutableText(index)))\
    \ {\n                mutableText = mutableText.patch(index, Nil, 1)\n        \
    \    } else {\n                index += 1\n            }\n        }\n        mutableText.mkString",
  "        if (text.length == 0) return \"\"\n        if (text.charAt(0) == 'a' ||\
    \ text.charAt(0) == 'e' || text.charAt(0) == 'i' || text.charAt(0) == 'o' || text.charAt(0)\
    \ == 'u') return removeVowels(text.substring(1))\n        return text.charAt(0)\
    \ + removeVowels(text.substring(1))", "      val vowels = List('a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n      val noVowels = new ListBuffer[Char]()\n\
    \      for (letter <- text) {\n        if (!vowels.contains(letter)) {\n     \
    \     noVowels += letter\n        }\n      }\n      noVowels.mkString", "    \
    \    // Counts the number of vowels in a string.\n        val vowels = \"aeiouAEIOU\"\
    \n        val nonVowels = text.filter(c => !vowels.contains(c))\n        return\
    \ nonVowels", "        var result : String = \"\"\n        for (i <- 0 until text.length)\
    \ {\n            if (\"aeiouAEIOU\".indexOf(text(i)) == -1) result += text(i)\n\
    \        }\n        return result", "        val vowels = List('a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        return text.filter(letter => !vowels.contains(letter))",
  '        text.filter(isConsonant(_))', "        var textN = \"\"\n        for (i\
    \ <- 0 until text.length) {\n            if (!Set('a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U').contains(text(i))) {\n                textN += text(i)\n\
    \            }\n        }\n        textN", "        val vowels = Map('a' -> true,\
    \ 'e' -> true, 'i' -> true, 'o' -> true, 'u' -> true)\n        val nonVowels =\
    \ text.toCharArray.filter(x => !vowels.contains(x))\n        val nonVowelsString\
    \ = new String(nonVowels)\n        nonVowelsString", '        return text.replaceAll("[aeiouAEIOU]",
    "")', "        val vowel = Map('a' -> true, 'e' -> true, 'i' -> true, 'o' -> true,\
    \ 'u' -> true)\n        text.toCharArray.filter(!vowel.contains(_)).mkString",
  '        text.toLowerCase.filter(!isVowel(_))', "        text.filter(c => c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c\
    \ != 'I' && c != 'O' && c != 'U')", '        text.replaceAll("[aeiou]", "")',
  "        var res = \"\";\n        for (i <- 0 until text.length) {\n           \
    \ if (\"aeiouAEIOU\".indexOf(text(i)) < 0) {\n                res += text(i);\n\
    \            }\n        }\n        return res;", '        text.filter(_.toString.matches("[^aeiouAEIOU]"))',
  "        text.toLowerCase.filter(x => 'a' <= x && x <= 'z' && x != 'a' && x != 'e'\
    \ && x != 'i' && x != 'o' && x != 'u')", "      var text_without_vowels = text\n\
    \      for (vowel <- Array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'))\n\
    \        text_without_vowels = text_without_vowels.replace(vowel.toString, \"\"\
    )\n      return text_without_vowels", '        text.toLowerCase.filter( c => !c.isLetter
    || c.isVowel == false)', "        text.filter(x => (x == 'a' || x == 'e' || x\
    \ == 'i' || x == 'o' || x == 'u') == false).filter(x => (x == 'A' || x == 'E'\
    \ || x == 'I' || x == 'O' || x == 'U') == false)", "        val vowels = \"aeiouAEIOU\"\
    \n        text.filter(c => !vowels.contains(c))", '      text.filter(c => "aeiouAEIOU".indexOf(c)
    == -1)', "        text.filter(x => !(x == 'a' || x == 'e' || x == 'i' || x ==\
    \ 'o' || x == 'u' || x == 'A' || x == 'E' || x == 'I' || x == 'O' || x == 'U'))",
  "        if (text.length == 0) return text\n        val v = List(\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        if (v.contains(text.charAt(0).toString))\
    \ return removeVowels(text.substring(1))\n        text.charAt(0) + removeVowels(text.substring(1))",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  \
    \      var nonvowels = \"\"\n        for (c <- text) if (!vowels.contains(c))\
    \ nonvowels += c\n        nonvowels", "        val vowels = Array(\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        var text_vowel_free\
    \ = text\n        for (vowel <- vowels) {\n            text_vowel_free = text_vowel_free.replaceAll(vowel,\
    \ \"\")\n        }\n        return text_vowel_free", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        text.filterNot(vowels.contains(_))",
  "        // returns string without vowels.\n        text.filter(c => \"aeiouAEIOU\"\
    .indexOf(c) == -1)", "        var ans = \"\"\n        for (i <- 0 until text.length)\
    \ {\n            if (\"aeiouAEIOU\".indexOf(text(i)) == -1) {\n              \
    \  ans += text(i)\n            }\n        }\n        return ans", '        return
    text.replaceAll("[aeiou]", "")', "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U')\n        text.filterNot(vowels.contains(_))",
  "        return text.filter(!List('a', 'e', 'i', 'o', 'u').contains(_))", '        return
    text.replaceAll("[aAeEiIoOuU]", "")', "        if (text.length <= 0) \"\"\n  \
    \      else if (text.head.toLower == 'a' || text.head.toLower == 'e' || text.head.toLower\
    \ == 'i' || text.head.toLower == 'o' || text.head.toLower == 'u')\n          \
    \  removeVowels(text.tail)\n        else text.head + removeVowels(text.tail)",
  "        val regex = \"[AEIOUaeiou]\".r\n        regex.replaceAllIn(text, \"\")",
  "        var s = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"\
    O\", \"U\")\n        var ret = \"\"\n        for (c <- text) {\n            if\
    \ (!s.contains(c.toString)) {\n                ret += c\n            }\n     \
    \   }\n        return ret", '        // add code here', '        return text.replaceAll("[aeiouAEIOU]",
    "")', "        text.filterNot(c => Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U').contains(c))", "        var new_text = text.filter(is_vowel(_) ==\
    \ false)\n        return new_text", "        var l = List[Char]()\n        for\
    \ (c <- text) {\n            if (\"aeiouAEIOU\".indexOf(c) == -1) {\n        \
    \        l = c :: l\n            }\n        }\n        l.reverse.mkString", " \
    \       var buffer = new StringBuilder()\n        for (c <- text if \"bcdfghjklmnpqrstvwxyz\"\
    .contains(c.toLower)) buffer += c\n        buffer.toString"]
stop_tokens:
- "\n    }\n"
