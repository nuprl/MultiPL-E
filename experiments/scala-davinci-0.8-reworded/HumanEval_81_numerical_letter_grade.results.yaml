language: scala
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades : List[String] = List()\n     \
    \   grades.foreach(\n            grade => {\n                grade match {\n \
    \                   case g if (g >= 4.0)  => letterGrades = letterGrades :+ \"\
    A+\"\n                    case g if (g >= 3.7)  => letterGrades = letterGrades\
    \ :+ \"A\"\n                    case g if (g >= 3.3)  => letterGrades = letterGrades\
    \ :+ \"A-\"\n                    case g if (g >= 3.0)  => letterGrades = letterGrades\
    \ :+ \"B+\"\n                    case g if (g >= 2.7)  => letterGrades = letterGrades\
    \ :+ \"B\"\n                    case g if (g >= 2.3)  => letterGrades = letterGrades\
    \ :+ \"B-\"\n                    case g if (g >= 2.0)  => letterGrades = letterGrades\
    \ :+ \"C+\"\n                    case g if (g >= 1.7)  => letterGrades = letterGrades\
    \ :+ \"C\"\n                    case g if (g >= 1.3)  => letterGrades = letterGrades\
    \ :+ \"C-\"\n                    case g if (g >= 1.0)  => letterGrades = letterGrades\
    \ :+ \"D+\"\n                    case g if (g >= 0.7)  => letterGrades = letterGrades\
    \ :+ \"D\"\n                    case g if (g >= 0.0)  => letterGrades = letterGrades\
    \ :+ \"D-\"\n                    case g if (g == 0.0)  => letterGrades = letterGrades\
    \ :+ \"E\"\n                }\n            }\n        )\n        letterGrades\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzfs5a14.scala:50)\n\tat Problem.main(tmptzfs5a14.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // your code here\n        val table = Map(\n  \
    \          4.0f -> \"A+\",\n            3.7f -> \"A\",\n            3.3f -> \"\
    A-\",\n            3.0f -> \"B+\",\n            2.7f -> \"B\",\n            2.3f\
    \ -> \"B-\",\n            2.0f -> \"C+\",\n            1.7f -> \"C\",\n      \
    \      1.3f -> \"C-\",\n            1.0f -> \"D+\",\n            0.7f -> \"D\"\
    ,\n            0.0f -> \"D-\",\n            -1.0f -> \"E\"\n        )\n      \
    \  return grades.map(i => {\n            var grade = \"F\"\n            table.map(t\
    \ => {\n                if (i >= t._1) {\n                    grade = t._2\n \
    \               }\n            })\n            grade\n        })\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnziiwsxr.scala:54)\n\tat Problem.main(tmpnziiwsxr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here.\n        return null;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.numericalLetterGrade(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmpycuv0cpy.scala:31)\n\tat Problem.main(tmpycuv0cpy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // TODO\n        return null\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.numericalLetterGrade(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmpakj0q8nk.scala:31)\n\tat Problem.main(tmpakj0q8nk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // your solution here\n        Nil\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv4diaar4.scala:31)\n\tat Problem.main(tmpv4diaar4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var result = List[String]()\n        for (grade\
    \ <- grades) {\n            if (grade == 4.0) {\n                result = result\
    \ :+ \"A+\"\n            } else if (grade >= 3.7) {\n                result =\
    \ result :+ \"A\"\n            } else if (grade >= 3.3) {\n                result\
    \ = result :+ \"A-\"\n            } else if (grade >= 3.0) {\n               \
    \ result = result :+ \"B+\"\n            } else if (grade >= 2.7) {\n        \
    \        result = result :+ \"B\"\n            } else if (grade >= 2.3) {\n  \
    \              result = result :+ \"B-\"\n            } else if (grade >= 2.0)\
    \ {\n                result = result :+ \"C+\"\n            } else if (grade >=\
    \ 1.7) {\n                result = result :+ \"C\"\n            } else if (grade\
    \ >= 1.3) {\n                result = result :+ \"C-\"\n            } else if\
    \ (grade >= 1.0) {\n                result = result :+ \"D+\"\n            } else\
    \ if (grade >= 0.7) {\n                result = result :+ \"D\"\n            }\
    \ else if (grade >= 0.0) {\n                result = result :+ \"D-\"\n      \
    \      } else {\n                result = result :+ \"E\"\n            }\n   \
    \     }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpif7vavxw.scala:60)\n\tat Problem.main(tmpif7vavxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        def loop(lst : List[Float], acc : List[String])\
    \ : List[String] = {\n            if (lst.isEmpty) acc\n            else if (lst.head\
    \ >= 4.0) loop(lst.tail, acc :+ \"A+\")\n            else if (lst.head >= 3.7)\
    \ loop(lst.tail, acc :+ \"A\")\n            else if (lst.head >= 3.3) loop(lst.tail,\
    \ acc :+ \"A-\")\n            else if (lst.head >= 3.0) loop(lst.tail, acc :+\
    \ \"B+\")\n            else if (lst.head >= 2.7) loop(lst.tail, acc :+ \"B\")\n\
    \            else if (lst.head >= 2.3) loop(lst.tail, acc :+ \"B-\")\n       \
    \     else if (lst.head >= 2.0) loop(lst.tail, acc :+ \"C+\")\n            else\
    \ if (lst.head >= 1.7) loop(lst.tail, acc :+ \"C\")\n            else if (lst.head\
    \ >= 1.3) loop(lst.tail, acc :+ \"C-\")\n            else if (lst.head >= 1.0)\
    \ loop(lst.tail, acc :+ \"D+\")\n            else if (lst.head >= 0.7) loop(lst.tail,\
    \ acc :+ \"D\")\n            else if (lst.head >= 0.0) loop(lst.tail, acc :+ \"\
    D-\")\n            else loop(lst.tail, acc :+ \"E\")\n        }\n        loop(grades,\
    \ List[String]())\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb3nzxkgd.scala:46)\n\tat Problem.main(tmpb3nzxkgd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var l = List[String]()\n        for (g <- grades)\
    \ {\n            if (g == 4.0) l = l :+ \"A+\"\n            else if (g > 3.7)\
    \ l = l :+ \"A\"\n            else if (g > 3.3) l = l :+ \"A-\"\n            else\
    \ if (g > 3.0) l = l :+ \"B+\"\n            else if (g > 2.7) l = l :+ \"B\"\n\
    \            else if (g > 2.3) l = l :+ \"B-\"\n            else if (g > 2.0)\
    \ l = l :+ \"C+\"\n            else if (g > 1.7) l = l :+ \"C\"\n            else\
    \ if (g > 1.3) l = l :+ \"C-\"\n            else if (g > 1.0) l = l :+ \"D+\"\n\
    \            else if (g > 0.7) l = l :+ \"D\"\n            else if (g > 0.0) l\
    \ = l :+ \"D-\"\n            else l = l :+ \"E\"\n        }\n        l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjydom7gq.scala:46)\n\tat Problem.main(tmpjydom7gq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n    \t\tvar list: List[String] = List()\n    \t\tval result:\
    \ List[Float] = for (grade <- grades) yield grade \n    \t\tfor (grade <- result)\
    \ {\n    \t\t\tif (grade < 0.7f && grade >= 0.0f) {\n    \t\t\t\tlist = list :+\
    \ \"D-\"\n    \t\t\t} else if (grade < 1.0f && grade >= 0.7f) {\n    \t\t\t\t\
    list = list :+ \"D+\"\n    \t\t\t} else if (grade < 1.3f && grade >= 1.0f) {\n\
    \    \t\t\t\tlist = list :+ \"C-\"\n    \t\t\t} else if (grade < 1.7f && grade\
    \ >= 1.3f) {\n    \t\t\t\tlist = list :+ \"C\"\n    \t\t\t} else if (grade < 2.0f\
    \ && grade >= 1.7f) {\n    \t\t\t\tlist = list :+ \"C+\"\n    \t\t\t} else if\
    \ (grade < 2.3f && grade >= 2.0f) {\n    \t\t\t\tlist = list :+ \"B-\"\n    \t\
    \t\t} else if (grade < 2.7f && grade >= 2.3f) {\n    \t\t\t\tlist = list :+ \"\
    B\"\n    \t\t\t} else if (grade < 3.0f && grade >= 2.7f) {\n    \t\t\t\tlist =\
    \ list :+ \"B+\"\n    \t\t\t} else if (grade < 3.3f && grade >= 3.0f) {\n    \t\
    \t\t\tlist = list :+ \"A-\"\n    \t\t\t} else if (grade < 3.7f && grade >= 3.3f)\
    \ {\n    \t\t\t\tlist = list :+ \"A\"\n    \t\t\t} else if (grade <= 4.0f && grade\
    \ >= 3.7f) {\n    \t\t\t\tlist = list :+ \"A+\"\n    \t\t\t} else {\n    \t\t\t\
    \tlist = list :+ \"E\"\n    \t\t\t}\n    \t\t}\n    \t\treturn list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyh5yi7cd.scala:59)\n\tat Problem.main(tmpyh5yi7cd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var result = List[String]()\n        for (x <- grades)\
    \ {\n            if (x == 4.0) {\n                result = result :+ \"A+\"\n\
    \            } else if (x > 3.7) {\n                result = result :+ \"A\"\n\
    \            } else if (x > 3.3) {\n                result = result :+ \"A-\"\n\
    \            } else if (x > 3.0) {\n                result = result :+ \"B+\"\n\
    \            } else if (x > 2.7) {\n                result = result :+ \"B\"\n\
    \            } else if (x > 2.3) {\n                result = result :+ \"B-\"\n\
    \            } else if (x > 2.0) {\n                result = result :+ \"C+\"\n\
    \            } else if (x > 1.7) {\n                result = result :+ \"C\"\n\
    \            } else if (x > 1.3) {\n                result = result :+ \"C-\"\n\
    \            } else if (x > 1.0) {\n                result = result :+ \"D+\"\n\
    \            } else if (x > 0.7) {\n                result = result :+ \"D\"\n\
    \            } else if (x > 0.0) {\n                result = result :+ \"D-\"\n\
    \            } else {\n                result = result :+ \"E\"\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47gde5jn.scala:60)\n\tat Problem.main(tmp47gde5jn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var result : List[String] = Nil\n        grades.foreach(g\
    \ => {\n            if (g >= 4.0) {\n                result = result :+ \"A+\"\
    \n            } else if (g >= 3.7) {\n                result = result :+ \"A\"\
    \n            } else if (g >= 3.3) {\n                result = result :+ \"A-\"\
    \n            } else if (g >= 3.0) {\n                result = result :+ \"B+\"\
    \n            } else if (g >= 2.7) {\n                result = result :+ \"B\"\
    \n            } else if (g >= 2.3) {\n                result = result :+ \"B-\"\
    \n            } else if (g >= 2.0) {\n                result = result :+ \"C+\"\
    \n            } else if (g >= 1.7) {\n                result = result :+ \"C\"\
    \n            } else if (g >= 1.3) {\n                result = result :+ \"C-\"\
    \n            } else if (g >= 1.0) {\n                result = result :+ \"D+\"\
    \n            } else if (g >= 0.7) {\n                result = result :+ \"D\"\
    \n            } else if (g >= 0.0) {\n                result = result :+ \"D-\"\
    \n            } else {\n                result = result :+ \"E\"\n           \
    \ }\n        })\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppjdlwko7.scala:60)\n\tat Problem.main(tmppjdlwko7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here.\n        return List[String]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4rxj2x21.scala:31)\n\tat Problem.main(tmp4rxj2x21.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(x => (x match {\n            case y if\
    \ y >= 4.0 => \"A+\"\n            case y if y >= 3.7 => \"A\"\n            case\
    \ y if y >= 3.3 => \"A-\"\n            case y if y >= 3.0 => \"B+\"\n        \
    \    case y if y >= 2.7 => \"B\"\n            case y if y >= 2.3 => \"B-\"\n \
    \           case y if y >= 2.0 => \"C+\"\n            case y if y >= 1.7 => \"\
    C\"\n            case y if y >= 1.3 => \"C-\"\n            case y if y >= 1.0\
    \ => \"D+\"\n            case y if y >= 0.7 => \"D\"\n            case y if y\
    \ >= 0.0 => \"D-\"\n            case y if y >= 0.0 => \"E\"\n        }))\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps0piltct.scala:44)\n\tat Problem.main(tmps0piltct.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades = List[String]()\n        for (i\
    \ <- grades) {\n            if (i >= 4.0) {\n                letterGrades = letterGrades\
    \ :+ \"A+\"\n            } else if (i >= 3.7) {\n                letterGrades\
    \ = letterGrades :+ \"A\"\n            } else if (i >= 3.3) {\n              \
    \  letterGrades = letterGrades :+ \"A-\"\n            } else if (i >= 3.0) {\n\
    \                letterGrades = letterGrades :+ \"B+\"\n            } else if\
    \ (i >= 2.7) {\n                letterGrades = letterGrades :+ \"B\"\n       \
    \     } else if (i >= 2.3) {\n                letterGrades = letterGrades :+ \"\
    B-\"\n            } else if (i >= 2.0) {\n                letterGrades = letterGrades\
    \ :+ \"C+\"\n            } else if (i >= 1.7) {\n                letterGrades\
    \ = letterGrades :+ \"C\"\n            } else if (i >= 1.3) {\n              \
    \  letterGrades = letterGrades :+ \"C-\"\n            } else if (i >= 1.0) {\n\
    \                letterGrades = letterGrades :+ \"D+\"\n            } else if\
    \ (i >= 0.7) {\n                letterGrades = letterGrades :+ \"D\"\n       \
    \     } else if (i >= 0.0) {\n                letterGrades = letterGrades :+ \"\
    D-\"\n            } else {\n                letterGrades = letterGrades :+ \"\
    E\"\n            }\n        }\n        letterGrades\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwj1uqmr1.scala:60)\n\tat Problem.main(tmpwj1uqmr1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades : List[String] = List()\n     \
    \   for (grade <- grades) {\n            var letterGrade : String = \"\"\n   \
    \         if (grade >= 4.0) {\n                letterGrade = \"A+\"\n        \
    \    } else if (grade >= 3.7) {\n                letterGrade = \"A\"\n       \
    \     } else if (grade >= 3.3) {\n                letterGrade = \"A-\"\n     \
    \       } else if (grade >= 3.0) {\n                letterGrade = \"B+\"\n   \
    \         } else if (grade >= 2.7) {\n                letterGrade = \"B\"\n  \
    \          } else if (grade >= 2.3) {\n                letterGrade = \"B-\"\n\
    \            } else if (grade >= 2.0) {\n                letterGrade = \"C+\"\n\
    \            } else if (grade >= 1.7) {\n                letterGrade = \"C\"\n\
    \            } else if (grade >= 1.3) {\n                letterGrade = \"C-\"\n\
    \            } else if (grade >= 1.0) {\n                letterGrade = \"D+\"\n\
    \            } else if (grade >= 0.7) {\n                letterGrade = \"D\"\n\
    \            } else if (grade >= 0.0) {\n                letterGrade = \"D-\"\n\
    \            } else {\n                letterGrade = \"E\"\n            }\n  \
    \          letterGrades = letterGrades :+ letterGrade\n        }\n        return\
    \ letterGrades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpss3v8tow.scala:62)\n\tat Problem.main(tmpss3v8tow.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in your implementation here\n        val\
    \ a = List(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\"\
    , \"D+\", \"D\", \"D-\", \"E\")\n        val b = List(4.0f, 3.7f, 3.3f, 3.0f,\
    \ 2.7f, 2.3f, 2.0f, 1.7f, 1.3f, 1.0f, 0.7f, 0.0f, 0.0f)\n        def helper(g:List[Float],\
    \ z:Int) : List[String] = {\n          if (g.isEmpty) Nil\n          else if (g.head\
    \ > b(z)) a(z) :: helper(g.tail, z)\n          else helper(g.tail, z+1)\n    \
    \    }\n        helper(grades, 0)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwxykoc9p.scala:38)\n\tat Problem.main(tmpwxykoc9p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(x => (\n            if (x == 4.0)\n \
    \               \"A+\"\n            else if (x > 3.7)\n                \"A\"\n\
    \            else if (x > 3.3)\n                \"A-\"\n            else if (x\
    \ > 3.0)\n                \"B+\"\n            else if (x > 2.7)\n            \
    \    \"B\"\n            else if (x > 2.3)\n                \"B-\"\n          \
    \  else if (x > 2.0)\n                \"C+\"\n            else if (x > 1.7)\n\
    \                \"C\"\n            else if (x > 1.3)\n                \"C-\"\n\
    \            else if (x > 1.0)\n                \"D+\"\n            else if (x\
    \ > 0.7)\n                \"D\"\n            else if (x > 0.0)\n             \
    \   \"D-\"\n            else\n                \"E\"\n        ))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_6_mft5t.scala:57)\n\tat Problem.main(tmp_6_mft5t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp65fitaig.scala:26:68\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m    \e[33mdef\e[0m \e[36mnumericalLetterGrade\e\
    [0m(\e[36mgrades\e[0m : \e[35mList\e[0m[\e[35mFloat\e[0m]) : \e[35mList\e[0m[\e\
    [35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                                  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                                    Required: List[String]\n\e[31m27 |\e[0m \
    \       \e[34m// Write your code here.\e[0m\n\e[31m28 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Create the list of letter grades from the given\
    \ table\n        val letters = List(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\"\
    , \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\")\n        // Create the\
    \ list of criteria based on the given table\n        val criteria = List(4.0f,\
    \ 3.7f, 3.3f, 3.0f, 2.7f, 2.3f, 2.0f, 1.7f, 1.3f, 1.0f, 0.7f, 0.0f, 0.0f)\n  \
    \      // Create an empty list of grades\n        var gradeList = List[String]()\n\
    \        // For each given grade,\n        for (i <- 0 until grades.length) {\n\
    \            // Create a temporary variable that is equivalent to the grade\n\
    \            var tempGrade = grades(i)\n            // While the temporary grade\
    \ is greater than 0,\n            while (tempGrade > 0) {\n                //\
    \ For each letter grade,\n                for (k <- 0 until letters.length) {\n\
    \                    // If the temporary grade is greater than or equal to a given\
    \ criteria,\n                    if (tempGrade >= criteria(k)) {\n           \
    \             // Add the letter grade to the list of letter grades\n         \
    \               gradeList = gradeList :+ letters(k)\n                        //\
    \ Continue the loop\n                        tempGrade = -1\n                \
    \    }\n                }\n            }\n        }\n        // Return the list\
    \ of letter grades\n        return gradeList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpke4k0nsa.scala:55)\n\tat Problem.main(tmpke4k0nsa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        return grades.map(x => \n            if (x == 4)\
    \ \"A+\"\n            else if (x > 3.7) \"A\"\n            else if (x > 3.3) \"\
    A-\"\n            else if (x > 3) \"B+\"\n            else if (x > 2.7) \"B\"\n\
    \            else if (x > 2.3) \"B-\"\n            else if (x > 2) \"C+\"\n  \
    \          else if (x > 1.7) \"C\"\n            else if (x > 1.3) \"C-\"\n   \
    \         else if (x > 1) \"D+\"\n            else if (x > 0.7) \"D\"\n      \
    \      else if (x > 0) \"D-\"\n            else \"E\"\n        )\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0mttrj3j.scala:44)\n\tat Problem.main(tmp0mttrj3j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // put your code here\n        return List[String]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp82lvw6hl.scala:31)\n\tat Problem.main(tmp82lvw6hl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        def index_to_string(i : Int) : String = i match\
    \ {\n            case 0 => \"A+\"\n            case 1 => \"A\"\n            case\
    \ 2 => \"A-\"\n            case 3 => \"B+\"\n            case 4 => \"B\"\n   \
    \         case 5 => \"B-\"\n            case 6 => \"C+\"\n            case 7 =>\
    \ \"C\"\n            case 8 => \"C-\"\n            case 9 => \"D+\"\n        \
    \    case 10 => \"D\"\n            case 11 => \"D-\"\n            case 12 => \"\
    E\"\n        }\n        def index_to_gpa(i : Int) : Float = i match {\n      \
    \      case 0 => 4.0f\n            case 1 => 3.7f\n            case 2 => 3.3f\n\
    \            case 3 => 3.0f\n            case 4 => 2.7f\n            case 5 =>\
    \ 2.3f\n            case 6 => 2.0f\n            case 7 => 1.7f\n            case\
    \ 8 => 1.3f\n            case 9 => 1.0f\n            case 10 => 0.7f\n       \
    \     case 11 => 0.0f\n            case 12 => 0.0f\n        }\n        def index_of_gpa(gpa\
    \ : Float) : Int = {\n            (13 to 0 by -1).find(i => gpa >= index_to_gpa(i)).get\n\
    \        }\n        grades.map(gpa => index_to_string(index_of_gpa(gpa)))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 13 (of class java.lang.Integer)\n\tat Problem$.index_to_gpa$1(tmpdskpg0tf.scala:55)\n\
    \tat Problem$.index_of_gpa$1$$anonfun$1(tmpdskpg0tf.scala:58)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\
    \tat scala.collection.IterableOnceOps.find(IterableOnce.scala:622)\n\tat scala.collection.IterableOnceOps.find$(IterableOnce.scala:618)\n\
    \tat scala.collection.AbstractIterable.find(Iterable.scala:926)\n\tat Problem$.index_of_gpa$1(tmpdskpg0tf.scala:58)\n\
    \tat Problem$.numericalLetterGrade$$anonfun$1(tmpdskpg0tf.scala:60)\n\tat Problem$.numericalLetterGrade$$anonfun$adapted$1(tmpdskpg0tf.scala:60)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.numericalLetterGrade(tmpdskpg0tf.scala:60)\n\
    \tat Problem$.main(tmpdskpg0tf.scala:63)\n\tat Problem.main(tmpdskpg0tf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGeneri"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradeMap = Map[Float, String](\n           \
    \ 4.0f -> \"A+\",\n            3.7f -> \"A\",\n            3.3f -> \"A-\",\n \
    \           3.0f -> \"B+\",\n            2.7f -> \"B\",\n            2.3f -> \"\
    B-\",\n            2.0f -> \"C+\",\n            1.7f -> \"C\",\n            1.3f\
    \ -> \"C-\",\n            1.0f -> \"D+\",\n            0.7f -> \"D\",\n      \
    \      0.0f -> \"D-\",\n            -0.01f -> \"E\"\n        )\n        grades.map(x\
    \ => {\n            val iter = gradeMap.keys.toList.sorted.iterator\n        \
    \    var grade = \"E\"\n            while (iter.hasNext) {\n                val\
    \ key = iter.next\n                if (x >= key) {\n                    grade\
    \ = gradeMap(key)\n                }\n            }\n            grade\n     \
    \   })\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxl42x9am.scala:55)\n\tat Problem.main(tmpxl42x9am.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(g => if (g > 3.7) \"A+\" else if (g >\
    \ 3.3) \"A\" else if (g > 3.0) \"A-\" else if (g > 2.7) \"B+\" else if (g > 2.3)\
    \ \"B\" else if (g > 2.0) \"B-\" else if (g > 1.7) \"C+\" else if (g > 1.3) \"\
    C\" else if (g > 1.0) \"C-\" else if (g > 0.7) \"D+\" else if (g > 0.0) \"D\"\
    \ else if (g == 0.0) \"E\" else \"F\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpym920aul.scala:30)\n\tat Problem.main(tmpym920aul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n    \tvar numericalLetterGrade : List[String] = List()\n\
    \    \tfor (x <- grades) {\n    \t\tif (x >= 4.0) {\n    \t\t\tnumericalLetterGrade\
    \ = numericalLetterGrade :+ \"A+\"\n    \t\t} else if (x >= 3.7) {\n    \t\t\t\
    numericalLetterGrade = numericalLetterGrade :+ \"A\"\n    \t\t} else if (x >=\
    \ 3.3) {\n    \t\t\tnumericalLetterGrade = numericalLetterGrade :+ \"A-\"\n  \
    \  \t\t} else if (x >= 3.0) {\n    \t\t\tnumericalLetterGrade = numericalLetterGrade\
    \ :+ \"B+\"\n    \t\t} else if (x >= 2.7) {\n    \t\t\tnumericalLetterGrade =\
    \ numericalLetterGrade :+ \"B\"\n    \t\t} else if (x >= 2.3) {\n    \t\t\tnumericalLetterGrade\
    \ = numericalLetterGrade :+ \"B-\"\n    \t\t} else if (x >= 2.0) {\n    \t\t\t\
    numericalLetterGrade = numericalLetterGrade :+ \"C+\"\n    \t\t} else if (x >=\
    \ 1.7) {\n    \t\t\tnumericalLetterGrade = numericalLetterGrade :+ \"C\"\n   \
    \ \t\t} else if (x >= 1.3) {\n    \t\t\tnumericalLetterGrade = numericalLetterGrade\
    \ :+ \"C-\"\n    \t\t} else if (x >= 1.0) {\n    \t\t\tnumericalLetterGrade =\
    \ numericalLetterGrade :+ \"D+\"\n    \t\t} else if (x >= 0.7) {\n    \t\t\tnumericalLetterGrade\
    \ = numericalLetterGrade :+ \"D\"\n    \t\t} else if (x >= 0.0) {\n    \t\t\t\
    numericalLetterGrade = numericalLetterGrade :+ \"D-\"\n    \t\t} else {\n    \t\
    \t\tnumericalLetterGrade = numericalLetterGrade :+ \"E\"\n    \t\t}\n    \t}\n\
    \    \tnumericalLetterGrade\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyl0y55i5.scala:60)\n\tat Problem.main(tmpyl0y55i5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        //Implement here\n        var result : List[String]\
    \ = Nil\n        for (g <- grades) {\n          if (g >= 4.0) result = \"A+\"\
    \ :: result\n          else if (g >= 3.7) result = \"A\" :: result\n         \
    \ else if (g >= 3.3) result = \"A-\" :: result\n          else if (g >= 3.0) result\
    \ = \"B+\" :: result\n          else if (g >= 2.7) result = \"B\" :: result\n\
    \          else if (g >= 2.3) result = \"B-\" :: result\n          else if (g\
    \ >= 2.0) result = \"C+\" :: result\n          else if (g >= 1.7) result = \"\
    C\" :: result\n          else if (g >= 1.3) result = \"C-\" :: result\n      \
    \    else if (g >= 1.0) result = \"D+\" :: result\n          else if (g >= 0.7)\
    \ result = \"D\" :: result\n          else if (g >= 0.0) result = \"D-\" :: result\n\
    \          else result = \"E\" :: result\n        }\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgc6wvrb4.scala:47)\n\tat Problem.main(tmpgc6wvrb4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n      grades.map(g => {\n        if (g > 3.7) \"A\"\n  \
    \      else if (g > 3.3) \"A-\"\n        else if (g > 3.0) \"B+\"\n        else\
    \ if (g > 2.7) \"B\"\n        else if (g > 2.3) \"B-\"\n        else if (g > 2.0)\
    \ \"C+\"\n        else if (g > 1.7) \"C\"\n        else if (g > 1.3) \"C-\"\n\
    \        else if (g > 1.0) \"D+\"\n        else if (g > 0.7) \"D\"\n        else\
    \ if (g > 0.0) \"D-\"\n        else \"E\"\n      })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq_kp565e.scala:43)\n\tat Problem.main(tmpq_kp565e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in the function here\n        var res :\
    \ List[String] = List()\n        for (grade <- grades) {\n            if (grade\
    \ > 4.0) {\n                res = res :+ \"A+\"\n            } else if (grade\
    \ > 3.7) {\n                res = res :+ \"A\"\n            } else if (grade >\
    \ 3.3) {\n                res = res :+ \"A-\"\n            } else if (grade >\
    \ 3.0) {\n                res = res :+ \"B+\"\n            } else if (grade >\
    \ 2.7) {\n                res = res :+ \"B\"\n            } else if (grade > 2.3)\
    \ {\n                res = res :+ \"B-\"\n            } else if (grade > 2.0)\
    \ {\n                res = res :+ \"C+\"\n            } else if (grade > 1.7)\
    \ {\n                res = res :+ \"C\"\n            } else if (grade > 1.3) {\n\
    \                res = res :+ \"C-\"\n            } else if (grade > 1.0) {\n\
    \                res = res :+ \"D+\"\n            } else if (grade > 0.7) {\n\
    \                res = res :+ \"D\"\n            } else if (grade > 0.0) {\n \
    \               res = res :+ \"D-\"\n            } else {\n                res\
    \ = res :+ \"E\"\n            }\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5url62a6.scala:61)\n\tat Problem.main(tmp5url62a6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // TODO: Find a way to use Map in this problem.\n\
    \        var result : List[String] = List()\n        for (i <- grades) {\n   \
    \         if (i == 4.0) result = result :+ \"A+\"\n            else if (i > 3.7)\
    \ result = result :+ \"A\"\n            else if (i > 3.3) result = result :+ \"\
    A-\"\n            else if (i > 3.0) result = result :+ \"B+\"\n            else\
    \ if (i > 2.7) result = result :+ \"B\"\n            else if (i > 2.3) result\
    \ = result :+ \"B-\"\n            else if (i > 2.0) result = result :+ \"C+\"\n\
    \            else if (i > 1.7) result = result :+ \"C\"\n            else if (i\
    \ > 1.3) result = result :+ \"C-\"\n            else if (i > 1.0) result = result\
    \ :+ \"D+\"\n            else if (i > 0.7) result = result :+ \"D\"\n        \
    \    else if (i > 0.0) result = result :+ \"D-\"\n            else result = result\
    \ :+ \"E\"\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphij5_262.scala:47)\n\tat Problem.main(tmphij5_262.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var res = List[String]()\n        for (grade <-\
    \ grades) {\n            if (grade == 4.0) {\n                res = \"A+\" ::\
    \ res\n            } else if (grade > 3.7) {\n                res = \"A\" :: res\n\
    \            } else if (grade > 3.3) {\n                res = \"A-\" :: res\n\
    \            } else if (grade > 3.0) {\n                res = \"B+\" :: res\n\
    \            } else if (grade > 2.7) {\n                res = \"B\" :: res\n \
    \           } else if (grade > 2.3) {\n                res = \"B-\" :: res\n \
    \           } else if (grade > 2.0) {\n                res = \"C+\" :: res\n \
    \           } else if (grade > 1.7) {\n                res = \"C\" :: res\n  \
    \          } else if (grade > 1.3) {\n                res = \"C-\" :: res\n  \
    \          } else if (grade > 1.0) {\n                res = \"D+\" :: res\n  \
    \          } else if (grade > 0.7) {\n                res = \"D\" :: res\n   \
    \         } else if (grade > 0.0) {\n                res = \"D-\" :: res\n   \
    \         } else {\n                res = \"E\" :: res\n            }\n      \
    \  }\n        res.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcntuwm4.scala:60)\n\tat Problem.main(tmpbcntuwm4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n\t\tvar numericalToLetter : Map[Float, String] = Map()\n\
    \t\tvar letterGrades : List[String] = List()\n\t\tnumericalToLetter += (4.0f ->\
    \ \"A+\")\n\t\tnumericalToLetter += (3.7f -> \"A\")\n\t\tnumericalToLetter +=\
    \ (3.3f -> \"A-\")\n\t\tnumericalToLetter += (3.0f -> \"B+\")\n\t\tnumericalToLetter\
    \ += (2.7f -> \"B\")\n\t\tnumericalToLetter += (2.3f -> \"B-\")\n\t\tnumericalToLetter\
    \ += (2.0f -> \"C+\")\n\t\tnumericalToLetter += (1.7f -> \"C\")\n\t\tnumericalToLetter\
    \ += (1.3f -> \"C-\")\n\t\tnumericalToLetter += (1.0f -> \"D+\")\n\t\tnumericalToLetter\
    \ += (0.7f -> \"D\")\n\t\tnumericalToLetter += (0.0f -> \"D-\")\n\t\tnumericalToLetter\
    \ += (-1.0f -> \"E\")\n\t\tfor (grade <- grades) {\n\t\t\tvar gpa = grade\n\t\t\
    \tfor (entry <- numericalToLetter) {\n\t\t\t\tif (gpa >= entry._1) {\n\t\t\t\t\
    \tletterGrades = letterGrades :+ entry._2\n\t\t\t\t\tgpa = 0.0f\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t\treturn letterGrades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6xu1g92g.scala:52:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660010063
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var output = List[String]()\n        for (grade\
    \ <- grades) {\n            if (grade == 4.0) {\n                output = output\
    \ :+ \"A+\"\n            } else if (grade > 3.7) {\n                output = output\
    \ :+ \"A\"\n            } else if (grade > 3.3) {\n                output = output\
    \ :+ \"A-\"\n            } else if (grade > 3.0) {\n                output = output\
    \ :+ \"B+\"\n            } else if (grade > 2.7) {\n                output = output\
    \ :+ \"B\"\n            } else if (grade > 2.3) {\n                output = output\
    \ :+ \"B-\"\n            } else if (grade > 2.0) {\n                output = output\
    \ :+ \"C+\"\n            } else if (grade > 1.7) {\n                output = output\
    \ :+ \"C\"\n            } else if (grade > 1.3) {\n                output = output\
    \ :+ \"C-\"\n            } else if (grade > 1.0) {\n                output = output\
    \ :+ \"D+\"\n            } else if (grade > 0.7) {\n                output = output\
    \ :+ \"D\"\n            } else if (grade > 0.0) {\n                output = output\
    \ :+ \"D-\"\n            } else {\n                output = output :+ \"E\"\n\
    \            }\n        }\n        output\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpljhvmvlz.scala:60)\n\tat Problem.main(tmpljhvmvlz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var result : List[String] = Nil\n        for (i\
    \ <- grades) {\n            if (i == 4.0) result = result :+ \"A+\"\n        \
    \    else if (i > 3.7) result = result :+ \"A\"\n            else if (i > 3.3)\
    \ result = result :+ \"A-\"\n            else if (i > 3.0) result = result :+\
    \ \"B+\"\n            else if (i > 2.7) result = result :+ \"B\"\n           \
    \ else if (i > 2.3) result = result :+ \"B-\"\n            else if (i > 2.0) result\
    \ = result :+ \"C+\"\n            else if (i > 1.7) result = result :+ \"C\"\n\
    \            else if (i > 1.3) result = result :+ \"C-\"\n            else if\
    \ (i > 1.0) result = result :+ \"D+\"\n            else if (i > 0.7) result =\
    \ result :+ \"D\"\n            else if (i > 0.0) result = result :+ \"D-\"\n \
    \           else result = result :+ \"E\"\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcsf9l_v8.scala:46)\n\tat Problem.main(tmpcsf9l_v8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here\n        var output = List[String]()\n\
    \        grades.foreach(grade => \n            if (grade >= 4.0) {\n         \
    \       output = output :+ \"A+\"\n            } else if (grade >= 3.7) {\n  \
    \              output = output :+ \"A\"\n            } else if (grade >= 3.3)\
    \ {\n                output = output :+ \"A-\"\n            } else if (grade >=\
    \ 3.0) {\n                output = output :+ \"B+\"\n            } else if (grade\
    \ >= 2.7) {\n                output = output :+ \"B\"\n            } else if (grade\
    \ >= 2.3) {\n                output = output :+ \"B-\"\n            } else if\
    \ (grade >= 2.0) {\n                output = output :+ \"C+\"\n            } else\
    \ if (grade >= 1.7) {\n                output = output :+ \"C\"\n            }\
    \ else if (grade >= 1.3) {\n                output = output :+ \"C-\"\n      \
    \      } else if (grade >= 1.0) {\n                output = output :+ \"D+\"\n\
    \            } else if (grade >= 0.7) {\n                output = output :+ \"\
    D\"\n            } else if (grade >= 0.0) {\n                output = output :+\
    \ \"D-\"\n            } else {\n                output = output :+ \"E\"\n   \
    \         }\n        )\n        output\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkd4m9d4u.scala:61)\n\tat Problem.main(tmpkd4m9d4u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradeLetter = Map(\n            4.0f -> \"A+\"\
    ,\n            3.7f -> \"A\",\n            3.3f -> \"A-\",\n            3.0f ->\
    \ \"B+\",\n            2.7f -> \"B\",\n            2.3f -> \"B-\",\n         \
    \   2.0f -> \"C+\",\n            1.7f -> \"C\",\n            1.3f -> \"C-\",\n\
    \            1.0f -> \"D+\",\n            0.7f -> \"D\",\n            0.0f ->\
    \ \"D-\",\n            -1.0f -> \"E\"\n        )\n        var letterGrades = List[String]()\n\
    \        for (i <- grades) {\n            var letterGrade = gradeLetter.filter\
    \ { case (k, v) => i >= k }.head._2\n            letterGrades = letterGrades :+\
    \ letterGrade\n        }\n        letterGrades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwep17_84.scala:50)\n\tat Problem.main(tmpwep17_84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        def letterGrade(grade : Float) : String = {\n  \
    \          if (grade == 4.0) \"A+\"\n            else if (grade > 3.7) \"A\"\n\
    \            else if (grade > 3.3) \"A-\"\n            else if (grade > 3.0) \"\
    B+\"\n            else if (grade > 2.7) \"B\"\n            else if (grade > 2.3)\
    \ \"B-\"\n            else if (grade > 2.0) \"C+\"\n            else if (grade\
    \ > 1.7) \"C\"\n            else if (grade > 1.3) \"C-\"\n            else if\
    \ (grade > 1.0) \"D+\"\n            else if (grade > 0.7) \"D\"\n            else\
    \ if (grade > 0.0) \"D-\"\n            else \"E\"\n        }\n        for (grade\
    \ <- grades) yield letterGrade(grade)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0md5yfnv.scala:45)\n\tat Problem.main(tmp0md5yfnv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here\n        null\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.numericalLetterGrade(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmpoahbdvyd.scala:31)\n\tat Problem.main(tmpoahbdvyd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradeEquivalence : Map[String, Float] = Map(\n\
    \            \"A+\" -> 4.0f,\n            \"A\" -> 3.7f,\n            \"A-\" ->\
    \ 3.3f,\n            \"B+\" -> 3.0f,\n            \"B\" -> 2.7f,\n           \
    \ \"B-\" -> 2.3f,\n            \"C+\" -> 2.0f,\n            \"C\" -> 1.7f,\n \
    \           \"C-\" -> 1.3f,\n            \"D+\" -> 1.0f,\n            \"D\" ->\
    \ 0.7f,\n            \"D-\" -> 0.0f,\n            \"E\" -> 0.0f\n        )\n \
    \       def equivalence(grade : Float) : String = {\n            if (grade > gradeEquivalence(\"\
    A+\")) return \"A+\"\n            for (g <- gradeEquivalence) {\n            \
    \    if (grade >= g._2) return g._1\n            }\n            return \"E\"\n\
    \        }\n        return grades.map(equivalence)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppptaiple.scala:52)\n\tat Problem.main(tmppptaiple.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here\n        // Return the list\
    \ of letter grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphu6g3tob.scala:26:68\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m    \e[33mdef\e[0m \e[36mnumericalLetterGrade\e\
    [0m(\e[36mgrades\e[0m : \e[35mList\e[0m[\e[35mFloat\e[0m]) : \e[35mList\e[0m[\e\
    [35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                                  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                                    Required: List[String]\n\e[31m27 |\e[0m \
    \       \e[34m// Write your code here\e[0m\n\e[31m28 |\e[0m        \e[34m// Return\
    \ the list of letter grades\e[0m\n\e[31m29 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // YOUR CODE HERE\n        var newGrades = List[String]()\n\
    \        for (i <- grades) {\n            if (i == 4.0) {\n                newGrades\
    \ = newGrades :+ \"A+\"\n            } else if (i >= 3.7) {\n                newGrades\
    \ = newGrades :+ \"A\"\n            } else if (i >= 3.3) {\n                newGrades\
    \ = newGrades :+ \"A-\"\n            } else if (i >= 3.0) {\n                newGrades\
    \ = newGrades :+ \"B+\"\n            } else if (i >= 2.7) {\n                newGrades\
    \ = newGrades :+ \"B\"\n            } else if (i >= 2.3) {\n                newGrades\
    \ = newGrades :+ \"B-\"\n            } else if (i >= 2.0) {\n                newGrades\
    \ = newGrades :+ \"C+\"\n            } else if (i >= 1.7) {\n                newGrades\
    \ = newGrades :+ \"C\"\n            } else if (i >= 1.3) {\n                newGrades\
    \ = newGrades :+ \"C-\"\n            } else if (i >= 1.0) {\n                newGrades\
    \ = newGrades :+ \"D+\"\n            } else if (i >= 0.7) {\n                newGrades\
    \ = newGrades :+ \"D\"\n            } else if (i >= 0.0) {\n                newGrades\
    \ = newGrades :+ \"D-\"\n            } else {\n                newGrades = newGrades\
    \ :+ \"E\"\n            }\n        }\n        newGrades\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp68ri78kb.scala:61)\n\tat Problem.main(tmp68ri78kb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var result : List[String] = Nil\n        grades.foreach(grade\
    \ => {\n            if (grade >= 4.0) result = result :+ \"A+\"\n            else\
    \ if (grade >= 3.7) result = result :+ \"A\"\n            else if (grade >= 3.3)\
    \ result = result :+ \"A-\"\n            else if (grade >= 3.0) result = result\
    \ :+ \"B+\"\n            else if (grade >= 2.7) result = result :+ \"B\"\n   \
    \         else if (grade >= 2.3) result = result :+ \"B-\"\n            else if\
    \ (grade >= 2.0) result = result :+ \"C+\"\n            else if (grade >= 1.7)\
    \ result = result :+ \"C\"\n            else if (grade >= 1.3) result = result\
    \ :+ \"C-\"\n            else if (grade >= 1.0) result = result :+ \"D+\"\n  \
    \          else if (grade >= 0.7) result = result :+ \"D\"\n            else if\
    \ (grade >= 0.0) result = result :+ \"D-\"\n            else result = result :+\
    \ \"E\"\n        })\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdr1o5iil.scala:46)\n\tat Problem.main(tmpdr1o5iil.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var result : List[String] = List()\n        grades.foreach(grade\
    \ => {\n            grade match {\n                case _ if (grade >= 4) => result\
    \ ::= \"A+\"\n                case _ if (grade >= 3.7) => result ::= \"A\"\n \
    \               case _ if (grade >= 3.3) => result ::= \"A-\"\n              \
    \  case _ if (grade >= 3) => result ::= \"B+\"\n                case _ if (grade\
    \ >= 2.7) => result ::= \"B\"\n                case _ if (grade >= 2.3) => result\
    \ ::= \"B-\"\n                case _ if (grade >= 2) => result ::= \"C+\"\n  \
    \              case _ if (grade >= 1.7) => result ::= \"C\"\n                case\
    \ _ if (grade >= 1.3) => result ::= \"C-\"\n                case _ if (grade >=\
    \ 1) => result ::= \"D+\"\n                case _ if (grade >= 0.7) => result\
    \ ::= \"D\"\n                case _ if (grade >= 0) => result ::= \"D-\"\n   \
    \             case _ => result ::= \"E\"\n            }\n        })\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxgutfuv0.scala:48)\n\tat Problem.main(tmpxgutfuv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n\t    val letters = List[String](\"A+\", \"A\", \"A-\",\
    \ \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\")\n\
    \t    val boundaries = List[Float](4.0f, 3.7f, 3.3f, 3.0f, 2.7f, 2.3f, 2.0f, 1.7f,\
    \ 1.3f, 1.0f, 0.7f, 0.0f, 0.0f)\n\t    val result = new ListBuffer[String]()\n\
    \t    grades.foreach(num => result += letters(boundaries.zipWithIndex.filter(t\
    \ => t._1 < num).length))\n\t    result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdyclo2lc.scala:32:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab, 4 spaces\n\e[31m   |\e[0m   Latest indent\
    \   : 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660010062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in the function body here.\n        val\
    \ gradeCombinations : List[(String, Float)] = List((\"A+\", 4.0f), (\"A\", 3.7f),\
    \ (\"A-\", 3.3f), (\"B+\", 3.0f), (\"B\", 2.7f), (\"B-\", 2.3f), (\"C+\", 2.0f),\
    \ (\"C\", 1.7f), (\"C-\", 1.3f), (\"D+\", 1.0f), (\"D\", 0.7f), (\"D-\", 0.0f),\
    \ (\"E\", 0.0f))\n        var letterGrade : List[String] = Nil\n        for (grade\
    \ <- grades) {\n            val letterGradeTemp = gradeCombinations.filter(x =>\
    \ grade >= x._2).head._1\n            letterGrade = letterGradeTemp :: letterGrade\n\
    \        }\n        letterGrade.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r0z4qb8.scala:37)\n\tat Problem.main(tmp1r0z4qb8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var out = List[String]()\n        grades.foreach(grade\
    \ => {\n            if (grade >= 4.0) {\n                out = \"A+\" :: out\n\
    \            } else if (grade >= 3.7) {\n                out = \"A\" :: out\n\
    \            } else if (grade >= 3.3) {\n                out = \"A-\" :: out\n\
    \            } else if (grade >= 3.0) {\n                out = \"B+\" :: out\n\
    \            } else if (grade >= 2.7) {\n                out = \"B\" :: out\n\
    \            } else if (grade >= 2.3) {\n                out = \"B-\" :: out\n\
    \            } else if (grade >= 2.0) {\n                out = \"C+\" :: out\n\
    \            } else if (grade >= 1.7) {\n                out = \"C\" :: out\n\
    \            } else if (grade >= 1.3) {\n                out = \"C-\" :: out\n\
    \            } else if (grade >= 1.0) {\n                out = \"D+\" :: out\n\
    \            } else if (grade >= 0.7) {\n                out = \"D\" :: out\n\
    \            } else if (grade >= 0.0) {\n                out = \"D-\" :: out\n\
    \            } else {\n                out = \"E\" :: out\n            }\n   \
    \     })\n        out.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_8e2_kb6.scala:60)\n\tat Problem.main(tmp_8e2_kb6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades : List[String] = List()\n     \
    \   for (grade <- grades) {\n            if (grade == 4.0) letterGrades ::= \"\
    A+\"\n            else if (grade > 3.7) letterGrades ::= \"A\"\n            else\
    \ if (grade > 3.3) letterGrades ::= \"A-\"\n            else if (grade > 3.0)\
    \ letterGrades ::= \"B+\"\n            else if (grade > 2.7) letterGrades ::=\
    \ \"B\"\n            else if (grade > 2.3) letterGrades ::= \"B-\"\n         \
    \   else if (grade > 2.0) letterGrades ::= \"C+\"\n            else if (grade\
    \ > 1.7) letterGrades ::= \"C\"\n            else if (grade > 1.3) letterGrades\
    \ ::= \"C-\"\n            else if (grade > 1.0) letterGrades ::= \"D+\"\n    \
    \        else if (grade > 0.7) letterGrades ::= \"D\"\n            else if (grade\
    \ > 0.0) letterGrades ::= \"D-\"\n            else letterGrades ::= \"E\"\n  \
    \      }\n        letterGrades.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpburvdtoa.scala:46)\n\tat Problem.main(tmpburvdtoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here\n        grades.map(x =>\n\
    \            x match {\n                case 4.0 => \"A+\"\n                case\
    \ x if x >= 3.7 => \"A\"\n                case x if x >= 3.3 => \"A-\"\n     \
    \           case x if x >= 3.0 => \"B+\"\n                case x if x >= 2.7 =>\
    \ \"B\"\n                case x if x >= 2.3 => \"B-\"\n                case x\
    \ if x >= 2.0 => \"C+\"\n                case x if x >= 1.7 => \"C\"\n       \
    \         case x if x >= 1.3 => \"C-\"\n                case x if x >= 1.0 =>\
    \ \"D+\"\n                case x if x >= 0.7 => \"D\"\n                case x\
    \ if x >= 0.0 => \"D-\"\n                case _ => \"E\"\n            }\n    \
    \    )\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptranwim0.scala:47)\n\tat Problem.main(tmptranwim0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradeMap = Map(3.7f.toFloat -> \"A\", 3.3f.toFloat\
    \ -> \"A-\", 3.0f.toFloat -> \"B+\", 2.7f.toFloat -> \"B\", 2.3f.toFloat -> \"\
    B-\", 2.0f.toFloat -> \"C+\", 1.7f.toFloat -> \"C\", 1.3f.toFloat -> \"C-\", 1.0f.toFloat\
    \ -> \"D+\", 0.7f.toFloat -> \"D\", 0.0f.toFloat -> \"D-\")\n        def iterate(grades\
    \ : List[Float], letters : List[String], max : Float) : List[String] = {\n   \
    \         if (grades.isEmpty) letters\n            else if (grades.head >= max)\
    \ iterate(grades.tail, letters :+ \"A+\", max)\n            else iterate(grades.tail,\
    \ letters :+ gradeMap(gradeMap.keys.filter(_ <= grades.head).max), max)\n    \
    \    }\n        iterate(grades, List(), 4.0f.toFloat)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpznp9vl9_.scala:36)\n\tat Problem.main(tmpznp9vl9_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010076
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var grade_letters : List[String] = List();\n   \
    \     for (g <- grades) {\n            if (g == 4) {\n                grade_letters\
    \ = \"A+\" :: grade_letters;\n            } else if (g > 3.7) {\n            \
    \    grade_letters = \"A\" :: grade_letters;\n            } else if (g > 3.3)\
    \ {\n                grade_letters = \"A-\" :: grade_letters;\n            } else\
    \ if (g > 3) {\n                grade_letters = \"B+\" :: grade_letters;\n   \
    \         } else if (g > 2.7) {\n                grade_letters = \"B\" :: grade_letters;\n\
    \            } else if (g > 2.3) {\n                grade_letters = \"B-\" ::\
    \ grade_letters;\n            } else if (g > 2) {\n                grade_letters\
    \ = \"C+\" :: grade_letters;\n            } else if (g > 1.7) {\n            \
    \    grade_letters = \"C\" :: grade_letters;\n            } else if (g > 1.3)\
    \ {\n                grade_letters = \"C-\" :: grade_letters;\n            } else\
    \ if (g > 1) {\n                grade_letters = \"D+\" :: grade_letters;\n   \
    \         } else if (g > 0.7) {\n                grade_letters = \"D\" :: grade_letters;\n\
    \            } else if (g > 0) {\n                grade_letters = \"D-\" :: grade_letters;\n\
    \            } else {\n                grade_letters = \"E\" :: grade_letters;\n\
    \            }\n        }\n        grade_letters;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmbtqsj5.scala:60)\n\tat Problem.main(tmphmbtqsj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n      var list = List[String]()\n      for (i <- grades)\
    \ {\n      \tif (i > 4.0f) {\n      \t\tlist = list :+ \"A+\"\n      \t} else\
    \ if (i > 3.7f) {\n      \t\tlist = list :+ \"A\"\n      \t} else if (i > 3.3f)\
    \ {\n      \t\tlist = list :+ \"A-\"\n      \t} else if (i > 3.0f) {\n      \t\
    \tlist = list :+ \"B+\"\n      \t} else if (i > 2.7f) {\n      \t\tlist = list\
    \ :+ \"B\"\n      \t} else if (i > 2.3f) {\n      \t\tlist = list :+ \"B-\"\n\
    \      \t} else if (i > 2.0f) {\n      \t\tlist = list :+ \"C+\"\n      \t} else\
    \ if (i > 1.7f) {\n      \t\tlist = list :+ \"C\"\n      \t} else if (i > 1.3f)\
    \ {\n      \t\tlist = list :+ \"C-\"\n      \t} else if (i > 1.0f) {\n      \t\
    \tlist = list :+ \"D+\"\n      \t} else if (i > 0.7f) {\n      \t\tlist = list\
    \ :+ \"D\"\n      \t} else if (i > 0.0f) {\n      \t\tlist = list :+ \"D-\"\n\
    \      \t} else {\n      \t\tlist = list :+ \"E\"\n      \t}\n      }\n      list\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpruux0zrl.scala:60)\n\tat Problem.main(tmpruux0zrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var studentGrades : List[String] = List[String]()\n\
    \        grades.foreach(\n            grade => grade match {\n               \
    \ case 4.0 => studentGrades = studentGrades :+ \"A+\"\n                case _\
    \ if grade > 3.7 => studentGrades = studentGrades :+ \"A\"\n                case\
    \ _ if grade > 3.3 => studentGrades = studentGrades :+ \"A-\"\n              \
    \  case _ if grade > 3.0 => studentGrades = studentGrades :+ \"B+\"\n        \
    \        case _ if grade > 2.7 => studentGrades = studentGrades :+ \"B\"\n   \
    \             case _ if grade > 2.3 => studentGrades = studentGrades :+ \"B-\"\
    \n                case _ if grade > 2.0 => studentGrades = studentGrades :+ \"\
    C+\"\n                case _ if grade > 1.7 => studentGrades = studentGrades :+\
    \ \"C\"\n                case _ if grade > 1.3 => studentGrades = studentGrades\
    \ :+ \"C-\"\n                case _ if grade > 1.0 => studentGrades = studentGrades\
    \ :+ \"D+\"\n                case _ if grade > 0.7 => studentGrades = studentGrades\
    \ :+ \"D\"\n                case _ if grade > 0.0 => studentGrades = studentGrades\
    \ :+ \"D-\"\n                case _ => studentGrades = studentGrades :+ \"E\"\n\
    \            }\n        )\n        studentGrades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg95npnm0.scala:48)\n\tat Problem.main(tmpg95npnm0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in the missing code\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb1ujd3bu.scala:26:68\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m    \e[33mdef\e[0m \e[36mnumericalLetterGrade\e\
    [0m(\e[36mgrades\e[0m : \e[35mList\e[0m[\e[35mFloat\e[0m]) : \e[35mList\e[0m[\e\
    [35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                                  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                                    Required: List[String]\n\e[31m27 |\e[0m \
    \       \e[34m// Fill in the missing code\e[0m\n\e[31m28 |\e[0m    }\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradePairs = List(\n            (4.0f, \"A+\"\
    ),\n            (3.7f, \"A\"),\n            (3.3f, \"A-\"),\n            (3.0f,\
    \ \"B+\"),\n            (2.7f, \"B\"),\n            (2.3f, \"B-\"),\n        \
    \    (2.0f, \"C+\"),\n            (1.7f, \"C\"),\n            (1.3f, \"C-\"),\n\
    \            (1.0f, \"D+\"),\n            (0.7f, \"D\"),\n            (0.0f, \"\
    D-\"),\n            (-1.0f, \"E\")\n        )\n        val orderGrades = ListBuffer[Float]()\n\
    \        for (i <- grades) {\n            var x = 0\n            for (j <- 0 until\
    \ gradePairs.length - 1) {\n                if (i >= gradePairs(j)._1 && i < gradePairs(j\
    \ + 1)._1) {\n                    orderGrades += gradePairs(j)._1\n          \
    \          x = 1\n                }\n            }\n            if (x == 0) {\n\
    \                orderGrades += gradePairs(gradePairs.length - 1)._1\n       \
    \     }\n        }\n        orderGrades.map(x => gradePairs.filter(y => y._1 ==\
    \ x)(0)._2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprhjr91to.scala:58)\n\tat Problem.main(tmprhjr91to.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if (grade == 4.0) \"A+\" else\
    \ if (grade > 3.7) \"A\" else if (grade > 3.3) \"A-\" else if (grade > 3.0) \"\
    B+\" else if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade >\
    \ 2.0) \"C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if\
    \ (grade > 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\"\
    \ else \"E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw8zf1_aw.scala:30)\n\tat Problem.main(tmpw8zf1_aw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmperzbpccy.scala:26:68\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m    \e[33mdef\e[0m \e[36mnumericalLetterGrade\e\
    [0m(\e[36mgrades\e[0m : \e[35mList\e[0m[\e[35mFloat\e[0m]) : \e[35mList\e[0m[\e\
    [35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                                  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                                    Required: List[String]\n\e[31m27 |\e[0m \
    \       \e[34m// Write code here\e[0m\n\e[31m28 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010076
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var result : List[String] = List()\n        for\
    \ (grade <- grades) {\n            var letterGrade : String = \"E\"\n        \
    \    if (grade >= 4.0) {\n                letterGrade = \"A+\"\n            }\
    \ else if (grade >= 3.7) {\n                letterGrade = \"A\"\n            }\
    \ else if (grade >= 3.3) {\n                letterGrade = \"A-\"\n           \
    \ } else if (grade >= 3.0) {\n                letterGrade = \"B+\"\n         \
    \   } else if (grade >= 2.7) {\n                letterGrade = \"B\"\n        \
    \    } else if (grade >= 2.3) {\n                letterGrade = \"B-\"\n      \
    \      } else if (grade >= 2.0) {\n                letterGrade = \"C+\"\n    \
    \        } else if (grade >= 1.7) {\n                letterGrade = \"C\"\n   \
    \         } else if (grade >= 1.3) {\n                letterGrade = \"C-\"\n \
    \           } else if (grade >= 1.0) {\n                letterGrade = \"D+\"\n\
    \            } else if (grade >= 0.7) {\n                letterGrade = \"D\"\n\
    \            } else if (grade >= 0.0) {\n                letterGrade = \"D-\"\n\
    \            }\n            result = result :+ letterGrade\n        }\n      \
    \  return result\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl7f2pw3h.scala:60)\n\tat Problem.main(tmpl7f2pw3h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(g => g match {\n            case g if\
    \ g >= 4 => \"A+\"\n            case g if g >= 3.7 && g < 4 => \"A\"\n       \
    \     case g if g >= 3.3 && g < 3.7 => \"A-\"\n            case g if g >= 3 &&\
    \ g < 3.3 => \"B+\"\n            case g if g >= 2.7 && g < 3 => \"B\"\n      \
    \      case g if g >= 2.3 && g < 2.7 => \"B-\"\n            case g if g >= 2 &&\
    \ g < 2.3 => \"C+\"\n            case g if g >= 1.7 && g < 2 => \"C\"\n      \
    \      case g if g >= 1.3 && g < 1.7 => \"C-\"\n            case g if g >= 1 &&\
    \ g < 1.3 => \"D+\"\n            case g if g >= 0.7 && g < 1 => \"D\"\n      \
    \      case g if g >= 0 && g < 0.7 => \"D-\"\n            case g if g < 0 => \"\
    E\"\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9i2yl_is.scala:44)\n\tat Problem.main(tmp9i2yl_is.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n      var letterGrades : List[String] = List()\n      var\
    \ gradesList : List[Float] = grades\n      var i : Int = 0\n      while (i < gradesList.length)\
    \ {\n        if (gradesList(i) == 4.0) {\n          letterGrades = letterGrades\
    \ :+ \"A+\"\n        }\n        else if (gradesList(i) > 3.7) {\n          letterGrades\
    \ = letterGrades :+ \"A\"\n        }\n        else if (gradesList(i) > 3.3) {\n\
    \          letterGrades = letterGrades :+ \"A-\"\n        }\n        else if (gradesList(i)\
    \ > 3.0) {\n          letterGrades = letterGrades :+ \"B+\"\n        }\n     \
    \   else if (gradesList(i) > 2.7) {\n          letterGrades = letterGrades :+\
    \ \"B\"\n        }\n        else if (gradesList(i) > 2.3) {\n          letterGrades\
    \ = letterGrades :+ \"B-\"\n        }\n        else if (gradesList(i) > 2.0) {\n\
    \          letterGrades = letterGrades :+ \"C+\"\n        }\n        else if (gradesList(i)\
    \ > 1.7) {\n          letterGrades = letterGrades :+ \"C\"\n        }\n      \
    \  else if (gradesList(i) > 1.3) {\n          letterGrades = letterGrades :+ \"\
    C-\"\n        }\n        else if (gradesList(i) > 1.0) {\n          letterGrades\
    \ = letterGrades :+ \"D+\"\n        }\n        else if (gradesList(i) > 0.7) {\n\
    \          letterGrades = letterGrades :+ \"D\"\n        }\n        else if (gradesList(i)\
    \ > 0.0) {\n          letterGrades = letterGrades :+ \"D-\"\n        }\n     \
    \   else {\n          letterGrades = letterGrades :+ \"E\"\n        }\n      \
    \  i = i + 1\n      }\n      return letterGrades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpalin40_j.scala:75)\n\tat Problem.main(tmpalin40_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val scoreToGrade = Map(4.0f -> \"A+\", 3.7f -> \"\
    A\", 3.3f -> \"A-\", 3.0f -> \"B+\", 2.7f -> \"B\",\n                        \
    \        2.3f -> \"B-\", 2.0f -> \"C+\", 1.7f -> \"C\", 1.3f -> \"C-\", 1.0f ->\
    \ \"D+\", \n                                0.7f -> \"D\", 0.0f -> \"D-\", -1.0f\
    \ -> \"E\")\n        var i = 0\n        var gradesList = List[String]()\n    \
    \    for (i <- 0 to grades.length - 1) {\n            var j = 0\n            for\
    \ (j <- grades.length - 1 to 0 by -1) {\n                if (grades(i) >= scoreToGrade.keys.toList(j))\
    \ {\n                    gradesList = gradesList :+ scoreToGrade(scoreToGrade.keys.toList(j))\n\
    \                    j = 0\n                }\n            }\n        }\n    \
    \    gradesList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpohj9m0v0.scala:37:22 -----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                    j = \e[31m0\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val j\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n\t\tvar output = new ListBuffer[String]()\n\t\tfor (grade\
    \ <- grades) {\n\t\t\tvar letterGrade = \"E\"\n\t\t\tif (grade >= 4.0) {\n\t\t\
    \t\tletterGrade = \"A+\"\n\t\t\t} else if (grade >= 3.7) {\n\t\t\t\tletterGrade\
    \ = \"A\"\n\t\t\t} else if (grade >= 3.3) {\n\t\t\t\tletterGrade = \"A-\"\n\t\t\
    \t} else if (grade >= 3.0) {\n\t\t\t\tletterGrade = \"B+\"\n\t\t\t} else if (grade\
    \ >= 2.7) {\n\t\t\t\tletterGrade = \"B\"\n\t\t\t} else if (grade >= 2.3) {\n\t\
    \t\t\tletterGrade = \"B-\"\n\t\t\t} else if (grade >= 2.0) {\n\t\t\t\tletterGrade\
    \ = \"C+\"\n\t\t\t} else if (grade >= 1.7) {\n\t\t\t\tletterGrade = \"C\"\n\t\t\
    \t} else if (grade >= 1.3) {\n\t\t\t\tletterGrade = \"C-\"\n\t\t\t} else if (grade\
    \ >= 1.0) {\n\t\t\t\tletterGrade = \"D+\"\n\t\t\t} else if (grade >= 0.7) {\n\t\
    \t\t\tletterGrade = \"D\"\n\t\t\t} else if (grade >= 0.0) {\n\t\t\t\tletterGrade\
    \ = \"D-\"\n\t\t\t} else {\n\t\t\t\tletterGrade = \"E\"\n\t\t\t}\n\t\t\toutput\
    \ += letterGrade\n\t\t}\n\t\toutput.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8zmekz3a.scala:60:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660010073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // this match statement works by looking for the\
    \ first match\n        // from the top so the ranges should be in descending order\n\
    \        // and thus the letter grade should start from A+ and end with E\n  \
    \      def helper(grade : Float) : String = grade match {\n            case g\
    \ if g >= 4.0f => \"A+\"\n            case g if g >= 3.7f => \"A\"\n         \
    \   case g if g >= 3.3f => \"A-\"\n            case g if g >= 3.0f => \"B+\"\n\
    \            case g if g >= 2.7f => \"B\"\n            case g if g >= 2.3f =>\
    \ \"B-\"\n            case g if g >= 2.0f => \"C+\"\n            case g if g >=\
    \ 1.7f => \"C\"\n            case g if g >= 1.3f => \"C-\"\n            case g\
    \ if g >= 1.0f => \"D+\"\n            case g if g >= 0.7f => \"D\"\n         \
    \   case g if g >= 0.0f => \"D-\"\n            case g if g >= -1.0f => \"E\"\n\
    \            case _ => \"N/A\"\n        }\n        grades.map(helper)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4_nllx9.scala:49)\n\tat Problem.main(tmpt4_nllx9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => grade match {\n            case\
    \ a if (a > 3.7) => \"A\"\n            case a if (a > 3.3) => \"A-\"\n       \
    \     case a if (a > 3.0) => \"B+\"\n            case a if (a > 2.7) => \"B\"\n\
    \            case a if (a > 2.3) => \"B-\"\n            case a if (a > 2.0) =>\
    \ \"C+\"\n            case a if (a > 1.7) => \"C\"\n            case a if (a >\
    \ 1.3) => \"C-\"\n            case a if (a > 1.0) => \"D+\"\n            case\
    \ a if (a > 0.7) => \"D\"\n            case a if (a > 0.0) => \"D-\"\n       \
    \     case a if (a >= 0.0) => \"E\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcz4ho9vk.scala:43)\n\tat Problem.main(tmpcz4ho9vk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // your code here\n        return List[String]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy9ai897v.scala:31)\n\tat Problem.main(tmpy9ai897v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        ???\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.numericalLetterGrade(tmpwfird_ew.scala:27)\n\tat Problem$.main(tmpwfird_ew.scala:30)\n\
    \tat Problem.main(tmpwfird_ew.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here\n        grades.map {\n\
    \            case grade if grade == 4.0 => \"A+\"\n            case grade if grade\
    \ > 3.7 => \"A\"\n            case grade if grade > 3.3 => \"A-\"\n          \
    \  case grade if grade > 3.0 => \"B+\"\n            case grade if grade > 2.7\
    \ => \"B\"\n            case grade if grade > 2.3 => \"B-\"\n            case\
    \ grade if grade > 2.0 => \"C+\"\n            case grade if grade > 1.7 => \"\
    C\"\n            case grade if grade > 1.3 => \"C-\"\n            case grade if\
    \ grade > 1.0 => \"D+\"\n            case grade if grade > 0.7 => \"D\"\n    \
    \        case grade if grade > 0.0 => \"D-\"\n            case grade if grade\
    \ == 0.0 => \"E\"\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8himchwc.scala:45)\n\tat Problem.main(tmp8himchwc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradess = grades.map(grade => {\n          \
    \  if (grade >= 4.0) \"A+\"\n            else if (grade >= 3.7) \"A\"\n      \
    \      else if (grade >= 3.3) \"A-\"\n            else if (grade >= 3.0) \"B+\"\
    \n            else if (grade >= 2.7) \"B\"\n            else if (grade >= 2.3)\
    \ \"B-\"\n            else if (grade >= 2.0) \"C+\"\n            else if (grade\
    \ >= 1.7) \"C\"\n            else if (grade >= 1.3) \"C-\"\n            else if\
    \ (grade >= 1.0) \"D+\"\n            else if (grade >= 0.7) \"D\"\n          \
    \  else if (grade >= 0.0) \"D-\"\n            else \"E\"\n        })\n       \
    \ gradess\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzi0skoex.scala:45)\n\tat Problem.main(tmpzi0skoex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        def helper(grade : Float) : String = {\n       \
    \     if (grade >= 4.0) { \"A+\" }\n            else if (grade >= 3.7) { \"A\"\
    \ }\n            else if (grade >= 3.3) { \"A-\" }\n            else if (grade\
    \ >= 3.0) { \"B+\" }\n            else if (grade >= 2.7) { \"B\" }\n         \
    \   else if (grade >= 2.3) { \"B-\" }\n            else if (grade >= 2.0) { \"\
    C+\" }\n            else if (grade >= 1.7) { \"C\" }\n            else if (grade\
    \ >= 1.3) { \"C-\" }\n            else if (grade >= 1.0) { \"D+\" }\n        \
    \    else if (grade >= 0.7) { \"D\" }\n            else if (grade >= 0.0) { \"\
    D-\" }\n            else { \"E\" }\n        }\n        grades.map((grade) => helper(grade))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6qfck9gx.scala:45)\n\tat Problem.main(tmp6qfck9gx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n\t\tvar result : List[String] = List()\n\t\tfor (g <- grades)\
    \ {\n\t\t\tif (g == 4.0) result = result :+ \"A+\"\n\t\t\telse if (g > 3.7) result\
    \ = result :+ \"A\"\n\t\t\telse if (g > 3.3) result = result :+ \"A-\"\n\t\t\t\
    else if (g > 3.0) result = result :+ \"B+\"\n\t\t\telse if (g > 2.7) result =\
    \ result :+ \"B\"\n\t\t\telse if (g > 2.3) result = result :+ \"B-\"\n\t\t\telse\
    \ if (g > 2.0) result = result :+ \"C+\"\n\t\t\telse if (g > 1.7) result = result\
    \ :+ \"C\"\n\t\t\telse if (g > 1.3) result = result :+ \"C-\"\n\t\t\telse if (g\
    \ > 1.0) result = result :+ \"D+\"\n\t\t\telse if (g > 0.7) result = result :+\
    \ \"D\"\n\t\t\telse if (g > 0.0) result = result :+ \"D-\"\n\t\t\telse result\
    \ = result :+ \"E\"\n\t\t}\n\t\tresult\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwd4cqz5d.scala:44:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660010076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n\t\tvar m = grades.length\n\t\tvar n = 0\n\t\tvar letter\
    \ : String = \"E\"\n\t\tvar letterGrades = new ListBuffer[String]()\n\t\twhile\
    \ (n < m) {\n\t\t\tif (grades(n) >= 4) letter = \"A+\"\n\t\t\telse if (grades(n)\
    \ >= 3.7) letter = \"A\"\n\t\t\telse if (grades(n) >= 3.3) letter = \"A-\"\n\t\
    \t\telse if (grades(n) >= 3) letter = \"B+\"\n\t\t\telse if (grades(n) >= 2.7)\
    \ letter = \"B\"\n\t\t\telse if (grades(n) >= 2.3) letter = \"B-\"\n\t\t\telse\
    \ if (grades(n) >= 2) letter = \"C+\"\n\t\t\telse if (grades(n) >= 1.7) letter\
    \ = \"C\"\n\t\t\telse if (grades(n) >= 1.3) letter = \"C-\"\n\t\t\telse if (grades(n)\
    \ >= 1) letter = \"D+\"\n\t\t\telse if (grades(n) >= 0.7) letter = \"D\"\n\t\t\
    \telse if (grades(n) >= 0) letter = \"D-\"\n\t\t\telse letter = \"E\"\n\t\t\t\
    letterGrades += letter\n\t\t\tn += 1\n\t\t}\n\t\treturn letterGrades.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzh3se5n9.scala:49:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660010076
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n    \tvar output : List[String] = List()\n    \tfor (i <-\
    \ grades) {\n    \t\tif (i >= 4.0) {\n    \t\t\toutput ::= \"A+\"\n    \t\t} else\
    \ if (i >= 3.7) {\n    \t\t\toutput ::= \"A\"\n    \t\t} else if (i >= 3.3) {\n\
    \    \t\t\toutput ::= \"A-\"\n    \t\t} else if (i >= 3.0) {\n    \t\t\toutput\
    \ ::= \"B+\"\n    \t\t} else if (i >= 2.7) {\n    \t\t\toutput ::= \"B\"\n   \
    \ \t\t} else if (i >= 2.3) {\n    \t\t\toutput ::= \"B-\"\n    \t\t} else if (i\
    \ >= 2.0) {\n    \t\t\toutput ::= \"C+\"\n    \t\t} else if (i >= 1.7) {\n   \
    \ \t\t\toutput ::= \"C\"\n    \t\t} else if (i >= 1.3) {\n    \t\t\toutput ::=\
    \ \"C-\"\n    \t\t} else if (i >= 1.0) {\n    \t\t\toutput ::= \"D+\"\n    \t\t\
    } else if (i >= 0.7) {\n    \t\t\toutput ::= \"D\"\n    \t\t} else if (i >= 0.0)\
    \ {\n    \t\t\toutput ::= \"D-\"\n    \t\t} else {\n    \t\t\toutput ::= \"E\"\
    \n    \t\t}\n    \t}\n    \toutput.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp32ubxrg3.scala:60)\n\tat Problem.main(tmp32ubxrg3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010086
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(x => x match {\n            case x if\
    \ x == 4.0f => \"A+\"\n            case x if x > 3.7f => \"A\"\n            case\
    \ x if x > 3.3f => \"A-\"\n            case x if x > 3.0f => \"B+\"\n        \
    \    case x if x > 2.7f => \"B\"\n            case x if x > 2.3f => \"B-\"\n \
    \           case x if x > 2.0f => \"C+\"\n            case x if x > 1.7f => \"\
    C\"\n            case x if x > 1.3f => \"C-\"\n            case x if x > 1.0f\
    \ => \"D+\"\n            case x if x > 0.7f => \"D\"\n            case x if x\
    \ > 0.0f => \"D-\"\n            case x if x == 0.0f => \"E\"\n        })\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        return grades.map(x => x match {\n            case\
    \ gpa if gpa >= 4.0 => \"A+\"\n            case gpa if gpa >= 3.7 => \"A\"\n \
    \           case gpa if gpa >= 3.3 => \"A-\"\n            case gpa if gpa >= 3.0\
    \ => \"B+\"\n            case gpa if gpa >= 2.7 => \"B\"\n            case gpa\
    \ if gpa >= 2.3 => \"B-\"\n            case gpa if gpa >= 2.0 => \"C+\"\n    \
    \        case gpa if gpa >= 1.7 => \"C\"\n            case gpa if gpa >= 1.3 =>\
    \ \"C-\"\n            case gpa if gpa >= 1.0 => \"D+\"\n            case gpa if\
    \ gpa >= 0.7 => \"D\"\n            case gpa if gpa >= 0.0 => \"D-\"\n        \
    \    case gpa if gpa >= -0.1 => \"E\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprq0wvh6a.scala:44)\n\tat Problem.main(tmprq0wvh6a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // YOUR CODE HERE\n        null\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.numericalLetterGrade(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmpmqggigvt.scala:31)\n\tat Problem.main(tmpmqggigvt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // TODO: Fill this with your code and change the\
    \ return value if you wish\n        return List[String]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ds1fwje.scala:31)\n\tat Problem.main(tmp8ds1fwje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010086
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades = List[String]()\n        for (g\
    \ <- grades) {\n            if (g >= 4.0) {\n                letterGrades = \"\
    A+\" :: letterGrades\n            } else if (g >= 3.7) {\n                letterGrades\
    \ = \"A\" :: letterGrades\n            } else if (g >= 3.3) {\n              \
    \  letterGrades = \"A-\" :: letterGrades\n            } else if (g >= 3.0) {\n\
    \                letterGrades = \"B+\" :: letterGrades\n            } else if\
    \ (g >= 2.7) {\n                letterGrades = \"B\" :: letterGrades\n       \
    \     } else if (g >= 2.3) {\n                letterGrades = \"B-\" :: letterGrades\n\
    \            } else if (g >= 2.0) {\n                letterGrades = \"C+\" ::\
    \ letterGrades\n            } else if (g >= 1.7) {\n                letterGrades\
    \ = \"C\" :: letterGrades\n            } else if (g >= 1.3) {\n              \
    \  letterGrades = \"C-\" :: letterGrades\n            } else if (g >= 1.0) {\n\
    \                letterGrades = \"D+\" :: letterGrades\n            } else if\
    \ (g >= 0.7) {\n                letterGrades = \"D\" :: letterGrades\n       \
    \     } else if (g >= 0.0) {\n                letterGrades = \"D-\" :: letterGrades\n\
    \            } else {\n                letterGrades = \"E\" :: letterGrades\n\
    \            }\n        }\n        letterGrades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwkx8q23.scala:60)\n\tat Problem.main(tmpxwkx8q23.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val Aplus = new ListBuffer[String]()\n        val\
    \ A = new ListBuffer[String]()\n        val Aminus = new ListBuffer[String]()\n\
    \        val Bplus = new ListBuffer[String]()\n        val B = new ListBuffer[String]()\n\
    \        val Bminus = new ListBuffer[String]()\n        val Cplus = new ListBuffer[String]()\n\
    \        val C = new ListBuffer[String]()\n        val Cminus = new ListBuffer[String]()\n\
    \        val Dplus = new ListBuffer[String]()\n        val D = new ListBuffer[String]()\n\
    \        val Dminus = new ListBuffer[String]()\n        val E = new ListBuffer[String]()\n\
    \        val gradeList = new ListBuffer[String]()\n        for (grade <- grades)\
    \ {\n            if (grade >= 4.0) {\n                Aplus += \"A+\"\n      \
    \      }\n            else if (grade >= 3.7) {\n                A += \"A\"\n \
    \           }\n            else if (grade >= 3.3) {\n                Aminus +=\
    \ \"A-\"\n            }\n            else if (grade >= 3.0) {\n              \
    \  Bplus += \"B+\"\n            }\n            else if (grade >= 2.7) {\n    \
    \            B += \"B\"\n            }\n            else if (grade >= 2.3) {\n\
    \                Bminus += \"B-\"\n            }\n            else if (grade >=\
    \ 2.0) {\n                Cplus += \"C+\"\n            }\n            else if\
    \ (grade >= 1.7) {\n                C += \"C\"\n            }\n            else\
    \ if (grade >= 1.3) {\n                Cminus += \"C-\"\n            }\n     \
    \       else if (grade >= 1.0) {\n                Dplus += \"D+\"\n          \
    \  }\n            else if (grade >= 0.7) {\n                D += \"D\"\n     \
    \       }\n            else if (grade >= 0.0) {\n                Dminus += \"\
    D-\"\n            }\n            else {\n                E += \"E\"\n        \
    \    }\n        }\n        gradeList ++= Aplus\n        gradeList ++= A\n    \
    \    gradeList ++= Aminus\n        gradeList ++= Bplus\n        grade\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1a121yeo.scala:86:8 -------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m        grade\n\e[31m\e[31m   |\e[0m        ^^^^^\e[0m\n\
    \e[31m   |\e[0m        Not found: grade\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n\t\tvar letterGrades : List[String] = List[String]()\n\t\
    \tfor (grade <- grades) {\n\t\t\tvar letterGrade : String = \"\"\n\t\t\tif (grade\
    \ == 4.0) letterGrade = \"A+\"\n\t\t\telse if (grade > 3.7) letterGrade = \"A\"\
    \n\t\t\telse if (grade > 3.3) letterGrade = \"A-\"\n\t\t\telse if (grade > 3.0)\
    \ letterGrade = \"B+\"\n\t\t\telse if (grade > 2.7) letterGrade = \"B\"\n\t\t\t\
    else if (grade > 2.3) letterGrade = \"B-\"\n\t\t\telse if (grade > 2.0) letterGrade\
    \ = \"C+\"\n\t\t\telse if (grade > 1.7) letterGrade = \"C\"\n\t\t\telse if (grade\
    \ > 1.3) letterGrade = \"C-\"\n\t\t\telse if (grade > 1.0) letterGrade = \"D+\"\
    \n\t\t\telse if (grade > 0.7) letterGrade = \"D\"\n\t\t\telse if (grade > 0.0)\
    \ letterGrade = \"D-\"\n\t\t\telse letterGrade = \"E\"\n\t\t\tletterGrades = letterGrades\
    \ :+ letterGrade\n\t\t}\n\t\tletterGrades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4snckj9g.scala:46:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660010082
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        def makeLetterGrade(grade : Float) : String = {\n\
    \            if (grade == 4.0) \"A+\"\n            else if (grade > 3.7) \"A\"\
    \n            else if (grade > 3.3) \"A-\"\n            else if (grade > 3.0)\
    \ \"B+\"\n            else if (grade > 2.7) \"B\"\n            else if (grade\
    \ > 2.3) \"B-\"\n            else if (grade > 2.0) \"C+\"\n            else if\
    \ (grade > 1.7) \"C\"\n            else if (grade > 1.3) \"C-\"\n            else\
    \ if (grade > 1.0) \"D+\"\n            else if (grade > 0.7) \"D\"\n         \
    \   else if (grade > 0.0) \"D-\"\n            else \"E\"\n        }\n        val\
    \ gradesList = ListBuffer[String]()\n        for (grade <- grades) {\n       \
    \     gradesList += makeLetterGrade(grade)\n        }\n        gradesList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmdz833ou.scala:49)\n\tat Problem.main(tmpmdz833ou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val letter = List[String](\"A+\", \"A\", \"A-\"\
    , \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\")\n\
    \        val gpa = List[Float](4.0f, 3.7f, 3.3f, 3.0f, 2.7f, 2.3f, 2.0f, 1.7f,\
    \ 1.3f, 1.0f, 0.7f, 0.0f, 0.0f)\n        val table = Map[Float, String]()\n  \
    \      var index = 0\n        while (index < letter.length) {\n            table\
    \ += (gpa(index) -> letter(index))\n            index += 1\n        }\n      \
    \  val letterGrade = new ListBuffer[String]()\n        for (grade <- grades) {\n\
    \            letterGrade += findLetterGrade(grade, table)\n        }\n       \
    \ letterGrade.toList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_7ff7oh.scala:37:27 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            letterGrade += findLetterGrade(grade, table)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: findLetterGrade\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010083
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n    \tval gradingTable = Map[Int, String](4 -> \"A+\", 3\
    \ -> \"A\", 2 -> \"A-\", 1 -> \"B+\", 0 -> \"B\", -1 -> \"B-\", -2 -> \"C+\",\
    \ -3 -> \"C\", -4 -> \"C-\", -5 -> \"D+\", -6 -> \"D\", -7 -> \"D-\", -8 -> \"\
    E\")\n    \tgrades.map((x) => {\n    \t\tif (x >= 4) \"A+\"\n    \t\telse if (x\
    \ >= 3.7) \"A\"\n    \t\telse if (x >= 3.3) \"A-\"\n    \t\telse if (x >= 3) \"\
    B+\"\n    \t\telse if (x >= 2.7) \"B\"\n    \t\telse if (x >= 2.3) \"B-\"\n  \
    \  \t\telse if (x >= 2) \"C+\"\n    \t\telse if (x >= 1.7) \"C\"\n    \t\telse\
    \ if (x >= 1.3) \"C-\"\n    \t\telse if (x >= 1) \"D+\"\n    \t\telse if (x >=\
    \ 0.7) \"D\"\n    \t\telse if (x >= 0) \"D-\"\n    \t\telse \"E\"\n    \t})\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf45th3vt.scala:45)\n\tat Problem.main(tmpf45th3vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here\n        return List()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3f7853zu.scala:31)\n\tat Problem.main(tmp3f7853zu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010087
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var output = new ListBuffer[String]()\n        for\
    \ (grade <- grades) {\n            if (grade > 4) {\n                output +=\
    \ \"A+\"\n            } else if (grade > 3.7) {\n                output += \"\
    A\"\n            } else if (grade > 3.3) {\n                output += \"A-\"\n\
    \            } else if (grade > 3) {\n                output += \"B+\"\n     \
    \       } else if (grade > 2.7) {\n                output += \"B\"\n         \
    \   } else if (grade > 2.3) {\n                output += \"B-\"\n            }\
    \ else if (grade > 2) {\n                output += \"C+\"\n            } else\
    \ if (grade > 1.7) {\n                output += \"C\"\n            } else if (grade\
    \ > 1.3) {\n                output += \"C-\"\n            } else if (grade > 1)\
    \ {\n                output += \"D+\"\n            } else if (grade > 0.7) {\n\
    \                output += \"D\"\n            } else if (grade > 0) {\n      \
    \          output += \"D-\"\n            } else {\n                output += \"\
    E\"\n            }\n        }\n        return output.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd6ruc8wu.scala:60)\n\tat Problem.main(tmpd6ruc8wu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010087
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        def helper(grades : List[Float], ret : List[String])\
    \ : List[String] = {\n            grades match {\n                case Nil =>\
    \ ret\n                case h :: t => {\n                    if (h >= 4.0)\n \
    \                       helper(t, \"A+\" :: ret)\n                    else if\
    \ (h >= 3.7)\n                        helper(t, \"A\" :: ret)\n              \
    \      else if (h >= 3.3)\n                        helper(t, \"A-\" :: ret)\n\
    \                    else if (h >= 3.0)\n                        helper(t, \"\
    B+\" :: ret)\n                    else if (h >= 2.7)\n                       \
    \ helper(t, \"B\" :: ret)\n                    else if (h >= 2.3)\n          \
    \              helper(t, \"B-\" :: ret)\n                    else if (h >= 2.0)\n\
    \                        helper(t, \"C+\" :: ret)\n                    else if\
    \ (h >= 1.7)\n                        helper(t, \"C\" :: ret)\n              \
    \      else if (h >= 1.3)\n                        helper(t, \"C-\" :: ret)\n\
    \                    else if (h >= 1.0)\n                        helper(t, \"\
    D+\" :: ret)\n                    else if (h >= 0.7)\n                       \
    \ helper(t, \"D\" :: ret)\n                    else if (h >= 0.0)\n          \
    \              helper(t, \"D-\" :: ret)\n                    else\n          \
    \              helper(t, \"E\" :: ret)\n                }\n            }\n   \
    \     }\n        helper(grades, Nil)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgr0b_xqu.scala:63)\n\tat Problem.main(tmpgr0b_xqu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here\n        return List[String]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuekiiffi.scala:31)\n\tat Problem.main(tmpuekiiffi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010087
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n      return grades.map(g => g match {\n        case x if\
    \ x == 4.0f => \"A+\"\n        case x if x > 3.7f && x < 4.0f => \"A\"\n     \
    \   case x if x > 3.3f && x < 3.7f => \"A-\"\n        case x if x > 3.0f && x\
    \ < 3.3f => \"B+\"\n        case x if x > 2.7f && x < 3.0f => \"B\"\n        case\
    \ x if x > 2.3f && x < 2.7f => \"B-\"\n        case x if x > 2.0f && x < 2.3f\
    \ => \"C+\"\n        case x if x > 1.7f && x < 2.0f => \"C\"\n        case x if\
    \ x > 1.3f && x < 1.7f => \"C-\"\n        case x if x > 1.0f && x < 1.3f => \"\
    D+\"\n        case x if x > 0.7f && x < 1.0f => \"D\"\n        case x if x > 0.0f\
    \ && x < 0.7f => \"D-\"\n        case x if x == 0.0f => \"E\"\n      })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 3.0 (of class java.lang.Float)\n\tat Problem$.numericalLetterGrade$$anonfun$1(tmpmny7b2sf.scala:40)\n\
    \tat Problem$.numericalLetterGrade$$anonfun$adapted$1(tmpmny7b2sf.scala:41)\n\t\
    at scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.numericalLetterGrade(tmpmny7b2sf.scala:41)\n\
    \tat Problem$.main(tmpmny7b2sf.scala:44)\n\tat Problem.main(tmpmny7b2sf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades = ArrayBuffer[String]()\n     \
    \   // your code goes here\n        return letterGrades.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppl_nsde6.scala:32)\n\tat Problem.main(tmppl_nsde6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val Aplus = 4.0f\n        val A = 3.7f\n       \
    \ val Aminus = 3.3f\n        val Bplus = 3.0f\n        val B = 2.7f\n        val\
    \ Bminus = 2.3f\n        val Cplus = 2.0f\n        val C = 1.7f\n        val Cminus\
    \ = 1.3f\n        val Dplus = 1.0f\n        val D = 0.7f\n        val Dminus =\
    \ 0.0f\n        val E = 0.0f\n        var listOfLetterGrades = new ListBuffer[String]()\n\
    \        var letterGrade = \"\"\n        for (g <- grades) {\n            if (g\
    \ >= Aplus) letterGrade = \"A+\"\n            else if (g >= A) letterGrade = \"\
    A\"\n            else if (g >= Aminus) letterGrade = \"A-\"\n            else\
    \ if (g >= Bplus) letterGrade = \"B+\"\n            else if (g >= B) letterGrade\
    \ = \"B\"\n            else if (g >= Bminus) letterGrade = \"B-\"\n          \
    \  else if (g >= Cplus) letterGrade = \"C+\"\n            else if (g >= C) letterGrade\
    \ = \"C\"\n            else if (g >= Cminus) letterGrade = \"C-\"\n          \
    \  else if (g >= Dplus) letterGrade = \"D+\"\n            else if (g >= D) letterGrade\
    \ = \"D\"\n            else if (g >= Dminus) letterGrade = \"D-\"\n          \
    \  else if (g >= E) letterGrade = \"E\"\n            listOfLetterGrades += letterGrade\n\
    \        }\n        listOfLetterGrades.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpydzl4cxd.scala:61)\n\tat Problem.main(tmpydzl4cxd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(x => {\n            if (x >= 4) \"A+\"\
    \n            else if (x >= 3.7) \"A\"\n            else if (x >= 3.3) \"A-\"\n\
    \            else if (x >= 3) \"B+\"\n            else if (x >= 2.7) \"B\"\n \
    \           else if (x >= 2.3) \"B-\"\n            else if (x >= 2) \"C+\"\n \
    \           else if (x >= 1.7) \"C\"\n            else if (x >= 1.3) \"C-\"\n\
    \            else if (x >= 1) \"D+\"\n            else if (x >= 0.7) \"D\"\n \
    \           else if (x >= 0) \"D-\"\n            else \"E\"\n        })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi5vu_3fv.scala:44)\n\tat Problem.main(tmpi5vu_3fv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var result : List[String] = List()\n        for\
    \ (grade <- grades) {\n            if (grade == 4.0) {\n                result\
    \ = result :+ \"A+\"\n            } else if (grade > 3.7) {\n                result\
    \ = result :+ \"A\"\n            } else if (grade > 3.3) {\n                result\
    \ = result :+ \"A-\"\n            } else if (grade > 3.0) {\n                result\
    \ = result :+ \"B+\"\n            } else if (grade > 2.7) {\n                result\
    \ = result :+ \"B\"\n            } else if (grade > 2.3) {\n                result\
    \ = result :+ \"B-\"\n            } else if (grade > 2.0) {\n                result\
    \ = result :+ \"C+\"\n            } else if (grade > 1.7) {\n                result\
    \ = result :+ \"C\"\n            } else if (grade > 1.3) {\n                result\
    \ = result :+ \"C-\"\n            } else if (grade > 1.0) {\n                result\
    \ = result :+ \"D+\"\n            } else if (grade > 0.7) {\n                result\
    \ = result :+ \"D\"\n            } else if (grade > 0.0) {\n                result\
    \ = result :+ \"D-\"\n            } else {\n                result = result :+\
    \ \"E\"\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmxt170zm.scala:60)\n\tat Problem.main(tmpmxt170zm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here\n        List[String]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzt4szvg.scala:31)\n\tat Problem.main(tmpmzt4szvg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        for (i <- grades) yield {\n            if (i >=\
    \ 4.0) \"A+\"\n            else if (i >= 3.7) \"A\"\n            else if (i >=\
    \ 3.3) \"A-\"\n            else if (i >= 3.0) \"B+\"\n            else if (i >=\
    \ 2.7) \"B\"\n            else if (i >= 2.3) \"B-\"\n            else if (i >=\
    \ 2.0) \"C+\"\n            else if (i >= 1.7) \"C\"\n            else if (i >=\
    \ 1.3) \"C-\"\n            else if (i >= 1.0) \"D+\"\n            else if (i >=\
    \ 0.7) \"D\"\n            else if (i >= 0.0) \"D-\"\n            else \"E\"\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptasruwb6.scala:44)\n\tat Problem.main(tmptasruwb6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in the missing code here.\n        return\
    \ List[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmhoi0xio.scala:31)\n\tat Problem.main(tmpmhoi0xio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(x => {\n            if (x >= 4.0) \"\
    A+\"\n            else if (x >= 3.7) \"A\"\n            else if (x >= 3.3) \"\
    A-\"\n            else if (x >= 3.0) \"B+\"\n            else if (x >= 2.7) \"\
    B\"\n            else if (x >= 2.3) \"B-\"\n            else if (x >= 2.0) \"\
    C+\"\n            else if (x >= 1.7) \"C\"\n            else if (x >= 1.3) \"\
    C-\"\n            else if (x >= 1.0) \"D+\"\n            else if (x >= 0.7) \"\
    D\"\n            else if (x >= 0.0) \"D-\"\n            else \"E\"\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph7pr4_66.scala:44)\n\tat Problem.main(tmph7pr4_66.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var grad : List[String] = Nil\n        for (grade\
    \ <- grades)\n            if (grade == 4.0)\n                grad = \"A+\" ::\
    \ grad\n            else if (grade > 3.7)\n                grad = \"A\" :: grad\n\
    \            else if (grade > 3.3)\n                grad = \"A-\" :: grad\n  \
    \          else if (grade > 3.0)\n                grad = \"B+\" :: grad\n    \
    \        else if (grade > 2.7)\n                grad = \"B\" :: grad\n       \
    \     else if (grade > 2.3)\n                grad = \"B-\" :: grad\n         \
    \   else if (grade > 2.0)\n                grad = \"C+\" :: grad\n           \
    \ else if (grade > 1.7)\n                grad = \"C\" :: grad\n            else\
    \ if (grade > 1.3)\n                grad = \"C-\" :: grad\n            else if\
    \ (grade > 1.0)\n                grad = \"D+\" :: grad\n            else if (grade\
    \ > 0.7)\n                grad = \"D\" :: grad\n            else if (grade > 0.0)\n\
    \                grad = \"D-\" :: grad\n            else \n                grad\
    \ = \"E\" :: grad\n        grad.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0r2z4yv.scala:58)\n\tat Problem.main(tmpo0r2z4yv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades = List[String]()\n        for (g\
    \ <- grades) {\n            if (g == 4.0) {\n                letterGrades = letterGrades\
    \ :+ \"A+\"\n            } else if (g > 3.7) {\n                letterGrades =\
    \ letterGrades :+ \"A\"\n            } else if (g > 3.3) {\n                letterGrades\
    \ = letterGrades :+ \"A-\"\n            } else if (g > 3.0) {\n              \
    \  letterGrades = letterGrades :+ \"B+\"\n            } else if (g > 2.7) {\n\
    \                letterGrades = letterGrades :+ \"B\"\n            } else if (g\
    \ > 2.3) {\n                letterGrades = letterGrades :+ \"B-\"\n          \
    \  } else if (g > 2.0) {\n                letterGrades = letterGrades :+ \"C+\"\
    \n            } else if (g > 1.7) {\n                letterGrades = letterGrades\
    \ :+ \"C\"\n            } else if (g > 1.3) {\n                letterGrades =\
    \ letterGrades :+ \"C-\"\n            } else if (g > 1.0) {\n                letterGrades\
    \ = letterGrades :+ \"D+\"\n            } else if (g > 0.7) {\n              \
    \  letterGrades = letterGrades :+ \"D\"\n            } else if (g > 0.0) {\n \
    \               letterGrades = letterGrades :+ \"D-\"\n            } else {\n\
    \                letterGrades = letterGrades :+ \"E\"\n            }\n       \
    \ }\n        letterGrades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1wqt111f.scala:60)\n\tat Problem.main(tmp1wqt111f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(g => {\n            if (g > 4.0)\n  \
    \              \"A+\"\n            else if (g > 3.7)\n                \"A\"\n\
    \            else if (g > 3.3)\n                \"A-\"\n            else if (g\
    \ > 3.0)\n                \"B+\"\n            else if (g > 2.7)\n            \
    \    \"B\"\n            else if (g > 2.3)\n                \"B-\"\n          \
    \  else if (g > 2.0)\n                \"C+\"\n            else if (g > 1.7)\n\
    \                \"C\"\n            else if (g > 1.3)\n                \"C-\"\n\
    \            else if (g > 1.0)\n                \"D+\"\n            else if (g\
    \ > 0.7)\n                \"D\"\n            else if (g > 0.0)\n             \
    \   \"D-\"\n            else\n                \"E\"\n        })\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzd7zempq.scala:57)\n\tat Problem.main(tmpzd7zempq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // grade(gpa: Float) : String = {\n        //  \
    \   if (gpa == 4.0) { \"A+\" }\n        //     else if (gpa > 3.7) { \"A\" }\n\
    \        //     else if (gpa > 3.3) { \"A-\" }\n        //     else if (gpa >\
    \ 3.0) { \"B+\" }\n        //     else if (gpa > 2.7) { \"B\" }\n        //  \
    \   else if (gpa > 2.3) { \"B-\" }\n        //     else if (gpa > 2.0) { \"C+\"\
    \ }\n        //     else if (gpa > 1.7) { \"C\" }\n        //     else if (gpa\
    \ > 1.3) { \"C-\" }\n        //     else if (gpa > 1.0) { \"D+\" }\n        //\
    \     else if (gpa > 0.7) { \"D\" }\n        //     else if (gpa > 0.0) { \"D-\"\
    \ }\n        //     else { \"E\" }\n        // }\n        // for (i <- grades)\
    \ yield grade(i)\n        for (i <- grades) yield {\n            if (i == 4.0)\
    \ { \"A+\" }\n            else if (i > 3.7) { \"A\" }\n            else if (i\
    \ > 3.3) { \"A-\" }\n            else if (i > 3.0) { \"B+\" }\n            else\
    \ if (i > 2.7) { \"B\" }\n            else if (i > 2.3) { \"B-\" }\n         \
    \   else if (i > 2.0) { \"C+\" }\n            else if (i > 1.7) { \"C\" }\n  \
    \          else if (i > 1.3) { \"C-\" }\n            else if (i > 1.0) { \"D+\"\
    \ }\n            else if (i > 0.7) { \"D\" }\n            else if (i > 0.0) {\
    \ \"D-\" }\n            else { \"E\" }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk4xxdtkt.scala:60)\n\tat Problem.main(tmpk4xxdtkt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n      return List[String](\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsdwwzm_u.scala:30)\n\tat Problem.main(tmpsdwwzm_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var gs = new ListBuffer[String]()\n        for (g\
    \ <- grades) {\n            if (g >= 4.0) gs += \"A+\"\n            else if (g\
    \ >= 3.7) gs += \"A\"\n            else if (g >= 3.3) gs += \"A-\"\n         \
    \   else if (g >= 3.0) gs += \"B+\"\n            else if (g >= 2.7) gs += \"B\"\
    \n            else if (g >= 2.3) gs += \"B-\"\n            else if (g >= 2.0)\
    \ gs += \"C+\"\n            else if (g >= 1.7) gs += \"C\"\n            else if\
    \ (g >= 1.3) gs += \"C-\"\n            else if (g >= 1.0) gs += \"D+\"\n     \
    \       else if (g >= 0.7) gs += \"D\"\n            else if (g >= 0.0) gs += \"\
    D-\"\n            else gs += \"E\"\n        }\n        gs.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc6k6eayu.scala:46)\n\tat Problem.main(tmpc6k6eayu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n      var letterGrade: List[String] = Nil\n      for (grade\
    \ <- grades) {\n        if (grade == 4.0) {\n          letterGrade ::= \"A+\"\n\
    \        } else if (grade > 3.7) {\n          letterGrade ::= \"A\"\n        }\
    \ else if (grade > 3.3) {\n          letterGrade ::= \"A-\"\n        } else if\
    \ (grade > 3.0) {\n          letterGrade ::= \"B+\"\n        } else if (grade\
    \ > 2.7) {\n          letterGrade ::= \"B\"\n        } else if (grade > 2.3) {\n\
    \          letterGrade ::= \"B-\"\n        } else if (grade > 2.0) {\n       \
    \   letterGrade ::= \"C+\"\n        } else if (grade > 1.7) {\n          letterGrade\
    \ ::= \"C\"\n        } else if (grade > 1.3) {\n          letterGrade ::= \"C-\"\
    \n        } else if (grade > 1.0) {\n          letterGrade ::= \"D+\"\n      \
    \  } else if (grade > 0.7) {\n          letterGrade ::= \"D\"\n        } else\
    \ if (grade > 0.0) {\n          letterGrade ::= \"D-\"\n        } else {\n   \
    \       letterGrade ::= \"E\"\n        }\n      }\n      letterGrade.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmf6x2vnt.scala:60)\n\tat Problem.main(tmpmf6x2vnt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n    \tvar newList = List[String]()\n    \tfor (i <- grades)\
    \ {\n    \t\ti match {\n    \t\t\tcase x if (x == 4.0) => newList = newList :+\
    \ \"A+\"\n    \t\t\tcase x if (x > 3.7) => newList = newList :+ \"A\"\n    \t\t\
    \tcase x if (x > 3.3) => newList = newList :+ \"A-\"\n    \t\t\tcase x if (x >\
    \ 3.0) => newList = newList :+ \"B+\"\n    \t\t\tcase x if (x > 2.7) => newList\
    \ = newList :+ \"B\"\n    \t\t\tcase x if (x > 2.3) => newList = newList :+ \"\
    B-\"\n    \t\t\tcase x if (x > 2.0) => newList = newList :+ \"C+\"\n    \t\t\t\
    case x if (x > 1.7) => newList = newList :+ \"C\"\n    \t\t\tcase x if (x > 1.3)\
    \ => newList = newList :+ \"C-\"\n    \t\t\tcase x if (x > 1.0) => newList = newList\
    \ :+ \"D+\"\n    \t\t\tcase x if (x > 0.7) => newList = newList :+ \"D\"\n   \
    \ \t\t\tcase x if (x > 0.0) => newList = newList :+ \"D-\"\n    \t\t\tcase x if\
    \ (x == 0.0) => newList = newList :+ \"E\"\n    \t\t}\n    \t}\n    \tnewList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_p3hnjj.scala:48)\n\tat Problem.main(tmp1_p3hnjj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010098
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // your code here...\n        // use the table above\
    \ to implement this function\n        val letters = List(\"A+\", \"A\", \"A-\"\
    , \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\")\n\
    \        var result = List[String]()\n        for (grade <- grades) {\n      \
    \      var index = 0\n            if (grade >= 4.0) {\n                result\
    \ = letters(0) :: result\n            } else if (grade >= 3.7) {\n           \
    \     result = letters(1) :: result\n            } else if (grade >= 3.3) {\n\
    \                result = letters(2) :: result\n            } else if (grade >=\
    \ 3.0) {\n                result = letters(3) :: result\n            } else if\
    \ (grade >= 2.7) {\n                result = letters(4) :: result\n          \
    \  } else if (grade >= 2.3) {\n                result = letters(5) :: result\n\
    \            } else if (grade >= 2.0) {\n                result = letters(6) ::\
    \ result\n            } else if (grade >= 1.7) {\n                result = letters(7)\
    \ :: result\n            } else if (grade >= 1.3) {\n                result =\
    \ letters(8) :: result\n            } else if (grade >= 1.0) {\n             \
    \   result = letters(9) :: result\n            } else if (grade >= 0.7) {\n  \
    \              result = letters(10) :: result\n            } else if (grade >=\
    \ 0.0) {\n                result = letters(11) :: result\n            } else {\n\
    \                result = letters(12) :: result\n            }\n        }\n  \
    \      result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgtquwr6h.scala:64)\n\tat Problem.main(tmpgtquwr6h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010098
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        //YOUR CODE GOES HERE\n        grades.map(x => if\
    \ (x >= 4.0) \"A+\"\n                  else if (x >= 3.7) \"A\"\n            \
    \      else if (x >= 3.3) \"A-\"\n                  else if (x >= 3.0) \"B+\"\n\
    \                  else if (x >= 2.7) \"B\"\n                  else if (x >= 2.3)\
    \ \"B-\"\n                  else if (x >= 2.0) \"C+\"\n                  else\
    \ if (x >= 1.7) \"C\"\n                  else if (x >= 1.3) \"C-\"\n         \
    \         else if (x >= 1.0) \"D+\"\n                  else if (x >= 0.7) \"D\"\
    \n                  else if (x >= 0.0) \"D-\"\n                  else \"E\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx791ayq0.scala:43)\n\tat Problem.main(tmpx791ayq0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010098
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradeMap = Map[String, Float](\n           \
    \ \"A+\" -> 4.0f,\n            \"A\" -> 3.7f,\n            \"A-\" -> 3.3f,\n \
    \           \"B+\" -> 3.0f,\n            \"B\" -> 2.7f,\n            \"B-\" ->\
    \ 2.3f,\n            \"C+\" -> 2.0f,\n            \"C\" -> 1.7f,\n           \
    \ \"C-\" -> 1.3f,\n            \"D+\" -> 1.0f,\n            \"D\" -> 0.7f,\n \
    \           \"D-\" -> 0.0f,\n            \"E\" -> 0.0f\n        )\n        val\
    \ letterGradeMap = Map[Float, String](\n            4.0f -> \"A+\",\n        \
    \    3.7f -> \"A\",\n            3.3f -> \"A-\",\n            3.0f -> \"B+\",\n\
    \            2.7f -> \"B\",\n            2.3f -> \"B-\",\n            2.0f ->\
    \ \"C+\",\n            1.7f -> \"C\",\n            1.3f -> \"C-\",\n         \
    \   1.0f -> \"D+\",\n            0.7f -> \"D\",\n            0.0f -> \"D-\"\n\
    \        )\n        var letterGrades = List[String]()\n        for (i <- grades)\
    \ {\n            if (i >= 4.0f) letterGrades ::= \"A+\"\n            else if (i\
    \ == 0.0f) letterGrades ::= \"E\"\n            else {\n                var gpa\
    \ = i\n                while (gpa < 4.0f) {\n                    gpa += 0.1f\n\
    \                    if (letterGradeMap.contains(gpa)) {\n                   \
    \     letterGrades ::= letterGradeMap(gpa)\n                        gpa = 4.0f\n\
    \                    }\n                }\n            }\n        }\n        letterGrades.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx4m898o9.scala:74)\n\tat Problem.main(tmpx4m898o9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val letters = List[String](\"A+\", \"A\", \"A-\"\
    , \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\")\n\
    \        val cutoffs = List[Float](4.0f, 3.7f, 3.3f, 3.0f, 2.7f, 2.3f, 2.0f, 1.7f,\
    \ 1.3f, 1.0f, 0.7f, 0.0f, 0.0f)\n        val gradeList = new ListBuffer[String]()\n\
    \        for (grade <- grades) {\n            var index = 0\n            for (cutoff\
    \ <- cutoffs) {\n                if (grade >= cutoff) {\n                    gradeList\
    \ += letters(index)\n                    index = 0\n                    break\n\
    \                }\n                index += 1\n            }\n        }\n   \
    \     gradeList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7as76l4n.scala:36:20 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        return (for(i <- grades) yield\n            if(i\
    \ >= 4.0) \"A+\"\n            else if(i >= 3.7) \"A\"\n            else if(i >=\
    \ 3.3) \"A-\"\n            else if(i >= 3.0) \"B+\"\n            else if(i >=\
    \ 2.7) \"B\"\n            else if(i >= 2.3) \"B-\"\n            else if(i >= 2.0)\
    \ \"C+\"\n            else if(i >= 1.7) \"C\"\n            else if(i >= 1.3) \"\
    C-\"\n            else if(i >= 1.0) \"D+\"\n            else if(i >= 0.7) \"D\"\
    \n            else if(i >= 0.0) \"D-\"\n            else \"E\"\n        ).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsv8ohmwm.scala:44)\n\tat Problem.main(tmpsv8ohmwm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(x => {\n            if (x >= 4) \"A+\"\
    \n            else if (x >= 3.7) \"A\"\n            else if (x >= 3.3) \"A-\"\n\
    \            else if (x >= 3) \"B+\"\n            else if (x >= 2.7) \"B\"\n \
    \           else if (x >= 2.3) \"B-\"\n            else if (x >= 2) \"C+\"\n \
    \           else if (x >= 1.7) \"C\"\n            else if (x >= 1.3) \"C-\"\n\
    \            else if (x >= 1) \"D+\"\n            else if (x >= 0.7) \"D\"\n \
    \           else if (x >= 0) \"D-\"\n            else \"E\"\n        })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi5vu_3fv.scala:44)\n\tat Problem.main(tmpi5vu_3fv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var grades_mapped : List[String] = List()\n    \
    \    grades.foreach(x => {\n            grades_mapped = grades_mapped :+ (x match\
    \ {\n                case 4.0 => \"A+\"\n                case x if (x > 3.7) =>\
    \ \"A\"\n                case x if (x > 3.3) => \"A-\"\n                case x\
    \ if (x > 3.0) => \"B+\"\n                case x if (x > 2.7) => \"B\"\n     \
    \           case x if (x > 2.3) => \"B-\"\n                case x if (x > 2.0)\
    \ => \"C+\"\n                case x if (x > 1.7) => \"C\"\n                case\
    \ x if (x > 1.3) => \"C-\"\n                case x if (x > 1.0) => \"D+\"\n  \
    \              case x if (x > 0.7) => \"D\"\n                case x if (x > 0.0)\
    \ => \"D-\"\n                case x if (x == 0.0) => \"E\"\n            })\n \
    \       })\n        grades_mapped\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2d36bycv.scala:48)\n\tat Problem.main(tmp2d36bycv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in the rest.\n        var results = new\
    \ ListBuffer[String]()\n        for (g <- grades) {\n            if (g >= 4.0)\
    \ {\n                results += \"A+\"\n            } else if (g >= 3.7) {\n \
    \               results += \"A\"\n            } else if (g >= 3.3) {\n       \
    \         results += \"A-\"\n            } else if (g >= 3.0) {\n            \
    \    results += \"B+\"\n            } else if (g >= 2.7) {\n                results\
    \ += \"B\"\n            } else if (g >= 2.3) {\n                results += \"\
    B-\"\n            } else if (g >= 2.0) {\n                results += \"C+\"\n\
    \            } else if (g >= 1.7) {\n                results += \"C\"\n      \
    \      } else if (g >= 1.3) {\n                results += \"C-\"\n           \
    \ } else if (g >= 1.0) {\n                results += \"D+\"\n            } else\
    \ if (g >= 0.7) {\n                results += \"D\"\n            } else if (g\
    \ >= 0.0) {\n                results += \"D-\"\n            } else {\n       \
    \         results += \"E\"\n            }\n        }\n        results.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp076656o7.scala:61)\n\tat Problem.main(tmp076656o7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        def getGrade(grade : Float) : String = {\n     \
    \       if (grade == 4.0) \"A+\"\n            else if (grade > 3.7) \"A\"\n  \
    \          else if (grade > 3.3) \"A-\"\n            else if (grade > 3.0) \"\
    B+\"\n            else if (grade > 2.7) \"B\"\n            else if (grade > 2.3)\
    \ \"B-\"\n            else if (grade > 2.0) \"C+\"\n            else if (grade\
    \ > 1.7) \"C\"\n            else if (grade > 1.3) \"C-\"\n            else if\
    \ (grade > 1.0) \"D+\"\n            else if (grade > 0.7) \"D\"\n            else\
    \ if (grade > 0.0) \"D-\"\n            else \"E\"\n        }\n        grades.map(getGrade(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6atbsva2.scala:45)\n\tat Problem.main(tmp6atbsva2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Note: You need to use round(num, 2) to round\
    \ a float to 2 decimal places.\n        // Note: You need to use the definition\
    \ of a case class to solve this problem.\n        // Note: You should not use\
    \ and if-else, for, or any other control structure\n        // except for pattern\
    \ matching.\n        // YOUR CODE HERE\n        var result = List[String]()\n\
    \        grades.foreach{\n            case 4.0 if (round(4.0, 2) == 4.0) => result\
    \ = \"A+\" :: result\n            case x if (round(x, 2) > 3.7) => result = \"\
    A\" :: result\n            case x if (round(x, 2) > 3.3) => result = \"A-\" ::\
    \ result\n            case x if (round(x, 2) > 3.0) => result = \"B+\" :: result\n\
    \            case x if (round(x, 2) > 2.7) => result = \"B\" :: result\n     \
    \       case x if (round(x, 2) > 2.3) => result = \"B-\" :: result\n         \
    \   case x if (round(x, 2) > 2.0) => result = \"C+\" :: result\n            case\
    \ x if (round(x, 2) > 1.7) => result = \"C\" :: result\n            case x if\
    \ (round(x, 2) > 1.3) => result = \"C-\" :: result\n            case x if (round(x,\
    \ 2) > 1.0) => result = \"D+\" :: result\n            case x if (round(x, 2) >\
    \ 0.7) => result = \"D\" :: result\n            case x if (round(x, 2) > 0.0)\
    \ => result = \"D-\" :: result\n            case x if (round(x, 2) == 0.0) =>\
    \ result = \"E\" :: result\n        }\n        result.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpga65ry05.scala:34:25 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mcase\e[0m \e[31m4.0\e[0m \e[33mif\e\
    [0m (round(\e[31m4.0\e[0m, \e[31m2\e[0m) == \e[31m4.0\e[0m) => result = \e[31m\"\
    A+\"\e[0m :: result\n\e[31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mround\e\
    [0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double): Long\n\e[31m   |\e[0m (x: Float): Int\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0mmatch arguments ((Double, Int))\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpga65ry05.scala:35:23 -----------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m (round(x, \e[31m2\e[0m) >\
    \ \e[31m3.7\e[0m) => result = \e[31m\"A\"\e[0m :: result\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m   |\e[0m (x: Float):\
    \ Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch arguments ((T1, T2))\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpga65ry05.scala:36:23 -----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m (round(x,\
    \ \e[31m2\e[0m) > \e[31m3.3\e[0m) => result = \e[31m\"A-\"\e[0m :: result\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double): Long\n\e[31m\
    \   |\e[0m (x: Float): Int\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0mmatch\
    \ arguments ((T1, T2))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpga65ry05.scala:37:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            \e[33mcase\e\
    [0m x \e[33mif\e[0m (round(x, \e[31m2\e[0m) > \e[31m3.0\e[0m) => result = \e[31m\"\
    B+\"\e[0m :: result\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e\
    [31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mround\e\
    [0m in \e[33mpackage\e[0m \e[35mscala"
  stdout: ''
  timestamp: 1660010098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in implementation here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps_wno168.scala:26:68\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m    \e[33mdef\e[0m \e[36mnumericalLetterGrade\e\
    [0m(\e[36mgrades\e[0m : \e[35mList\e[0m[\e[35mFloat\e[0m]) : \e[35mList\e[0m[\e\
    [35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                                  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                                    Required: List[String]\n\e[31m27 |\e[0m \
    \       \e[34m// Fill in implementation here\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010098
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // No need to do bounds checking on GPA here because\
    \ we assume the input \n        // is always valid.\n        var numericalLetterGrades\
    \ = new ListBuffer[String]()\n        for (grade <- grades) {\n            if\
    \ (grade == 4.0) numericalLetterGrades += \"A+\"\n            else if (grade >=\
    \ 3.7) numericalLetterGrades += \"A\"\n            else if (grade >= 3.3) numericalLetterGrades\
    \ += \"A-\"\n            else if (grade >= 3.0) numericalLetterGrades += \"B+\"\
    \n            else if (grade >= 2.7) numericalLetterGrades += \"B\"\n        \
    \    else if (grade >= 2.3) numericalLetterGrades += \"B-\"\n            else\
    \ if (grade >= 2.0) numericalLetterGrades += \"C+\"\n            else if (grade\
    \ >= 1.7) numericalLetterGrades += \"C\"\n            else if (grade >= 1.3) numericalLetterGrades\
    \ += \"C-\"\n            else if (grade >= 1.0) numericalLetterGrades += \"D+\"\
    \n            else if (grade >= 0.7) numericalLetterGrades += \"D\"\n        \
    \    else if (grade >= 0.0) numericalLetterGrades += \"D-\"\n            else\
    \ numericalLetterGrades += \"E\"\n        }\n        return numericalLetterGrades.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcspw4ct.scala:48)\n\tat Problem.main(tmpdcspw4ct.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here\n        return null\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.numericalLetterGrade(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmpj2dbxy44.scala:31)\n\tat Problem.main(tmpj2dbxy44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var finalGrades = new ListBuffer[String]\n     \
    \   for (grade <- grades) {\n            if (grade == 4.0) {\n               \
    \ finalGrades += \"A+\"\n            } else if (grade > 3.7) {\n             \
    \   finalGrades += \"A\"\n            } else if (grade > 3.3) {\n            \
    \    finalGrades += \"A-\"\n            } else if (grade > 3.0) {\n          \
    \      finalGrades += \"B+\"\n            } else if (grade > 2.7) {\n        \
    \        finalGrades += \"B\"\n            } else if (grade > 2.3) {\n       \
    \         finalGrades += \"B-\"\n            } else if (grade > 2.0) {\n     \
    \           finalGrades += \"C+\"\n            } else if (grade > 1.7) {\n   \
    \             finalGrades += \"C\"\n            } else if (grade > 1.3) {\n  \
    \              finalGrades += \"C-\"\n            } else if (grade > 1.0) {\n\
    \                finalGrades += \"D+\"\n            } else if (grade > 0.7) {\n\
    \                finalGrades += \"D\"\n            } else if (grade > 0.0) {\n\
    \                finalGrades += \"D-\"\n            } else {\n               \
    \ finalGrades += \"E\"\n            }\n        }\n        return finalGrades.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihu3vdf1.scala:60)\n\tat Problem.main(tmpihu3vdf1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var list: List[String] = List()\n        for (x\
    \ <- grades) {\n            if (x == 4.0) {\n                list = \"A+\" ::\
    \ list\n            } else if (x >= 3.7) {\n                list = \"A\" :: list\n\
    \            } else if (x >= 3.3) {\n                list = \"A-\" :: list\n \
    \           } else if (x >= 3.0) {\n                list = \"B+\" :: list\n  \
    \          } else if (x >= 2.7) {\n                list = \"B\" :: list\n    \
    \        } else if (x >= 2.3) {\n                list = \"B-\" :: list\n     \
    \       } else if (x >= 2.0) {\n                list = \"C+\" :: list\n      \
    \      } else if (x >= 1.7) {\n                list = \"C\" :: list\n        \
    \    } else if (x >= 1.3) {\n                list = \"C-\" :: list\n         \
    \   } else if (x >= 1.0) {\n                list = \"D+\" :: list\n          \
    \  } else if (x >= 0.7) {\n                list = \"D\" :: list\n            }\
    \ else if (x >= 0.0) {\n                list = \"D-\" :: list\n            } else\
    \ {\n                list = \"E\" :: list\n            }\n        }\n        return\
    \ list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptoyqgfd9.scala:60)\n\tat Problem.main(tmptoyqgfd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // IMPLEMENT ME!\n        val gradesList = grades.map(\
    \ grade => {\n          if (grade >= 4.0) \"A+\"\n          else if (grade > 3.7)\
    \ \"A\"\n          else if (grade > 3.3) \"A-\"\n          else if (grade > 3.0)\
    \ \"B+\"\n          else if (grade > 2.7) \"B\"\n          else if (grade > 2.3)\
    \ \"B-\"\n          else if (grade > 2.0) \"C+\"\n          else if (grade > 1.7)\
    \ \"C\"\n          else if (grade > 1.3) \"C-\"\n          else if (grade > 1.0)\
    \ \"D+\"\n          else if (grade > 0.7) \"D\"\n          else if (grade > 0.0)\
    \ \"D-\"\n          else \"E\"\n        })\n        gradesList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7gxow4zx.scala:46)\n\tat Problem.main(tmp7gxow4zx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(x => \n            if (x > 3.7) \"A\"\
    \n            else if (x > 3.3) \"A-\"\n            else if (x > 3.0) \"B+\"\n\
    \            else if (x > 2.7) \"B\"\n            else if (x > 2.3) \"B-\"\n \
    \           else if (x > 2.0) \"C+\"\n            else if (x > 1.7) \"C\"\n  \
    \          else if (x > 1.3) \"C-\"\n            else if (x > 1.0) \"D+\"\n  \
    \          else if (x > 0.7) \"D\"\n            else if (x > 0.0) \"D-\"\n   \
    \         else \"E\"\n        )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp34iucg5p.scala:43)\n\tat Problem.main(tmp34iucg5p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        ???\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.numericalLetterGrade(tmpwfird_ew.scala:27)\n\tat Problem$.main(tmpwfird_ew.scala:30)\n\
    \tat Problem.main(tmpwfird_ew.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(g =>\n            if (g == 4.0)\n   \
    \             \"A+\"\n            else if (g > 3.7)\n                \"A\"\n \
    \           else if (g > 3.3)\n                \"A-\"\n            else if (g\
    \ > 3.0)\n                \"B+\"\n            else if (g > 2.7)\n            \
    \    \"B\"\n            else if (g > 2.3)\n                \"B-\"\n          \
    \  else if (g > 2.0)\n                \"C+\"\n            else if (g > 1.7)\n\
    \                \"C\"\n            else if (g > 1.3)\n                \"C-\"\n\
    \            else if (g > 1.0)\n                \"D+\"\n            else if (g\
    \ > 0.7)\n                \"D\"\n            else if (g > 0.0)\n             \
    \   \"D-\"\n            else if (g == 0.0)\n                \"E\"\n          \
    \  else\n                \"-\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl9a284ug.scala:58)\n\tat Problem.main(tmpl9a284ug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val scoreToLetterMap = Map[Float, String](\n   \
    \             4.0f -> \"A+\",\n                3.7f -> \"A\",\n              \
    \  3.3f -> \"A-\",\n                3.0f -> \"B+\",\n                2.7f -> \"\
    B\",\n                2.3f -> \"B-\",\n                2.0f -> \"C+\",\n     \
    \           1.7f -> \"C\",\n                1.3f -> \"C-\",\n                1.0f\
    \ -> \"D+\",\n                0.7f -> \"D\",\n                0.0f -> \"D-\",\n\
    \                -1.0f -> \"E\"\n        )\n        var letterGrades = List[String]()\n\
    \        for (grade <- grades) {\n            letterGrades = getLetterGrade(grade,\
    \ scoreToLetterMap) :: letterGrades\n        }\n        letterGrades\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3tfhiwm.scala:44:27 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            letterGrades = getLetterGrade(grade, scoreToLetterMap)\
    \ :: letterGrades\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: getLetterGrade\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill-in the code here\n        val new_grade\
    \ = grades.map { grade => \n            if (grade >= 4) \"A+\"\n            else\
    \ if (grade >= 3.7) \"A\"\n            else if (grade >= 3.3) \"A-\"\n       \
    \     else if (grade >= 3) \"B+\"\n            else if (grade >= 2.7) \"B\"\n\
    \            else if (grade >= 2.3) \"B-\"\n            else if (grade >= 2) \"\
    C+\"\n            else if (grade >= 1.7) \"C\"\n            else if (grade >=\
    \ 1.3) \"C-\"\n            else if (grade >= 1) \"D+\"\n            else if (grade\
    \ >= 0.7) \"D\"\n            else if (grade >= 0) \"D-\"\n            else \"\
    E\"\n        }\n        new_grade\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk25zr03t.scala:46)\n\tat Problem.main(tmpk25zr03t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n    \tval func = (x : Float) => {\n    \t\tx match {\n \
    \   \t\t\tcase x if x >= 4.0 => \"A+\"\n    \t\t\tcase x if x >= 3.7 => \"A\"\n\
    \    \t\t\tcase x if x >= 3.3 => \"A-\"\n    \t\t\tcase x if x >= 3.0 => \"B+\"\
    \n    \t\t\tcase x if x >= 2.7 => \"B\"\n    \t\t\tcase x if x >= 2.3 => \"B-\"\
    \n    \t\t\tcase x if x >= 2.0 => \"C+\"\n    \t\t\tcase x if x >= 1.7 => \"C\"\
    \n    \t\t\tcase x if x >= 1.3 => \"C-\"\n    \t\t\tcase x if x >= 1.0 => \"D+\"\
    \n    \t\t\tcase x if x >= 0.7 => \"D\"\n    \t\t\tcase x if x >= 0.0 => \"D-\"\
    \n    \t\t\tcase _ => \"E\"\n    \t\t}\n    \t}\n    \tgrades.map(func)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv4__rh2u.scala:47)\n\tat Problem.main(tmpv4__rh2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var list : List[String] = List()\n        for (elem\
    \ <- grades) {\n            var grade : String = elem match {\n              \
    \  case e if e == 4.0 => \"A+\"\n                case e if e > 3.7 => \"A\"\n\
    \                case e if e > 3.3 => \"A-\"\n                case e if e > 3.0\
    \ => \"B+\"\n                case e if e > 2.7 => \"B\"\n                case\
    \ e if e > 2.3 => \"B-\"\n                case e if e > 2.0 => \"C+\"\n      \
    \          case e if e > 1.7 => \"C\"\n                case e if e > 1.3 => \"\
    C-\"\n                case e if e > 1.0 => \"D+\"\n                case e if e\
    \ > 0.7 => \"D\"\n                case e if e > 0.0 => \"D-\"\n              \
    \  case e if e == 0.0 => \"E\"\n            }\n            list = list :+ grade\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpluiv0yv4.scala:49)\n\tat Problem.main(tmpluiv0yv4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradeMap = Map[Float, String](\n           \
    \ 4.0f -> \"A+\",\n            3.7f -> \"A\",\n            3.3f -> \"A-\",\n \
    \           3.0f -> \"B+\",\n            2.7f -> \"B\",\n            2.3f -> \"\
    B-\",\n            2.0f -> \"C+\",\n            1.7f -> \"C\",\n            1.3f\
    \ -> \"C-\",\n            1.0f -> \"D+\",\n            0.7f -> \"D\",\n      \
    \      0.0f -> \"D-\",\n            -1.0f -> \"E\"\n        )\n        val sortedGrades\
    \ = grades.sortWith(_ > _)\n        val result = ListBuffer[String]()\n      \
    \  var previousLetterGrade = \"D-\"\n        for (i <- 0 until sortedGrades.length)\
    \ {\n            val grade = sortedGrades(i)\n            var letterGrade = \"\
    D-\"\n            for (gradeMapKey <- gradeMap.keys) {\n                if (grade\
    \ >= gradeMapKey) {\n                    letterGrade = gradeMap(gradeMapKey)\n\
    \                    break\n                }\n            }\n            result\
    \ += letterGrade\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5073oxll.scala:51:20 ------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010103
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var result : List[String] = List()\n        for\
    \ (grade <- grades) {\n            var result_grade : String = \"\"\n        \
    \    if (grade == 4.0) {\n                result_grade = \"A+\"\n            }\
    \ else if (grade > 3.7) {\n                result_grade = \"A\"\n            }\
    \ else if (grade > 3.3) {\n                result_grade = \"A-\"\n           \
    \ } else if (grade > 3.0) {\n                result_grade = \"B+\"\n         \
    \   } else if (grade > 2.7) {\n                result_grade = \"B\"\n        \
    \    } else if (grade > 2.3) {\n                result_grade = \"B-\"\n      \
    \      } else if (grade > 2.0) {\n                result_grade = \"C+\"\n    \
    \        } else if (grade > 1.7) {\n                result_grade = \"C\"\n   \
    \         } else if (grade > 1.3) {\n                result_grade = \"C-\"\n \
    \           } else if (grade > 1.0) {\n                result_grade = \"D+\"\n\
    \            } else if (grade > 0.7) {\n                result_grade = \"D\"\n\
    \            } else if (grade > 0.0) {\n                result_grade = \"D-\"\n\
    \            } else {\n                result_grade = \"E\"\n            }\n \
    \           result = result :+ result_grade\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl83x581d.scala:62)\n\tat Problem.main(tmpl83x581d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010108
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n    \tvar res = List[String]()\n    \tfor (g <- grades)\
    \ {\n    \t\tif (g > 4.0) res = res :+ \"A+\"\n    \t\telse if (g > 3.7) res =\
    \ res :+ \"A\"\n    \t\telse if (g > 3.3) res = res :+ \"A-\"\n    \t\telse if\
    \ (g > 3.0) res = res :+ \"B+\"\n    \t\telse if (g > 2.7) res = res :+ \"B\"\n\
    \    \t\telse if (g > 2.3) res = res :+ \"B-\"\n    \t\telse if (g > 2.0) res\
    \ = res :+ \"C+\"\n    \t\telse if (g > 1.7) res = res :+ \"C\"\n    \t\telse\
    \ if (g > 1.3) res = res :+ \"C-\"\n    \t\telse if (g > 1.0) res = res :+ \"\
    D+\"\n    \t\telse if (g > 0.7) res = res :+ \"D\"\n    \t\telse if (g > 0.0)\
    \ res = res :+ \"D-\"\n    \t\telse res = res :+ \"E\"\n    \t}\n    \tres\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsnim7pzs.scala:46)\n\tat Problem.main(tmpsnim7pzs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var result = List[String]()\n        var numGrade\
    \ = 0f\n        var letterGrade = \"\"\n        for (grade <- grades) {\n    \
    \        if (grade >= 4.0) {\n                numGrade = 4.0f\n              \
    \  letterGrade = \"A+\"\n            } else if (grade >= 3.7) {\n            \
    \    numGrade = 3.7f\n                letterGrade = \"A\"\n            } else\
    \ if (grade >= 3.3) {\n                numGrade = 3.3f\n                letterGrade\
    \ = \"A-\"\n            } else if (grade >= 3.0) {\n                numGrade =\
    \ 3.0f\n                letterGrade = \"B+\"\n            } else if (grade >=\
    \ 2.7) {\n                numGrade = 2.7f\n                letterGrade = \"B\"\
    \n            } else if (grade >= 2.3) {\n                numGrade = 2.3f\n  \
    \              letterGrade = \"B-\"\n            } else if (grade >= 2.0) {\n\
    \                numGrade = 2.0f\n                letterGrade = \"C+\"\n     \
    \       } else if (grade >= 1.7) {\n                numGrade = 1.7f\n        \
    \        letterGrade = \"C\"\n            } else if (grade >= 1.3) {\n       \
    \         numGrade = 1.3f\n                letterGrade = \"C-\"\n            }\
    \ else if (grade >= 1.0) {\n                numGrade = 1.0f\n                letterGrade\
    \ = \"D+\"\n            } else if (grade >= 0.7) {\n                numGrade =\
    \ 0.7f\n                letterGrade = \"D\"\n            } else if (grade >= 0.0)\
    \ {\n                numGrade = 0.0f\n                letterGrade = \"D-\"\n \
    \           } else {\n                numGrade = 0.0f\n                letterGrade\
    \ = \"E\"\n            }\n            result = numGrade.toString :: result\n \
    \       }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ily29gx.scala:76)\n\tat Problem.main(tmp7ily29gx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Your code goes here\n        grades.map(x =>\
    \ {\n            if (x == 4.0) \"A+\"\n            else if (x >= 3.7) \"A\"\n\
    \            else if (x >= 3.3) \"A-\"\n            else if (x >= 3.0) \"B+\"\n\
    \            else if (x >= 2.7) \"B\"\n            else if (x >= 2.3) \"B-\"\n\
    \            else if (x >= 2.0) \"C+\"\n            else if (x >= 1.7) \"C\"\n\
    \            else if (x >= 1.3) \"C-\"\n            else if (x >= 1.0) \"D+\"\n\
    \            else if (x >= 0.7) \"D\"\n            else if (x >= 0.0) \"D-\"\n\
    \            else \"E\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2lsoevp4.scala:45)\n\tat Problem.main(tmp2lsoevp4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        def numericToLetter(score : Float) : String = {\n\
    \            var grade = \"E\"\n            if (score == 4.0) {\n            \
    \    grade = \"A+\"\n            } else if (score > 3.7) {\n                grade\
    \ = \"A\"\n            } else if (score > 3.3) {\n                grade = \"A-\"\
    \n            } else if (score > 3.0) {\n                grade = \"B+\"\n    \
    \        } else if (score > 2.7) {\n                grade = \"B\"\n          \
    \  } else if (score > 2.3) {\n                grade = \"B-\"\n            } else\
    \ if (score > 2.0) {\n                grade = \"C+\"\n            } else if (score\
    \ > 1.7) {\n                grade = \"C\"\n            } else if (score > 1.3)\
    \ {\n                grade = \"C-\"\n            } else if (score > 1.0) {\n \
    \               grade = \"D+\"\n            } else if (score > 0.7) {\n      \
    \          grade = \"D\"\n            } else if (score > 0.0) {\n            \
    \    grade = \"D-\"\n            }\n            grade\n        }\n        if (grades.length\
    \ == 0) {\n            List[String]()\n        } else {\n            var letterGrades\
    \ = new ListBuffer[String]()\n            for (grade <- grades) {\n          \
    \      letterGrades += numericToLetter(grade)\n            }\n            letterGrades.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhc3p_mv.scala:67)\n\tat Problem.main(tmpbhc3p_mv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(x => {\n            if (x >= 4.0) {\n\
    \                \"A+\"\n            } else if (x >= 3.7) {\n                \"\
    A\"\n            } else if (x >= 3.3) {\n                \"A-\"\n            }\
    \ else if (x >= 3.0) {\n                \"B+\"\n            } else if (x >= 2.7)\
    \ {\n                \"B\"\n            } else if (x >= 2.3) {\n             \
    \   \"B-\"\n            } else if (x >= 2.0) {\n                \"C+\"\n     \
    \       } else if (x >= 1.7) {\n                \"C\"\n            } else if (x\
    \ >= 1.3) {\n                \"C-\"\n            } else if (x >= 1.0) {\n    \
    \            \"D+\"\n            } else if (x >= 0.7) {\n                \"D\"\
    \n            } else if (x >= 0.0) {\n                \"D-\"\n            } else\
    \ {\n                \"E\"\n            }\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4tm_h884.scala:58)\n\tat Problem.main(tmp4tm_h884.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in this function so that it returns the\
    \ correct output.\n        // You can use the helper function below that is given\
    \ to you.\n        return List[String]()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8t7ahuzd.scala:32)\n\tat Problem.main(tmp8t7ahuzd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your solution here\n        var result:List[String]\
    \ = List()\n        for(grade <- grades){\n          if(grade == 4.0){\n     \
    \       result = result :+ \"A+\"\n          }else if(grade > 3.7){\n        \
    \    result = result :+ \"A\"\n          }else if(grade > 3.3){\n            result\
    \ = result :+ \"A-\"\n          }else if(grade > 3.0){\n            result = result\
    \ :+ \"B+\"\n          }else if(grade > 2.7){\n            result = result :+\
    \ \"B\"\n          }else if(grade > 2.3){\n            result = result :+ \"B-\"\
    \n          }else if(grade > 2.0){\n            result = result :+ \"C+\"\n  \
    \        }else if(grade > 1.7){\n            result = result :+ \"C\"\n      \
    \    }else if(grade > 1.3){\n            result = result :+ \"C-\"\n         \
    \ }else if(grade > 1.0){\n            result = result :+ \"D+\"\n          }else\
    \ if(grade > 0.7){\n            result = result :+ \"D\"\n          }else if(grade\
    \ > 0.0){\n            result = result :+ \"D-\"\n          }else{\n         \
    \   result = result :+ \"E\"\n          }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo_84q7qd.scala:61)\n\tat Problem.main(tmpo_84q7qd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val letters = List(\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\")\n      \
    \  val cutoffs = List(4.0f, 3.7f, 3.3f, 3.0f, 2.7f, 2.3f, 2.0f, 1.7f, 1.3f, 1.0f,\
    \ 0.7f, 0.0f, 0.0f)\n        val gradesMap = cutoffs.zip(letters).toMap\n    \
    \    grades.map(\n            grade => {\n                gradesMap.foldLeft((\"\
    F\")(\n                    (letter, cutoff) => {\n                        if (grade\
    \ >= cutoff._1) {\n                            cutoff._2\n                   \
    \     } else {\n                            letter\n                        }\n\
    \                    }\n                ))\n            }\n        )\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpvjw3rr61.scala:33:21 -----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    (\e[36mletter\e[0m, \e[36mcutoff\e\
    [0m) => {\n\e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                     I could not infer the type of the parameter letter.\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmpvjw3rr61.scala:33:29 -----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    (\e[36mletter\e[0m, \e[36mcutoff\e\
    [0m) => {\n\e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                     I could not infer the type of the parameter cutoff.\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade =>\n            if (grade == 4.0)\
    \ \"A+\"\n            else if (grade > 3.7) \"A\"\n            else if (grade\
    \ > 3.3) \"A-\"\n            else if (grade > 3.0) \"B+\"\n            else if\
    \ (grade > 2.7) \"B\"\n            else if (grade > 2.3) \"B-\"\n            else\
    \ if (grade > 2.0) \"C+\"\n            else if (grade > 1.7) \"C\"\n         \
    \   else if (grade > 1.3) \"C-\"\n            else if (grade > 1.0) \"D+\"\n \
    \           else if (grade > 0.7) \"D\"\n            else if (grade > 0.0) \"\
    D-\"\n            else \"E\"\n        )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcoei4xfw.scala:44)\n\tat Problem.main(tmpcoei4xfw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // build a dictionary mapping grades to letter grades\n\
    \        val gradeDict = Map(4.0f.toFloat -> \"A+\", 3.7f.toFloat -> \"A\", 3.3f.toFloat\
    \ -> \"A-\", 3.0f.toFloat -> \"B+\", 2.7f.toFloat -> \"B\", 2.3f.toFloat -> \"\
    B-\", 2.0f.toFloat -> \"C+\", 1.7f.toFloat -> \"C\", 1.3f.toFloat -> \"C-\", 1.0f.toFloat\
    \ -> \"D+\", 0.7f.toFloat -> \"D\", 0.0f.toFloat -> \"D-\", 0.0f.toFloat -> \"\
    E\")\n        var letterGradeList = List[String]()\n        for (numericalGrade\
    \ <- grades) {\n            // search for the numerical grade in the map in reverse\
    \ order\n            var grade : String = null\n            for (i <- gradeDict.keys.toList.sorted.reverse)\
    \ {\n                if (numericalGrade >= i) {\n                    grade = gradeDict(i)\n\
    \                    break\n                }\n            }\n            letterGradeList\
    \ ::= grade\n        }\n        letterGradeList.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4kbidmu6.scala:36:20 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var finalGrades : List[String] = List();\n     \
    \   for (g <- grades) {\n            if (g >= 4.0) {\n                finalGrades\
    \ = finalGrades :+ \"A+\";\n            } else if (g >= 3.7) {\n             \
    \   finalGrades = finalGrades :+ \"A\";\n            } else if (g >= 3.3) {\n\
    \                finalGrades = finalGrades :+ \"A-\";\n            } else if (g\
    \ >= 3.0) {\n                finalGrades = finalGrades :+ \"B+\";\n          \
    \  } else if (g >= 2.7) {\n                finalGrades = finalGrades :+ \"B\"\
    ;\n            } else if (g >= 2.3) {\n                finalGrades = finalGrades\
    \ :+ \"B-\";\n            } else if (g >= 2.0) {\n                finalGrades\
    \ = finalGrades :+ \"C+\";\n            } else if (g >= 1.7) {\n             \
    \   finalGrades = finalGrades :+ \"C\";\n            } else if (g >= 1.3) {\n\
    \                finalGrades = finalGrades :+ \"C-\";\n            } else if (g\
    \ >= 1.0) {\n                finalGrades = finalGrades :+ \"D+\";\n          \
    \  } else if (g >= 0.7) {\n                finalGrades = finalGrades :+ \"D\"\
    ;\n            } else if (g >= 0.0) {\n                finalGrades = finalGrades\
    \ :+ \"D-\";\n            } else {\n                finalGrades = finalGrades\
    \ :+ \"E\";\n            }\n        }\n        return finalGrades;\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqa1pn3kl.scala:60)\n\tat Problem.main(tmpqa1pn3kl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in the code here\n        return Nil\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpann1kaqi.scala:31)\n\tat Problem.main(tmpann1kaqi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in the body of this function\n        return\
    \ List[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnc136p0r.scala:31)\n\tat Problem.main(tmpnc136p0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n      var letterGrades : List[String] = List()\n       \
    \ for (grade <- grades) {\n          if (grade >= 4) {\n            letterGrades\
    \ = \"A+\" :: letterGrades\n          } else if (grade >= 3.7) {\n           \
    \ letterGrades = \"A\" :: letterGrades\n          } else if (grade >= 3.3) {\n\
    \            letterGrades = \"A-\" :: letterGrades\n          } else if (grade\
    \ >= 3) {\n            letterGrades = \"B+\" :: letterGrades\n          } else\
    \ if (grade >= 2.7) {\n            letterGrades = \"B\" :: letterGrades\n    \
    \      } else if (grade >= 2.3) {\n            letterGrades = \"B-\" :: letterGrades\n\
    \          } else if (grade >= 2) {\n            letterGrades = \"C+\" :: letterGrades\n\
    \          } else if (grade >= 1.7) {\n            letterGrades = \"C\" :: letterGrades\n\
    \          } else if (grade >= 1.3) {\n            letterGrades = \"C-\" :: letterGrades\n\
    \          } else if (grade >= 1) {\n            letterGrades = \"D+\" :: letterGrades\n\
    \          } else if (grade >= 0.7) {\n            letterGrades = \"D\" :: letterGrades\n\
    \          } else if (grade >= 0) {\n            letterGrades = \"D-\" :: letterGrades\n\
    \          } else {\n            letterGrades = \"E\" :: letterGrades\n      \
    \    }\n        }\n        letterGrades.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3wdocxwg.scala:60)\n\tat Problem.main(tmp3wdocxwg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n\t    // ListBuffer is like ArrayBuffer, but immutable.\
    \ It\n\t    // can be converted to List[String]\n\t    val letterGrades = ListBuffer[String]()\n\
    \t    // check all grades\n\t    for (grade <- grades) {\n\t\t    if (grade >=\
    \ 4.0) {\n\t\t\t    letterGrades += \"A+\"\n\t\t    } else if (grade >= 3.7) {\n\
    \t\t\t    letterGrades += \"A\"\n\t\t    } else if (grade >= 3.3) {\n\t\t\t  \
    \  letterGrades += \"A-\"\n\t\t    } else if (grade >= 3.0) {\n\t\t\t    letterGrades\
    \ += \"B+\"\n\t\t    } else if (grade >= 2.7) {\n\t\t\t    letterGrades += \"\
    B\"\n\t\t    } else if (grade >= 2.3) {\n\t\t\t    letterGrades += \"B-\"\n\t\t\
    \    } else if (grade >= 2.0) {\n\t\t\t    letterGrades += \"C+\"\n\t\t    } else\
    \ if (grade >= 1.7) {\n\t\t\t    letterGrades += \"C\"\n\t\t    } else if (grade\
    \ >= 1.3) {\n\t\t\t    letterGrades += \"C-\"\n\t\t    } else if (grade >= 1.0)\
    \ {\n\t\t\t    letterGrades += \"D+\"\n\t\t    } else if (grade >= 0.7) {\n\t\t\
    \t    letterGrades += \"D\"\n\t\t    } else if (grade >= 0.0) {\n\t\t\t    letterGrades\
    \ += \"D-\"\n\t\t    } else {\n\t\t\t    letterGrades += \"E\"\n\t\t    }\n\t\
    \    }\n\t    // return immutable list\n\t    letterGrades.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp77ulq3oq.scala:34:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m\t\t    } \e[33melse\e[0m \e[33mif\e[0m (grade >= \e\
    [31m3.7\e[0m) {\n\e[31m\e[31m   |\e[0m\t\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible\
    \ combinations of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m  \
    \ Previous indent : 3 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 2 tabs,\
    \ 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmp77ulq3oq.scala:36:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m\t\t    } \e[33melse\e[0m \e[33mif\e[0m (grade >= \e\
    [31m3.3\e[0m) {\n\e[31m\e[31m   |\e[0m\t\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible\
    \ combinations of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m  \
    \ Previous indent : 3 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 2 tabs,\
    \ 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmp77ulq3oq.scala:38:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m\t\t    } \e[33melse\e[0m \e[33mif\e[0m (grade >= \e\
    [31m3.0\e[0m) {\n\e[31m\e[31m   |\e[0m\t\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible\
    \ combinations of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m  \
    \ Previous indent : 3 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 2 tabs,\
    \ 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmp77ulq3oq.scala:40:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m\t\t    } \e[33melse\e[0m \e[33mif\e[0m (grade >= \e\
    [31m2.7\e[0m) {\n\e[31m\e[31m   |\e[0m\t\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible\
    \ combinations of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m  \
    \ Previous indent : 3 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 2 tabs,\
    \ 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmp77ulq3oq.scala:42:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m\t\t    } \e[33melse\e[0m \e[33mif\e[0m (grade >= \e\
    [31m2.3\e[0m) {\n\e[31m\e[31m   |\e[0m\t\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible\
    \ combinations of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m  \
    \ Previous indent : 3 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 2 tabs,\
    \ 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmp77ulq3oq.scala:44:4 ------------------------------------------\e\
    [0m\e[0m"
  stdout: ''
  timestamp: 1660010108
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // IMPLEMENT\n        var gradeL = new ListBuffer[String]\n\
    \        for (g <- grades) {\n            if (g >= 4.0) {\n                gradeL\
    \ += \"A+\"\n            } else if (g >= 3.7) {\n                gradeL += \"\
    A\"\n            } else if (g >= 3.3) {\n                gradeL += \"A-\"\n  \
    \          } else if (g >= 3.0) {\n                gradeL += \"B+\"\n        \
    \    } else if (g >= 2.7) {\n                gradeL += \"B\"\n            } else\
    \ if (g >= 2.3) {\n                gradeL += \"B-\"\n            } else if (g\
    \ >= 2.0) {\n                gradeL += \"C+\"\n            } else if (g >= 1.7)\
    \ {\n                gradeL += \"C\"\n            } else if (g >= 1.3) {\n   \
    \             gradeL += \"C-\"\n            } else if (g >= 1.0) {\n         \
    \       gradeL += \"D+\"\n            } else if (g >= 0.7) {\n               \
    \ gradeL += \"D\"\n            } else if (g >= 0.0) {\n                gradeL\
    \ += \"D-\"\n            } else {\n                gradeL += \"E\"\n         \
    \   }\n        }\n        gradeL.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp67pj4zyl.scala:61)\n\tat Problem.main(tmp67pj4zyl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010115
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var finalLetterGrades : List[String] = List()\n\
    \        for (grade <- grades) {\n            finalLetterGrades = finalLetterGrades\
    \ :+ grade.toString\n        }\n        return finalLetterGrades\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhtowerz.scala:34)\n\tat Problem.main(tmpbhtowerz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010115
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // This is how you convert the numerical grade to\
    \ a letter grade\n        // Put your code here\n        def computeLetterGrade(numericalGrade\
    \ : Float) : String = {\n            return \"\"\n        }\n        // Use the\
    \ function to convert the grades to letter grades\n        // Put your code here\n\
    \        return grades.map((numericalGrade) => computeLetterGrade(numericalGrade))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnbzfz1xe.scala:37)\n\tat Problem.main(tmpnbzfz1xe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val result = ArrayBuffer[String]()\n        var\
    \ i = 0\n        while (i < grades.length) {\n            val grade = grades(i)\n\
    \            if (grade > 4.0) {\n                result += \"A+\"\n          \
    \  } else if (grade > 3.7) {\n                result += \"A\"\n            } else\
    \ if (grade > 3.3) {\n                result += \"A-\"\n            } else if\
    \ (grade > 3.0) {\n                result += \"B+\"\n            } else if (grade\
    \ > 2.7) {\n                result += \"B\"\n            } else if (grade > 2.3)\
    \ {\n                result += \"B-\"\n            } else if (grade > 2.0) {\n\
    \                result += \"C+\"\n            } else if (grade > 1.7) {\n   \
    \             result += \"C\"\n            } else if (grade > 1.3) {\n       \
    \         result += \"C-\"\n            } else if (grade > 1.0) {\n          \
    \      result += \"D+\"\n            } else if (grade > 0.7) {\n             \
    \   result += \"D\"\n            } else if (grade > 0.0) {\n                result\
    \ += \"D-\"\n            } else {\n                result += \"E\"\n         \
    \   }\n            i += 1\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47uqxawj.scala:63)\n\tat Problem.main(tmp47uqxawj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010117
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // fill in the missing code\n        if (grades.isEmpty)\
    \ Nil\n        else {\n            val grade = grades.head\n            if (grade\
    \ >= 4) \"A+\" :: numericalLetterGrade(grades.tail)\n            else if (grade\
    \ >= 3.7) \"A\" :: numericalLetterGrade(grades.tail)\n            else if (grade\
    \ >= 3.3) \"A-\" :: numericalLetterGrade(grades.tail)\n            else if (grade\
    \ >= 3) \"B+\" :: numericalLetterGrade(grades.tail)\n            else if (grade\
    \ >= 2.7) \"B\" :: numericalLetterGrade(grades.tail)\n            else if (grade\
    \ >= 2.3) \"B-\" :: numericalLetterGrade(grades.tail)\n            else if (grade\
    \ >= 2) \"C+\" :: numericalLetterGrade(grades.tail)\n            else if (grade\
    \ >= 1.7) \"C\" :: numericalLetterGrade(grades.tail)\n            else if (grade\
    \ >= 1.3) \"C-\" :: numericalLetterGrade(grades.tail)\n            else if (grade\
    \ >= 1) \"D+\" :: numericalLetterGrade(grades.tail)\n            else if (grade\
    \ >= 0.7) \"D\" :: numericalLetterGrade(grades.tail)\n            else if (grade\
    \ >= 0) \"D-\" :: numericalLetterGrade(grades.tail)\n            else \"E\" ::\
    \ numericalLetterGrade(grades.tail)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfowgy7rv.scala:47)\n\tat Problem.main(tmpfowgy7rv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var result : List[String] = List()\n        for\
    \ (i <- grades) {\n            if (i >= 4.0) {\n                result = \"A+\"\
    \ :: result\n            } else if (i >= 3.7) {\n                result = \"A\"\
    \ :: result\n            } else if (i >= 3.3) {\n                result = \"A-\"\
    \ :: result\n            } else if (i >= 3.0) {\n                result = \"B+\"\
    \ :: result\n            } else if (i >= 2.7) {\n                result = \"B\"\
    \ :: result\n            } else if (i >= 2.3) {\n                result = \"B-\"\
    \ :: result\n            } else if (i >= 2.0) {\n                result = \"C+\"\
    \ :: result\n            } else if (i >= 1.7) {\n                result = \"C\"\
    \ :: result\n            } else if (i >= 1.3) {\n                result = \"C-\"\
    \ :: result\n            } else if (i >= 1.0) {\n                result = \"D+\"\
    \ :: result\n            } else if (i >= 0.7) {\n                result = \"D\"\
    \ :: result\n            } else if (i >= 0.0) {\n                result = \"D-\"\
    \ :: result\n            } else {\n                result = \"E\" :: result\n\
    \            }\n        }\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuct8ym7v.scala:60)\n\tat Problem.main(tmpuct8ym7v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in the code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppd0vtphs.scala:26:68\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m    \e[33mdef\e[0m \e[36mnumericalLetterGrade\e\
    [0m(\e[36mgrades\e[0m : \e[35mList\e[0m[\e[35mFloat\e[0m]) : \e[35mList\e[0m[\e\
    [35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                                  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                                    Required: List[String]\n\e[31m27 |\e[0m \
    \       \e[34m// Fill in the code here\e[0m\n\e[31m28 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here\n        val table = List(\n\
    \            (4.0f.toFloat, \"A+\"),\n            (3.7f.toFloat, \"A\"),\n   \
    \         (3.3f.toFloat, \"A-\"),\n            (3.0f.toFloat, \"B+\"),\n     \
    \       (2.7f.toFloat, \"B\"),\n            (2.3f.toFloat, \"B-\"),\n        \
    \    (2.0f.toFloat, \"C+\"),\n            (1.7f.toFloat, \"C\"),\n           \
    \ (1.3f.toFloat, \"C-\"),\n            (1.0f.toFloat, \"D+\"),\n            (0.7f.toFloat,\
    \ \"D\"),\n            (0.0f.toFloat, \"D-\"),\n            (0.0f.toFloat, \"\
    E\")\n        )\n        var translatedGrades : List[String] = List()\n      \
    \  for (grade <- grades) {\n            var gradeTranslated = false\n        \
    \    for (element <- table) {\n                if (gradeTranslated == false) {\n\
    \                    if (grade >= element._1) {\n                        translatedGrades\
    \ = translatedGrades :+ element._2\n                        gradeTranslated =\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return translatedGrades\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoqjhclq3.scala:58)\n\tat Problem.main(tmpoqjhclq3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(x => {\n            if (x == 4.0) {\n\
    \                \"A+\"\n            } else if (x > 3.7) {\n                \"\
    A\"\n            } else if (x > 3.3) {\n                \"A-\"\n            }\
    \ else if (x > 3.0) {\n                \"B+\"\n            } else if (x > 2.7)\
    \ {\n                \"B\"\n            } else if (x > 2.3) {\n              \
    \  \"B-\"\n            } else if (x > 2.0) {\n                \"C+\"\n       \
    \     } else if (x > 1.7) {\n                \"C\"\n            } else if (x >\
    \ 1.3) {\n                \"C-\"\n            } else if (x > 1.0) {\n        \
    \        \"D+\"\n            } else if (x > 0.7) {\n                \"D\"\n  \
    \          } else if (x > 0.0) {\n                \"D-\"\n            } else {\n\
    \                \"E\"\n            }\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk__r_8wr.scala:58)\n\tat Problem.main(tmpk__r_8wr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n\t    val (aPlus, a, aMinus, bPlus, b, bMinus, cPlus, c,\
    \ cMinus, dPlus, d, dMinus, e) = (4.0f, 3.7f, 3.3f, 3.0f, 2.7f, 2.3f, 2.0f, 1.7f,\
    \ 1.3f, 1.0f, 0.7f, 0.0f, 0.0f)\n\t    var gradeArray = ArrayBuffer[String]()\n\
    \t    for (x <- grades) {\n\t\t    if (x == aPlus) {\n\t\t\t    gradeArray +=\
    \ \"A+\"\n\t\t    } else if (x < aPlus && x >= a) {\n\t\t\t    gradeArray += \"\
    A\"\n\t\t    } else if (x < a && x >= aMinus) {\n\t\t\t    gradeArray += \"A-\"\
    \n\t\t    } else if (x < aMinus && x >= bPlus) {\n\t\t\t    gradeArray += \"B+\"\
    \n\t\t    } else if (x < bPlus && x >= b) {\n\t\t\t    gradeArray += \"B\"\n\t\
    \t    } else if (x < b && x >= bMinus) {\n\t\t\t    gradeArray += \"B-\"\n\t\t\
    \    } else if (x < bMinus && x >= cPlus) {\n\t\t\t    gradeArray += \"C+\"\n\t\
    \t    } else if (x < cPlus && x >= c) {\n\t\t\t    gradeArray += \"C\"\n\t\t \
    \   } else if (x < c && x >= cMinus) {\n\t\t\t    gradeArray += \"C-\"\n\t\t \
    \   } else if (x < cMinus && x >= dPlus) {\n\t\t\t    gradeArray += \"D+\"\n\t\
    \t    } else if (x < dPlus && x >= d) {\n\t\t\t    gradeArray += \"D\"\n\t\t \
    \   } else if (x < d && x >= dMinus) {\n\t\t\t    gradeArray += \"D-\"\n\t\t \
    \   } else if (x < dMinus && x >= e) {\n\t\t\t\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkh3amm6c.scala:32:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m\t\t    } \e[33melse\e[0m \e[33mif\e[0m (x < aPlus &&\
    \ x >= a) {\n\e[31m\e[31m   |\e[0m\t\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible\
    \ combinations of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m  \
    \ Previous indent : 3 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 2 tabs,\
    \ 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpkh3amm6c.scala:34:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m\t\t    } \e[33melse\e[0m \e[33mif\e[0m (x < a && x >=\
    \ aMinus) {\n\e[31m\e[31m   |\e[0m\t\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible\
    \ combinations of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m  \
    \ Previous indent : 3 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 2 tabs,\
    \ 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpkh3amm6c.scala:36:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m\t\t    } \e[33melse\e[0m \e[33mif\e[0m (x < aMinus &&\
    \ x >= bPlus) {\n\e[31m\e[31m   |\e[0m\t\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible\
    \ combinations of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m  \
    \ Previous indent : 3 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 2 tabs,\
    \ 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpkh3amm6c.scala:38:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m\t\t    } \e[33melse\e[0m \e[33mif\e[0m (x < bPlus &&\
    \ x >= b) {\n\e[31m\e[31m   |\e[0m\t\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible\
    \ combinations of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m  \
    \ Previous indent : 3 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 2 tabs,\
    \ 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpkh3amm6c.scala:40:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m\t\t    } \e[33melse\e[0m \e[33mif\e[0m (x < b && x >=\
    \ bMinus) {\n\e[31m\e[31m   |\e[0m\t\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible\
    \ combinations of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m  \
    \ Previous indent : 3 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 2 tabs,\
    \ 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpkh3amm6c.scala:42:4 ------------------------------------------\e\
    [0m\e[0m\n\e["
  stdout: ''
  timestamp: 1660010116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n      var res = List[String]()\n      for (grade <- grades)\
    \ {\n        grade match {\n          case 4.0 => res = res :+ \"A+\"\n      \
    \    case x if x > 3.7 => res = res :+ \"A\"\n          case x if x > 3.3 => res\
    \ = res :+ \"A-\"\n          case x if x > 3.0 => res = res :+ \"B+\"\n      \
    \    case x if x > 2.7 => res = res :+ \"B\"\n          case x if x > 2.3 => res\
    \ = res :+ \"B-\"\n          case x if x > 2.0 => res = res :+ \"C+\"\n      \
    \    case x if x > 1.7 => res = res :+ \"C\"\n          case x if x > 1.3 => res\
    \ = res :+ \"C-\"\n          case x if x > 1.0 => res = res :+ \"D+\"\n      \
    \    case x if x > 0.7 => res = res :+ \"D\"\n          case x if x > 0.0 => res\
    \ = res :+ \"D-\"\n          case _ => res = res :+ \"E\"\n        }\n      }\n\
    \      res\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgosrzmgh.scala:48)\n\tat Problem.main(tmpgosrzmgh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in the function here\n        var listofgrades\
    \ = grades.map(g => {\n            if (g == 4.0) \"A+\"\n            else if (g\
    \ >= 3.7) \"A\"\n            else if (g >= 3.3) \"A-\"\n            else if (g\
    \ >= 3.0) \"B+\"\n            else if (g >= 2.7) \"B\"\n            else if (g\
    \ >= 2.3) \"B-\"\n            else if (g >= 2.0) \"C+\"\n            else if (g\
    \ >= 1.7) \"C\"\n            else if (g >= 1.3) \"C-\"\n            else if (g\
    \ >= 1.0) \"D+\"\n            else if (g >= 0.7) \"D\"\n            else if (g\
    \ >= 0.0) \"D-\"\n            else \"E\"\n        })\n        listofgrades\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9_gi4tpb.scala:46)\n\tat Problem.main(tmp9_gi4tpb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // TODO: Your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpegi1ea7f.scala:26:68\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m    \e[33mdef\e[0m \e[36mnumericalLetterGrade\e\
    [0m(\e[36mgrades\e[0m : \e[35mList\e[0m[\e[35mFloat\e[0m]) : \e[35mList\e[0m[\e\
    [35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m                                  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                                    Required: List[String]\n\e[31m27 |\e[0m \
    \       \e[34m// TODO: Your code here\e[0m\n\e[31m28 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010119
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var result = List[String]()\n        for (g <- grades)\
    \ {\n            if (g >= 4.0) result = result :+ \"A+\"\n            else if\
    \ (g >= 3.7) result = result :+ \"A\"\n            else if (g >= 3.3) result =\
    \ result :+ \"A-\"\n            else if (g >= 3.0) result = result :+ \"B+\"\n\
    \            else if (g >= 2.7) result = result :+ \"B\"\n            else if\
    \ (g >= 2.3) result = result :+ \"B-\"\n            else if (g >= 2.0) result\
    \ = result :+ \"C+\"\n            else if (g >= 1.7) result = result :+ \"C\"\n\
    \            else if (g >= 1.3) result = result :+ \"C-\"\n            else if\
    \ (g >= 1.0) result = result :+ \"D+\"\n            else if (g >= 0.7) result\
    \ = result :+ \"D\"\n            else if (g >= 0.0) result = result :+ \"D-\"\n\
    \            else result = result :+ \"E\"\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpexo0y_r9.scala:46)\n\tat Problem.main(tmpexo0y_r9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        ???\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.numericalLetterGrade(tmpwfird_ew.scala:27)\n\tat Problem$.main(tmpwfird_ew.scala:30)\n\
    \tat Problem.main(tmpwfird_ew.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n\t    var grade = ArrayBuffer[String]()\n\t    for (g <-\
    \ grades) {\n\t\t    if (g == 4.0) grade += \"A+\"\n\t\t    else if (g > 3.7)\
    \ grade += \"A\"\n\t\t    else if (g > 3.3) grade += \"A-\"\n\t\t    else if (g\
    \ > 3.0) grade += \"B+\"\n\t\t    else if (g > 2.7) grade += \"B\"\n\t\t    else\
    \ if (g > 2.3) grade += \"B-\"\n\t\t    else if (g > 2.0) grade += \"C+\"\n\t\t\
    \    else if (g > 1.7) grade += \"C\"\n\t\t    else if (g > 1.3) grade += \"C-\"\
    \n\t\t    else if (g > 1.0) grade += \"D+\"\n\t\t    else if (g > 0.7) grade +=\
    \ \"D\"\n\t\t    else if (g > 0.0) grade += \"D-\"\n\t\t    else grade += \"E\"\
    \n\t    }\n\t    grade.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpey288z10.scala:42:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m\t    }\n\e[31m\e[31m   |\e[0m\t    ^\e[0m\n\e[31m  \
    \ |\e[0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\
    \e[31m   |\e[0m   Previous indent : 2 tabs, 4 spaces\n\e[31m   |\e[0m   Latest\
    \ indent   : 1 tab, 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpey288z10.scala:44:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations of\
    \ tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent\
    \ : 1 tab, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 4 spaces\n2 errors found\n"
  stdout: ''
  timestamp: 1660010116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n      grades.map(n => {\n        n match {\n          case\
    \ g if g >= 4.0 => \"A+\"\n          case g if g >= 3.7 => \"A\"\n          case\
    \ g if g >= 3.3 => \"A-\"\n          case g if g >= 3.0 => \"B+\"\n          case\
    \ g if g >= 2.7 => \"B\"\n          case g if g >= 2.3 => \"B-\"\n          case\
    \ g if g >= 2.0 => \"C+\"\n          case g if g >= 1.7 => \"C\"\n          case\
    \ g if g >= 1.3 => \"C-\"\n          case g if g >= 1.0 => \"D+\"\n          case\
    \ g if g >= 0.7 => \"D\"\n          case g if g >= 0.0 => \"D-\"\n          case\
    \ g if g >= 0.0 => \"E\"\n        }\n      })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvuz1ceg9.scala:46)\n\tat Problem.main(tmpvuz1ceg9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val mapping = Map(4.0f.toFloat -> \"A+\", 3.7f.toFloat\
    \ -> \"A\", 3.3f.toFloat -> \"A-\", 3.0f.toFloat -> \"B+\", 2.7f.toFloat -> \"\
    B\", 2.3f.toFloat -> \"B-\", 2.0f.toFloat -> \"C+\", 1.7f.toFloat -> \"C\", 1.3f.toFloat\
    \ -> \"C-\", 1.0f.toFloat -> \"D+\", 0.7f.toFloat -> \"D\", 0.0f.toFloat -> \"\
    D-\", -0.1f.toFloat -> \"E\")\n        def grade(gpa : Float) : String = {\n \
    \           val grades : List[Float] = mapping.keys.toList.sortBy(x => abs(x -\
    \ gpa))\n            mapping(grades.head)\n        }\n        grades.map(x =>\
    \ grade(x))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjyfr3k1m.scala:35)\n\tat Problem.main(tmpjyfr3k1m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Insert your code here\n        val tups = grades.map(f\
    \ => \n            if (f >= 4.0) (\"A+\",f)\n            else if (f >= 3.7) (\"\
    A\",f)\n            else if (f >= 3.3) (\"A-\",f)\n            else if (f >= 3.0)\
    \ (\"B+\",f)\n            else if (f >= 2.7) (\"B\",f)\n            else if (f\
    \ >= 2.3) (\"B-\",f)\n            else if (f >= 2.0) (\"C+\",f)\n            else\
    \ if (f >= 1.7) (\"C\",f)\n            else if (f >= 1.3) (\"C-\",f)\n       \
    \     else if (f >= 1.0) (\"D+\",f)\n            else if (f >= 0.7) (\"D\",f)\n\
    \            else if (f >= 0.0) (\"D-\",f)\n            else (\"E\",f)\n     \
    \   )\n        tups.sortBy(_._2).map(_._1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpusd7cncy.scala:46)\n\tat Problem.main(tmpusd7cncy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = Map[Float, String](4.0f -> \"A+\"\
    , 3.7f -> \"A\", 3.3f -> \"A-\", 3.0f -> \"B+\", 2.7f -> \"B\", 2.3f -> \"B-\"\
    , 2.0f -> \"C+\", 1.7f -> \"C\", 1.3f -> \"C-\", 1.0f -> \"D+\", 0.7f -> \"D\"\
    , 0.0f -> \"D-\", -1.0f -> \"E\")\n        var sortedGradesMap = Map[Float, String]()\n\
    \        gradesMap.keys.toList.sorted.reverse.foreach(grade => sortedGradesMap\
    \ += (grade -> gradesMap(grade)))\n        var numericalLetterGradeList = List[String]()\n\
    \        grades.foreach(grade => sortedGradesMap.foreach(gradeLetter => if (gradeLetter._1\
    \ <= grade) { numericalLetterGradeList ::= gradeLetter._2; return }))\n      \
    \  numericalLetterGradeList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4wf3a1of.scala:31:147\
    \ -------------------\e[0m\e[0m\n\e[31m31 |\e[0m        grades.foreach(\e[36mgrade\e\
    [0m => sortedGradesMap.foreach(\e[36mgradeLetter\e[0m => \e[33mif\e[0m (gradeLetter._1\
    \ <= grade) { numericalLetterGradeList ::= gradeLetter._2; \e[33mreturn\e[0m }))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades : List[String] = List();\n    \
    \    for (i <- 0 until grades.length) {\n            var grade = grades(i);\n\
    \            if (grade == 4.0) {\n                letterGrades = letterGrades\
    \ :+ \"A+\";\n            } else if (grade > 3.7) {\n                letterGrades\
    \ = letterGrades :+ \"A\";\n            } else if (grade > 3.3) {\n          \
    \      letterGrades = letterGrades :+ \"A-\";\n            } else if (grade >\
    \ 3.0) {\n                letterGrades = letterGrades :+ \"B+\";\n           \
    \ } else if (grade > 2.7) {\n                letterGrades = letterGrades :+ \"\
    B\";\n            } else if (grade > 2.3) {\n                letterGrades = letterGrades\
    \ :+ \"B-\";\n            } else if (grade > 2.0) {\n                letterGrades\
    \ = letterGrades :+ \"C+\";\n            } else if (grade > 1.7) {\n         \
    \       letterGrades = letterGrades :+ \"C\";\n            } else if (grade >\
    \ 1.3) {\n                letterGrades = letterGrades :+ \"C-\";\n           \
    \ } else if (grade > 1.0) {\n                letterGrades = letterGrades :+ \"\
    D+\";\n            } else if (grade > 0.7) {\n                letterGrades = letterGrades\
    \ :+ \"D\";\n            } else if (grade > 0.0) {\n                letterGrades\
    \ = letterGrades :+ \"D-\";\n            } else {\n                letterGrades\
    \ = letterGrades :+ \"E\";\n            }\n        }\n        return letterGrades;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp878efpk1.scala:61)\n\tat Problem.main(tmp878efpk1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val table = List(\n            (4.0f.toFloat, \"\
    A+\"),\n            (3.7f.toFloat, \"A\"),\n            (3.3f.toFloat, \"A-\"\
    ),\n            (3.0f.toFloat, \"B+\"),\n            (2.7f.toFloat, \"B\"),\n\
    \            (2.3f.toFloat, \"B-\"),\n            (2.0f.toFloat, \"C+\"),\n  \
    \          (1.7f.toFloat, \"C\"),\n            (1.3f.toFloat, \"C-\"),\n     \
    \       (1.0f.toFloat, \"D+\"),\n            (0.7f.toFloat, \"D\"),\n        \
    \    (0.0f.toFloat, \"D-\"),\n            (0.0f.toFloat, \"E\")\n        )\n \
    \       def gradeFromTable(num : Float) : String = {\n            table.foldLeft((\"\
    E\", -1f.toFloat))((result, rule) => {\n                if (rule._1 >= num &&\
    \ rule._1 > result._2) {\n                    rule\n                } else {\n\
    \                    result\n                }\n            })._1\n        }\n\
    \        grades.map(gradeFromTable)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnbppi_0e.scala:45:20\
    \ --------------------\e[0m\e[0m\n\e[31m45 |\e[0m                    rule\n\e\
    [31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m            \
    \        Found:    (rule : (Float, String))\n\e[31m   |\e[0m                 \
    \   Required: (String, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades = List[String]()\n        for (grade\
    \ <- grades) {\n            if (grade == 4.0) {\n                letterGrades\
    \ = letterGrades :+ \"A+\"\n            } else if (grade > 3.7) {\n          \
    \      letterGrades = letterGrades :+ \"A\"\n            } else if (grade > 3.3)\
    \ {\n                letterGrades = letterGrades :+ \"A-\"\n            } else\
    \ if (grade > 3.0) {\n                letterGrades = letterGrades :+ \"B+\"\n\
    \            } else if (grade > 2.7) {\n                letterGrades = letterGrades\
    \ :+ \"B\"\n            } else if (grade > 2.3) {\n                letterGrades\
    \ = letterGrades :+ \"B-\"\n            } else if (grade > 2.0) {\n          \
    \      letterGrades = letterGrades :+ \"C+\"\n            } else if (grade > 1.7)\
    \ {\n                letterGrades = letterGrades :+ \"C\"\n            } else\
    \ if (grade > 1.3) {\n                letterGrades = letterGrades :+ \"C-\"\n\
    \            } else if (grade > 1.0) {\n                letterGrades = letterGrades\
    \ :+ \"D+\"\n            } else if (grade > 0.7) {\n                letterGrades\
    \ = letterGrades :+ \"D\"\n            } else if (grade > 0.0) {\n           \
    \     letterGrades = letterGrades :+ \"D-\"\n            } else {\n          \
    \      letterGrades = letterGrades :+ \"E\"\n            }\n        }\n      \
    \  letterGrades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgtndfxpl.scala:60)\n\tat Problem.main(tmpgtndfxpl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(g => g match {\n            case 4.0\
    \ => \"A+\"\n            case _ if g > 3.7 => \"A\"\n            case _ if g >\
    \ 3.3 => \"A-\"\n            case _ if g > 3.0 => \"B+\"\n            case _ if\
    \ g > 2.7 => \"B\"\n            case _ if g > 2.3 => \"B-\"\n            case\
    \ _ if g > 2.0 => \"C+\"\n            case _ if g > 1.7 => \"C\"\n           \
    \ case _ if g > 1.3 => \"C-\"\n            case _ if g > 1.0 => \"D+\"\n     \
    \       case _ if g > 0.7 => \"D\"\n            case _ if g > 0.0 => \"D-\"\n\
    \            case _ => \"E\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplv6pcwyh.scala:44)\n\tat Problem.main(tmplv6pcwyh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades = new ListBuffer[String]()\n  \
    \      for (grade <- grades) {\n            if (grade == 4.0) letterGrades +=\
    \ \"A+\"\n            else if (grade > 3.7) letterGrades += \"A\"\n          \
    \  else if (grade > 3.3) letterGrades += \"A-\"\n            else if (grade >\
    \ 3.0) letterGrades += \"B+\"\n            else if (grade > 2.7) letterGrades\
    \ += \"B\"\n            else if (grade > 2.3) letterGrades += \"B-\"\n       \
    \     else if (grade > 2.0) letterGrades += \"C+\"\n            else if (grade\
    \ > 1.7) letterGrades += \"C\"\n            else if (grade > 1.3) letterGrades\
    \ += \"C-\"\n            else if (grade > 1.0) letterGrades += \"D+\"\n      \
    \      else if (grade > 0.7) letterGrades += \"D\"\n            else if (grade\
    \ > 0.0) letterGrades += \"D-\"\n            else letterGrades += \"E\"\n    \
    \    }\n        letterGrades.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf7nvjo57.scala:46)\n\tat Problem.main(tmpf7nvjo57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010127
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var gradeList : List[String] = List()\n        for\
    \ (grade <- grades) {\n            if (grade == 4.0) {\n                gradeList\
    \ = gradeList :+ \"A+\"\n            } else if (grade > 3.7) {\n             \
    \   gradeList = gradeList :+ \"A\"\n            } else if (grade > 3.3) {\n  \
    \              gradeList = gradeList :+ \"A-\"\n            } else if (grade >\
    \ 3.0) {\n                gradeList = gradeList :+ \"B+\"\n            } else\
    \ if (grade > 2.7) {\n                gradeList = gradeList :+ \"B\"\n       \
    \     } else if (grade > 2.3) {\n                gradeList = gradeList :+ \"B-\"\
    \n            } else if (grade > 2.0) {\n                gradeList = gradeList\
    \ :+ \"C+\"\n            } else if (grade > 1.7) {\n                gradeList\
    \ = gradeList :+ \"C\"\n            } else if (grade > 1.3) {\n              \
    \  gradeList = gradeList :+ \"C-\"\n            } else if (grade > 1.0) {\n  \
    \              gradeList = gradeList :+ \"D+\"\n            } else if (grade >\
    \ 0.7) {\n                gradeList = gradeList :+ \"D\"\n            } else if\
    \ (grade > 0.0) {\n                gradeList = gradeList :+ \"D-\"\n         \
    \   } else {\n                gradeList = gradeList :+ \"E\"\n            }\n\
    \        }\n        return gradeList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpygn1rjaz.scala:60)\n\tat Problem.main(tmpygn1rjaz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010127
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => {\n        \tif (grade == 4.0)\n\
    \        \t\t\"A+\"\n        \telse if (grade >= 3.7)\n        \t\t\"A\"\n   \
    \     \telse if (grade >= 3.3)\n        \t\t\"A-\"\n        \telse if (grade >=\
    \ 3.0)\n        \t\t\"B+\"\n        \telse if (grade >= 2.7)\n        \t\t\"B\"\
    \n        \telse if (grade >= 2.3)\n        \t\t\"B-\"\n        \telse if (grade\
    \ >= 2.0)\n        \t\t\"C+\"\n        \telse if (grade >= 1.7)\n        \t\t\"\
    C\"\n        \telse if (grade >= 1.3)\n        \t\t\"C-\"\n        \telse if (grade\
    \ >= 1.0)\n        \t\t\"D+\"\n        \telse if (grade >= 0.7)\n        \t\t\"\
    D\"\n        \telse if (grade >= 0.0)\n        \t\t\"D-\"\n        \telse\n  \
    \      \t\t\"E\"\n        })\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmparhdhmp_.scala:57)\n\tat Problem.main(tmparhdhmp_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010127
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var totalGrade = List[String]()\n        grades.foreach(grade\
    \ => grade match {\n            case i if i >= 4.0 => totalGrade = totalGrade\
    \ :+ \"A+\"\n            case i if i >= 3.7 => totalGrade = totalGrade :+ \"A\"\
    \n            case i if i >= 3.3 => totalGrade = totalGrade :+ \"A-\"\n      \
    \      case i if i >= 3.0 => totalGrade = totalGrade :+ \"B+\"\n            case\
    \ i if i >= 2.7 => totalGrade = totalGrade :+ \"B\"\n            case i if i >=\
    \ 2.3 => totalGrade = totalGrade :+ \"B-\"\n            case i if i >= 2.0 =>\
    \ totalGrade = totalGrade :+ \"C+\"\n            case i if i >= 1.7 => totalGrade\
    \ = totalGrade :+ \"C\"\n            case i if i >= 1.3 => totalGrade = totalGrade\
    \ :+ \"C-\"\n            case i if i >= 1.0 => totalGrade = totalGrade :+ \"D+\"\
    \n            case i if i >= 0.7 => totalGrade = totalGrade :+ \"D\"\n       \
    \     case i if i >= 0.0 => totalGrade = totalGrade :+ \"D-\"\n            case\
    \ i if i < 0.0 => totalGrade = totalGrade :+ \"E\"\n        })\n        totalGrade\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_rzybjx1.scala:46)\n\tat Problem.main(tmp_rzybjx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010128
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here.\n        return List[String]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4rxj2x21.scala:31)\n\tat Problem.main(tmp4rxj2x21.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var output : List[String] = List()\n        for\
    \ (x <- grades) {\n            if (x >= 4.0) {\n                output = output\
    \ :+ \"A+\"\n            } else if (x >= 3.7) {\n                output = output\
    \ :+ \"A\"\n            } else if (x >= 3.3) {\n                output = output\
    \ :+ \"A-\"\n            } else if (x >= 3.0) {\n                output = output\
    \ :+ \"B+\"\n            } else if (x >= 2.7) {\n                output = output\
    \ :+ \"B\"\n            } else if (x >= 2.3) {\n                output = output\
    \ :+ \"B-\"\n            } else if (x >= 2.0) {\n                output = output\
    \ :+ \"C+\"\n            } else if (x >= 1.7) {\n                output = output\
    \ :+ \"C\"\n            } else if (x >= 1.3) {\n                output = output\
    \ :+ \"C-\"\n            } else if (x >= 1.0) {\n                output = output\
    \ :+ \"D+\"\n            } else if (x >= 0.7) {\n                output = output\
    \ :+ \"D\"\n            } else if (x >= 0.0) {\n                output = output\
    \ :+ \"D-\"\n            } else {\n                output = output :+ \"E\"\n\
    \            }\n        }\n        return output\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp004rvs1s.scala:60)\n\tat Problem.main(tmp004rvs1s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010128
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades = List[String]()\n        for (i\
    \ <- grades) {\n            if (i >= 4) {\n                letterGrades = letterGrades\
    \ :+ \"A+\"\n            } else if (i >= 3.7) {\n                letterGrades\
    \ = letterGrades :+ \"A\"\n            } else if (i >= 3.3) {\n              \
    \  letterGrades = letterGrades :+ \"A-\"\n            } else if (i >= 3) {\n \
    \               letterGrades = letterGrades :+ \"B+\"\n            } else if (i\
    \ >= 2.7) {\n                letterGrades = letterGrades :+ \"B\"\n          \
    \  } else if (i >= 2.3) {\n                letterGrades = letterGrades :+ \"B-\"\
    \n            } else if (i >= 2) {\n                letterGrades = letterGrades\
    \ :+ \"C+\"\n            } else if (i >= 1.7) {\n                letterGrades\
    \ = letterGrades :+ \"C\"\n            } else if (i >= 1.3) {\n              \
    \  letterGrades = letterGrades :+ \"C-\"\n            } else if (i >= 1) {\n \
    \               letterGrades = letterGrades :+ \"D+\"\n            } else if (i\
    \ >= 0.7) {\n                letterGrades = letterGrades :+ \"D\"\n          \
    \  } else if (i >= 0) {\n                letterGrades = letterGrades :+ \"D-\"\
    \n            } else {\n                letterGrades = letterGrades :+ \"E\"\n\
    \            }\n        }\n        letterGrades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprube3qt1.scala:60)\n\tat Problem.main(tmprube3qt1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var gradeList = List[String]()\n        for (grade\
    \ <- grades) {\n            if (grade >= 4.0) gradeList = \"A+\" :: gradeList\n\
    \            else if (grade >= 3.7) gradeList = \"A\" :: gradeList\n         \
    \   else if (grade >= 3.3) gradeList = \"A-\" :: gradeList\n            else if\
    \ (grade >= 3.0) gradeList = \"B+\" :: gradeList\n            else if (grade >=\
    \ 2.7) gradeList = \"B\" :: gradeList\n            else if (grade >= 2.3) gradeList\
    \ = \"B-\" :: gradeList\n            else if (grade >= 2.0) gradeList = \"C+\"\
    \ :: gradeList\n            else if (grade >= 1.7) gradeList = \"C\" :: gradeList\n\
    \            else if (grade >= 1.3) gradeList = \"C-\" :: gradeList\n        \
    \    else if (grade >= 1.0) gradeList = \"D+\" :: gradeList\n            else\
    \ if (grade >= 0.7) gradeList = \"D\" :: gradeList\n            else if (grade\
    \ >= 0.0) gradeList = \"D-\" :: gradeList\n            else gradeList = \"E\"\
    \ :: gradeList\n        }\n        gradeList.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp12a0whcb.scala:46)\n\tat Problem.main(tmp12a0whcb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010128
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradePairs = grades.map(g => {\n           \
    \ val index = (g * 10).toInt\n            val value = index match {\n        \
    \        case 40 => \"A+\"\n                case 37 => \"A\"\n               \
    \ case 33 => \"A-\"\n                case 30 => \"B+\"\n                case 27\
    \ => \"B\"\n                case 23 => \"B-\"\n                case 20 => \"C+\"\
    \n                case 17 => \"C\"\n                case 13 => \"C-\"\n      \
    \          case 10 => \"D+\"\n                case 7 => \"D\"\n              \
    \  case 0 => \"D-\"\n                case -1 => \"E\"\n                case _\
    \ => \"F\"\n            }\n            (g, value)\n        })\n        gradePairs.map(gp\
    \ => gp._2)\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf721_hzb.scala:50)\n\tat Problem.main(tmpf721_hzb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades match {\n            case Nil => Nil\n  \
    \          case x :: xs => {\n                if (x >= 4) \"A+\" :: numericalLetterGrade(xs)\n\
    \                else if (x >= 3.7) \"A\" :: numericalLetterGrade(xs)\n      \
    \          else if (x >= 3.3) \"A-\" :: numericalLetterGrade(xs)\n           \
    \     else if (x >= 3) \"B+\" :: numericalLetterGrade(xs)\n                else\
    \ if (x >= 2.7) \"B\" :: numericalLetterGrade(xs)\n                else if (x\
    \ >= 2.3) \"B-\" :: numericalLetterGrade(xs)\n                else if (x >= 2)\
    \ \"C+\" :: numericalLetterGrade(xs)\n                else if (x >= 1.7) \"C\"\
    \ :: numericalLetterGrade(xs)\n                else if (x >= 1.3) \"C-\" :: numericalLetterGrade(xs)\n\
    \                else if (x >= 1) \"D+\" :: numericalLetterGrade(xs)\n       \
    \         else if (x >= 0.7) \"D\" :: numericalLetterGrade(xs)\n             \
    \   else if (x >= 0) \"D-\" :: numericalLetterGrade(xs)\n                else\
    \ \"E\" :: numericalLetterGrade(xs)\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmr2vu1g3.scala:47)\n\tat Problem.main(tmpmr2vu1g3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Grade students according to the chart in the\
    \ description\n        return grades.map(x => {\n            if (x >= 4.0) {\n\
    \                \"A+\"\n            } else if (x >= 3.7) {\n                \"\
    A\"\n            } else if (x >= 3.3) {\n                \"A-\"\n            }\
    \ else if (x >= 3.0) {\n                \"B+\"\n            } else if (x >= 2.7)\
    \ {\n                \"B\"\n            } else if (x >= 2.3) {\n             \
    \   \"B-\"\n            } else if (x >= 2.0) {\n                \"C+\"\n     \
    \       } else if (x >= 1.7) {\n                \"C\"\n            } else if (x\
    \ >= 1.3) {\n                \"C-\"\n            } else if (x >= 1.0) {\n    \
    \            \"D+\"\n            } else if (x >= 0.7) {\n                \"D\"\
    \n            } else if (x >= 0.0) {\n                \"D-\"\n            } else\
    \ {\n                \"E\"\n            }\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpma66ti0x.scala:59)\n\tat Problem.main(tmpma66ti0x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map { g =>\n            if (g >= 4.0) \"\
    A+\"\n            else if (g >= 3.7) \"A\"\n            else if (g >= 3.3) \"\
    A-\"\n            else if (g >= 3.0) \"B+\"\n            else if (g >= 2.7) \"\
    B\"\n            else if (g >= 2.3) \"B-\"\n            else if (g >= 2.0) \"\
    C+\"\n            else if (g >= 1.7) \"C\"\n            else if (g >= 1.3) \"\
    C-\"\n            else if (g >= 1.0) \"D+\"\n            else if (g >= 0.7) \"\
    D\"\n            else if (g >= 0.0) \"D-\"\n            else \"E\"\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppa64gudj.scala:44)\n\tat Problem.main(tmppa64gudj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // good luck!\n        var translatedGrades = List[String]()\n\
    \        for (grade <- grades) {\n            if (grade == 4.0) translatedGrades\
    \ = translatedGrades :+ \"A+\"\n            else if (grade > 3.7) translatedGrades\
    \ = translatedGrades :+ \"A\"\n            else if (grade > 3.3) translatedGrades\
    \ = translatedGrades :+ \"A-\"\n            else if (grade > 3.0) translatedGrades\
    \ = translatedGrades :+ \"B+\"\n            else if (grade > 2.7) translatedGrades\
    \ = translatedGrades :+ \"B\"\n            else if (grade > 2.3) translatedGrades\
    \ = translatedGrades :+ \"B-\"\n            else if (grade > 2.0) translatedGrades\
    \ = translatedGrades :+ \"C+\"\n            else if (grade > 1.7) translatedGrades\
    \ = translatedGrades :+ \"C\"\n            else if (grade > 1.3) translatedGrades\
    \ = translatedGrades :+ \"C-\"\n            else if (grade > 1.0) translatedGrades\
    \ = translatedGrades :+ \"D+\"\n            else if (grade > 0.7) translatedGrades\
    \ = translatedGrades :+ \"D\"\n            else if (grade > 0.0) translatedGrades\
    \ = translatedGrades :+ \"D-\"\n            else translatedGrades = translatedGrades\
    \ :+ \"E\"\n        }\n        translatedGrades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4z_6xm71.scala:47)\n\tat Problem.main(tmp4z_6xm71.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        return grades.map { grade =>\n            if (grade\
    \ > 4.0) \"A+\"\n            else if (grade > 3.7) \"A\"\n            else if\
    \ (grade > 3.3) \"A-\"\n            else if (grade > 3.0) \"B+\"\n           \
    \ else if (grade > 2.7) \"B\"\n            else if (grade > 2.3) \"B-\"\n    \
    \        else if (grade > 2.0) \"C+\"\n            else if (grade > 1.7) \"C\"\
    \n            else if (grade > 1.3) \"C-\"\n            else if (grade > 1.0)\
    \ \"D+\"\n            else if (grade > 0.7) \"D\"\n            else if (grade\
    \ > 0.0) \"D-\"\n            else \"E\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph6dljrm8.scala:44)\n\tat Problem.main(tmph6dljrm8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in the function here\n        // Write helper\
    \ functions as needed\n        def helper(x: Float): String = {\n            if\
    \ (x >= 4.0)\n                \"A+\"\n            else if (x >= 3.7)\n       \
    \         \"A\"\n            else if (x >= 3.3)\n                \"A-\"\n    \
    \        else if (x >= 3.0)\n                \"B+\"\n            else if (x >=\
    \ 2.7)\n                \"B\"\n            else if (x >= 2.3)\n              \
    \  \"B-\"\n            else if (x >= 2.0)\n                \"C+\"\n          \
    \  else if (x >= 1.7)\n                \"C\"\n            else if (x >= 1.3)\n\
    \                \"C-\"\n            else if (x >= 1.0)\n                \"D+\"\
    \n            else if (x >= 0.7)\n                \"D\"\n            else if (x\
    \ >= 0.0)\n                \"D-\"\n            else\n                \"E\"\n \
    \       }\n        grades.map(x => helper(x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3gdaej1.scala:60)\n\tat Problem.main(tmpp3gdaej1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        def recur(grades : List[Float], res : List[String])\
    \ : List[String] = {\n            if (grades.isEmpty) res\n            else {\n\
    \                val grade = grades.head\n                if (grade == 4.0) recur(grades.tail,\
    \ \"A+\" :: res)\n                else if (grade > 3.7) recur(grades.tail, \"\
    A\" :: res)\n                else if (grade > 3.3) recur(grades.tail, \"A-\" ::\
    \ res)\n                else if (grade > 3.0) recur(grades.tail, \"B+\" :: res)\n\
    \                else if (grade > 2.7) recur(grades.tail, \"B\" :: res)\n    \
    \            else if (grade > 2.3) recur(grades.tail, \"B-\" :: res)\n       \
    \         else if (grade > 2.0) recur(grades.tail, \"C+\" :: res)\n          \
    \      else if (grade > 1.7) recur(grades.tail, \"C\" :: res)\n              \
    \  else if (grade > 1.3) recur(grades.tail, \"C-\" :: res)\n                else\
    \ if (grade > 1.0) recur(grades.tail, \"D+\" :: res)\n                else if\
    \ (grade > 0.7) recur(grades.tail, \"D\" :: res)\n                else if (grade\
    \ > 0.0) recur(grades.tail, \"D-\" :: res)\n                else recur(grades.tail,\
    \ \"E\" :: res)\n            }\n        }\n        return recur(grades, List()).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmtjizkdl.scala:49)\n\tat Problem.main(tmpmtjizkdl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        ???\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.numericalLetterGrade(tmpwfird_ew.scala:27)\n\tat Problem$.main(tmpwfird_ew.scala:30)\n\
    \tat Problem.main(tmpwfird_ew.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var newGrades : List[String] = List()\n        for\
    \ (grade <- grades) {\n        \tif (grade >= 4.0) {\n        \t\tnewGrades =\
    \ \"A+\" :: newGrades\n        \t} else if (grade >= 3.7) {\n        \t\tnewGrades\
    \ = \"A\" :: newGrades\n        \t} else if (grade >= 3.3) {\n        \t\tnewGrades\
    \ = \"A-\" :: newGrades\n        \t} else if (grade >= 3.0) {\n        \t\tnewGrades\
    \ = \"B+\" :: newGrades\n        \t} else if (grade >= 2.7) {\n        \t\tnewGrades\
    \ = \"B\" :: newGrades\n        \t} else if (grade >= 2.3) {\n        \t\tnewGrades\
    \ = \"B-\" :: newGrades\n        \t} else if (grade >= 2.0) {\n        \t\tnewGrades\
    \ = \"C+\" :: newGrades\n        \t} else if (grade >= 1.7) {\n        \t\tnewGrades\
    \ = \"C\" :: newGrades\n        \t} else if (grade >= 1.3) {\n        \t\tnewGrades\
    \ = \"C-\" :: newGrades\n        \t} else if (grade >= 1.0) {\n        \t\tnewGrades\
    \ = \"D+\" :: newGrades\n        \t} else if (grade >= 0.7) {\n        \t\tnewGrades\
    \ = \"D\" :: newGrades\n        \t} else if (grade >= 0.0) {\n        \t\tnewGrades\
    \ = \"D-\" :: newGrades\n        \t} else {\n        \t\tnewGrades = \"E\" ::\
    \ newGrades\n        \t}\n        }\n        newGrades.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsx4qi0v9.scala:60)\n\tat Problem.main(tmpsx4qi0v9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n    \tgrades.map(x => if (x == 4.0) \"A+\" else if (x >=\
    \ 3.7) \"A\" else if (x >= 3.3) \"A-\" else if (x >= 3.0) \"B+\" else if (x >=\
    \ 2.7) \"B\" else if (x >= 2.3) \"B-\" else if (x >= 2.0) \"C+\" else if (x >=\
    \ 1.7) \"C\" else if (x >= 1.3) \"C-\" else if (x >= 1.0) \"D+\" else if (x >=\
    \ 0.7) \"D\" else if (x >= 0.0) \"D-\" else \"E\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpct6n_kcw.scala:30)\n\tat Problem.main(tmpct6n_kcw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades : List[String] = List()\n     \
    \   for (grade <- grades) {\n            if (grade == 4.0) {\n               \
    \ letterGrades = letterGrades :+ \"A+\"\n            } else if (grade > 3.7) {\n\
    \                letterGrades = letterGrades :+ \"A\"\n            } else if (grade\
    \ > 3.3) {\n                letterGrades = letterGrades :+ \"A-\"\n          \
    \  } else if (grade > 3.0) {\n                letterGrades = letterGrades :+ \"\
    B+\"\n            } else if (grade > 2.7) {\n                letterGrades = letterGrades\
    \ :+ \"B\"\n            } else if (grade > 2.3) {\n                letterGrades\
    \ = letterGrades :+ \"B-\"\n            } else if (grade > 2.0) {\n          \
    \      letterGrades = letterGrades :+ \"C+\"\n            } else if (grade > 1.7)\
    \ {\n                letterGrades = letterGrades :+ \"C\"\n            } else\
    \ if (grade > 1.3) {\n                letterGrades = letterGrades :+ \"C-\"\n\
    \            } else if (grade > 1.0) {\n                letterGrades = letterGrades\
    \ :+ \"D+\"\n            } else if (grade > 0.7) {\n                letterGrades\
    \ = letterGrades :+ \"D\"\n            } else if (grade > 0.0) {\n           \
    \     letterGrades = letterGrades :+ \"D-\"\n            } else {\n          \
    \      letterGrades = letterGrades :+ \"E\"\n            }\n        }\n      \
    \  letterGrades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl7_75kev.scala:60)\n\tat Problem.main(tmpl7_75kev.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // >>> Your code goes here <<<\n        def letterGrade(grade\
    \ : Float) : String = grade match {\n            case g if g >= 4.0f => \"A+\"\
    \n            case g if g >= 3.7f => \"A\"\n            case g if g >= 3.3f =>\
    \ \"A-\"\n            case g if g >= 3.0f => \"B+\"\n            case g if g >=\
    \ 2.7f => \"B\"\n            case g if g >= 2.3f => \"B-\"\n            case g\
    \ if g >= 2.0f => \"C+\"\n            case g if g >= 1.7f => \"C\"\n         \
    \   case g if g >= 1.3f => \"C-\"\n            case g if g >= 1.0f => \"D+\"\n\
    \            case g if g >= 0.7f => \"D\"\n            case g if g >= 0.0f =>\
    \ \"D-\"\n            case g if g < 0.0f => \"E\"\n        }\n        grades.map(g\
    \ => letterGrade(g))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv590i3yx.scala:46)\n\tat Problem.main(tmpv590i3yx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map((x : Float) => if (x >= 4.0) \"A+\"\n\
    \                                  else if (x >= 3.7) \"A\"\n                \
    \                  else if (x >= 3.3) \"A-\"\n                               \
    \   else if (x >= 3.0) \"B+\"\n                                  else if (x >=\
    \ 2.7) \"B\"\n                                  else if (x >= 2.3) \"B-\"\n  \
    \                                else if (x >= 2.0) \"C+\"\n                 \
    \                 else if (x >= 1.7) \"C\"\n                                 \
    \ else if (x >= 1.3) \"C-\"\n                                  else if (x >= 1.0)\
    \ \"D+\"\n                                  else if (x >= 0.7) \"D\"\n       \
    \                           else if (x >= 0.0) \"D-\"\n                      \
    \            else \"E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw1otbi89.scala:42)\n\tat Problem.main(tmpw1otbi89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(i => i match {\n            case a if\
    \ a == 4.0 => \"A+\"\n            case a if a > 3.7 => \"A\"\n            case\
    \ a if a > 3.3 => \"A-\"\n            case a if a > 3.0 => \"B+\"\n          \
    \  case a if a > 2.7 => \"B\"\n            case a if a > 2.3 => \"B-\"\n     \
    \       case a if a > 2.0 => \"C+\"\n            case a if a > 1.7 => \"C\"\n\
    \            case a if a > 1.3 => \"C-\"\n            case a if a > 1.0 => \"\
    D+\"\n            case a if a > 0.7 => \"D\"\n            case a if a > 0.0 =>\
    \ \"D-\"\n            case a if a == 0.0 => \"E\"\n        })\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdhy3qa1w.scala:44)\n\tat Problem.main(tmpdhy3qa1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // TODO: complete the code for this function\n \
    \       return null\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.numericalLetterGrade(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmpq6tyb4l1.scala:31)\n\tat Problem.main(tmpq6tyb4l1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gpa_grades = Map(4.0f -> \"A+\", 3.7f -> \"\
    A\", 3.3f -> \"A-\", 3.0f -> \"B+\", 2.7f -> \"B\", 2.3f -> \"B-\", 2.0f -> \"\
    C+\", 1.7f -> \"C\", 1.3f -> \"C-\", 1.0f -> \"D+\", 0.7f -> \"D\", 0.0f -> \"\
    D-\", -1.0f -> \"E\")\n        val sorted_gpa_grades = gpa_grades.toList.sortWith(_._1\
    \ > _._1)\n        for (grade <- grades) yield binarySearch(sorted_gpa_grades,\
    \ grade)\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp283_9vgs.scala:29:36 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mfor\e[0m (grade <- grades) \e[33myield\e\
    [0m binarySearch(sorted_gpa_grades, grade)\n\e[31m\e[31m   |\e[0m            \
    \                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                  Not found: binarySearch\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var letterGrades = List[String]()\n        for (i\
    \ <- grades) {\n            if (i >= 4) letterGrades = letterGrades :+ \"A+\"\n\
    \            else if (i >= 3.7) letterGrades = letterGrades :+ \"A\"\n       \
    \     else if (i >= 3.3) letterGrades = letterGrades :+ \"A-\"\n            else\
    \ if (i >= 3) letterGrades = letterGrades :+ \"B+\"\n            else if (i >=\
    \ 2.7) letterGrades = letterGrades :+ \"B\"\n            else if (i >= 2.3) letterGrades\
    \ = letterGrades :+ \"B-\"\n            else if (i >= 2) letterGrades = letterGrades\
    \ :+ \"C+\"\n            else if (i >= 1.7) letterGrades = letterGrades :+ \"\
    C\"\n            else if (i >= 1.3) letterGrades = letterGrades :+ \"C-\"\n  \
    \          else if (i >= 1) letterGrades = letterGrades :+ \"D+\"\n          \
    \  else if (i >= 0.7) letterGrades = letterGrades :+ \"D\"\n            else if\
    \ (i >= 0) letterGrades = letterGrades :+ \"D-\"\n            else letterGrades\
    \ = letterGrades :+ \"E\"\n        }\n        letterGrades\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5uthrrzv.scala:46)\n\tat Problem.main(tmp5uthrrzv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = Map(\n            0.0f -> \"E\"\
    ,\n            0.7f -> \"D-\",\n            1.0f -> \"D\",\n            1.3f ->\
    \ \"D+\",\n            1.7f -> \"C-\",\n            2.0f -> \"C\",\n         \
    \   2.3f -> \"C+\",\n            2.7f -> \"B-\",\n            3.0f -> \"B\",\n\
    \            3.3f -> \"B+\",\n            3.7f -> \"A-\",\n            4.0f ->\
    \ \"A\",\n            4.1f -> \"A+\"\n        )\n        val temp = grades.sortWith(_\
    \ > _)\n        temp.map(grade => {\n            var letterGrade = \"E\"\n   \
    \         gradesMap.keys.foreach(key => {\n                if (grade >= key) letterGrade\
    \ = gradesMap(key)\n            })\n            letterGrade\n        })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl2_askmj.scala:52)\n\tat Problem.main(tmpl2_askmj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(x => \n            if (x > 3.7) {\n \
    \               \"A\"\n            } else if (x > 3.3) {\n                \"A-\"\
    \n            } else if (x > 3.0) {\n                \"B+\"\n            } else\
    \ if (x > 2.7) {\n                \"B\"\n            } else if (x > 2.3) {\n \
    \               \"B-\"\n            } else if (x > 2.0) {\n                \"\
    C+\"\n            } else if (x > 1.7) {\n                \"C\"\n            }\
    \ else if (x > 1.3) {\n                \"C-\"\n            } else if (x > 1.0)\
    \ {\n                \"D+\"\n            } else if (x > 0.7) {\n             \
    \   \"D\"\n            } else if (x > 0.0) {\n                \"D-\"\n       \
    \     } else {\n                \"E\"\n            }\n        )\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz14bnxqj.scala:56)\n\tat Problem.main(tmpz14bnxqj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n      var letterGrades = new ListBuffer[String]()\n    \
    \  for (g <- grades) {\n        if (g >= 4.0) {\n          letterGrades += \"\
    A+\"\n        } else if (g >= 3.7) {\n          letterGrades += \"A\"\n      \
    \  } else if (g >= 3.3) {\n          letterGrades += \"A-\"\n        } else if\
    \ (g >= 3.0) {\n          letterGrades += \"B+\"\n        } else if (g >= 2.7)\
    \ {\n          letterGrades += \"B\"\n        } else if (g >= 2.3) {\n       \
    \   letterGrades += \"B-\"\n        } else if (g >= 2.0) {\n          letterGrades\
    \ += \"C+\"\n        } else if (g >= 1.7) {\n          letterGrades += \"C\"\n\
    \        } else if (g >= 1.3) {\n          letterGrades += \"C-\"\n        } else\
    \ if (g >= 1.0) {\n          letterGrades += \"D+\"\n        } else if (g >= 0.7)\
    \ {\n          letterGrades += \"D\"\n        } else if (g >= 0.0) {\n       \
    \   letterGrades += \"D-\"\n        } else {\n          letterGrades += \"E\"\n\
    \        }\n      }\n      letterGrades.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1tn3eg14.scala:60)\n\tat Problem.main(tmp1tn3eg14.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(x => \n            x match {\n      \
    \          case x if x >= 4.0 => \"A+\"\n                case x if x >= 3.7 =>\
    \ \"A\"\n                case x if x >= 3.3 => \"A-\"\n                case x\
    \ if x >= 3.0 => \"B+\"\n                case x if x >= 2.7 => \"B\"\n       \
    \         case x if x >= 2.3 => \"B-\"\n                case x if x >= 2.0 =>\
    \ \"C+\"\n                case x if x >= 1.7 => \"C\"\n                case x\
    \ if x >= 1.3 => \"C-\"\n                case x if x >= 1.0 => \"D+\"\n      \
    \          case x if x >= 0.7 => \"D\"\n                case x if x >= 0.0 =>\
    \ \"D-\"\n                case _ => \"E\"\n            }\n        )\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3pghvmch.scala:46)\n\tat Problem.main(tmp3pghvmch.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(x => {\n            if (x == 4)\n   \
    \             \"A+\"\n            else if (x >= 3.7)\n                \"A\"\n\
    \            else if (x >= 3.3)\n                \"A-\"\n            else if (x\
    \ >= 3)\n                \"B+\"\n            else if (x >= 2.7)\n            \
    \    \"B\"\n            else if (x >= 2.3)\n                \"B-\"\n         \
    \   else if (x >= 2)\n                \"C+\"\n            else if (x >= 1.7)\n\
    \                \"C\"\n            else if (x >= 1.3)\n                \"C-\"\
    \n            else if (x >= 1)\n                \"D+\"\n            else if (x\
    \ >= 0.7)\n                \"D\"\n            else if (x >= 0)\n             \
    \   \"D-\"\n            else\n                \"E\"\n        })\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvsrnlv8k.scala:57)\n\tat Problem.main(tmpvsrnlv8k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010136
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        var g : List[String] = List()\n        for (c <-\
    \ grades) {\n            if (c == 4.0) {\n                g = \"A+\" :: g\n  \
    \          } else if (c > 3.7) {\n                g = \"A\" :: g\n           \
    \ } else if (c > 3.3) {\n                g = \"A-\" :: g\n            } else if\
    \ (c > 3.0) {\n                g = \"B+\" :: g\n            } else if (c > 2.7)\
    \ {\n                g = \"B\" :: g\n            } else if (c > 2.3) {\n     \
    \           g = \"B-\" :: g\n            } else if (c > 2.0) {\n             \
    \   g = \"C+\" :: g\n            } else if (c > 1.7) {\n                g = \"\
    C\" :: g\n            } else if (c > 1.3) {\n                g = \"C-\" :: g\n\
    \            } else if (c > 1.0) {\n                g = \"D+\" :: g\n        \
    \    } else if (c > 0.7) {\n                g = \"D\" :: g\n            } else\
    \ if (c > 0.0) {\n                g = \"D-\" :: g\n            } else {\n    \
    \            g = \"E\" :: g\n            }\n        }\n        g.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdp8tscfb.scala:60)\n\tat Problem.main(tmpdp8tscfb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n\t\tif (grades.isEmpty) List[String]()\n\t\telse List[String](if\
    \ (grades.head >= 4.0) \"A+\"\n\t\t\t\t\t\t\t\t\t\t else if (grades.head >= 3.7)\
    \ \"A\"\n\t\t\t\t\t\t\t\t\t\t else if (grades.head >= 3.3) \"A-\"\n\t\t\t\t\t\t\
    \t\t\t\t else if (grades.head >= 3.0) \"B+\"\n\t\t\t\t\t\t\t\t\t\t else if (grades.head\
    \ >= 2.7) \"B\"\n\t\t\t\t\t\t\t\t\t\t else if (grades.head >= 2.3) \"B-\"\n\t\t\
    \t\t\t\t\t\t\t\t else if (grades.head >= 2.0) \"C+\"\n\t\t\t\t\t\t\t\t\t\t else\
    \ if (grades.head >= 1.7) \"C\"\n\t\t\t\t\t\t\t\t\t\t else if (grades.head >=\
    \ 1.3) \"C-\"\n\t\t\t\t\t\t\t\t\t\t else if (grades.head >= 1.0) \"D+\"\n\t\t\t\
    \t\t\t\t\t\t\t else if (grades.head >= 0.7) \"D\"\n\t\t\t\t\t\t\t\t\t\t else if\
    \ (grades.head >= 0.0) \"D-\"\n\t\t\t\t\t\t\t\t\t\t else \"E\") ::: numericalLetterGrade(grades.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgaaeafwv.scala:41:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660010134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Fill in the code below\n        val gradesLetter\
    \ = ListBuffer[String]()\n        for (grade <- grades) {\n            val toPass\
    \ = grade >= 2.0f\n            val toFail = grade < 2.0f\n            val gradeFloat\
    \ = floor(grade * 10)\n            gradesLetter += (gradeFloat match {\n     \
    \           case 40.0 => \"A+\"\n                case 37.0 => \"A\"\n        \
    \        case 33.0 => \"A-\"\n                case 30.0 => \"B+\"\n          \
    \      case 27.0 => \"B\"\n                case 23.0 => \"B-\"\n             \
    \   case 20.0 => \"C+\"\n                case 17.0 => \"C\"\n                case\
    \ 13.0 => \"C-\"\n                case 10.0 => \"D+\"\n                case 7.0\
    \ => \"D\"\n                case 0.0 => if (toPass) \"D-\" else \"E\"\n      \
    \          case _ => \"?\"\n            })\n        }\n        gradesLetter.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhi62332.scala:52)\n\tat Problem.main(tmpbhi62332.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010136
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        // Write your code here. \n        // You can add\
    \ helper functions here if needed.\n        return null;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.numericalLetterGrade(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmp0bmkivzc.scala:32)\n\tat Problem.main(tmp0bmkivzc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010136
