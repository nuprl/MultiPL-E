language: scala
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter { _.isInstanceOf[Long]\
    \ }.map { _.asInstanceOf[Long] }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n\tvalues.filter(x => (x.isInstanceOf[Long] ||\
    \ x.isInstanceOf[Int])).map(x => x.asInstanceOf[Long])\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5k_v8js3.scala:11:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab\n\e[31m   |\e[0m   Latest indent   : 4\
    \ spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660013245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val ret = new ArrayBuffer[Long]()\n \
    \       for (v <- values) {\n            v match {\n                case v: Long\
    \ => ret += v\n                case _ =>\n            }\n        }\n        ret.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return Nil;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy7y6m65k.scala:14)\n\tat Problem.main(tmpy7y6m65k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        for(value <- values; if value.isInstanceOf[Long])\
    \ yield value.asInstanceOf[Long]\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // YOUR CODE GOES HERE\n        def filtInteger(values\
    \ : List[Any], integers : List[Long]) : List[Long] = {\n            if (values.isEmpty)\
    \ {\n                integers\n            } else {\n                values.head\
    \ match {\n                    case x : Long => filtInteger(values.tail, integers\
    \ :+ x)\n                    case _ => filtInteger(values.tail, integers)\n  \
    \              }\n            }\n        }\n        filtInteger(values, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var integers: List[Long] = List[Long]()\n\
    \        // Fill in here\n        return integers\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppknql2g9.scala:16)\n\tat Problem.main(tmppknql2g9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n    \t//filterIntegers(values, List[Long]())\n\
    \    \t// values.filter(e => e.isInstanceOf[Long]).asInstanceOf[List[Long]]\n\
    \    \tvalues.collect { case x: Long => x }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => (x.isInstanceOf[Long]\
    \ || x.isInstanceOf[Int])).map(x => x.asInstanceOf[Long])\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = new ListBuffer[Long]\n \
    \       for (value <- values) {\n            value match {\n                case\
    \ l : Long => result += l\n                case _ => ()\n            }\n     \
    \   }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter { case i: Long => true;\
    \ case _ => false }.asInstanceOf[List[Long]]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var res = List[Long]()\n        for (i\
    \ <- values) {\n            if (i.isInstanceOf[Long]) {\n                res =\
    \ res :+ i.asInstanceOf[Long]\n            }\n        }\n        return res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val listOfIntegers = ListBuffer[Long]()\n\
    \        for (a <- values) {\n            if (a.isInstanceOf[Long]) {\n      \
    \          listOfIntegers += a.asInstanceOf[Long]\n            }\n        }\n\
    \        listOfIntegers.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def fi(values : List[Any], acc : List[Long])\
    \ : List[Long] = values match {\n            case Nil => acc\n            case\
    \ head :: tail => head match {\n                case i : Long => fi(tail, i ::\
    \ acc)\n                case _ => fi(tail, acc)\n            }\n        }\n  \
    \      fi(values, Nil)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxyj8qjn3.scala:21)\n\tat Problem.main(tmpxyj8qjn3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n\t    // fill-in here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7vmbizke.scala:9:58\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mfilterIntegers\e\
    [0m(\e[36mvalues\e[0m : \e[35mList\e[0m[\e[35mAny\e[0m]) : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                                    \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                     Found:    Unit\n\e[31m   |\e[0m                        \
    \                            Required: List[Long]\n\e[31m10 |\e[0m\t    \e[34m//\
    \ fill-in here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013248
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val intList = new ArrayBuffer[Long]()\n\
    \        values.foreach(x => if (x.isInstanceOf[Long]) intList += x.asInstanceOf[Long])\n\
    \        intList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result : List[Long] = List[Long]()\n\
    \        for ( v <- values ) {\n            v match {\n                case i\
    \ : Int => result = result :+ i.toLong\n                case i : Long => result\
    \ = result :+ i\n                case _ => ()\n            }\n        }\n    \
    \    return result\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(v => (v match {\n     \
    \       case i : Long => true\n            case i : Int => true\n            case\
    \ _ => false\n        })).map(v => (v match {\n            case i : Long => i\n\
    \            case i : Int => i.toLong\n        }))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(p => p.isInstanceOf[Long]).map(p\
    \ => p.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Write code here.\n        val ret\
    \ = ListBuffer[Long]()\n        for (value <- values) {\n            if (value.isInstanceOf[Long])\
    \ {\n                ret += value.asInstanceOf[Long]\n            }\n        }\n\
    \        ret.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013257
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter {\n            case value\
    \ : Long => true\n            case _ => false\n        }.map( _.asInstanceOf[Long]\
    \ )\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013258
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Fill Up this method body\n       \
    \ // `values` is a list of mixed type values, so one should first\n        //\
    \ filter out all non-integer values and then cast the integer\n        // values\
    \ to long (as we want only long values in output)\n        // Hint: Use pattern\
    \ matching and isInstanceOf method to check\n        // whether a value is of\
    \ type Integer (or a primitive integer)\n        // Hint: Use asInstanceOf method\
    \ to cast an object to a required type\n        var newList = values.filter(x\
    \ => (x.isInstanceOf[Int] || x.isInstanceOf[Long]))\n        return newList.map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(p => p.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n\t\tvalues.filter((x : Any) => x.isInstanceOf[Long]).map((x\
    \ : Any) => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1n5j_tvd.scala:11:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660013255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def helper(orig : List[Any], res : List[Long])\
    \ : List[Long] = {\n            if (orig.isEmpty) {\n                res\n   \
    \         } else {\n                if (orig.head.isInstanceOf[Long]) {\n    \
    \                helper(orig.tail, res :+ orig.head.asInstanceOf[Long])\n    \
    \            } else {\n                    helper(orig.tail, res)\n          \
    \      }\n            }\n        }\n        helper(values, List[Long]())\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result : List[Long] = Nil\n     \
    \   for (x <- values) {\n            if (x.isInstanceOf[Long]) {\n           \
    \     result = x.asInstanceOf[Long] :: result\n            }\n        }\n    \
    \    result\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp_qyxnp9.scala:20)\n\tat Problem.main(tmpp_qyxnp9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var intList : List[Long] = Nil\n    \
    \    for (v <- values) {\n            if (v.isInstanceOf[Long]) {\n          \
    \      intList = intList :+ v.asInstanceOf[Long]\n            }\n        }\n \
    \       return intList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var retVal = List[Long]()\n        values.foreach\
    \ {\n            case value: Int => retVal = value.toLong :: retVal\n        \
    \    case value: Long => retVal = value :: retVal\n            case _ => ()\n\
    \        }\n        retVal\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr9gkgcm8.scala:20)\n\tat Problem.main(tmpr9gkgcm8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Write your solution here\n       \
    \ values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        //println(\"In filterIntegers values:\
    \ \" + values)\n        values.filter(a => a.isInstanceOf[Long]).map(a => a.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // TODO: implement this\n        // Hint:\
    \ use `isInstanceOf`\n        ???\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.filterIntegers(tmp_0m01h06.scala:12)\n\tat Problem$.main(tmp_0m01h06.scala:15)\n\
    \tat Problem.main(tmp_0m01h06.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.foldLeft(List[Long]())((list,x)\
    \ => x match {\n            case x : Int => list :+ x.toLong\n            case\
    \ x : Long => list :+ x\n            case _ => list\n        })\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n\t    values.filter(_.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkjlu1nyu.scala:11:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab, 4 spaces\n\e[31m   |\e[0m   Latest indent\
    \   : 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660013255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map(value => value match {\n \
    \           case x: Long => x\n            case _ => 0l\n        }).filter(value\
    \ => value != 0l)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap(x => x match {\n     \
    \       case v : Long => List(v)\n            case _ => Nil\n        })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def recur(values : List[Any], result\
    \ : List[Long]) : List[Long] = {\n            if (values.length == 0) result\n\
    \            else if (values.head.isInstanceOf[Long]) {\n                recur(values.tail,\
    \ result :+ values.head.asInstanceOf[Long])\n            }\n            else {\n\
    \                recur(values.tail, result)\n            }\n        }\n      \
    \  recur(values, List[Long]())\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        (for (value <- values) yield value match\
    \ {\n            case i : Long => i\n            case _ =>\n        }).filter(_\
    \ != null)\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgl4af40g.scala:13:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        }).filter(_ != \e[31mnull\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ AnyVal and Null cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660013259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(i => i.isInstanceOf[Long]\
    \ || i.isInstanceOf[Int]).map(i => i.asInstanceOf[Long])\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(v => v.isInstanceOf[Long]).map(v\
    \ => v.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // TODO\n        null\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.filterIntegers(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmptklnl041.scala:14)\n\tat Problem.main(tmptklnl041.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result = new ListBuffer[Long]\n \
    \       for (value <- values) {\n            value match {\n                case\
    \ i : Int => result += i.toLong\n                case l : Long => result += l\n\
    \                case _ =>\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n\t    def filterIntegersHelper(values : List[Any],\
    \ filteredValues : List[Long]) : List[Long] = {\n\t\t    if (values.isEmpty)\n\
    \t\t\t    filteredValues\n\t\t    else {\n\t\t\t    values.head match {\n\t\t\t\
    \t    case x : Long => filterIntegersHelper(values.tail, filteredValues :+ x)\n\
    \t\t\t\t    case _ => filterIntegersHelper(values.tail, filteredValues)\n\t\t\t\
    \    }\n\t\t    }\n\t    }\n\t    filterIntegersHelper(values, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgul6tlgu.scala:12:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m\t\t\t    filteredValues\n\e[31m\e[31m   |\e[0m\t\t\t\
    \    ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations of tabs and spaces in\
    \ indentation prefixes.\n\e[31m   |\e[0m   Previous indent : 2 tabs, 4 spaces\n\
    \e[31m   |\e[0m   Latest indent   : 3 tabs, 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpgul6tlgu.scala:17:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m\t\t\t\
    \    }\n\e[31m\e[31m   |\e[0m\t\t\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible\
    \ combinations of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m  \
    \ Previous indent : 4 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 3 tabs,\
    \ 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpgul6tlgu.scala:18:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m\t\t    }\n\e[31m\e[31m   |\e[0m\t\t    ^\e[0m\n\e[31m\
    \   |\e[0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\
    \e[31m   |\e[0m   Previous indent : 3 tabs, 4 spaces\n\e[31m   |\e[0m   Latest\
    \ indent   : 2 tabs, 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpgul6tlgu.scala:19:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m\t    }\n\
    \e[31m\e[31m   |\e[0m\t    ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations\
    \ of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent\
    \ : 2 tabs, 4 spaces\n\e[31m   |\e[0m   Latest indent   : 1 tab, 4 spaces\n\e\
    [31m\e[31m-- Error: /tmp/tmpgul6tlgu.scala:21:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab, 4 spaces\n\e[31m   |\e[0m   Latest indent\
    \   : 4 spaces\n5 errors found\n"
  stdout: ''
  timestamp: 1660013261
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result : List[Long] = Nil\n     \
    \   for (value <- values) {\n            value match {\n                case a\
    \ : Long => result = result :+ a\n                case _ => ()\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = ListBuffer[Long]()\n   \
    \     values.foreach(x => {\n            x match {\n                case x:Long\
    \ => result += x\n                case _ =>\n            }\n        })\n     \
    \   result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013268
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values.collect {\n        case x: Long\
    \ => x\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // YOUR CODE HERE\n        List[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp73w0fxx_.scala:15)\n\tat Problem.main(tmp73w0fxx_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n    \t\t// returns a list of integer values if\
    \ exists else returns empty list\n    \t\tvalues.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def filterIntegersHelper(values : List[Any],\
    \ result : List[Long]) : List[Long] = values match {\n            case x :: xs\
    \ => x match {\n                case x:Long => filterIntegersHelper(xs, result\
    \ :+ x)\n                case _ => filterIntegersHelper(xs, result)\n        \
    \    }\n            case _ => result\n        }\n        filterIntegersHelper(values,\
    \ List[Long]())\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // we can use match or if else\n    \
    \    values match {\n            case Nil => Nil\n            case x :: xs =>\
    \ \n                if (isInteger(x)) x.asInstanceOf[Long] :: filterIntegers(xs)\n\
    \                else filterIntegers(xs)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpteyk2fa6.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mif\e[0m (isInteger(x)) x.asInstanceOf[\e\
    [35mLong\e[0m] :: filterIntegers(xs)\n\e[31m\e[31m   |\e[0m                  \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: isInteger\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = new ListBuffer[Long]\n \
    \       for (x <- values) {\n            x match {\n                case i : Int\
    \ => result += i.toLong\n                case l : Long => result += l\n      \
    \          case _ =>\n            }\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // TODO.\n        // 1. Apply filter\
    \ (or something similar) on given values and return only integers.\n        //\
    \ 2. Make sure to cast them to Long for easy conversion later.\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      return (values.map {\n        case l:Long\
    \ => l.toLong\n        case _ => 0\n      }.filter(_ > 0))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // put your code here\n        return\
    \ List[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb10tymi1.scala:15)\n\tat Problem.main(tmpb10tymi1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val nums = ListBuffer[Long]()\n     \
    \   for (n <- values) {\n            n match {\n                case x: Int =>\
    \ nums += x.toLong\n                case x: Long => nums += x\n              \
    \  case _ => ()\n            }\n        }\n        nums.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(value => value.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Write code here...\n        return\
    \ values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(value => value.isInstanceOf[Long]).map(value\
    \ => value.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Insert your code here\n        null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.filterIntegers(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmp8f6w1kiw.scala:14)\n\tat Problem.main(tmp8f6w1kiw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.filterIntegers(tmp00qf3xee.scala:10)\n\tat Problem$.main(tmp00qf3xee.scala:13)\n\
    \tat Problem.main(tmp00qf3xee.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var list : List[Long] = Nil;\n      \
    \  for (e <- values) {\n            if (e.isInstanceOf[Long]) {\n            \
    \    list = e.asInstanceOf[Long] :: list;\n            }\n        }\n        return\
    \ list;\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq6bpq41n.scala:20)\n\tat Problem.main(tmpq6bpq41n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val filtered_values = ListBuffer[Long]()\n\
    \        for (i <- values) {\n            if (i.isInstanceOf[Long]) {\n      \
    \          filtered_values += i.asInstanceOf[Long]\n            }\n        }\n\
    \        filtered_values.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var l = List[Long]()\n        for (v\
    \ <- values) {\n            v match {\n                case x : Long => l = l\
    \ :+ x\n                case x : Int => l = l :+ x.toLong\n                case\
    \ _ => {}\n            }\n        }\n        return l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      val result = new ListBuffer[Long]\n   \
    \   for (value <- values) {\n        value match {\n          case i : Long =>\
    \ result += i\n          case i : Int => result += i.toLong\n          case i\
    \ : Short => result += i.toLong\n          case i : Byte => result += i.toLong\n\
    \          case _ => None\n        }\n      }\n      result.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return values.filter(x => (x.isInstanceOf[Long]\
    \ || x.isInstanceOf[Int])).map(x => x.asInstanceOf[Long])\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        //TODO: Complete the implementation to\
    \ return list of integers only\n        //Steps:\n        //1. Use isInstanceOf\
    \ to match for Int, Long, Short and Char types.\n        //2. Use toLong to cast\
    \ the value to Long\n        ???\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.filterIntegers(tmpg7_1l1zl.scala:14)\n\tat Problem$.main(tmpg7_1l1zl.scala:17)\n\
    \tat Problem.main(tmpg7_1l1zl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val integers = for (i <- values if i.isInstanceOf[Long])\
    \ yield i.asInstanceOf[Long]\n        integers\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        if (values.length == 0) {\n         \
    \   return List[Long]()\n        }\n        values.head match {\n            case\
    \ v : Long => List[Long](v) ++ filterIntegers(values.tail)\n            case _\
    \ => filterIntegers(values.tail)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return values.filter {\n            case\
    \ a : Long => true\n            case _ => false\n        }.map {\n           \
    \ case a : Long => a\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var longList : List[Long] = List[Long]()\n\
    \        values.foreach {\n            case x : Long => longList = longList :+\
    \ x\n            case _ => Unit\n        }\n        longList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcef_xkfk.scala:13:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m _ => Unit\n\e[31m\e[31m \
    \  |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0mReference to \e[33mobject\e\
    [0m \e[35mUnit\e[0m in \e[33mpackage\e[0m \e[35mscala\e[0m should not have survived,\n\
    \e[31m   |\e[0mit should have been processed and eliminated during expansion of\
    \ an enclosing macro or term erasure.\n1 error found\n"
  stdout: ''
  timestamp: 1660013276
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def loop(values : List[Any], result :\
    \ List[Long]) : List[Long] = {\n            values match {\n                case\
    \ List() => result\n                case head :: tail => head match {\n      \
    \              case v : Long => loop(tail, v :: result)\n                    case\
    \ _ => loop(tail, result)\n                }\n            }\n        }\n     \
    \   loop(values, List[Long]())\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf526cwnt.scala:23)\n\tat Problem.main(tmpf526cwnt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var list = new ListBuffer[Long]()\n \
    \       for (x <- values) {\n            x match {\n                case x : Int\
    \ => list += x.toLong\n                case x : Long => list += x\n          \
    \      case _ =>\n            }\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return values.filter(_.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result : ListBuffer[Long] = ListBuffer[Long]()\n\
    \        values.foreach((v : Any) => if (v.isInstanceOf[Long]) result += v.asInstanceOf[Long])\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var longList = List[Long]()\n       \
    \ for (value <- values) {\n            try {\n                val longVal = value.asInstanceOf[Long]\n\
    \                longList = longList :+ longVal\n            } catch {\n     \
    \           case _ : Throwable => Unit\n            }\n        }\n        longList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsa4odvpa.scala:16:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m _ : Throwable => Unit\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^\e[0m\n\e[31m \
    \  |\e[0mReference to \e[33mobject\e[0m \e[35mUnit\e[0m in \e[33mpackage\e[0m\
    \ \e[35mscala\e[0m should not have survived,\n\e[31m   |\e[0mit should have been\
    \ processed and eliminated during expansion of an enclosing macro or term erasure.\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter {\n            x => (x.isInstanceOf[Long]\
    \ | x.isInstanceOf[Int])\n        }.map(x => x.asInstanceOf[Long])\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      //var f = ListBuffer[Long]()\n      var\
    \ f = List[Long]()\n      for (value <- values) {\n          if (value.isInstanceOf[Long])\
    \ {\n              f = value.asInstanceOf[Long] :: f\n          }\n      }\n \
    \     return f\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcn6m3srj.scala:21)\n\tat Problem.main(tmpcn6m3srj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Write your implementation here\n \
    \       values.filter(x => (x.isInstanceOf[Int] || x.isInstanceOf[Long])).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter { x => x.isInstanceOf[Long]\
    \ }.map { x => x.asInstanceOf[Long] }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return Nil\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_n1v1hm1.scala:14)\n\tat Problem.main(tmp_n1v1hm1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result = List[Long]()\n        for\
    \ (value <- values) {\n            if (value.isInstanceOf[Long]) {\n         \
    \       result = result :+ value.asInstanceOf[Long]\n            }\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(value => value.isInstanceOf[Long]).map(value\
    \ => value.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = new ListBuffer[Long]()\n\
    \        for (value <- values) {\n            try {\n                result +=\
    \ value.asInstanceOf[Long]\n            } catch {\n                case e : ClassCastException\
    \ =>\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Write implementation here\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpem7httxn.scala:9:58\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mfilterIntegers\e\
    [0m(\e[36mvalues\e[0m : \e[35mList\e[0m[\e[35mAny\e[0m]) : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                                    \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                     Found:    Unit\n\e[31m   |\e[0m                        \
    \                            Required: List[Long]\n\e[31m10 |\e[0m        \e[34m//\
    \ Write implementation here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013279
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        List[Long]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwh2oks1.scala:14)\n\tat Problem.main(tmpxwh2oks1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Check if the param is List of Any\n\
    \        if (values.isInstanceOf[List[Any]]) {\n            // Type casted to\
    \ List of Any\n            val listOfAny: List[Any] = values.asInstanceOf[List[Any]]\n\
    \            var resultList = List[Long]()\n            for (value <- listOfAny)\
    \ {\n                // Check if the object is Long Type\n                if (value.isInstanceOf[Long])\
    \ {\n                    val intValue: Long = value.asInstanceOf[Long]\n     \
    \               resultList = resultList :+ intValue\n                }\n     \
    \       }\n            resultList\n        } else {\n            throw new IllegalArgumentException(\"\
    Argument should be List of Any\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter{\n            case x :\
    \ Long => true\n            case _ => false\n        }.map{\n            case\
    \ x : Long => x\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val integers = for(v <- values if v.isInstanceOf[Long])\
    \ yield v.asInstanceOf[Long]\n        return integers\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Add your code here\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwt4zxgvd.scala:9:58\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mfilterIntegers\e\
    [0m(\e[36mvalues\e[0m : \e[35mList\e[0m[\e[35mAny\e[0m]) : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                                    \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                     Found:    Unit\n\e[31m   |\e[0m                        \
    \                            Required: List[Long]\n\e[31m10 |\e[0m        \e[34m//\
    \ Add your code here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013284
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.foldLeft(new ListBuffer[Long]())((l,\
    \ n) => { n match {\n            case l : Long => l.+=:(n.asInstanceOf[Long])\n\
    \            case i : Int => l.+=:(n.asInstanceOf[Int].toLong)\n            case\
    \ _ => l\n        }\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpippjs42g.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m l : Long => l.+=:(n.asInstanceOf[Long])\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             value +=: is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013286
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Fill in here\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013288
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // >>> filterIntegers((List[Any](\"a\"\
    , 3.14f, 5l)))\n        // (List[Long](5l.toLong))\n        // >>> filterIntegers((List[Any](1l,\
    \ 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n        // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n        var intValues = List[Long]()\n        var i\
    \ = 0\n        while (i < values.length) {\n            var value = values(i)\n\
    \            value match {\n                case intValue : Long => intValues\
    \ = intValues :+ intValue\n                case _ => \n            }\n       \
    \     i += 1\n        }\n        intValues\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013288
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def filterInteger(value : Any) : Boolean\
    \ = {\n            value match {\n                case value : Long => true\n\
    \                case _ => false\n            }\n        }\n        values.filter(filterInteger).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(v => v.isInstanceOf[Long]).map(v\
    \ => v.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013260
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var integers = List[Long]()\n       \
    \ for (value <- values) {\n            value match {\n                case int:Int\
    \ => integers = integers :+ int.toLong\n                case int:Long => integers\
    \ = integers :+ int\n                case _ => ()\n            }\n        }\n\
    \        integers\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Start your code here.\n        var\
    \ intList: List[Long] = List()\n        for (a <- values) {\n            if (a.isInstanceOf[Long])\
    \ {\n                intList = a.asInstanceOf[Long] :: intList\n            }\n\
    \        }\n        intList.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(isInt).map(x => x.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpycdeck1q.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(isInt).map(\e[36mx\e[0m => x.asInstanceOf[\e\
    [35mLong\e[0m])\n\e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: isInt\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013286
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(e => e.isInstanceOf[Long]).map(e\
    \ => e.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      var value = values.filter(x => x.isInstanceOf[Long])\n\
    \      return value.map(_.asInstanceOf[Long])\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var new_list : List[Long] = List()\n\
    \        values.foreach((i) => {\n            if (i.isInstanceOf[Long]) new_list\
    \ = new_list.::(i.asInstanceOf[Long])\n        })\n        return new_list\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6f8f_12o.scala:18)\n\tat Problem.main(tmp6f8f_12o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        throw new NotImplementedError(\"TODO:\
    \ implement\")\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: TODO: implement\n\tat Problem$.filterIntegers(tmp0rjfx50r.scala:10)\n\
    \tat Problem$.main(tmp0rjfx50r.scala:13)\n\tat Problem.main(tmp0rjfx50r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val res = ListBuffer[Long]()\n      \
    \  for (value <- values)\n            if (value.isInstanceOf[Long])\n        \
    \        res += value.asInstanceOf[Long]\n        res.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // TODO Implement this method.\n    \
    \    // This implementation returns the input\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(el => el.isInstanceOf[Long]\
    \ || el.isInstanceOf[Int]).map(el => el.asInstanceOf[Long])\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val emptyList = List[Long]()\n      \
    \  return values.filter(v => v.isInstanceOf[Long]).map(n => n.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // TODO 1\n        Nil\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx23nvy59.scala:15)\n\tat Problem.main(tmpx23nvy59.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var ret : List[Long] = List()\n     \
    \   for (v <- values) {\n            v match {\n                case i : Int =>\
    \ ret = ret :+ i.toLong\n                case l : Long => ret = ret :+ l\n   \
    \             case _ =>\n            }\n        }\n        ret\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values.filter(x => x.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => isInteger(x)).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvc8ojfv5.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(\e[36mx\e[0m => isInteger(x)).map(_.asInstanceOf[\e\
    [35mLong\e[0m])\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: isInteger\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013288
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val filtered = for (a <- values if a.isInstanceOf[Long])\
    \ yield a.asInstanceOf[Long]\n        filtered\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        if (values.isEmpty)\n            List[Long]()\n\
    \        else {\n            val head = values.head\n            val tail = values.tail\n\
    \            if (head.isInstanceOf[Long])\n                List[Long](head.asInstanceOf[Long])\
    \ ++ filterIntegers(tail)\n            else\n                filterIntegers(tail)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values.filter(v => v.isInstanceOf[Long]).map(v\
    \ => v.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Complete this function.\n        values.filter(v\
    \ => v.isInstanceOf[Long]).map(l => l.asInstanceOf[Long])\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013295
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        throw new NotImplementedError(\"filterIntegers\"\
    );\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: filterIntegers\n\tat Problem$.filterIntegers(tmp_ywu2zdn.scala:10)\n\
    \tat Problem$.main(tmp_ywu2zdn.scala:13)\n\tat Problem.main(tmp_ywu2zdn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013295
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values.filter({ x => x.isInstanceOf[Long]\
    \ }).map({ x => x.asInstanceOf[Long] })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.foldLeft(List[Long]())((acc, v)\
    \ => v match {\n            case n : Long => n :: acc\n            case _ => acc\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4n5ohgbc.scala:17)\n\tat Problem.main(tmp4n5ohgbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter{\n            case i :\
    \ Int => true\n            case i : Long => true\n            case _ => false\n\
    \        }.map{\n            case i : Int => i.toLong\n            case i : Long\
    \ => i\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // your code goes here\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7_xi93kh.scala:9:58\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mfilterIntegers\e\
    [0m(\e[36mvalues\e[0m : \e[35mList\e[0m[\e[35mAny\e[0m]) : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                                    \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                     Found:    Unit\n\e[31m   |\e[0m                        \
    \                            Required: List[Long]\n\e[31m10 |\e[0m        \e[34m//\
    \ your code goes here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      var filteredInts : List[Long] = List()\n\
    \      values.foreach{ value =>\n          if (value.isInstanceOf[Long])\n   \
    \         filteredInts = filteredInts :+ value.asInstanceOf[Long]\n      }\n \
    \     filteredInts\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013299
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // TODO: Complete the problem here\n\
    \        values.filter(v => v.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.foldLeft(List[Long]())((accum,\
    \ currentVal) => {\n            currentVal match {\n                case curVal:Long\
    \ => (accum :+ curVal)\n                case _ => accum\n            }\n     \
    \   })\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // @todo\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprhlqc3kx.scala:9:58\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mfilterIntegers\e\
    [0m(\e[36mvalues\e[0m : \e[35mList\e[0m[\e[35mAny\e[0m]) : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                                    \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                     Found:    Unit\n\e[31m   |\e[0m                        \
    \                            Required: List[Long]\n\e[31m10 |\e[0m        \e[34m//\
    \ @todo\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(isInt).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpccnzglqj.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        values.filter(isInt).map(_.asInstanceOf[\e[35mLong\e\
    [0m])\n\e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: isInt\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values match {\n        case Nil => Nil\n\
    \        case (head: Long) :: tail => head :: filterIntegers(tail)\n        case\
    \ _ :: tail => filterIntegers(tail)\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // TODO: Implement the function\n   \
    \     return List[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyqppd35_.scala:15)\n\tat Problem.main(tmpyqppd35_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.filterIntegers(tmpeqw7kl8n.scala:10)\n\tat Problem$.main(tmpeqw7kl8n.scala:13)\n\
    \tat Problem.main(tmpeqw7kl8n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.foldLeft(List[Long]())((a,b) =>\
    \ {\n            if (b.isInstanceOf[Long]) a :+ b.asInstanceOf[Long]\n       \
    \     else a\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var ints = List[Long]()\n        for\
    \ (n <- values) {\n            try {\n                ints = ints :+ n.asInstanceOf[Long]\n\
    \            } catch {\n                case _ : Throwable => None\n         \
    \   }\n        }\n        return ints\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return values.filter(isInteger).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc172lbic.scala:10:29 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mreturn\e[0m values.filter(isInteger).map(_.asInstanceOf[\e\
    [35mLong\e[0m])\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: isInteger\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values.filter { x =>\n        x match {\n\
    \          case x : Long => true\n          case _ => false\n        }\n     \
    \ }.map { _.asInstanceOf[Long] }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val filtered = values.filter(v => v.isInstanceOf[Long]\
    \ || v.isInstanceOf[Int])\n        filtered.map(_.asInstanceOf[Long])\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      // TODO\n      return List[Long]()\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpagkx_0nx.scala:15)\n\tat Problem.main(tmpagkx_0nx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(p => p.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = new ListBuffer[Long]()\n\
    \        values.foreach(x => {\n            x match {\n                case x\
    \ : Int => result += x.toLong\n                case x : Long => result += x\n\
    \                case _ => // Do nothing\n            }\n        })\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return values.filter(v => v.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val integers = new ListBuffer[Long]()\n\
    \        values.foreach(\n            i => i match {\n                case i :\
    \ Long => integers += i\n                case _ =>\n            }\n        )\n\
    \        integers.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013306
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var integers = ArrayBuffer[Long]()\n\
    \        values.foreach {\n            value =>\n                value match {\n\
    \                    case x : Long => integers += x\n                    case\
    \ x : Int => integers += x.toLong\n                    case _ =>\n           \
    \     }\n        }\n        integers.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013306
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Write code here\n        return (List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp64hhs4j2.scala:15)\n\tat Problem.main(tmp64hhs4j2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val filtered = values.filter({case x:\
    \ Long => true case _ => false})\n        filtered.map(x => x.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // your implementation here\n       \
    \ var result = new ListBuffer[Long]()\n        for (elem <- values) {\n      \
    \    elem match {\n            case elem: Int => result += elem.toLong\n     \
    \       case elem: Long => result += elem\n            case _ =>\n          }\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // <<Complete this function>>\n     \
    \   var l = List[Long]()\n        for (v <- values) {\n            v match {\n\
    \                case x: Int => l = l :+ x.toLong\n                case x: Long\
    \ => l = l :+ x\n                case _ =>\n            }\n        }\n       \
    \ l\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val numbers = values.collect{case i:Long\
    \ => i}\n        return numbers\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // BEGIN SOLUTION\n        val filtered\
    \ = values.filter(x => x.isInstanceOf[Long])\n        val longs = filtered.map(x\
    \ => x.asInstanceOf[Long])\n        longs\n        // END SOLUTION\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      // TODO: Implement me\n      values.filter(x\
    \ => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Implement your code here\n       \
    \ values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val integers = ListBuffer[Long]()\n \
    \       for (value <- values) {\n            if (value.isInstanceOf[Long]) {\n\
    \                integers += value.asInstanceOf[Long]\n            }\n       \
    \ }\n        integers.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val integers : ListBuffer[Long] = ListBuffer[Long]()\n\
    \        for (value <- values) {\n            if (value.isInstanceOf[Long]) {\n\
    \                integers += value.asInstanceOf[Long]\n            }\n       \
    \ }\n        integers.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.flatMap(x => if (x.isInstanceOf[Long])\
    \ List(x.asInstanceOf[Long]) else List[Long]())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter {\n            case _:\
    \ Int => true\n            case _: Long => true\n            case _ => false\n\
    \        }.map(_.asInstanceOf[Long])\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.filterIntegers(tmpeqw7kl8n.scala:10)\n\tat Problem$.main(tmpeqw7kl8n.scala:13)\n\
    \tat Problem.main(tmpeqw7kl8n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var l : List[Long] = List[Long]()\n \
    \       for (v <- values) {\n            v match {\n                case x : Long\
    \ => l = l :+ x.toLong\n                case x : Int => l = l :+ x.toLong\n  \
    \              case x : Short => l = l :+ x.toLong\n                case x : Byte\
    \ => l = l :+ x.toLong\n                case _ => \n            }\n        }\n\
    \        return l\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // TODO: Implement this method\n    \
    \    return null\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.filterIntegers(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmpqtnaz_2x.scala:14)\n\tat Problem.main(tmpqtnaz_2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Given a list of integers and a number\
    \ 'n', find 3 numbers in the list that add up to 'n'\n        // >>> find3NumbersThatAddTo(List[Long](1l,\
    \ 2l, 3l, 4l, 5l, -1l, 6l, 7l, 8l, 9l, -4l, 10l), 3l)\n        // (List[(Long,\
    \ Long, Long)]((-1l.toLong, 2l.toLong, 1l.toLong), (-4l.toLong, 1l.toLong, 3l.toLong),\
    \ (-4l.toLong, 2l.toLong, 2l.toLong)))\n        def find3NumbersThatAddTo(numbers\
    \ : List[Long], num : Long) : List[(Long, Long, Long)] = {\n            numbers.combinations(3).filter(l\
    \ => (l(0) + l(1) + l(2)) == num).toList\n        }\n        // Given a list of\
    \ integers and a number 'n', find 3 numbers in the list that multiply to 'n'\n\
    \        // >>> find3NumbersThatMultiplyTo(List[Long](1l, 2l, 3l, 4l, 5l, -1l,\
    \ 6l, 7l, 8l, 9l, -4l, 10l), 4l)\n        // (List[(Long, Long, Long)]((-1l.toLong,\
    \ 4l.toLong, -1l.toLong), (-4l.toLong, 2l.toLong, 2l.toLong)))\n        def find3NumbersThatMultiplyTo(numbers\
    \ : List[Long], num : Long) : List[(Long, Long, Long)] = {\n            numbers.combinations(3).filter(l\
    \ => (l(0) * l(1) * l(2)) == num).toList\n        }\n        // Given a list of\
    \ integers and a number 'n', find 3 numbers in the list that add up to 'n' and\
    \ multiply to 'n'\n        // >>> find3NumbersThatAddAndMultiplyTo(List[Long](1l,\
    \ 2l, 3l, 4l, 5l, -1l, 6l, 7l, 8l, 9\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflqtom7a.scala:14:77\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            numbers.combinations(\e\
    [31m3\e[0m).filter(\e[36ml\e[0m => (l(\e[31m0\e[0m) + l(\e[31m1\e[0m) + l(\e[31m2\e\
    [0m)) == num).toList\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    List[List[Long]]\n\e[31m   |\e[0m  \
    \          Required: List[(Long, Long, Long)]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpflqtom7a.scala:20:77 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            numbers.combinations(\e[31m3\e[0m).filter(\e\
    [36ml\e[0m => (l(\e[31m0\e[0m) * l(\e[31m1\e[0m) * l(\e[31m2\e[0m)) == num).toList\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    List[List[Long]]\n\e[31m   |\e[0m  \
    \          Required: List[(Long, Long, Long)]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpflqtom7a.scala:24:5 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.map(x => {\n            x match\
    \ {\n                case i : Long => i\n                case i : Int => i.toLong\n\
    \                case _ => 0l\n            }\n        }).filter(x => x != 0l)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def filterIntegers0(values : List[Any],\
    \ acc : List[Long]) : List[Long] = {\n            if (values.isEmpty) acc\n  \
    \          else values.head match {\n                case i : Long => filterIntegers0(values.tail,\
    \ i :: acc)\n                case _ => filterIntegers0(values.tail, acc)\n   \
    \         }\n        }\n        filterIntegers0(values, List[Long]())\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2zsl0lt9.scala:21)\n\tat Problem.main(tmp2zsl0lt9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n      values.filter(x => x.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // Non-tail recursive version\n     \
    \   def filterIntegers0(values : List[Any], acc : List[Long]) : List[Long] = values\
    \ match {\n            case Nil => acc\n            case x :: xs => {\n      \
    \          if (x.isInstanceOf[Long]) {\n                    filterIntegers0(xs,\
    \ acc :+ x.asInstanceOf[Long])\n                } else {\n                   \
    \ filterIntegers0(xs, acc)\n                }\n            }\n        }\n    \
    \    filterIntegers0(values, List())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result = List[Long]()\n        values.foreach\
    \ {\n            (v) => v match {\n                case l : Long => result = l\
    \ :: result\n                case l : Int => result = l.toLong :: result\n   \
    \             case l : Short => result = l.toLong :: result\n                case\
    \ l : Byte => result = l.toLong :: result\n                case _ =>\n       \
    \     }\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9cz6r0l_.scala:24)\n\tat Problem.main(tmp9cz6r0l_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        //list of longs\n        var list: List[Long]\
    \ = List();\n        //iterate over list\n        for(x <- values){\n        \
    \    //check if type is long\n            if(x.isInstanceOf[Long]){\n        \
    \        //add to list\n                list = list :+ x.asInstanceOf[Long];\n\
    \            }\n        }\n        return list;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(e => e.isInstanceOf[Long]).map(e\
    \ => e.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        def parse(value : Any) : Option[Long]\
    \ = {\n            value match {\n                case l : Long => Some(l)\n \
    \               case i : Int => Some(i.toLong)\n                case s : Short\
    \ => Some(s.toLong)\n                case c : Char => Some(c.toLong)\n       \
    \         case b : Byte => Some(b.toLong)\n                case _ => None\n  \
    \          }\n        }\n        values.flatMap(parse(_))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter {\n            _ match\
    \ {\n                case x : Long => true\n                case _ => false\n\
    \            }\n        }.map {\n            case x : Long => x\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return values.filter(isLong(_)).map(toLong(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpza_ul3mj.scala:10:29 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mreturn\e[0m values.filter(isLong(_)).map(toLong(_))\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: isLong\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpza_ul3mj.scala:10:44 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mreturn\e[0m values.filter(isLong(_)).map(toLong(_))\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                            Not found: toLong\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        List[Long]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwh2oks1.scala:14)\n\tat Problem.main(tmpxwh2oks1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        (for (e <- values) yield e.asInstanceOf[Number].longValue).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ClassCastException: class scala.collection.mutable.HashMap cannot\
    \ be cast to class java.lang.Number (scala.collection.mutable.HashMap is in unnamed\
    \ module of loader java.net.URLClassLoader @dc24521; java.lang.Number is in module\
    \ java.base of loader 'bootstrap')\n\tat Problem$.filterIntegers$$anonfun$1(tmpcu519dy4.scala:10)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.filterIntegers(tmpcu519dy4.scala:10)\n\
    \tat Problem$.main(tmpcu519dy4.scala:14)\n\tat Problem.main(tmpcu519dy4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        if (values.isEmpty) return values\n \
    \       val value = values.head\n        val rest = values.tail\n        value\
    \ match {\n            case i : Long => i :: filterIntegers(rest)\n          \
    \  case _ => filterIntegers(rest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n   \
    \ assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ivj2sym.scala:10:35\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (values.isEmpty)\
    \ \e[33mreturn\e[0m values\n\e[31m\e[31m   |\e[0m                            \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    (values : List[Any])\n\e[31m   |\e[0m                                   Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter({\n            case x :\
    \ Long => true\n            case _ => false\n        }).map({\n            case\
    \ x : Long => x\n        })\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(a => a.isInstanceOf[Long]\
    \ || a.isInstanceOf[Int]).map(a => a.asInstanceOf[Long])\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return null\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.filterIntegers(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmplpkhk2hh.scala:13)\n\tat Problem.main(tmplpkhk2hh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var filtered = List[Long]()\n       \
    \ for (value <- values) {\n            value match {\n                case v :\
    \ Long => filtered = filtered :+ v\n                case _ =>\n            }\n\
    \        }\n        filtered\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any scalathon values only for integers\n    //\
    \ >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n    \tvalues.filter(isAnyInteger(_)).map(x =>\
    \ x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxd520868.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m    \tvalues.filter(isAnyInteger(_)).map(\e[36mx\e[0m\
    \ => x.asInstanceOf[\e[35mLong\e[0m])\n\e[31m\e[31m   |\e[0m    \t           \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \t              Not found: isAnyInteger\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013314
