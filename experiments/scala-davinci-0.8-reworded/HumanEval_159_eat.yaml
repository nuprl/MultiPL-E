name: HumanEval_159_eat
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n\
  \    // but now you need to eat more carrots to complete the day's meals.\n    //\
  \ you should return a list of [ total number of eaten carrots after your meals,\n\
  \    // the number of carrots left after your meals ]\n    // if there are not enough\
  \ remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\
  \    // Example:\n    // >>> eat((5l), (6l), (10l))\n    // (List[Long](11l.toLong,\
  \ 4l.toLong))\n    // >>> eat((4l), (8l), (9l))\n    // (List[Long](12l.toLong,\
  \ 1l.toLong))\n    // >>> eat((1l), (10l), (10l))\n    // (List[Long](11l.toLong,\
  \ 0l.toLong))\n    // >>> eat((2l), (11l), (5l))\n    // (List[Long](7l.toLong,\
  \ 0l.toLong))\n    // Variables:\n    // @number : integer\n    // the number of\
  \ carrots that you have eaten.\n    // @need : integer\n    // the number of carrots\
  \ that you need to eat.\n    // @remaining : integer\n    // the number of remaining\
  \ carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n\
  \    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n\
  \    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong,\
  \ 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong,\
  \ 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong,\
  \ 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong,\
  \ 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong,\
  \ 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong,\
  \ 0l.toLong))));\n    }\n\n}\n"
completions: ['        List(number + remaining, remaining - (need - number))', " \
    \       var result : List[Long] = List()\n        if (number < 0 || need < 0 ||\
    \ remaining < 0) {\n            result\n        } else {\n            var eat_cnt\
    \ = 0l\n            if (number + remaining < need) {\n                eat_cnt\
    \ = number + remaining\n            } else {\n                eat_cnt = need\n\
    \            }\n            result = List(eat_cnt, remaining - eat_cnt + number)\n\
    \        }\n        result", "        // your code here\n        if (remaining\
    \ - need <= 0) List(number + remaining, 0)\n        else List(number + need, remaining\
    \ - need)", "        val left = remaining - need\n        if (left < 0) {\n  \
    \          return List(number + remaining, 0)\n        }\n        return List(number\
    \ + need, left)", "        var response = List[Long]()\n        val total : Long\
    \ = number + need\n        if (total <= remaining) {\n            response = List(total,\
    \ remaining - total)\n        } else {\n            response = List(remaining\
    \ + number, 0)\n        }\n        response", "        var total = number + (remaining\
    \ - need).max(0)\n        var left = (remaining - need).min(0)\n        return\
    \ List(total, left)", "        // Your Code Here\n        return List(0, 0)",
  "        if (number >= 1000 || need >= 1000 || remaining >= 1000) {\n          \
    \  List[Long](number + need, 0)\n        } else {\n            if (remaining >=\
    \ need) {\n                List[Long](number + need, remaining - need)\n     \
    \       } else {\n                List[Long](number + remaining, 0)\n        \
    \    }\n        }", "        // Write your code here\n        // To print results\
    \ to the standard output you can use Console.println\n        // Example:\n  \
    \      // Console.println(\"Hello world\")\n        List(number + need, remaining\
    \ - need)", "        var result = List[Long]()\n        result = number :: (number\
    \ + min(need, remaining)) :: result\n        result", "        var res = List[Long]()\n\
    \        res = number + need :: 0L :: res\n        if (remaining >= need) {\n\
    \            res = number + need :: remaining - need :: res\n        } else {\n\
    \            res = number + remaining :: 0L :: res\n        }\n        res.reverse",
  "        val total = number + need\n        if (total <= remaining) {\n        \
    \    List(total, remaining - total)\n        } else {\n            List(remaining\
    \ + number, 0L)\n        }", "        if (number + need > remaining) List(remaining,\
    \ 0)\n        else List(number + need, remaining - number - need)", "        val\
    \ eatCarrots = number + min(need, remaining)\n        List(eatCarrots, remaining\
    \ - min(need, remaining))", "        var list : List[Long] = List()\n        list\
    \ = list :+ (number + min(need, remaining))\n        list = list :+ (max(remaining\
    \ - need, 0))\n        return list", "        // Your code here\n        List()",
  "        // your code here\n        val k = number + min(need, remaining)\n    \
    \    List(k, (max(remaining - need, 0)))", '        // Write your code here.',
  "        var list = List[Long]()\n        if(remaining >= need){\n            list\
    \ :+= (number + need)\n            list :+= (remaining - need)\n        }\n  \
    \      else{\n            list :+= (number + remaining)\n            list :+=\
    \ 0\n        }\n        list", "        var result = List[Long]()\n        var\
    \ remainingN = remaining\n        if (number + need > remaining) {\n         \
    \   remainingN = 0\n        } else {\n            remainingN = remaining - (number\
    \ + need)\n        }\n        result = number + need :: remainingN :: result\n\
    \        result", "        val result = number + need\n        val newRemaining\
    \ = remaining - result\n        if (newRemaining < 0)\n            List(result\
    \ - abs(newRemaining), 0)\n        else\n            List(result, newRemaining)",
  '        return List(number + min(need, remaining), max(0, remaining - need))',
  "        val n = max(0, min(number, need))\n        val r = max(0, min(number, remaining))\n\
    \        List[Long](n + r, remaining - r)", "        // Write your code here\n\
    \        List[Long](0, 0)", "        //if (number == 0 && need == 0 && remaining\
    \ == 0) List[Long](0l.toLong, 0l.toLong)\n        //else if (number >= 0 && need\
    \ >= 0 && remaining >= 0) List[Long](number + need, remaining - need)\n      \
    \  if (number >= 0 && need >= 0 && remaining >= 0) List[Long](number + need, remaining\
    \ - need)\n        else List[Long](0l.toLong, 0l.toLong)", "        if (remaining\
    \ < need) return List[Long]((number + remaining), 0)\n        return List[Long]((number\
    \ + need), (remaining - need))", "        val total : Long = number + need\n \
    \       if (total > remaining) List(remaining, 0)\n        else List(total, remaining\
    \ - total)", '        // Write your solution here', "        // your code\n  \
    \      val result = number + need\n        val remain = remaining - need\n   \
    \     var list = List[Long]()\n        if (result > remaining) {\n           \
    \ list = list :+ result - remain\n            list = list :+ 0\n        } else\
    \ {\n            list = list :+ result\n            list = list :+ remain\n  \
    \      }\n        list", "        var list : List[Long] = List();\n        var\
    \ temp = number + need;\n        if (temp > remaining) {\n            temp = remaining;\n\
    \        }\n        list = temp :: remaining - temp :: list;\n        return list;",
  "        if(remaining >= need)\n          List(number + need, remaining - need)\n\
    \        else\n          List(number + remaining, 0)", "        var a = List[Long]()\n\
    \        a = a :+ (number + min(need, remaining))\n        a = a :+ (max(remaining\
    \ - need, 0))\n        return a", "        var total : Long = number + need\n\
    \        if (total > remaining) {\n            return List(remaining, 0)\n   \
    \     }\n        return List(total, remaining - total)", "        // Write your\
    \ code here\n        // To print results to the standard output you can use print\n\
    \        // Example:\n        // println(\"Hello world\")\n        if (number\
    \ + need > remaining)\n            List(remaining, 0)\n        else\n        \
    \    List(number + need, remaining - (number + need))", '        // Write your
    code here...', "        if (remaining == 0) List(number, 0)\n        else if (remaining\
    \ >= need) List(number + need, remaining - need)\n        else List(number + remaining,\
    \ 0)", "        val q = number + need\n        val r = remaining - need\n    \
    \    if (r < 0) {\n            List(q + r, 0)\n        } else {\n            List(q,\
    \ r)\n        }", "        var result : List[Long] = List.empty\n        var total\
    \ = number + remaining\n        if (total <= need) {\n            result = List(total,\
    \ 0)\n        } else {\n            result = List(need, total - need)\n      \
    \  }\n        result", "        // Your code here\n        // You can add another\
    \ function if you need it\n        var left:Long = remaining - need;\n       \
    \ var total:Long = number + need;\n        var result:List[Long] = List(total,\
    \ left);\n        return result;", "        val totalEaten = number + min(need,\
    \ remaining)\n        val rem = (remaining - min(need, remaining))\n        List(totalEaten,\
    \ rem)", "        //todo: your code\n        val A = number + need\n        if\
    \ (A > remaining) {\n            List(remaining, 0)\n        } else {\n      \
    \      List(A, remaining - A)\n        }", "        if (remaining == 0) {\n  \
    \          List[Long](0, 0)\n        } else if (remaining >= need) {\n       \
    \     List[Long](number + need, remaining - need)\n        } else {\n        \
    \    List[Long](number + remaining, 0)\n        }", "        var total = number\
    \ + need\n        if (total <= remaining) return List(total, remaining - total)\n\
    \        return List(remaining + number, 0)", "        val take = remaining -\
    \ (need - number)\n        List[Long](number + min(take, need), max(0, take))",
  "        var res : List[Long] = new ListBuffer[Long].toList\n        res = number\
    \ + min(need, remaining) :: max(0, remaining - need) :: res\n        return res",
  "        var ret = List[Long]()\n        ret = (number + min(need, remaining)) ::\
    \ ((remaining - min(need, remaining))) :: ret\n        ret", "        // Write\
    \ your code here\n        return List[Long](number + need, remaining - need)",
  "        // Write your code here\n        return null;", "        // Your code goes\
    \ here\n        val totalEaten: Long = number + min(need, remaining)\n       \
    \ List(totalEaten, remaining - min(need, remaining))", "        var answer = List[Long]()\n\
    \        answer = answer :+ (number + min(need, remaining))\n        answer =\
    \ answer :+ max(0, remaining - need)\n        return answer", "        val result\
    \ = number + need\n        return List(result, (remaining - need))", "       \
    \ // Your code here\n        var count = 0\n        if (number >= need) {\n  \
    \          if (number + remaining >= need) {\n                count = 1\n    \
    \        }\n        } else {\n            if (number + remaining >= need) {\n\
    \                count = 1\n            }\n        }\n        var arr = Array(number\
    \ + remaining, need - number - remaining)\n        return arr.toList", "     \
    \   if(remaining >= need - number) {\n            List(number + need, remaining\
    \ - (need - number))\n        } else {\n            List(number + remaining, 0)\n\
    \        }", "        var result = new ListBuffer[Long]()\n        if (remaining\
    \ < need) {\n            result += (number + remaining)\n            result +=\
    \ 0\n        } else {\n            result += (number + need)\n            result\
    \ += (remaining - need)\n        }\n        result.toList", "        val result\
    \ : ListBuffer[Long] = ListBuffer[Long]()\n        result += (number + need)\n\
    \        if (remaining - need < 0) {\n            result += 0\n        } else\
    \ {\n            result += (remaining - need)\n        }\n        result.toList",
  '        List(number + Math.min(need, remaining), Math.max(0, remaining - need))',
  "        // your solution here\n        List(number + need, remaining - need)",
  "        // Write your code here\n        val result = new ListBuffer[Long]()\n\
    \        val total = number + need\n        if (total <= remaining) {\n      \
    \      result += total\n            result += remaining - total\n        } else\
    \ {\n            result += remaining + number\n            result += 0\n     \
    \   }\n        result.toList", "        val carrotsToEat = min(need, remaining)\n\
    \        List(number + carrotsToEat, remaining - carrotsToEat)", "        // your\
    \ code here\n        null", "        var number = number\n        var need = need\n\
    \        var remaining = remaining\n        if (number >= need) {\n          \
    \  List(number, remaining)\n        } else {\n            if (need <= remaining)\
    \ {\n                number += need\n                remaining -= need\n     \
    \           List(number, remaining)\n            } else {\n                need\
    \ -= remaining\n                number += remaining\n                remaining\
    \ = 0\n                if (need <= remaining) {\n                    List(number,\
    \ remaining)\n                } else {\n                    List(number, 0)\n\
    \                }\n            }\n        }", "        // if there are not enough\
    \ remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\
    \        if(remaining - need < 0) {\n            List(number + remaining, 0)\n\
    \        } else {\n            List(number + need, remaining - need)\n       \
    \ }", "        var eaten = 0l\n        if (number >= need) {\n            return\
    \ List(number, 0l)\n        }\n        if (remaining + number >= need) {\n   \
    \         eaten = need - number\n        } else {\n            eaten = remaining\n\
    \        }\n        List(number + eaten, remaining - eaten)", '        List(number
    + min(need, remaining), max(0, remaining - need))', "        var eaten = number\n\
    \        var total = number\n        for (i <- number until need) {\n        \
    \    if (remaining - eaten > 0) eaten += 1\n            total += eaten\n     \
    \   }\n        List(total, (remaining - eaten))", '        // your code here.',
  "        if(remaining < need - number) {\n            return List(number + remaining,\
    \ 0)\n        }\n        return List(number + need, remaining - need + number)",
  "        // The answer must be in format:\n        // List[Long](<number of eaten\
    \ carrots>, <number of remaining carrots>)\n        List[Long](number + need,\
    \ max(remaining - need, 0))", "        var number1 = number\n        var need1\
    \ = need\n        var remaining1 = remaining\n        List[Long](number1 + need1,\
    \ remaining1 - need1)", "        var ret = new ListBuffer[Long]\n        if (remaining\
    \ - (need - number) >= 0) {\n            ret += (number + need)\n            ret\
    \ += (remaining - (need - number))\n        } else {\n            ret += (number\
    \ + remaining)\n            ret += 0\n        }\n        ret.toList", '        return
    List[Long](number + min(need, remaining), remaining - min(need, remaining))',
  "        val total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        var ret: List[Long] = List()\n        ret = List((number\
    \ + min(need, remaining)), max(0, (remaining - need)))\n        return ret", " \
    \       // your code goes here\n        List(remaining, 0)", '        List(number
    + min(need, remaining), max(0, remaining - need))', "        if (remaining + number\
    \ > need) List(need, (remaining + number) - need)\n        else List(remaining\
    \ + number, 0)", '        List[Long](number + min(need, remaining), max(0, remaining
    - need))', "      val num = remaining - number\n      if (num <= 0) {\n      \
    \  List(remaining + need, 0)\n      } else {\n        List(remaining + need, num)\n\
    \      }", "        var r = remaining - number\n        if (r < 0) {\n       \
    \     return List(0)\n        }\n        if (r < need) {\n            return List(number\
    \ + r, 0)\n        }\n        return List(number + need, r - need)", "       \
    \ // Write your code here\n        null", "        var n = number\n        var\
    \ r = remaining\n        if (need > r) n += r\n        else n += need\n      \
    \  List(n, max(0, r - need))", '        return List(number + min(need, remaining),
    max(0, remaining - need))', "        var number_of_carrots_eaten : Long = number\n\
    \        var number_of_carrots_remaining : Long = remaining\n        while(need\
    \ > 0 && number_of_carrots_remaining > 0) {\n            number_of_carrots_eaten\
    \ += 1\n            number_of_carrots_remaining -= 1\n            need -= 1\n\
    \        }\n        List(number_of_carrots_eaten, number_of_carrots_remaining)",
  '      List(number + need, remaining - need)', '      List[Long](number + min(need,
    remaining), max(0, remaining - need))', '        return List(number + min(need,
    remaining), max(0, remaining - need))', "        var eat_num = number\n      \
    \  var remain_num = remaining\n        while(eat_num < (number + need) && remain_num\
    \ > 0) {\n            eat_num += 1\n            remain_num -= 1\n        }\n \
    \       List(eat_num, remain_num)", "        // your code goes here.\n       \
    \ var res = List[Long]()\n        if (number >= need) {\n            res = List[Long](number,\
    \ remaining)\n        } else {\n            if (number + remaining >= need) {\n\
    \                res = List[Long](number + remaining, 0)\n            } else {\n\
    \                res = List[Long](number + remaining, -1)\n            }\n   \
    \     }\n        res", '        List(min(remaining, need) + number, max(remaining
    - need, 0))', '        return List(number + need, remaining - need)', "      \
    \  if (number + need > remaining)\n            List(remaining, 0)\n        else\n\
    \            List(number + need, remaining - (number + need))", "        if (number\
    \ > 1000 || need > 1000 || remaining > 1000) return List(0L, 0L)\n        if (number\
    \ < 0 || need < 0 || remaining < 0) return List(0L, 0L)\n        val list = new\
    \ ListBuffer[Long]\n        list += number + need\n        if (number + need >\
    \ remaining) list += 0L\n        else list += remaining - (number + need)\n  \
    \      list.toList", "        val meal = if (remaining - need >= 0) need else\
    \ remaining\n        List(number + meal, remaining - meal)", '        List(need+number,
    if(remaining>=need)remaining-need else 0)', '        return List(number + need,
    remaining - need)', "        if (remaining > need) {\n            List(number\
    \ + need, remaining - need)\n        } else {\n            List(number + remaining,\
    \ 0)\n        }", "        val diff = need - number\n        if (remaining - diff\
    \ < 0) List(number + remaining, 0)\n        else List(number + diff, remaining\
    \ - diff)", "        val result = ArrayBuffer[Long]()\n        val eaten = number\
    \ + min(need, remaining)\n        val r = max(remaining - need, 0l)\n        result\
    \ += eaten\n        result += r\n        result.toList", '        List(number
    + (min(need, remaining)), max(0, remaining - need))', "        if (remaining >=\
    \ need) List(number + need, remaining - need)\n        else List(number + remaining,\
    \ 0)", "        // Write your answer with implementation here.\n        val carrots_ate\
    \ = number + min(need, remaining)\n        List(carrots_ate, max(0, remaining\
    \ - need))", "        var list = List[Long]()\n        val sum = (number + need)\n\
    \        if (sum > remaining) {\n            list = List[Long](remaining, 0)\n\
    \        } else {\n            list = List[Long](sum, (remaining - sum))\n   \
    \     }\n        list", "        var ret = ListBuffer.empty[Long]\n        ret\
    \ += number + min(need, remaining)\n        ret += max(remaining - need, 0)\n\
    \        ret.toList", "        val l = List[Long](number, need, remaining)\n \
    \       if (l.contains(0) || l.contains(1)) (number + need) :: (remaining - need)\
    \ :: Nil\n        else if (number == remaining) (number + need) :: 0L :: Nil\n\
    \        else (number + need) :: (remaining - need) :: Nil", "        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ Console.println\n        // Example:\n        // Console.println(\"Hello world\"\
    )\n        val ate = number + min(need, remaining)\n        val r = remaining\
    \ - min(need, remaining)\n        List(ate, r)", '      List[Long](number + min(need,
    remaining), max(0, remaining - need))', "        val number_of_carrots_eaten_after_your_meals\
    \ : Long = number + min(need, remaining)\n        val number_of_carrots_left_after_your_meals\
    \ : Long = max(0l, remaining - need)\n        return List(number_of_carrots_eaten_after_your_meals,\
    \ number_of_carrots_left_after_your_meals)", "        val eaten = (remaining +\
    \ number).min(need + number)\n        val left = (remaining + number).max(need\
    \ + number) - eaten\n        List(eaten, left)", "        val arr = new ArrayBuffer[Long]()\n\
    \        if (remaining >= need) {\n            arr += number + need\n        \
    \    arr += remaining - need\n        } else {\n            arr += number + remaining\n\
    \            arr += 0\n        }\n        arr.toList", '        List[Long](number
    + (if (remaining >= need) need else remaining), max(remaining - need, 0l))', " \
    \       // your code\n        return List[Long](1l, 1l)", "        // your code\
    \ here\n        val sum = number + need\n        val remain = remaining - need\n\
    \        if (remain < 0) List(sum + remain, 0)\n        else List(sum, remain)",
  "        // Your code here\n        val total_eaten = number + need\n        var\
    \ left = remaining - total_eaten\n        if (left < 0) left = 0\n        return\
    \ List(total_eaten, left)", "        // Write your code here\n        return List[Long](0l.toLong,\
    \ 0l.toLong)", "        val needToEat = number + need\n        if (needToEat >\
    \ remaining)\n            List(remaining, 0)\n        else\n            List(needToEat,\
    \ remaining - needToEat)", "        // your code here\n        List[Long](0, 0)",
  "        // Your code here!\n        //\n        if(number + need > remaining)\n\
    \            List(remaining, 0)\n        else\n            List(number + need,\
    \ remaining - number - need)", '        null', "        // Your code here\n  \
    \      val ret = ListBuffer[Long]()\n        if (remaining < need) {\n       \
    \     ret += number + remaining\n            ret += 0\n        } else {\n    \
    \        ret += number + need\n            ret += remaining - need\n        }\n\
    \        ret.toList", "        val listBuffer = new ListBuffer[Long]\n       \
    \ if (remaining > need) {\n            listBuffer += number + need\n         \
    \   listBuffer += remaining - need\n        } else {\n            listBuffer +=\
    \ number + remaining\n            listBuffer += 0\n        }\n        listBuffer.toList",
  "        val lst = List(number, need, remaining)\n        val total_eaten = lst.map(_.toLong).sum\n\
    \        if (remaining >= need)\n            List(total_eaten, remaining - need)\n\
    \        else\n            List(total_eaten, 0l)", "        var result : List[Long]\
    \ = List(number + need, 0l)\n        if (number + need <= remaining) {\n     \
    \       result = List(number + need, remaining - (number + need))\n        } else\
    \ {\n            result = List(remaining, 0l)\n        }\n        return result",
  "        var res = new ListBuffer[Long]()\n        var total = number + min(need,\
    \ remaining)\n        var rem = remaining - min(need, remaining)\n        res\
    \ += total\n        res += rem\n        res.toList", "        var result = List[Long]()\n\
    \        if (number + need < remaining) {\n            result = List[Long](number\
    \ + need, remaining - number - need)\n        } else {\n            result = List[Long](remaining\
    \ + number, 0)\n        }\n        return result", "        // Your code here\n\
    \        var retList = new ListBuffer[Long]()\n        if (remaining - need <\
    \ 0){\n            var total = remaining + number\n            retList += total\n\
    \            retList += 0\n        }\n        else{\n            var total = remaining\
    \ + number - need\n            retList += total\n            retList += need\n\
    \        }\n        return retList.toList", "        val need = need - number\n\
    \        var result = List[Long]()\n        if (need > remaining) {\n        \
    \    result = List(remaining + number, 0)\n        } else {\n            result\
    \ = List(need + number, remaining - need)\n        }\n        result", '        return
    List(number + (if (remaining < need) remaining else need), remaining - (if (remaining
    < need) remaining else need))', "        if (remaining < (need - number)) {\n\
    \            List(number + remaining, 0)\n        } else {\n            List(number\
    \ + need, remaining - (need - number))\n        }", "        // solution goes\
    \ here\n        return List(number + need, remaining - need)", "        // Your\
    \ code here\n        var list = List[Long]()\n        var result = number + need\n\
    \        if (remaining >= need) {\n            list = List(result, remaining -\
    \ need)\n        } else {\n            list = List(result - (need - remaining),\
    \ 0)\n        }\n        list", "        if (remaining < need) {\n           \
    \ List[Long](number + remaining, 0)\n        } else {\n            List[Long](number\
    \ + need, remaining - need)\n        }", "        var res = number + need\n  \
    \      if (res > remaining) {\n            res = remaining\n        }\n      \
    \  List(res, remaining - res)", "        val a: Long = number + need\n       \
    \ val b: Long = remaining - need\n        if (b < 0) {\n            List(a, 0)\n\
    \        } else {\n            List(a, b)\n        }", "        var result = new\
    \ ListBuffer[Long]()\n        if (number >= 0 && number <= 1000 && need >= 0 &&\
    \ need <= 1000 && remaining >= 0 && remaining <= 1000) {\n            if (need\
    \ > remaining) {\n                result += (number + remaining)\n           \
    \     result += 0\n            } else {\n                result += (number + need)\n\
    \                result += (remaining - need)\n            }\n        }\n    \
    \    return result.toList", "        var remain = remaining - number\n       \
    \ var total = number\n        if (remain > 0) {\n            total += min(need,\
    \ remain)\n            remain -= min(need, remain)\n        }\n        List(total,\
    \ remain)", '        // Your code here !', "        var ret = List[Long]()\n \
    \       var c = 0l\n        if (remaining < need) {\n            ret = ret :+\
    \ (number + remaining)\n            ret = ret :+ 0l\n        } else {\n      \
    \      ret = ret :+ (number + need)\n            ret = ret :+ (remaining - need)\n\
    \        }\n        ret", "        // your code here\n        List(number + need,\
    \ if (remaining - need > 0) remaining - need else 0)", "        // Write your\
    \ code here\n        // To print results to the standard output you can use Console.println\n\
    \        // Example:\n        // Console.println(\"Hello world\")\n        List[Long](number+need,\
    \ remaining-need)", '        return List[Long]((number + min(need, remaining)),
    max(0l, remaining - need))', "        if (remaining >= (number + need)) {\n  \
    \          List(number + need, remaining - (number + need))\n        } else {\n\
    \            List(number + remaining, 0)\n        }", "        val total = number\
    \ + need\n        if (total <= remaining) {\n            List(total, remaining\
    \ - total)\n        } else {\n            List(total - remaining, 0l)\n      \
    \  }", "\t\tval list = List(number + min(need, remaining), max(0, remaining -\
    \ need))\n\t\tlist", "\t\t\tif (number >= 0 && number <= 1000 && need >= 0 &&\
    \ need <= 1000 && remaining >= 0 && remaining <= 1000) {\n\t\t\t\tif (remaining\
    \ >= need) {\n\t\t\t\t\tList[Long](number + need, remaining - need)\n\t\t\t\t\
    } else {\n\t\t\t\t\tList[Long](number + remaining, 0)\n\t\t\t\t}\n\t\t\t} else\
    \ {\n\t\t\t\tList[Long](0, 0)\n\t\t\t}", "        // your code here\n        return\
    \ List(0, 0)", "        // Write your code here:\n        // Replace the following\
    \ line with your implementation\n        if (remaining >= need)\n            List[Long](number\
    \ + need, remaining - need)\n        else\n            List[Long](number + remaining,\
    \ 0)", "      if (remaining >= need) {\n        List(number + need, remaining\
    \ - need)\n      } else {\n        List(number + remaining, 0L)\n      }", " \
    \       // Write your code here\n        // To print results to the standard output\
    \ you can use Console.println(variable)\n        // Example:\n        // >>> Console.println(\"\
    Hello world\")\n        if (remaining >= need) {\n            List[Long](number\
    \ + need, remaining - need)\n        } else {\n            List[Long](number +\
    \ remaining, 0)\n        }", "        // Write your code here...\n        var\
    \ f = List[Long]()\n        if(number == 0)\n            f = f :+ number\n   \
    \     else\n            f = f :+ number + 1\n        if(remaining >= need)\n \
    \           f = f :+ remaining - need\n        else\n            f = f :+ 0\n\
    \        f", "        var food = number\n        if (need > remaining) food +=\
    \ remaining\n        else food += need\n        List(food, remaining - min(need,\
    \ remaining))", '        List((number + min(need, remaining)), (max(remaining
    - need, 0)))', "        // Write your code here...\n        val total = number\
    \ + need\n        val result = if (total <= remaining) List(total, remaining -\
    \ total) else List(remaining + number, 0)\n        result", "        val (n, r)\
    \ = (number, remaining)\n        val max = n + r\n        var eaten = n\n    \
    \    if (need > max) {\n            eaten = max\n        } else {\n          \
    \  eaten = need\n        }\n        List(eaten, r - (eaten - n))", "        if\
    \ (remaining >= need) (number + need) :: (remaining - need) :: Nil\n        else\
    \ (number + remaining) :: 0 :: Nil", "        var list = new ListBuffer[Long]\n\
    \        list += number\n        if (need > remaining) {\n            list +=\
    \ 0\n        } else {\n            list += (remaining - need)\n        }\n   \
    \     list.toList", "        var result = 0l\n        var l = List[Long]()\n \
    \       if (remaining >= need) {\n            result = number + need\n       \
    \     l = l :+ result\n            l = l :+ (remaining - need)\n        } else\
    \ {\n            result = number + remaining\n            l = l :+ result\n  \
    \          l = l :+ 0l\n        }\n        l", "        // Write your code here\n\
    \        // To print results to the standard output you can use print\n      \
    \  // Example:\n        // print(\"Hello world!\")\n        val list = new ListBuffer[Long]\n\
    \        list += (number + min(need, remaining))\n        list += (max(remaining\
    \ - need, 0))\n        list.toList", "        var result = List[Long]()\n    \
    \    if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   if (remaining == 0) {\n            result = List(number, 0)\n        } else\
    \ if (remaining < need) {\n            result = List(number + remaining, 0)\n\
    \        } else {\n            result = List(number + need, remaining - need)\n\
    \        }\n        result", "      val total = number + remaining\n      if (total\
    \ < need) return List(total, 0)\n      List(number + need, total - need)", " \
    \       // Your code here\n        null", "      //if you've already eaten more\
    \ carrots than you need to eat,\n      //just return the number of carrots you\
    \ have eaten,\n      //and the number of carrots remaining.\n      if (number\
    \ >= need) return List(number, remaining)\n      //otherwise, if there are not\
    \ enough carrots to eat,\n      //return the number of carrots you have eaten\
    \ plus the remaining carrots,\n      //and return 0 as the number of carrots remaining.\n\
    \      else if (number + remaining < need) return List(number + remaining, 0)\n\
    \      //otherwise,\n      //return the number of carrots you need to eat,\n \
    \     //and the number of carrots remaining after you've eaten your meals.\n \
    \     else return List(need, number + remaining - need)", '        return List(number
    + min(need, remaining), remaining - min(need, remaining))', "        val n = number\
    \ + need\n        if (n > remaining) List(remaining, 0)\n        else List(n,\
    \ remaining - n)", "        val l = new ListBuffer[Long]()\n        if (remaining\
    \ >= need) {\n            l += (number + need)\n            l += (remaining -\
    \ need)\n        } else {\n            l += (number + remaining)\n           \
    \ l += 0l\n        }\n        l.toList", "        // Write your code here\n  \
    \      // Return a list of long integers\n        return List[Long](number + need,\
    \ remaining - need)", "        if (remaining < need) List[Long](number + remaining,\
    \ 0)\n        else List[Long](number + need, remaining - need)", "        // your\
    \ code here...\n        return null;", "        val eaten = number + min(need,\
    \ remaining)\n        val left = max(0, remaining - need)\n        List(eaten,\
    \ left)", "        // Write your code here\n        // To print results to the\
    \ standard output you can use Console.println\n        // Example:\n        //\
    \ Console.println(\"Hello world\")\n        var x = number + need\n        var\
    \ y = remaining - need\n        var z = x + \" \" + y\n        var ans = ListBuffer[Long]()\n\
    \        if (y < 0) {\n            x = number + remaining\n            y = 0\n\
    \            z = x + \" \" + y\n        }\n        ans += x\n        ans += y\n\
    \        ans.toList", "        // Your code goes here\n        // hint: you can\
    \ use the following functions/methods:\n        // +, -, *, /, %, scala.math.max,\
    \ scala.math.min\n        // List[Long](1l.toLong, 1l.toLong)\n        val a =\
    \ number + need\n        val b = scala.math.max(remaining - need, 0)\n       \
    \ List[Long](a, b)", "        val total_eaten = number + min(need, remaining)\n\
    \        val total_remaining = max(0, remaining - need)\n        List(total_eaten,\
    \ total_remaining)", "\t\t\n\t\tvar num = number\n\t\tvar rem = remaining\n\t\t\
    \n\t\tif(need <= rem){\n\t\t\tnum += need\n\t\t\trem -= need\n\t\t}\n\t\telse{\n\
    \t\t\tnum += rem\n\t\t\trem = 0\n\t\t}\n\t\t\n\t\tvar list : List[Long] = List(num,\
    \ rem)\n\t\tlist", "        val res = number + min(need, remaining)\n        List(res,\
    \ remaining - min(need, remaining))", '        List[Long](number + math.min(need,
    remaining), math.max(remaining - need, 0))', "        var eaten = number\n   \
    \     if (eaten > remaining) {\n            eaten = remaining\n        }\n   \
    \     var left = remaining - eaten\n        var remainEat = need - eaten\n   \
    \     if (remainEat > left) {\n            eaten += left\n            left = 0\n\
    \        } else {\n            eaten += remainEat\n            left -= remainEat\n\
    \        }\n        List(eaten, left)", "        val res = List(number + min(need,\
    \ remaining), max(0, remaining - need))\n        res", "        val eaten : Long\
    \ = number + remaining\n        if (eaten >= need) List(need, eaten - need)\n\
    \        else List(eaten, 0)", "        var total = number\n        for (n <-\
    \ number until (number + need)) {\n            if (remaining > 0) {\n        \
    \        total += 1\n                remaining -= 1\n            }\n        }\n\
    \        List(total, remaining)", "        // Write your code here\n        val\
    \ result : ListBuffer[Long] = ListBuffer[Long]()\n        if (remaining < need)\
    \ {\n            result += number + remaining\n            result += 0\n     \
    \   } else {\n            result += number + need\n            result += remaining\
    \ - need\n        }\n        result.toList", "        val ate = if (need > remaining)\
    \ (number + remaining) else (number + need)\n        val left = if (need > remaining)\
    \ 0 else (remaining - need)\n        List(ate, left)", '        List(number +
    min(need, remaining), max(0, remaining - need))', "        var k = 0l\n      \
    \  var l = 0l\n        var m = 0l\n        if (need >= remaining) {\n        \
    \    k = number + remaining\n            l = 0\n        } else {\n           \
    \ k = number + need\n            l = remaining - need\n        }\n        List(k,\
    \ l)", "        var result = new ListBuffer[Long]()\n        if (number < 0 ||\
    \ need < 0 || remaining < 0) {\n            throw new IllegalArgumentException()\n\
    \        }\n        if (number > 1000 || need > 1000 || remaining > 1000) {\n\
    \            throw new IllegalArgumentException()\n        }\n        result +=\
    \ (number + need)\n        result += (remaining - need)\n        if (result(1)\
    \ < 0) {\n            result(1) = 0\n        }\n        return result.toList",
  "        var result = ListBuffer.empty[Long]\n        result += number + min(need,\
    \ remaining)\n        result += max(remaining - need, 0)\n        result.toList",
  "        val _0 = 0l\n        val _1 = 1l\n        val _2 = 2l\n        val _3 =\
    \ 3l\n        val _4 = 4l\n        val _5 = 5l\n        val _6 = 6l\n        val\
    \ _7 = 7l\n        val _8 = 8l\n        val _9 = 9l\n        val _10 = 10l\n \
    \       val _11 = 11l\n        val _12 = 12l\n        val _13 = 13l\n        val\
    \ _14 = 14l\n        val _15 = 15l\n        val _16 = 16l\n        val _17 = 17l\n\
    \        val _18 = 18l\n        val _19 = 19l\n        val _20 = 20l\n       \
    \ val _21 = 21l\n        val _22 = 22l\n        val _23 = 23l\n        val _24\
    \ = 24l\n        val _25 = 25l\n        val _26 = 26l\n        val _27 = 27l\n\
    \        val _28 = 28l\n        val _29 = 29l\n        val _30 = 30l\n       \
    \ val _31 = 31l\n        val _32 = 32l\n        val _33 = 33l\n        val _34\
    \ = 34l\n        val _35 = 35l\n        val _36 = 36l\n        val _37 = 37l\n\
    \        val _38 = 38l\n        val _39 = 39l\n        val _40 = 40l\n       \
    \ val _41 = 41l\n        val _42 = 42l\n        val _43 = 43l\n        val _44\
    \ = 44l\n        val _45 = 45l\n        val _46 = 46l\n        val _47 = 47l\n\
    \        val _48 = 48l\n        val _49 = 49l\n        val _50 = 50l\n       \
    \ val _51 = 51l\n        val _52 = 52l\n        val _53 = 53l\n        val _54\
    \ = 54l\n        val _55 = 55l\n        val _56 = 56l\n        val _57 = 57l\n\
    \        val _58 = 58l\n        val _59 = 59l\n        val _60 = 60l\n       \
    \ val _61 = 61l\n        val _62 = 62l\n        val _63 = 63l", "        var total\
    \ = number + remaining\n        var left = total - need\n        var eaten = total\
    \ - left\n        if (total < need) {\n            List(total, 0)\n        } else\
    \ {\n            List(eaten, left)\n        }", '        return List(number +
    remaining - need.min(remaining), need.max(remaining) - need.min(remaining))',
  "        // your code here\n        null", "      if (number + need > remaining)\
    \ {\n        List(remaining, 0)\n      } else {\n        List(number + need, remaining\
    \ - (number + need))\n      }", "        // your code here\n        null", " \
    \       val x = number + min(need, remaining)\n        List(x, remaining - min(need,\
    \ remaining))", "        // fill here!\n        val list = List(number, need,\
    \ remaining)\n        list", "        // Write your code here\n        var list\
    \ = List[Long]()\n        val total = number + need\n        if (total <= remaining)\
    \ {\n            list = list :+ total\n            list = list :+ (remaining -\
    \ total)\n        } else {\n            list = list :+ remaining\n           \
    \ list = list :+ 0\n        }\n        list", "        // your code goes here\n\
    \        List(0l, 0l)", "        var result = ListBuffer[Long]()\n        result\
    \ += number + need\n        result += remaining - need\n        result.toList",
  '        List(min(number + remaining, number + need), max(0, number + remaining
    - need))', "        val total = number + min(need, remaining)\n        List(total,\
    \ remaining - min(need, remaining))", '        return List(number + min(need,
    remaining), remaining - min(need, remaining))', "        val m = number + remaining\n\
    \        var n = if (m > need) {\n            m - need\n        } else {\n   \
    \         0\n        }\n        List(m - n, n)"]
stop_tokens:
- "\n    }\n"
