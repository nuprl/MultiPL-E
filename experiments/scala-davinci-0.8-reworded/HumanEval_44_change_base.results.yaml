language: scala
name: HumanEval_44_change_base
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = \"\"\
    \n        var t = x\n        while (t > 0) {\n            s = (t % base).toString\
    \ + s\n            t /= base\n        }\n        return s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ \"0\"\n        else {\n            val ans = new StringBuilder()\n         \
    \   var rem = x\n            while (rem > 0) {\n                ans.append(rem\
    \ % base)\n                rem /= base\n            }\n            ans.reverse.toString\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      var q = x\n \
    \     var s = \"\"\n      while (q != 0) {\n        s = (q % base).toString +\
    \ s\n        q /= base\n      }\n      s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      // divide x by\
    \ base, and find the remainder\n      var (result, r) = (ListBuffer[Long](), x\
    \ % base)\n      var m = x / base\n      // r is the last remainder\n      result\
    \ += r\n      while (m > 0) {\n        r = m % base\n        m = m / base\n  \
    \      result += r\n      }\n      result.toList.reverse.mkString\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var x1 = x\n\
    \        var result = \"\"\n        while (x1 > 0) {\n            result = (x1\
    \ % base).toString + result\n            x1 /= base\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBase(x\
    \ : Long, base : Long, result : String) : String = {\n            if (x == 0)\
    \ result else changeBase(x / base, base, (x % base).toString + result)\n     \
    \   }\n        changeBase(x, base, \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ \"0\"\n        else {\n            val b = new StringBuilder\n            var\
    \ y = x\n            while (y > 0) {\n                b.append(y % base)\n   \
    \             y /= base\n            }\n            b.reverse.toString\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseRec(x\
    \ : Long, base : Long, res : List[Long]) : List[Long] = {\n            if (x <\
    \ base) return x :: res\n            val rem = x % base\n            changeBaseRec(x\
    \ / base, base, rem :: res)\n        }\n        changeBaseRec(x, base, Nil).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // change to\
    \ new base\n        val xs = new ListBuffer[Char]\n        var t = x\n       \
    \ while (t > 0) {\n            t % base match {\n                case i if i <\
    \ 10 => xs += ('0' + i.toInt)\n                case _ => xs += ('A' + (t % base\
    \ - 10).toInt)\n            }\n            t /= base\n        }\n        xs.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyx4q9wtp.scala:19:43\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e\
    [0m i \e[33mif\e[0m i < \e[31m10\e[0m => xs += (\e[31m'0'\e[0m + i.toInt)\n\e\
    [31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Found:    Int\n\
    \e[31m   |\e[0m                                           Required: Char\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyx4q9wtp.scala:20:33 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m _ => xs += (\e[31m'A'\e\
    [0m + (t % base - \e[31m10\e[0m).toInt)\n\e[31m\e[31m   |\e[0m               \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                        Found:    Int\n\e[31m   |\e[0m                      \
    \           Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def calculate(x\
    \ : Long, base : Long, s : String) : String = {\n            if (x == 0) s\n \
    \           else calculate(x / base, base, (x % base).toString + s)\n        }\n\
    \        calculate(x, base, \"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val digits\
    \ = ListBuffer[Int]()\n        var n = x\n        while (n > 0) {\n          \
    \  digits += (n % base).toInt\n            n /= base\n        }\n        return\
    \ digits.toList.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var y = x\n\
    \        var s = new Stack[Int]\n        while (y > 0) {\n            s.push((y\
    \ % base).toInt)\n            y /= base\n        }\n        var r = new StringBuilder\n\
    \        while (!s.isEmpty) {\n            r.append(s.pop.toString)\n        }\n\
    \        return r.toString\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var y = x\n\
    \        var s = \"\"\n        while (y > 0) {\n            s = (y % base).toString\
    \ + s\n            y /= base\n        }\n        s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var num = x\n\
    \        var res = new StringBuilder\n        while (num > 0) {\n            res.append(num\
    \ % base)\n            num /= base\n        }\n        res.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var remainder\
    \ = x\n        var result = \"\"\n        while (remainder > 0) {\n          \
    \  var digit = remainder % base\n            result = digit.toString + result\n\
    \            remainder = remainder / base\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      //println(x +\
    \ \" \" + base)\n      if (x == 0) return \"\"\n      else {\n        val remainder\
    \ = x % base\n        val quotient = x / base\n        if (remainder != 0) changeBase(quotient,\
    \ base) + remainder.toString\n        else changeBase(quotient, base) + \"0\"\n\
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ return \"0\"\n        var numList = List[Int]()\n        var num = x\n     \
    \   while (num > 0) {\n            numList = (num % base).toInt :: numList\n \
    \           num /= base\n        }\n        var result = \"\"\n        for (i\
    \ <- numList) result += i.toString\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def aux(x :\
    \ Long, base : Long, result : String) : String = {\n            if (x < base)\
    \ return x.toString + result\n            else {\n                aux(x / base,\
    \ base, (x % base).toString + result)\n            }\n        }\n        aux(x,\
    \ base, \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x <= 0)\
    \ {\n            return \"0\"\n        }\n        val result = new ListBuffer[Long]()\n\
    \        var y = x\n        while (y > 0) {\n            result.append(y % base)\n\
    \            y /= base\n        }\n        result.reverse.mkString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var l = ListBuffer[Int]()\n\
    \        while (x > 0) {\n            l += ((x % base).toInt)\n            x /=\
    \ base\n        }\n        l.reverse.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplsqgd17n.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            x /= base\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long -\
    \ did you mean x.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var res = new\
    \ ListBuffer[Char]()\n        var temp = x\n        while (temp > 0) {\n     \
    \       var digit = (temp % base).toInt\n            temp /= base\n          \
    \  res += ('0' + digit).toChar\n        }\n        res.reverse.mkString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBase(x\
    \ : Long, base : Long, ans : String) : String = {\n            if (x == 0) ans\n\
    \            else changeBase(x / base, base, (x % base).toString + ans)\n    \
    \    }\n        changeBase(x, base, \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var ret = new\
    \ StringBuilder\n        var k = x\n        while (k > 0) {\n            ret.append(k\
    \ % base)\n            k /= base\n        }\n        ret.reverse.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\
    \ {\n            return x.toString\n        }\n        else {\n            return\
    \ changeBase(x / base, base) + (x % base).toString\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseHelper(x\
    \ : Long, base : Long, result : List[Long]) : List[Long] = {\n            if (x\
    \ == 0) result\n            else changeBaseHelper(x / base, base, x % base ::\
    \ result)\n        }\n        changeBaseHelper(x, base, Nil).mkString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def g(x : Long,\
    \ base : Long, s : String) : String = if (x == 0) s else g(x / base, base, x %\
    \ base + s)\n        g(x, base, \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var n = x\n\
    \        var digits = List[Int]()\n        while (n > 0) {\n            digits\
    \ = (n % base).toInt :: digits\n            n /= base\n        }\n        digits.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val N = x.toString.size\n\
    \        var A = Array.fill(N)(0)\n        var rem = x\n        for (i <- 0 until\
    \ N) {\n            A(i) = (rem % base).toInt\n            rem /= base\n     \
    \   }\n        A.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpghv4m4lc.scala:24)\n\tat Problem.main(tmpghv4m4lc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var r = x\n\
    \        var result = new StringBuilder\n        while (r > 0) {\n           \
    \ result += ('0' + (r % base).toInt)\n            r /= base\n        }\n     \
    \   result.reverse.toString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxnwf334a.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            result += (\e[31m'0'\e\
    [0m + (r % base).toInt)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    Int\n\e[31m   |\e[0m    \
    \                   Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        return x.toString(base.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjru8ocky.scala:14:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mreturn\e[0m x.toString(base.toInt)\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \         too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e\
    [0m \e[35mAny\e[0m: (): String\n1 error found\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def solve(x\
    \ : Long, base : Long, ans : String) : String = {\n            val r = x % base\n\
    \            val q = x / base\n            if (q == 0) ans + r\n            else\
    \ solve(q, base, ans + r)\n        }\n        solve(x, base, \"\")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3xtnykka.scala:24)\n\tat Problem.main(tmp3xtnykka.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val result\
    \ = new StringBuilder()\n        var rem = x\n        while (rem > 0) {\n    \
    \        result.append(rem % base)\n            rem /= base\n        }\n     \
    \   result.reverse.toString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var res = \"\
    \"\n        var y = x\n        while (y > 0) {\n            res = (y % base).toString()\
    \ + res\n            y /= base\n        }\n        return res\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // decompose\
    \ x into numbers in base\n        var result = new StringBuilder\n        var\
    \ t = x\n        while (t > 0) {\n            result.append(t % base)\n      \
    \      t /= base\n        }\n        result.reverse.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\n\
    \            return \"0\"\n        var res = new StringBuffer\n        var t =\
    \ x\n        while (t > 0) {\n            res.append(t % base)\n            t\
    \ /= base\n        }\n        res.reverse.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def rec(x :\
    \ Long, base : Long, s : String) : String = {\n            if (x == 0) s\n   \
    \         else rec(x / base, base, (x % base).toString + s)\n        }\n     \
    \   rec(x, base, \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val r = new\
    \ StringBuilder\n        var d = x\n        var y = base\n        while (d > 0)\
    \ {\n            r.append((d % y).toString)\n            d /= y\n        }\n \
    \       r.reverse.toString\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\
    \ return x.toString()\n        changeBase(x / base, base) + (x % base).toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = \"\"\
    \n        var remainder = x\n        while (remainder != 0) {\n            val\
    \ d = remainder % base\n            remainder = remainder / base\n           \
    \ s = d.toString + s\n        }\n        s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        var y = x\n        while (y > 0) {\n            result = y %\
    \ base + result\n            y /= base\n        }\n        return result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var x2 = x\n\
    \        var s = \"\"\n        while (x2 > 0) {\n            s = (x2 % base).toString()\
    \ + s\n            x2 /= base\n        }\n        return s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var ans = \"\
    \";\n        var xCopy = x;\n        var baseCopy = base;\n        while (xCopy\
    \ > 0) {\n            var r = xCopy % baseCopy;\n            xCopy /= baseCopy;\n\
    \            ans = r.toString() + ans;\n        }\n        return ans;\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var a = new\
    \ StringBuilder()\n        var xx = x\n        var b = base\n        while (xx\
    \ > 0) {\n            a += (xx % b).toString\n            xx /= b\n        }\n\
    \        a.reverse.toString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwgintydl.scala:18:17\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            a += (xx % b).toString\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    String\n\e[31m   |\e[0m                 Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ return \"0\"\n        var a = x\n        var s = \"\"\n        while (a > 0)\
    \ {\n            s = (a % base).toString + s\n            a /= base\n        }\n\
    \        return s\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var valOfX\
    \ = x\n        var result = List[Int]()\n        while (valOfX > 0) {\n      \
    \      result ::= (valOfX % base).toInt\n            valOfX /= base\n        }\n\
    \        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        var x = x\n        while (x > 0) {\n            result = (x\
    \ % base).toString + result\n            x /= base\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5r4xkr4j.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val result\
    \ = new StringBuilder\n        var a = x\n        while (a > 0) {\n          \
    \  result.append(a % base)\n            a /= base\n        }\n        result.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def toString(x\
    \ : Long, y : Long) : String = {\n            if (x == 0) {\n                return\
    \ \"\"\n            }\n            else {\n                val n = x % y\n   \
    \             return toString(x / y, y) + n.toString\n            }\n        }\n\
    \        return toString(x, base)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val result\
    \ = new StringBuilder\n        var y = x\n        while (y != 0) {\n         \
    \   result.append(y % base)\n            y /= base\n        }\n        result.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val result\
    \ = new StringBuilder\n        var remaining = x\n        while (remaining > 0)\
    \ {\n            val digit = remaining % base\n            result.append(digit)\n\
    \            remaining = remaining / base\n        }\n        result.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var tmp = x\n\
    \        var ret = \"\"\n        while (tmp > 0) {\n            val r = tmp %\
    \ base\n            ret = r.toString + ret\n            tmp = tmp / base\n   \
    \     }\n        return ret\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\n\
    \            return x.toString\n        else {\n            val d = x / base\n\
    \            val r = x % base\n            return changeBase(d, base) + r.toString\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseInternal(x\
    \ : Long, base : Long, acc : List[Long]) : List[Long] = {\n            if (x ==\
    \ 0) acc else changeBaseInternal(x / base, base, (x % base) :: acc)\n        }\n\
    \        changeBaseInternal(x, base, Nil).reverse.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9popr75n.scala:21)\n\tat Problem.main(tmp9popr75n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = new StringBuffer\n        var x = x\n        while (x > 0) {\n           \
    \ result.append(x % base)\n            x /= base\n        }\n        result.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8lxo74z3.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var n = x\n\
    \        var b = base\n        var ans = List[Char]()\n        while (n != 0)\
    \ {\n            var d = n % b\n            ans = d.toChar :: ans\n          \
    \  n = n / b\n        }\n        ans.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe_44gyvr.scala:25)\n\tat Problem.main(tmpe_44gyvr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var m = new\
    \ scala.collection.mutable.Stack[Long]\n        var n = x\n        while (n !=\
    \ 0) {\n            m.push(n % base)\n            n /= base\n        }\n     \
    \   return m.map(_.toString).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var ans = \"\
    \"\n        var tmp = x\n        while (tmp != 0) {\n            ans = ((tmp %\
    \ base).toString) + ans\n            tmp /= base\n        }\n        return ans\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var ans = new\
    \ StringBuilder\n        var remain = x\n        while (remain > 0) {\n      \
    \      ans += (remain % base).toString\n            remain /= base\n        }\n\
    \        ans.reverse.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7g0eedu8.scala:17:19\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            ans += (remain %\
    \ base).toString\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    String\n\e[31m   |\e[0m     \
    \              Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def recur(x\
    \ : Long, base : Long, acc : List[Char]) : List[Char] = {\n            if (x ==\
    \ 0) acc\n            else recur(x / base, base, acc :+ ((x % base).toInt.toChar))\n\
    \        }\n        recur(x, base, Nil).reverse.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5h9b7if.scala:21)\n\tat Problem.main(tmpm5h9b7if.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      var y = x\n \
    \     var result = new StringBuilder\n      while (y != 0) {\n        result +=\
    \ (y % base).toInt.toString\n        y /= base\n      }\n      result.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiduqt_jt.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        result += (y % base).toInt.toString\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Found:    String\n\e[31m   |\e[0m                \
    \  Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x <= 0)\
    \ \"\"\n        else changeBase(x / base, base) + (x % base).toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val DIGITS\
    \ = (List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l,\
    \ 16l, 17l, 18l, 19l, 20l, 21l, 22l, 23l, 24l, 25l, 26l, 27l, 28l, 29l, 30l, 31l,\
    \ 32l, 33l, 34l, 35l))\n        //var result = \"0\"\n        var result = new\
    \ StringBuilder\n        var num = x\n        while (num > 0) {\n            val\
    \ mod = num % base\n            //result = DIGITS(mod.toInt) + result\n      \
    \      result.append(DIGITS(mod.toInt))\n            num = num / base\n      \
    \  }\n        result.toString.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def loop(x\
    \ : Long, acc : String) : String = {\n            if (x == 0) return acc\n   \
    \         else return loop(x / base, acc + (x % base).toString)\n        }\n \
    \       return loop(x, \"\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk6d1klgh.scala:22)\n\tat Problem.main(tmpk6d1klgh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var y = new\
    \ StringBuffer(\"\")\n        var curr = x\n        while (curr > 0) {\n     \
    \       var r = curr % base\n            curr = curr / base\n            y.append(r.toString)\n\
    \        }\n        return y.reverse.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        var x2 = x\n        while (x2 > 0) {\n            result = (x2\
    \ % base).toString + result\n            x2 /= base\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseIter(x\
    \ : Long, base : Long, result : String) : String = x match {\n            case\
    \ 0 => result\n            case _ => changeBaseIter(x / base, base, (x % base).toString\
    \ + result)\n        }\n        changeBaseIter(x, base, \"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var temp =\
    \ x\n        var result = \"\"\n        while (temp != 0) {\n            result\
    \ = (temp % base).toString + result\n            temp /= base\n        }\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        require(base\
    \ < 10 && base > 1 && x > 0)\n        var res = \"\"\n        var x_ = x\n   \
    \     while (x_ != 0) {\n            res = (x_ % base).toString + res\n      \
    \      x_ /= base\n        }\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var n = x\n\
    \        var s = \"\"\n        while (n > 0) {\n            s = (n % base).toString\
    \ + s\n            n /= base\n        }\n        s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      val n = x\n \
    \     if (n < base) return n.toString\n      return changeBase(n / base, base)\
    \ + (n % base).toString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseR(x\
    \ : Long, base : Long, acc : String) : String = {\n            if (x == 0) acc\
    \ else changeBaseR(x / base, base, (x % base).toString + acc)\n        }\n   \
    \     changeBaseR(x, base, \"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val rep = new\
    \ StringBuilder\n        var n = x\n        while (n > 0) {\n            rep.append((n\
    \ % base).toString)\n            n /= base\n        }\n        rep.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def recur(x\
    \ : Long, acc : String) : String = {\n            if (x == 0) return acc\n   \
    \         else recur(x / base, x % base + acc)\n        }\n        recur(x, \"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        var tmp = x\n        while (tmp > 0) {\n            var digit\
    \ = tmp % base\n            tmp /= base\n            result = result + digit.toString\n\
    \        }\n        return result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x <= 0)\
    \ \"0\"\n        else {\n            var x0 = x\n            var x1 = List[Int]()\n\
    \            while (x0 > 0) {\n                x1 ::= (x0 % base).toInt\n    \
    \            x0 /= base\n            }\n            x1.reverse.mkString\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp724o9rd.scala:27)\n\tat Problem.main(tmpp724o9rd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s : String\
    \ = \"\";\n        var (y, k) = (x, 0l);\n        while (y > 0) {\n          \
    \  s = ((y % base) + k).toString + s;\n            y = y / base;\n           \
    \ k = 0;\n        }\n        return s;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val n = x.toString.length\n\
    \        val dp = Array.fill[Long](n)(0)\n        val dpstr = Array.fill[String](n)(\"\
    \")\n        dp(0) = 1\n        dpstr(0) = \"1\"\n        val dp2 = Array.fill[Long](n)(0)\n\
    \        val dpstr2 = Array.fill[String](n)(\"\")\n        dp2(0) = base\n   \
    \     dpstr2(0) = base.toString\n        for (i <- 1 until n) {\n            dp(i)\
    \ = dp(i - 1) * base\n            dpstr(i) = dpstr(i - 1) + base.toString\n  \
    \          dp2(i) = dp2(i - 1) * base * base\n            dpstr2(i) = dpstr2(i\
    \ - 1) + base.toString + base.toString\n        }\n        //println(dp.mkString(\"\
    \ \"))\n        //println(dpstr.mkString(\" \"))\n        //println(dp2.mkString(\"\
    \ \"))\n        //println(dpstr2.mkString(\" \"))\n        var k = n - 1\n   \
    \     var result = \"\"\n        while (k >= 0) {\n            var j = k\n   \
    \         while (j >= 0 && dp(j) * 2 > x) j -= 1\n            //println(j)\n \
    \           if (j >= 0) {\n                val v = dp(j)\n                val\
    \ u = dpstr(j)\n                //println(v + \" \" + u)\n                x -=\
    \ v\n                result += u\n            }\n            j = k\n         \
    \   while (j >= 0 && dp2(j) * 2 > x) j -= 1\n            //println(j)\n      \
    \      if (j >= 0) {\n                val v = dp2(j)\n                val u =\
    \ dpstr2(j)\n                //println(v + \" \" + u)\n                x -= v\n\
    \                result += u\n            }\n            k -= 1\n        }\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjw7mofwm.scala:43:18 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                x -= v\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a member of\
    \ Long - did you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjw7mofwm.scala:53:18\
    \ ------------------------\e[0m\e[0m\n\e[31m53 |\e[0m                x -= v\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ -= is not a member of Long - did you mean x.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def loop(x\
    \ : Long, base : Long, s : String) : String = {\n            val (d, m) = (x /\
    \ base, x % base)\n            if (d == 0) {\n                m.toString + s\n\
    \            } else {\n                loop(d, base, m.toString + s)\n       \
    \     }\n        }\n        loop(x, base, \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var temp:Long\
    \ = x\n        var convertedList = ArrayBuffer[Long]()\n        while (temp !=\
    \ 0) {\n            convertedList += temp % base\n            temp /= base\n \
    \       }\n        return convertedList.reverse.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var n = x\n\
    \        var result = \"\"\n        while (n > 0) {\n            result = (n %\
    \ base).toString + result\n            n /= base\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s : String\
    \ = \"\"\n        while (x != 0) {\n            s = (x % base).toString + s\n\
    \            x /= base\n        }\n        return s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm_4ogwcb.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            x /= base\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long -\
    \ did you mean x.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = \"\"\
    \n        var y = x\n        while (y > 0) {\n            s = s + (y % base).toString\n\
    \            y = y / base\n        }\n        if (s == \"\") s = \"0\"\n     \
    \   return s.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def count(t\
    \ : Long, m : Int) : Int = {\n            if (t == 0) m else count(t / base, m\
    \ + 1)\n        }\n        def loop(t : Long, m : Array[Char]) : Array[Char] =\
    \ {\n            if (t == 0) m else {\n                m(m.length - count(t, 0))\
    \ = ((t % base) + '0').toChar\n                loop(t / base, m)\n           \
    \ }\n        }\n        if (x == 0) \"0\" else {\n            val str = new Array[Char](count(x,\
    \ 0))\n            loop(x, str).mkString\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3nqbkf9d.scala:30)\n\tat Problem.main(tmp3nqbkf9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def iter(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc else\
    \ iter(n / base, (n % base) :: acc)\n        }\n        iter(x, Nil).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def f(x : Long,\
    \ s : String) : String = {\n            if (x == 0) return s\n            f(x\
    \ / base, s + (x % base).toString)\n        }\n        f(x, \"\")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4dtz21no.scala:22)\n\tat Problem.main(tmp4dtz21no.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var output\
    \ = \"\"\n        var xC = x\n        while (xC > 0) {\n            output = (xC\
    \ % base).toString + output\n            xC /= base\n        }\n        output\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ return \"0\"\n        var x1 = x\n        var base1 = base\n        var ret\
    \ = new ListBuffer[Long]()\n        while (x1 != 0) {\n            ret += (x1\
    \ % base1)\n            x1 /= base1\n        }\n        return ret.toList.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def ch(x :\
    \ Long, b : Long) : String = {\n            val div = x / b\n            val mod\
    \ = x % b\n            (if (div == 0) \"\" else ch(div, b)) + mod.toString\n \
    \       }\n        ch(x, base)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var ret = \"\
    \"\n        var xx = x\n        while (xx > 0) {\n            ret = (xx % base).toString\
    \ + ret\n            xx /= base\n        }\n        return ret\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val result\
    \ = new StringBuilder\n        var t = x\n        while (t > 0) {\n          \
    \  val r = t % base\n            result.append(r)\n            t = t / base\n\
    \        }\n        result.reverse.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        var n = x\n        while (n > 0) {\n            result = (n\
    \ % base).toString + result\n            n /= base\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\n\
    \            x.toString\n        else\n            changeBase(x / base, base)\
    \ + (x % base).toString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\";\n        var num = x;\n        while (num != 0) {\n            result\
    \ = (num % base).toString + result;\n            num /= base;\n        }\n   \
    \     return result;\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009317
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var binary\
    \ = \"\"\n        var X = x\n        while (X > 0) {\n            binary = (X\
    \ % base).toString + binary\n            X /= base\n        }\n        return\
    \ binary\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009318
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val result\
    \ = new StringBuilder\n        var sx = x\n        while (sx != 0) {\n       \
    \     val d = sx % base\n            result.append(d)\n            sx /= base\n\
    \        }\n        result.reverse.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009320
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var n = x\n\
    \        var result = \"\"\n        while (n != 0) {\n            result = (n\
    \ % base).toString + result\n            n /= base\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009320
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        var n = x\n        while (n > 0) {\n            result = (n\
    \ % base).toString + result\n            n /= base\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var ans = \"\
    \"\n        var t = x\n        while (t > 0) {\n            ans = (t % base).toString\
    \ + ans\n            t /= base\n        }\n        ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009320
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseInner(x\
    \ : Long, base : Long, s : String) : String = {\n            if (x < base) {\n\
    \                (x.toString) + s\n            } else {\n                changeBaseInner(x\
    \ / base, base, (x % base).toString + s)\n            }\n        }\n        changeBaseInner(x,\
    \ base, \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009320
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var input =\
    \ x\n        var baseNums = new ListBuffer[Int]()\n        while (input > 0) {\n\
    \            baseNums += (input % base).toInt\n            input /= base\n   \
    \     }\n        baseNums.reverse.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var res = new\
    \ StringBuilder\n        var cur = x\n        while (cur > 0) {\n            res\
    \ += cur % base\n            cur /= base\n        }\n        res.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpat7rqpw3.scala:17:19\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            res += cur % base\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \              Found:    Long\n\e[31m   |\e[0m                   Required: Char\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009320
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseRecursive(x\
    \ : Long, base : Long, acc : List[Long]) : List[Long] = {\n            if (x ==\
    \ 0) acc\n            else changeBaseRecursive(x / base, base, (x % base) :: acc)\n\
    \        }\n        val arr = changeBaseRecursive(x, base, Nil)\n        arr.map(x\
    \ => x.toString).foldLeft(\"\")((b, a) => a + b)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2htbtwhx.scala:23)\n\tat Problem.main(tmp2htbtwhx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009321
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var xx = x\n\
    \        var r = List[Char]()\n        while (xx > 0) {\n            r = ((xx\
    \ % base).toString()(0)) :: r\n            xx /= base\n        }\n        return\
    \ r.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009321
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var n = x\n\
    \        var digits = List[Long]()\n        while (n > 0) {\n            digits\
    \ = digits.+:(n % base)\n            n /= base\n        }\n        var result\
    \ = \"\"\n        for (d <- digits) {\n            result += d.toString\n    \
    \    }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009321
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def helper(x\
    \ : Long, base : Long, acc : String) : String = x match {\n            case 0\
    \ => acc\n            case _ => {\n                val (q, r) = (x / base, x %\
    \ base)\n                helper(q, base, r.toString + acc)\n            }\n  \
    \      }\n        helper(x, base, \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        x.toString(base.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsprwdtj4.scala:14:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        x.toString(base.toInt)\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         too many arguments\
    \ for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e[0m:\
    \ (): String\n1 error found\n"
  stdout: ''
  timestamp: 1660009318
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = x\n\
    \        var res = \"\"\n        while (s > 0) {\n            res = s % base +\
    \ res\n            s /= base\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009320
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ {\n            return \"0\"\n        }\n        var result = new StringBuffer()\n\
    \        var tmp = x\n        while (tmp > 0) {\n            result.append(tmp\
    \ % base)\n            tmp /= base\n        }\n        return result.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009320
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val ans = new\
    \ StringBuilder\n        var cur = x\n        while (cur > 0) {\n            ans.append((cur\
    \ % base).toString)\n            cur /= base\n        }\n        ans.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        var t = x\n        while (t != 0) {\n            result = (t\
    \ % base).toString() + result\n            t /= base\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009321
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var r = x\n\
    \        var s = \"\"\n        while (r != 0) {\n            s = (r % base).toString\
    \ + s\n            r /= base\n        }\n        s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var y = x\n\
    \        var s = \"\"\n        while (y > 0) {\n            val (d, r) = y /%\
    \ base\n            s = r.toString + s\n            y = d\n        }\n       \
    \ s\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7odm4sbw.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m (d, r) = y /% base\n\e[31m\e\
    [31m   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0mvalue /% is not\
    \ a member of Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.long2bigDecimal\n\e[31m\
    \   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m  import math.Numeric.LongIsIntegral.mkNumericOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7odm4sbw.scala:17:17 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m (d, r) = y /% base\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp7odm4sbw.scala:17:20 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m (d, r) = y /% base\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s : String\
    \ = \"\"\n        var t : Long = x\n        while (t > 0) {\n            s = (t\
    \ % base).toString + s\n            t /= base\n        }\n        return s\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def char(d\
    \ : Long) : Char = {\n            if (d >= 0 && d <= 9)\n                (d +\
    \ '0').toChar\n            else\n                '\\0'\n        }\n        if\
    \ (x == 0)\n            return \"0\"\n        var r : StringBuilder = new StringBuilder\n\
    \        var n : Long = x\n        while (n > 0) {\n            r.append(char(n\
    \ % base))\n            n /= base\n        }\n        r.reverse.toString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpynkh2wcy.scala:18:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[31m'\\0'\e[0m\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m               octal escape literals\
    \ are unsupported: use \\u0000 instead\n1 error found\n"
  stdout: ''
  timestamp: 1660009319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val nums =\
    \ ListBuffer[Long]()\n        var x2 = x\n        while (x2 > 0) {\n         \
    \   nums += (x2 % base)\n            x2 /= base\n        }\n        nums.toList.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var (result,\
    \ current) = (\"\", x)\n        while (current != 0) {\n            val remainder\
    \ = current % base\n            current = current / base\n            result =\
    \ remainder.toString + result\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      def construct(x\
    \ : Long, base : Long, acc : List[Char]) : List[Char] = {\n        if (x == 0)\
    \ acc\n        else construct(x / base, base, (('0' + (x % base)).toChar) :: acc)\n\
    \      }\n      construct(x, base, Nil).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var num = x\n\
    \        var result = \"\"\n        while (num > 0) {\n            result = ((num\
    \ % base).toString) + result\n            num /= base\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var x = x\n\
    \        var result = \"\"\n        while (x > 0) {\n            val d = x % base\n\
    \            x = x / base\n            result = d.toString + result\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgjvk1wf0.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009324
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = \"\"\
    \n        var y = x\n        while (y > 0) {\n            s = (y % base).toString\
    \ + s\n            y /= base\n        }\n        return s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def recur(x\
    \ : Long, base : Long, res : String) : String = {\n            if (x == 0) res\n\
    \            else recur(x / base, base, (x % base).toString + res)\n        }\n\
    \        recur(x, base, \"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def loop(x\
    \ : Long, base : Long, r : String) : String = {\n            if (x == 0) r\n \
    \           else loop(x / base, base, (x % base).toString + r)\n        }\n  \
    \      loop(x, base, \"\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009328
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      var x1 = x\n\
    \      var result = \"\"\n      while (x1 > 0) {\n        result = (x1 % base).toString\
    \ + result\n        x1 /= base\n      }\n      return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = new\
    \ StringBuilder\n        var y = x\n        while (y != 0) {\n            s.append(y\
    \ % base)\n            y /= base\n        }\n        s.reverse.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var res = \"\
    \"\n        var a = x\n        while (a > 0) {\n            res = (a % base).toString\
    \ + res\n            a /= base\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def rec(x :\
    \ Long, result : List[Long]) : List[Long] = x match {\n            case 0 => result\n\
    \            case _ => rec(x / base, x % base :: result)\n        }\n        rec(x,\
    \ Nil).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var remainders\
    \ = List[Long]()\n        var curr = x\n        while (curr > 0) {\n         \
    \   remainders ::= curr % base\n            curr /= base\n        }\n        return\
    \ remainders.reverse.map(_.toString).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpunqnhoe8.scala:24)\n\tat Problem.main(tmpunqnhoe8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = new ListBuffer[Int]\n        var n = x\n        while (n > 0) {\n        \
    \    result += (n % base).toInt\n            n /= base\n        }\n        result.toList.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var str = \"\
    \";\n        var xx = x;\n        while (xx > 0) {\n            str = (xx % base).toString\
    \ + str;\n            xx /= base;\n        }\n        return str;\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ \"0\"\n        else {\n            var ans = \"\"\n            var x1 = x\n\
    \            while (x1 > 0) {\n                ans = (x1 % base).toString + ans\n\
    \                x1 /= base\n            }\n            ans\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseRec(x\
    \ : Long, rst : String) : String = {\n            if (x == 0) rst\n          \
    \  else changeBaseRec(x / base, (x % base).toString + rst)\n        }\n      \
    \  changeBaseRec(x, \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseHelper(x\
    \ : Long, base : Long, result : String) : String = {\n            if (x == 0)\
    \ result else {\n                val n = x % base\n                changeBaseHelper(x\
    \ / base, base, n.toString + result)\n            }\n        }\n        changeBaseHelper(x,\
    \ base, \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = new\
    \ StringBuilder\n        var y = x\n        var b = base\n        while (y > 0)\
    \ {\n            s.append((y % b).toInt)\n            y /= b\n        }\n    \
    \    s.reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseHelper(x\
    \ : Long, base : Long, output : String) : String = {\n            if (x == 0)\
    \ return output\n            else return changeBaseHelper(x / base, base, (x %\
    \ base).toString + output)\n        }\n        return changeBaseHelper(x, base,\
    \ \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var value =\
    \ x\n        var output = \"\"\n        while (value != 0) {\n            val\
    \ mod = value % base\n            output = String.valueOf(mod) + output\n    \
    \        value = value / base\n        }\n        output\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = new StringBuilder\n        var current = x\n        while (current > 0) {\n\
    \            var rem = current % base\n            result.append(rem)\n      \
    \      current /= base\n        }\n        result.reverse.toString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseIter(x\
    \ : Long, base : Long, acc : String) : String = {\n            x match {\n   \
    \             case x if (x == 0) => acc\n                case _ => {\n       \
    \             val d = x % base\n                    val n = x / base\n       \
    \             changeBaseIter(n, base, d.toString + acc)\n                }\n \
    \           }\n        }\n        changeBaseIter(x, base, \"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ return \"0\"\n        var ret = \"\"\n        var k = x\n        while (k >\
    \ 0) {\n            ret = (k % base).toString + ret\n            k /= base\n \
    \       }\n        return ret\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseIter(x\
    \ : Long, base : Long, ans : String) : String = {\n            if (x == 0) ans\
    \ else changeBaseIter(x / base, base, (x % base).toString + ans)\n        }\n\
    \        changeBaseIter(x, base, \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009332
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def str(b :\
    \ Long, acc : String) : String = {\n            if (b == 0) acc else str(b / base,\
    \ (b % base).toString + acc)\n        }\n        str(x, \"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009333
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var baseString\
    \ = \"\"\n        var baseCnt = 0\n        var n = x\n        while (n > 0) {\n\
    \            baseString = (n % base).toString + baseString\n            n /= base\n\
    \            baseCnt += 1\n        }\n        return baseString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val r = ArrayBuffer[Long]()\n\
    \        var n = x\n        while (n > 0) {\n            r += (n % base)\n   \
    \         n /= base\n        }\n        r.reverse.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ return \"0\"\n        var cur = x\n        var result = List[Long]()\n     \
    \   while (cur > 0) {\n            result = (cur % base) :: result\n         \
    \   cur /= base\n        }\n        return result.map(i => '0' + i).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjd0qjvz0.scala:24)\n\tat Problem.main(tmpjd0qjvz0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        for (i <- 0 until x.toString.length) {\n            result =\
    \ (x % base).toString + result\n            x /= base\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplss_5txr.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            x /= base\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long -\
    \ did you mean x.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\
    \ return (x.toString)\n        var result = \"\"\n        var y = x\n        while\
    \ (y > 0) {\n            result = (y % base).toString + result\n            y\
    \ /= base\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var l = ListBuffer[Long]()\n\
    \        var temp = x\n        while (temp != 0) {\n            l += temp % base\n\
    \            temp /= base\n        }\n        l.mkString(\"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvy59upvd.scala:24)\n\tat Problem.main(tmpvy59upvd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = \"\"\
    \n        var y = x\n        while (y > 0) {\n            s = (y % base).toString\
    \ + s\n            y /= base\n        }\n        return s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = \"\"\
    ;\n        var curr = x;\n        while (curr > 0) {\n            s = (curr %\
    \ base).toString + s;\n            curr /= base;\n        }\n        return s;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x < base)\
    \ {\n            (x.toString())\n        } else {\n            changeBase((x /\
    \ base), base) + (x % base).toString()\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ return \"0\"\n        val ret = new StringBuilder()\n        var x2 = x\n  \
    \      while (x2 > 0) {\n            ret.append(x2 % base)\n            x2 /=\
    \ base\n        }\n        ret.reverse.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var r = new\
    \ StringBuilder\n        var x = x\n        while (x > 0) {\n            r.append(x\
    \ % base)\n            x /= base\n        }\n        r.reverse.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl4rdd9gp.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val result\
    \ = new StringBuilder\n        var xx = x\n        while (xx > 0) {\n        \
    \    result.append(xx % base)\n            xx /= base\n        }\n        result.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      var x_ = x\n\
    \      var result = \"\"\n      while (x_ > 0) {\n        result = (x_ % base).toString\
    \ + result\n        x_ /= base\n      }\n      result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // >>> changeBase((8l),\
    \ (3l))\n        // (\"22\")\n        // >>> changeBase((8l), (2l))\n        //\
    \ (\"1000\")\n        // >>> changeBase((7l), (2l))\n        // (\"111\")\n  \
    \      var xs = List[Long]()\n        var r = x\n        while (r > 0) {\n   \
    \         xs = (r % base) :: xs\n            r = r / base\n        }\n       \
    \ return xs.map(_.toString).reduce(_+_)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      // x is a number\
    \ in the default base.\n      // base is the target base.\n      val digits =\
    \ new scala.collection.mutable.StringBuilder()\n      // current x value, decreasing\
    \ by the change of the base.\n      var currX = x\n      var currBase = base\n\
    \      while (currX > 0) {\n        digits.append((currX % currBase).toString)\n\
    \        currX /= currBase\n      }\n      digits.reverse.toString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ return \"0\"\n        var n = x\n        var r = \"\"\n        while (n > 0)\
    \ {\n            val k = n % base\n            r = k.toString + r\n          \
    \  n = n / base\n        }\n        return r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var a = x\n\
    \        var answer = \"\"\n        while (a > 0) {\n            answer = (a %\
    \ base).toString + answer\n            a /= base\n        }\n        answer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = List[Long]()\n        var xCopy = x\n        while (xCopy != 0) {\n      \
    \      result = (xCopy % base) :: result\n            xCopy /= base\n        }\n\
    \        result.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8g52mk2o.scala:24)\n\tat Problem.main(tmp8g52mk2o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\n\
    \            return \"0\"\n        var res = \"\"\n        var xx = x\n      \
    \  while (xx > 0) {\n            res = (xx % base).toString + res\n          \
    \  xx /= base\n        }\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        // 6666666\n\
    \        var remainder = x\n        var result = \"\"\n        while (remainder\
    \ > 0) {\n            val division = remainder / base\n            val remainder\
    \ = remainder % base\n            result = remainder.toString + result\n     \
    \       remainder = division\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfp5y3d8h.scala:19:28 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mremainder\e[0m = remainder\
    \ % base\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e\
    [0m                            Recursive \e[33mvalue\e[0m \e[35mremainder\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpfp5y3d8h.scala:21:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            remainder\
    \ = division\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val remainder\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var r = x\n\
    \        var rb = new StringBuilder()\n        var i = 0\n        while (r !=\
    \ 0) {\n            rb.append(r % base)\n            r /= base\n            i\
    \ += 1\n        }\n        rb.reverse.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = new StringBuilder();\n        var x_ = x;\n        while (x_ > 0) {\n    \
    \        result.append(x_ % base);\n            x_ /= base;\n        }\n     \
    \   result.reverse.toString;\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var a = x\n\
    \        var b = base\n        val sb = new StringBuilder()\n        while (a\
    \ > 0) {\n            sb.append(a % b)\n            a /= b\n        }\n      \
    \  sb.reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var dec = x\n\
    \        var b = base\n        var res = \"\"\n        while (dec != 0) {\n  \
    \          res = (dec % b).toString + res\n            dec /= b\n        }\n \
    \       return res\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009343
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var x2 = x\n\
    \        var v = List[Long]()\n        while (x2 != 0) {\n            val r =\
    \ x2 % base\n            v = r :: v\n            x2 = x2 / base\n        }\n \
    \       v.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s : String\
    \ = \"\"\n        var t : Long = x\n        while (t > 0) {\n            s = (t\
    \ % base).toString + s\n            t /= base\n        }\n        s\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var s = \"\"\
    \n        var n = x\n        while (n > 0) {\n            s = (n % base).toString\
    \ + s\n            n /= base\n        }\n        return s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var xTemp =\
    \ x\n        var remainder = xTemp % base\n        var quotient = xTemp / base\n\
    \        var result = remainder.toString\n        while (quotient > 0) {\n   \
    \         xTemp = quotient\n            remainder = xTemp % base\n           \
    \ quotient = xTemp / base\n            result = remainder.toString + result\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val stack =\
    \ new Stack[Long]()\n        var y = x\n        while (y != 0) {\n           \
    \ stack.push(y % base)\n            y /= base\n        }\n        stack.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ return \"0\"\n        else {\n            var xc = x\n            var s = \"\
    \"\n            while (xc > 0) {\n                s = s + xc % base\n        \
    \        xc = xc / base\n            }\n            s.reverse\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var a = new\
    \ StringBuilder(\"\")\n        var b = x\n        while (b > 0) {\n          \
    \  a += (b % base).toString\n            b /= base\n        }\n        a.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvrqra0uq.scala:17:17\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            a += (b % base).toString\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Found:    String\n\e[31m   |\e[0m                 Required:\
    \ Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val ans = new\
    \ StringBuilder()\n        var xx = x\n        while (xx > 0) {\n            ans.append(xx\
    \ % base)\n            xx /= base\n        }\n        ans.reverse.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ {\n            \"0\"\n        } else {\n            val converted = new scala.collection.mutable.Stack[Char]\n\
    \            var rest = x\n            while (rest > 0) {\n                val\
    \ quotient = rest / base\n                val remainder = rest % base\n      \
    \          converted.push(remainder.toString.head)\n                rest = quotient\n\
    \            }\n            converted.mkString\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var a = List[Long]()\n\
    \        var b = x\n        while (b > 0) {\n            a = (b % base) :: a\n\
    \            b /= base\n        }\n        if (a.length == 0) return \"0\"\n \
    \       a.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn4v7rdjr.scala:25)\n\tat Problem.main(tmpn4v7rdjr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var rx = x\n\
    \        var result = \"\"\n        while (rx > 0) {\n            result = (rx\
    \ % base).toString + result\n            rx /= base\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var sum = 0l\n\
    \        var rev = new StringBuilder\n        while (x > 0) {\n            rev.append(x\
    \ % base)\n            x /= base\n        }\n        return rev.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsld9dsxy.scala:18:14 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            x /= base\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long -\
    \ did you mean x.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseIter(x\
    \ : Long, acc : String) : String = x match {\n            case _ if (x == 0) =>\
    \ acc\n            case _ => changeBaseIter(x / base, (x % base).toString + acc)\n\
    \        }\n        if (x == 0) \"0\" else changeBaseIter(x, \"\")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val stack =\
    \ Stack[Char]()\n        var y = x\n        while (y != 0) {\n            val\
    \ z = y % base\n            stack.push(z.toString.head)\n            y = y / base\n\
    \        }\n        stack.mkString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        var num = x\n        while (num != 0) {\n            result\
    \ = num % base + result\n            num /= base\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val builder\
    \ = new StringBuilder()\n        var x = x\n        while (x > 0) {\n        \
    \    builder.append(x % base)\n            x /= base\n        }\n        builder.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppd9nmf8x.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        //val baseChar\
    \ = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n        //val baseChar = \"0123456789\"\
    \n        def changeBase(x : Long, base : Long, result : String) : String = {\n\
    \            if (x == 0) result\n            else {\n                //val digit\
    \ = baseChar(math.abs(x % base).toInt)\n                val digit = (math.abs(x\
    \ % base)).toString\n                changeBase(x / base, base, digit + result)\n\
    \            }\n        }\n        changeBase(x, base, \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ {\n            return \"0\"\n        }\n        var result = \"\"\n        var\
    \ rest = x\n        while (rest > 0) {\n            result = ((rest % base) +\
    \ '0').toChar + result\n            rest /= base\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseRec(x\
    \ : Long, base : Long, s : String) : String = {\n            if (x == 0) return\
    \ s\n            val d = x % base\n            return changeBaseRec(x / base,\
    \ base, d.toString + s)\n        }\n        return changeBaseRec(x, base, \"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBase(x\
    \ : Long, base : Long, y : String) : String = {\n            if (x == 0) y\n \
    \           else changeBase(x / base, base, (x % base).toString + y)\n       \
    \ }\n        changeBase(x, base, \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var tmp = x\n\
    \        var ret = \"\"\n        while (tmp > 0) {\n            ret = (tmp % base).toString()\
    \ + ret\n            tmp /= base\n        }\n        ret\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        val result\
    \ = ArrayBuffer[Char]()\n        var x2 = x\n        while (x2 != 0) {\n     \
    \       val digit = (x2 % base).toString.charAt(0)\n            result.append(digit)\n\
    \            x2 /= base\n        }\n        result.reverse.mkString\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        x.toString(base.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsprwdtj4.scala:14:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        x.toString(base.toInt)\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         too many arguments\
    \ for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e[0m:\
    \ (): String\n1 error found\n"
  stdout: ''
  timestamp: 1660009318
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBaseRecursive(input\
    \ : Long, base : Long, result : List[Long]) : List[Long] = {\n            if (input\
    \ == 0) result\n            else changeBaseRecursive(input / base, base, (input\
    \ % base) :: result)\n        }\n        changeBaseRecursive(x, base, Nil).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6ouj5uha.scala:22)\n\tat Problem.main(tmp6ouj5uha.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var value =\
    \ x\n        var lst = List[Long]()\n        var ans = \"\"\n        while (value\
    \ != 0) {\n            lst = (value % base) :: lst\n            value /= base\n\
    \        }\n        for (digit <- lst) ans += digit.toString\n        ans\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ return \"\"\n        changeBase(x / base, base) + x % base\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def go(x :\
    \ Long, result : String) : String = {\n            if (x == 0) result\n      \
    \      else go(x / base, result + (x % base).toString)\n        }\n        go(x,\
    \ \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1yudqk0c.scala:22)\n\tat Problem.main(tmp1yudqk0c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = \"\"\n        var div = x\n        while (div > 0) {\n            result =\
    \ (div % base).toString + result\n            div /= base\n        }\n       \
    \ return result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def changeBase_sub(x\
    \ : Long, base : Long, output : String) : String = {\n            if (x == 0)\
    \ return output\n            changeBase_sub(x / base, base, (x % base).toString\
    \ + output)\n        }\n        changeBase_sub(x, base, \"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n      val z = ArrayBuffer[Long]()\n\
    \      var y = x\n      while (y > 0) {\n        z += (y % base)\n        y /=\
    \ base\n      }\n      z.reverse.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var t = x\n\
    \        var result = \"\"\n        while (t != 0) {\n            result = (t\
    \ % base).toString + result\n            t /= base\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
    \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\"\
    )));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
    \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
    )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
    \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
    \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
    \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
    \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def loop(y\
    \ : Long, ans : String) : String = {\n            if (y == 0) ans\n          \
    \  else loop(y / base, y % base + ans)\n        }\n        loop(x, \"\")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var result\
    \ = new StringBuffer()\n        var temp = x\n        while (temp > 0) {\n   \
    \         var digit = temp % base\n            result.append(digit)\n        \
    \    temp = temp / base\n        }\n        result.reverse.toString\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"\
    22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        def recur(x\
    \ : Long, base : Long, result : List[Int]) : List[Int] = {\n            if (x\
    \ == 0) result\n            else recur(x / base, base, (x % base).toInt :: result)\n\
    \        }\n        recur(x, base, Nil).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l),\
    \ (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\"\
    )));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l),\
    \ (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\"\
    )));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l),\
    \ (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n\
    \    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l),\
    \ (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        var c = x\n\
    \        var r = \"\"\n        while (c > 0) {\n            r = ((c % base).toString)\
    \ + r\n            c = c / base\n        }\n        r\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Change numerical base of input number x to base.\n    // return string\
    \ representation after the conversion.\n    // base numbers are less than 10.\n\
    \    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
    \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\"\
    )\n    def changeBase(x : Long, base : Long) : String = {\n        if (x == 0)\
    \ return \"0\"\n        else {\n            var result = new StringBuffer(\"\"\
    )\n            var xcopy = x\n            while (xcopy > 0) {\n              \
    \  result.append(xcopy % base)\n                xcopy /= base\n            }\n\
    \            return result.reverse.toString\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n \
    \   assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l),\
    \ (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"\
    10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l),\
    \ (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n\
    \    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l),\
    \ (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n\
    \    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l),\
    \ (8l)).equals((\"7\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009354
