language: scala
name: HumanEval_74_total_match
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your answer here\n     \
    \   null\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.totalMatch(scala.collection.immutable.List,\
    \ scala.collection.immutable.List)\" is null\n\tat Problem$.main(tmpfcgu73xl.scala:23)\n\
    \tat Problem.main(tmpfcgu73xl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Print out list\n       \
    \ def printList(lst : List[String]) : Unit = {\n            println(\"(List[String](\"\
    \ + lst.mkString(\", \") + \"))\")\n        }\n        val total1 = lst1.map(_.length).sum\n\
    \        val total2 = lst2.map(_.length).sum\n        if (total1 < total2) printList(lst1)\n\
    \        else if (total1 > total2) printList(lst2)\n        else printList(lst1)\n\
    \        lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmhgs_5tr.scala:32)\n\tat Problem.main(tmpmhgs_5tr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: '(List[String]())

    (List[String](hi, hi))

    '
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0 && lst2.length\
    \ == 0) {\n            return lst1\n        }\n        if (lst1.length == 0 &&\
    \ lst2.length != 0) {\n            return lst2\n        }\n        if (lst1.length\
    \ != 0 && lst2.length == 0) {\n            return lst1\n        }\n        var\
    \ sum1 = 0\n        for (l <- lst1) {\n            sum1 += l.length\n        }\n\
    \        var sum2 = 0\n        for (l <- lst2) {\n            sum2 += l.length\n\
    \        }\n        if (sum1 == sum2) {\n            return lst1\n        }\n\
    \        if (sum1 < sum2) {\n            return lst1\n        }\n        return\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpacjqffkv.scala:52)\n\tat Problem.main(tmpacjqffkv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsaon6dr5.scala:29)\n\tat Problem.main(tmpsaon6dr5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def recur(lst1 : List[String],\
    \ lst2 : List[String], total1 : Int, total2 : Int) : List[String] = {\n      \
    \      if (lst1.isEmpty && lst2.isEmpty) return Nil\n            else if (lst1.isEmpty)\
    \ return recur(lst1, lst2.tail, total1, total2 + lst2.head.length)\n         \
    \   else if (lst2.isEmpty) return recur(lst1.tail, lst2, total1 + lst1.head.length,\
    \ total2)\n            else {\n                val total1_next = total1 + lst1.head.length\n\
    \                val total2_next = total2 + lst2.head.length\n               \
    \ if (total1_next < total2_next) return lst1\n                else if (total1_next\
    \ > total2_next) return lst2\n                else return lst1\n            }\n\
    \        }\n        return recur(lst1, lst2, 0, 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzm7nimh5.scala:35)\n\tat Problem.main(tmpzm7nimh5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst1Len = 0\n        var\
    \ lst2Len = 0\n        for (i <- lst1) lst1Len += i.length\n        for (i <-\
    \ lst2) lst2Len += i.length\n        if (lst1Len <= lst2Len) lst1 else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val total1 = lst1.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        val total2 = lst2.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        if (total1 == total2) lst1\n        else if (total1\
    \ < total2) lst1\n        else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var chars1 = 0\n        var\
    \ chars2 = 0\n        for (str <- lst1) chars1 += str.length\n        for (str\
    \ <- lst2) chars2 += str.length\n        if (chars1 <= chars2) lst1 else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `List[String]()` is a placeholder for a correct return type\n    \
    \    var sumLst1 = 0\n        var sumLst2 = 0\n        for (i <- lst1) {\n   \
    \         sumLst1 += i.length\n        }\n        for (i <- lst2) {\n        \
    \    sumLst2 += i.length\n        }\n        if (sumLst1 < sumLst2)\n        \
    \    lst1\n        else if (sumLst1 > sumLst2)\n            lst2\n        else\n\
    \            lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var num1 = 0\n        var num2\
    \ = 0\n        for (i <- lst1) {\n            num1 += i.length\n        }\n  \
    \      for (i <- lst2) {\n            num2 += i.length\n        }\n        if\
    \ (num1 <= num2) lst1 else lst2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var total1 = 0\n        var\
    \ total2 = 0\n        for (i <- lst1) total1 += i.length\n        for (i <- lst2)\
    \ total2 += i.length\n        if (total1 < total2) lst1\n        else if (total1\
    \ > total2) lst2\n        else lst1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def total(lst : List[String])\
    \ : Int = lst match {\n            case Nil => 0\n            case x :: xs =>\
    \ x.length + total(xs)\n        }\n        if (total(lst1) < total(lst2)) lst1\
    \ else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptukwbjuo.scala:32)\n\tat Problem.main(tmptukwbjuo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == 0 && lst2.size\
    \ == 0) {\n            return List[String]()\n        }\n        var total1 =\
    \ 0\n        var total2 = 0\n        for (s <- lst1) {\n            total1 +=\
    \ s.size\n        }\n        for (s <- lst2) {\n            total2 += s.size\n\
    \        }\n        if (total1 < total2) {\n            return lst1\n        }\n\
    \        else if (total1 > total2) {\n            return lst2\n        }\n   \
    \     else {\n            return lst1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Write your code here\n \
    \       if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var cnt1 = 0\n        var cnt2 = 0\n        lst1.foreach(a =>\
    \ cnt1 += a.length)\n        lst2.foreach(a => cnt2 += a.length)\n        if (cnt1\
    \ == cnt2) return lst1\n        if (cnt1 < cnt2) return lst1\n        return lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp386gxm0w.scala:38)\n\tat Problem.main(tmp386gxm0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1` contains strings\n        // `lst2` contains strings\n    \
    \    // if lst1 has more chars, return lst1\n        // if lst2 has more chars,\
    \ return lst2\n        // otherwise, return lst1\n        var sum1 = 0\n     \
    \   var sum2 = 0\n        for (i <- lst1) {\n            sum1 += i.length\n  \
    \      }\n        for (i <- lst2) {\n            sum2 += i.length\n        }\n\
    \        if (sum1 > sum2) {\n            return lst1\n        } else if (sum1\
    \ < sum2) {\n            return lst2\n        } else {\n            return lst1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx62wsvrz.scala:43)\n\tat Problem.main(tmpx62wsvrz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.isEmpty && lst2.isEmpty)\
    \ return lst1\n        val sum1 = lst1.foldLeft(0)((x, y) => x + y.length)\n \
    \       val sum2 = lst2.foldLeft(0)((x, y) => x + y.length)\n        if (sum1\
    \ <= sum2) lst1 else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings.\n        // `lst1` has less\
    \ or same number of characters as `lst2`.\n        // if the total number of characters\
    \ of `lst1` is less than `lst2`,\n        // return `lst1`, else return `lst2`.\n\
    \        // if both lists have the same number of characters, return `lst1`.\n\
    \        def total(lst : List[String]) : Int = {\n            lst.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        }\n        def isLessOrEqual(lst1 : List[String],\
    \ lst2 : List[String]) : Boolean = {\n            if (total(lst1) <= total(lst2))\
    \ true else false\n        }\n        if (isLessOrEqual(lst1, lst2)) lst1 else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var c1 = 0\n        for (i\
    \ <- lst1) c1 += i.length\n        var c2 = 0\n        for (i <- lst2) c2 += i.length\n\
    \        if (c1 == c2) lst1\n        else if (c1 < c2) lst1\n        else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \                // Computing the total number of chars in all the strings of\
    \ a list\n                def totalChars (lst : List[String]) : Int = {\n    \
    \                    if (lst.isEmpty) 0\n                        else lst.head.length\
    \ + totalChars(lst.tail)\n                }\n                if (totalChars(lst1)\
    \ < totalChars(lst2)) lst1\n                else if (totalChars(lst1) > totalChars(lst2))\
    \ lst2\n                else lst1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        return if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpio6m6277.scala:28)\n\tat Problem.main(tmpio6m6277.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \                // method 1\n        // if (lst1.map(x => x.length).sum == lst2.map(x\
    \ => x.length).sum) lst1\n        // else if (lst1.map(x => x.length).sum < lst2.map(x\
    \ => x.length).sum) lst1\n        // else lst2\n        \n        // method 2\n\
    \        if (lst1.map(x => x.length).sum < lst2.map(x => x.length).sum) lst1\n\
    \        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmputnwrx7u.scala:36)\n\tat Problem.main(tmputnwrx7u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var count = 0\n        for\
    \ (str <- lst1) {\n            count += str.length\n        }\n        var count2\
    \ = 0\n        for (str <- lst2) {\n            count2 += str.length\n       \
    \ }\n        if (count <= count2) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0 && lst2.length\
    \ == 0)\n            return lst1\n        var sum1 = 0\n        var sum2 = 0\n\
    \        lst1.foreach(sum1 += _.length)\n        lst2.foreach(sum2 += _.length)\n\
    \        if (sum1 <= sum2)\n            return lst1\n        return lst2\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // You need to add the proper\
    \ return type\n        // You need to add the proper return type\n        def\
    \ totalMatch(lst1 : List[String], lst2 : List[String], count1 : Int, count2 :\
    \ Int) : List[String] = {\n            if (lst1.isEmpty) {\n                if\
    \ (count1 > count2) {\n                    return lst2\n                } else\
    \ {\n                    return lst1\n                }\n            } else {\n\
    \                totalMatch(lst1.tail, lst2, count1 + lst1.head.length, count2)\n\
    \            }\n        }\n        if (lst1.isEmpty) {\n            return lst2\n\
    \        } else {\n            if (lst2.isEmpty) {\n                return lst1\n\
    \            } else {\n                return totalMatch(lst1, lst2, 0, 0)\n \
    \           }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_xnmlaap.scala:45)\n\tat Problem.main(tmp_xnmlaap.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        val sum1 = lst1.foldLeft(0)((a,\
    \ b) => a + b.length)\n        val sum2 = lst2.foldLeft(0)((a, b) => a + b.length)\n\
    \        if (sum1 < sum2) return lst1\n        return lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjcom5qqe.scala:33)\n\tat Problem.main(tmpjcom5qqe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Total = lst1.foldLeft(0)((a,\
    \ b) => a + b.length)\n        val lst2Total = lst2.foldLeft(0)((a, b) => a +\
    \ b.length)\n        if (lst1Total < lst2Total) lst1 else lst2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsr6j9y59.scala:30)\n\tat Problem.main(tmpsr6j9y59.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `import scala.math._` may be usefull\n        // Do not use any builtin\
    \ List functions.\n        var charCountLst1 = 0\n        var charCountLst2 =\
    \ 0\n        for (x <- lst1) {\n            charCountLst1 += x.length\n      \
    \  }\n        for (x <- lst2) {\n            charCountLst2 += x.length\n     \
    \   }\n        if (charCountLst1 == charCountLst2) lst1\n        else if (charCountLst1\
    \ < charCountLst2) lst1\n        else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var t1 = 0\n      \
    \  var t2 = 0\n        for (str <- lst1) {\n            t1 += str.length\n   \
    \     }\n        for (str <- lst2) {\n            t2 += str.length\n        }\n\
    \        if (t1 < t2) return lst1\n        else return lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2gyo9bba.scala:39)\n\tat Problem.main(tmp2gyo9bba.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.isEmpty && lst2.isEmpty)\
    \ return lst1\n        else if (lst1.isEmpty) return lst2\n        else if (lst2.isEmpty)\
    \ return lst1\n        var totalCharsOfList1 = 0\n        var totalCharsOfList2\
    \ = 0\n        for (word <- lst1) totalCharsOfList1 += word.length\n        for\
    \ (word <- lst2) totalCharsOfList2 += word.length\n        if (totalCharsOfList1\
    \ == totalCharsOfList2) return lst1\n        else if (totalCharsOfList1 < totalCharsOfList2)\
    \ return lst1\n        else return lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplrs4h2gm.scala:38)\n\tat Problem.main(tmplrs4h2gm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def helper(lst1 : List[String],\
    \ lst2 : List[String], s1 : Int, s2 : Int) : Boolean = lst1 match {\n        \
    \    case Nil => s1 <= s2\n            case x :: xs => helper(xs, lst2, s1 + x.length,\
    \ s2)\n        }\n        if (helper(lst1, lst2, 0, 0)) lst1 else lst2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbopr5xe1.scala:28)\n\tat Problem.main(tmpbopr5xe1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsaon6dr5.scala:29)\n\tat Problem.main(tmpsaon6dr5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val totalChars1 = lst1.foldLeft(0)((total,\
    \ str) => total + str.length)\n        val totalChars2 = lst2.foldLeft(0)((total,\
    \ str) => total + str.length)\n        if (totalChars1 == totalChars2) lst1\n\
    \        else if (totalChars1 < totalChars2) lst1\n        else lst2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst1total = 0\n       \
    \ var lst2total = 0\n        for (x <- lst1) {\n            lst1total += x.length\n\
    \        }\n        for (x <- lst2) {\n            lst2total += x.length\n   \
    \     }\n        if (lst1total < lst2total) lst1 else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp95w2w5u9.scala:36)\n\tat Problem.main(tmp95w2w5u9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // We can't just use List.length\
    \ because the empty list is a singleton object,\n        // which is always equal\
    \ to itself.  It has length 0.\n        // So we also need to check for empty\
    \ list.\n        def totalChars(lst : List[String]) : Int = {\n            if\
    \ (lst.isEmpty) 0\n            else lst.map(_.length).sum\n        }\n       \
    \ if (totalChars(lst1) <= totalChars(lst2)) lst1\n        else lst2\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your Code Here\n       \
    \ ???\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.totalMatch(tmpmb66dx4u.scala:20)\n\tat Problem$.main(tmpmb66dx4u.scala:23)\n\
    \tat Problem.main(tmpmb66dx4u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // this function will check\
    \ if the string is made of a single char\n        def isSingle(str : String) :\
    \ Boolean = (str.length == 1)\n        // this function will add an int to a list\
    \ of integers\n        def addToLst(lst : List[Int], elem : Int) : List[Int] =\
    \ {\n            if (lst.isEmpty) List(elem)\n            else lst.head + elem\
    \ :: addToLst(lst.tail, elem)\n        }\n        // this function will add a\
    \ list of integers to another list of integers\n        def addLstToLst(lst1 :\
    \ List[Int], lst2 : List[Int]) : List[Int] = {\n            if (lst1.isEmpty)\
    \ lst2\n            else if (lst2.isEmpty) lst1\n            else addToLst(lst1,\
    \ lst2.head) ::: addLstToLst(lst1, lst2.tail)\n        }\n        // this function\
    \ will return the number of chars in each string of a list\n        def countNums(lst\
    \ : List[String]) : List[Int] = {\n            if (lst.isEmpty) List()\n     \
    \       else if (isSingle(lst.head)) addToLst(countNums(lst.tail), 1)\n      \
    \      else addToLst(countNums(lst.tail), lst.head.length)\n        }\n      \
    \  // this function will add a list of numbers together\n        def totalNums(lst\
    \ : List[Int]) : Int = {\n            if (lst.isEmpty) 0\n            else lst.head\
    \ + totalNums(lst.tail)\n        }\n        // this function will return the total\
    \ of each individual element\n        def totalInd(lst : List[Int]) : List[Int]\
    \ = {\n            if (lst.isEmpty) List()\n            else totalNums(lst.head)\
    \ :: totalInd(lst.tail)\n        }\n        // this function will return the sum\
    \ of a list of numbers\n        def total(lst : List[Int]) : Int = {\n       \
    \     if (lst.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbwyd_p98.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbwyd_p98.scala:65:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpbwyd_p98.scala:46:31 --------------------\e[0m\e[0m\n\
    \e[31m46 |\e[0m            \e[33melse\e[0m totalNums(lst.head) :: totalInd(lst.tail)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Found:    Int\n\e[31m   |\e[0m                   \
    \        Required: List[Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbwyd_p98.scala:64:1 ---------------------\e[0m\e[0m\n\e[31m64\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpbwyd_p98.scala:52:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m52 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `totalMatch` should be recursive\n        if(lst1.length == 0 && lst2.length\
    \ == 0)\n        {\n            return lst1\n        }\n        if(lst1.map(_.length).sum\
    \ == lst2.map(_.length).sum)\n        {\n            return lst1\n        }\n\
    \        if(lst1.map(_.length).sum > lst2.map(_.length).sum)\n        {\n    \
    \        return lst2\n        }\n        else\n        {\n            return lst1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1` and `lst2` have type List[String]\n        // `totalMatch`\
    \ has type List[String]\n        def countChars(list : List[String]) : Int = {\n\
    \            var total : Int = 0\n            for (i <- list) {\n            \
    \    total += i.length\n            }\n            total\n        }\n        val\
    \ count1 = countChars(lst1)\n        val count2 = countChars(lst2)\n        if\
    \ (count1 > count2) lst2\n        else if (count1 < count2) lst1\n        else\
    \ lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1` will always be either shorter or equal length to `lst2`\n \
    \       var counter1 = 0\n        var counter2 = 0\n        for (i <- lst1) {\n\
    \            counter1 += i.length\n        }\n        for (i <- lst2) {\n    \
    \        counter2 += i.length\n        }\n        if (counter1 == counter2) {\n\
    \            return lst1\n        } else if (counter1 < counter2) {\n        \
    \    return lst1\n        } else {\n            return lst2\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill up this function body\n\
    \        // using pattern matching\n        // Do not use any loops\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_f5c3ciy.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \e[34m//\
    \ Fill up this function body\e[0m\n\e[31m20 |\e[0m        \e[34m// using pattern\
    \ matching\e[0m\n\e[31m21 |\e[0m        \e[34m// Do not use any loops\e[0m\n\e\
    [31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009502
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def total(lst : List[String])\
    \ : Int = {\n            var result = 0\n            for (x <- lst) result +=\
    \ x.length\n            result\n        }\n        if (total(lst1) < total(lst2))\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxtlaqn4_.scala:34)\n\tat Problem.main(tmpxtlaqn4_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.map(_.length).sum\
    \ == lst2.map(_.length).sum) lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var sz1 = 0\n        var sz2\
    \ = 0\n        for (str <- lst1) sz1 += str.length\n        for (str <- lst2)\
    \ sz2 += str.length\n        return if (sz1 < sz2) lst1 else lst2\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppqntuh7e.scala:32)\n\tat Problem.main(tmppqntuh7e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0 && lst2.length\
    \ == 0) lst1\n        else if (lst1.length == 0) lst2\n        else if (lst2.length\
    \ == 0) lst1\n        else {\n            var sum1 = 0\n            var sum2 =\
    \ 0\n            for (str <- lst1) {\n                sum1 += str.length\n   \
    \         }\n            for (str <- lst2) {\n                sum2 += str.length\n\
    \            }\n            if (sum1 == sum2) lst1\n            else if (sum1\
    \ < sum2) lst1\n            else lst2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk7tcmjk.scala:44)\n\tat Problem.main(tmpvk7tcmjk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0) lst2\n\
    \        else if (lst2.length == 0) lst1\n        else {\n            val sum1\
    \ = lst1.foldLeft(0)((sum, s) => sum + s.length)\n            val sum2 = lst2.foldLeft(0)((sum,\
    \ s) => sum + s.length)\n            if (sum1 == sum2) lst1\n            else\
    \ if (sum1 < sum2) lst1\n            else lst2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzgwxwkkg.scala:37)\n\tat Problem.main(tmpzgwxwkkg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def helper(lst1 : List[String],\
    \ lst2 : List[String], acc1 : Int, acc2 : Int) : Boolean = {\n            if (lst1.length\
    \ == 0 && lst2.length == 0) {\n                acc1 <= acc2\n            } else\
    \ if (lst1.length == 0) {\n                helper(lst1, lst2.tail, acc1, acc2\
    \ + lst2.head.length)\n            } else if (lst2.length == 0) {\n          \
    \      helper(lst1.tail, lst2, acc1 + lst1.head.length, acc2)\n            } else\
    \ {\n                helper(lst1.tail, lst2.tail, acc1 + lst1.head.length, acc2\
    \ + lst2.head.length)\n            }\n        }\n        if (helper(lst1, lst2,\
    \ 0, 0)) lst1 else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var s1 : Int = 0\n        var\
    \ s2 : Int = 0\n        for (str <- lst1) {\n            s1 += str.length\n  \
    \      }\n        for (str <- lst2) {\n            s2 += str.length\n        }\n\
    \        if (s1 == s2) {\n            return lst1\n        } else if (s1 < s2)\
    \ {\n            return lst1\n        } else {\n            return lst2\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your code here\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpue4_0xzo.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \e[34m//\
    \ Your code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009510
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def totalMatchHelper(lst1 :\
    \ List[String], lst2 : List[String], sum1 : Int, sum2 : Int) : List[String] =\
    \ {\n            if (lst1.isEmpty && lst2.isEmpty) return lst1\n            else\
    \ if (lst1.isEmpty) return lst2\n            else if (lst2.isEmpty) return lst1\n\
    \            else if (sum1 == sum2) return lst1\n            else if (sum1 < sum2)\
    \ return lst1\n            else return lst2\n        }\n        if (lst1.isEmpty\
    \ && lst2.isEmpty) return lst1\n        else if (lst1.isEmpty) return lst2\n \
    \       else if (lst2.isEmpty) return lst1\n        else {\n            val sum1\
    \ = lst1.foldLeft(0)((x, y) => x + y.length)\n            val sum2 = lst2.foldLeft(0)((x,\
    \ y) => x + y.length)\n            return totalMatchHelper(lst1, lst2, sum1, sum2)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8nzmd5qr.scala:44)\n\tat Problem.main(tmp8nzmd5qr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == 0 && lst2.size\
    \ == 0) return List[String]()\n        if (lst1.size == 0) return lst2\n     \
    \   if (lst2.size == 0) return lst1\n        val sum1 = lst1.foldLeft(0)((a,b)\
    \ => a + b.size)\n        val sum2 = lst2.foldLeft(0)((a,b) => a + b.size)\n \
    \       if (sum1 <= sum2) return lst1\n        else return lst2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpms33mizl.scala:35)\n\tat Problem.main(tmpms33mizl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009515
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def totalMatchHelper(lst1 :\
    \ List[String], lst2 : List[String], sum1 : Int, sum2 : Int) : List[String] =\
    \ {\n            if (lst1.isEmpty) {\n                if (sum1 < sum2) lst1 else\
    \ lst2\n            } else {\n                if (lst2.isEmpty) {\n          \
    \          if (sum1 < sum2) lst1 else lst2\n                } else {\n       \
    \             if (sum1 < sum2) lst1 else lst2\n                }\n           \
    \ }\n        }\n        totalMatchHelper(lst1, lst2, lst1.map(_.length).sum, lst2.map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpetvmh_sc.scala:39)\n\tat Problem.main(tmpetvmh_sc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1` is the list that has lesser total num of chars\n        if\
    \ (lst1.length <= lst2.length) {\n            var (lst1Total, lst2Total) = (0,\
    \ 0)\n            for (a <- lst1) {\n                lst1Total += a.length\n \
    \           }\n            for (a <- lst2) {\n                lst2Total += a.length\n\
    \            }\n            if (lst1Total == lst2Total) {\n                return\
    \ lst1\n            } else if (lst1Total < lst2Total) {\n                return\
    \ lst1\n            } else {\n                return lst2\n            }\n   \
    \     } else {\n            return totalMatch(lst2, lst1)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \                // Note: You can use the built-in functions available in scala.\n\
    \                if(lst1.map(_.length).sum < lst2.map(_.length).sum)\n       \
    \             lst1\n                else if(lst1.map(_.length).sum > lst2.map(_.length).sum)\n\
    \                    lst2\n                else\n                    lst1\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009515
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var t1 = lst1.foldLeft(0)((acc,\
    \ lst) => lst.length + acc)\n        var t2 = lst2.foldLeft(0)((acc, lst) => lst.length\
    \ + acc)\n        if (t1 == t2) {\n            return lst1\n        } else if\
    \ (t1 < t2) {\n            return lst1\n        } else {\n            return lst2\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val total1 = lst1.foldLeft(0)((sum,\
    \ str) => sum + str.length)\n        val total2 = lst2.foldLeft(0)((sum, str)\
    \ => sum + str.length)\n        if (total1 <= total2) lst1 else lst2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst1Count = 0\n       \
    \ var lst2Count = 0\n        for (i <- lst1) {\n            lst1Count += i.length\n\
    \        }\n        for (i <- lst2) {\n            lst2Count += i.length\n   \
    \     }\n        if (lst1Count == lst2Count) {\n            return lst1\n    \
    \    }\n        else if (lst1Count < lst2Count) {\n            return lst1\n \
    \       }\n        else {\n            return lst2\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val total1 = lst1.foldLeft(0)((a,\
    \ b) => a + b.length)\n        val total2 = lst2.foldLeft(0)((a, b) => a + b.length)\n\
    \        if (total1 == total2) {\n            lst1\n        } else if (total1\
    \ < total2) {\n            lst1\n        } else {\n            lst2\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var result = List[String]()\n\
    \        var lst1Total = 0\n        var lst2Total = 0\n        for (item <- lst1)\
    \ {\n            lst1Total += item.length\n        }\n        for (item <- lst2)\
    \ {\n            lst2Total += item.length\n        }\n        if (lst1Total <\
    \ lst2Total) {\n            result = lst1\n        } else {\n            result\
    \ = lst2\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1rmywtvk.scala:42)\n\tat Problem.main(tmp1rmywtvk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      if (lst1.isEmpty && lst2.isEmpty)\
    \ return lst1\n      var sum1 = 0\n      for (s <- lst1) sum1 += s.length\n  \
    \    var sum2 = 0\n      for (s <- lst2) sum2 += s.length\n      if (sum1 <= sum2)\
    \ return lst1\n      return lst2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.foldLeft(0)((total,\
    \ str) => total + str.length) < lst2.foldLeft(0)((total, str) => total + str.length))\
    \ {\n            lst1\n        } else {\n            lst2\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzexomkzr.scala:32)\n\tat Problem.main(tmpzexomkzr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `index` is the index of the current element\n        // `accumulator`\
    \ is the partial result\n        //var l1 = lst1.foldLeft(0)(_ + _.length)\n \
    \       //var l2 = lst2.foldLeft(0)(_ + _.length)\n        //l1 < l2\n       \
    \ var l1 = 0\n        var l2 = 0\n        lst1.foreach(l1 += _.length)\n     \
    \   lst2.foreach(l2 += _.length)\n        if (l1 < l2) lst1 else lst2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzpkhkkk.scala:38)\n\tat Problem.main(tmphzpkhkkk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val cnt1 = lst1.foldLeft(0)((sum,\
    \ str) => sum + str.length)\n        val cnt2 = lst2.foldLeft(0)((sum, str) =>\
    \ sum + str.length)\n        if (cnt1 < cnt2) lst1 else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp00gdmmc_.scala:30)\n\tat Problem.main(tmp00gdmmc_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def totalMatchHelper(lst1 :\
    \ List[String], lst2 : List[String], tot1 : Int, tot2 : Int) : List[String] =\
    \ {\n            if (lst1.isEmpty) {\n                if (tot1 > tot2) lst2 else\
    \ lst1\n            } else if (lst2.isEmpty) {\n                if (tot1 > tot2)\
    \ lst2 else lst1\n            } else {\n                totalMatchHelper(lst1.tail,\
    \ lst2.tail, tot1 + lst1.head.length, tot2 + lst2.head.length)\n            }\n\
    \        }\n        totalMatchHelper(lst1, lst2, 0, 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbvcq1585.scala:32)\n\tat Problem.main(tmpbvcq1585.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var sum1 = 0\n        var sum2\
    \ = 0\n        for (s <- lst1) {\n            sum1 += s.length\n        }\n  \
    \      for (s <- lst2) {\n            sum2 += s.length\n        }\n        if\
    \ (sum1 == sum2) {\n            return lst1\n        } else if (sum1 < sum2) {\n\
    \            return lst1\n        } else {\n            return lst2\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0 && lst2.length\
    \ == 0) lst1\n        else if (lst1.length == 0) lst2\n        else if (lst2.length\
    \ == 0) lst1\n        else {\n            var total1 = 0\n            var total2\
    \ = 0\n            for (s <- lst1) total1 += s.length\n            for (s <- lst2)\
    \ total2 += s.length\n            if (total1 < total2) lst1\n            else\
    \ if (total1 > total2) lst2\n            else lst1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfxja57_1.scala:40)\n\tat Problem.main(tmpfxja57_1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0 && lst2.length\
    \ == 0)\n            lst1\n        else if (lst1.length == 0)\n            lst2\n\
    \        else if (lst2.length == 0)\n            lst1\n        else {\n      \
    \      var sum1 = 0\n            for (s <- lst1)\n                sum1 += s.length\n\
    \            var sum2 = 0\n            for (s <- lst2)\n                sum2 +=\
    \ s.length\n            if (sum1 < sum2)\n                lst1\n            else\
    \ if (sum1 > sum2)\n                lst2\n            else\n                lst1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cqdggzi.scala:48)\n\tat Problem.main(tmp7cqdggzi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009515
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Size = lst1.foldLeft(0)((acc,\
    \ i) => acc + i.length)\n        val lst2Size = lst2.foldLeft(0)((acc, i) => acc\
    \ + i.length)\n        if (lst1Size < lst2Size) lst1 else lst2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_b0llnxk.scala:30)\n\tat Problem.main(tmp_b0llnxk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var n1 = 0\n        for (i\
    \ <- lst1) n1 += i.length\n        var n2 = 0\n        for (i <- lst2) n2 += i.length\n\
    \        if (n1 == n2) lst1\n        else if (n1 < n2) lst1\n        else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n\t    // your implementation goes here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpueznt630.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m\t    \e[34m// your\
    \ implementation goes here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val totalChar1 = lst1.foldLeft(0)((total,\
    \ s) => total + s.length)\n        val totalChar2 = lst2.foldLeft(0)((total, s)\
    \ => total + s.length)\n        if (totalChar1 <= totalChar2) lst1 else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009515
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      // Fill Up this function body\n\
    \        //`\n        def sum(lst: List[String]): Int = lst match {\n        \
    \    case Nil => 0\n            case x :: tail => x.length + sum(tail)\n     \
    \   }\n        if (sum(lst1) < sum(lst2)) {\n            lst1\n        } else\
    \ {\n            lst2\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeymz1tg6.scala:38)\n\tat Problem.main(tmpeymz1tg6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def totalMatchIter(lst1 : List[String],\
    \ lst2 : List[String], num1 : Int, num2 : Int) : List[String] = {\n          \
    \  (lst1, lst2) match {\n                case (Nil, Nil) => if (num1 == num2)\
    \ lst1 else if (num1 < num2) lst1 else lst2\n                case (lst1, Nil)\
    \ => if (num1 == num2) lst1 else if (num1 < num2) lst1 else lst2\n           \
    \     case (Nil, lst2) => if (num1 == num2) lst1 else if (num1 < num2) lst1 else\
    \ lst2\n                case (str1 :: rest1, str2 :: rest2) => totalMatchIter(rest1,\
    \ rest2, num1 + str1.length, num2 + str2.length)\n            }\n        }\n \
    \       totalMatchIter(lst1, lst2, 0, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp97g3v_63.scala:31)\n\tat Problem.main(tmp97g3v_63.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val (sum1, sum2) = (lst1.map(_.length).sum,\
    \ lst2.map(_.length).sum)\n        if (sum1 == sum2) lst1\n        else if (sum1\
    \ < sum2) lst1\n        else lst2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.length match {\n     \
    \       case 0 => lst2\n            case _ => lst2.length match {\n          \
    \      case 0 => lst1\n                case _ => {\n                    var len1\
    \ = 0\n                    var len2 = 0\n                    for (i <- 0 until\
    \ lst1.length) len1 += lst1(i).length\n                    for (i <- 0 until lst2.length)\
    \ len2 += lst2(i).length\n                    if (len1 < len2) lst1 else lst2\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzvjapmow.scala:40)\n\tat Problem.main(tmpzvjapmow.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def totalMatchHelper(lst1 :\
    \ List[String], lst2 : List[String], acc1 : Int, acc2 : Int) : List[String] =\
    \ (lst1, lst2) match {\n            case (Nil, Nil) => Nil\n            case (head1\
    \ :: tail1, Nil) => head1 :: totalMatchHelper(tail1, Nil, acc1 + head1.length,\
    \ acc2)\n            case (Nil, head2 :: tail2) => head2 :: totalMatchHelper(Nil,\
    \ tail2, acc1, acc2 + head2.length)\n            case (head1 :: tail1, head2 ::\
    \ tail2) => {\n                if (acc1 + head1.length <= acc2 + head2.length)\
    \ head1 :: totalMatchHelper(tail1, lst2, acc1 + head1.length, acc2)\n        \
    \        else head2 :: totalMatchHelper(lst1, tail2, acc1, acc2 + head2.length)\n\
    \            }\n        }\n        if (lst1.length <= lst2.length) totalMatchHelper(lst1,\
    \ lst2, 0, 0)\n        else totalMatchHelper(lst2, lst1, 0, 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk8w1dnnf.scala:33)\n\tat Problem.main(tmpk8w1dnnf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var count1 = 0\n        var\
    \ count2 = 0\n        for (s <- lst1) {\n            count1 += s.length\n    \
    \    }\n        for (s <- lst2) {\n            count2 += s.length\n        }\n\
    \        if (count1 < count2) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbieyyu4j.scala:36)\n\tat Problem.main(tmpbieyyu4j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        if (lst1.foldLeft(0)((sum,\
    \ string) => sum + string.length) < lst2.foldLeft(0)((sum, string) => sum + string.length))\
    \ return lst1\n        return lst2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4hib51im.scala:31)\n\tat Problem.main(tmp4hib51im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.isEmpty) {\n     \
    \       lst2\n        } else if (lst2.isEmpty) {\n            lst1\n        }\
    \ else {\n            def totalChars(lst : List[String]) : Int = {\n         \
    \       lst.foldLeft(0)((acc, word) => acc + word.length)\n            }\n   \
    \         if (totalChars(lst1) > totalChars(lst2)) {\n                lst2\n \
    \           } else {\n                lst1\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpic9whssi.scala:42)\n\tat Problem.main(tmpic9whssi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var t1 = lst1.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        var t2 = lst2.foldLeft(0)((acc, str) => acc\
    \ + str.length)\n        if (t1 <= t2)\n            lst1\n        else\n     \
    \       lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n\t\tif (lst1.length == 0 && lst2.length\
    \ == 0) lst1\n\t\telse if (lst1.length == 0) lst2\n\t\telse if (lst2.length ==\
    \ 0) lst1\n\t\telse {\n\t\t\tvar total1 = 0\n\t\t\tfor (word <- lst1) total1 +=\
    \ word.length\n\t\t\tvar total2 = 0\n\t\t\tfor (word <- lst2) total2 += word.length\n\
    \t\t\tif (total1 <= total2) lst1\n\t\t\telse lst2\n\t\t}\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkw13gmlb.scala:30:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660009521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `totalMatch` should return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // Write your\
    \ if condition here\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp306v1abw.scala:32)\n\tat Problem.main(tmp306v1abw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var n1 = 0\n      \
    \  for (s <- lst1) n1 += s.length\n        var n2 = 0\n        for (s <- lst2)\
    \ n2 += s.length\n        if (n1 <= n2) lst1 else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6sxwntnl.scala:35)\n\tat Problem.main(tmp6sxwntnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0 && lst2.length\
    \ == 0) {\n            return lst1\n        }\n        var sum = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            sum += lst1(i).length\n        }\n\
    \        var sum2 = 0\n        for (i <- 0 until lst2.length) {\n            sum2\
    \ += lst2(i).length\n        }\n        if (sum < sum2) {\n            return\
    \ lst1\n        }\n        else if (sum > sum2) {\n            return lst2\n \
    \       }\n        else {\n            return lst1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def length(lst : List[String])\
    \ : Int = {\n            var len = 0\n            for (str <- lst) len += str.length\n\
    \            len\n        }\n        var count1 = length(lst1)\n        var count2\
    \ = length(lst2)\n        var ret = List[String]()\n        if (count1 < count2)\
    \ ret = lst1\n        else if (count1 > count2) ret = lst2\n        else ret =\
    \ lst1\n        ret\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        //if (lst1.map(s => s.length).sum\
    \ < lst2.map(s => s.length).sum) lst1 else lst2\n        if (lst1.map(s => s.length).sum\
    \ < lst2.map(s => s.length).sum) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy7h9wyjk.scala:29)\n\tat Problem.main(tmpy7h9wyjk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1charSum = lst1.foldLeft(0)\
    \ {(sum, str) => sum + str.length}\n        val lst2charSum = lst2.foldLeft(0)\
    \ {(sum, str) => sum + str.length}\n        if (lst1charSum < lst2charSum) lst1\n\
    \        else if (lst1charSum > lst2charSum) lst2\n        else lst1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your code here\n       \
    \ return lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ttt_l4k.scala:24)\n\tat Problem.main(tmp4ttt_l4k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var total1 = 0\n        var\
    \ total2 = 0\n        for (x <- lst1) total1 += x.length\n        for (x <- lst2)\
    \ total2 += x.length\n        if (total1 == total2) lst1\n        else if (total1\
    \ < total2) lst1\n        else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var total1 = 0\n        var\
    \ total2 = 0\n        for (i <- lst1) {\n            total1 += i.length\n    \
    \    }\n        for (i <- lst2) {\n            total2 += i.length\n        }\n\
    \        if (total1 < total2) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpztls3ba2.scala:36)\n\tat Problem.main(tmpztls3ba2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // your answer here\n     \
    \   val len1 = lst1.foldLeft(0){(acc, x) => acc + x.length}\n        val len2\
    \ = lst2.foldLeft(0){(acc, x) => acc + x.length}\n        if (len1 < len2) lst1\
    \ else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgr69mxeh.scala:31)\n\tat Problem.main(tmpgr69mxeh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst1tot = 0\n        var\
    \ lst2tot = 0\n        for (str <- lst1) {\n            lst1tot += str.length\n\
    \        }\n        for (str <- lst2) {\n            lst2tot += str.length\n \
    \       }\n        if (lst1tot < lst2tot) lst1 else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8y87t3cg.scala:36)\n\tat Problem.main(tmp8y87t3cg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (elem\
    \ <- lst1) {\n            sum1 += elem.length\n        }\n        for (elem <-\
    \ lst2) {\n            sum2 += elem.length\n        }\n        if (sum1 <= sum2)\
    \ return lst1\n        return lst2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyta2x2b9.scala:41)\n\tat Problem.main(tmpyta2x2b9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your code goes here\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxyu45cb9.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \e[34m//\
    \ Your code goes here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1` contains list of strings\n        // `lst2` contains list of\
    \ strings\n        // You have to return which list has lesser sum of length of\
    \ all strings in the list.\n        // You are required to use length and foldLeft\
    \ functions.\n        if (lst1.foldLeft(0)(_ + _.length) < lst2.foldLeft(0)(_\
    \ + _.length)) lst1\n        else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvtzdktng.scala:34)\n\tat Problem.main(tmpvtzdktng.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var lst1Count = 0\n\
    \        var lst2Count = 0\n        for (s <- lst1) lst1Count += s.length\n  \
    \      for (s <- lst2) lst2Count += s.length\n        if (lst1Count <= lst2Count)\
    \ lst1 else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppaolxro0.scala:35)\n\tat Problem.main(tmppaolxro0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0 && lst2.length\
    \ == 0) lst1\n        else if (lst1.length == 0) lst2\n        else if (lst2.length\
    \ == 0) lst1\n        else {\n            var chars1 = 0\n            for (str\
    \ <- lst1) {\n                chars1 += str.length\n            }\n          \
    \  var chars2 = 0\n            for (str <- lst2) {\n                chars2 +=\
    \ str.length\n            }\n            if (chars1 == chars2) lst1\n        \
    \    else if (chars1 < chars2) lst1\n            else lst2\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplcth0upu.scala:44)\n\tat Problem.main(tmplcth0upu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size < lst2.size)\
    \ return lst1\n        else if (lst1.size > lst2.size) return lst2\n        else\
    \ {\n            var sum1 = 0\n            var sum2 = 0\n            for (i <-\
    \ 0 until lst1.size) {\n                sum1 += lst1(i).size\n               \
    \ sum2 += lst2(i).size\n            }\n            if (sum1 < sum2) return lst1\n\
    \            else if (sum1 > sum2) return lst2\n            else return lst1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptk7zqh1j.scala:39)\n\tat Problem.main(tmptk7zqh1j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var result : List[String] =\
    \ List()\n        if (lst1.length == 0 && lst2.length == 0) {\n            result\
    \ = lst1\n        } else if (lst1.length == 0 && lst2.length != 0) {\n       \
    \     result = lst2\n        } else if (lst1.length != 0 && lst2.length == 0)\
    \ {\n            result = lst1\n        } else {\n            var t1 : Int = 0\n\
    \            for (i <- 0 until lst1.length) {\n                t1 += lst1(i).length\n\
    \            }\n            var t2 : Int = 0\n            for (i <- 0 until lst2.length)\
    \ {\n                t2 += lst2(i).length\n            }\n            if (t1 >\
    \ t2) {\n                result = lst2\n            } else if (t1 < t2) {\n  \
    \              result = lst1\n            } else {\n                result = lst1\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg9fiafsq.scala:53)\n\tat Problem.main(tmpg9fiafsq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // fill in here\n        def\
    \ totalMatchRec(lst1 : List[String], lst2 : List[String], \n            total1\
    \ : Int, total2 : Int) : List[String] = {\n            if (lst1.isEmpty) {\n \
    \               if (total1 == total2) lst1 else lst2\n            } else {\n \
    \               if (total1 > total2) lst2 else totalMatchRec(lst1.tail, lst2,\
    \ \n                    total1 + lst1.head.length, total2)\n            }\n  \
    \      }\n        totalMatchRec(lst1, lst2, 0, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptnrl1rba.scala:34)\n\tat Problem.main(tmptnrl1rba.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.map(_.length).sum\
    \ > lst2.map(_.length).sum) lst2\n        else lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.totalMatch(tmp_8eaxpk3.scala:19)\n\tat Problem$.main(tmp_8eaxpk3.scala:22)\n\
    \tat Problem.main(tmp_8eaxpk3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var total1 = 0\n        var\
    \ total2 = 0\n        lst1.foreach(total1 += _.length)\n        lst2.foreach(total2\
    \ += _.length)\n        if (total1 == total2) lst1\n        else if (total1 <\
    \ total2) lst1\n        else lst2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == 0) lst2\n\
    \        else if (lst2.size == 0) lst1\n        else {\n            if (lst1.map(_.size).sum\
    \ == lst2.map(_.size).sum) return lst1\n            if (lst1.map(_.size).sum <\
    \ lst2.map(_.size).sum) return lst1\n            else return lst2\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuytg_m5f.scala:35)\n\tat Problem.main(tmpuytg_m5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length < lst2.length)\
    \ lst1\n        else if (lst1.length > lst2.length) lst2\n        else lst1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppwmlbv0x.scala:25)\n\tat Problem.main(tmppwmlbv0x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst1_total = 0\n      \
    \  var lst2_total = 0\n        for (str <- lst1) lst1_total += str.length\n  \
    \      for (str <- lst2) lst2_total += str.length\n        return if (lst1_total\
    \ <= lst2_total) lst1 else lst2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Define a function that takes\
    \ a list of string and returns the number of chars.\n        def totalNumChars(lst\
    \ : List[String]) : Int = {\n            // Sum up the lengths of each string\
    \ in the list.\n            lst.foldLeft(0)((acc, x) => acc + x.length)\n    \
    \    }\n        // Total number of chars in lst1 and lst2.\n        val t1 = totalNumChars(lst1)\n\
    \        val t2 = totalNumChars(lst2)\n        // Compare the number of chars.\n\
    \        if (t1 < t2)\n            lst1\n        else if (t1 > t2)\n         \
    \   lst2\n        else\n            lst1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill up this function body\n\
    \        // using higher order functions\n        // you can use Scala library\
    \ functions like map or fold\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu39fhn_h.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \e[34m//\
    \ Fill up this function body\e[0m\n\e[31m20 |\e[0m        \e[34m// using higher\
    \ order functions\e[0m\n\e[31m21 |\e[0m        \e[34m// you can use Scala library\
    \ functions like map or fold\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Total = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val lst2Total = lst2.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        if (lst1Total < lst2Total) lst1 else lst2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9p81f3r.scala:30)\n\tat Problem.main(tmp_9p81f3r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // your code here\n       \
    \ // number of chars in lst1\n        val c1 = lst1.foldLeft(0)((s, x) => s +\
    \ x.length)\n        // number of chars in lst2\n        val c2 = lst2.foldLeft(0)((s,\
    \ x) => s + x.length)\n        if (c1 <= c2) lst1 else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val totalChar1 = lst1.foldLeft(0)((a,\
    \ b) => a + b.length)\n        val totalChar2 = lst2.foldLeft(0)((a, b) => a +\
    \ b.length)\n        if (totalChar1 == totalChar2) {\n            lst1\n     \
    \   } else if (totalChar1 < totalChar2) {\n            lst1\n        } else {\n\
    \            lst2\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst1Total : Int = 0\n \
    \       for (word <- lst1) {\n            lst1Total += word.length\n        }\n\
    \        var lst2Total : Int = 0\n        for (word <- lst2) {\n            lst2Total\
    \ += word.length\n        }\n        if (lst1Total < lst2Total) {\n          \
    \  return lst1\n        }\n        else {\n            return lst2\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpangn1s6n.scala:41)\n\tat Problem.main(tmpangn1s6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var totalChars1 = 0\n     \
    \   var totalChars2 = 0\n        for (str <- lst1) {\n            totalChars1\
    \ += str.length\n        }\n        for (str <- lst2) {\n            totalChars2\
    \ += str.length\n        }\n        if (totalChars1 < totalChars2) {\n       \
    \     return lst1\n        } else if (totalChars1 > totalChars2) {\n         \
    \   return lst2\n        } else {\n            return lst1\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.foldLeft(0)((count,\
    \ str) => count + str.length) <= lst2.foldLeft(0)((count, str) => count + str.length))\
    \ lst1 else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      var lstLen1 = 0\n      for (i\
    \ <- lst1) lstLen1 += i.length\n      var lstLen2 = 0\n      for (i <- lst2) lstLen2\
    \ += i.length\n      if (lstLen1 == lstLen2) lst1\n      else if (lstLen1 < lstLen2)\
    \ lst1\n      else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0 && lst2.length\
    \ == 0) return List[String]()\n        else if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ return lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ return lst1\n        else return lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      // write your code here.\n  \
    \    // return the appropriate list.\n      return null;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.totalMatch(scala.collection.immutable.List,\
    \ scala.collection.immutable.List)\" is null\n\tat Problem$.main(tmp9l0av965.scala:24)\n\
    \tat Problem.main(tmp9l0av965.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n    \tvar n1 = 0\n    \tvar n2 = 0\n\
    \    \tlst1.foreach { n1 += _.length }\n    \tlst2.foreach { n2 += _.length }\n\
    \    \tif (n1 < n2) lst1 else lst2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdx5anmdz.scala:32)\n\tat Problem.main(tmpdx5anmdz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val total1 = lst1.foldLeft(0)((x,\
    \ y) => x + y.length)\n        val total2 = lst2.foldLeft(0)((x, y) => x + y.length)\n\
    \        if (total1 < total2) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjhw9_lgs.scala:30)\n\tat Problem.main(tmpjhw9_lgs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `totalMatch.length` should be the number of function arguments\n \
    \       0\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpco_33vxz.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (\e[31m0\e[0m :\
    \ Int)\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \                // method 1\n                // lst1.foldLeft(0)((sum, x) =>\
    \ sum + x.length) match {\n                //     case l1 if l1 > lst2.foldLeft(0)((sum,\
    \ x) => sum + x.length) => lst2\n                //     case l1 if l1 < lst2.foldLeft(0)((sum,\
    \ x) => sum + x.length) => lst1\n                //     case _ => lst1\n     \
    \           // }\n                // method 2\n                // if (lst1.foldLeft(0)((sum,\
    \ x) => sum + x.length) > lst2.foldLeft(0)((sum, x) => sum + x.length))\n    \
    \            //     lst2\n                // else if (lst1.foldLeft(0)((sum, x)\
    \ => sum + x.length) < lst2.foldLeft(0)((sum, x) => sum + x.length))\n       \
    \         //     lst1\n                // else\n                //     lst1\n\
    \                // method 3\n                // (lst1.foldLeft(0)((sum, x) =>\
    \ sum + x.length), lst2.foldLeft(0)((sum, x) => sum + x.length)) match {\n   \
    \             //     case (l1, l2) if l1 > l2 => lst2\n                //    \
    \ case (l1, l2) if l1 < l2 => lst1\n                //     case _ => lst1\n  \
    \              // }\n                // method 4\n                lst1.foldLeft(0)((sum,\
    \ x) => sum + x.length) match {\n                    case l1 if l1 > lst2.foldLeft(0)((sum,\
    \ x) => sum + x.length) => lst2\n                    case l1 if l1 < lst2.foldLeft(0)((sum,\
    \ x) => sum + x.length) => lst1\n                    case _ => lst1\n        \
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> (List[String](\"abc\", \"abc\", \"abc\", \"abc\")).length\n  \
    \      // 4\n        // >>> (List[String](\"abc\", \"abc\", \"abc\", \"abc\")).map(l\
    \ => l.length).sum\n        // 12\n        val totalChars1 = lst1.map(l => l.length).sum\n\
    \        val totalChars2 = lst2.map(l => l.length).sum\n        if (totalChars1\
    \ < totalChars2) lst1\n        else if (totalChars1 > totalChars2) lst2\n    \
    \    else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your Code Here\n       \
    \ if (lst1.size == 0 && lst2.size == 0) return lst1\n        if (lst1.size !=\
    \ 0 && lst2.size == 0) return lst1\n        if (lst1.size == 0 && lst2.size !=\
    \ 0) return lst2\n        var total1 = 0\n        var total2 = 0\n        lst1.foreach(x\
    \ => total1 += x.size)\n        lst2.foreach(x => total2 += x.size)\n        if\
    \ (total1 < total2) lst1 else lst2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpef5rrt8l.scala:36)\n\tat Problem.main(tmpef5rrt8l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val total1 = lst1.map(x =>\
    \ x.length).reduceLeft(_ + _)\n        val total2 = lst2.map(x => x.length).reduceLeft(_\
    \ + _)\n        if (total1 == total2) lst1\n        else if (total1 < total2)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.totalMatch(tmpgsdnlvs7.scala:19)\n\
    \tat Problem$.main(tmpgsdnlvs7.scala:26)\n\tat Problem.main(tmpgsdnlvs7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def totalMatch(lst1 : List[String],\
    \ lst2 : List[String], sum1 : Int, sum2 : Int) : List[String] = {\n          \
    \  if (lst1.isEmpty) {\n                if (sum1 == sum2) lst1 else lst2\n   \
    \         } else if (lst2.isEmpty) {\n                if (sum1 == sum2) lst1 else\
    \ lst2\n            } else {\n                if (sum1 < sum2) {\n           \
    \         totalMatch(lst1.tail, lst2, sum1 + lst1.head.length, sum2)\n       \
    \         } else {\n                    totalMatch(lst1, lst2.tail, sum1, sum2\
    \ + lst2.head.length)\n                }\n            }\n        }\n        totalMatch(lst1,\
    \ lst2, 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp86rv979g.scala:36)\n\tat Problem.main(tmp86rv979g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.isEmpty && lst2.isEmpty)\
    \ lst1\n        else if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n\
    \        else {\n            var len1 = 0\n            for (i <- lst1) len1 +=\
    \ i.length\n            var len2 = 0\n            for (i <- lst2) len2 += i.length\n\
    \            if (len1 < len2) lst1\n            else if (len1 > len2) lst2\n \
    \           else lst1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptmjrioa0.scala:40)\n\tat Problem.main(tmptmjrioa0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1_total = lst1.map(x\
    \ => x.length).sum\n        val lst2_total = lst2.map(x => x.length).sum\n   \
    \     if (lst1_total == lst2_total) lst1\n        else if (lst1_total < lst2_total)\
    \ lst1\n        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsaon6dr5.scala:29)\n\tat Problem.main(tmpsaon6dr5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `totalSum` is a method you can use for computing total sum of a list\n\
    \        // Use pattern matching to return the list\n        // Do not use while\
    \ loop, for loop or pattern matching\n        // Hint: Use pattern matching and\
    \ functions like\n        // `map` and `filter` to solve this problem\n      \
    \  def totalSum(lst : List[String]) : Int = {\n            lst.foldLeft(0)((a,\
    \ b) => a + b.length)\n        }\n        (totalSum(lst1), totalSum(lst2)) match\
    \ {\n            case (a, b) if (a < b) => lst1\n            case (a, b) if (a\
    \ > b) => lst2\n            case _ => lst1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your Code Here\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqct8sg61.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \e[34m//\
    \ Your Code Here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // should return\n        // (List[String](\"hI\", \"\
    Hi\"))\n        if (lst1.size <= lst2.size) {\n            lst1\n        } else\
    \ {\n            lst2\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp777si7f7.scala:33)\n\tat Problem.main(tmp777si7f7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var totalChars1 = 0\n     \
    \   var totalChars2 = 0\n        for (word <- lst1) {\n            totalChars1\
    \ += word.length\n        }\n        for (word <- lst2) {\n            totalChars2\
    \ += word.length\n        }\n        if (totalChars1 <= totalChars2) lst1 else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val total1 = lst1.foldLeft(0)((a,\
    \ s) => a + s.length)\n        val total2 = lst2.foldLeft(0)((a, s) => a + s.length)\n\
    \        if (total1 < total2) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmk8m22xg.scala:30)\n\tat Problem.main(tmpmk8m22xg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst1Total = 0\n       \
    \ var lst2Total = 0\n        lst1.foreach(lst1Total += _.length)\n        lst2.foreach(lst2Total\
    \ += _.length)\n        lst1Total < lst2Total match {\n            case true =>\
    \ lst1\n            case false => lst2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp21fzt34j.scala:35)\n\tat Problem.main(tmp21fzt34j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsaon6dr5.scala:29)\n\tat Problem.main(tmpsaon6dr5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val t1 = lst1.map(_.length).sum\n\
    \        val t2 = lst2.map(_.length).sum\n        if (t1 < t2) lst1 else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcx9kc0om.scala:30)\n\tat Problem.main(tmpcx9kc0om.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.isEmpty && lst2.isEmpty)\
    \ (List[String]())\n        else if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty)\
    \ lst1\n        else {\n            val totalChars1 = lst1.map(x => x.length).sum\n\
    \            val totalChars2 = lst2.map(x => x.length).sum\n            if (totalChars1\
    \ < totalChars2) lst1\n            else if (totalChars1 > totalChars2) lst2\n\
    \            else lst1\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphhvbxifl.scala:38)\n\tat Problem.main(tmphhvbxifl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Len = lst1.foldLeft(0)((sum,\
    \ word) => sum + word.length)\n        val lst2Len = lst2.foldLeft(0)((sum, word)\
    \ => sum + word.length)\n        if (lst1Len < lst2Len) lst1 else lst2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd969gihv.scala:30)\n\tat Problem.main(tmpd969gihv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are two lists of strings\n        // Don't change\
    \ signature of the function.\n        // Replace the blank line with the actual\
    \ code\n        if (lst1.length > lst2.length) lst2\n        else if (lst1.length\
    \ < lst2.length) lst1\n        else {\n            var count1 = 0\n          \
    \  var count2 = 0\n            for (str <- lst1) count1 += str.length\n      \
    \      for (str <- lst2) count2 += str.length\n            if (count1 == count2)\
    \ lst1\n            else if (count1 < count2) lst1\n            else lst2\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdt17_k1m.scala:41)\n\tat Problem.main(tmpdt17_k1m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Size = lst1.foldLeft(0)((x,\
    \ y) => x + y.length)\n        val lst2Size = lst2.foldLeft(0)((x, y) => x + y.length)\n\
    \        if (lst1Size < lst2Size) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjmdnzin.scala:30)\n\tat Problem.main(tmpxjmdnzin.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `totalLen` is a helper function to compute the total length of all\
    \ strings in a list\n        def totalLen(lst : List[String]) : Int = {\n    \
    \      var sum = 0\n          for (i <- lst) sum += i.length\n          sum\n\
    \        }\n        var l1 = totalLen(lst1)\n        var l2 = totalLen(lst2)\n\
    \        if (l1 == l2) lst1\n        else if (l1 < l2) lst1\n        else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // First try is to brute force\
    \ this.\n        // I can see that I can use pattern matching and a fold to accomplish\n\
    \        // this.\n        // The pattern matching case can be List[String]()\n\
    \        // The fold can be foldLeft(lst2){(lst : List[String], str : String)\
    \ => \n        //     lst :+ (if (lst1.map(i => i.length).sum < lst2.map(i =>\
    \ i.length).sum) \n        //         lst1 else lst2)\n        // }\n        //\
    \ This can be simplified to\n        // foldLeft(lst2){(lst : List[String], str\
    \ : String) => \n        //     lst :+ (if (lst1.map(i => i.length).sum < lst2.map(i\
    \ => i.length).sum) \n        //         lst1 else lst2)\n        // }\n     \
    \   // This can be simplified to\n        // foldLeft(lst2){(lst : List[String],\
    \ str : String) => \n        //     lst :+ (if (lst1.map(i => i.length).sum <\
    \ lst2.map(i => i.length).sum) \n        //         lst1 else lst2)\n        //\
    \ }\n        // This can be simplified to\n        // foldLeft(lst2){(lst : List[String],\
    \ str : String) => \n        //     lst :+ (if (lst1.map(i => i.length).sum <\
    \ lst2.map(i => i.length).sum) \n        //         lst1 else lst2)\n        //\
    \ }\n        // This can be simplified to\n        // foldLeft(lst2){(lst : List[String],\
    \ str : String) => \n        //     lst :+ (if (lst1.map(i => i.length).sum <\
    \ lst2.map(i => i.length).sum) \n        //         lst1 else lst2)\n        //\
    \ }\n        // This can be simplified to\n        // foldLeft(lst2){(lst : List[String],\
    \ str : String\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp20x587pc.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \e[34m//\
    \ First try is to brute force this.\e[0m\n\e[31m20 |\e[0m        \e[34m// I can\
    \ see that I can use pattern matching and a fold to accomplish\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// this.\e[0m\n\e[31m22 |\e[0m        \e[34m// The pattern\
    \ matching case can be List[String]()\e[0m\n\e[31m23 |\e[0m        \e[34m// The\
    \ fold can be foldLeft(lst2){(lst : List[String], str : String) => \e[0m\n\e[31m24\
    \ |\e[0m        \e[34m//     lst :+ (if (lst1.map(i => i.length).sum < lst2.map(i\
    \ => i.length).sum) \e[0m\n\e[31m25 |\e[0m        \e[34m//         lst1 else lst2)\e\
    [0m\n\e[31m26 |\e[0m        \e[34m// }\e[0m\n\e[31m27 |\e[0m        \e[34m// This\
    \ can be simplified to\e[0m\n\e[31m28 |\e[0m        \e[34m// foldLeft(lst2){(lst\
    \ : List[String], str : String) => \e[0m\n\e[31m29 |\e[0m        \e[34m//    \
    \ lst :+ (if (lst1.map(i => i.length).sum < lst2.map(i => i.length).sum) \e[0m\n\
    \e[31m30 |\e[0m        \e[34m//         lst1 else lst2)\e[0m\n\e[31m31 |\e[0m\
    \        \e[34m// }\e[0m\n\e[31m32 |\e[0m        \e[34m// This can be simplified\
    \ to\e[0m\n\e[31m33 |\e[0m        \e[34m// foldLeft(lst2){(lst : List[String],\
    \ str : String) => \e[0m\n\e[31m34 |\e[0m        \e[34m//     lst :+ (if (lst1.map(i\
    \ => i.length).sum < lst2.map(i => i.length).sum) \e[0m\n\e[31m35 |\e[0m     \
    \   \e[34m//         lst1 else lst2)\e[0m\n\e[31m36 |\e[0m        \e[34m// }\e\
    [0m\n\e[31m37 |\e[0m        \e[34m// This can be simplified to\e[0m\n\e[31m38\
    \ |\e[0m        \e[34m// foldLeft(lst2){(lst : List[String], str : String) =>\
    \ \e[0m\n\e[31m39 |\e[0m        \e[34m//     lst :+ (if (lst1.map(i => i.length)."
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def totalMatchR(lst1 : List[String],\
    \ lst2 : List[String], acc1 : Int, acc2 : Int) : List[String] = {\n          \
    \  if (lst1.isEmpty && lst2.isEmpty) {\n                if (acc1 <= acc2) lst1\
    \ else lst2\n            } else if (lst1.isEmpty) {\n                if (acc1\
    \ <= acc2) lst1 else lst2\n            } else if (lst2.isEmpty) {\n          \
    \      if (acc1 <= acc2) lst1 else lst2\n            } else {\n              \
    \  totalMatchR(lst1.tail, lst2.tail, acc1 + lst1.head.length, acc2 + lst2.head.length)\n\
    \            }\n        }\n        totalMatchR(lst1, lst2, 0, 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkujb49zo.scala:34)\n\tat Problem.main(tmpkujb49zo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009557
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val sum1 = lst1.foldLeft(0)((acc,\
    \ n) => acc + n.length)\n        val sum2 = lst2.foldLeft(0)((acc, n) => acc +\
    \ n.length)\n        if (sum1 < sum2) lst1 else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsxed36tl.scala:30)\n\tat Problem.main(tmpsxed36tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009557
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1` total number of chars < `lst2` total number of chars\n    \
    \    // ==> `lst1` is the one to return\n        // AND\n        // `lst1` total\
    \ number of chars == `lst2` total number of chars\n        // ==> return `lst1`\n\
    \        var string1Total = 0\n        var string2Total = 0\n        for (string\
    \ <- lst1) string1Total += string.length\n        for (string <- lst2) string2Total\
    \ += string.length\n        if (string1Total < string2Total) lst1\n        else\
    \ lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6fezp3re.scala:34)\n\tat Problem.main(tmp6fezp3re.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009557
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1sum = lst1.map(_.length).sum\n\
    \        val lst2sum = lst2.map(_.length).sum\n        if (lst1sum < lst2sum)\
    \ lst1 else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5gb7usas.scala:30)\n\tat Problem.main(tmp5gb7usas.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val cnt1 = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val cnt2 = lst2.foldLeft(0)((acc, x) => acc +\
    \ x.length)\n        if (cnt1 <= cnt2) lst1 else lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case l1 :: l1s => lst2 match {\n                case\
    \ Nil => lst1\n                case l2 :: l2s => {\n                    if (totalSize(lst1)\
    \ <= totalSize(lst2)) lst1\n                    else lst2\n                }\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9q32ezey.scala:24:24 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    \e[33mif\e[0m (totalSize(lst1) <=\
    \ totalSize(lst2)) lst1\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: totalSize\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `totalMatch` should return the the list that has smaller number of\
    \ chars in the all strings of the list\n        // Remove the error and write\
    \ your implementation below\n        var sum1 = 0\n        var sum2 = 0\n    \
    \    for(i <- lst1){\n            sum1 += i.length\n        }\n        for(i <-\
    \ lst2){\n            sum2 += i.length\n        }\n        if(sum1 < sum2){\n\
    \            return lst1\n        }\n        else if(sum1 > sum2){\n         \
    \   return lst2\n        }\n        else{\n            return lst1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var first = 0\n        var\
    \ second = 0\n        for (i <- lst1) {\n            first += i.length\n     \
    \   }\n        for (i <- lst2) {\n            second += i.length\n        }\n\
    \        if (first > second) return lst2\n        else if (first < second) return\
    \ lst1\n        else return lst1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst1Length = 0\n      \
    \  for (elem <- lst1) {\n            lst1Length += elem.length\n        }\n  \
    \      var lst2Length = 0\n        for (elem <- lst2) {\n            lst2Length\
    \ += elem.length\n        }\n        if (lst1Length < lst2Length) {\n        \
    \    return lst1\n        } else {\n            return lst2\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8d5zco6j.scala:40)\n\tat Problem.main(tmp8d5zco6j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length > lst2.length)\
    \ return lst2\n        else if (lst1.length < lst2.length) return lst1\n     \
    \   return lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1dqy5f3a.scala:25)\n\tat Problem.main(tmp1dqy5f3a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      def count(lst : List[String])\
    \ : Int = lst match {\n        case Nil => 0\n        case (h :: t) => h.length\
    \ + count(t)\n      }\n      if (count(lst1) == count(lst2))\n        lst1\n \
    \     else if (count(lst1) < count(lst2))\n        lst1\n      else\n        lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.map(_.length).sum.compare(lst2.map(_.length).sum)\
    \ match {\n            case -1 => lst2\n            case _ => lst1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptpem8n4h.scala:26)\n\tat Problem.main(tmptpem8n4h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var t1 = 0\n        var t2\
    \ = 0\n        for (i <- lst1) {\n            t1 += i.length\n        }\n    \
    \    for (i <- lst2) {\n            t2 += i.length\n        }\n        if (t1\
    \ < t2) lst1 else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp39lvw7uz.scala:36)\n\tat Problem.main(tmp39lvw7uz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1CharCount = totalNumberOfChars(lst1)\n\
    \        val lst2CharCount = totalNumberOfChars(lst2)\n        if (lst1CharCount\
    \ < lst2CharCount) {\n            lst1\n        } else if (lst1CharCount > lst2CharCount)\
    \ {\n            lst2\n        } else {\n            lst1\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvbhzjwqo.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst1CharCount\e[0m = totalNumberOfChars(lst1)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: totalNumberOfChars\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvbhzjwqo.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst2CharCount\e[0m = totalNumberOfChars(lst2)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: totalNumberOfChars\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n    \tif (lst1.length < lst2.length)\
    \ lst1\n    \telse if (lst1.length > lst2.length) lst2\n    \telse lst1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpif6w1dry.scala:25)\n\tat Problem.main(tmpif6w1dry.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.isEmpty && lst2.isEmpty)\
    \ lst1\n        else if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n\
    \        else {\n            var lst1Total = 0\n            for (string <- lst1)\
    \ lst1Total += string.length\n            var lst2Total = 0\n            for (string\
    \ <- lst2) lst2Total += string.length\n            if (lst1Total <= lst2Total)\
    \ lst1\n            else lst2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpozsfkhgd.scala:39)\n\tat Problem.main(tmpozsfkhgd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your code here\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpue4_0xzo.scala:18:78\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mtotalMatch\e\
    [0m(\e[36mlst1\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mlst2\e[0m : \e\
    [35mList\e[0m[\e[35mString\e[0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    Unit\n\e[31m   |\e[0m                            \
    \                      Required: List[String]\n\e[31m19 |\e[0m        \e[34m//\
    \ Your code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009510
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1TotalLength = lst1.foldLeft(0)((b,\
    \ a) => a.length + b)\n        val lst2TotalLength = lst2.foldLeft(0)((b, a) =>\
    \ a.length + b)\n        if (lst1TotalLength == lst2TotalLength) lst1\n      \
    \  else if (lst1TotalLength < lst2TotalLength) lst1\n        else lst2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.size == 0) return\
    \ lst2\n        if (lst2.size == 0) return lst1\n        if (lst1.foldLeft(0)((acc,\
    \ str) => acc + str.size) < lst2.foldLeft(0)((acc, str) => acc + str.size)) return\
    \ lst1\n        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsq55s8hz.scala:31)\n\tat Problem.main(tmpsq55s8hz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.isEmpty && lst2.isEmpty)\
    \ (List[String]())\n        else if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty)\
    \ lst1\n        else {\n            var lst1Sum = 0\n            for (str <- lst1)\
    \ lst1Sum += str.length\n            var lst2Sum = 0\n            for (str <-\
    \ lst2) lst2Sum += str.length\n            if (lst1Sum < lst2Sum) lst1\n     \
    \       else if (lst1Sum > lst2Sum) lst2\n            else lst1\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmpkq0do0.scala:40)\n\tat Problem.main(tmpmpkq0do0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.isEmpty) return lst2\n\
    \        if (lst2.isEmpty) return lst1\n        if (lst1.foldLeft(0)((acc, i)\
    \ => acc + i.length) == lst2.foldLeft(0)((acc, i) => acc + i.length)) return lst1\n\
    \        if (lst1.foldLeft(0)((acc, i) => acc + i.length) < lst2.foldLeft(0)((acc,\
    \ i) => acc + i.length)) return lst1\n        return lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdh_8a36v.scala:33)\n\tat Problem.main(tmpdh_8a36v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // fill in the last parameter\n\
    \        def totalMatch_helper(lst1 : List[String], lst2 : List[String], count1\
    \ : Int, count2 : Int) : List[String] = {\n            if (lst1.isEmpty) return\
    \ lst2\n            if (lst2.isEmpty) return lst1\n            val head1 = lst1.head\n\
    \            val head2 = lst2.head\n            if (head1.length > head2.length)\
    \ return totalMatch_helper(lst1.tail, lst2, count1, count2 + head2.length)\n \
    \           else if (head1.length < head2.length) return totalMatch_helper(lst1,\
    \ lst2.tail, count1 + head1.length, count2)\n            else return totalMatch_helper(lst1.tail,\
    \ lst2.tail, count1 + head1.length, count2 + head2.length)\n        }\n      \
    \  totalMatch_helper(lst1, lst2, 0, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzoau76v0.scala:33)\n\tat Problem.main(tmpzoau76v0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if(lst1.length == 0 && lst2.length\
    \ == 0) return List[String]()\n        var total1 = 0\n        var total2 = 0\n\
    \        for(i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n\
    \        }\n        for(i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if(total1 < total2) return lst1\n        else if(total1 >\
    \ total2) return lst2\n        else return lst1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val t1 = lst1.foldLeft(0)((x,\
    \ y) => x + y.length)\n        val t2 = lst2.foldLeft(0)((x, y) => x + y.length)\n\
    \        if (t1 < t2) lst1 else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcx9wb9f.scala:30)\n\tat Problem.main(tmpdcx9wb9f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1`, `lst2` are lists of strings\n        // You have to return\
    \ the list that has total number of chars in the all strings of the list less\
    \ than the other list.\n        // If the two lists have the same number of chars,\
    \ return the first list.\n        if (lst1.flatten.length > lst2.flatten.length)\
    \ lst2\n        else lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009565
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val s1 = lst1.reduce((x, y)\
    \ => x + y)\n        val s2 = lst2.reduce((x, y) => x + y)\n        if (s1.length\
    \ == s2.length) lst1\n        else if (s1.length < s2.length) lst1\n        else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.totalMatch(tmpkla6cuva.scala:19)\n\tat Problem$.main(tmpkla6cuva.scala:26)\n\
    \tat Problem.main(tmpkla6cuva.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Note: lst1.foldLeft(0)(_\
    \ + _.length) is not correct because it will throw exception\n        // if there\
    \ is no element in lst1.\n        // Note: lst1.map(_.length).foldLeft(0)(_ +\
    \ _) does not work because it will first\n        // convert all the strings to\
    \ its length, then do the folding to the list.\n        val total1 = if (lst1.isEmpty)\
    \ 0 else lst1.map(_.length).reduceLeft(_ + _)\n        val total2 = if (lst2.isEmpty)\
    \ 0 else lst2.map(_.length).reduceLeft(_ + _)\n        if (total1 <= total2) lst1\
    \ else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      val sum1 = lst1.foldLeft(0)((accumulator,\
    \ str) => accumulator + str.length)\n      val sum2 = lst2.foldLeft(0)((accumulator,\
    \ str) => accumulator + str.length)\n      if (sum1 == sum2) lst1\n      else\
    \ if (sum1 < sum2) lst1\n      else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1total = lst1.foldLeft(0)((a,\
    \ b) => a + b.length)\n        val lst2total = lst2.foldLeft(0)((a, b) => a +\
    \ b.length)\n        if (lst1total == lst2total) lst1\n        else if (lst1total\
    \ < lst2total) lst1\n        else lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \                // Method 1\n                // if (lst1.map(_.length).sum <=\
    \ lst2.map(_.length).sum) lst1 else lst2\n                // Method 2\n      \
    \          val sumLst1 = lst1.map(_.length).sum\n                val sumLst2 =\
    \ lst2.map(_.length).sum\n                if (sumLst1 <= sumLst2) lst1 else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n    \tval totallst1 = lst1.foldLeft(0)((x,\
    \ y) => x + y.length)\n    \tval totallst2 = lst2.foldLeft(0)((x, y) => x + y.length)\n\
    \    \tif (totallst1 < totallst2) lst1\n    \telse lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp38q7pjc.scala:31)\n\tat Problem.main(tmpp38q7pjc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var lst1Total = 0\n       \
    \ for (i <- lst1) lst1Total += i.length\n        var lst2Total = 0\n        for\
    \ (i <- lst2) lst2Total += i.length\n        if (lst1Total < lst2Total) lst1\n\
    \        else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpefjarx6e.scala:33)\n\tat Problem.main(tmpefjarx6e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `totalCount` is a helper function to get total number of characters\
    \ in a list of strings\n        def totalCount(lst : List[String]) : Int = {\n\
    \            var count = 0\n            for (i <- lst) {\n                count\
    \ += i.length\n            }\n            count\n        }\n        // The length\
    \ of the first list is less than the second list\n        if (totalCount(lst1)\
    \ < totalCount(lst2)) {\n            lst1\n        }\n        // If the lengths\
    \ of the two lists are equal\n        else if (totalCount(lst1) == totalCount(lst2))\
    \ {\n            lst1\n        }\n        // The length of the second list is\
    \ less than the first list\n        else {\n            lst2\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // This is one of the most\
    \ common algorithms in computer science.\n        // Starting from an empty list,\
    \ we fold through each element in the list,\n        // applying a function on\
    \ each fold. In this case, we add the length of the string\n        // to the\
    \ running total. At the end, we return the running total length.\n        // 'list.foldLeft(initial)(function)'\
    \ is the same as \n        // 'reduceLeft(list, initial, function)'\n        def\
    \ listTotal(list : List[String]) : Int = list.foldLeft(0)((total, element) =>\
    \ total + element.length)\n        if (listTotal(lst1) < listTotal(lst2)) lst1\
    \ else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkg1ncu3s.scala:35)\n\tat Problem.main(tmpkg1ncu3s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val sum1 = lst1.map(_.length).sum\n\
    \        val sum2 = lst2.map(_.length).sum\n        if (sum1 < sum2) lst1 else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpctn7armp.scala:30)\n\tat Problem.main(tmpctn7armp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.isEmpty && lst2.isEmpty)\n\
    \            return lst1\n        if (lst1.isEmpty)\n            return lst2\n\
    \        if (lst2.isEmpty)\n            return lst1\n        var lst1size = 0\n\
    \        var lst2size = 0\n        lst1.foreach(str => lst1size += str.length)\n\
    \        lst2.foreach(str => lst2size += str.length)\n        if (lst1size ==\
    \ lst2size)\n            return lst1\n        if (lst1size < lst2size)\n     \
    \       return lst1\n        return lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1b4yffa.scala:43)\n\tat Problem.main(tmpo1b4yffa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.isEmpty) return lst2\n\
    \        if (lst2.isEmpty) return lst1\n        val count1 = lst1.map(x => x.length).sum\n\
    \        val count2 = lst2.map(x => x.length).sum\n        if (count1 < count2)\
    \ return lst1\n        else if (count1 > count2) return lst2\n        else return\
    \ lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjc3h6a1t.scala:35)\n\tat Problem.main(tmpjc3h6a1t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0 && lst2.length\
    \ == 0) return List[String]()\n        else if (lst1.length == 0) return lst2\n\
    \        else if (lst2.length == 0) return lst1\n        else {\n            var\
    \ lst1CharTotal = 0\n            for (i <- 0 until lst1.length) {\n          \
    \      lst1CharTotal += lst1(i).length\n            }\n            var lst2CharTotal\
    \ = 0\n            for (i <- 0 until lst2.length) {\n                lst2CharTotal\
    \ += lst2(i).length\n            }\n            if (lst1CharTotal < lst2CharTotal)\
    \ return lst1\n            else if (lst1CharTotal > lst2CharTotal) return lst2\n\
    \            else return lst1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4aai8o5a.scala:44)\n\tat Problem.main(tmp4aai8o5a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `total` is a placeholder, replace it with the actual code\n      \
    \  (lst1, lst2) match {\n          case (List(), List()) => List()\n         \
    \ case (List(), xs) => xs\n          case (xs, List()) => xs\n          case (x::xs,\
    \ y::ys) => {\n            if(x.length <= y.length) x::totalMatch(xs, ys)\n  \
    \          else y::totalMatch(xs, ys)\n          }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9uonw49q.scala:34)\n\tat Problem.main(tmp9uonw49q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n    \tval sum1 = lst1.foldLeft(0)((sum,\
    \ e) => sum + e.length)\n    \tval sum2 = lst2.foldLeft(0)((sum, e) => sum + e.length)\n\
    \    \tif (sum1 == sum2) lst1\n    \telse if (sum1 < sum2) lst1\n    \telse lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      var total1 : Int = 0\n      for\
    \ (i <- lst1) {\n        total1 += i.length\n      }\n      var total2 : Int =\
    \ 0\n      for (i <- lst2) {\n        total2 += i.length\n      }\n      if (total1\
    \ < total2) lst1\n      else if (total1 > total2) lst2\n      else lst1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val result = lst1.map(x =>\
    \ x.length).sum - lst2.map(x => x.length).sum\n        result match {\n      \
    \      case result if (result > 0) => lst2\n            case result if (result\
    \ < 0) => lst1\n            case _ => lst1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length > lst2.length)\
    \ lst2\n        else if (lst1.length < lst2.length) lst1\n        else {\n   \
    \         var sum1 = 0\n            var sum2 = 0\n            for (i <- 0 until\
    \ lst1.length) {\n                sum1 += lst1(i).length\n                sum2\
    \ += lst2(i).length\n            }\n            if (sum1 <= sum2) lst1\n     \
    \       else lst2\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1mlm1lkk.scala:38)\n\tat Problem.main(tmp1mlm1lkk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1` List of Strings\n        // `lst2` List of Strings\n      \
    \  // return List of Strings\n        lst1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaz5j1lwe.scala:27)\n\tat Problem.main(tmpaz5j1lwe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Len = lst1.map(_.length).sum\n\
    \        val lst2Len = lst2.map(_.length).sum\n        if (lst1Len <= lst2Len)\
    \ lst1 else lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill up this function body\n\
    \        // `totalMatch` should return the list that has total number of chars\
    \ in the all \n        // strings of the list less than the other list.\n    \
    \    // if the two lists have the same number of chars, return the first list.\n\
    \        (lst1, lst2) match {\n            case (Nil, _) => Nil\n            case\
    \ (_, Nil) => Nil\n            case _ => {\n                val x = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n                val y = lst2.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n                if (x < y) lst1 else lst2\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcwipytvg.scala:40)\n\tat Problem.main(tmpcwipytvg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) return lst1\n        if (lst1.map(_.length).sum >\
    \ lst2.map(_.length).sum) return lst2\n        return lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are List[String]\n        // Compute and return\
    \ the proper List[String]\n        if (lst1.length == 0) return lst2\n       \
    \ if (lst2.length == 0) return lst1\n        var total1 = 0\n        var total2\
    \ = 0\n        for (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        if (total1 > total2)\
    \ return lst2\n        return lst1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoo_a_et9.scala:44)\n\tat Problem.main(tmpoo_a_et9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Your code goes here\n  \
    \      var L1 = lst1\n        var L2 = lst2\n        var a = L1.map(x => x.length).sum\n\
    \        var b = L2.map(x => x.length).sum\n        if (a < b) return L1\n   \
    \     else if (a > b) return L2\n        else if (a == b) return L1\n        else\
    \ return List(\"error\")\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        val lst1char\
    \ = lst1.foldLeft(0)((a,b) => a + b.length)\n        val lst2char = lst2.foldLeft(0)((a,b)\
    \ => a + b.length)\n        if (lst1char < lst2char) lst1 else lst2\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qxsj640.scala:32)\n\tat Problem.main(tmp1qxsj640.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // Fill Up this function body\n\
    \        // `totalStringLength` is a helper function\n        // Do not modify\
    \ function defination\n        def totalStringLength(lst : List[String]) : Int\
    \ = {\n            // Fill Up this function body\n            // This function\
    \ returns the total number of character in all the strings of the list\n     \
    \       var sum = 0\n            for (i <- lst) sum += i.length\n            sum\n\
    \        }\n        val tsl1 = totalStringLength(lst1)\n        val tsl2 = totalStringLength(lst2)\n\
    \        if (tsl1 < tsl2) lst1\n        else if (tsl1 > tsl2) lst2\n        else\
    \ lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def totalMatchRec(lst1 : List[String],\
    \ lst2 : List[String], n1 : Int, n2 : Int) : List[String] = {\n            (lst1,\
    \ lst2) match {\n                case (Nil, _) => if (n1 <= n2) lst1 else lst2\n\
    \                case (_, Nil) => if (n1 <= n2) lst1 else lst2\n             \
    \   case (h1 :: t1, h2 :: t2) => {\n                    val n1n = n1 + h1.length\n\
    \                    val n2n = n2 + h2.length\n                    if (n1n <=\
    \ n2n) totalMatchRec(t1, lst2, n1n, n2) else totalMatchRec(lst1, t2, n1, n2n)\n\
    \                }\n            }\n        }\n        totalMatchRec(lst1, lst2,\
    \ 0, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu_at_egf.scala:34)\n\tat Problem.main(tmpu_at_egf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val sum1 = lst1.map(_.length).sum\n\
    \        val sum2 = lst2.map(_.length).sum\n        if (sum1 < sum2) lst1 else\
    \ lst2\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpctn7armp.scala:30)\n\tat Problem.main(tmpctn7armp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def totalChars(lst : List[String])\
    \ : Int = {\n            lst.foldLeft(0)((acc, str) => acc + str.length)\n   \
    \     }\n        if (totalChars(lst1) == totalChars(lst2)) lst1\n        else\
    \ if (totalChars(lst1) < totalChars(lst2)) lst1\n        else lst2\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        def totalChars(lst : List[String])\
    \ : Int = {\n            if (lst.isEmpty) 0\n            else lst.head.length\
    \ + totalChars(lst.tail)\n        }\n        if (totalChars(lst1) < totalChars(lst2))\
    \ lst1\n        else if (totalChars(lst1) > totalChars(lst2)) lst2\n        else\
    \ lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n      // Fill Up this function body\n\
    \      // This function takes in two lists of strings lst1 and lst2\n      //\
    \ Returns a list that has total number of chars in the all strings of the list\
    \ less than the other list.\n      // if the two lists have the same number of\
    \ chars, return the first list.\n      var lst1sum = 0\n      var lst2sum = 0\n\
    \      for (x <- lst1) {\n        lst1sum += x.length\n      }\n      for (x <-\
    \ lst2) {\n        lst2sum += x.length\n      }\n      if (lst1sum < lst2sum)\
    \ {\n        return lst1\n      }\n      else if (lst1sum > lst2sum) {\n     \
    \   return lst2\n      }\n      else {\n        return lst1\n      }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        if (lst1.length == 0 && lst2.length\
    \ == 0) {\n            lst1\n        } else if (lst1.length == 0 && lst2.length\
    \ != 0) {\n            lst2\n        } else if (lst1.length != 0 && lst2.length\
    \ == 0) {\n            lst1\n        } else {\n            val totalChars1 = lst1.foldLeft(0)((sum,\
    \ element) => sum + element.length)\n            val totalChars2 = lst2.foldLeft(0)((sum,\
    \ element) => sum + element.length)\n            if (totalChars1 == totalChars2)\
    \ {\n                lst1\n            } else if (totalChars1 < totalChars2) {\n\
    \                lst1\n            } else {\n                lst2\n          \
    \  }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfz0heskw.scala:45)\n\tat Problem.main(tmpfz0heskw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty)\
    \ lst1\n        else {\n            val lst1Length = lst1.map(_.length).sum\n\
    \            val lst2Length = lst2.map(_.length).sum\n            if (lst1Length\
    \ == lst2Length) lst1\n            else if (lst1Length < lst2Length) lst1\n  \
    \          else lst2\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnxgqquys.scala:39)\n\tat Problem.main(tmpnxgqquys.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        var total1 = 0\n        var\
    \ total2 = 0\n        for (s <- lst1) total1 += s.length\n        for (s <- lst2)\
    \ total2 += s.length\n        if (total1 <= total2) lst1 else lst2\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009575
