name: HumanEval_66_digitSum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Task\n    // Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n   \
  \ // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n    //\
  \ (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
  helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n  \
  \  // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String) :\
  \ Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\"))\
  \ == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
  abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
  woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
  \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) ==\
  \ (327l));\n    }\n\n}\n"
completions: ["        // Fill here!\n        return s.filter(_.isUpper).map(_.toInt).sum",
  "        // Function body start\n        var sum : Long = 0\n        for ( c <-\
    \ s) {\n            if(c.isUpper) {\n                sum += c.toInt\n        \
    \    }\n        }\n        sum\n        // Function body end", "        // 0.\
    \ Your implementation goes here\n        // 0.1. Return\n        return s.toList.map(x\
    \ => x.toUpper).map(y => y.toInt).sum", '        s.toUpperCase.map(c => c.toInt).filter(c
    => c >= 65 && c <= 90).sum', "        // Write your code here\n        s.filter(c\
    \ => c.isUpper).map(c => c.toInt).sum", '        s.toCharArray.filter(_.isUpper).map(_.toLong).sum',
  '        0l', "        val upper = \"[A-Z]\".r\n        s.toList.map(c => c.toInt).filter(c\
    \ => upper.findFirstIn(c.toChar.toString).isDefined).sum", '        s.map(_.toInt).filter(_
    >= 65).filter(_ <= 90).sum', "        def isUpper(c : Char) : Boolean = c >= 'A'\
    \ && c <= 'Z'\n        return s.filter(isUpper(_)).map(_.toInt).sum", '        s.foldLeft(0L)((a,b)
    => if (b.isUpper) a + b.toInt else a)', "        var l : Long = 0\n        for\
    \ (ch <- s) {\n            val n = ch.toInt\n            if (n >= 65 && n <= 90)\
    \ {\n                l += n\n            }\n        }\n        l", "        //\
    \ Write your code here.\n        return 0;", "        // 1. Transform the string\
    \ into an array of characters\n        // 2. Filter the array using the condition\
    \ 'upper'\n        // 3. Transform the array into a string\n        // 4. Transform\
    \ the string into an array of characters\n        // 5. Sum the values of the\
    \ characters after transforming them into integers\n        s.toCharArray().filter(_.isUpper).mkString.toCharArray().map(_.toInt).sum",
  "        // Type your code here\n        var result = 0L\n        for (c <- s) {\n\
    \            val t = c.toInt\n            if (t >= 65 && t <= 90) {\n        \
    \        result += t\n            }\n        }\n        result", "        // Write\
    \ your code here\n        s.toList.filter(_.isUpper).map(_.toInt).sum", "    \
    \    return s.map(x => {if (x >= 'A' && x <= 'Z') x else 0}).sum", "        //\
    \ Code an algorithm to solve this problem\n        val upperList = s.filter(_.isUpper)\n\
    \        upperList.map(_.toLong).sum", "        if (s.length == 0) return 0\n\
    \        else return s.toUpperCase.map( c => if (c >= 'A' && c <= 'Z') c.toLong\
    \ else 0).sum", "        var b = 0l\n        for (a <- s.toCharArray()) {\n  \
    \          if (a >= 'A' && a <= 'Z') b += a\n        }\n        b", "        val\
    \ filtered = s.toList.filter(c => c.isUpper)\n        val mapped = filtered.map(c\
    \ => c.toLong)\n        mapped.sum", "        if (s.isEmpty) 0\n        else {\n\
    \            var upperChar = s.filter(_.isUpper)\n            var sum : Long =\
    \ 0\n            var i = 0\n            while (i < upperChar.length) {\n     \
    \           sum += upperChar(i).toInt\n                i += 1\n            }\n\
    \            sum\n        }", "        // TODO: Write your code here\n       \
    \ var sum = 0l\n        for (x <- s) {\n            if (x.isUpper) {\n       \
    \         sum += x.toInt\n            }\n        }\n        sum", "        var\
    \ sum : Long = 0l\n        for (c <- s) {\n            if (c.isUpper) {\n    \
    \            sum += c.toInt\n            }\n        }\n        return sum", " \
    \       var result : Long = 0l\n        for (c <- s.toList) {\n            if\
    \ (c.isUpper) {\n                result += c.toInt\n            }\n        }\n\
    \        return result", "        def digitSumAcc(s : String, result : Long) :\
    \ Long = {\n            if (s.isEmpty)\n                result\n            else\
    \ if (s.head >= 'A' && s.head <= 'Z')\n                digitSumAcc(s.tail, result\
    \ + s.head)\n            else\n                digitSumAcc(s.tail, result)\n \
    \       }\n        digitSumAcc(s, 0)", '        s.toUpperCase.toCharArray.map(c
    => c.toInt).sum', '        s.filter(isUpper(_)).map(_.toLong).sum', '        s.filter(p
    => 65 <= p && p <= 90).map(p => p.toInt).sum', '        s.filter(c => c.isUpper).map(c
    => c.toLong).sum', "        // Your code here!\n        s.map{_ match {\n    \
    \        case 'a' => 0\n            case 'b' => 0\n            case 'c' => 0\n\
    \            case 'd' => 0\n            case 'e' => 0\n            case 'f' =>\
    \ 0\n            case 'g' => 0\n            case 'h' => 0\n            case 'i'\
    \ => 0\n            case 'j' => 0\n            case 'k' => 0\n            case\
    \ 'l' => 0\n            case 'm' => 0\n            case 'n' => 0\n           \
    \ case 'o' => 0\n            case 'p' => 0\n            case 'q' => 0\n      \
    \      case 'r' => 0\n            case 's' => 0\n            case 't' => 0\n \
    \           case 'u' => 0\n            case 'v' => 0\n            case 'w' =>\
    \ 0\n            case 'x' => 0\n            case 'y' => 0\n            case 'z'\
    \ => 0\n            case 'A' => 65\n            case 'B' => 66\n            case\
    \ 'C' => 67\n            case 'D' => 68\n            case 'E' => 69\n        \
    \    case 'F' => 70\n            case 'G' => 71\n            case 'H' => 72\n\
    \            case 'I' => 73\n            case 'J' => 74\n            case 'K'\
    \ => 75\n            case 'L' => 76\n            case 'M' => 77\n            case\
    \ 'N' => 78\n            case 'O' => 79\n            case 'P' => 80\n        \
    \    case 'Q' => 81\n            case 'R' => 82\n            case 'S' => 83\n\
    \            case 'T' => 84\n            case 'U' => 85\n            case 'V'\
    \ => 86\n            case 'W' => 87\n            case 'X' => 88\n            case\
    \ 'Y' => 89\n            case 'Z' => 90\n        }}.sum", "        var res : Long\
    \ = 0\n        for (c <- s) {\n            res += c.toLong\n        }\n      \
    \  res", '        // Your Code Here', "        var res = 0;\n        for (i <-\
    \ 0 until s.length) {\n            if (s(i).isUpper) {\n                res +=\
    \ s(i).toInt;\n            }\n        }\n        return res;", "        // Exercise\n\
    \        (0l /: s.toUpperCase) {\n            (acc, c) => \n                acc\
    \ + c.toLong\n        }", '        return s.map(ch => if (ch.isUpper) ch.toLong
    else 0l).sum', '        throw new UnsupportedOperationException', "        //\
    \ Write your code here.\n        return 0;", '        s.filter(_.isUpper).map(_.toInt).sum',
  "    // Write your code here\n        var l = 0l\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i).isUpper) {\n                l += s(i).toInt\n      \
    \      }\n        }\n        l", "        require(s.length > 0)\n        var sum\
    \ : Long = 0\n        val upper : String = s.toUpperCase\n        for (i <- 0\
    \ until s.length) {\n            if (s(i) == upper(i)) sum += (s(i)).toLong\n\
    \        }\n        sum", "        // return 0l;\n        s.filter(_.isUpper).map(_.toLong).sum",
  '        s.toList.filter((c) => c.isUpper).map((c) => c.toInt).sum', "        val\
    \ upperCase = (('A' to 'Z') ++ ('0' to '9')).map(_.toInt).toSet\n        s.toUpperCase.foldLeft(0)((sum,\
    \ x) => if (upperCase(x)) sum + x else sum)", '        // Write your code here',
  "        def f(i : Int, acc : Long) : Long = i match {\n            case i if i\
    \ == s.length => acc\n            case _ => \n                if (s(i).isUpper)\
    \ f(i + 1, acc + s(i).toLong)\n                else f(i + 1, acc)\n        }\n\
    \        f(0, 0)", "        val a : Array[Char] = s.toCharArray\n        var sum\
    \ : Long = 0\n        for (c <- a) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                sum += c.toInt\n            }\n        }\n        return sum",
  '        s.toUpperCase.filter(_.isUpper).map(_.toLong).sum', "        var sum =\
    \ 0l\n        for (c <- s.toCharArray) if (c.isUpper) sum += c.toInt\n       \
    \ sum", "        // Implement this\n        s.map{x => if (x <= 90 && x >= 65)\
    \ x else 0}.foldLeft(0l)(_ + _)", "        require(s.length() >= 0)\n        var\
    \ sum = 0\n        for (i <- 0 until s.length()) {\n            val c = s.charAt(i)\n\
    \            if (c >= 'A' && c <= 'Z') {\n                sum += (c.toInt - 'A'\
    \ + 1)\n            }\n        }\n        return sum", '        s.map(_.toInt).filter(_
    >= 65).filter(_ <= 90).sum', '        s.map(c => if (c.isUpper) c.toLong else
    0l).sum', "        // Write your code here\n        return 0l", "        // this\
    \ will map the code of the A-Z chars in the String\n        s.map(x => x.toInt).filter(x\
    \ => x >= 65 && x <= 90).sum", '        s.toUpperCase.map(x => x.toInt).sum',
  '        return s.map(_.toInt).filter(_ > 64).filter(_ < 91).sum', "        var\
    \ sum = 0l\n        for (c <- s) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                sum += c.toInt\n            }\n        }\n        return sum",
  "        // BEGIN SOLUTION\n        val codes = s.toUpperCase().map(_.toLong)\n\
    \        val sum = codes.foldLeft(0L)(_ + _)\n        sum\n        // END SOLUTION",
  '        // Write your code here', '        return 0', "        var ret = 0l\n \
    \       for (i <- 0 until s.length) {\n            if (s(i).isUpper) {\n     \
    \           ret += s(i).toInt\n            }\n        }\n        ret", "     \
    \   if (s.isEmpty) {\n            0l\n        } else {\n            val s2 = s.toUpperCase();\n\
    \            if (s2.head >= 'A' && s2.head <= 'Z') {\n                s2.head.toLong\
    \ + digitSum(s2.tail)\n            } else {\n                digitSum(s2.tail)\n\
    \            }\n        }", '        // Solution here', '        ???', '        ???',
  "\t\t// Fill in your solution below\n\t\ts.filter(x => x.isUpper).map(x => x.toInt).sum",
  "        // Fill In\n        return 0l", '        return s.filter(x => x.isUpper).map(x
    => x.toInt).sum', '        s.toCharArray.map(a => if (a.isUpper) a.toLong else
    0).sum', "        var c = 0\n        for (x <- s) {\n            if (Character.isUpperCase(x))\
    \ c += x.toInt\n        }\n        return c", '        s.map(x => if (x.isUpper)
    x.toLong else 0).sum', '        if (s.size == 0) 0 else s.head.toUpper.toLong
    + digitSum(s.tail)', '        s.map(x => x.toInt).filter(x => x >= 65 && x <=
    90).sum', '        s.map(x => x.toInt).filter(y => y >= 65 && y <= 90).sum', '        (for(c
    <- s if c.isUpper) yield c.toLong).sum', "        var sum = 0l\n        s.foreach((c\
    \ : Char) => if (c.isUpper) sum += c.toInt)\n        sum", "        val digits\
    \ = s.map(_.toLong)\n        val sum = digits.reduce(_ + _)\n        sum", " \
    \       val valueList = (for (i <- s.toUpperCase().toCharArray() if i >= 'A' &&\
    \ i <= 'Z') yield i.toLong).sum\n        return valueList", "        if (s.isEmpty)\
    \ return 0\n        val sList = s.toList\n        return sList.filter(c => c.isUpper).map(c\
    \ => c.toLong).sum", '        throw new NotImplementedError()', "        def iter(s\
    \ : String, acc : Long) : Long = {\n            if (s.isEmpty)\n             \
    \   acc\n            else {\n                val x = s.head\n                if\
    \ (x >= 'A' && x <= 'Z')\n                    iter(s.tail, acc + x)\n        \
    \        else\n                    iter(s.tail, acc)\n            }\n        }\n\
    \        iter(s, 0)", "        var sum = 0l\n        for (c <- s) {\n        \
    \    if (c >= 'A' && c <= 'Z') {\n                sum += c.toInt\n           \
    \ }\n        }\n        return sum", "        return s.foldLeft(0) { (acc, c)\
    \ =>\n            if(c.isUpper) {\n                acc + c.toInt\n           \
    \ } else {\n                acc\n            }\n        }", '        return s.filter(_.isUpper).map(_.toLong).sum',
  "        val s = s.toUpperCase\n        s.foldLeft(0)((acc, c) => acc + c)", " \
    \       require(!s.isEmpty)\n        var sum = 0\n        for (i <- 0 until s.length)\
    \ {\n            var x = s(i)\n            if (x.isUpper) {\n                sum\
    \ += x.toInt\n            }\n        }\n        sum", "        var total = 0l\n\
    \        for (c <- s) {\n            val code = c.toInt\n            if (code\
    \ >= 65 && code <= 90) {\n                total += code\n            }\n     \
    \   }\n        total", "        var sum : Long = 0\n        s.toUpperCase().foreach(c\
    \ => sum += (c.toLong - 64))\n        return sum", "        var sum = 0\n    \
    \    for (i <- 0 until s.length) {\n            val ascii = s(i).toInt\n     \
    \       if (ascii >= 65 && ascii <= 90) {\n                sum += ascii\n    \
    \        }\n        }\n        sum", '        // Write your code here', "    \
    \    // your code here\n        (0l)", '        return -1', "        var sum =\
    \ 0l\n        s.foreach(c => { if (c.isUpper) sum += c.toInt })\n        sum",
  '        s.map((c) => if (c.isUpper) c.toInt else 0).sum', '        (for (ch <-
    s) yield if (ch.isUpper) ch.toInt else 0).sum', '        s.toCharArray.filter(x
    => x.isUpper).map(x => x.toLong).sum', "        s.foldLeft(0l)((acc, c) => {\n\
    \            if (c >= 'A' && c <= 'Z')\n                acc + c.toInt\n      \
    \      else\n                acc\n        })", "        var sum = 0l\n       \
    \ for (char <- s) {\n            if (char.isUpper) sum += char.toInt\n       \
    \ }\n        sum", "        // Write your code here\n        return 0l", "   \
    \     val alphabets = ('A' to 'Z').toList\n        s.toList.map(_.toInt).filter(alphabets.contains(_)).sum",
  "        var buffer = 0L\n        for (i <- 0 until s.length) {\n            val\
    \ c = s.charAt(i)\n            if (65 <= c && c <= 90) buffer += c\n        }\n\
    \        buffer", "        val sum = s.toUpperCase.map(x => if (x >= 'A' && x\
    \ <= 'Z') x.toInt else 0).sum\n        return sum", "        // Put your solution\
    \ here\n        var sum = 0l\n        for (c <- s) if (c >= 'A' && c <= 'Z') sum\
    \ += c\n        sum", "        s.toCharArray.map(x => if (x >= 'A' && x <= 'Z')\
    \ x.toLong else 0l).sum", '        s.filter(x => x.isUpper).map(x => x.toInt).sum',
  '        s.foldLeft(0l)((total, c) => if (c.isUpper) total + c.toInt else total)',
  "        var sum : Long = 0\n        for (c <- s) {\n            val x = c.toInt\n\
    \            if (x >= 65 && x <= 90) {\n                sum += x\n           \
    \ }\n        }\n        return sum", "        val codes = s.map(ch => ch.toLong).filter(n\
    \ => n >= 'A'.toLong && n <= 'Z'.toLong)\n        var result = 0l\n        for\
    \ (n <- codes) {\n            result += n\n        }\n        result", "     \
    \   def v(c : Char) : Long = c.toLong\n        def f(s : List[Char]) : Long =\
    \ s match {\n            case Nil => 0\n            case h :: t => v(h) + f(t)\n\
    \        }\n        f(s.toList.filter(_.isUpper))", "      val (a, b) = (\n  \
    \      s.filter(x => x.isUpper).toSeq,\n        s.filter(x => x.isLower).toSeq\n\
    \      )\n      val upperDigits = a.map(char => char.toInt).sum\n      val lowerDigits\
    \ = b.map(char => char.toInt).sum\n      (upperDigits - lowerDigits).toLong",
  "        // TODO\n        return s.length", "        // TODO\n        var result\
    \ = 0\n        for (c <- s) {\n            result += if (c >= 'A' && c <= 'Z')\
    \ c else 0\n        }\n        result", "        val c = s.toUpperCase.toList\n\
    \        c.foldLeft(0l)((a, b) => a + b)", "        // Edge Case\n        if (s.length()\
    \ == 0) {\n            return 0l\n        }\n        // Logic\n        var sum\
    \ = 0l\n        for (i <- 0 until s.length()) {\n            var char = s.charAt(i)\n\
    \            // Check if uppercase\n            if (char >= 'A' && char <= 'Z')\
    \ {\n                // Convert char to int\n                var charInt = char.toInt\n\
    \                // Sum\n                sum += charInt\n            }\n     \
    \   }\n        return sum", "        val upper = 'A' to 'Z'\n        s.map(c =>\
    \ if (upper.contains(c)) c.toInt else 0).sum", '      s.filter(_.isUpper).map(_.toLong).sum',
  "        // Write your code here\n        return 0", "        val upperChar = ('A'\
    \ to 'Z').toList\n        s.filter(upperChar.contains(_)).map(_.toInt).sum", '        s.filter(x
    => x.isUpper).foldLeft(0L)((acc, x) => acc + x.toLong)', "        // TODO: Your\
    \ answer here\n        def go(s : String, total : Long) : Long = {\n         \
    \   if (s.isEmpty) total\n            else if (s.head.isUpper) go(s.tail, total\
    \ + s.head.toInt)\n            else go(s.tail, total)\n        }\n        go(s,\
    \ 0)", "        var sum = 0l\n        for (c <- s) if (c.isUpper) sum += c.toInt\n\
    \        sum", "    }\n}", '      s.toList.map(x => if (x.isUpper) x.toInt else
    0).sum', "        // Recursive solution\n        if (s.length > 0) s.head.toInt\
    \ + digitSum(s.tail)\n        else 0", "      // Replace the line below with your\
    \ code\n      var sum: Long = 0\n      for (i <- 0 until s.length) {\n       \
    \ if (s(i).isUpper) {\n          sum += s(i).toLong\n        }\n      }\n    \
    \  sum", '    s.foldLeft(0)((sum, c) => sum + (if (c.isUpper) c else 0))', " \
    \       var x = s.map(x => x.toInt).filter(x => x >= 65 && x <= 90).sum\n    \
    \    println(x)\n        x", "        var sum : Long = 0\n        s.foreach {\
    \ c =>\n            var code : Int = c.toInt\n            if (code >= 65 && code\
    \ <= 90) {\n                sum += code\n            }\n        }\n        return\
    \ sum", '        s.toUpperCase.foldLeft(0L)((a, b) => a + b.toLong)', '        s.toUpperCase.foldLeft(0){case
    (a, x) => a + x.toInt}', '        s.toUpperCase.map(x => x.toInt).filter(x =>
    x >= 65 && x <= 90).sum', "        // Write your code here\n        s.map(ch =>\
    \ if (ch.isUpper) ch.toLong else 0).sum", "        var sum = 0l\n        for (i\
    \ <- 0 until s.length) {\n            val code = s(i).toInt\n            if (code\
    \ >= 65 && code <= 90) sum += code\n        }\n        sum", '        0l', '        0l',
  "        // Long is a signed 64-bit integer.\n        // Int is a signed 32-bit\
    \ integer.\n        // You can omit the 'l' or 'L' on the end of a long literal.\n\
    \        0L", "        var sum = 0L\n        for (i <- 0 until s.length()) {\n\
    \            if (s(i).isUpper) {\n                sum += s(i).toInt\n        \
    \    }\n        }\n        return sum", "        // Your code here\n        //\
    \ Return your result\n        0l", "        val sb = new StringBuilder\n     \
    \   sb.append(s)\n        val result = sb.filter(_.isUpper).map(_.toInt).sum\n\
    \        result", "        // Write your code here\n        return 0;", '        s.map(c
    => c.toInt).filter(i => i >= 65 && i <= 90).sum', '        ???', '        // TODO:
    Write your solution here', "        var sum : Long = 0l\n        for (i <- 0 until\
    \ s.length) {\n            val c = s.charAt(i)\n            if (c >= 'A' && c\
    \ <= 'Z') sum += c.toInt\n        }\n        return sum", "        var sum : Long\
    \ = 0\n        for (c <- s) {\n            val value = c.toByte\n            if\
    \ (value > 64 && value < 91) {\n                sum += value\n            }\n\
    \        }\n        return sum", "        // Start\n        0", "        var list\
    \ = s.toCharArray\n        var total = 0L\n        for (i <- 0 until list.length)\
    \ {\n            if (list(i).isUpper) {\n                total += list(i).toLong\n\
    \            }\n        }\n        return total", "        s.foldLeft(0) { (sum,\
    \ c) => sum + (if (c >= 'A' && c <= 'Z') c else 0) }", "        // Implement your\
    \ solution here\n        var sum:Long = 0;\n        val l = s.length;\n      \
    \  for(i <- 0 to l-1){\n        \tif(s(i) > 'A' - 1){\n        \t\tsum += s(i);\n\
    \        \t}\n        }\n        return sum;", "        return s.filter(x => x\
    \ >= 'A' && x <= 'Z').map(x => x.toInt).sum.toLong", "        // Write your code\
    \ here\n        ???", '        s.map(_.toInt).filter(_>64).sum', "        s.foldLeft(0)((acc,\
    \ c) => acc + (if(c >= 'A' && c <= 'Z') c else 0)).toLong", '        return 0l',
  "        s.toUpperCase.filter(c => c >= 'A' && c <= 'Z').map(c => c.toLong).sum",
  '        return 0l', "        var sum = 0L\n        for (c <- s.toCharArray() if\
    \ c.isUpper) {\n            sum += c.toInt\n        }\n        sum", '        s.filter(x
    => x.isUpper).foldLeft(0l)((x, y) => x + y.toInt)', "        var l : Long = 0;\n\
    \        for (c <- s) {\n            if (c.isUpper) {\n                l += c.toInt;\n\
    \            }\n        }\n        return l;", '        ???', "\tvar sum : Long\
    \ = 0\n\tval upperLetters : List[Char] = List('A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z')\n\tfor (char <- s) {\n\t    if (upperLetters.contains(char))\
    \ {\n\t\tsum += char.toLong\n\t    }\n\t}\n\tsum", "        // >>> digitSum((\"\
    \"))\n        // (0l)\n        if (s.length == 0) {\n            0l\n        }\n\
    \        // >>> digitSum((\"abAB\"))\n        // (131l)\n        // >>> digitSum((\"\
    abcCd\"))\n        // (67l)\n        // >>> digitSum((\"helloE\"))\n        //\
    \ (69l)\n        // >>> digitSum((\"woArBld\"))\n        // (131l)\n        //\
    \ >>> digitSum((\"aAaaaXa\"))\n        // (153l)\n        else {\n           \
    \ s.toList.map(x => x.toInt).filter(x => x <= 90 && x >= 65).sum.toLong\n    \
    \    }", "        var sum : Long = 0\n        for (i <- 0 until s.length())\n\
    \            if (s(i).isUpper)\n                sum += s(i).toLong\n        return\
    \ sum", "        var total = 0;\n        for (i <- 0 until s.length) {\n     \
    \       if (s(i).isUpper) {\n                total += s(i).toInt;\n          \
    \  }\n        }\n        return total;", "        var r : Long = 0\n        for\
    \ (c <- s) {\n            if (c.isUpper) r += c.toInt\n        }\n        r",
  "        // Write your code here...\n        0", "        var sum : Long = 0l\n\
    \        for (i <- 0 until s.length) {\n            var ascii : Int = s(i).toInt\n\
    \            if (ascii > 64 && ascii < 91) {\n                sum += ascii\n \
    \           }\n        }\n        return sum", "        val out0: Long = 0L\n\
    \        //val out = s.toUpperCase().chars().filter(ch => ch >= 65 && ch <= 90).sum()\n\
    \        val out = s.toUpperCase().chars().filter(ch => ch >= 65 && ch <= 90).sum()\n\
    \        out", "        val upperCase = s.filter(c => c.isUpper)\n        upperCase.map(c\
    \ => c.toLong).sum", "        // Write your solution here\n        val ascii =\
    \ (65 to 90).toList ::: (97 to 122).toList\n        s.toList.map(_.toInt).filter(ascii.contains(_)).sum",
  "        var sum : Long = 0l\n        // In Java we can call Character.isUpperCase(char)\
    \ for each character in the string.\n        // In Scala we can call toUpperCase()\
    \ on the character to get the upper case version\n        // of the character.\
    \  If the character is already upper case, then toUpperCase() will\n        //\
    \ simply return the same character.  If we compare the character before and after\n\
    \        // toUpperCase() was called on it, then we will know if the character\
    \ was upper case\n        // or not.\n        s.foreach(c => {\n            if\
    \ (c.toUpper == c) {\n                sum += c.toInt\n            }\n        })\n\
    \        return sum", '        s.filter(x => x.isUpper).map(x => x.toInt).sum',
  "        var sum = 0l\n        for (c <- s) {\n            if (c.isUpper) sum +=\
    \ c.toInt\n        }\n        sum", '        return s.filter(c => c.isUpper).foldLeft(0l)((acc,
    c) => acc + c.toInt)', '        s.toList.filter(_.isUpper).map(_.toInt).sum',
  "\t\ts.map(_.toInt).sum", '        s.toUpperCase.map(x => x.toLong).sum', "    \
    \    val aUpper = s.toArray.filter(c => c.isUpper).map(c => c.toLong)\n      \
    \  aUpper.sum", '        return 0', '        0', "        var result = 0l\n  \
    \      for (c <- s) {\n            if (c.isUpper) {\n                result +=\
    \ c.toInt\n            }\n        }\n        result", "        var sum : Long\
    \ = 0\n        s.foreach(c => sum += c.toInt)\n        sum", '        return s.toUpperCase.map(_.toLong).sum;',
  '        return s.foldLeft(0l)((a,b) => if (b.isUpper) a + b.toInt else a)', " \
    \       var sum : Long = 0\n        for (c <- s.toCharArray) if (c.isUpper) sum\
    \ += c.toInt\n        return sum", "        s.foldLeft(0l)((a, c) => if (c >=\
    \ 'A' && c <= 'Z') {\n            a + c.toInt\n        } else {\n            a\n\
    \        })", "\tval u = s.toUpperCase\n\tif (u.isEmpty)\n\t    0\n\telse\n\t\
    \    u.tail.foldLeft(u.head.toLong)((a, b) => a + b.toLong)", "    var sum = 0l\n\
    \    for (i <- 0 until s.length) {\n        if (s(i).isUpper) sum += s(i).toInt",
  "        val a = s.toList.map(x => x.toInt).filter(x => x >= 65 && x <= 90).sum\n\
    \        return a", "        val upper = s.toUpperCase()\n        val res = upper.map(x\
    \ => (x - 'A' + 1) * (x - 'A' + 1)).sum\n        res", '        s.toList.filter(x
    => x.isUpper).map(x => x.toInt).sum', "        // TODO\n        // Pattern Matching\n\
    \        // ----------------\n        // case class\n        // case object\n\
    \        // val pattern = e\n        // e match {\n        //     case pattern\
    \ => expr\n        //     ...\n        // }\n        //\n        // match \u5F0F\
    \u306F\u6700\u5F8C\u306B\u6765\u305F case \u304C\u9069\u7528\u3055\u308C\u308B\
    .\n        // case _ \u304C\u3042\u308B\u5834\u5408\u306B\u306F\u7121\u8996\u3055\
    \u308C\u308B.\n        //\n        // Exhaustiveness Check\n        // --------------------\n\
    \        // match \u5F0F\u306F\u5B8C\u5168\u6027\u304C\u4FDD\u8A3C\u3055\u308C\
    \u308B.\n        // \u4E00\u65B9 switch \u6587\u306F\u5B8C\u5168\u6027\u304C\u4FDD\
    \u8A3C\u3055\u308C\u306A\u3044.\n        // \u4E0D\u5B8C\u5168\u306A match \u5F0F\
    \u306E\u5834\u5408, \u30B3\u30F3\u30D1\u30A4\u30EB\u6642\u306B\u8B66\u544A\u304C\
    \u51FA\u308B.\n        // \u306A\u304A, \u4E0D\u5B8C\u5168\u306A switch \u6587\
    \u306E\u5834\u5408, \u30B3\u30F3\u30D1\u30A4\u30EB\u6642\u306B\u30A8\u30E9\u30FC\
    \u304C\u51FA\u308B.\n        //\n        // Type Parameterization\n        //\
    \ ---------------------\n        // \u30AF\u30E9\u30B9 T[A] \u306F A \u3092\u578B\
    \u30D1\u30E9\u30E1\u30FC\u30BF\u5316\u3057\u305F\u30AF\u30E9\u30B9 T \u306E\u30A4\
    \u30F3\u30B9\u30BF\u30F3\u30B9\u3092\u8868\u3059.\n        // \u30B8\u30A7\u30CD\
    \u30EA\u30AF\u30B9\u306E\u5229\u7528\u306B\u3088\u308A, \u30B3\u30F3\u30D1\u30A4\
    \u30EB\u6642\u306B\u578B\u30C1\u30A7\u30C3\u30AF\u304C\u53EF\u80FD.\n        //\n\
    \        // Companion Object\n        // ----------------\n        // apply()\
    \ \u3092\u5B9A\u7FA9\u3059\u308B\u3053\u3068\u3067\u30B3\u30F3\u30B9\u30C8\u30E9\
    \u30AF\u30BF\u3092\u547C\u3073\u51FA\u3059\u3088\u3046\u306B\u3059\u308B.\n  \
    \      // 1, \u3042\u308B\u30AF\u30E9\u30B9 T \u306B\u5BFE\u3057\u3066 T.apply()\
    \ \u3068\u3057\u3066\u547C\u3076.\n        // 2, \u3042\u308B\u30AF\u30E9\u30B9\
    \ T \u306B\u5BFE\u3057\u3066 val t = T() \u3068\u3057\u3066\u547C\u3076.\n   \
    \     //\n        // \u5B9F\u969B\u306B\u306F\u4EE5\u4E0B\u306E\u3088\u3046\u306B\
    \u5B9A\u7FA9\u3059\u308B.\n        // class T[A] {\n        //", "        // Write\
    \ your code here\n        null", "        var asciiCodeSum : Long = 0\n      \
    \  for (i <- 0 until s.length()) {\n            if (s(i).isUpper) {\n        \
    \        asciiCodeSum += s(i).toInt\n            }\n        }\n        return\
    \ asciiCodeSum", "        // Your Code Here\n        val up = s.toUpperCase\n\
    \        var sum = 0l\n        for (ch <- up) {\n            if (ch >= 'A' &&\
    \ ch <= 'Z') {\n                sum += ch.toInt\n            }\n        }\n  \
    \      sum", '        s.map(_.toInt).filter(_ <= 90).sum', '        // Fill in
    the code here', "        def helper(acc : Long, s : String) : Long = {\n     \
    \       if (s.isEmpty) acc\n            else if (s.head >= 'A' && s.head <= 'Z')\
    \ helper(acc + s.head, s.tail)\n            else helper(acc, s.tail)\n       \
    \ }\n        helper(0, s)", "        if (s.length == 0) {\n            return\
    \ 0l\n        }\n        else {\n            val zero = '0'\n            val nine\
    \ = '9'\n            var result = 0l\n            var i = 0\n            while\
    \ (i < s.length) {\n                val c = s(i)\n                if (c >= zero\
    \ && c <= nine) {\n                    result += (c - zero)\n                }\n\
    \                i += 1\n            }\n            return result\n        }"]
stop_tokens:
- "\n    }\n"
