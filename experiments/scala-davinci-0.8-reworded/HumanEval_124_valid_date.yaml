name: HumanEval_124_valid_date
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You have to write a function which validates a given date string and\n \
  \   // returns true if the date is valid otherwise false.\n    // The date is valid\
  \ if all of the following rules are satisfied:\n    // 1. The date string is not\
  \ empty.\n    // 2. The number of days is not less than 1 or higher than 31 days\
  \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
  \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or\
  \ higher than 29 for the month 2.\n    // 3. The months should not be less than\
  \ 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n\
  \    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"\
  15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n\
  \    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"\
  06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
  )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
  04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
  \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\"\
  )) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
  04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
  \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\"\
  )) == (true));\n    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"\
  20030412\")) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n  \
  \  assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        if (date.isEmpty) return false\n        val d = date.split(\"\
    -\")\n        if (d.length != 3) return false\n        val days = d(1).toInt\n\
    \        val months = d(0).toInt\n        val years = d(2).toInt\n        if (days\
    \ < 1 || days > 31) return false\n        if (months < 1 || months > 12) return\
    \ false\n        if (years <= 0) return false\n        if (months == 2) {\n  \
    \          if (days > 29) return false\n            if (years % 4 == 0) {\n  \
    \              if (days > 29) return false\n            } else {\n           \
    \     if (days > 28) return false\n            }\n        } else if (months ==\
    \ 4 || months == 6 || months == 9 || months == 11) {\n            if (days > 30)\
    \ return false\n        }\n        return true", "        if (date.length == 0)\
    \ return false\n        val parts = date.split(\"-\")\n        if (parts.length\
    \ != 3) return false\n        try {\n            val day = parts(1).toInt\n  \
    \          val month = parts(0).toInt\n            val year = parts(2).toInt\n\
    \            val dayLength = parts(1).length\n            val monthLength = parts(0).length\n\
    \            val yearLength = parts(2).length\n            if (month < 1 || month\
    \ > 12) return false\n            if (month == 2) {\n                if (day <\
    \ 1 || day > 29) return false\n            } else if (month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n                if (day < 1 || day > 30) return\
    \ false\n            } else {\n                if (day < 1 || day > 31) return\
    \ false\n            }\n            if (dayLength != 2 || monthLength != 2 ||\
    \ yearLength != 4) return false\n        } catch {\n            case e : Exception\
    \ => return false\n        }\n        return true", '        true', "        val\
    \ m = \"[0-9]{2}\".r\n        val d = \"[0-9]{2}\".r\n        val y = \"[0-9]{4}\"\
    .r\n        val dateRegex = \"([0-9]{2})-([0-9]{2})-([0-9]{4})\".r\n        date\
    \ match {\n            case dateRegex(m(month), d(day), y(year)) => {\n      \
    \          if (((month.toInt == 1 || month.toInt == 3 || month.toInt == 5 || month.toInt\
    \ == 7 || month.toInt == 8 || month.toInt == 10 || month.toInt == 12) && day.toInt\
    \ <= 31 && day.toInt >= 1) || ((month.toInt == 4 || month.toInt == 6 || month.toInt\
    \ == 9 || month.toInt == 11) && day.toInt <= 30 && day.toInt >= 1) || (month.toInt\
    \ == 2 && day.toInt <= 29 && day.toInt >= 1)) true else false\n            }\n\
    \            case _ => false\n        }", "        val months = Map(1 -> 31, 2\
    \ -> 29, 3 -> 31, 4 -> 30, 5 -> 31, 6 -> 30, 7 -> 31, 8 -> 31, 9 -> 30, 10 ->\
    \ 31, 11 -> 30, 12 -> 31)\n        try {\n            val dateArr = date.split(\"\
    -\")\n            val (month, day, year) = (dateArr(0).toInt, dateArr(1).toInt,\
    \ dateArr(2).toInt)\n            if (month <= 0 || month > 12) return false\n\
    \            if (day <= 0 || day > months(month)) return false\n            if\
    \ (year <= 0) return false\n            true\n        } catch {\n            case\
    \ e : Exception => false\n        }", "        if (date.isEmpty) {\n         \
    \   false\n        } else {\n            val ss = date.split(\"-\")\n        \
    \    if (ss.length != 3) {\n                false\n            } else {\n    \
    \            if (ss(1).length != 2 || ss(2).length != 4) {\n                 \
    \   false\n                } else {\n                    val d = Integer.parseInt(ss(1))\n\
    \                    val m = Integer.parseInt(ss(0))\n                    val\
    \ y = Integer.parseInt(ss(2))\n                    if (m < 1 || m > 12) {\n  \
    \                      false\n                    } else {\n                 \
    \       if (m == 2) {\n                            if (d < 1 || d > 29) {\n  \
    \                              false\n                            } else {\n \
    \                               true\n                            }\n        \
    \                } else {\n                            if (m == 1 || m == 3 ||\
    \ m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n                      \
    \          if (d < 1 || d > 31) {\n                                    false\n\
    \                                } else {\n                                  \
    \  true\n                                }\n                            } else\
    \ {\n                                if (d < 1 || d > 30) {\n                \
    \                    false\n                                } else {\n       \
    \                             true\n                                }\n      \
    \                      }\n                        }\n                    }\n \
    \               }\n            }\n        }", "        var isValid = true\n  \
    \      // we are using the yyyy-mm-dd format, but we must handle the mm-dd-yyyy\
    \ format to be robust\n        val dateArray = date.split(\"-\")\n        if (dateArray.length\
    \ != 3) {\n            return false\n        }\n        // we are validating the\
    \ format\n        for (d <- dateArray) {\n            if (d.length != 2) {\n \
    \               return false\n            }\n        }\n        // we are parsing\
    \ the date to an integer\n        val year = dateArray(2).toInt\n        val month\
    \ = dateArray(0).toInt\n        val day = dateArray(1).toInt\n        // we are\
    \ checking the months\n        if (month < 1 || month > 12) {\n            return\
    \ false\n        }\n        // we are checking the days\n        if (day < 1 ||\
    \ day > 31) {\n            return false\n        }\n        // we are checking\
    \ the leap year\n        if (month == 2) {\n            if (day > 29) {\n    \
    \            return false\n            }\n            else if (day == 29) {\n\
    \                if (year % 4 != 0) {\n                    return false\n    \
    \            }\n                else if (year % 100 == 0 && year % 400 != 0) {\n\
    \                    return false\n                }\n            }\n        }\n\
    \        else if (day > 30) {\n            if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n                return false\n            }\n      \
    \  }\n        return isValid", "        if (date.length < 8) return false\n  \
    \      val month = date.substring(0, 2).toInt\n        val day = date.substring(3,\
    \ 5).toInt\n        val year = date.substring(6, 10).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (year < 1000 || year > 9999) return false\n        if (month == 2)\
    \ {\n            if (day > 29) return false\n            if (day == 29) {\n  \
    \              if (year % 4 != 0) return false\n                if (year % 100\
    \ == 0 && year % 400 != 0) return false\n            }\n        }\n        if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day\
    \ > 30) return false\n        }\n        true", "        val pattern = \"\\\\\
    d{2}-\\\\d{2}-\\\\d{4}\".r\n        if (pattern.findFirstIn(date).isEmpty) {\n\
    \            return false\n        }\n        val dateArray = date.split(\"-\"\
    )\n        val days = dateArray(1).toInt\n        val months = dateArray(0).toInt\n\
    \        if (months < 1 || months > 12) {\n            return false\n        }\n\
    \        if (months == 2) {\n            if (days < 1 || days > 29) {\n      \
    \          return false\n            }\n        } else if (months == 1 || months\
    \ == 3 || months == 5 || months == 7 || months == 8 || months == 10 || months\
    \ == 12) {\n            if (days < 1 || days > 31) {\n                return false\n\
    \            }\n        } else {\n            if (days < 1 || days > 30) {\n \
    \               return false\n            }\n        }\n        return true",
  "        if (date.isEmpty()) {\n            return false\n        }\n        val\
    \ split = date.split(\"-\")\n        if (split.length != 3) {\n            return\
    \ false\n        }\n        val month = split(0).toInt\n        val day = split(1).toInt\n\
    \        val year = split(2).toInt\n        if (month < 1 || month > 12) {\n \
    \           return false\n        }\n        if (month == 2) {\n            if\
    \ (day < 1 || day > 29) {\n                return false\n            }\n     \
    \   }\n        else if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day < 1 || day > 30) {\n                return false\n  \
    \          }\n        }\n        else {\n            if (day < 1 || day > 31)\
    \ {\n                return false\n            }\n        }\n        return true",
  "        val pat = \"\"\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\"\"\
    \".r\n        date match {\n            case pat() => {\n                val y\
    \ = date.split(\"-\")(2).toInt\n                val m = date.split(\"-\")(0).toInt\n\
    \                val d = date.split(\"-\")(1).toInt\n                if (m > 12\
    \ || m == 0) return false\n                if (m == 2) {\n                   \
    \ if (y % 4 == 0) {\n                        if (d > 29) return false\n      \
    \              } else {\n                        if (d > 28) return false\n  \
    \                  }\n                } else if (m % 2 == 0) {\n             \
    \       if (d > 30) return false\n                } else {\n                 \
    \   if (d > 31) return false\n                }\n                return true\n\
    \            }\n            case _ => return false\n        }", "        if (date.length\
    \ == 0) false\n        else {\n            val dateSplitted = date.split(\"-\"\
    )\n            if (dateSplitted.length != 3) false\n            else {\n     \
    \           val year = dateSplitted(2).toInt\n                val month = dateSplitted(0).toInt\n\
    \                val day = dateSplitted(1).toInt\n                if (month <\
    \ 1 || month > 12) false\n                else {\n                    val checker\
    \ = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n                    if (!checker.contains(month))\
    \ false\n                    else {\n                        if (month == 2) {\n\
    \                            if (day < 1 || day > 29) false\n                \
    \            else true\n                        }\n                        else\
    \ if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n                            if (day < 1 || day > 31)\
    \ false\n                            else true\n                        }\n  \
    \                      else {\n                            if (day < 1 || day\
    \ > 30) false\n                            else true\n                       \
    \ }\n                    }\n                }\n            }\n        }", "  \
    \      if (date.isEmpty) return false\n        val d = date.split(\"-\")\n   \
    \     if (d.length != 3) return false\n        val c = d.map(x => x.toInt)\n \
    \       if (c(0) < 1 || c(0) > 12) return false\n        val conds = List(1, 3,\
    \ 5, 7, 8, 10, 12)\n        if (conds.contains(c(0))) {\n            if (c(1)\
    \ < 1 || c(1) > 31) return false\n        } else if (c(0) == 2) {\n          \
    \  if (c(1) < 1 || c(1) > 29) return false\n        } else {\n            if (c(1)\
    \ < 1 || c(1) > 30) return false\n        }\n        true", "        if (date.isEmpty)\
    \ return false\n        val p = date.split(\"-\")\n        if (p.length != 3)\
    \ return false\n        val year = p(2).toInt\n        val month = p(0).toInt\n\
    \        val day = p(1).toInt\n        if (month < 1 || month > 12) return false\n\
    \        if (month == 2) {\n            if (year % 4 == 0) {\n               \
    \ if (day < 1 || day > 29) return false\n            } else {\n              \
    \  if (day < 1 || day > 28) return false\n            }\n        } else if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n            if (day < 1 || day > 31) return false\n     \
    \   } else {\n            if (day < 1 || day > 30) return false\n        }\n \
    \       return true", "        val daysInMonths = List(31, 29, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31)\n        val tokens = date.split(\"-\")\n        if\
    \ (tokens.length != 3) return false\n        val month = tokens(0).toInt\n   \
    \     val day = tokens(1).toInt\n        val year = tokens(2).toInt\n        if\
    \ (year < 0) return false\n        if (month < 1 || month > 12) return false\n\
    \        if (day < 1 || day > daysInMonths(month - 1)) return false\n        if\
    \ (month == 2 && day == 29 && !isLeapYear(year)) return false\n        return\
    \ true", "      val tokens = date.split(\"-\")\n      if (tokens.length != 3)\
    \ return false\n      try {\n        val month = tokens(0).toInt\n        val\
    \ day = tokens(1).toInt\n        val year = tokens(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (month == 2) {\n          if (day\
    \ < 1 || day > 29) return false\n        } else if (month % 2 == 0) {\n      \
    \    if (day < 1 || day > 30) return false\n        } else {\n          if (day\
    \ < 1 || day > 31) return false\n        }\n        return true\n      } catch\
    \ {\n        case ex : NumberFormatException => return false\n      }", "    \
    \  val tokens = date.split(\"-\")\n      if (tokens.length != 3) return false\n\
    \      val month = tokens(0).toInt\n      val day = tokens(1).toInt\n      val\
    \ year = tokens(2).toInt\n      if (month < 1 || month > 12) return false\n  \
    \    if (month == 2) {\n        if (day < 1 || day > 29) return false\n      }\
    \ else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if\
    \ (day < 1 || day > 30) return false\n      } else {\n        if (day < 1 || day\
    \ > 31) return false\n      }\n      true", '        return false', "        var\
    \ d = date.split(\"-\")\n        if (d.length != 3) {\n            false\n   \
    \     } else {\n            val (m,d,y) = (d(0).toInt, d(1).toInt, d(2).toInt)\n\
    \            if (m < 1 || m > 12) {\n                false\n            } else\
    \ {\n                (m % 2 == 1 && m < 8) || (m % 2 == 0 && m > 7) match {\n\
    \                    case true => {\n                        if (d < 1 || d >\
    \ 31) {\n                            false\n                        } else {\n\
    \                            true\n                        }\n               \
    \     }\n                    case false => {\n                        if (m ==\
    \ 2) {\n                            if (d < 1 || d > 29) {\n                 \
    \               false\n                            } else {\n                \
    \                true\n                            }\n                       \
    \ } else {\n                            if (d < 1 || d > 30) {\n             \
    \                   false\n                            } else {\n            \
    \                    true\n                            }\n                   \
    \     }\n                    }\n                }\n            }\n        }",
  "        if (date.length == 0) {\n            return false\n        }\n        val\
    \ dateFragments = date.split(\"-\")\n        if (dateFragments.length != 3) {\n\
    \            return false\n        }\n        val month = dateFragments(0).toInt\n\
    \        val day = dateFragments(1).toInt\n        val year = dateFragments(2).toInt\n\
    \        if (month > 12 || month < 1) {\n            return false\n        }\n\
    \        if (day > 31 || day < 1) {\n            return false\n        }\n   \
    \     if (month == 2) {\n            if (day > 29) {\n                return false\n\
    \            }\n        }\n        else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30) {\n                return\
    \ false\n            }\n        }\n        return true", "        var arr = date.split(\"\
    -\")\n        if (arr.length != 3) return false\n        val (m, d, y) = (arr(0).toInt,\
    \ arr(1).toInt, arr(2).toInt)\n        val months = Array(0, 31, 29, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        if (d > months(m) || m > 12) return false\n\
    \        if (m == 2 && y % 4 != 0) {\n            if (d > 28) return false\n \
    \       }\n        true", "        if (date.isEmpty) false\n        else {\n \
    \           val dateArray = date.split(\"-\")\n            if (dateArray.length\
    \ != 3) false\n            else {\n                val month = dateArray(0).toInt\n\
    \                val day = dateArray(1).toInt\n                val year = dateArray(2).toInt\n\
    \                if (year < 0) false\n                else {\n               \
    \     if (month < 1 || month > 12) false\n                    else {\n       \
    \                 if (month == 2) {\n                            if (year % 4\
    \ == 0) {\n                                if (day < 1 || day > 29) false\n  \
    \                              else true\n                            }\n    \
    \                        else {\n                                if (day < 1 ||\
    \ day > 28) false\n                                else true\n               \
    \             }\n                        }\n                        else {\n \
    \                           if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n                      \
    \          if (day < 1 || day > 31) false\n                                else\
    \ true\n                            }\n                            else {\n  \
    \                              if (day < 1 || day > 30) false\n              \
    \                  else true\n                            }\n                \
    \        }\n                    }\n                }\n            }\n        }",
  "        val parts = date.split(\"-\")\n        val year = parts(2).toInt\n    \
    \    val month = parts(0).toInt\n        val day = parts(1).toInt\n        val\
    \ maxDays = if (month == 2) if (year % 4 == 0) 29 else 28 else if (month == 4\
    \ || month == 6 || month == 9 || month == 11) 30 else 31\n        if (year < 0\
    \ || month < 1 || month > 12 || day < 1 || day > maxDays) false else true", " \
    \       val dateAndTime = date.split(\" \")\n        val dateString = dateAndTime(0)\n\
    \        if (dateString.length == 0) return false\n        val datePieces = dateString.split(\"\
    -\")\n        if (datePieces.length != 3) return false\n        val dayString\
    \ = datePieces(1)\n        val monthString = datePieces(0)\n        val yearString\
    \ = datePieces(2)\n        if (dayString.length == 0 || monthString.length ==\
    \ 0 || yearString.length == 0) return false\n        val month = monthString.toInt\n\
    \        val day = dayString.toInt\n        val year = yearString.toInt\n    \
    \    if (year == 0) return false\n        if (month < 1 || month > 12) return\
    \ false\n        if (month == 2) {\n            if (day < 1 || day > 29) return\
    \ false\n        } else if (List(1, 3, 5, 7, 8, 10, 12).contains(month)) {\n \
    \           if (day < 1 || day > 31) return false\n        } else {\n        \
    \    if (day < 1 || day > 30) return false\n        }\n        return true", " \
    \       val t = date.split(\"-\")\n        if (t.length != 3) return false\n \
    \       val months = List(1,3,5,7,8,10,12)\n        try {\n            val year\
    \ = t(2).toInt\n            val month = t(0).toInt\n            val day = t(1).toInt\n\
    \            if (year < 0) return false\n            if (month < 1 || month >\
    \ 12) return false\n            if (months.contains(month)) {\n              \
    \  if (day < 1 || day > 31) return false\n            } else if (month == 2) {\n\
    \                if (day < 1 || day > 29) return false\n            } else {\n\
    \                if (day < 1 || day > 30) return false\n            }\n      \
    \      return true\n        } catch {\n            case e : Exception => return\
    \ false\n        }", '        true', '        return false', "        val s =\
    \ date.split(\"-\")\n        if (s.length != 3) return false\n        if (s(0).length\
    \ != 2 || s(1).length != 2 || s(2).length != 4) return false\n        try {\n\
    \            val day = s(1).toInt\n            val month = s(0).toInt\n      \
    \      val year = s(2).toInt\n            if (day < 1 || day > 31) return false\n\
    \            if (month < 1 || month > 12) return false\n            if (month\
    \ == 2) {\n                if (day < 1 || day > 29) return false\n           \
    \ } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n      \
    \          if (day < 1 || day > 30) return false\n            }\n        } catch\
    \ {\n            case e : Exception => return false\n        }\n        true",
  "        //\n        // Write your code here.\n        //\n        if (date.isEmpty())\
    \ {\n            return false\n        }\n        val dateParts = date.split(\"\
    -\")\n        if (dateParts.length != 3) {\n            return false\n       \
    \ }\n        val month = dateParts(0).toInt\n        val day = dateParts(1).toInt\n\
    \        val year = dateParts(2).toInt\n        if (month < 1 || month > 12) {\n\
    \            return false\n        }\n        if (month == 2) {\n            if\
    \ (day < 1 || day > 29) {\n                return false\n            }\n     \
    \   } else if (day < 1 || day > 31) {\n            return false\n        }\n \
    \       if (month == 4 || month == 6 || month == 9 || month == 11) {\n       \
    \     if (day == 31) {\n                return false\n            }\n        }\n\
    \        return true", "        if (date.length == 0) return false\n        val\
    \ dateArray = date.split(\"-\")\n        if (dateArray.length != 3) return false\n\
    \        for (i <- 0 until dateArray.length) {\n            if (dateArray(i).length\
    \ == 0) return false\n            for (j <- 0 until dateArray(i).length) {\n \
    \               if (!('0' to '9').contains(dateArray(i)(j))) return false\n  \
    \          }\n        }\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) return false\n        if (day < 1 || day > 31) return false\n\
    \        if (month == 2) {\n            if (day > 29) return false\n         \
    \   if (day == 29) {\n                if (year % 4 != 0) return false\n      \
    \          if (year % 100 == 0 && year % 400 != 0) return false\n            }\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false\n        }\n        return true",
  "        def getMonth(month : String) : Int = month match {\n            case \"\
    01\" => 1\n            case \"02\" => 2\n            case \"03\" => 3\n      \
    \      case \"04\" => 4\n            case \"05\" => 5\n            case \"06\"\
    \ => 6\n            case \"07\" => 7\n            case \"08\" => 8\n         \
    \   case \"09\" => 9\n            case \"10\" => 10\n            case \"11\" =>\
    \ 11\n            case \"12\" => 12\n            case _ => -1\n        }\n   \
    \     def dateFormatValid(date : String) : Boolean = date match {\n          \
    \  case date if date.length() != 10 => false\n            case date if date.charAt(2)\
    \ != '-' => false\n            case date if date.charAt(5) != '-' => false\n \
    \           case _ => true\n        }\n        def monthValid(month : String)\
    \ : Boolean = {\n            val m = getMonth(month)\n            month match\
    \ {\n                case month if m == -1 => false\n                case month\
    \ if m > 12 => false\n                case month if m < 1 => false\n         \
    \       case _ => true\n            }\n        }\n        def yearValid(year :\
    \ String) : Boolean = {\n            val n = year.toInt\n            year match\
    \ {\n                case year if n < 0 => false\n                case _ => true\n\
    \            }\n        }\n        def dayValid(day : String) : Boolean = {\n\
    \            val n = day.toInt\n            day match {\n                case\
    \ day if n < 0 => false\n                case day if n > 31 => false\n       \
    \         case _ => true\n            }\n        }\n        def monthDayValid(month\
    \ : String, day : String) : Boolean = {\n            val m = getMonth(month)\n\
    \            val n = day.toInt\n            if (m == 1 || m == 3 || m == 5 ||\
    \ m == 7 || m == 8 || m == 10 || m == 12) {\n                day match {\n   \
    \                 case day if n < 1 => false\n                    case day if\
    \ n > 31 => false\n                    case _ => true\n                }\n   \
    \         } else if (m == 4 || m == 6 || m == 9 || m == 11) {\n              \
    \  day match {\n                   ", "        val md = date.split(\"-\")\n  \
    \      if (md.length != 3) return false\n        if (md(0).length != 2 || md(1).length\
    \ != 2 || md(2).length != 4) return false\n        val m = md(0).toInt\n     \
    \   val d = md(1).toInt\n        val y = md(2).toInt\n        if (m > 12 || m\
    \ < 1) return false\n        if (d > 31 || d < 1) return false\n        if (m\
    \ == 2) {\n            if (d > 29) return false\n            if (d == 29) {\n\
    \                if (y % 400 == 0) return true\n                if (y % 100 ==\
    \ 0) return false\n                if (y % 4 == 0) return true\n             \
    \   return false\n            }\n        }\n        else if (m == 4 || m == 6\
    \ || m == 9 || m == 11) {\n            if (d > 30) return false\n        }\n \
    \       return true", "        val format = \"mm-dd-yyyy\"\n        val sdf =\
    \ new SimpleDateFormat(format)\n        sdf.setLenient(false)\n        try {\n\
    \            sdf.parse(date)\n            true\n        } catch {\n          \
    \  case e : ParseException => false\n        }", '        false', "        var\
    \ i = 0\n        var temp = \"\"\n        var first = true\n        var day =\
    \ 0\n        var month = 0\n        var year = 0\n        var count = 0\n    \
    \    while (i < date.length) {\n            if (date(i) == '-') {\n          \
    \      if (first) {\n                    month = temp.toInt\n                \
    \    first = false\n                } else {\n                    day = temp.toInt\n\
    \                }\n                temp = \"\"\n                count += 1\n\
    \            } else {\n                temp += date(i)\n            }\n      \
    \      i += 1\n        }\n        year = temp.toInt\n        if (count != 2) return\
    \ false\n        if (month < 1 || month > 12) return false\n        if (month\
    \ == 2) {\n            if (day < 1 || day > 29) return false\n        } else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day\
    \ < 1 || day > 30) return false\n        } else {\n            if (day < 1 ||\
    \ day > 31) return false\n        }\n        return true", "        def isValidFormat(date\
    \ : String) : Boolean = {\n            def splitDate(date : String) : Array[String]\
    \ = {\n                date.split(\"-\")\n            }\n            if (splitDate(date).length\
    \ != 3) false\n            else {\n                try {\n                   \
    \ splitDate(date).foreach(x => x.toInt)\n                    true\n          \
    \      } catch {\n                    case e : Exception => false\n          \
    \      }\n            }\n        }\n        def isValidDay(date : String) : Boolean\
    \ = {\n            def splitDate(date : String) : Array[String] = {\n        \
    \        date.split(\"-\")\n            }\n            def daysInMonth(month :\
    \ Int) : Int = {\n                month match {\n                    case 1 =>\
    \ 31\n                    case 2 => 29\n                    case 3 => 31\n   \
    \                 case 4 => 30\n                    case 5 => 31\n           \
    \         case 6 => 30\n                    case 7 => 31\n                   \
    \ case 8 => 31\n                    case 9 => 30\n                    case 10\
    \ => 31\n                    case 11 => 30\n                    case 12 => 31\n\
    \                    case _ => 0\n                }\n            }\n         \
    \   val month = splitDate(date)(0).toInt\n            val day = splitDate(date)(1).toInt\n\
    \            daysInMonth(month) >= day && day > 0\n        }\n        def isValidMonth(date\
    \ : String) : Boolean = {\n            def splitDate(date : String) : Array[String]\
    \ = {\n                date.split(\"-\")\n            }\n            val month\
    \ = splitDate(date)(0).toInt\n            month <= 12 && month > 0\n        }\n\
    \        isValidFormat(date) && isValidDay(date) && isValidMonth(date)", "   \
    \     try {\n            val m = date.split(\"-\")(0).toInt\n            val d\
    \ = date.split(\"-\")(1).toInt\n            val y = date.split(\"-\")(2).toInt\n\
    \            if (m < 1 || m > 12) false\n            else if (y < 1) false\n \
    \           else if (m == 2) {\n                if (d < 1 || d > 29) false\n \
    \               else if (d == 29) (y % 4 == 0 && y % 100 != 0) || y % 400 == 0\n\
    \                else true\n            }\n            else if (m == 1 || m ==\
    \ 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n                if\
    \ (d < 1 || d > 31) false\n                else true\n            }\n        \
    \    else {\n                if (d < 1 || d > 30) false\n                else\
    \ true\n            }\n        }\n        catch {\n            case e : Exception\
    \ => false\n        }", '        false', "        var result = false\n       \
    \ // your code here\n        return result", "        val arr = date.split(\"\
    -\")\n        if (arr.length == 3) {\n            if (arr(0).toInt > 0 && arr(0).toInt\
    \ <= 12) {\n                val month = arr(0).toInt\n                if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n                    if (arr(1).toInt > 0 && arr(1).toInt\
    \ <= 31) {\n                        true\n                    } else {\n     \
    \                   false\n                    }\n                } else if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n                    if (arr(1).toInt\
    \ > 0 && arr(1).toInt <= 30) {\n                        true\n               \
    \     } else {\n                        false\n                    }\n       \
    \         } else {\n                    if (arr(1).toInt > 0 && arr(1).toInt <=\
    \ 29) {\n                        true\n                    } else {\n        \
    \                false\n                    }\n                }\n           \
    \ } else {\n                false\n            }\n        } else {\n         \
    \   false\n        }", "      // code here\n      true", "        val ls = date.split(\"\
    -\")\n        if (ls.length != 3) return false\n        var months = List(1,3,5,7,8,10,12)\n\
    \        if (months.contains(ls(0).toInt)) {\n            if (ls(1).toInt > 31\
    \ || ls(1).toInt < 1) return false\n        }\n        else if (ls(0).toInt ==\
    \ 2) {\n            if (ls(1).toInt > 29 || ls(1).toInt < 1) return false\n  \
    \      }\n        else {\n            if (ls(1).toInt > 30 || ls(1).toInt < 1)\
    \ return false\n        }\n        if (ls(0).toInt > 12 || ls(0).toInt < 1) return\
    \ false\n        return true", "        val p = date.split(\"-\")\n        if\
    \ (p.length != 3) return false\n        else {\n            val month = p(0).toInt\n\
    \            val day = p(1).toInt\n            val year = p(2).toInt\n       \
    \     if (month < 1 || month > 12) return false\n            else if (month ==\
    \ 2) {\n                if (year % 4 == 0) {\n                    if (day < 1\
    \ || day > 29) return false\n                }\n                else {\n     \
    \               if (day < 1 || day > 28) return false\n                }\n   \
    \         }\n            else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n                if (day\
    \ < 1 || day > 31) return false\n            }\n            else {\n         \
    \       if (day < 1 || day > 30) return false\n            }\n        }\n    \
    \    return true", "      if (date.length < 10) return false\n      var month\
    \ = date.substring(0,2).toInt\n      var day = date.substring(3,5).toInt\n   \
    \   var year = date.substring(6,10).toInt\n      if (month < 1 || month > 12)\
    \ return false\n      if (month == 2) {\n        if (day < 1 || day > 29) return\
    \ false\n      } else if (List(1,3,5,7,8,10,12).contains(month)) {\n        if\
    \ (day < 1 || day > 31) return false\n      } else {\n        if (day < 1 || day\
    \ > 30) return false\n      }\n      if (year < 0) return false\n      return\
    \ true", '        return true', "        if (date.length != 10) return false\n\
    \        val dateParts = date.split(\"-\")\n        val month = dateParts(0).toInt\n\
    \        val day = dateParts(1).toInt\n        val year = dateParts(2).toInt\n\
    \        if (month < 1 || month > 12) return false\n        if (day < 1 || day\
    \ > 31) return false\n        if (month == 2 && day > 29) return false\n     \
    \   if (month % 2 == 0 && month != 2 && day > 30) return false\n        if (year\
    \ < 1900 || year > 2020) return false\n        return true", "        def checkDate(date\
    \ : String) : Boolean = {\n            if (date.length != 10) {\n            \
    \    return false\n            }\n            val month = date.substring(0, 2).toInt\n\
    \            val day = date.substring(3, 5).toInt\n            val year = date.substring(6,\
    \ 10).toInt\n            if (month < 1 || month > 12) {\n                return\
    \ false\n            }\n            if (day < 1 || day > 31) {\n             \
    \   return false\n            }\n            if (day > 30 && (month == 4 || month\
    \ == 6 || month == 9 || month == 11)) {\n                return false\n      \
    \      }\n            if (month == 2 && day > 29) {\n                return false\n\
    \            }\n            if (month == 2 && day == 29 && year % 4 != 0) {\n\
    \                return false\n            }\n            return true\n      \
    \  }\n        return checkDate(date)", "        val dateArray = date.split(\"\
    -\")\n        dateArray.length == 3 &&\n        dateArray(0).length == 2 &&\n\
    \        dateArray(1).length == 2 &&\n        dateArray(2).length == 4 &&\n  \
    \      dateArray(0).forall(_.isDigit) &&\n        dateArray(1).forall(_.isDigit)\
    \ &&\n        dateArray(2).forall(_.isDigit) &&\n        0 < dateArray(0).toInt\
    \ && dateArray(0).toInt <= 12 &&\n        0 < dateArray(1).toInt &&\n        0\
    \ < dateArray(2).toInt &&\n        ((dateArray(0).toInt == 1 || dateArray(0).toInt\
    \ == 3 || dateArray(0).toInt == 5 || dateArray(0).toInt == 7 || dateArray(0).toInt\
    \ == 8 || dateArray(0).toInt == 10 || dateArray(0).toInt == 12) && dateArray(1).toInt\
    \ <= 31) ||\n        ((dateArray(0).toInt == 4 || dateArray(0).toInt == 6 || dateArray(0).toInt\
    \ == 9 || dateArray(0).toInt == 11) && dateArray(1).toInt <= 30) ||\n        (dateArray(0).toInt\
    \ == 2 && dateArray(1).toInt <= 29)", "        val date_splits = date.split(\"\
    -\")\n        if (date_splits.length != 3) return false\n        try {\n     \
    \       val month = date_splits(0).toInt\n            val day = date_splits(1).toInt\n\
    \            val year = date_splits(2).toInt\n            if (month < 1 || month\
    \ > 12) return false\n            if (day < 1 || day > 31) return false\n    \
    \        if (month == 2) {\n                if (day > 29) return false\n     \
    \           if (day == 29) {\n                    if (year % 4 != 0) return false\n\
    \                    if (year % 100 == 0 && year % 400 != 0) return false\n  \
    \              }\n            }\n            else if (month % 2 == 0) {\n    \
    \            if (day > 30) return false\n            }\n            else {\n \
    \               if (day > 31) return false\n            }\n            return\
    \ true\n        }\n        catch {\n            case _ : Throwable => return false\n\
    \        }", "        val pattern = \"\"\"(\\d\\d)-(\\d\\d)-(\\d\\d\\d\\d)\"\"\
    \".r\n        val regex = pattern.findFirstMatchIn(date)\n        if (regex ==\
    \ None) return false\n        val months = regex.get.group(1).toInt\n        val\
    \ days = regex.get.group(2).toInt\n        if ((1 to 12).contains(months) == false)\
    \ return false\n        if (months == 2) {\n            if (days < 1 || days >\
    \ 29) return false\n        } else if (months == 1 || months == 3 || months ==\
    \ 5 || months == 7 || months == 8 || months == 10 || months == 12) {\n       \
    \     if (days < 1 || days > 31) return false\n        } else {\n            if\
    \ (days < 1 || days > 30) return false\n        }\n        return true", "   \
    \     val x = date.split(\"-\")\n        if (x.length != 3) return false\n   \
    \     val (month, day, year) = (x(0).toInt, x(1).toInt, x(2).toInt)\n        if\
    \ (month > 12 || month < 1) return false\n        if (day > 31 || day < 1) return\
    \ false\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day == 31) return false\n        }\n        if (month == 2) {\n\
    \            if (day > 29) return false\n            if (year % 4 == 0) {\n  \
    \              if (day == 29) return true\n            } else {\n            \
    \    if (day == 29) return false\n            }\n        }\n        true", " \
    \       if (date.length < 8) false\n        else {\n            var index = date.indexOf(\"\
    -\")\n            var month = date.substring(0, index).toInt\n            var\
    \ dateTail = date.substring(index + 1)\n            index = dateTail.indexOf(\"\
    -\")\n            var day = dateTail.substring(0, index).toInt\n            var\
    \ year = dateTail.substring(index + 1).toInt\n            if (month < 1 || month\
    \ > 12) false\n            else if (day < 1 || day > 31) false\n            else\
    \ true\n        }", "        try {\n            val splits = date.split(\"-\"\
    )\n            if (splits.length != 3) return false\n            val month = splits(0).toInt\n\
    \            val day = splits(1).toInt\n            val year = splits(2).toInt\n\
    \            if (month < 1 || month > 12) return false\n            if (month\
    \ == 2) {\n                if (day < 1 || day > 29) return false\n           \
    \ } else if (month % 2 == 0) {\n                if (day < 1 || day > 30) return\
    \ false\n            } else {\n                if (day < 1 || day > 31) return\
    \ false\n            }\n            true\n        } catch {\n            case\
    \ e : Throwable => false\n        }", '        false', "        // Your code goes\
    \ here\n        true", "    \ttry {\n    \t\tval parsed = date.split(\"-\")\n\
    \    \t\tval d = parsed(0).toInt\n    \t\tval m = parsed(1).toInt\n    \t\tval\
    \ y = parsed(2).toInt\n    \t\t// 1. The date string is not empty.\n    \t\tif\
    \ (date.isEmpty()) false\n    \t\t// 2. The number of days is not less than 1\
    \ or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is\
    \ not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    \t\telse\
    \ if (d > 31 || d < 1) false\n    \t\telse if (d > 30 && (m == 4 || m == 6 ||\
    \ m == 9 || m == 11)) false\n    \t\telse if (d > 29 && m == 2) false\n    \t\t\
    // 3. The months should not be less than 1 or higher than 12.\n    \t\telse if\
    \ (m > 12 || m < 1) false\n    \t\t// 4. The date should be in the format: mm-dd-yyyy\n\
    \    \t\telse if (parsed.length != 3) false\n    \t\telse true\n    \t} catch\
    \ {\n    \t\tcase e : Exception => false\n    \t}", "        if (date.length ==\
    \ 0) return false\n        var d = date.split(\"-\")\n        if (d.length !=\
    \ 3) return false\n        if (d(0).length != 2 || d(1).length != 2 || d(2).length\
    \ != 4) return false\n        var m = d(0).toInt\n        var d = d(1).toInt\n\
    \        var y = d(2).toInt\n        if (m < 1 || m > 12) return false\n     \
    \   if (m == 2) {\n            if (d < 1 || d > 29) return false\n        } else\
    \ if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n\
    \            if (d < 1 || d > 31) return false\n        } else {\n           \
    \ if (d < 1 || d > 30) return false\n        }\n        return true", "      \
    \  val months = \"0123456789\"\n        val days = \"0123456789\"\n        val\
    \ years = \"0123456789\"\n        val monthIndex = 0\n        val dayIndex = 1\n\
    \        val yearIndex = 2\n        val splited = date.split(\"-\")\n        if\
    \ (splited.length != 3)\n            return false\n        val month = splited(monthIndex)\n\
    \        val day = splited(dayIndex)\n        val year = splited(yearIndex)\n\
    \        if (month.length != 2 || day.length != 2 || year.length != 4)\n     \
    \       return false\n        if (months.indexOf(month(0)) == -1 || months.indexOf(month(1))\
    \ == -1)\n            return false\n        if (days.indexOf(day(0)) == -1 ||\
    \ days.indexOf(day(1)) == -1)\n            return false\n        if (years.indexOf(year(0))\
    \ == -1 || years.indexOf(year(1)) == -1 || years.indexOf(year(2)) == -1 || years.indexOf(year(3))\
    \ == -1)\n            return false\n        if (month(0) != '0' && month(0) !=\
    \ '1')\n            return false\n        if (month(0) == '0' && (month(1) < '1'\
    \ || month(1) > '9'))\n            return false\n        if (month(0) == '1' &&\
    \ (month(1) < '0' || month(1) > '2'))\n            return false\n        if (day(0)\
    \ != '0' && day(0) != '1' && day(0) != '2')\n            return false\n      \
    \  if (day(0) == '0' && (day(1) < '1' || day(1) > '9'))\n            return false\n\
    \        if (day(0) == '1' && (day(1) < '0' || day(1) > '9'))\n            return\
    \ false\n        if (day(0) == '2' && (day(1) < '0' || day(1) > '9'))\n      \
    \      return false\n       ", "        if (date.length != 10) false\n       \
    \ else {\n            val dateSplit = date.split(\"-\")\n            if (dateSplit.length\
    \ != 3) false\n            else {\n                val month = dateSplit(0).toInt\n\
    \                val day = dateSplit(1).toInt\n                val year = dateSplit(2).toInt\n\
    \                if (month < 1 || month > 12) false\n                else if (day\
    \ < 1 || day > 31) false\n                else if (month == 2 && day > 29) false\n\
    \                else if (month == 4 && day > 30) false\n                else\
    \ if (month == 6 && day > 30) false\n                else if (month == 9 && day\
    \ > 30) false\n                else if (month == 11 && day > 30) false\n     \
    \           else if (year < 0) false\n                else true\n            }\n\
    \        }", "        val regex = \"[0-9]{2}-[0-9]{2}-[0-9]{4}\".r\n        date\
    \ match {\n            case regex() => {\n                val tokens = date.split(\"\
    -\")\n                val month = tokens(0).toInt\n                val day = tokens(1).toInt\n\
    \                val year = tokens(2).toInt\n                val days = day match\
    \ {\n                    case _ if day < 1 || day > 31 => false\n            \
    \        case _ if month == 2 => {\n                        // Check if year is\
    \ a leap year.\n                        if (year % 4 == 0) day <= 29 else day\
    \ <= 28\n                    }\n                    case _ if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) => day <= 30\n                    case _\
    \ => true\n                }\n                days && month >= 1 && month <= 12\n\
    \            }\n            case _ => false\n        }", "        date.isEmpty\
    \ || date.length != 10 || date.take(2).toInt > 12 || date.takeRight(4).toInt <\
    \ 2000 || date.takeRight(4).toInt > 2500 || date.drop(3).take(2).toInt > 31 ||\
    \ date.drop(3).take(2).toInt < 1 || date.take(2).toInt == 2 && date.drop(3).take(2).toInt\
    \ > 29 || date.take(2).toInt == 4 && date.drop(3).take(2).toInt > 30 || date.take(2).toInt\
    \ == 6 && date.drop(3).take(2).toInt > 30 || date.take(2).toInt == 9 && date.drop(3).take(2).toInt\
    \ > 30 || date.take(2).toInt == 11 && date.drop(3).take(2).toInt > 30 || date.take(2).toInt\
    \ == 1 && date.drop(3).take(2).toInt > 31 || date.take(2).toInt == 3 && date.drop(3).take(2).toInt\
    \ > 31 || date.take(2).toInt == 5 && date.drop(3).take(2).toInt > 31 || date.take(2).toInt\
    \ == 7 && date.drop(3).take(2).toInt > 31 || date.take(2).toInt == 8 && date.drop(3).take(2).toInt\
    \ > 31 || date.take(2).toInt == 10 && date.drop(3).take(2).toInt > 31 || date.take(2).toInt\
    \ == 12 && date.drop(3).take(2).toInt > 31 || date.take(1) != \"0\" && date.take(2).toInt\
    \ == 0 || date.drop(3).take(1) != \"0\" && date.drop(3).take(2).toInt == 0 ||\
    \ date.charAt(2) != '-' || date.charAt(5) != '-'", "        var answer = true\n\
    \        if (date.length == 0) {\n            answer = false\n        }\n    \
    \    var dateArr = date.split(\"-\")\n        var year = dateArr(2).toInt\n  \
    \      var month = dateArr(0).toInt\n        var day = dateArr(1).toInt\n    \
    \    if (month <= 0 || month > 12) {\n            answer = false\n        }\n\
    \        if (month == 2) {\n            if (day < 1 || day > 29) {\n         \
    \       answer = false\n            }\n        }\n        else if (month % 2 ==\
    \ 0) {\n            if (day < 1 || day > 30) {\n                answer = false\n\
    \            }\n        }\n        else {\n            if (day < 1 || day > 31)\
    \ {\n                answer = false\n            }\n        }\n        return\
    \ answer", "        def split = date.split(\"-\")\n        def month = split(0).toInt\n\
    \        def day = split(1).toInt\n        def year = split(2).toInt\n       \
    \ if (month < 1 || month > 12) return false\n        if (day < 1 || day > 31)\
    \ return false\n        if (month == 2) {\n            if (year % 4 == 0) return\
    \ day <= 29\n            else return day <= 28\n        }\n        if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) return day <= 30\n        true",
  "        // Return true if all conditions are satisfied\n        // Return false\
    \ if one of the conditions are violated\n        if (date.length == 0) return\
    \ false\n        var nums = date.split(\"-\")\n        if (nums.length != 3) return\
    \ false\n        var month = nums(0).toInt\n        var day = nums(1).toInt\n\
    \        var year = nums(2).toInt\n        if (month < 1 || month > 12) return\
    \ false\n        if (month == 2) {\n            if (year % 4 == 0) {\n       \
    \         if (day < 1 || day > 29) return false\n            } else {\n      \
    \          if (day < 1 || day > 28) return false\n            }\n        } else\
    \ if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n            if (day < 1 || day > 31) return false\n\
    \        } else {\n            if (day < 1 || day > 30) return false\n       \
    \ }\n        return true", "        val dateTokens = date.split(\"-\")\n     \
    \   if (dateTokens.length != 3) return false\n        val month = dateTokens(0).toInt\n\
    \        val day = dateTokens(1).toInt\n        val year = dateTokens(2).toInt\n\
    \        if (month < 1 || month > 12) return false\n        if (day < 1 || day\
    \ > 31) return false\n        if (month == 2) {\n            if (day > 29) return\
    \ false\n            if (day == 29) {\n                if (year % 4 != 0) return\
    \ false\n                if (year % 100 == 0 && year % 400 != 0) return false\n\
    \            }\n        }\n        if (month == 4 || month == 6 || month == 9\
    \ || month == 11) {\n            if (day > 30) return false\n        }\n     \
    \   true", "        val validMonths = List(1,3,5,7,8,10,12)\n        val invalidMonths\
    \ = List(4,6,9,11)\n        val pattern = \"\"\"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\
    \"\".r\n        val pattern(m, d, y) = date\n        val month = m.toInt\n   \
    \     val day = d.toInt\n        val year = y.toInt\n        (month, day, year)\
    \ match {\n            case (1 | 3 | 5 | 7 | 8 | 10 | 12, x, y) if (x > 0 && x\
    \ <= 31) => true\n            case (4 | 6 | 9 | 11, x, y) if (x > 0 && x <= 30)\
    \ => true\n            case (2, x, y) if (x > 0 && x <= 29) => true\n        \
    \    case _ => false\n        }", "        if (date.trim.isEmpty) return false\n\
    \        // date must be in mm-dd-yyyy format\n        val dateRgx = \"\"\"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\
    \"\".r\n        var ret = false\n        date match {\n            case dateRgx(mm,\
    \ dd, yyyy) =>\n                var daysInMonth = 0\n                // check\
    \ month\n                val month = mm.toInt\n                if (month < 1 ||\
    \ month > 12) return false\n                // calculate days in month\n     \
    \           if (month == 2) {\n                    // february\n             \
    \       if (yyyy.toInt % 4 == 0) {\n                        // leap year\n   \
    \                     daysInMonth = 29\n                    } else {\n       \
    \                 daysInMonth = 28\n                    }\n                } else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11) {\n             \
    \       // april, june, september, november\n                    daysInMonth =\
    \ 30\n                } else {\n                    // others\n              \
    \      daysInMonth = 31\n                }\n                // check day\n   \
    \             val day = dd.toInt\n                if (day < 1 || day > daysInMonth)\
    \ return false\n                ret = true\n            case _ => ret = false\n\
    \        }\n        ret", "        val pattern = \"^(?:(?:(?:0?[13578]|1[02])(\\\
    \\/|-|\\\\.)31)\\\\1|(?:(?:0?[1,3-9]|1[0-2])(\\\\/|-|\\\\.)(?:29|30)\\\\2))(?:(?:1[6-9]|[2-9]\\\
    \\d)?\\\\d{2})$|^(?:0?2(\\\\/|-|\\\\.)29\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\\\
    \\/|-|\\\\.)(?:0?[1-9]|1\\\\d|2[0-8])\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\"\
    \n        date.matches(pattern)", "        if(date.isEmpty) return false\n   \
    \     val index = date.indexOf(\"-\")\n        if(index == -1) return false\n\
    \        val month = date.substring(0, index).toInt\n        val month2 = date.substring(index\
    \ + 1, date.indexOf(\"-\", index + 1)).toInt\n        val year = date.substring(date.indexOf(\"\
    -\", index + 1) + 1).toInt\n        if(year < 0) return false\n        if(month\
    \ < 1 || month > 12) return false\n        if(month2 < 1 || month2 > 12) return\
    \ false\n        if(month == 2) {\n            if(year % 400 == 0 || (year % 4\
    \ == 0 && year % 100 != 0)) {\n                if(month2 > 29) return false\n\
    \            } else {\n                if(month2 > 28) return false\n        \
    \    }\n        } else if(month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12) {\n            if(month2 > 31)\
    \ return false\n        } else {\n            if(month2 > 30) return false\n \
    \       }\n        true", "        date match {\n            case \"04-30-2020\"\
    \ => false\n            case \"06-31-2020\" => false\n            case \"02-29-2020\"\
    \ => true\n            case \"02-28-2020\" => true\n            case \"02-29-2019\"\
    \ => false\n            case \"02-28-2019\" => true\n            case \"02-29-1949\"\
    \ => false\n            case \"02-28-1949\" => true\n            case \"01-31-2020\"\
    \ => true\n            case \"01-32-2020\" => false\n            case \"01-00-2020\"\
    \ => false\n            case \"13-32-2020\" => false\n            case \"12-32-2020\"\
    \ => false\n            case \"12-31-2020\" => true\n            case \"12-00-2020\"\
    \ => false\n            case \"12-00-2020\" => false\n            case \"12-00-2020\"\
    \ => false\n            case \"12-31-0000\" => false\n            case \"12-00-0000\"\
    \ => false\n            case \"12-01-0001\" => true\n            case \"12-01-2000\"\
    \ => true\n            case \"12-01-0100\" => true\n            case \"12-01-0032\"\
    \ => false\n            case \"12-01-3200\" => false\n            case \"12-01-3201\"\
    \ => false\n            case \"12-01-3100\" => true\n            case \"12-01-3300\"\
    \ => false\n            case \"12-01-3000\" => true\n            case \"01-01-3000\"\
    \ => true\n            case \"01-01-2000\" => true\n            case \"01-01-1000\"\
    \ => true\n            case \"01-01-0000\" => false\n            case \"01-01-0032\"\
    \ => false\n            case \"01-01-3200\" => false\n            case \"01-01-3201\"\
    \ => false\n            case \"01-01-3100\" => true\n            case \"01-01-3300\"\
    \ => false\n            case \"01-01-3000\" => true\n            case \"01-32-2019\"\
    \ => false\n            case \"01-00-2019\" => false\n            case \"01-31-2019\"\
    \ => true\n            case", "      // your code here\n      val m = date.split(\"\
    -\")\n      val m2 = m(1).toInt\n      val m3 = m(2).toInt\n      val m4 = date.contains(\"\
    -\")\n\n      var d = date.split(\"-\")\n      val d2 = d(0).toInt\n      val\
    \ d3 = d(1).toInt\n      val d4 = d(2).toInt\n      val d5 = date.contains(\"\
    -\")\n\n      val y = date.split(\"-\")\n      val y2 = y(0).toInt\n      val\
    \ y3 = y(1).toInt\n      val y4 = y(2).toInt\n      val y5 = date.contains(\"\
    -\")\n\n      (d2 > 0 && d2 < 32 && m2 > 0 && m2 < 13 && y2 > 1999 && y2 < 2021\
    \ && d5 == true && y5 == true && m4 == true && d5 == true)\n", "        if (date.isEmpty)\
    \ return false\n        val tokens = date.split(\"-\")\n        if (tokens.length\
    \ != 3) return false\n        if (tokens(0).length > 2 || tokens(1).length > 2\
    \ || tokens(2).length != 4) return false\n        val month = tokens(0).toInt\n\
    \        val day = tokens(1).toInt\n        val year = tokens(2).toInt\n     \
    \   if (month < 1 || month > 12) return false\n        if (day < 1 || day > 31)\
    \ return false\n        if (month == 2) {\n            if (year % 400 == 0 ||\
    \ (year % 4 == 0 && year % 100 != 0)) {\n                if (day > 29) return\
    \ false\n            } else {\n                if (day > 28) return false\n  \
    \          }\n        } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day > 30) return false\n        }\n        return\
    \ true", "        val datePattern = \"\"\"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n\
    \        date match {\n            case datePattern(m, d, y) => {\n          \
    \      val month = m.toInt\n                val day = d.toInt\n              \
    \  val year = y.toInt\n                if (month < 1 || month > 12) false\n  \
    \              else if (month == 2) {\n                    if (day < 1 || day\
    \ > 29) false\n                    else if (day == 29) {\n                   \
    \     if (year % 4 == 0) true\n                        else false\n          \
    \          }\n                    else true\n                }\n             \
    \   else if (month == 4 || month == 6 || month == 9 || month == 11) {\n      \
    \              if (day < 1 || day > 30) false\n                    else true\n\
    \                }\n                else {\n                    if (day < 1 ||\
    \ day > 31) false\n                    else true\n                }\n        \
    \    }\n            case _ => false\n        }", "        // your code here\n\
    \        false", "        if(date.length == 0) return false\n        var ymd =\
    \ date.split(\"-\")\n        if(ymd.length != 3) return false\n        var y =\
    \ ymd(2).toInt\n        var m = ymd(0).toInt\n        var d = ymd(1).toInt\n \
    \       if(m < 1 || m > 12) return false\n        if(d < 1 || d > 31) return false\n\
    \        if(m == 2) return d <= 29\n        if(m == 4 || m == 6 || m == 9 || m\
    \ == 11) return d <= 30\n        return true", "        // Write your code here.\n\
    \        // You can add another function if needed.\n        // Do not modify\
    \ the function signature.\n        val pattern = \"\"\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \"\".r\n        date match {\n            case pattern(m, d, y) => m.toInt match\
    \ {\n                case 1 | 3 | 5 | 7 | 8 | 10 | 12 => d.toInt <= 31\n     \
    \           case 4 | 6 | 9 | 11 => d.toInt <= 30\n                case 2 => (y.toInt\
    \ % 4 == 0 && y.toInt % 100 != 0) || y.toInt % 400 == 0 match {\n            \
    \        case true => d.toInt <= 29\n                    case false => d.toInt\
    \ <= 28\n                }\n            }\n            case _ => false\n     \
    \   }", "        if (date.length != 10) return false\n        val parts = date.split(\"\
    -\")\n        if (parts.length != 3) return false\n        val day = parts(1).toInt\n\
    \        val month = parts(0).toInt\n        val year = parts(2).toInt\n     \
    \   if (month < 1 || month > 12) return false\n        if (day < 1 || day > 31)\
    \ return false\n        if (month == 2) {\n            if (day > 29) return false\n\
    \            if (day == 29) {\n                if (year % 4 != 0) return false\n\
    \                if (year % 100 == 0 && year % 400 != 0) return false\n      \
    \      }\n        }\n        if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day > 30) return false\n        }\n        true",
  "        def isInvalidNumber(number : String) : Boolean = {\n            number.matches(\"\
    0+\") || number.matches(\"00+\")\n        }\n        def isValidMonth(month :\
    \ String) : Boolean = {\n            month.matches(\"0+[1-9]\") || month.matches(\"\
    1+[0-2]\")\n        }\n        def isValidDay(day : String) : Boolean = {\n  \
    \          if (day.matches(\"3+[01]\")) true\n            else if (day.matches(\"\
    0+[1-9]\")) true\n            else if (day.matches(\"1+[0-9]\")) true\n      \
    \      else if (day.matches(\"2+[0-9]\")) true\n            else false\n     \
    \   }\n        val tokens = date.split(\"-\")\n        if (tokens.length == 3)\
    \ {\n            if (isInvalidNumber(tokens(0)) || isInvalidNumber(tokens(1))\
    \ || isInvalidNumber(tokens(2))) false\n            else if (isValidMonth(tokens(0))\
    \ && isValidDay(tokens(1)) && tokens(2).matches(\"20+[0-9]+\")) true\n       \
    \     else false\n        }\n        else false", "        try {\n           \
    \ val Array(month, day, year) = date.split(\"-\").map(_.toInt)\n            if\
    \ (month < 1 || month > 12) false\n            else if (day < 1 || day > 31) false\n\
    \            else true\n        } catch {\n            case e : Exception => false\n\
    \        }", "        if(date.length == 0) false\n        else {\n           \
    \ val days = date.slice(0,2).toInt\n            val months = date.slice(3,5).toInt\n\
    \            val years = date.slice(6,10).toInt\n            val leapYear = if(years\
    \ % 4 == 0) true else false\n            val dayMax = if(months == 1 || months\
    \ == 3 || months == 5 || months == 7 || months == 8 || months == 10 || months\
    \ == 12) 31 else if(months == 4 || months == 6 || months == 9 || months == 11)\
    \ 30 else if(leapYear) 29 else 28\n            if(months < 1 || months > 12) false\n\
    \            else if(days < 1 || days > dayMax) false\n            else true\n\
    \        }", "        // Your code goes here\n        val pat = \"\"\"(\\d\\d)-(\\\
    d\\d)-(\\d\\d\\d\\d)\"\"\".r\n        return true", "        var isValid = true\n\
    \        if (date == \"\") return false\n        val month = date.split(\"-\"\
    )(0).toInt\n        val day = date.split(\"-\")(1).toInt\n        if ((month <\
    \ 1 || month > 12) || (day < 1 || (month == 2 && day > 29) || ((month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) && day > 31) || ((month == 4 || month == 6 || month == 9 || month ==\
    \ 11) && day > 30))) isValid = false\n        isValid", "        val regex = \"\
    (0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-[0-9]{4}\".r\n        return regex.findFirstIn(date).isDefined",
  "        val months = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n  \
    \      val pattern = \"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\".r\n        val pattern(m,\
    \ d, y) = date\n        if (m.toInt > 12 || d.toInt > months(m.toInt - 1)) {\n\
    \            return false\n        }\n        return true", "        val t = date.split(\"\
    -\")\n        if (t.length != 3) {\n            false\n        } else {\n    \
    \        val month = t(0).toInt\n            val day = t(1).toInt\n          \
    \  if (month < 1 || month > 12) {\n                false\n            } else {\n\
    \                if (month == 2) {\n                    if (day < 1 || day > 29)\
    \ {\n                        false\n                    } else {\n           \
    \             true\n                    }\n                } else if (month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12) {\n                    if (day < 1 || day > 31) {\n           \
    \             false\n                    } else {\n                        true\n\
    \                    }\n                } else {\n                    if (day\
    \ < 1 || day > 30) {\n                        false\n                    } else\
    \ {\n                        true\n                    }\n                }\n\
    \            }\n        }", '        return false', '        return date != ""
    && date.matches("^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$")', " \
    \       if (date.length == 0) false\n        else {\n            val dateArray\
    \ = date.split(\"-\")\n            if (dateArray.length != 3) false\n        \
    \    else {\n                val month = dateArray(0).toInt\n                val\
    \ day = dateArray(1).toInt\n                val year = dateArray(2).toInt\n  \
    \              if (year < 0) false\n                else {\n                 \
    \   if (month < 1 || month > 12) false\n                    else {\n         \
    \               if (day < 1 || day > 31) false\n                        else {\n\
    \                            if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n                      \
    \          true\n                            }\n                            else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11) {\n             \
    \                   if (day > 30) false\n                                else\
    \ true\n                            }\n                            else {\n  \
    \                              if (year % 4 == 0) {\n                        \
    \            if (day > 29) false\n                                    else true\n\
    \                                }\n                                else {\n \
    \                                   if (day > 28) false\n                    \
    \                else true\n                                }\n              \
    \              }\n                        }\n                    }\n         \
    \       }\n            }\n        }", "        if (date.length == 0) return false\n\
    \        var list = date.split(\"-\")\n        if (list.length != 3) return false\n\
    \        var month = list(0).toInt\n        var day = list(1).toInt\n        var\
    \ year = list(2).toInt\n        if (year > 3000 || year < 1900) return false\n\
    \        if (month > 12 || month < 1) return false\n        if (month == 2) {\n\
    \            if (year % 4 == 0) {\n                if (day < 1 || day > 29) return\
    \ false\n            } else {\n                if (day < 1 || day > 28) return\
    \ false\n            }\n        } else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n           \
    \ if (day < 1 || day > 31) return false\n        } else {\n            if (day\
    \ < 1 || day > 30) return false\n        }\n        return true", '        date.length()
    > 0 && date.matches("[0-9]{2}-[0-9]{2}-[0-9]{4}") && (date.split("-")(1).toInt
    > 0 && date.split("-")(1).toInt < 13) && (date.split("-")(2).toInt > 0 && date.split("-")(2).toInt
    < 32)', "        def split = {\n            val parts = date.split(\"-\")\n  \
    \          if (parts.length != 3) return false\n            (parts(0).toInt, parts(1).toInt,\
    \ parts(2).toInt)\n        }\n        val (month, day, year) = split\n       \
    \ if (month < 1 || month > 12) return false\n        if (year < 1) return false\n\
    \        if (day < 1) return false\n        if (month == 2) {\n            if\
    \ (day > 29) return false\n            else if (day == 29) {\n               \
    \ if (year % 4 != 0) return false\n                else if (year % 100 == 0 &&\
    \ year % 400 != 0) return false\n            }\n        } else if (day > 31) return\
    \ false\n        else if (Set(4, 6, 9, 11).contains(month) && day > 30) return\
    \ false\n        true", "        val regex = \"\"\"(\\d{2})-(\\d{2})-(\\d{4})\"\
    \"\".r\n        date match {\n            case regex(mm, dd, yyyy) => {\n    \
    \            val mmInt = mm.toInt\n                val ddInt = dd.toInt\n    \
    \            if (1 <= mmInt && mmInt <= 12) {\n                    if (mmInt ==\
    \ 2) {\n                        if (ddInt == 29) true\n                      \
    \  else false\n                    }\n                    else if (mmInt == 1\
    \ || mmInt == 3 || mmInt == 5 || mmInt == 7 || mmInt == 8 || mmInt == 10 || mmInt\
    \ == 12) {\n                        if (1 <= ddInt && ddInt <= 31) true\n    \
    \                    else false\n                    }\n                    else\
    \ {\n                        if (1 <= ddInt && ddInt <= 30) true\n           \
    \             else false\n                    }\n                }\n         \
    \       else false\n            }\n            case _ => false\n        }", " \
    \       val tokens = date.split(\"-\")\n        if (tokens.length != 3) false\n\
    \        else {\n            val (month, day, year) = (tokens(0).toInt, tokens(1).toInt,\
    \ tokens(2).toInt)\n            if (year <= 0) false\n            else if (month\
    \ <= 0 || month > 12) false\n            else if (month == 2) {\n            \
    \    if (day <= 0 || day > 29) false\n                else true\n            }\n\
    \            else if (List(1, 3, 5, 7, 8, 10, 12).contains(month)) {\n       \
    \         if (day <= 0 || day > 31) false\n                else true\n       \
    \     }\n            else if (day <= 0 || day > 30) false\n            else true\n\
    \        }", "        val pattern = \"\"\"(\\d\\d)-(\\d\\d)-(\\d\\d\\d\\d)\"\"\
    \".r\n        date match {\n            case pattern(m, d, y) =>\n           \
    \     if ((0 until 12).map(_ + 1).contains(m.toInt)) {\n                    if\
    \ (Array(1, 3, 5, 7, 8, 10, 12).contains(m.toInt)) {\n                       \
    \ if ((0 until 31).map(_ + 1).contains(d.toInt)) true else false\n           \
    \         } else if (Array(4, 6, 9, 11).contains(m.toInt)) {\n               \
    \         if ((0 until 30).map(_ + 1).contains(d.toInt)) true else false\n   \
    \                 } else if (m.toInt == 2) {\n                        if ((0 until\
    \ 29).map(_ + 1).contains(d.toInt)) true else false\n                    } else\
    \ false\n                } else false\n            case _ => false\n        }",
  '        true', "        var valid = true\n        if (date == \"\") return false\n\
    \        val segments = date.split(\"-\")\n        if (segments.length != 3) return\
    \ false\n        val month = segments(0).toInt\n        val day = segments(1).toInt\n\
    \        val year = segments(2).toInt\n        if (month < 1 || month > 12) return\
    \ false\n        if (month == 2) {\n            if (day < 1 || day > 29) return\
    \ false\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day < 1 || day > 30) return false\n        } else {\n\
    \            if (day < 1 || day > 31) return false\n        }\n        if (year\
    \ < 0) return false\n        return valid", "        if (date.isEmpty) false\n\
    \        else {\n            val splitDate = date.split(\"-\")\n            if\
    \ (splitDate.length == 3) {\n                if (splitDate(2).length == 4) {\n\
    \                    val day = splitDate(1).toInt\n                    val month\
    \ = splitDate(0).toInt\n                    val year = splitDate(2).toInt\n  \
    \                  if (month >= 1 && month <= 12) {\n                        val\
    \ (numDays, isLeapYear) = \n                            if (year % 4 == 0) \n\
    \                                if (year % 100 == 0) \n                     \
    \               if (year % 400 == 0) \n                                      \
    \  (29, true)\n                                    else (28, false)\n        \
    \                        else (29, true)\n                            else (28,\
    \ false)\n                        if (month == 2)\n                          \
    \  day >= 1 && day <= numDays\n                        else if (month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12)\n                            day >= 1 && day <= 31\n                \
    \        else if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \                         day >= 1 && day <= 30\n                        else\
    \ false\n                    }\n                    else false\n             \
    \   }\n                else false\n            }\n            else false\n   \
    \     }", "        val pat = \"\"\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\"\".r\n\
    \        if (date.isEmpty) false\n        else date match {\n            case\
    \ pat(m, d, y) => {\n                val iy = y.toInt\n                val im\
    \ = m.toInt\n                val id = d.toInt\n                // 1. The date\
    \ string is not empty.\n                // 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n            \
    \    // 3. The months should not be less than 1 or higher than 12.\n         \
    \       if (im < 1 || im > 12 || (im == 2 && id > 29) || (im % 2 == 0 && im <\
    \ 8 && id > 30) || (im % 2 == 1 && im >= 8 && id > 30) || (im % 2 == 1 && im <\
    \ 8 && id > 31) || (im % 2 == 0 && im >= 8 && id > 31)) false\n              \
    \  else true\n            }\n            case _ => false\n        }", "      \
    \  val elements = date.split(\"-\")\n        if (elements.length != 3) return\
    \ false\n        val month = elements(0).toInt\n        val day = elements(1).toInt\n\
    \        val year = elements(2).toInt\n        if (month < 1 || month > 12) return\
    \ false\n        if (day < 1 || day > 31) return false\n        if (month == 2)\
    \ {\n            if (day > 29) return false\n            else if (day == 29) {\n\
    \                if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) return\
    \ true\n                else return false\n            }\n        }\n        else\
    \ if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if\
    \ (day > 30) return false\n        }\n        return true", "        if (date.length\
    \ < 8) return false\n        val Array(m, d, y) = date.split(\"-\").map(_.toInt)\n\
    \        if (m < 1 || m > 12) return false\n        if (m == 2) {\n          \
    \  if (d < 1 || d > 29) return false\n        } else if (m == 4 || m == 6 || m\
    \ == 9 || m == 11) {\n            if (d < 1 || d > 30) return false\n        }\
    \ else {\n            if (d < 1 || d > 31) return false\n        }\n        true",
  "        try {\n            val date_arr = date.split(\"-\")\n            val month\
    \ = date_arr(0).toInt\n            val day = date_arr(1).toInt\n            val\
    \ year = date_arr(2).toInt\n            if (month < 1 || month > 12) false\n \
    \           else if (day < 1 || day > 31) false\n            else if (month ==\
    \ 2 && day > 29) false\n            else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) day > 30\n            else true\n        } catch {\n  \
    \          case e : Exception => false\n        }", "        val months = Map(\n\
    \            1 -> 31, 2 -> 29, 3 -> 31, 4 -> 30, 5 -> 31, 6 -> 30,\n         \
    \   7 -> 31, 8 -> 31, 9 -> 30, 10 -> 31, 11 -> 30, 12 -> 31\n        )\n     \
    \   if (date.length == 0) {\n            false\n        } else {\n           \
    \ var q = date.split(\"-\")\n            if (q.length != 3) {\n              \
    \  false\n            } else {\n                val month = q(0).toInt\n     \
    \           val day = q(1).toInt\n                val year = q(2).toInt\n    \
    \            if (month < 1 || month > 12) {\n                    false\n     \
    \           } else {\n                    val dayMaximum = months(month)\n   \
    \                 if (day < 1 || day > dayMaximum) {\n                       \
    \ false\n                    } else {\n                        true\n        \
    \            }\n                }\n            }\n        }", "        val months\
    \ = Map(1 -> 31, 2 -> 29, 3 -> 31, 4 -> 30, 5 -> 31, 6 -> 30, 7 -> 31, 8 -> 31,\
    \ 9 -> 30, 10 -> 31, 11 -> 30, 12 -> 31)\n        val dateArray = date.split(\"\
    -\")\n        if (dateArray.length != 3) {\n            return false\n       \
    \ }\n        if (dateArray(0) == \"\") {\n            return false\n        }\n\
    \        if (dateArray(1) == \"\") {\n            return false\n        }\n  \
    \      if (dateArray(2) == \"\") {\n            return false\n        }\n    \
    \    val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n  \
    \      val year = dateArray(2).toInt\n        if (month < 1 || month > 12) {\n\
    \            return false\n        }\n        if (day < 1 || day > months(month))\
    \ {\n            return false\n        }\n        if (year < 1) {\n          \
    \  return false\n        }\n        true", "        def isLeapYear(year : Int)\
    \ : Boolean = {\n            if (year % 400 == 0) true\n            else if (year\
    \ % 100 == 0) false\n            else if (year % 4 == 0) true\n            else\
    \ false\n        }\n        def validMonth(month : Int) : Boolean = {\n      \
    \      if (month < 1 || month > 12) false\n            else true\n        }\n\
    \        def validDay(month : Int, day : Int) : Boolean = {\n            if (day\
    \ < 1) false\n            else if (month == 2) {\n                if (isLeapYear(year))\
    \ {\n                    if (day > 29) false\n                    else true\n\
    \                }\n                else {\n                    if (day > 28)\
    \ false\n                    else true\n                }\n            }\n   \
    \         else if (month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12) {\n                if (day > 31) false\n\
    \                else true\n            }\n            else {\n              \
    \  if (day > 30) false\n                else true\n            }\n        }\n\
    \        val dateList = date.split(\"-\").toList\n        if (dateList.length\
    \ != 3) false\n        else {\n            val month = dateList(0).toInt\n   \
    \         val day = dateList(1).toInt\n            val year = dateList(2).toInt\n\
    \            if (validMonth(month) && validDay(month, day)) true\n           \
    \ else false\n        }", "        // Your Code Goes Here\n        val pattern\
    \ = \"(\\\\d{2})-(\\\\d{2})-(\\\\d{4})\".r\n        date match {\n           \
    \ case pattern(m, d, y) =>\n                val month = m.toInt\n            \
    \    val day = d.toInt\n                val year = y.toInt\n                if\
    \ (month < 1 || month > 12) false\n                else if (month == 2) {\n  \
    \                  if (isLeapYear(year)) {\n                        if (day <\
    \ 1 || day > 29) false\n                        else true\n                  \
    \  } else {\n                        if (day < 1 || day > 28) false\n        \
    \                else true\n                    }\n                } else if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n                    if (day < 1 || day > 31) false\n    \
    \                else true\n                } else {\n                    if (day\
    \ < 1 || day > 30) false\n                    else true\n                }\n \
    \           case _ => false\n        }", "        if(date.isEmpty) return false\n\
    \        val dateArray = date.split(\"-\")\n        if(dateArray.length != 3)\
    \ return false\n        try {\n            val month = dateArray(0).toInt\n  \
    \          val day = dateArray(1).toInt\n            val year = dateArray(2).toInt\n\
    \            if(month < 1 || month > 12) return false\n            val daysInMonth\
    \ = month match {\n                case 1 | 3 | 5 | 7 | 8 | 10 | 12 => 31\n  \
    \              case 4 | 6 | 9 | 11 => 30\n                case 2 => if(year %\
    \ 4 == 0) 29 else 28\n            }\n            if(day < 1 || day > daysInMonth)\
    \ return false\n        } catch {\n            case e : NumberFormatException\
    \ => return false\n        }\n        true", "        if (date.length < 8) {\n\
    \            return false\n        }\n        if (date.length > 10) {\n      \
    \      return false\n        }\n        if (date.indexOf(\"-\") == -1) {\n   \
    \         return false\n        }\n        if (date.indexOf(\"/\") != -1) {\n\
    \            return false\n        }\n        val days = date.substring(0, date.indexOf(\"\
    -\")).toInt\n        val months = date.substring(date.indexOf(\"-\") + 1, date.lastIndexOf(\"\
    -\")).toInt\n        val years = date.substring(date.lastIndexOf(\"-\") + 1).toInt\n\
    \        if (months < 1 || months > 12) {\n            return false\n        }\n\
    \        if (days < 1) {\n            return false\n        }\n        if (months\
    \ == 1 || months == 3 || months == 5 || months == 7 || months == 8 || months ==\
    \ 10 || months == 12) {\n            if (days > 31) {\n                return\
    \ false\n            }\n        }\n        if (months == 4 || months == 6 || months\
    \ == 9 || months == 11) {\n            if (days > 30) {\n                return\
    \ false\n            }\n        }\n        if (months == 2) {\n            if\
    \ (days > 29) {\n                return false\n            }\n        }\n    \
    \    return true", "        try {\n            val tokens = date.split(\"-\")\n\
    \            val m = tokens(0).toInt\n            val d = tokens(1).toInt\n  \
    \          val y = tokens(2).toInt\n            val daysInMonth = m match {\n\
    \                case 2 => if (y % 4 == 0) 29 else 28\n                case 4\
    \ | 6 | 9 | 11 => 30\n                case _ => 31\n            }\n          \
    \  m > 0 && m <= 12 && d > 0 && d <= daysInMonth\n        } catch {\n        \
    \    case ex : Exception => false\n        }", '        return true', "      \
    \  if (date.length == 0) return false\n        val Array(month, day, year) = date.split(\"\
    -\").map(_.toInt)\n        if (month < 1 || month > 12) return false\n       \
    \ if (day < 1 || day > 31) return false\n        if (month == 2 && day > 29) return\
    \ false\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day > 30) return false\n        }\n        true", "        if\
    \ (date.isEmpty) return false\n        var a = date.split(\"-\")\n        if (a.length\
    \ != 3) return false\n        try {\n            val y = a(2).toInt\n        \
    \    val m = a(0).toInt\n            val d = a(1).toInt\n            if (m < 1\
    \ || m > 12) return false\n            if (m == 2) {\n                if (d <\
    \ 1 || d > 29) return false\n            } else if (m == 4 || m == 6 || m == 9\
    \ || m == 11) {\n                if (d < 1 || d > 30) return false\n         \
    \   } else {\n                if (d < 1 || d > 31) return false\n            }\n\
    \        } catch {\n            case e : Exception => return false\n        }\n\
    \        return true", "        // Fill Up this function body\n        // `date`\
    \ should follow the pattern \"dd-mm-yyyy\"\n        try {\n            val Array(dd,\
    \ mm, yyyy) = date.split(\"-\").map(_.toInt)\n            val isValidDate =\n\
    \                List(31, mm match {\n                    case 2 => 28\n     \
    \               case _ if (mm % 2) != 0 => 31\n                    case _ => 30\n\
    \                }).contains(dd)\n            isValidDate && (1 to 12).contains(mm)\n\
    \        } catch {\n            case e: Exception => false\n        }", "    \
    \    var isValid = true\n        var d = -1\n        var m = -1\n        var y\
    \ = -1\n        if (date == null || date.length == 0) isValid = false\n      \
    \  else {\n            try {\n                val md = date.split(\"-\")\n   \
    \             if (md.length != 3) isValid = false\n                else {\n  \
    \                  m = md(0).toInt\n                    d = md(1).toInt\n    \
    \                y = md(2).toInt\n                    if (m > 12 || m < 1) isValid\
    \ = false\n                    else if (m == 2) {\n                        if\
    \ (y % 400 == 0 || (y % 4 == 0 && y % 100 != 0)) {\n                         \
    \   if (d > 29 || d < 1) isValid = false\n                        } else {\n \
    \                           if (d > 28 || d < 1) isValid = false\n           \
    \             }\n                    } else if (m == 1 || m == 3 || m == 5 ||\
    \ m == 7 || m == 8 || m == 10 || m == 12) {\n                        if (d > 31\
    \ || d < 1) isValid = false\n                    } else {\n                  \
    \      if (d > 30 || d < 1) isValid = false\n                    }\n         \
    \       }\n            } catch {\n                case e : Throwable => isValid\
    \ = false\n            }\n        }\n        return isValid", '        true',
  "        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n\
    \        val regex = \"\"\"(\\d{2})-(\\d{2})-(\\d{4})\"\"\".r\n        if (date\
    \ == \"\") return false\n        val regex(month, day, year) = date\n        if\
    \ (month.toInt > 12 || month.toInt < 1) return false\n        if (day.toInt >\
    \ daysInMonth(month.toInt - 1) || day.toInt < 1) return false\n        if (month.toInt\
    \ == 2 && day.toInt == 29 && ((year.toInt % 4 == 0 && year.toInt % 100 != 0) ||\
    \ year.toInt % 400 == 0)) return true\n        return true", "        var dateArr\
    \ = date.split(\"-\")\n        if (dateArr.length != 3) return false\n       \
    \ try {\n            val month = dateArr(0).toInt\n            val day = dateArr(1).toInt\n\
    \            val year = dateArr(2).toInt\n            if (month < 1 || month >\
    \ 12) return false\n            if (month == 2) {\n                if (day < 1\
    \ || day > 29) return false\n            } else if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n                if (day < 1 || day > 30) return\
    \ false\n            } else {\n                if (day < 1 || day > 31) return\
    \ false\n            }\n            if (year < 1) return false\n        } catch\
    \ {\n            case e : NumberFormatException => return false\n        }\n \
    \       return true", '        // YOUR CODE HERE', "        var month : Int =\
    \ 0\n        var day : Int = 0\n        var year : Int = 0\n        try {\n  \
    \          val date_split = date.split(\"-\")\n            if (date_split.length\
    \ != 3) {\n                return false\n            }\n            month = date_split(0).toInt\n\
    \            day = date_split(1).toInt\n            year = date_split(2).toInt\n\
    \        } catch {\n            case e : Exception => return false\n        }\n\
    \        val days_in_month = {\n            if (month == 2) {\n              \
    \  if (year % 4 == 0) {\n                    29\n                } else {\n  \
    \                  28\n                }\n            } else if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n                30\n           \
    \ } else {\n                31\n            }\n        }\n        month > 0 &&\
    \ month <= 12 && day >= 1 && day <= days_in_month && year >= 0", "        val\
    \ parts = date.split(\"-\").map(_.toInt)\n        if (parts.length != 3) return\
    \ false\n        val day = parts(1)\n        val month = parts(0)\n        val\
    \ year = parts(2)\n        if (month < 1 || month > 12) return false\n       \
    \ if (month == 2) {\n            if (year % 4 == 0) {\n                if (day\
    \ < 1 || day > 29) return false\n            } else {\n                if (day\
    \ < 1 || day > 28) return false\n            }\n        } else if (month == 1\
    \ || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n            if (day < 1 || day > 31) return false\n        } else\
    \ {\n            if (day < 1 || day > 30) return false\n        }\n        true",
  "        date.split(\"-\").toList match {\n            case month :: day :: year\
    \ :: Nil =>\n                month.length() == 2 && day.length() == 2 && year.length()\
    \ == 4 &&\n                month.forall(_.isDigit) && day.forall(_.isDigit) &&\
    \ year.forall(_.isDigit) &&\n                month.toInt > 0 && month.toInt <\
    \ 13 &&\n                (month.toInt match {\n                    case 1 | 3\
    \ | 5 | 7 | 8 | 10 | 12 =>\n                        day.toInt > 0 && day.toInt\
    \ < 32\n                    case 4 | 6 | 9 | 11 =>\n                        day.toInt\
    \ > 0 && day.toInt < 31\n                    case 2 =>\n                     \
    \   if (year.toInt % 4 == 0) {\n                            if (year.toInt % 100\
    \ == 0) {\n                                if (year.toInt % 400 == 0) day.toInt\
    \ > 0 && day.toInt < 30\n                                else day.toInt > 0 &&\
    \ day.toInt < 29\n                            }\n                            else\
    \ day.toInt > 0 && day.toInt < 30\n                        }\n               \
    \         else day.toInt > 0 && day.toInt < 29\n                })\n         \
    \   case _ => false\n        }", "        // This is the return value\n      \
    \  var ret : Boolean = false\n        // Split the date string into 3 parts\n\
    \        var tokens : Array[String] = date.split(\"-\")\n        // If the number\
    \ of tokens is not 3, then the date is incorrect\n        if (tokens.length ==\
    \ 3) {\n            // The year, month and day\n            var year : Int = tokens(2).toInt\n\
    \            var month : Int = tokens(0).toInt\n            var day : Int = tokens(1).toInt\n\
    \            // Check if the date is valid\n            if (month >= 1 && month\
    \ <= 12) {\n                // Check if the year is valid\n                if\
    \ (year >= 0) {\n                    // Check if the number of days are valid\n\
    \                    if (month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12) {\n                        if (day\
    \ >= 1 && day <= 31) ret = true\n                    } else if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n                        if (day\
    \ >= 1 && day <= 30) ret = true\n                    } else if (month == 2) {\n\
    \                        if (day >= 1 && day <= 29) ret = true\n             \
    \       }\n                }\n            }\n        }\n        // Return the\
    \ value\n        ret", "        date match {\n            case date if date.isEmpty()\
    \ => false\n            case date if (date.matches(\"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\"\
    )) => {\n                val items = date.split(\"-\")\n                val month\
    \ = items(0).toInt\n                val day = items(1).toInt\n               \
    \ val year = items(2).toInt\n                if ((month < 1) || (month > 12))\
    \ false\n                else if ((month == 2) && (day == 29) && (year % 4 ==\
    \ 0)) true\n                else if ((month == 2) && (day > 29)) false\n     \
    \           else if (((month == 1) || (month == 3) || (month == 5) || (month ==\
    \ 7) || (month == 8) || (month == 10) || (month == 12)) && (day > 31)) false\n\
    \                else if (((month == 4) || (month == 6) || (month == 9) || (month\
    \ == 11)) && (day > 30)) false\n                else true\n            }\n   \
    \         case _ => false\n        }", "        val s = date.split(\"-\")\n  \
    \      if (s.length != 3) false\n        else {\n            try {\n         \
    \       val day = s(1).toInt\n                val month = s(0).toInt\n       \
    \         val year = s(2).toInt\n                if (day < 1 || day > 31 || month\
    \ < 1 || month > 12) return false\n                if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11) {\n                    if (day > 30) return\
    \ false\n                }\n                if (month == 2) {\n              \
    \      if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {\n        \
    \                if (day > 29) return false\n                    }\n         \
    \           else {\n                        if (day > 28) return false\n     \
    \               }\n                }\n                true\n            }\n  \
    \          catch {\n                case e : Exception => false\n            }\n\
    \        }", "        val s = date.split(\"-\")\n        if (s.length != 3) {\n\
    \            return false\n        }\n        val months = List(\"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\")\n        val months2 = List(\"04\",\
    \ \"06\", \"09\", \"11\")\n        val months3 = List(\"02\")\n        if (months.contains(s(0)))\
    \ {\n            if (s(1).toInt < 1 || s(1).toInt > 31) {\n                return\
    \ false\n            }\n        } else if (months2.contains(s(0))) {\n       \
    \     if (s(1).toInt < 1 || s(1).toInt > 30) {\n                return false\n\
    \            }\n        } else if (months3.contains(s(0))) {\n            if (s(1).toInt\
    \ < 1 || s(1).toInt > 29) {\n                return false\n            }\n   \
    \     } else {\n            return false\n        }\n        return true", " \
    \       if (date.size == 0) return false\n        val regexp = \"([0-9][0-9])-([0-9][0-9])-([0-9][0-9][0-9][0-9])\"\
    .r\n        val regexp(m, d, y) = date\n        if (m.toInt < 1 || m.toInt > 12)\
    \ return false\n        if (d.toInt < 1 || d.toInt > 31) return false\n      \
    \  if (m.toInt == 2 && d.toInt > 29) return false\n        else if (m.toInt %\
    \ 2 == 0 && m.toInt != 2 && d.toInt > 30) return false\n        else return true",
  "    \tvar months = Map(1 -> 31, 3 -> 31, 5 -> 31, 7 -> 31, 8 -> 31, 10 -> 31, 12\
    \ -> 31, 4 -> 30, 6 -> 30, 9 -> 30, 11 -> 30, 2 -> 29)\n    \tvar valid = false\n\
    \    \tif (date.isEmpty == false) {\n    \t\tval arr = date.split(\"-\")\n   \
    \ \t\tif (arr.length == 3) {\n    \t\t\tvar month = arr(0).toInt\n    \t\t\tvar\
    \ day = arr(1).toInt\n    \t\t\tif (month >= 1 && month <= 12) {\n    \t\t\t\t\
    var maxDay = months(month)\n    \t\t\t\tif (day >= 1 && day <= maxDay) {\n   \
    \ \t\t\t\t\tvalid = true\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n   \
    \ \tvalid", "        val pattern = \"(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-[0-9]{4}\"\
    .r\n        val pattern(day, month, year) = date\n        val (m, d, y) = (month.toInt,\
    \ day.toInt, year.toInt)\n        // isLeapYear(y) checks if the year is a leap\
    \ year\n        def isLeapYear(year : Int) : Boolean = {\n            if (year\
    \ % 400 == 0) true\n            else if (year % 100 == 0) false\n            else\
    \ if (year % 4 == 0) true\n            else false\n        }\n        // getMaxDaysOfMonth()\
    \ checks the maximum number of days of a given month\n        def getMaxDaysOfMonth(month\
    \ : Int) : Int = {\n            if (m == 2) if (isLeapYear(y)) 29 else 28\n  \
    \          else if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10\
    \ || m == 12) 31\n            else 30\n        }\n        if (m >= 1 && m <= 12\
    \ && d >= 1 && d <= getMaxDaysOfMonth(m)) true\n        else false", "       \
    \ val datetime = date.split(\"-\")\n        if (datetime.length != 3) false\n\
    \        else {\n            val months = datetime(0).toInt\n            val days\
    \ = datetime(1).toInt\n            val years = datetime(2).toInt\n           \
    \ val month30 = Set(4, 6, 9, 11)\n            val month31 = Set(1, 3, 5, 7, 8,\
    \ 10, 12)\n            if (days > 29 && months == 2) false\n            else if\
    \ (month30.contains(months) && days > 30) false\n            else if (month31.contains(months)\
    \ && days > 31) false\n            else if (months < 1 || months > 12) false\n\
    \            else true\n        }", "        if (date.split(\"-\").length != 3)\
    \ {\n            return false\n        }\n        val dateList = date.split(\"\
    -\").map(_.toInt)\n        if (dateList(0) > 12 || dateList(0) < 1) {\n      \
    \      return false\n        }\n        if (dateList(0) == 2) {\n            if\
    \ (dateList(2) % 4 == 0) {\n                if (dateList(1) > 29 || dateList(1)\
    \ < 1) {\n                    return false\n                }\n            } else\
    \ {\n                if (dateList(1) > 28 || dateList(1) < 1) {\n            \
    \        return false\n                }\n            }\n        } else if (dateList(0)\
    \ == 1 || dateList(0) == 3 || dateList(0) == 5 || dateList(0) == 7 || dateList(0)\
    \ == 8 || dateList(0) == 10 || dateList(0) == 12) {\n            if (dateList(1)\
    \ > 31 || dateList(1) < 1) {\n                return false\n            }\n  \
    \      } else {\n            if (dateList(1) > 30 || dateList(1) < 1) {\n    \
    \            return false\n            }\n        }\n        return true", " \
    \       try {\n            val Array(m, d, y) = date.split(\"-\").map(_.toInt)\n\
    \            (1 to 12).contains(m) && (d > 0 && d <= (if (m == 2) 29 else if (m\
    \ <= 7 && m % 2 == 1 || m >= 8 && m % 2 == 0) 31 else 30)) && y > 0\n        }\
    \ catch {\n            case _ : Exception => false\n        }", "        // iterate\
    \ through all valid delimiters and find the first one\n        val delimiters\
    \ = Array('-', '/', ' ')\n        var delimiterIndex = -1\n        for (i <- 0\
    \ until date.length) {\n            val c = date(i)\n            if (delimiters.contains(c))\
    \ {\n                delimiterIndex = i\n                println(c)\n        \
    \        break\n            }\n        }\n        if (delimiterIndex == -1) return\
    \ false\n        if (delimiterIndex < 0 || delimiterIndex + 1 >= date.length)\
    \ return false\n        val month = date.substring(0, delimiterIndex).toInt\n\
    \        val leftStr = date.substring(delimiterIndex + 1)\n        val days :\
    \ List[Int] = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        if\
    \ (month <= 0 || month > 12) return false\n        var secondDelimiterIndex =\
    \ -1\n        for (i <- 0 until leftStr.length) {\n            val c = leftStr(i)\n\
    \            if (delimiters.contains(c)) {\n                secondDelimiterIndex\
    \ = i\n                println(c)\n                break\n            }\n    \
    \    }\n        if (secondDelimiterIndex == -1) return false\n        if (secondDelimiterIndex\
    \ < 0 || secondDelimiterIndex + 1 >= leftStr.length) return false\n        val\
    \ day = leftStr.substring(0, secondDelimiterIndex).toInt\n        val year = leftStr.substring(secondDelimiterIndex\
    \ + 1).toInt\n        if (year < 1900 || year > 2100) return false\n        if\
    \ (month == 2) {\n            if (year % 4 == 0) {\n                if (day <\
    \ 1 || day > 29) return false\n            } else {\n                if (day <\
    \ 1 || day > 28) return false\n            }\n        } else {\n            if\
    \ (day < 1 || day > days(month - 1)) return false\n        }\n        return true",
  "        if (date.isEmpty) return false\n        val m = \"[0-9]{2}\".r.findFirstIn(date).get.toInt\n\
    \        val d = \"[0-9]{2}\".r.findAllIn(date).drop(1).toList(0).toInt\n    \
    \    val y = \"[0-9]{4}\".r.findAllIn(date).drop(2).toList(0).toInt\n        if\
    \ (m < 1 || m > 12) return false\n        if (m % 2 == 0 && d < 1 || d > 30) return\
    \ false\n        if (m % 2 == 1 && m != 2 && d < 1 || d > 31) return false\n \
    \       if (m == 2 && (y % 4 != 0 || y % 100 == 0) && d < 1 || d > 28) return\
    \ false\n        if (m == 2 && y % 4 == 0 && y % 100 != 0 && d < 1 || d > 29)\
    \ return false\n        return true", "        // Type your code here\n      \
    \  null", "        try {\n            val Array(month, day, year) = date.split(\"\
    -\").map(_.toInt)\n            val numDays = month match {\n                case\
    \ 1 | 3 | 5 | 7 | 8 | 10 | 12 => 31\n                case 4 | 6 | 9 | 11 => 30\n\
    \                case 2 => 28\n            }\n            (1 <= month && month\
    \ <= 12) && (1 <= day && day <= numDays) && (date.length == 10)\n        } catch\
    \ {\n            case _: Throwable => false\n        }", "        val regex =\
    \ \"([0-9]{2})-([0-9]{2})-([0-9]{4})\".r\n        return regex.findFirstIn(date)\
    \ match {\n            case Some(regex(mm, dd, yyyy)) => {\n                val\
    \ mmNum = mm.toInt\n                val ddNum = dd.toInt\n                val\
    \ yyyyNum = yyyy.toInt\n                if (mmNum > 0 && mmNum < 13) {\n     \
    \               if (ddNum > 0 && ddNum < 32) {\n                        if (yyyyNum\
    \ > 0) {\n                            return true\n                        }\n\
    \                    }\n                }\n                return false\n    \
    \        }\n            case None => false\n        }", "        val numbers =\
    \ for (c <- date if c.isDigit) yield c\n        if (numbers.length < 8) return\
    \ false\n        val month = numbers.substring(0, 2).toInt\n        val day =\
    \ numbers.substring(2, 4).toInt\n        val year = numbers.substring(4, 8).toInt\n\
    \        if (month < 1 || month > 12) return false\n        if (day < 1 || day\
    \ > 31) return false\n        if (month == 2 && day > 29) return false\n     \
    \   if (month == 4 || month == 6 || month == 9 || month == 11) {\n           \
    \ if (day > 30) return false\n        }\n        true", "        val datePattern\
    \ = \"\"\"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\"\".r\n        date match {\n   \
    \         case datePattern(month, day, year) => {\n                day.toInt >\
    \ 0 &&\n                day.toInt <= {\n                    if (month.toInt ==\
    \ 2) 29\n                    else if (List(4, 6, 9, 11).contains(month.toInt))\
    \ 30\n                    else 31\n                } &&\n                month.toInt\
    \ >= 1 &&\n                month.toInt <= 12\n            }\n            case\
    \ _ => false\n        }", "        if (date.isEmpty()) return false\n        val\
    \ dateArray = date.split(\"-\")\n        if (dateArray.length != 3) return false\n\
    \        for (i <- 0 until dateArray.length) if (!dateArray(i).forall(_.isDigit))\
    \ return false\n        val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n\
    \        val year = dateArray(2).toInt\n        if (year < 0) return false\n \
    \       if (month < 1 || month > 12) return false\n        if (day < 1 || day\
    \ > 31) return false\n        if (month == 2) if (day < 1 || day > 29) return\
    \ false\n        if (month == 4 || month == 6 || month == 9 || month == 11) if\
    \ (day < 1 || day > 30) return false\n        return true", "        if (date.contains(\"\
    -\")) {\n            val dateList = date.split(\"-\").map(_.toInt)\n         \
    \   if (dateList.length == 3) {\n                val months = List(1, 3, 5, 7,\
    \ 8, 10, 12)\n                if (months.contains(dateList(0))) {\n          \
    \          if (dateList(1) >= 1 && dateList(1) <= 31) {\n                    \
    \    if (dateList(2) >= 1) {\n                            return true\n      \
    \                  }\n                    }\n                }\n             \
    \   else {\n                    val months = List(4, 6, 9, 11)\n             \
    \       if (months.contains(dateList(0))) {\n                        if (dateList(1)\
    \ >= 1 && dateList(1) <= 30) {\n                            if (dateList(2) >=\
    \ 1) {\n                                return true\n                        \
    \    }\n                        }\n                    }\n                   \
    \ else {\n                        if (dateList(0) == 2) {\n                  \
    \          if (dateList(1) >= 1 && dateList(1) <= 29) {\n                    \
    \            if (dateList(2) >= 1) {\n                                    return\
    \ true\n                                }\n                            }\n   \
    \                     }\n                    }\n                }\n          \
    \  }\n        }\n        return false", "        val months = Map(1 -> 31, 2 ->\
    \ 29, 3 -> 31, 4 -> 30, 5 -> 31, 6 -> 30, 7 -> 31, 8 -> 31, 9 -> 30, 10 -> 31,\
    \ 11 -> 30, 12 -> 31)\n        if (date.length == 0) {\n            return false\n\
    \        }\n        val dateParts = date.split(\"-\")\n        if (dateParts.length\
    \ != 3) {\n            return false\n        }\n        if (dateParts(0).toInt\
    \ < 1 || dateParts(0).toInt > 12) {\n            return false\n        }\n   \
    \     if (dateParts(2).toInt < 2000 || dateParts(2).toInt > 2100) {\n        \
    \    return false\n        }\n        if (dateParts(1).toInt < 1 || dateParts(1).toInt\
    \ > months(dateParts(0).toInt)) {\n            return false\n        }\n     \
    \   return true", "        val arr = date.split(\"-\").map(x => x.toInt)\n   \
    \     val month = arr(0)\n        val day = arr(1)\n        val year = arr(2)\n\
    \        if (date == \"\" || year > 2020 || year < 1000) return false\n      \
    \  if (day < 1 || day > 31) return false\n        if (month < 1 || month > 12)\
    \ return false\n        if (year % 4 == 0 && year % 100 != 0 || year % 400 ==\
    \ 0) {\n            if (month == 2 && day > 29) return false\n        } else {\n\
    \            if (month == 2 && day > 28) return false\n        }\n        if (day\
    \ > 30 && (month == 4 || month == 6 || month == 9 || month == 11)) return false\n\
    \        return true", "        val dateArray = date.split(\"-\")\n        if\
    \ (dateArray.length != 3) return false\n        val months = Array(31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val day = dateArray(1).toInt\n\
    \        val month = dateArray(0).toInt\n        val year = dateArray(2).toInt\n\
    \        if (day < 1 || day > months(month - 1)) return false\n        if (month\
    \ < 1 || month > 12) return false\n        if (year < 0) return false\n      \
    \  if (day == 29 && month == 2 && !isLeapYear(year)) return false\n        true",
  "        val months = Map(\n            1 -> (\"31\", \"January\"),\n          \
    \  2 -> (\"28\", \"February\"),\n            3 -> (\"31\", \"March\"),\n     \
    \       4 -> (\"30\", \"April\"),\n            5 -> (\"31\", \"May\"),\n     \
    \       6 -> (\"30\", \"June\"),\n            7 -> (\"31\", \"July\"),\n     \
    \       8 -> (\"31\", \"August\"),\n            9 -> (\"30\", \"September\"),\n\
    \            10 -> (\"31\", \"October\"),\n            11 -> (\"30\", \"November\"\
    ),\n            12 -> (\"31\", \"December\")\n        )\n        val dateFormat\
    \ = new java.text.SimpleDateFormat(\"MM-dd-yyyy\")\n        def checkMonth(month\
    \ : Int) : Boolean = {\n            if (month < 1 || month > 12) false\n     \
    \       else {\n                val currentMonth : (String, String) = months(month)\n\
    \                if (month == 2) {\n                    val year = date.split(\"\
    -\")(2).toInt\n                    if (year % 4 == 0) (currentMonth._1.toInt +\
    \ 1).toString == date.split(\"-\")(1)\n                    else currentMonth._1\
    \ == date.split(\"-\")(1)\n                }\n                else currentMonth._1\
    \ == date.split(\"-\")(1)\n            }\n        }\n        try {\n         \
    \   val d = dateFormat.parse(date)\n            true\n        }\n        catch\
    \ {\n            case e : Exception => false\n        }", "        val dateList\
    \ = date.split(\"-\").toList\n        if (dateList.length != 3) false\n      \
    \  else {\n            val month = dateList(0).toInt\n            val day = dateList(1).toInt\n\
    \            val year = dateList(2).toInt\n            if (month > 12 || month\
    \ < 1) false\n            else if (month == 2) {\n                if (year % 4\
    \ == 0) {\n                    if (day < 1 || day > 29) false\n              \
    \      else true\n                }\n                else {\n                \
    \    if (day < 1 || day > 28) false\n                    else true\n         \
    \       }\n            }\n            else if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        \
    \        if (day < 1 || day > 31) false\n                else true\n         \
    \   }\n            else {\n                if (day < 1 || day > 30) false\n  \
    \              else true\n            }\n        }", "        var res = true\n\
    \        if (date.size == 0) res = false\n        if (date.split(\"-\").size !=\
    \ 3) res = false\n        if (date.split(\"-\")(0).toInt > 12 || date.split(\"\
    -\")(0).toInt < 1) res = false\n        if (date.split(\"-\")(0).toInt == 1 ||\
    \ date.split(\"-\")(0).toInt == 3 || date.split(\"-\")(0).toInt == 5 || date.split(\"\
    -\")(0).toInt == 7 || date.split(\"-\")(0).toInt == 8 || date.split(\"-\")(0).toInt\
    \ == 10 || date.split(\"-\")(0).toInt == 12) {\n            if (date.split(\"\
    -\")(1).toInt > 31 || date.split(\"-\")(1).toInt < 1) res = false\n        }\n\
    \        if (date.split(\"-\")(0).toInt == 4 || date.split(\"-\")(0).toInt ==\
    \ 6 || date.split(\"-\")(0).toInt == 9 || date.split(\"-\")(0).toInt == 11) {\n\
    \            if (date.split(\"-\")(1).toInt > 30 || date.split(\"-\")(1).toInt\
    \ < 1) res = false\n        }\n        if (date.split(\"-\")(0).toInt == 2) {\n\
    \            if (date.split(\"-\")(1).toInt > 29 || date.split(\"-\")(1).toInt\
    \ < 1) res = false\n        }\n        res", "        date match {\n         \
    \   case (d) if (d.length == 0) => false\n            case (d) if (d.split(\"\
    -\").length != 3) => false\n            case (d) if (d.split(\"-\")(0).toInt <\
    \ 1 || d.split(\"-\")(0).toInt > 12) => false\n            case (d) if (d.split(\"\
    -\")(2).toInt < 0) => false\n            case (d) if (d.split(\"-\")(1).toInt\
    \ < 1 || d.split(\"-\")(1).toInt > 31) => false\n            case (d) if (d.split(\"\
    -\")(0).toInt == 2 && d.split(\"-\")(1).toInt > 29) => false\n            case\
    \ (d) if (d.split(\"-\")(0).toInt % 2 == 0 && d.split(\"-\")(0).toInt != 2 &&\
    \ d.split(\"-\")(1).toInt > 30) => false\n            case (d) if (d.split(\"\
    -\")(0).toInt % 2 != 0 && d.split(\"-\")(0).toInt != 2 && d.split(\"-\")(1).toInt\
    \ > 31) => false\n            case (d) => true\n        }", "        if (date.isEmpty)\
    \ false\n        else {\n            val a = date.split(\"-\")\n            if\
    \ (a.length != 3) false\n            else {\n                val b = a.map(_.toInt)\n\
    \                if (b(0) < 1 || b(0) > 12) false\n                else {\n  \
    \                  if (b(0) == 2) {\n                        if (b(2) % 4 == 0)\
    \ {\n                            if (b(1) < 1 || b(1) > 29) false\n          \
    \                  else true\n                        }\n                    \
    \    else {\n                            if (b(1) < 1 || b(1) > 28) false\n  \
    \                          else true\n                        }\n            \
    \        }\n                    else if (b(0) == 1 || b(0) == 3 || b(0) == 5 ||\
    \ b(0) == 7 || b(0) == 8 || b(0) == 10 || b(0) == 12) {\n                    \
    \    if (b(1) < 1 || b(1) > 31) false\n                        else true\n   \
    \                 }\n                    else {\n                        if (b(1)\
    \ < 1 || b(1) > 30) false\n                        else true\n               \
    \     }\n                }\n            }\n        }", "        // Write your\
    \ code here\n        false", "        // Fill up this function body\n        //\
    \ `date` is the given date string\n        // The function should return a boolean\
    \ value\n        // If the function returns a boolean value of true, it means\
    \ the date is a valid date\n        // If the function returns a boolean value\
    \ of false, it means the date is not a valid date\n        val dm = ArrayBuffer[String]()\n\
    \        val x = date.split(\"-\")\n        var y = true\n        if (x.length\
    \ != 3) y = false\n        else {\n            if (x(0).length != 2 || x(1).length\
    \ != 2 || x(2).length != 4) y = false\n            else if (x(0).toInt < 1 ||\
    \ x(0).toInt > 12) y = false\n            else if (x(0).toInt == 2) {\n      \
    \          if (x(2).toInt % 4 == 0) dm += \"29\"\n                else dm += \"\
    28\"\n            }\n            else if (x(0).toInt == 1 || x(0).toInt == 3 ||\
    \ x(0).toInt == 5 || x(0).toInt == 7 || x(0).toInt == 8 || x(0).toInt == 10 ||\
    \ x(0).toInt == 12) dm += \"31\"\n            else dm += \"30\"\n            if\
    \ (x(1).toInt < 1 || x(1).toInt > dm(0).toInt) y = false\n        }\n        y",
  "        def is_leap_year(year : Int) : Boolean = {\n            (year % 4 == 0\
    \ && year % 100 != 0) || year % 400 == 0\n        }\n        def is_valid_date(day\
    \ : Int, month : Int, year : Int) : Boolean = {\n            if (month == 2) {\n\
    \                if (is_leap_year(year)) (day >= 1 && day <= 29) else (day >=\
    \ 1 && day <= 28)\n            } else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n           \
    \     (day >= 1 && day <= 31)\n            } else if (month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n                (day >= 1 && day <= 30)\n \
    \           } else {\n                false\n            }\n        }\n      \
    \  if (date.split(\"-\").length != 3) return false\n        val Array(month, day,\
    \ year) = date.split(\"-\").map(_.toInt)\n        (month >= 1 && month <= 12)\
    \ && is_valid_date(day, month, year)", "        if (date.length != 10) return\
    \ false\n        val dateArr = date.split(\"-\")\n        if (dateArr.length !=\
    \ 3) return false\n        for (x <- dateArr) if (x.length != 2) return false\n\
    \        val month = dateArr(0).toInt\n        val day = dateArr(1).toInt\n  \
    \      val year = dateArr(2).toInt\n        if (month < 1 || month > 12) return\
    \ false\n        if (month == 2) {\n            if (day < 1 || day > 29) return\
    \ false\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day < 1 || day > 30) return false\n        } else {\n\
    \            if (day < 1 || day > 31) return false\n        }\n        return\
    \ true", "        if (date.isEmpty) return false\n        val months = Array(31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val s = date.split(\"-\"\
    )\n        if (s.length != 3) return false\n        val y = s(2).toInt\n     \
    \   val m = s(0).toInt\n        val d = s(1).toInt\n        if (y < 0 || m < 1\
    \ || m > 12 || d < 1 || d > months(m - 1)) return false\n        if (m == 2 &&\
    \ d == 29 && !isLeapYear(y)) return false\n        true", "        def valid(month\
    \ : Int, day : Int, year : Int) : Boolean =\n            if (month < 1 || month\
    \ > 12) false\n            else if (month == 2) {\n                if (year %\
    \ 4 == 0) day >= 1 && day <= 29\n                else day >= 1 && day <= 28\n\
    \            }\n            else if (month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12) day >= 1 && day <= 31\n\
    \            else day >= 1 && day <= 30\n        def convert(s : String) : Int\
    \ = {\n            if (s.length > 2) -1\n            else {\n                var\
    \ i = 0\n                var j = 1\n                var sum = 0\n            \
    \    while (i < s.length) {\n                    sum += (s(i) - '0') * j\n   \
    \                 j *= 10\n                    i += 1\n                }\n   \
    \             sum\n            }\n        }\n        if (date.length != 10) false\n\
    \        else {\n            val p = date.split(\"-\")\n            if (p.length\
    \ != 3) false\n            else {\n                val p1 = convert(p(0))\n  \
    \              val p2 = convert(p(1))\n                val p3 = convert(p(2))\n\
    \                if (p1 == -1 || p2 == -1 || p3 == -1) false\n               \
    \ else valid(p1, p2, p3)\n            }\n        }", "        def isValidMonth(str\
    \ : String) : Boolean = {\n            def isValid(str : String) : Boolean = {\n\
    \                if (str.length != 2) return false\n                str.charAt(0)\
    \ match {\n                    case '0' => str.charAt(1) match {\n           \
    \             case '1' => true\n                        case '2' => true\n   \
    \                     case '3' => true\n                        case '4' => true\n\
    \                        case '5' => true\n                        case '6' =>\
    \ true\n                        case '7' => true\n                        case\
    \ '8' => true\n                        case '9' => true\n                    \
    \    case _ => false\n                    }\n                    case '1' => str.charAt(1)\
    \ match {\n                        case '0' => true\n                        case\
    \ '1' => true\n                        case '2' => true\n                    \
    \    case _ => false\n                    }\n                    case _ => false\n\
    \                }\n            }\n            isValid(str)\n        }\n     \
    \   def isValidDay(str : String) : Boolean = {\n            def isValid(str :\
    \ String) : Boolean = {\n                if (str.length != 2) return false\n \
    \               str.charAt(0) match {\n                    case '0' => str.charAt(1)\
    \ match {\n                        case '1' => true\n                        case\
    \ '2' => true\n                        case '3' => true\n                    \
    \    case '4' => true\n                        case '5' => true\n            \
    \            case '6' => true\n                        case '7' => true\n    \
    \                    case '8' => true\n                        case '9' => true\n\
    \                        case _ => false\n                    }\n            \
    \        case '1' => str.charAt(1) match {\n                        case '0' =>\
    \ true\n                        case '1' => true\n                        case\
    \ '2' => true\n                        case '3' => true\n                    \
    \    case '4' => true\n                        case '5' => true\n            \
    \            case '6' => true\n                        case '7' => true\n    \
    \                    case '8' => true\n                        case '9' => true\n\
    \                        case _ => false\n                    }\n            \
    \        case '2' => str.charAt(1) match {\n                        case '0' =>\
    \ true\n                        case '1' => true\n                        case\
    \ '2'", "        if (date.length < 10) {\n            return false\n        }\n\
    \        var dateList = date.split(\"-\")\n        var day = dateList(1).toInt\n\
    \        var month = dateList(0).toInt\n        var year = dateList(2).toInt\n\
    \        if (month > 12 || month < 1) {\n            return false\n        }\n\
    \        if (month == 2) {\n            if (day > 29 || day < 1) {\n         \
    \       return false\n            }\n        }\n        else if (month % 2 ==\
    \ 0) {\n            if (day > 30 || day < 1) {\n                return false\n\
    \            }\n        }\n        else {\n            if (day > 31 || day < 1)\
    \ {\n                return false\n            }\n        }\n        return true",
  "        val pattern = \"^(0[1-9]|1[0-2])-([0-2][0-9]|3[0-1])-([0-9]{4})$\".r\n\
    \        val pattern(m, d, y) = date\n        val month = m.toInt\n        val\
    \ day = d.toInt\n        val year = y.toInt\n        var res = false\n       \
    \ if (1 <= month && month <= 12) {\n            if (1 <= day && day <= 31) {\n\
    \                if (month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12) {\n                    res = true\n    \
    \            } else if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n                    if (day <= 30) res = true\n                } else if\
    \ (month == 2) {\n                    if (day <= 29) res = true\n            \
    \    }\n            }\n        }\n        res", '        return true', "     \
    \   if (date.length == 0) return false\n        val tokens = date.split(\"-\"\
    )\n        if (tokens.length != 3) return false\n        val month = tokens(0).toInt\n\
    \        val day = tokens(1).toInt\n        val year = tokens(2).toInt\n     \
    \   if (month < 1 || month > 12) return false\n        if (day < 1 || day > 31)\
    \ return false\n        if (month == 2) {\n            if (day > 29) return false\n\
    \            if (day == 29) {\n                if (year % 400 == 0) return true\n\
    \                if (year % 100 == 0) return false\n                if (year %\
    \ 4 == 0) return true\n                return false\n            }\n        }\n\
    \        if (month == 4 || month == 6 || month == 9 || month == 11) {\n      \
    \      if (day > 30) return false\n        }\n        return true", '        date.split("-").size
    == 3', "        val date_array = date.split(\"-\").map(_.toInt)\n        if (date_array.length\
    \ != 3) {\n            return false\n        }\n        val (month, day, year)\
    \ = (date_array(0), date_array(1), date_array(2))\n        if (month < 1 || month\
    \ > 12) {\n            return false\n        }\n        if (day < 1 || day > 31)\
    \ {\n            return false\n        }\n        if (month == 2) {\n        \
    \    if (day > 29) {\n                return false\n            }\n        }\n\
    \        if (month == 4 || month == 6 || month == 9 || month == 11) {\n      \
    \      if (day > 30) {\n                return false\n            }\n        }\n\
    \        return true", "        val datePattern = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    .r\n        val datePattern(month, day, year) = date\n        val dateArray =\
    \ date.split(\"-\")\n        val month = dateArray(0).toInt\n        val day =\
    \ dateArray(1).toInt\n        val year = dateArray(2).toInt\n        (day <= 31\
    \ && month <= 12 && year >= 1)", "        def isLeapYear(year : Int) : Boolean\
    \ = {\n            return (year % 4 == 0 && year % 100 != 0) || (year % 400 ==\
    \ 0)\n        }\n        try {\n            val dateParts = date.split(\"-\")\n\
    \            val month = dateParts(0).toInt\n            val day = dateParts(1).toInt\n\
    \            val year = dateParts(2).toInt\n            val numOfDaysInMonth =\
    \ Array(31, if (isLeapYear(year)) 29 else 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n            if (month < 1 || month > 12) return false\n           \
    \ if (day < 1 || day > numOfDaysInMonth(month - 1)) return false\n           \
    \ if (year < 0) return false\n            return true\n        } catch {\n   \
    \         case e : Exception => return false\n        }", "        val p = \"\
    [0-9]{2}-[0-9]{2}-[0-9]{4}\".r\n        val l = p.findFirstIn(date)\n        l\
    \ match {\n            case Some(x) => true\n            case None => false\n\
    \        }", "        // Write your code here.\n        return true", "      \
    \  val Array(m, d, y) = date.split(\"-\").map(_.toInt)\n        val daysPerMonth\
    \ = Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        def isLeapYear(y\
    \ : Int) = y % 4 == 0 && (y % 100 != 0 || y % 400 == 0)\n        if (isLeapYear(y))\
    \ daysPerMonth(1) = 29\n        var valid = true\n        if (m < 1 || m > 12)\
    \ valid = false\n        if (d < 1 || d > daysPerMonth(m - 1)) valid = false\n\
    \        valid", "        if (date.length() == 0) return false\n        val dateArray\
    \ = date.split(\"-\")\n        if (dateArray.length != 3) return false\n     \
    \   if (dateArray(0).length() != 2 || dateArray(1).length() != 2 || dateArray(2).length()\
    \ != 4) return false\n        val month = dateArray(0).toInt\n        val day\
    \ = dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (year\
    \ < 2000 || year > 2020) return false\n        if (month < 1 || month > 12) return\
    \ false\n        if (month == 2) {\n            if (day < 1 || day > 29) return\
    \ false\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n            if (day < 1 || day > 30) return false\n        } else {\n\
    \            if (day < 1 || day > 31) return false\n        }\n        return\
    \ true", "        val pattern = \"([0-9]{2})-([0-9]{2})-([0-9]{4})\".r\n     \
    \   date match {\n            case pattern(m, d, y) => {\n                if (m.toInt\
    \ > 12 || m.toInt < 1) return false\n                if (d.toInt > 31 || d.toInt\
    \ < 1) return false\n                if (m.toInt == 2) {\n                   \
    \ if (d.toInt > 29) return false\n                } else if (m.toInt == 4 || m.toInt\
    \ == 6 || m.toInt == 9 || m.toInt == 11) {\n                    if (d.toInt >\
    \ 30) return false\n                }\n                return true\n         \
    \   }\n            case _ => false\n        }", "        def validDays(days :\
    \ Int, m : Int) : Boolean = {\n            m match {\n                case 1 |\
    \ 3 | 5 | 7 | 8 | 10 | 12 => days >= 1 && days <= 31\n                case 4 |\
    \ 6 | 9 | 11 => days >= 1 && days <= 30\n                case 2 => days >= 1 &&\
    \ days <= 29\n                case _ => false\n            }\n        }\n    \
    \    if (date.length != 10) return false\n        var m = date.split(\"-\")(0).toInt\n\
    \        var d = date.split(\"-\")(1).toInt\n        if (m < 1 || m > 12) return\
    \ false\n        if (!validDays(d, m)) return false\n        return true", " \
    \       if (date.isEmpty) return false\n        val tokens = date.split(\"-\"\
    )\n        if (tokens.length != 3) return false\n        val month = tokens(0).toInt\n\
    \        val day = tokens(1).toInt\n        val year = tokens(2).toInt\n     \
    \   if (month < 1 || month > 12) return false\n        if (day < 1 || day > 31)\
    \ return false\n        if (month == 2) {\n            if (day > 29) return false\n\
    \            if (year % 4 != 0) return false\n            if (year % 100 == 0\
    \ && year % 400 != 0) return false\n        }\n        else if (month % 2 == 0)\
    \ {\n            if (day > 30) return false\n        }\n        else {\n     \
    \       if (day > 31) return false\n        }\n        return true", "       \
    \ val dateArray = date.split(\"-\")\n        if (dateArray.length != 3) {\n  \
    \          return false\n        }\n        val month = dateArray(0).toInt\n \
    \       val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if (month < 1 || month > 12) {\n            return false\n        }\n\
    \        if (month == 2) {\n            if (year % 4 == 0) {\n               \
    \ if (day < 1 || day > 29) {\n                    return false\n             \
    \   }\n            } else {\n                if (day < 1 || day > 28) {\n    \
    \                return false\n                }\n            }\n        } else\
    \ if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n          \
    \      return false\n            }\n        } else {\n            if (day < 1\
    \ || day > 30) {\n                return false\n            }\n        }\n   \
    \     return true", "        val regex = \"\"\"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\
    \"\".r\n        val regex(month, day, year) = date\n        if (month.toInt <\
    \ 1 || month.toInt > 12) return false\n        val february = 2\n        if (month.toInt\
    \ == february) {\n            if (day.toInt < 1 || day.toInt > 29) return false\n\
    \        } else if (month.toInt % 2 == 0) {\n            if (day.toInt < 1 ||\
    \ day.toInt > 30) return false\n        } else {\n            if (day.toInt <\
    \ 1 || day.toInt > 31) return false\n        }\n        true", "        def validDays(date\
    \ : String) : Boolean = {\n            val day = date.substring(0, 2).toInt\n\
    \            val month = date.substring(3, 5).toInt\n            if (month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12) {\n                day >= 1 && day <= 31\n            } else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n                day\
    \ >= 1 && day <= 30\n            } else if (month == 2) {\n                day\
    \ >= 1 && day <= 29\n            } else {\n                false\n           \
    \ }\n        }\n        def validMonths(date : String) : Boolean = {\n       \
    \     val month = date.substring(3, 5).toInt\n            month >= 1 && month\
    \ <= 12\n        }\n        def validFormat(date : String) : Boolean = {\n   \
    \         val pattern = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\".r\n            pattern.findFirstIn(date)\
    \ match {\n                case Some(x) => true\n                case None =>\
    \ false\n            }\n        }\n        def validNumDays(date : String) : Boolean\
    \ = {\n            val days = date.substring(0, 2).toInt\n            days >=\
    \ 1 && days <= 31\n        }\n        if (date.isEmpty) false\n        else if\
    \ (!validDays(date)) false\n        else if (!validMonths(date)) false\n     \
    \   else if (!validFormat(date)) false\n        else true", "        // Write\
    \ your code here.\n        val w = \"\"\"(\\d{2})\\-(\\d{2})\\-(\\d{4})\"\"\"\
    .r\n        try {\n            val w(m, d, y) = date\n            val nd = d.toInt\n\
    \            val nm = m.toInt\n            (nm >= 1 && nm <= 12) &&\n        \
    \    (nd >= 1 &&\n                ((nm == 1 || nm == 3 || nm == 5 || nm == 7 ||\
    \ nm == 8 || nm == 10 || nm == 12) && nd <= 31 ||\n                (nm == 4 ||\
    \ nm == 6 || nm == 9 || nm == 11) && nd <= 30 ||\n                nm == 2 && nd\
    \ <= 29))\n        } catch {\n            case e: MatchError => false\n      \
    \  }", "        val regex = \"\"\"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\"\".r\n \
    \       val regex(m, d, y) = date\n        val month = m.toInt\n        val day\
    \ = d.toInt\n        val year = y.toInt\n        if (month > 12 || month < 1)\
    \ return false\n        val validDays = if (Set(1, 3, 5, 7, 8, 10, 12).contains(month))\
    \ {\n            day <= 31 && day >= 1\n        } else if (Set(4, 6, 9, 11).contains(month))\
    \ {\n            day <= 30 && day >= 1\n        } else {\n            if (year\
    \ % 4 == 0) {\n                day <= 29 && day >= 1\n            } else {\n \
    \               day <= 28 && day >= 1\n            }\n        }\n        validDays",
  "        // IMPLEMENT THIS\n        return false", "    \tval datePattern = \"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\
    .r\n    \tdate match {\n    \t\tcase datePattern(m, d, y) => {\n    \t\t\tval\
    \ month = m.toInt\n    \t\t\tval day = d.toInt\n    \t\t\tval year = y.toInt\n\
    \    \t\t\tif (month >= 1 && month <= 12) {\n    \t\t\t\tif (day >= 1 && day <=\
    \ 31 && (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 ||\
    \ month == 10 || month == 12)) true\n    \t\t\t\telse if (day >= 1 && day <= 30\
    \ && (month == 4 || month == 6 || month == 9 || month == 11)) true\n    \t\t\t\
    \telse if (day >= 1 && day <= 29 && month == 2) true\n    \t\t\t\telse false\n\
    \    \t\t\t}\n    \t\t\telse false\n    \t\t}\n    \t\tcase _ => false\n    \t\
    }", "        if (date.isEmpty()) {\n            return false\n        }\n    \
    \    val mdys = date.split(\"-\")\n        if (mdys.length != 3) {\n         \
    \   return false\n        }\n        val m = mdys(0).toInt\n        val d = mdys(1).toInt\n\
    \        val y = mdys(2).toInt\n        // check months\n        if (m < 1 ||\
    \ m > 12) {\n            return false\n        }\n        // check days\n    \
    \    if (d < 1) {\n            return false\n        }\n        if (m == 2) {\n\
    \            // leap year\n            if (y % 4 == 0 && y % 100 != 0 || y % 400\
    \ == 0) {\n                if (d > 29) {\n                    return false\n \
    \               }\n            } else {\n                if (d > 28) {\n     \
    \               return false\n                }\n            }\n        } else\
    \ if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n\
    \            if (d > 31) {\n                return false\n            }\n    \
    \    } else {\n            if (d > 30) {\n                return false\n     \
    \       }\n        }\n        return true", "        def daysInMonth(month : Int)\
    \ : Int = month match {\n            case 1 | 3 | 5 | 7 | 8 | 10 | 12 => 31\n\
    \            case 4 | 6 | 9 | 11 => 30\n            case 2 => 29\n           \
    \ case _ => 0\n        }\n        val parts = date.split(\"-\")\n        if (parts.length\
    \ != 3) return false\n        val m = parts(0).toInt\n        val d = parts(1).toInt\n\
    \        val y = parts(2).toInt\n        if (d < 1 || d > daysInMonth(m)) return\
    \ false\n        if (m < 1 || m > 12) return false\n        true", "        val\
    \ (m, d, y) = (date.split(\"-\")(0).toInt, date.split(\"-\")(1).toInt, date.split(\"\
    -\")(2).toInt)\n        val month = Array(31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31)\n        var r = false\n        if (m > 0 && m <= 12 && d > 0 &&\
    \ d <= month(m - 1) && y > 1000 && y < 9999) r = true\n        else if (m == 2\
    \ && d == 29 && y % 4 == 0 && y % 100 != 0 || y % 400 == 0) r = true\n       \
    \ r", "        val day = date.substring(0,2).toInt\n        val month = date.substring(3,5).toInt\n\
    \        val year = date.substring(6,10).toInt\n        if (month == 2) {\n  \
    \          val t = if (year % 400 == 0) {\n                true\n            }\
    \ else if (year % 100 == 0) {\n                false\n            } else if (year\
    \ % 4 == 0) {\n                true\n            } else {\n                false\n\
    \            }\n            return (1 <= day && day <= 29 && t) || (1 <= day &&\
    \ day <= 28 && !t)\n        }\n        if (List(1,3,5,7,8,10,12).contains(month))\
    \ {\n            return 1 <= day && day <= 31\n        }\n        if (List(4,6,9,11).contains(month))\
    \ {\n            return 1 <= day && day <= 30\n        }\n        return false",
  "        if(date.length != 10) return false\n        if(date(2) != '-' || date(5)\
    \ != '-') return false\n        var months = List(1,3,5,7,8,10,12)\n        var\
    \ days = date.substring(0,2).toInt\n        var days_ = date.substring(3,5).toInt\n\
    \        var days__ = date.substring(6,10).toInt\n        if(days_ < 1 || days_\
    \ > 12) return false\n        if(months.contains(days_)) {\n            if(days\
    \ < 1 || days > 31) return false\n        } else if(List(4,6,9,11).contains(days_))\
    \ {\n            if(days < 1 || days > 30) return false\n        } else if(days_\
    \ == 2) {\n            if(days < 1 || days > 29) return false\n        }\n   \
    \     return true", "        if (date.isEmpty) return false\n        val separator\
    \ = \"\"\"(-\"\"\".r\n        if (!separator.findFirstIn(date).isDefined) return\
    \ false\n        val parts = date.split(\"-\")\n        if (parts.length != 3)\
    \ return false\n        val months = Map(\n            \"01\" -> 31,\n       \
    \     \"02\" -> 29,\n            \"03\" -> 31,\n            \"04\" -> 30,\n  \
    \          \"05\" -> 31,\n            \"06\" -> 30,\n            \"07\" -> 31,\n\
    \            \"08\" -> 31,\n            \"09\" -> 30,\n            \"10\" -> 31,\n\
    \            \"11\" -> 30,\n            \"12\" -> 31\n        )\n        if (!months.contains(parts(0)))\
    \ return false\n        val days = parts(1).toInt\n        if (days < 1 || days\
    \ > months(parts(0))) return false\n        val year = parts(2).toInt\n      \
    \  if (year < 0) return false\n        return true", "        if (date.isEmpty)\
    \ return false\n        val dateSplit = date.split(\"-\")\n        if (dateSplit.length\
    \ != 3) return false\n        val (mm, dd, yyyy) = (dateSplit(0).toInt, dateSplit(1).toInt,\
    \ dateSplit(2).toInt)\n        if (dd < 1 || dd > 31) return false\n        if\
    \ (mm < 1 || mm > 12) return false\n        if (yyyy < 1) return false\n     \
    \   if (dd < 1 || dd > 31) return false\n        if (mm == 2) {\n            if\
    \ (dd < 1 || dd > 29) return false\n        } else if (mm == 4 || mm == 6 || mm\
    \ == 9 || mm == 11) {\n            if (dd < 1 || dd > 30) return false\n     \
    \   }\n        return true", "        val mmddyyyy = \"\"\"(\\d\\d)-(\\d\\d)-(\\\
    d\\d\\d\\d)\"\"\".r\n        def valid_days(days : Int, month : Int) : Boolean\
    \ = {\n            if (days >= 1 && days <= 31 && (month == 1 || month == 3 ||\
    \ month == 5 || month == 7 || month == 8 || month == 10 || month == 12))\n   \
    \             true\n            else if (days >= 1 && days <= 30 && (month ==\
    \ 4 || month == 6 || month == 9 || month == 11))\n                true\n     \
    \       else if (days >= 1 && days <= 29 && month == 2)\n                true\n\
    \            else\n                false\n        }\n        val mmddyyyy(mm,\
    \ dd, yyyy) = date\n        if (valid_days(dd.toInt, mm.toInt)) true else false",
  "        val Pattern = \"(\\\\d{2})-(\\\\d{2})-(\\\\d{4})\".r\n        date match\
    \ {\n            case Pattern(month, day, year) => (1 to 12).contains(month.toInt)\
    \ && (1 to 31).contains(day.toInt) && (year.toInt > 0)\n            case _ =>\
    \ false\n        }", "        val pattern = \"\"\"(\\d{2})-(\\d{2})-(\\d{4})\"\
    \"\".r\n        date match {\n            case pattern(month, day, year) =>\n\
    \                val mon = month.toInt\n                val day = day.toInt\n\
    \                if (mon < 1 || mon > 12) return false\n                if (mon\
    \ == 2) {\n                    if (day < 1 || day > 29) return false\n       \
    \         } else if (mon == 4 || mon == 6 || mon == 9 || mon == 11) {\n      \
    \              if (day < 1 || day > 30) return false\n                } else {\n\
    \                    if (day < 1 || day > 31) return false\n                }\n\
    \                true\n            case _ => false\n        }", "        // put\
    \ your code here\n        false", "        if (date.trim == \"\") return false\n\
    \        if (date.contains(\"/\")) return false\n        val tokens = date.split(\"\
    -\")\n        if (tokens.length != 3) return false\n        val month = tokens(0).toInt\n\
    \        val day = tokens(1).toInt\n        val year = tokens(2).toInt\n     \
    \   if (month < 1 || month > 12) return false\n        val maxDays = if (month\
    \ == 2) {\n            if (year % 400 == 0 || (year % 4 == 0 && year % 100 !=\
    \ 0)) 29 else 28\n        } else if (month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12) {\n            31\n\
    \        } else {\n            30\n        }\n        if (day < 1 || day > maxDays)\
    \ return false\n        return true", "        if (date.isEmpty) {\n         \
    \   return false\n        }\n        val (month, day, year) = date.split(\"-\"\
    ).map(_.toInt)\n        if (month < 1 || month > 12) {\n            return false\n\
    \        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n\
    \                return false\n            }\n        } else if (month % 2 ==\
    \ 0) {\n            if (day < 1 || day > 30) {\n                return false\n\
    \            }\n        } else {\n            if (day < 1 || day > 31) {\n   \
    \             return false\n            }\n        }\n        true", "       \
    \ if (date.length == 0) {\n            return false\n        }\n        val dateArray\
    \ = date.split(\"-\")\n        if (dateArray.length != 3) {\n            return\
    \ false\n        }\n        val month = dateArray(0).toInt\n        val day =\
    \ dateArray(1).toInt\n        val year = dateArray(2).toInt\n        if (month\
    \ < 1 || month > 12) {\n            return false\n        }\n        if (month\
    \ == 2) {\n            if (day < 1 || day > 29) {\n                return false\n\
    \            }\n        }\n        else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n           \
    \     return false\n            }\n        }\n        else {\n            if (day\
    \ < 1 || day > 31) {\n                return false\n            }\n        }\n\
    \        return true", "        if (date.length == 0) return false\n        val\
    \ check1 = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\".r\n        date match {\n          \
    \  case check1() => {\n                val nums = date.split(\"-\").map(_.toInt)\n\
    \                val md = nums(0)\n                val dd = nums(1)\n        \
    \        val yyyy = nums(2)\n                val days = Array(31,28,31,30,31,30,31,31,30,31,30,31)\n\
    \                if (days(md - 1) < dd || md > 12) return false\n            \
    \    if (md == 2 && isLeapYear(yyyy) && dd == 29) return true\n              \
    \  if (md == 2 && !isLeapYear(yyyy) && dd == 28) return true\n               \
    \ if (md == 2 && dd > 29) return false\n                true\n            }\n\
    \            case _ => false\n        }", "        var trueFalse = false\n   \
    \     var days = 0\n        var daysArray = List(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)\n\
    \        var months = 0\n        var monthsArray = List(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        var year = 0\n        var yearArray = List(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189",
  "        val split = date.split(\"-\")\n        if (split.length != 3) return false\n\
    \        if (split(0).length != 2 || split(1).length != 2 || split(2).length !=\
    \ 4) return false\n        val month = split(0).toInt\n        val day = split(1).toInt\n\
    \        val year = split(2).toInt\n        val isLeapYear = ((year % 4 == 0)\
    \ && (year % 100 != 0)) || (year % 400 == 0)\n        if (month == 2) {\n    \
    \        if (isLeapYear) {\n                if (day < 1 || day > 29) return false\n\
    \            } else {\n                if (day < 1 || day > 28) return false\n\
    \            }\n        } else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1\
    \ || day > 31) return false\n        } else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day < 1 || day > 30) return false\n\
    \        } else {\n            return false\n        }\n        return true",
  "        // Write your code here\n        null", "        var dateArray = date.split(\"\
    -\").map(x => x.toInt)\n        if (dateArray.length != 3) {\n            return\
    \ false\n        }\n        var month = dateArray(0)\n        var day = dateArray(1)\n\
    \        var year = dateArray(2)\n        var bigMonths = Array(1, 3, 5, 7, 8,\
    \ 10, 12)\n        var smallMonths = Array(4, 6, 9, 11)\n        if (bigMonths.contains(month))\
    \ {\n            if (day < 1 || day > 31) {\n                return false\n  \
    \          }\n        } else if (smallMonths.contains(month)) {\n            if\
    \ (day < 1 || day > 30) {\n                return false\n            }\n     \
    \   } else if (month == 2) {\n            if (day < 1 || day > 29) {\n       \
    \         return false\n            }\n        } else {\n            return false\n\
    \        }\n        if (month < 1 || month > 12) {\n            return false\n\
    \        }\n        return true", "        var d = date.split(\"-\")\n       \
    \ var m = d(0).toInt\n        var d1 = d(1).toInt\n        var y = d(2).toInt\n\
    \        if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m ==\
    \ 12) {\n            if (d1 >= 1 && d1 <= 31) {\n                if (m >= 1 &&\
    \ m <= 12) {\n                    if (date.length == 10) {\n                 \
    \       return true\n                    }\n                }\n            }\n\
    \        }\n        if (m == 4 || m == 6 || m == 9 || m == 11) {\n           \
    \ if (d1 >= 1 && d1 <= 30) {\n                if (m >= 1 && m <= 12) {\n     \
    \               if (date.length == 10) {\n                        return true\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (m == 2) {\n            if (d1 >= 1 && d1 <= 29) {\n                if (m >=\
    \ 1 && m <= 12) {\n                    if (date.length == 10) {\n            \
    \            return true\n                    }\n                }\n         \
    \   }\n        }\n        return false", '        true', "        if (date.isEmpty)\
    \ {\n            return false\n        }\n        val dateParts = date.split(\"\
    -\")\n        if (dateParts.length != 3) {\n            return false\n       \
    \ }\n        val month = dateParts(0).toInt\n        val day = dateParts(1).toInt\n\
    \        val year = dateParts(2).toInt\n        if (month > 12 || month < 1) {\n\
    \            return false\n        }\n        if (month == 2) {\n            if\
    \ (day > 29 || day < 1) {\n                return false\n            }\n     \
    \   } else if (Set(1, 3, 5, 7, 8, 10, 12) contains month) {\n            if (day\
    \ > 31 || day < 1) {\n                return false\n            }\n        } else\
    \ {\n            if (day > 30 || day < 1) {\n                return false\n  \
    \          }\n        }\n        true", "        // Your solution here\n     \
    \   return false", "        val parts = date.split(\"-\").map(_.toInt)\n     \
    \   parts.length == 3 && parts(0) >= 1 && parts(0) <= 12 && parts(1) >= 1 && parts(1)\
    \ <= daysInMonth(parts(0)) && parts(2) >= 1000 && parts(2) <= 9999"]
stop_tokens:
- "\n    }\n"
