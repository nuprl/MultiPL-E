name: HumanEval_19_sort_numbers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
  \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
  \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
  one three five\")\n    def sortNumbers(numbers : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\"\
  )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
  \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
  \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four\
  \ five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two\
  \ one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n"
completions: ["        val numMapping = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" ->\
    \ 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" ->\
    \ 7, \"eight\" -> 8, \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(n\
    \ => numMapping(n)).sorted\n        nums.map(n => numMapping.map(_.swap).get(n).get).mkString(\"\
    \ \")", "        val numberMap = Map(\n            \"zero\" -> 0,\n          \
    \  \"one\" -> 1,\n            \"two\" -> 2,\n            \"three\" -> 3,\n   \
    \         \"four\" -> 4,\n            \"five\" -> 5,\n            \"six\" -> 6,\n\
    \            \"seven\" -> 7,\n            \"eight\" -> 8,\n            \"nine\"\
    \ -> 9\n        )\n        var sortedNumberals = new ArrayBuffer[String]()\n \
    \       for (word <- numbers.split(\" \")) {\n            sortedNumberals += word\n\
    \        }\n        sortedNumberals = sortedNumberals.sortWith((a, b) => {\n \
    \           numberMap(a) < numberMap(b)\n        })\n        var res = \"\"\n\
    \        for (numeral <- sortedNumberals) {\n            res += numeral + \" \"\
    \n        }\n        res.dropRight(1)", "        var output = \"\"\n        val\
    \ split = numbers.split(\" \")\n        val nums = scala.collection.mutable.Buffer[Int]()\n\
    \        for (i <- 0 until split.length) {\n            split(i) match {\n   \
    \             case \"zero\" => nums += 0\n                case \"one\" => nums\
    \ += 1\n                case \"two\" => nums += 2\n                case \"three\"\
    \ => nums += 3\n                case \"four\" => nums += 4\n                case\
    \ \"five\" => nums += 5\n                case \"six\" => nums += 6\n         \
    \       case \"seven\" => nums += 7\n                case \"eight\" => nums +=\
    \ 8\n                case \"nine\" => nums += 9\n            }\n        }\n  \
    \      val sorted = nums.sorted\n        for (i <- 0 until sorted.length) {\n\
    \            sorted(i) match {\n                case 0 => output += \"zero \"\n\
    \                case 1 => output += \"one \"\n                case 2 => output\
    \ += \"two \"\n                case 3 => output += \"three \"\n              \
    \  case 4 => output += \"four \"\n                case 5 => output += \"five \"\
    \n                case 6 => output += \"six \"\n                case 7 => output\
    \ += \"seven \"\n                case 8 => output += \"eight \"\n            \
    \    case 9 => output += \"nine \"\n            }\n        }\n        return output.trim",
  '        numbers.split(" ").sorted.mkString(" ")', "        val numbersAsString\
    \ = numbers.split(\" \")\n        val numbersAsInt = ArrayBuffer[Int]()\n    \
    \    val numberWords = Map(\n            \"zero\" -> 0,\n            \"one\" ->\
    \ 1,\n            \"two\" -> 2,\n            \"three\" -> 3,\n            \"four\"\
    \ -> 4,\n            \"five\" -> 5,\n            \"six\" -> 6,\n            \"\
    seven\" -> 7,\n            \"eight\" -> 8,\n            \"nine\" -> 9)\n     \
    \   numbersAsString.foreach(num => numbersAsInt += numberWords(num))\n       \
    \ numbersAsInt.sorted.map(num => numberWords.map(_.swap).get(num).get).mkString(\"\
    \ \")", "        val sorted = numbers.split(\" \").map(_.toInt).sorted\n     \
    \   sorted.mkString(\" \")", "        val list = numbers.split(\" \").toList\n\
    \        val nlist = list.map(n => n match {\n            case \"zero\" => 0\n\
    \            case \"one\" => 1\n            case \"two\" => 2\n            case\
    \ \"three\" => 3\n            case \"four\" => 4\n            case \"five\" =>\
    \ 5\n            case \"six\" => 6\n            case \"seven\" => 7\n        \
    \    case \"eight\" => 8\n            case \"nine\" => 9\n        })\n       \
    \ val sorted = nlist.sorted\n        val snumbers = sorted.map(s => s match {\n\
    \            case 0 => \"zero\"\n            case 1 => \"one\"\n            case\
    \ 2 => \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\
    \n            case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        })\n        snumbers.mkString(\" \")", "        def toInt(num : String)\
    \ : Int = {\n            num match {\n                case \"zero\" => 0\n   \
    \             case \"one\" => 1\n                case \"two\" => 2\n         \
    \       case \"three\" => 3\n                case \"four\" => 4\n            \
    \    case \"five\" => 5\n                case \"six\" => 6\n                case\
    \ \"seven\" => 7\n                case \"eight\" => 8\n                case \"\
    nine\" => 9\n            }\n        }\n        numbers.split(\" \").map(toInt(_)).sorted.map(_.toString).mkString(\"\
    \ \")", "        val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" ->\
    \ 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" ->\
    \ 7, \"eight\" -> 8, \"nine\" -> 9)\n        val numString = numbers.split(\"\
    \ \").map(x => numeralMap(x))\n        val sorted = numString.sorted\n       \
    \ sorted.map(x => {\n            var sortedString = \"\"\n            numeralMap.foreach(y\
    \ => {\n                if (y._2 == x) {\n                    sortedString = y._1\n\
    \                }\n            })\n            sortedString\n        }).mkString(\"\
    \ \")", "        val numbersMap = \"zero\" -> 0 :: \"one\" -> 1 :: \"two\" ->\
    \ 2 :: \"three\" -> 3 :: \"four\" -> 4 :: \"five\" -> 5 :: \"six\" -> 6 :: \"\
    seven\" -> 7 :: \"eight\" -> 8 :: \"nine\" -> 9 :: Nil\n        val numbersMapRev\
    \ = numbersMap.map(x => (x._2, x._1))\n        val orderedNumbers = numbers.split(\"\
    \ \").toList.map(x => numbersMap(x)).sorted\n        orderedNumbers.map(x => numbersMapRev(x)).mkString(\"\
    \ \")", "        var nums = numbers.split(\" \").map(_.toInt).sorted\n       \
    \ return nums.mkString(\" \")", '        return numbers.split(" ").sorted.mkString("
    ")', "      // TODO: fill in this method\n      return \"three one five\"", " \
    \       val toSort = numbers.split(\" \").map(x => (x, numeralToInt(x))).sortBy(_._2).map(_._1)\n\
    \        toSort.mkString(\" \")", "        return numbers.split(\" \").map(x =>\
    \ x match {\n            case \"zero\" => 0\n            case \"one\" => 1\n \
    \           case \"two\" => 2\n            case \"three\" => 3\n            case\
    \ \"four\" => 4\n            case \"five\" => 5\n            case \"six\" => 6\n\
    \            case \"seven\" => 7\n            case \"eight\" => 8\n          \
    \  case \"nine\" => 9\n        }).sortWith(_ < _).map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")", "        // The numberal to number map\n      \
    \  val numberalToNumberMap = new HashMap[String, Int]\n        numberalToNumberMap(\"\
    zero\") = 0\n        numberalToNumberMap(\"one\") = 1\n        numberalToNumberMap(\"\
    two\") = 2\n        numberalToNumberMap(\"three\") = 3\n        numberalToNumberMap(\"\
    four\") = 4\n        numberalToNumberMap(\"five\") = 5\n        numberalToNumberMap(\"\
    six\") = 6\n        numberalToNumberMap(\"seven\") = 7\n        numberalToNumberMap(\"\
    eight\") = 8\n        numberalToNumberMap(\"nine\") = 9\n        val numberToNumberalMap\
    \ = numberalToNumberMap.map(_.swap)\n        // Take each numberal in the string\
    \ and convert it to a number\n        val numberals = numbers.split(\" \")\n \
    \       val numbersNumbers = numberals.map(numberal => numberalToNumberMap(numberal))\n\
    \        // Sort the numbers\n        val sortedNumbers = numbersNumbers.sorted\n\
    \        // Convert the numbers back to numberals\n        val sortedNumberals\
    \ = sortedNumbers.map(number => numberToNumberalMap(number))\n        // Return\
    \ the resulting space-delimited string\n        return sortedNumberals.mkString(\"\
    \ \")", "        val words = numbers.split(\" \")\n        val numbers = words.map(word\
    \ => convertToNumber(word))\n        val sortedNumbers = numbers.sorted\n    \
    \    val sortedWords = sortedNumbers.map(number => convertToWord(number))\n  \
    \      return sortedWords.mkString(\" \")", '      numbers.split(" ").sortWith((a,
    b) => a < b).mkString(" ")', '        ???', "        val input = numbers.split(\"\
    \ \")\n        val nums = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n        input.foreach(s\
    \ => nums(wordToNum(s)) += 1)\n        val result = new ArrayBuffer[String]\n\
    \        for (i <- 0 until 10) {\n            for (j <- 0 until nums(i)) {\n \
    \               result += numToWord(i)\n            }\n        }\n        result.mkString(\"\
    \ \")", "      val s = numbers.split(\" \")\n      val a = (s.map(v => if (v ==\
    \ \"zero\") \"0\" else if (v == \"one\") \"1\" else if (v == \"two\") \"2\" else\
    \ if (v == \"three\") \"3\" else if (v == \"four\") \"4\" else if (v == \"five\"\
    ) \"5\" else if (v == \"six\") \"6\" else if (v == \"seven\") \"7\" else if (v\
    \ == \"eight\") \"8\" else if (v == \"nine\") \"9\" else v)).sorted\n      val\
    \ r = (a.map(v => if (v == \"0\") \"zero\" else if (v == \"1\") \"one\" else if\
    \ (v == \"2\") \"two\" else if (v == \"3\") \"three\" else if (v == \"4\") \"\
    four\" else if (v == \"5\") \"five\" else if (v == \"6\") \"six\" else if (v ==\
    \ \"7\") \"seven\" else if (v == \"8\") \"eight\" else if (v == \"9\") \"nine\"\
    \ else v)).mkString(\" \")\n      r", "        val nums = numbers.split(\" \"\
    ).map(s => Integer.parseInt(s))\n        return nums.sorted.mkString(\" \")",
  "        val numberDict = Map(\n            \"zero\" -> 0,\n            \"one\"\
    \ -> 1,\n            \"two\" -> 2,\n            \"three\" -> 3,\n            \"\
    four\" -> 4,\n            \"five\" -> 5,\n            \"six\" -> 6,\n        \
    \    \"seven\" -> 7,\n            \"eight\" -> 8,\n            \"nine\" -> 9\n\
    \        )\n        val list = List.range(0, numbers.length, 5)\n        val result\
    \ = ListBuffer[Int]()\n        for (i <- list) {\n            result += numberDict(numbers.substring(i,\
    \ i + 4))\n        }\n        result.sorted.map(p => {\n            val s = p.toString\n\
    \            if (s.length == 1) s + \"  \"\n            else s + \" \"\n     \
    \   }).mkString(\"\")", "    \tval words = numbers.split(\" \")\n    \tval numbers2\
    \ = words.map{\n    \t\tcase \"zero\" => 0\n    \t\tcase \"one\" => 1\n    \t\t\
    case \"two\" => 2\n    \t\tcase \"three\" => 3\n    \t\tcase \"four\" => 4\n \
    \   \t\tcase \"five\" => 5\n    \t\tcase \"six\" => 6\n    \t\tcase \"seven\"\
    \ => 7\n    \t\tcase \"eight\" => 8\n    \t\tcase \"nine\" => 9\n    \t\tcase\
    \ _ => println(\"error\"); 0\n    \t}\n    \tval numbers3 = numbers2.sorted\n\
    \    \tval numbers4 = numbers3.map{\n    \t\tcase 0 => \"zero\"\n    \t\tcase\
    \ 1 => \"one\"\n    \t\tcase 2 => \"two\"\n    \t\tcase 3 => \"three\"\n    \t\
    \tcase 4 => \"four\"\n    \t\tcase 5 => \"five\"\n    \t\tcase 6 => \"six\"\n\
    \    \t\tcase 7 => \"seven\"\n    \t\tcase 8 => \"eight\"\n    \t\tcase 9 => \"\
    nine\"\n    \t\tcase _ => println(\"error\"); \"none\"\n    \t}\n    \tnumbers4.mkString(\"\
    \ \")", "        val nums = numbers.split(\" \").toList\n        val numMap =\
    \ Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4,\
    \ \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n\
    \        val vals = nums.map(numMap(_))\n        val sortedVals = vals.sorted\n\
    \        sortedVals.map(n => \"zero one two three four five six seven eight nine\"\
    .split(\" \")(n)).mkString(\" \")", "        var s = numbers.split(\" \")\n  \
    \      var a = s.sorted\n        var b = a.mkString(\" \")\n        b", "    \
    \    var list = new ListBuffer[Int]\n        var result = new ListBuffer[Int]\n\
    \        var list1 = new ListBuffer[String]\n        var list2 = new ListBuffer[String]\n\
    \        var string = new String()\n        list1 += \"zero\"\n        list1 +=\
    \ \"one\"\n        list1 += \"two\"\n        list1 += \"three\"\n        list1\
    \ += \"four\"\n        list1 += \"five\"\n        list1 += \"six\"\n        list1\
    \ += \"seven\"\n        list1 += \"eight\"\n        list1 += \"nine\"\n      \
    \  list2 += \"0\"\n        list2 += \"1\"\n        list2 += \"2\"\n        list2\
    \ += \"3\"\n        list2 += \"4\"\n        list2 += \"5\"\n        list2 += \"\
    6\"\n        list2 += \"7\"\n        list2 += \"8\"\n        list2 += \"9\"\n\
    \        var array = numbers.split(\" \")\n        for (i <- 0 until array.length)\
    \ {\n            var num = array(i)\n            list += list2(list1.indexOf(num)).toInt\n\
    \        }\n        list = list.sorted\n        for (i <- 0 until list.length)\
    \ {\n            result += list1.indexOf(list(i).toString)\n        }\n      \
    \  for (i <- 0 until result.length) {\n            string += list1(result(i))\n\
    \            if (i != result.length - 1) string += \" \"\n        }\n        return\
    \ string", "        val tokens = numbers.split(\" \")\n        val vals = new\
    \ Array[Int](tokens.length)\n        for (i <- 0 until tokens.length) vals(i)\
    \ = numeralToInt(tokens(i))\n        vals.sorted.mkString(\" \")", '        numbers.split("
    ").sorted.mkString(" ")', "        var nums = numbers.split(\" \").map(x => x\
    \ match {\n            case \"zero\" => 0\n            case \"one\" => 1\n   \
    \         case \"two\" => 2\n            case \"three\" => 3\n            case\
    \ \"four\" => 4\n            case \"five\" => 5\n            case \"six\" => 6\n\
    \            case \"seven\" => 7\n            case \"eight\" => 8\n          \
    \  case \"nine\" => 9\n        })\n        nums = nums.sorted\n        var ans\
    \ = \"\"\n        for (i <- 0 until nums.length) {\n            nums(i) match\
    \ {\n                case 0 => ans += \"zero \"\n                case 1 => ans\
    \ += \"one \"\n                case 2 => ans += \"two \"\n                case\
    \ 3 => ans += \"three \"\n                case 4 => ans += \"four \"\n       \
    \         case 5 => ans += \"five \"\n                case 6 => ans += \"six \"\
    \n                case 7 => ans += \"seven \"\n                case 8 => ans +=\
    \ \"eight \"\n                case 9 => ans += \"nine \"\n            }\n    \
    \    }\n        ans.trim", "        var nums = numbers.split(\" \").map(_.toInt).sorted\n\
    \        var sorted = nums.mkString(\" \")\n        sorted", "        val n =\
    \ numbers.split(\" \").toList\n        n.sortWith((a, b) => a < b).mkString(\"\
    \ \")", "    \tval numToStr = Map[Int, String](0 -> \"zero\", 1 -> \"one\", 2\
    \ -> \"two\", 3 -> \"three\", 4 -> \"four\", 5 -> \"five\", 6 -> \"six\", 7 ->\
    \ \"seven\", 8 -> \"eight\", 9 -> \"nine\")\n    \tval strToNum = numToStr.map(_.swap)\n\
    \    \tval n = numbers.split(\" \").map(strToNum(_)).toList.sorted\n    \tn.map(numToStr(_)).mkString(\"\
    \ \")", "        val sortedNumbers = numbers.split(\" \").sorted.mkString(\" \"\
    )\n        return sortedNumbers", "        val (zeros, ones, twos, threes, fours,\
    \ fives, sixes, sevens, eights, nines) =\n            numbers.split(\" \").groupBy(numeral\
    \ => numeral).mapValues(_.length).toList.sortBy(_._1).unzip._2.map(_.toString)\n\
    \        val nonzeros = List(ones, twos, threes, fours, fives, sixes, sevens,\
    \ eights, nines).filter(_ != \"0\")\n        List(zeros, nonzeros).flatten.mkString(\"\
    \ \")", "        // Map from words to number values\n        val wordToNum = Map(\"\
    zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\"\
    \ -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n       \
    \ // Return the given string in sorted order of numeric value\n        numbers.split(\"\
    \ \").map(wordToNum(_)).sorted.map(wordToNum.find(_._2 == _).get._1).mkString(\"\
    \ \")", "        val arr = numbers.split(\" \")\n        arr.sortWith(_ < _).mkString(\"\
    \ \")", "        val numeralList = numbers.split(\" \").toList\n        val numeralMap\
    \ = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" ->\
    \ 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" ->\
    \ 9)\n        val numberList = numeralList.map(n => numeralMap(n))\n        numberList.sorted.map(n\
    \ => numeralMap.find(_._2 == n).get._1).mkString(\" \")", "        val numbersArray\
    \ = numbers.split(\" \")\n        val numbersSorted = numbersArray.sortWith(_\
    \ < _)\n        return numbersSorted.mkString(\" \")", "        val sorted = numbers.split(\"\
    \ \").map(convert).sorted\n        sorted.mkString(\" \")", '        numbers.split("
    ").sorted.mkString(" ")', "        var numList = numbers.split(\" \").toList.map(x\
    \ => numeralToInt(x))\n        numList = numList.sorted\n        return numList.map(x\
    \ => intToNumeral(x)).mkString(\" \")", "        //\n        // Your code goes\
    \ here\n        //", "        val num = numbers.split(\" \").map(x => x match\
    \ {\n          case \"zero\" => 0\n          case \"one\" => 1\n          case\
    \ \"two\" => 2\n          case \"three\" => 3\n          case \"four\" => 4\n\
    \          case \"five\" => 5\n          case \"six\" => 6\n          case \"\
    seven\" => 7\n          case \"eight\" => 8\n          case \"nine\" => 9\n  \
    \      })\n        num.sortWith(_ < _).mkString(\" \")", "        val numbersArray\
    \ = numbers.split(\" \")\n        return numbersArray.sortWith(_ < _).mkString(\"\
    \ \")", "        val nums = List(\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n        val l = numbers.split(\"\
    \ \").map(_.toInt).sorted.map(nums(_)).mkString(\" \")\n        return l", " \
    \       val result = Array.fill(numbers.length)(0)\n        for (numeral <- numbers.split(\"\
    \ \")) {\n            val digit = numeral match {\n                case \"zero\"\
    \ => 0\n                case \"one\" => 1\n                case \"two\" => 2\n\
    \                case \"three\" => 3\n                case \"four\" => 4\n   \
    \             case \"five\" => 5\n                case \"six\" => 6\n        \
    \        case \"seven\" => 7\n                case \"eight\" => 8\n          \
    \      case \"nine\" => 9\n            }\n            result(digit) += 1\n   \
    \     }\n        result.zipWithIndex.flatMap({case (count, digit) =>\n       \
    \     (1 to count).map(_ => digit)\n        }).map(digit => {\n            digit\
    \ match {\n                case 0 => \"zero\"\n                case 1 => \"one\"\
    \n                case 2 => \"two\"\n                case 3 => \"three\"\n   \
    \             case 4 => \"four\"\n                case 5 => \"five\"\n       \
    \         case 6 => \"six\"\n                case 7 => \"seven\"\n           \
    \     case 8 => \"eight\"\n                case 9 => \"nine\"\n            }\n\
    \        }).mkString(\" \")", "        var map = Map[String,Int]()\n        map\
    \ += (\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4,\
    \ \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n\
    \        var list = numbers.split(\" \").map(map(_)).sorted.map(map.filter(_._2\
    \ == _).head._1).mkString(\" \")\n        return list", '        return numbers.split("
    ").sorted.mkString(" ")', "        val enums = numbers.split(\" \").map(toInt)\n\
    \        val sorted = enums.sorted\n        sorted.map(toString).mkString(\" \"\
    )", "      val a = numbers.split(\" \")\n      val numbersMap = Map(\"zero\" ->\
    \ 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5,\
    \ \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n      val nums\
    \ = a.map(numbersMap(_))\n      val sorted = nums.sorted\n      sorted.map(x =>\
    \ numbersMap.find(_._2 == x).get._1).mkString(\" \")", "        var nums = Array[Int]()\n\
    \        var num_map = Map[String, Int]()\n        num_map += (\"zero\" -> 0)\n\
    \        num_map += (\"one\" -> 1)\n        num_map += (\"two\" -> 2)\n      \
    \  num_map += (\"three\" -> 3)\n        num_map += (\"four\" -> 4)\n        num_map\
    \ += (\"five\" -> 5)\n        num_map += (\"six\" -> 6)\n        num_map += (\"\
    seven\" -> 7)\n        num_map += (\"eight\" -> 8)\n        num_map += (\"nine\"\
    \ -> 9)\n        var sorted_nums = numbers.split(\" \").map(x => num_map(x)).sorted\n\
    \        sorted_nums.map(x => num_map.find(_._2 == x).get._1).mkString(\" \")",
  "        val nums = numbers.split(\" \").map(_.toInt).sorted\n        nums.map(_.toString).mkString(\"\
    \ \")", "        var output : Array[Int] = new Array[Int](numbers.split(\" \"\
    ).length)\n        var i = 0\n        for (input <- numbers.split(\" \")) output(i)\
    \ = input match {\n            case \"zero\" => 0\n            case \"one\" =>\
    \ 1\n            case \"two\" => 2\n            case \"three\" => 3\n        \
    \    case \"four\" => 4\n            case \"five\" => 5\n            case \"six\"\
    \ => 6\n            case \"seven\" => 7\n            case \"eight\" => 8\n   \
    \         case \"nine\" => 9\n        }\n        output = output.sorted\n    \
    \    for (i <- 0 until output.length) output(i) match {\n            case 0 =>\
    \ output(i) = \"zero\"\n            case 1 => output(i) = \"one\"\n          \
    \  case 2 => output(i) = \"two\"\n            case 3 => output(i) = \"three\"\n\
    \            case 4 => output(i) = \"four\"\n            case 5 => output(i) =\
    \ \"five\"\n            case 6 => output(i) = \"six\"\n            case 7 => output(i)\
    \ = \"seven\"\n            case 8 => output(i) = \"eight\"\n            case 9\
    \ => output(i) = \"nine\"\n        }\n        output.mkString(\" \")", '        return
    numbers.split(" ").map(Problem.numberToInt).sortWith(_ < _).map(Problem.intToNumber).mkString("
    ")', "        val numberMap = Map(\n            \"zero\" -> 0,\n            \"\
    one\" -> 1,\n            \"two\" -> 2,\n            \"three\" -> 3,\n        \
    \    \"four\" -> 4,\n            \"five\" -> 5,\n            \"six\" -> 6,\n \
    \           \"seven\" -> 7,\n            \"eight\" -> 8,\n            \"nine\"\
    \ -> 9\n        )\n        val numberArray = numbers.split(\" \").map(n => numberMap(n))\n\
    \        val sortedArray = numberArray.sorted\n        sortedArray.map(n => numberMap.find(_._2\
    \ == n).get._1).mkString(\" \")", "        val nums = numbers.split(\" \").map\
    \ {x =>\n            x match {\n                case \"zero\" => 0\n         \
    \       case \"one\" => 1\n                case \"two\" => 2\n               \
    \ case \"three\" => 3\n                case \"four\" => 4\n                case\
    \ \"five\" => 5\n                case \"six\" => 6\n                case \"seven\"\
    \ => 7\n                case \"eight\" => 8\n                case \"nine\" =>\
    \ 9\n            }\n        }\n        nums.sortWith(_ < _).map {\n          \
    \  case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 => \"\
    two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n     \
    \       case 5 => \"five\"\n            case 6 => \"six\"\n            case 7\
    \ => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }.mkString(\" \")", "        // get all numbers\n        val firstNumber\
    \ = numbers.indexOf(' ')\n        val secondNumber = numbers.indexOf(' ', firstNumber\
    \ + 1)\n        val numberOne = getNumber(numbers.substring(0, firstNumber))\n\
    \        val numberTwo = getNumber(numbers.substring(firstNumber + 1, secondNumber))\n\
    \        val numberThree = getNumber(numbers.substring(secondNumber + 1))\n  \
    \      // sort smallest to largest\n        val sortedNumbers = ArrayBuffer(numberOne,\
    \ numberTwo, numberThree).sorted\n        //return\n        getNumber(sortedNumbers(0))\
    \ + \" \" + getNumber(sortedNumbers(1)) + \" \" + getNumber(sortedNumbers(2))",
  '        numbers.split(" ").sortWith((x, y) => x < y).mkString(" ")', "        val\
    \ nums = numbers.split(\" \").map(_.toInt).sorted\n        nums.mkString(\" \"\
    )", "        val list = numbers.split(\" \").map(s => {\n            val ch =\
    \ s.substring(0, 1)\n            val num = s.substring(1)\n            ch -> num\n\
    \        }).toList.sortBy(_._2)\n        list.map(p => p._1 + p._2).mkString(\"\
    \ \")", "        var map = new HashMap[String, Int]\n        map += \"zero\" ->\
    \ 0\n        map += \"one\" -> 1\n        map += \"two\" -> 2\n        map +=\
    \ \"three\" -> 3\n        map += \"four\" -> 4\n        map += \"five\" -> 5\n\
    \        map += \"six\" -> 6\n        map += \"seven\" -> 7\n        map += \"\
    eight\" -> 8\n        map += \"nine\" -> 9\n        var arr = numbers.split(\"\
    \ \")\n        arr = arr.sortWith((s, t) => map(s) < map(t))\n        var ans\
    \ = \"\"\n        for (i <- 0 until arr.length) {\n            ans += (arr(i)\
    \ + \" \")\n        }\n        ans", "        val names = numbers.split(\" \"\
    )\n        val numbersMap = Map(\n            \"zero\" -> 0,\n            \"one\"\
    \ -> 1,\n            \"two\" -> 2,\n            \"three\" -> 3,\n            \"\
    four\" -> 4,\n            \"five\" -> 5,\n            \"six\" -> 6,\n        \
    \    \"seven\" -> 7,\n            \"eight\" -> 8,\n            \"nine\" -> 9\n\
    \        )\n        names.map(x => numbersMap(x)).sorted.map(x => numbersMap.find(_._2\
    \ == x).get._1).mkString(\" \")", "        var nums = numbers.split(\" \").map(_.toInt).sorted\n\
    \        var str = \"\"\n        for (n <- nums) {\n            str += n + \"\
    \ \"\n        }\n        str.trim", "        val a = numbers.split(\" \")\n  \
    \      val b = a.sorted\n        val c = b.mkString(\" \")\n        return c",
  "        val stringToInt = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\"\
    \ -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\"\
    \ -> 8, \"nine\" -> 9)\n        val numberList = numbers.split(\" \").map(x =>\
    \ stringToInt(x)).toList.sorted\n        val intToString = Map(0 -> \"zero\",\
    \ 1 -> \"one\", 2 -> \"two\", 3 -> \"three\", 4 -> \"four\", 5 -> \"five\", 6\
    \ -> \"six\", 7 -> \"seven\", 8 -> \"eight\", 9 -> \"nine\")\n        numberList.map(x\
    \ => intToString(x)).mkString(\" \")", "      val nums = numbers.split(\" \").map(n\
    \ => (n, n match {\n        case \"zero\" => 0\n        case \"one\" => 1\n  \
    \      case \"two\" => 2\n        case \"three\" => 3\n        case \"four\" =>\
    \ 4\n        case \"five\" => 5\n        case \"six\" => 6\n        case \"seven\"\
    \ => 7\n        case \"eight\" => 8\n        case \"nine\" => 9\n      })).sortBy(_._2).map(_._1).mkString(\"\
    \ \")\n      nums", "        val sortedNumbers = numbers.split(\" \").map(getNumber).sorted\n\
    \        getNumberString(sortedNumbers)", "        val numberMap = Map(\n    \
    \        \"zero\" -> 0,\n            \"one\" -> 1,\n            \"two\" -> 2,\n\
    \            \"three\" -> 3,\n            \"four\" -> 4,\n            \"five\"\
    \ -> 5,\n            \"six\" -> 6,\n            \"seven\" -> 7,\n            \"\
    eight\" -> 8,\n            \"nine\" -> 9\n        )\n        val numString = numbers.split(\"\
    \ \").map(numberMap.get(_).get).sorted.mkString(\" \")\n        return numString",
  "        var numMap = new HashMap[String, Int]()\n        numMap += (\"zero\" ->\
    \ 0)\n        numMap += (\"one\" -> 1)\n        numMap += (\"two\" -> 2)\n   \
    \     numMap += (\"three\" -> 3)\n        numMap += (\"four\" -> 4)\n        numMap\
    \ += (\"five\" -> 5)\n        numMap += (\"six\" -> 6)\n        numMap += (\"\
    seven\" -> 7)\n        numMap += (\"eight\" -> 8)\n        numMap += (\"nine\"\
    \ -> 9)\n        var numList = numbers.split(\" \").map(x => numMap(x)).sorted\n\
    \        var nums = new StringBuilder\n        numList.foreach(x => nums ++= x.toString\
    \ + \" \")\n        nums.toString.trim", "        val map = Map(\"zero\" -> 0,\
    \ \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"\
    six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        val numbersList\
    \ = numbers.split(\" \").toList\n        val sortedNumbers = numbersList.sortWith((e1,\
    \ e2) => map(e1) < map(e2))\n        sortedNumbers.mkString(\" \")", "       \
    \ val numberToTextMap = new HashMap[Int, String]\n        numberToTextMap += (0\
    \ -> \"zero\")\n        numberToTextMap += (1 -> \"one\")\n        numberToTextMap\
    \ += (2 -> \"two\")\n        numberToTextMap += (3 -> \"three\")\n        numberToTextMap\
    \ += (4 -> \"four\")\n        numberToTextMap += (5 -> \"five\")\n        numberToTextMap\
    \ += (6 -> \"six\")\n        numberToTextMap += (7 -> \"seven\")\n        numberToTextMap\
    \ += (8 -> \"eight\")\n        numberToTextMap += (9 -> \"nine\")\n        val\
    \ textToNumberMap = new HashMap[String, Int]\n        for (x <- numberToTextMap)\
    \ textToNumberMap += (x._2 -> x._1)\n        val nums = numbers.split(\" \").map((x\
    \ : String) => textToNumberMap(x)).sorted\n        val strs = nums.map((x : Int)\
    \ => numberToTextMap(x))\n        strs.mkString(\" \")", '        return ""',
  "        val numbersAndCounts = numbers.split(\" \").map(_.trim).groupBy(s => s).mapValues(_.length)\n\
    \        var numbersSorted = \"\"\n        if (numbersAndCounts.contains(\"zero\"\
    )) numbersSorted += \"zero\" * numbersAndCounts(\"zero\")\n        if (numbersAndCounts.contains(\"\
    one\")) numbersSorted += \"one\" * numbersAndCounts(\"one\")\n        if (numbersAndCounts.contains(\"\
    two\")) numbersSorted += \"two\" * numbersAndCounts(\"two\")\n        if (numbersAndCounts.contains(\"\
    three\")) numbersSorted += \"three\" * numbersAndCounts(\"three\")\n        if\
    \ (numbersAndCounts.contains(\"four\")) numbersSorted += \"four\" * numbersAndCounts(\"\
    four\")\n        if (numbersAndCounts.contains(\"five\")) numbersSorted += \"\
    five\" * numbersAndCounts(\"five\")\n        if (numbersAndCounts.contains(\"\
    six\")) numbersSorted += \"six\" * numbersAndCounts(\"six\")\n        if (numbersAndCounts.contains(\"\
    seven\")) numbersSorted += \"seven\" * numbersAndCounts(\"seven\")\n        if\
    \ (numbersAndCounts.contains(\"eight\")) numbersSorted += \"eight\" * numbersAndCounts(\"\
    eight\")\n        if (numbersAndCounts.contains(\"nine\")) numbersSorted += \"\
    nine\" * numbersAndCounts(\"nine\")\n        numbersSorted", "        if (numbers\
    \ == null) return \"\"\n        val nums = numbers.split(\" \")\n        val numMap\
    \ = new HashMap[String, Int]\n        val res = new ArrayBuffer[String]\n    \
    \    for (i <- 0 until nums.length) {\n            val num = nums(i)\n       \
    \     if (numMap.contains(num)) numMap(num) += 1\n            else numMap += (num\
    \ -> 1)\n        }\n        numMap.toList.sortBy(_._1).foreach(p => {\n      \
    \      for (i <- 0 until p._2) res += p._1\n        })\n        res.mkString(\"\
    \ \")", "    \tval arr = numbers.split(\" \").map(x => convertStrToNum(x))\n \
    \   \tarr.sorted.map(x => convertNumToStr(x)).mkString(\" \")", "        val numOrder\
    \ = List(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\")\n        val nums = numbers.split(\" \").toList\n\
    \        val numsOrdered = nums.map(num => numOrder.indexOf(num)).sortWith(_<_)\n\
    \        val numsStr = numsOrdered.map(num => numOrder(num))\n        numsStr.mkString(\"\
    \ \")", '        return numbers.split(" ").map(_.toInt).sorted.mkString(" ")',
  "        val numberStrings = numbers.split(\" \")\n        val numberList = numberStrings.map(x\
    \ => numeralToInt(x)).toList\n        numberList.sorted.map(x => intToNumeral(x)).mkString(\"\
    \ \")", "        val nums = numbers.split(\" \").map(s => s match {\n        \
    \    case \"zero\" => 0\n            case \"one\" => 1\n            case \"two\"\
    \ => 2\n            case \"three\" => 3\n            case \"four\" => 4\n    \
    \        case \"five\" => 5\n            case \"six\" => 6\n            case \"\
    seven\" => 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n\
    \        })\n        val res = new StringBuilder\n        nums.sorted.foreach(res\
    \ ++= _.toString + \" \")\n        res.toString", "        // 1) Create a Map\
    \ with number name as key and number value as value\n        val numberMap = new\
    \ scala.collection.mutable.HashMap[String, Int]\n        numberMap += \"zero\"\
    \ -> 0\n        numberMap += \"one\" -> 1\n        numberMap += \"two\" -> 2\n\
    \        numberMap += \"three\" -> 3\n        numberMap += \"four\" -> 4\n   \
    \     numberMap += \"five\" -> 5\n        numberMap += \"six\" -> 6\n        numberMap\
    \ += \"seven\" -> 7\n        numberMap += \"eight\" -> 8\n        numberMap +=\
    \ \"nine\" -> 9\n        // 2) Create a List of the numbers in the input\n   \
    \     val numberNames : List[String] = numbers.split(\" \").toList\n        //\
    \ 3) Sorted the numbers by looking up the number value in the Map\n        val\
    \ sortedNumbers : List[String] = numberNames.sorted(Ordering.by((number : String)\
    \ => numberMap(number)))\n        // 4) Return a string of the sorted number names\n\
    \        return sortedNumbers.mkString(\" \")", '        ""', "        val (max,\
    \ map) = (9, Map(\n                \"zero\" -> 0,\n                \"one\" ->\
    \ 1,\n                \"two\" -> 2,\n                \"three\" -> 3,\n       \
    \         \"four\" -> 4,\n                \"five\" -> 5,\n                \"six\"\
    \ -> 6,\n                \"seven\" -> 7,\n                \"eight\" -> 8,\n  \
    \              \"nine\" -> 9\n            ))\n        val ns = numbers.split(\"\
    \ \").map(x => map(x)).sorted\n        val r = new StringBuilder\n        for\
    \ (i <- 0 until ns.length) {\n            val n = ns(i)\n            for ((k,\
    \ v) <- map) {\n                if (v == n) {\n                    r.append(k)\n\
    \                    if (i < ns.length - 1) r.append(\" \")\n                }\n\
    \            }\n        }\n        r.toString", "        if (numbers == null)\
    \ return null\n        val numNames = Array(\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n        val nums\
    \ = numbers.split(\" \").map(name => (name, numNames.indexOf(name)))\n       \
    \ val sorted = nums.sortBy(_._2)\n        sorted.map(_._1).mkString(\" \")", " \
    \       val numberMap = Map(\n            \"zero\" -> 0,\n            \"one\"\
    \ -> 1,\n            \"two\" -> 2,\n            \"three\" -> 3,\n            \"\
    four\" -> 4,\n            \"five\" -> 5,\n            \"six\" -> 6,\n        \
    \    \"seven\" -> 7,\n            \"eight\" -> 8,\n            \"nine\" -> 9\n\
    \        )\n        val nums = numbers.split(\" \").map(numberMap(_)).sorted\n\
    \        nums.map(_.toString).mkString(\" \")", "        if (numbers == null)\
    \ \"\"\n        else {\n            var arr = numbers.split(\" \")\n         \
    \   var hash = HashMap[String, Int]()\n            for (i <- 0 until arr.length)\
    \ {\n                var key = arr(i)\n                if (hash.contains(key))\
    \ hash(key) += 1\n                else hash(key) = 1\n            }\n        \
    \    var res = ArrayBuffer[String]()\n            while (!hash.isEmpty) {\n  \
    \              var min = hash.keys.head\n                for (key <- hash.keys)\
    \ {\n                    if (getValue(key) < getValue(min)) min = key\n      \
    \          }\n                for (i <- 0 until hash(min)) res += min\n      \
    \          hash -= min\n            }\n            res.mkString(\" \")\n     \
    \   }", "        var nums = numbers.split(\" \").toList.map(x => x match {\n \
    \           case \"zero\" => 0\n            case \"one\" => 1\n            case\
    \ \"two\" => 2\n            case \"three\" => 3\n            case \"four\" =>\
    \ 4\n            case \"five\" => 5\n            case \"six\" => 6\n         \
    \   case \"seven\" => 7\n            case \"eight\" => 8\n            case \"\
    nine\" => 9\n        })\n        var sorted = nums.sorted\n        var res = sorted.map(x\
    \ => x match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n\
    \            case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        res.reduceLeft(_ + \" \" + _)", " \
    \       // Parse the input string\n        val parsedNumbers = numbers.split(\"\
    \ \").toList\n        // Build the final sorted list of numbers\n        val sortedNumbers\
    \ = parsedNumbers.sortWith(_ < _)\n        // Return the result\n        sortedNumbers.reduce(_\
    \ + \" \" + _)", "        // Init variables\n        var sortedNumbers : List[String]\
    \ = Nil\n        // Remove all spaces\n        val numbersArray = numbers.split(\"\
    \ \")\n        val numbersArrayLength = numbersArray.length\n        var i = 0\n\
    \        // Iterate through each number\n        while (i < numbersArrayLength)\
    \ {\n            // Insert number in sorteNumbers\n            sortedNumbers =\
    \ insertNumber(numbersArray(i), sortedNumbers)\n            i += 1\n        }\n\
    \        // Return sorted numbers\n        return sortedNumbers.mkString(\" \"\
    )", "        var nums = numbers.split(\" \").toList\n        var newList = ArrayBuffer[String]()\n\
    \        var i = 0\n        for (i <- 0 to nums.length-1) {\n            var num\
    \ = nums(i)\n            if (num == \"zero\") newList += \"0\"\n            else\
    \ if (num == \"one\") newList += \"1\"\n            else if (num == \"two\") newList\
    \ += \"2\"\n            else if (num == \"three\") newList += \"3\"\n        \
    \    else if (num == \"four\") newList += \"4\"\n            else if (num == \"\
    five\") newList += \"5\"\n            else if (num == \"six\") newList += \"6\"\
    \n            else if (num == \"seven\") newList += \"7\"\n            else if\
    \ (num == \"eight\") newList += \"8\"\n            else if (num == \"nine\") newList\
    \ += \"9\"\n        }\n        var sorted = newList.sorted\n        var sortedNumbers\
    \ = new String\n        for (i <- 0 to sorted.length-1) {\n            var num\
    \ = sorted(i)\n            if (num == \"0\") sortedNumbers += \"zero\"\n     \
    \       else if (num == \"1\") sortedNumbers += \"one\"\n            else if (num\
    \ == \"2\") sortedNumbers += \"two\"\n            else if (num == \"3\") sortedNumbers\
    \ += \"three\"\n            else if (num == \"4\") sortedNumbers += \"four\"\n\
    \            else if (num == \"5\") sortedNumbers += \"five\"\n            else\
    \ if (num == \"6\") sortedNumbers += \"six\"\n            else if (num == \"7\"\
    ) sortedNumbers += \"seven\"\n            else if (num == \"8\") sortedNumbers\
    \ += \"eight\"\n            else if (num == \"9\") sortedNumbers += \"nine\"\n\
    \            if (i != sorted.length-1) sortedNumbers += \" \"\n        }\n   \
    \     return sortedNumbers", "        val s = numbers.split(\" \")\n        val\
    \ m = Map[String, Int](\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        s.sortWith((x, y) => m(x) < m(y)).mkString(\" \")",
  "        val words = numbers.split(\" \")\n        val nums = words.map(e => parse(e))\n\
    \        nums.sorted.mkString(\" \")", "        var output = \"\"\n        val\
    \ n = numbers.split(\" \").map(x => getInt(x))\n        val s = n.sorted\n   \
    \     for (i <- 0 until s.length) {\n            output += getString(s(i))\n \
    \           if (i != s.length - 1) output += \" \"\n        }\n        return\
    \ output", "        val nums = numbers.split(\" \").toList.map(x => wordToInt(x))\n\
    \        nums.sortWith(_ < _).map(x => intToWord(x)).mkString(\" \")", '        return
    "abc"', "        val digits = Array(\"zero\", \"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n        val tokenized\
    \ = numbers.split(\" \")\n        val num = new Array[Int](tokenized.length)\n\
    \        for (i <- 0 until tokenized.length) {\n            for (j <- 0 until\
    \ digits.length) {\n                if (tokenized(i) == digits(j)) {\n       \
    \             num(i) = j\n                }\n            }\n        }\n      \
    \  val str = num.sorted.mkString(\" \")\n        str", "        val numeralMap\
    \ = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" ->\
    \ 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" ->\
    \ 9)\n        val numbersList = numbers.split(\" \").toList\n        val nums\
    \ = numbersList.map(numeralMap(_))\n        val sorted = nums.sorted\n       \
    \ sorted.map(numeralMap(_)).mkString(\" \")", "        val n = numbers.split(\"\
    \ \").map(Number(_))\n        val sorted = n.sortWith((a, b) => a.value < b.value)\n\
    \        sorted.map(_.name).mkString(\" \")", '        numbers.split(" ").map(sortNumber).sorted.mkString("
    ")', "        val num = new Array[Int](numbers.length)\n        val words = numbers.split(\"\
    \ \")\n        for (i <- 0 until words.length) num(i) = words(i) match {\n   \
    \         case \"zero\" => 0\n            case \"one\" => 1\n            case\
    \ \"two\" => 2\n            case \"three\" => 3\n            case \"four\" =>\
    \ 4\n            case \"five\" => 5\n            case \"six\" => 6\n         \
    \   case \"seven\" => 7\n            case \"eight\" => 8\n            case \"\
    nine\" => 9\n        }\n        val result = num.sortWith(_ < _)\n        var\
    \ res = \"\"\n        for (i <- 0 until result.length) res += result(i) match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        }\n        res", "        val nums = numbers.split(\"\
    \ \").map(s => s match {\n            case \"zero\" => 0\n            case \"\
    one\" => 1\n            case \"two\" => 2\n            case \"three\" => 3\n \
    \           case \"four\" => 4\n            case \"five\" => 5\n            case\
    \ \"six\" => 6\n            case \"seven\" => 7\n            case \"eight\" =>\
    \ 8\n            case \"nine\" => 9\n        })\n        val sortedNums = nums.sorted\n\
    \        sortedNums.map(n => n match {\n            case 0 => \"zero\"\n     \
    \       case 1 => \"one\"\n            case 2 => \"two\"\n            case 3 =>\
    \ \"three\"\n            case 4 => \"four\"\n            case 5 => \"five\"\n\
    \            case 6 => \"six\"\n            case 7 => \"seven\"\n            case\
    \ 8 => \"eight\"\n            case 9 => \"nine\"\n        }).mkString(\" \")",
  "        val words = numbers.split(\" \")\n        val numMap = HashMap[String,\
    \ Int]()\n        numMap += (\"zero\" -> 0)\n        numMap += (\"one\" -> 1)\n\
    \        numMap += (\"two\" -> 2)\n        numMap += (\"three\" -> 3)\n      \
    \  numMap += (\"four\" -> 4)\n        numMap += (\"five\" -> 5)\n        numMap\
    \ += (\"six\" -> 6)\n        numMap += (\"seven\" -> 7)\n        numMap += (\"\
    eight\" -> 8)\n        numMap += (\"nine\" -> 9)\n        words.sorted.map(numMap(_)).mkString(\"\
    \ \")", "        val nums = numbers.split(\" \").map(x => try {\n            x\
    \ match {\n                case \"zero\" => 0\n                case \"one\" =>\
    \ 1\n                case \"two\" => 2\n                case \"three\" => 3\n\
    \                case \"four\" => 4\n                case \"five\" => 5\n    \
    \            case \"six\" => 6\n                case \"seven\" => 7\n        \
    \        case \"eight\" => 8\n                case \"nine\" => 9\n           \
    \ }\n        } catch {\n            case _ : Exception => -1\n        }).sorted\n\
    \        nums.map(x => x match {\n            case 0 => \"zero\"\n           \
    \ case 1 => \"one\"\n            case 2 => \"two\"\n            case 3 => \"three\"\
    \n            case 4 => \"four\"\n            case 5 => \"five\"\n           \
    \ case 6 => \"six\"\n            case 7 => \"seven\"\n            case 8 => \"\
    eight\"\n            case 9 => \"nine\"\n        }).mkString(\" \")", "      \
    \  val nums = numbers.split(\" \").map(numeralToNumber)\n        nums.sorted.map(numberToNumeral).mkString(\"\
    \ \")", "        // TODO - implement me\n        return \"\";", '        return
    "";', "        val s = numbers.split(\" \")\n        val n = s.map(x => x match\
    \ {\n            case \"zero\" => 0\n            case \"one\" => 1\n         \
    \   case \"two\" => 2\n            case \"three\" => 3\n            case \"four\"\
    \ => 4\n            case \"five\" => 5\n            case \"six\" => 6\n      \
    \      case \"seven\" => 7\n            case \"eight\" => 8\n            case\
    \ \"nine\" => 9\n        })\n        n.sorted.mkString(\" \")", "        val wordToInt\
    \ = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" ->\
    \ 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" ->\
    \ 9)\n        val intToWord = wordToInt.map(_.swap)\n        val sortedInts =\
    \ numbers.split(\" \").map(x => wordToInt(x)).sortWith(_ < _)\n        sortedInts.map(x\
    \ => intToWord(x)).mkString(\" \")", "        var number_names : Array[String]\
    \ = Array(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\",\
    \ \"seven\", \"eight\", \"nine\")\n        var number_indices : Array[Int] = numbers.split(\"\
    \ \").map(number_names.indexOf(_))\n        number_indices.sorted.map(number_names(_)).mkString(\"\
    \ \")", "        val tokens = numbers.split(\" \")\n        val ints = tokens.map(Numeral.numeralToInt(_))\n\
    \        tokens.zip(ints).sortBy(_._2).map(_._1).mkString(\" \")", '        return
    ""', "        val digits = numbers.split(\" \").toList.sorted.map(x => intToDigit(digitToInt(x)))\n\
    \        return digits.mkString(\" \")", "        var number_array = numbers.split(\"\
    \ \")\n        var numeral_array = number_array.map(s => s match {\n         \
    \   case \"zero\" => 0\n            case \"one\" => 1\n            case \"two\"\
    \ => 2\n            case \"three\" => 3\n            case \"four\" => 4\n    \
    \        case \"five\" => 5\n            case \"six\" => 6\n            case \"\
    seven\" => 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n\
    \        })\n        numeral_array = numeral_array.sorted\n        var answer\
    \ = numeral_array.map(s => s match {\n            case 0 => \"zero\"\n       \
    \     case 1 => \"one\"\n            case 2 => \"two\"\n            case 3 =>\
    \ \"three\"\n            case 4 => \"four\"\n            case 5 => \"five\"\n\
    \            case 6 => \"six\"\n            case 7 => \"seven\"\n            case\
    \ 8 => \"eight\"\n            case 9 => \"nine\"\n        })\n        return answer.mkString(\"\
    \ \")", "        val numMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"\
    three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\"\
    \ -> 8, \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(word => numMap(word))\n\
    \        val sorted = nums.sorted\n        val sortedString = sorted.map(num =>\
    \ {\n            num match {\n                case 0 => \"zero\"\n           \
    \     case 1 => \"one\"\n                case 2 => \"two\"\n                case\
    \ 3 => \"three\"\n                case 4 => \"four\"\n                case 5 =>\
    \ \"five\"\n                case 6 => \"six\"\n                case 7 => \"seven\"\
    \n                case 8 => \"eight\"\n                case 9 => \"nine\"\n  \
    \          }\n        })\n        sortedString.mkString(\" \")", "        val\
    \ numberMap = Map(\n            \"zero\" -> 0,\n            \"one\" -> 1,\n  \
    \          \"two\" -> 2,\n            \"three\" -> 3,\n            \"four\" ->\
    \ 4,\n            \"five\" -> 5,\n            \"six\" -> 6,\n            \"seven\"\
    \ -> 7,\n            \"eight\" -> 8,\n            \"nine\" -> 9\n        )\n \
    \       val nums = numbers.split(\" \").map(s => numberMap(s)).sorted\n      \
    \  return nums.map(n => numberMap.filter(e => e._2 == n).keys.head).mkString(\"\
    \ \")", '        return "Not yet implemented"', "        val numeralMap = Map(\"\
    zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\"\
    \ -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n       \
    \ val nums = numbers.split(\" \").map(numeralMap(_)).sorted\n        return nums.map(n\
    \ => {\n            if (n == 0) {\n                \"zero\"\n            } else\
    \ if (n == 1) {\n                \"one\"\n            } else if (n == 2) {\n \
    \               \"two\"\n            } else if (n == 3) {\n                \"\
    three\"\n            } else if (n == 4) {\n                \"four\"\n        \
    \    } else if (n == 5) {\n                \"five\"\n            } else if (n\
    \ == 6) {\n                \"six\"\n            } else if (n == 7) {\n       \
    \         \"seven\"\n            } else if (n == 8) {\n                \"eight\"\
    \n            } else if (n == 9) {\n                \"nine\"\n            } else\
    \ {\n                throw new Exception(\"bad number: \" + n)\n            }\n\
    \        }).mkString(\" \")", "        // get new string, remove whitespace and\
    \ convert to lowercase\n        val string_no_spaces = numbers.replaceAll(\"\\\
    \\s+\",\"\").toLowerCase()\n        val nums = Map(\"zero\" -> 0, \"one\" -> 1,\
    \ \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"\
    seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        // need to convert the string\
    \ of numbers to a list of Ints\n        val num_list = string_no_spaces.split(\"\
    \").map(x => nums(x)).toList\n        // now sort the list\n        val sorted_list\
    \ = num_list.sorted\n        // now map back to string\n        val sorted_list_str\
    \ = sorted_list.map(x => nums.map(y => if (y._2 == x) y._1 else \"\").mkString)\n\
    \        // get rid of empty string values\n        val new_list = sorted_list_str.filter(x\
    \ => x != \"\")\n        // print out list separated by spaces\n        new_list.mkString(\"\
    \ \")", "        val strs = numbers.split(\" \")\n        val nums = strs.map(strToInt)\n\
    \        val num = nums.sortWith(_ < _)\n        strs.sortWith(strToInt(_) < strToInt(_)).mkString(\"\
    \ \")", "        var numberList = numbers.split(\" \").toList\n        val order\
    \ = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" ->\
    \ 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" ->\
    \ 9)\n        numberList = numberList.sortWith(_.compareTo(_) < 0)\n        val\
    \ stringList = numberList.map(a => order(a))\n        val stringMap = Map(0 ->\
    \ \"zero\", 1 -> \"one\", 2 -> \"two\", 3 -> \"three\", 4 -> \"four\", 5 -> \"\
    five\", 6 -> \"six\", 7 -> \"seven\", 8 -> \"eight\", 9 -> \"nine\")\n       \
    \ val finalList = stringList.map(a => stringMap(a))\n        finalList.reduceLeft(_\
    \ + \" \" + _)", "        val sortedString = numbers.split(\" \").sorted\n   \
    \     return sortedString.mkString(\" \")", "        val num2str = List(\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\")\n        val str2num = num2str.zipWithIndex.toMap\n        numbers.split(\"\
    \ \").sorted(Ordering.by((num : String) => str2num(num))).mkString(\" \")", " \
    \       // Initialise a map that maps the number names to their actual value.\n\
    \        var numberMap = Map[String, Int]()\n        numberMap += (\"zero\" ->\
    \ 0)\n        numberMap += (\"one\" -> 1)\n        numberMap += (\"two\" -> 2)\n\
    \        numberMap += (\"three\" -> 3)\n        numberMap += (\"four\" -> 4)\n\
    \        numberMap += (\"five\" -> 5)\n        numberMap += (\"six\" -> 6)\n \
    \       numberMap += (\"seven\" -> 7)\n        numberMap += (\"eight\" -> 8)\n\
    \        numberMap += (\"nine\" -> 9)\n        // Map the number names to their\
    \ number values.\n        var numberList = numbers.split(\" \").map(number =>\
    \ numberMap(number))\n        // Sort the list in increasing order.\n        numberList\
    \ = numberList.sorted\n        // Map the number values back to their name equivalents.\n\
    \        numberList = numberList.map(number => {\n            if (number == 0)\
    \ \"zero\"\n            else if (number == 1) \"one\"\n            else if (number\
    \ == 2) \"two\"\n            else if (number == 3) \"three\"\n            else\
    \ if (number == 4) \"four\"\n            else if (number == 5) \"five\"\n    \
    \        else if (number == 6) \"six\"\n            else if (number == 7) \"seven\"\
    \n            else if (number == 8) \"eight\"\n            else \"nine\"\n   \
    \     })\n        // Join the string into a single string.\n        numberList.mkString(\"\
    \ \")", "        numbers.split(\" \").sortWith((s, t) => {\n            val num1\
    \ = numberStrToInt(s)\n            val num2 = numberStrToInt(t)\n            num1\
    \ < num2\n        }).mkString(\" \")", "        val m = numbers.split(\" \").map(_.toInt).sorted.mkString(\"\
    \ \")\n        return m", "        val nums = numbers.split(\" \").sortWith(_\
    \ < _)\n        return nums.mkString(\" \")", "        val numeralToNumber = HashMap(\"\
    zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\"\
    \ -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n       \
    \ numbers.split(\" \").map(number => numeralToNumber(number)).sorted.map(number\
    \ => number match {\n            case 0 => \"zero\"\n            case 1 => \"\
    one\"\n            case 2 => \"two\"\n            case 3 => \"three\"\n      \
    \      case 4 => \"four\"\n            case 5 => \"five\"\n            case 6\
    \ => \"six\"\n            case 7 => \"seven\"\n            case 8 => \"eight\"\
    \n            case 9 => \"nine\"\n        }).mkString(\" \")", "        val s\
    \ = numbers.split(\" \")\n        val mapping = Map(\"zero\" -> 0, \"one\" ->\
    \ 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6,\
    \ \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        val nums = s.map(mapping(_))\n\
    \        val res = nums.sorted.map(v => mapping.map(p => if (p._2 == v) p._1 else\
    \ \"\").filter(p => p != \"\")(0))\n        res.mkString(\" \")", "        val\
    \ map = Map(\n            \"zero\" -> 0,\n            \"one\" -> 1,\n        \
    \    \"two\" -> 2,\n            \"three\" -> 3,\n            \"four\" -> 4,\n\
    \            \"five\" -> 5,\n            \"six\" -> 6,\n            \"seven\"\
    \ -> 7,\n            \"eight\" -> 8,\n            \"nine\" -> 9\n        )\n \
    \       val input = numbers.split(\" \").map(x => map(x)).sorted\n        val\
    \ output = input.map(x => map.find(_._2 == x).get._1)\n        output.mkString(\"\
    \ \")", "        var result = new ArrayBuffer[Int]()\n        for (i <- numbers.split(\"\
    \ \")) {\n            i match {\n                case \"zero\" => result += 0\n\
    \                case \"one\" => result += 1\n                case \"two\" =>\
    \ result += 2\n                case \"three\" => result += 3\n               \
    \ case \"four\" => result += 4\n                case \"five\" => result += 5\n\
    \                case \"six\" => result += 6\n                case \"seven\" =>\
    \ result += 7\n                case \"eight\" => result += 8\n               \
    \ case \"nine\" => result += 9\n            }\n        }\n        var resultStr\
    \ = \"\"\n        for (i <- result.sorted) {\n            i match {\n        \
    \        case 0 => resultStr += \"zero \"\n                case 1 => resultStr\
    \ += \"one \"\n                case 2 => resultStr += \"two \"\n             \
    \   case 3 => resultStr += \"three \"\n                case 4 => resultStr +=\
    \ \"four \"\n                case 5 => resultStr += \"five \"\n              \
    \  case 6 => resultStr += \"six \"\n                case 7 => resultStr += \"\
    seven \"\n                case 8 => resultStr += \"eight \"\n                case\
    \ 9 => resultStr += \"nine \"\n            }\n        }\n        resultStr", " \
    \       val numbers_map = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\"\
    \ -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\"\
    \ -> 8, \"nine\" -> 9)\n        numbers.split(\" \").map(x => numbers_map(x)).sorted.map(x\
    \ => numbers_map.find(_._2 == x).get._1).mkString(\" \")", "        val numberWords\
    \ = numbers.split(\" \")\n        val sortedNumbers = numberWords.map(number =>\
    \ number.toInt).sorted\n        return sortedNumbers.mkString(\" \")", "     \
    \   val m = Map(\n            \"zero\" -> 0,\n            \"one\" -> 1,\n    \
    \        \"two\" -> 2,\n            \"three\" -> 3,\n            \"four\" -> 4,\n\
    \            \"five\" -> 5,\n            \"six\" -> 6,\n            \"seven\"\
    \ -> 7,\n            \"eight\" -> 8,\n            \"nine\" -> 9\n        )\n \
    \       val nums = numbers.split(\" \").map(x => m(x)).sorted\n        var result\
    \ = \"\"\n        for (i <- 0 until nums.length) {\n            result += nums(i)\
    \ + \" \"\n        }\n        result.trim", "    \tval map = Map(0 -> \"zero\"\
    , 1 -> \"one\", 2 -> \"two\", 3 -> \"three\", 4 -> \"four\", 5 -> \"five\", 6\
    \ -> \"six\", 7 -> \"seven\", 8 -> \"eight\", 9 -> \"nine\")\n    \tval list =\
    \ numbers.split(\" \").map(num => map.get(map.filter(_._2 == num).head._1).get)\n\
    \    \tlist.sorted.mkString(\" \")", "        val numberMap = Map(\"zero\" ->\
    \ 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5,\
    \ \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        val result\
    \ = numbers.split(\" \").map(x => numberMap(x)).sorted.map(x => numberMap.find(_._2\
    \ == x).get._1).mkString(\" \")\n        return result", "      val n = numbers.split(\"\
    \ \").map(toInt(_)).sorted.map(toString(_)).mkString(\" \")\n      n", "     \
    \   var result = \"\"\n        val numberMap = Map(0 -> \"zero\", 1 -> \"one\"\
    , 2 -> \"two\", 3 -> \"three\", 4 -> \"four\", 5 -> \"five\", 6 -> \"six\", 7\
    \ -> \"seven\", 8 -> \"eight\", 9 -> \"nine\")\n        for (number <- numbers.split(\"\
    \ \").map(numberMap.indexOf(_)).sorted) {\n            result += numberMap(number)\
    \ + \" \"\n        }\n        result.trim", "        //Input -> Parsing -> Sorting\
    \ -> Output\n        return parse(numbers).sorted.mkString(\" \")", "        var\
    \ nums = new ListBuffer[Int]()\n        var numeralMap = Map(\"zero\" -> 0, \"\
    one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"six\"\
    \ -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        for (numeral <-\
    \ numbers.split(\" \")) nums += numeralMap(numeral)\n        var sorted = nums.sorted\n\
    \        var sortedString = \"\"\n        for (n <- sorted) sortedString += numeralMap.find(_._2\
    \ == n).get._1 + \" \"\n        sortedString.trim", "        val numbersMap =\
    \ Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4,\
    \ \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n\
    \        numbers.split(\" \").map(i => numbersMap(i)).sorted.map(i => numbersMap.find(_._2\
    \ == i).get._1).mkString(\" \")", "        // numberals\n        val numberMap\
    \ = Map(\n            \"zero\" -> 0,\n            \"one\" -> 1,\n            \"\
    two\" -> 2,\n            \"three\" -> 3,\n            \"four\" -> 4,\n       \
    \     \"five\" -> 5,\n            \"six\" -> 6,\n            \"seven\" -> 7,\n\
    \            \"eight\" -> 8,\n            \"nine\" -> 9\n        )\n        //\
    \ numberals to space-delimited string\n        val spaceDelimitedNumbers = numbers.split(\"\
    \ \").map(numberMap(_)).sorted.mkString(\" \")\n        return spaceDelimitedNumbers",
  "      val words = numbers.split(\" \")\n      val numbers = words.map(wordToNumber)\n\
    \      val sorted = numbers.sorted\n      val wordsSorted = sorted.map(numberToWord)\n\
    \      wordsSorted.mkString(\" \")", "        val numberals = \"zero one two three\
    \ four five six seven eight nine\".split(\" \")\n        val map = (numberals\
    \ zip numberals.indices).toMap\n        numbers.split(\" \").sorted(new Ordering[String]\
    \ {\n                def compare(x : String, y : String) = map(x) - map(y)\n \
    \           }).mkString(\" \")", "        var arr = numbers.split(\" \").map(_.toInt)\n\
    \        // Sort the array, convert each element back to string and join them\
    \ with spaces\n        arr.sorted.map(_.toString).mkString(\" \")", '        numbers.split("
    ").sorted.mkString(" ")', "        val numToWord : Map[Int, String] = Map(0 ->\
    \ \"zero\", 1 -> \"one\", 2 -> \"two\", 3 -> \"three\", 4 -> \"four\", 5 -> \"\
    five\", 6 -> \"six\", 7 -> \"seven\", 8 -> \"eight\", 9 -> \"nine\")\n       \
    \ val wordToNum : Map[String, Int] = numToWord.map(_.swap)\n        def sortNumberHelper(s\
    \ : String) : List[Int] = {\n            if (s.size == 0) List()\n           \
    \ else {\n                val words = s.split(\" \")\n                if (words.size\
    \ == 1) List(wordToNum(words(0)))\n                else wordToNum(words(0)) ::\
    \ sortNumberHelper(s.split(\" \").drop(1).mkString(\" \"))\n            }\n  \
    \      }\n        val n = sortNumberHelper(numbers)\n        def helper(ns : List[Int])\
    \ : String = {\n            if (ns.size == 0) \"\"\n            else if (ns.size\
    \ == 1) numToWord(ns(0))\n            else numToWord(ns(0)) + \" \" + helper(ns.drop(1))\n\
    \        }\n        helper(n.sorted)", "        val nums = new ArrayBuffer[Int]\n\
    \        val s = new Scanner(numbers)\n        while (s.hasNext) nums += s.nextInt\n\
    \        nums.sorted.mkString(\" \")", "        val valid = Array(\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\")\n        val numbersMapped = numbers.split(\" \").map(s => valid.indexOf(s))\n\
    \        numbersMapped.sorted.map(s => valid(s)).mkString(\" \")", "        var\
    \ nums = numbers.split(\" \")\n        var num_sort = nums.sorted\n        var\
    \ num_str = \"\"\n        for (i <- 0 until num_sort.length) {\n            num_str\
    \ += num_sort(i) + \" \"\n        }\n        num_str.trim", "        val nums\
    \ = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" ->\
    \ 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" ->\
    \ 9)\n        val input = numbers.split(\" \").map(num => nums(num))\n       \
    \ input.sorted.map(num => nums.map(_.swap).get(num).get).mkString(\" \")", " \
    \       val numeralMap = Map[String, Int](\"zero\" -> 0, \"one\" -> 1, \"two\"\
    \ -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\"\
    \ -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        val sortedNumbers = numbers.split(\"\
    \ \").sortWith(numeralMap(_) < numeralMap(_))\n        val sortedNumbersString\
    \ = sortedNumbers.mkString(\" \")\n        return sortedNumbersString", '        return
    numbers.split(" ").map(x => parse(x)).sorted.map(y => getName(y)).reduceLeft(_
    + " " + _)', "        val numbersList = numbers.split(\" \").toList\n        val\
    \ numbersSorted = numbersList.sortWith(compareNumbers(_, _))\n        return numbersSorted.mkString(\"\
    \ \")", "        val tmp = numbers.split(\" \").map(_.toInt).toList.sorted\n \
    \       tmp.map(_.toString).reduceLeft(_ + \" \" + _)", "        val map = Map(\n\
    \            \"zero\" -> 0,\n            \"one\" -> 1,\n            \"two\" ->\
    \ 2,\n            \"three\" -> 3,\n            \"four\" -> 4,\n            \"\
    five\" -> 5,\n            \"six\" -> 6,\n            \"seven\" -> 7,\n       \
    \     \"eight\" -> 8,\n            \"nine\" -> 9)\n        val xs = numbers.split(\"\
    \ \").map(map(_)).toList.sorted\n        return xs.map(n => map.filter(x => x._2\
    \ == n).head._1).mkString(\" \")", "        val numbersMap = Map(\"zero\" -> 0,\
    \ \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"\
    six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        val numbersList\
    \ = numbers.split(\" \").map(numbersMap(_)).sorted\n        numbersList.map(numbersMap.find(_._2\
    \ == _).get._1).mkString(\" \")", "        val numberals = Map(\n            \"\
    zero\" -> 0,\n            \"one\" -> 1,\n            \"two\" -> 2,\n         \
    \   \"three\" -> 3,\n            \"four\" -> 4,\n            \"five\" -> 5,\n\
    \            \"six\" -> 6,\n            \"seven\" -> 7,\n            \"eight\"\
    \ -> 8,\n            \"nine\" -> 9\n        )\n        val ret = numbers.split(\"\
    \ \").map(n => numberals(n)).sorted.map(n => numberals.find(_._2 == n).get._1).mkString(\"\
    \ \")\n        println(ret)\n        ret", "        // add your code here\n  \
    \      return numbers", "    \treturn numbers.split(\" \").map(_.toInt).sortWith(_<_).mkString(\"\
    \ \")", "        val numeralMap = Map[String, Int]()\n        val numeralList\
    \ = numbers.split(\" \")\n        numeralList.map(numeral => numeralMap.put(numeral,\
    \ convertToNumber(numeral)))\n        val sortedList = numeralMap.toList.sortBy(_._2)\n\
    \        val sortedNumberals = sortedList.map(pair => pair._1)\n        return\
    \ sortedNumberals.mkString(\" \")", '        numbers.split(" ").map(x => getNumber(x)).sorted.map(x
    => getString(x)).mkString(" ")', "        val convert : Map[String, Int] = Map(\"\
    zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\"\
    \ -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n       \
    \ var res : List[String] = List()\n        for (number <- numbers.split(\" \"\
    )) {\n            res = convert(number) :: res\n        }\n        res = res.sorted\n\
    \        var result : String = \"\"\n        for (number <- res) {\n         \
    \   result += convert.map(_.swap).get(number).get + \" \"\n        }\n       \
    \ result.trim", "        val numberMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\"\
    \ -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\"\
    \ -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        var numberArray = numbers.split(\"\
    \ \").map(numberMap(_))\n        numberArray = numberArray.sorted\n        val\
    \ result = numberArray.map(a => numberMap.find(_._2 == a).get._1)\n        result.mkString(\"\
    \ \")", "        val numDict = Map(\n            \"zero\" -> 0,\n            \"\
    one\" -> 1,\n            \"two\" -> 2,\n            \"three\" -> 3,\n        \
    \    \"four\" -> 4,\n            \"five\" -> 5,\n            \"six\" -> 6,\n \
    \           \"seven\" -> 7,\n            \"eight\" -> 8,\n            \"nine\"\
    \ -> 9\n        )\n        numbers.split(\" \").sorted(Ordering.by((x: String)\
    \ => numDict(x))).mkString(\" \")", "        val nums = numbers.split(\" \").map(x\
    \ => x match {\n            case \"zero\" => 0\n            case \"one\" => 1\n\
    \            case \"two\" => 2\n            case \"three\" => 3\n            case\
    \ \"four\" => 4\n            case \"five\" => 5\n            case \"six\" => 6\n\
    \            case \"seven\" => 7\n            case \"eight\" => 8\n          \
    \  case \"nine\" => 9\n        })\n        val ans = nums.sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        return ans.mkString(\" \")", '        numbers.split("
    ").map(i => if (i == "zero") 0 else if (i == "one") 1 else if (i == "two") 2 else
    if (i == "three") 3 else if (i == "four") 4 else if (i == "five") 5 else if (i
    == "six") 6 else if (i == "seven") 7 else if (i == "eight") 8 else if (i == "nine")
    9 else -1).sorted.mkString(" ")', "        val nums = numbers.split(\" \").map(_.toInt).sorted\n\
    \        nums.map(_.toString).mkString(\" \")", '        numbers.split(" ").map(x
    => numberToInt(x)).sorted.map(x => intToNumber(x)).mkString(" ")', "        val\
    \ numeralMapping = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        numbers.split(\" \").map(x => numeralMapping(x)).sorted.map(x\
    \ => numeralMapping.filter(p => p._2 == x).head._1).mkString(\" \")", "      \
    \  val nums = numbers.split(\" \").map(x => (x, x match {\n            case \"\
    zero\" => 0\n            case \"one\" => 1\n            case \"two\" => 2\n  \
    \          case \"three\" => 3\n            case \"four\" => 4\n            case\
    \ \"five\" => 5\n            case \"six\" => 6\n            case \"seven\" =>\
    \ 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n       \
    \ })).toList.sortBy(_._2).map(_._1)\n        nums.mkString(\" \")", "      var\
    \ nums = numbers.split(\" \")\n      var nums2 = nums.sorted\n      var res =\
    \ \"\"\n      for (i <- 0 until nums2.length - 1) res += nums2(i) + \" \"\n  \
    \    res += nums2(nums2.length - 1)\n      return res", "        val numeralTable\
    \ = Map[Int, String](0 -> \"zero\", 1 -> \"one\", 2 -> \"two\", 3 -> \"three\"\
    , 4 -> \"four\", 5 -> \"five\", 6 -> \"six\", 7 -> \"seven\", 8 -> \"eight\",\
    \ 9 -> \"nine\")\n        return numbers.split(\" \").map(x => numeralTable.map(y\
    \ => if (y._2 == x) (y._1, x) else (y._1, \"\"))).sortWith((a, b) => a.keys.max\
    \ < b.keys.max).map(x => x.filter(_._2 != \"\").values.mkString).mkString(\" \"\
    )", "        var nums = numbers.split(\" \").map(x => {\n            x match {\n\
    \                case \"zero\" => 0\n                case \"one\" => 1\n     \
    \           case \"two\" => 2\n                case \"three\" => 3\n         \
    \       case \"four\" => 4\n                case \"five\" => 5\n             \
    \   case \"six\" => 6\n                case \"seven\" => 7\n                case\
    \ \"eight\" => 8\n                case \"nine\" => 9\n            }\n        })\n\
    \        var sortedNums = nums.sorted\n        var numeralString = \"\"\n    \
    \    sortedNums.foreach(x => {\n            x match {\n                case 0\
    \ => numeralString += \"zero \"\n                case 1 => numeralString += \"\
    one \"\n                case 2 => numeralString += \"two \"\n                case\
    \ 3 => numeralString += \"three \"\n                case 4 => numeralString +=\
    \ \"four \"\n                case 5 => numeralString += \"five \"\n          \
    \      case 6 => numeralString += \"six \"\n                case 7 => numeralString\
    \ += \"seven \"\n                case 8 => numeralString += \"eight \"\n     \
    \           case 9 => numeralString += \"nine \"\n            }\n        })\n\
    \        return numeralString.trim", "        def wordToNum(word : String) : Int\
    \ = {\n            word match {\n                case \"zero\" => 0\n        \
    \        case \"one\" => 1\n                case \"two\" => 2\n              \
    \  case \"three\" => 3\n                case \"four\" => 4\n                case\
    \ \"five\" => 5\n                case \"six\" => 6\n                case \"seven\"\
    \ => 7\n                case \"eight\" => 8\n                case \"nine\" =>\
    \ 9\n            }\n        }\n        def numToWord(num : Int) : String = {\n\
    \            num match {\n                case 0 => \"zero\"\n               \
    \ case 1 => \"one\"\n                case 2 => \"two\"\n                case 3\
    \ => \"three\"\n                case 4 => \"four\"\n                case 5 =>\
    \ \"five\"\n                case 6 => \"six\"\n                case 7 => \"seven\"\
    \n                case 8 => \"eight\"\n                case 9 => \"nine\"\n  \
    \          }\n        }\n        var strs = numbers.split(\" \")\n        var\
    \ nums = new Array[Int](strs.length)\n        for (i <- 0 until strs.length) {\n\
    \            nums(i) = wordToNum(strs(i))\n        }\n        var sortedNums =\
    \ nums.sorted\n        var sortedStrs = new Array[String](sortedNums.length)\n\
    \        for (i <- 0 until sortedNums.length) {\n            sortedStrs(i) = numToWord(sortedNums(i))\n\
    \        }\n        return sortedStrs.mkString(\" \")", "        // Create a map\
    \ to store the string to integer mapping.\n        val map = new HashMap[String,\
    \ Int]\n        map(\"zero\") = 0\n        map(\"one\") = 1\n        map(\"two\"\
    ) = 2\n        map(\"three\") = 3\n        map(\"four\") = 4\n        map(\"five\"\
    ) = 5\n        map(\"six\") = 6\n        map(\"seven\") = 7\n        map(\"eight\"\
    ) = 8\n        map(\"nine\") = 9\n        // Convert input string to an array\
    \ of integers.\n        val ints = numbers.split(\" \").map(s => map(s))\n   \
    \     // Sort the array of integers.\n        val intsSorted = ints.sorted\n \
    \       // Convert the sorted array of integers to the sorted string\n       \
    \ intsSorted.map(i => map.find(_._2 == i).get._1).mkString(\" \")", "        var\
    \ list = numbers.split(\" \").map(str => str.toInt).toList\n        list = list.sorted\n\
    \        list.mkString(\" \")", "        val digits = numbers.split(\" \").map(ToDigit(_))\n\
    \        val sortedDigits = digits.sorted\n        sortedDigits.map(ToString(_)).mkString(\"\
    \ \")", "        var nums = numbers.split(\" \").toList\n        var numMap =\
    \ new HashMap[String, Integer]\n        numMap.put(\"zero\", 0)\n        numMap.put(\"\
    one\", 1)\n        numMap.put(\"two\", 2)\n        numMap.put(\"three\", 3)\n\
    \        numMap.put(\"four\", 4)\n        numMap.put(\"five\", 5)\n        numMap.put(\"\
    six\", 6)\n        numMap.put(\"seven\", 7)\n        numMap.put(\"eight\", 8)\n\
    \        numMap.put(\"nine\", 9)\n        val sorted = nums.map(num => numMap(num)).sorted\n\
    \        sorted.map(num => numMap.find(_._2 == num).get._1).mkString(\" \")",
  '        numbers.split(" ").map(WordToNumeral.convert).sortWith((a, b) => a < b).map(NumeralToWord.convert).mkString("
    ")', '        // complete this method', "        var a = ArrayBuffer[Int]()\n\
    \        var s = numbers.split(\" \")\n        for (i <- 0 until s.length) {\n\
    \            var numeral = s(i)\n            numeral match {\n               \
    \ case \"zero\" => a += 0\n                case \"one\" => a += 1\n          \
    \      case \"two\" => a += 2\n                case \"three\" => a += 3\n    \
    \            case \"four\" => a += 4\n                case \"five\" => a += 5\n\
    \                case \"six\" => a += 6\n                case \"seven\" => a +=\
    \ 7\n                case \"eight\" => a += 8\n                case \"nine\" =>\
    \ a += 9\n            }\n        }\n        val b = a.sorted\n        var c =\
    \ new ArrayBuffer[String]()\n        for (i <- 0 until b.length) {\n         \
    \   b(i) match {\n                case 0 => c += \"zero\"\n                case\
    \ 1 => c += \"one\"\n                case 2 => c += \"two\"\n                case\
    \ 3 => c += \"three\"\n                case 4 => c += \"four\"\n             \
    \   case 5 => c += \"five\"\n                case 6 => c += \"six\"\n        \
    \        case 7 => c += \"seven\"\n                case 8 => c += \"eight\"\n\
    \                case 9 => c += \"nine\"\n            }\n        }\n        var\
    \ result = \"\"\n        for (i <- 0 until c.length) {\n            result +=\
    \ c(i)\n            if (i != c.length - 1) result += \" \"\n        }\n      \
    \  result", "        val map = new scala.collection.mutable.HashMap[String,Int]\n\
    \        map.put(\"zero\", 0)\n        map.put(\"one\", 1)\n        map.put(\"\
    two\", 2)\n        map.put(\"three\", 3)\n        map.put(\"four\", 4)\n     \
    \   map.put(\"five\", 5)\n        map.put(\"six\", 6)\n        map.put(\"seven\"\
    , 7)\n        map.put(\"eight\", 8)\n        map.put(\"nine\", 9)\n        var\
    \ list = numbers.split(\" \").toList\n        list = list.sortWith((x,y) => map(x)\
    \ < map(y))\n        var result = \"\"\n        for (i <- 0 until list.length\
    \ - 1) {\n            result += list(i) + \" \"\n        }\n        result +=\
    \ list(list.length - 1)\n        result", "        val numberals = Map(\n    \
    \        \"zero\" -> 0,\n            \"one\" -> 1,\n            \"two\" -> 2,\n\
    \            \"three\" -> 3,\n            \"four\" -> 4,\n            \"five\"\
    \ -> 5,\n            \"six\" -> 6,\n            \"seven\" -> 7,\n            \"\
    eight\" -> 8,\n            \"nine\" -> 9)\n        val sorted = (for (str <- numbers.split(\"\
    \ \")) yield numberals(str)).sorted\n        val numeralize = numberals.map(_.swap)\n\
    \        val numeralized = for (num <- sorted) yield numeralize(num)\n       \
    \ numeralized.mkString(\" \")", "        val numWordToInt = Map(\n           \
    \ \"zero\" -> 0,\n            \"one\" -> 1,\n            \"two\" -> 2,\n     \
    \       \"three\" -> 3,\n            \"four\" -> 4,\n            \"five\" -> 5,\n\
    \            \"six\" -> 6,\n            \"seven\" -> 7,\n            \"eight\"\
    \ -> 8,\n            \"nine\" -> 9)\n        val sortedString = numbers.split(\"\
    \ \").sortedWith(\n            (a, b) => numWordToInt(a) < numWordToInt(b))\n\
    \        sortedString.mkString(\" \")", "        val lookup = Map(\"zero\" ->\
    \ 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5,\
    \ \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        val nums\
    \ = numbers.split(\" \").map(s => lookup(s))\n        nums.sorted.map(n => lookup.find(_._2\
    \ == n).get._1).mkString(\" \")", "    \tval numberSet = numbers.split(\" \").toList\n\
    \    \tval sorted = numberSet.sortWith((n1, n2) => convertNumber(n1) < convertNumber(n2))\n\
    \    \treturn sorted.mkString(\" \")", "        val numberals = Map(\"zero\" ->\
    \ 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5,\
    \ \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        val numbersList\
    \ = numbers.split(\" \").map(numberals(_)).sorted\n        numbersList.map(numberals.find(_._2\
    \ == _).get._1).mkString(\" \")", "        val numeralToNumber = Map(\"zero\"\
    \ -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" ->\
    \ 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        numbers.split(\"\
    \ \").sorted.map(numeralToNumber).map(_.toString).mkString(\" \")", "        val\
    \ numeralTranslation = Map(\n            \"zero\" -> 0,\n            \"one\" ->\
    \ 1,\n            \"two\" -> 2,\n            \"three\" -> 3,\n            \"four\"\
    \ -> 4,\n            \"five\" -> 5,\n            \"six\" -> 6,\n            \"\
    seven\" -> 7,\n            \"eight\" -> 8,\n            \"nine\" -> 9\n      \
    \  )\n        val nums = numbers.split(\" \").map(x => numeralTranslation(x))\n\
    \        val sorted = nums.sorted\n        val sortedWords = sorted.map(x => numeralTranslation.filter(y\
    \ => y._2 == x).head._1)\n        sortedWords.mkString(\" \")", '      return
    "(" + numbers.split(" ").map(parseInt(_)).sortWith(_ < _).mkString(" ") + ")"',
  "        val nums = numbers.split(\" \").map(x => x match {\n            case \"\
    zero\" => 0\n            case \"one\" => 1\n            case \"two\" => 2\n  \
    \          case \"three\" => 3\n            case \"four\" => 4\n            case\
    \ \"five\" => 5\n            case \"six\" => 6\n            case \"seven\" =>\
    \ 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n       \
    \ })\n        nums.sorted.mkString(\" \")", "        val numList = numbers.split(\"\
    \ \").toList.map(_.toInt)\n        val sortedList = numList.sorted\n        val\
    \ num = sortedList.mkString(\" \")\n        return num", "        var num = numbers.split(\"\
    \ \").map(_.toInt).sorted.mkString(\" \")\n        return num", "        val words\
    \ = \"zero one two three four five six seven eight nine\"\n        val stringMap\
    \ = words.split(\" \").map(_.toString).zipWithIndex.toMap\n        val wordInts\
    \ = numbers.split(\" \").map(stringMap(_))\n        wordInts.sorted.map(stringMap.filter(p\
    \ => p._2 == _).head._1).mkString(\" \")", "        val dict = Array(\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\")\n        val words = numbers.split(\" \")\n        val list = words.map(s\
    \ => dict.indexOf(s)).sorted\n        list.map(i => dict(i)).mkString(\" \")",
  "        val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\"\
    \ -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\"\
    \ -> 8, \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(x => numeralMap(x))\n\
    \        val sortedNums = nums.sorted\n        val numeralArray = Array(\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\")\n        sortedNums.map(x => numeralArray(x)).mkString(\" \")", " \
    \       val numberList = numbers.split(\" \").map(n => n match {\n           \
    \ case \"zero\" => 0\n            case \"one\" => 1\n            case \"two\"\
    \ => 2\n            case \"three\" => 3\n            case \"four\" => 4\n    \
    \        case \"five\" => 5\n            case \"six\" => 6\n            case \"\
    seven\" => 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n\
    \        }).toList.sorted\n        val words = Array(\"zero\", \"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n  \
    \      numberList.foldLeft(\"\")((s, n) => s + \" \" + words(n))", "        var\
    \ nums = numbers.split(\" \").map(_.toInt).sorted\n        var numStr = new StringBuilder\n\
    \        nums.foreach(x => numStr.append(x + \" \"))\n        return numStr.toString.trim",
  "        val numMap = new HashMap[String, Int]()\n        numMap(\"zero\") = 0\n\
    \        numMap(\"one\") = 1\n        numMap(\"two\") = 2\n        numMap(\"three\"\
    ) = 3\n        numMap(\"four\") = 4\n        numMap(\"five\") = 5\n        numMap(\"\
    six\") = 6\n        numMap(\"seven\") = 7\n        numMap(\"eight\") = 8\n   \
    \     numMap(\"nine\") = 9\n        numbers.split(\" \").map(numMap(_)).sortWith(_\
    \ < _).map(numMap.find(_._2 == _).get._1).mkString(\" \")", "        // your code\
    \ here\n        val numberMap = Map(\n            \"zero\" -> 0,\n           \
    \ \"one\" -> 1,\n            \"two\" -> 2,\n            \"three\" -> 3,\n    \
    \        \"four\" -> 4,\n            \"five\" -> 5,\n            \"six\" -> 6,\n\
    \            \"seven\" -> 7,\n            \"eight\" -> 8,\n            \"nine\"\
    \ -> 9\n        )\n        val numberList = numbers.split(\" \").map(s => numberMap(s)).toList.sorted\n\
    \        var result = \"\"\n        numberList.foreach(\n            n => {\n\
    \                numberMap.foreach(\n                    i => {\n            \
    \            if (i._2 == n) {\n                            result += i._1 + \"\
    \ \"\n                        }\n                    }\n                )\n  \
    \          }\n        )\n        result.trim"]
stop_tokens:
- "\n    }\n"
