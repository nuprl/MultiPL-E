language: scala
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Write your code here\n\
    \        if (n < 3) return 0\n        n - n / 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpis9gh3lh.scala:20)\n\tat Problem.main(tmpis9gh3lh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We don't even need to\
    \ put it in a set. We just need to find a fast way of\n        // counting the\
    \ number of multiples of 3 in the range.\n        val nums = (0l to n).map(x =>\
    \ x * x - x + 1)\n        val multiplesOf3 = (1l to n / 3).map(x => x * 3).toSet\n\
    \        // Now just count the number of triples in nums\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if (multiplesOf3.contains(nums(i) + nums(j) + nums(k))) count += 1\n    \
    \            }\n            }\n        }\n        return count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupe93xsl.scala:31)\n\tat Problem.main(tmpupe93xsl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Define a function to generate\
    \ the sequence\n        val seq = Array.tabulate(n.toInt)(i => i * i - i + 1)\n\
    \        // Define a function to check if the sum of any three numbers is a multiple\
    \ of 3\n        def isMultiple3(a : Int, b : Int, c : Int) : Boolean = (a + b\
    \ + c) % 3 == 0\n        // Filter the list to check whether the triplets satisfy\
    \ the condition.\n        seq.combinations(3).map(x => (x(0), x(1), x(2))).filter(x\
    \ => isMultiple3(x._1, x._2, x._3)).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg25lrz6o.scala:23)\n\tat Problem.main(tmpg25lrz6o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val m = n % 3\n        val\
    \ pairs = (0 to 2) flatMap { x => \n        \t(0 to 2) map { y => (x, y) }\n \
    \       } filter { case (x, y) => (x + y) % 3 == m }\n        val f = (0 to 2)\
    \ flatMap { x => \n        \t(0 to 2) map { y => (x, y) }\n        } filter {\
    \ case (x, y) => (x + y) % 3 == 0 }\n        var result = (n / 3) * (n / 3) *\
    \ (n / 3)\n        result += (n / 3) * (n / 3) * (n % 3)\n        result += pairs.length\
    \ * (n / 3) * (n / 3)\n        result += f.length * (n / 3) * (n % 3)\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8rz1trw2.scala:29)\n\tat Problem.main(tmp8rz1trw2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Trying to find an expression\
    \ for ai: a[i] = i * i - i + 1.\n        // In other words, a[i] = i^2 - i + 1.\n\
    \        // So we have a[i] + a[j] + a[k] = i^2 - i + 1 + j^2 - j + 1 + k^2 -\
    \ k + 1.\n        // a[i] + a[j] + a[k] = i^2 + j^2 + k^2 - i - j - k + 3.\n \
    \       // Now, we want to make sure that i < j < k.\n        // So, we have i\
    \ < j < k < n.\n        // Since we are looking for the maximum number of valid\
    \ triples, \n        // let's go ahead and generate all possible valid triples\
    \ from 1 to n, \n        // and see how many of them are divisible by 3.\n   \
    \     def getAllTriples(n : Long) : List[List[Long]] = {\n            def getAllTriplesFrom(i\
    \ : Long, n : Long) : List[List[Long]] = {\n                if (i == n) List(List(i))\n\
    \                else getAllTriplesFrom(i + 1, n).flatMap(l => (i :: l) :: List())\n\
    \            }\n            getAllTriplesFrom(1, n)\n        }\n        val triples\
    \ = getAllTriples(n)\n        println(triples)\n        def isDivisibleBy3(triple\
    \ : List[Long]) : Boolean = {\n            val tripleSum = triple.map(x => x *\
    \ x - x + 1).reduce(_ + _)\n            tripleSum % 3 == 0\n        }\n      \
    \  triples.filter(isDivisibleBy3(_)).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxsontjoh.scala:41)\n\tat Problem.main(tmpxsontjoh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: 'List(List(1, 2, 3, 4, 5))

    List(List(1, 2, 3, 4, 5, 6))

    '
  timestamp: 1660028414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        /**\n         * See this\
    \ for explanation: http://www.mathblog.dk/project-euler-178/\n         * d_1 =\
    \ (2 * 3) + 1 = 7\n         * d_2 = (2 * 3 * 5) + 1 = 31\n         * d_3 = (2\
    \ * 3 * 5 * 7) + 1 = 215\n         * d_4 = (2 * 3 * 5 * 7 * 11) + 1 = 1771\n \
    \        * d_5 = (2 * 3 * 5 * 7 * 11 * 13) + 1 = 16687\n         * d_6 = (2 *\
    \ 3 * 5 * 7 * 11 * 13 * 17) + 1 = 179653\n         * d_7 = (2 * 3 * 5 * 7 * 11\
    \ * 13 * 17 * 19) + 1 = 2052725\n         * d_8 = (2 * 3 * 5 * 7 * 11 * 13 * 17\
    \ * 19 * 23) + 1 = 24050127\n         * d_9 = (2 * 3 * 5 * 7 * 11 * 13 * 17 *\
    \ 19 * 23 * 29) + 1 = 29176533\n         * d_10 = (2 * 3 * 5 * 7 * 11 * 13 * 17\
    \ * 19 * 23 * 29 * 31) + 1 = 35655813\n         * So this sequence is defined\
    \ by:\n         * d_n = (2 * 3 * 5 * ... * p_n) + 1\n         * where p_n is the\
    \ nth prime\n         * prime_n can be calculated using a prime sieve\n      \
    \   * then d_n can be calculated using the formula above\n         * then the\
    \ formula for total number of triples a[i], a[j], a[k]\n         * where i < j\
    \ < k, a[i] + a[j] + a[k] is a multiple of 3 is:\n         * d_n * (d_n - 1) *\
    \ (d_n - 2) / (3 * 2 * 1)\n         * Then return that number.\n         */\n\
    \        val primes = sieve(n.toInt)\n        //println(primes)\n        var result\
    \ = 1\n        for (i <- 0 until primes.length) {\n            result *= (primes(i)\
    \ +\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7msx8oqy.scala:41:34 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            result *= (primes(i) +\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp7msx8oqy.scala:51:0 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7msx8oqy.scala:37:21\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = sieve(n.toInt)\n\e[31m\e[31m   |\e[0m                     ^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: sieve\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7msx8oqy.scala:50:1 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp7msx8oqy.scala:43:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m43 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = new Array[Long](n.toInt)\n\
    \        var res = 0l\n        var sum = 0l\n        var i = 0\n        while\
    \ (i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n        }\n\
    \        i = 0\n        while (i < n - 2) {\n            var j = i + 1\n     \
    \       while (j < n - 1) {\n                var k = j + 1\n                while\
    \ (k < n) {\n                    sum = a(i) + a(j) + a(k)\n                  \
    \  if (sum % 3 == 0) res += 1\n                    k += 1\n                }\n\
    \                j += 1\n            }\n            i += 1\n        }\n      \
    \  res\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwgxn4_iv.scala:40)\n\tat Problem.main(tmpwgxn4_iv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n      var count = 0\n      val c\
    \ = Array.ofDim[Int](3)\n      for (i <- 0 until n.toInt) c(i * i - i + 1 % 3)\
    \ += 1\n      count += c(0) * (c(0) - 1) * (c(0) - 2) / 6\n      count += c(1)\
    \ * (c(1) - 1) * (c(2)) / 2\n      count += c(2) * (c(2) - 1) * (c(1)) / 2\n \
    \     count += c(0) * (c(0) - 1) * (c(2)) / 2\n      count += c(0) * (c(1)) *\
    \ (c(2))\n      count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length\
    \ 3\n\tat Problem$.getMaxTriples$$anonfun$1(tmpx3gn8i84.scala:17)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.getMaxTriples(tmpx3gn8i84.scala:17)\n\
    \tat Problem$.main(tmpx3gn8i84.scala:26)\n\tat Problem.main(tmpx3gn8i84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \tval a = new Array[Long](n.toInt)\n\
    \    \tfor (i <- 1 to n.toInt) {\n    \t\ta(i - 1) = (i * i - i + 1)\n    \t}\n\
    \    \tvar counter = 0\n    \tfor (i <- 0 to n.toInt - 3) {\n    \t\tfor (j <-\
    \ i + 1 to n.toInt - 2) {\n    \t\t\tfor (k <- j + 1 to n.toInt - 1) {\n    \t\
    \t\t\tif ((a(i) + a(j) + a(k)) % 3 == 0) {\n    \t\t\t\t\tcounter += 1\n    \t\
    \t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n    \tcounter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        (1l to n).map(x => x * x\
    \ - x + 1).groupBy(x => x % 3).map(x => x._2.combinations(3).filter(y => y.sum\
    \ % 3 == 0).size).sum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var result = 0l\n       \
    \ var i = 0l\n        var j = 0l\n        var k = 0l\n        var a = 0l\n   \
    \     var b = 0l\n        var c = 0l\n        while (i < n) {\n            j =\
    \ i + 1\n            while (j < n) {\n                k = j + 1\n            \
    \    while (k < n) {\n                    a = (i * i) - i + 1\n              \
    \      b = (j * j) - j + 1\n                    c = (k * k) - k + 1\n        \
    \            if ((a + b + c) % 3 == 0) {\n                        result += 1\n\
    \                    }\n                    k += 1\n                }\n      \
    \          j += 1\n            }\n            i += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeobz055s.scala:42)\n\tat Problem.main(tmpeobz055s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val l = new ArrayBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            l += i.toLong * i.toLong - i.toLong\
    \ + 1\n        }\n        var count = 0\n        for (i <- 0 until l.length -\
    \ 2) {\n            for (j <- i + 1 until l.length - 1) {\n                for\
    \ (k <- j + 1 until l.length) {\n                    if ((l(i) + l(j) + l(k))\
    \ % 3 == 0) {\n                        count += 1\n                    }\n   \
    \             }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code goes here.\n\
    \        val cache = HashMap[(Long, Long), Long]()\n        def f(n : Long, count\
    \ : Long) : Long = {\n            if (n <= 0) count\n            else {\n    \
    \            if (cache.contains((n, count))) cache((n, count))\n             \
    \   else {\n                    val value = f(n - 1, count + (if (n % 3 == 0)\
    \ 1 else 0))\n                    cache((n, count)) = value\n                \
    \    value\n                }\n            }\n        }\n        f(n, 0)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4sab8igl.scala:32)\n\tat Problem.main(tmp4sab8igl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val maxV = n * n - n + 1\n\
    \        val s = n / 3 - 1\n        val e = n - 2\n        val a = (1l to n) map\
    \ {x => x * x - x + 1}\n        val map = a.zipWithIndex.toMap\n        val m\
    \ = HashMap[Long, Long]()\n        for (i <- s to e) {\n            for (j <-\
    \ i + 1 to e) {\n                val ab = a(i) + a(j)\n                val c =\
    \ (3 - ab % 3) % 3\n                val abc = ab + c\n                val x =\
    \ if (m.contains(abc)) m(abc) else 0\n                m(abc) = x + 1\n       \
    \     }\n        }\n        if (m.contains(maxV)) m(maxV) else 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1xptrcya.scala:23:27\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m\
    \ \e[36mab\e[0m = a(i) + a(j)\n\e[31m\e[31m   |\e[0m                         \
    \  ^\e[0m\n\e[31m   |\e[0m                           Found:    (i : Long)\n\e\
    [31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1xptrcya.scala:23:34 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mab\e[0m = a(i) +\
    \ a(j)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (j : Long)\n\e[31m   |\e\
    [0m                                  Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        if (n < 3) 0 else {\n   \
    \         val m = n.toInt - 2\n            val d = new Array[Long](m)\n      \
    \      for (i <- 0 until m) d(i) = (i + 2L) * (i + 2L) - (i + 2L) + 1\n      \
    \      var c = 0L\n            for (i <- 0 until m) {\n                for (j\
    \ <- i + 1 until m) {\n                    val s = d(i) + d(j)\n             \
    \       if (s % 3 == 0) {\n                        for (k <- j + 1 until m) {\n\
    \                            if (s + d(k) % 3 == 0) c += 1\n                 \
    \       }\n                    }\n                }\n            }\n         \
    \   c\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3gb7fu_j.scala:34)\n\tat Problem.main(tmp3gb7fu_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0l\n        for (i <- 0 to n.toInt - 3) {\n     \
    \       for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to\
    \ n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val isDivisibleByThree =\
    \ (x : Long) => x % 3 == 0\n        // new Array[Long](n.toInt)\n        val a\
    \ = new mutable.ArrayBuffer[Long]()\n        //create array a\n        for (i\
    \ <- 1 to n.toInt) {\n            val b = i * i - i + 1\n            a += b\n\
    \        }\n        var count = 0\n        //iterate through array\n        for\
    \ (i <- 0 to a.length - 3) {\n            for (j <- i + 1 to a.length - 2) {\n\
    \                for (k <- j + 1 to a.length - 1) {\n                    val total\
    \ = a(i) + a(j) + a(k)\n                    if (isDivisibleByThree(total)) {\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9kzsq2j.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (0l to n - 1).map(i\
    \ => i * i - i + 1l).toArray\n        var count = 0l\n        for (i <- 0 to n\
    \ - 3) {\n            val x = a(i)\n            val j = i + 1\n            val\
    \ k = n - 1\n            while (j < k) {\n                val y = a(j)\n     \
    \           val z = a(k)\n                if (x + y + z == 0) count += k - j\n\
    \                k -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpui_jxv2k.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n - \e[31m3\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpui_jxv2k.scala:23:26 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mz\e[0m = a(k)\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpui_jxv2k.scala:25:18\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                k -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value -= is not a member of Long - did you mean k.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        return n / 3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzqlafpf3.scala:19)\n\tat Problem.main(tmpzqlafpf3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var m = 0l\n        for (i\
    \ <- 1 to n.toInt - 2) {\n            for (j <- i + 1 to n.toInt - 1) {\n    \
    \            for (k <- j + 1 to n.toInt) {\n                    if ((i * i - i\
    \ + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) m += 1\n                }\n \
    \           }\n        }\n        m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val triangles = {\n     \
    \       val a = new Array[Long](n.toInt)\n            var i = 0\n            while\
    \ (i < n) {\n                a(i) = i * i - i + 1\n                i += 1\n  \
    \          }\n            a\n        }\n        var result = 0l\n        for (i\
    \ <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n\
    \                for (k <- j + 1 until n.toInt) {\n                    if ((triangles(i)\
    \ + triangles(j) + triangles(k)) % 3 == 0) {\n                        result +=\
    \ 1\n                    }\n                }\n            }\n        }\n    \
    \    result\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpac_ogvf_.scala:37)\n\tat Problem.main(tmpac_ogvf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var result = 0l\n       \
    \ for (i <- 0 until n.toInt) {\n            val si = i * i - i + 1\n         \
    \   for (j <- i + 1 until n.toInt) {\n                val sj = j * j - j + 1\n\
    \                if ((si + sj) % 3 == 0) {\n                    for (k <- j +\
    \ 1 until n.toInt) {\n                        val sk = k * k - k + 1\n       \
    \                 if ((si + sj + sk) % 3 == 0) result += 1\n                 \
    \   }\n                }\n            }\n        }\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo5z6y0sn.scala:31)\n\tat Problem.main(tmpo5z6y0sn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        for\
    \ (i <- 1 to n.toInt - 2) {\n            for (j <- i + 1 to n.toInt - 1) {\n \
    \               val sum = j * j - j + 1 + i * i - i + 1\n                val max\
    \ = min(n, 3 * sum)\n                val k = ceil(sqrt(max + 1) - 1)\n       \
    \         count += max(0, k - j)\n            }\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe3q1nx52.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                count += max(\e[31m0\e[0m, k - j)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpe3q1nx52.scala:21:25 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                count += max(\e[31m0\e[0m, k - j)\n\e\
    [31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m        \
    \                 \e[33mvalue\e[0m \e[35mmax\e[0m does not take parameters\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        n * (n - 1) * (n - 2) / 6\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd8q3zvdi.scala:18)\n\tat Problem.main(tmpd8q3zvdi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (for (i <- 1 to n.toInt)\
    \ yield i * i - i + 1).toList\n        for (i <- 0 to n.toInt - 3; j <- i + 1\
    \ to n.toInt - 2; k <- j + 1 to n.toInt - 1; if a(i) + a(j) + a(k) % 3 == 0) yield\
    \ (i, j, k)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc_d_v15a.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n.toInt - \e[31m3\e[0m; j <- i + \e[31m1\e[0m to n.toInt - \e\
    [31m2\e[0m; k <- j + \e[31m1\e[0m to n.toInt - \e[31m1\e[0m; \e[33mif\e[0m a(i)\
    \ + a(j) + a(k) % \e[31m3\e[0m == \e[31m0\e[0m) \e[33myield\e[0m (i, j, k)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[(Int, Int, Int)]\n\e[31m   |\e\
    [0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        val sum = (0l\
    \ to n - 1).foldLeft(0l)((acc, k) => acc + a(k.toInt))\n        val res = (0l\
    \ to n - 3).foldLeft(0l)((acc, i) => acc + (i + 1l to n - 2).foldLeft(0l)((acc,\
    \ j) => acc + (j + 1l to n - 1).foldLeft(0l)((acc, k) => if ((a(i.toInt) + a(j.toInt)\
    \ + a(k.toInt)) % 3 == 0) acc + 1 else acc)))\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc71je6it.scala:22)\n\tat Problem.main(tmpc71je6it.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Good luck!\n        def\
    \ count(n : Long) : Long = {\n            val set = HashSet[Long]()\n        \
    \    for (i <- 1l to n) {\n                set += (i * i - i + 1)\n          \
    \  }\n            val a = set.toArray\n            var cnt = 0l\n            for\
    \ (i <- 0 until a.length - 2) {\n                for (j <- i + 1 until a.length\
    \ - 1) {\n                    for (k <- j + 1 until a.length) {\n            \
    \            if ((a(i) + a(j) + a(k)) % 3 == 0) cnt += 1\n                   \
    \ }\n                }\n            }\n            cnt\n        }\n        def\
    \ count2(n : Long) : Long = {\n            var ans = 0l\n            var m = 1l\n\
    \            while (m * m <= n) {\n                val a = m * m - m + 1\n   \
    \             val b = m * m + m + 1\n                val c = m * m + 3 * m + 1\n\
    \                val d = m * m + 5 * m + 2\n                if (d <= n) ans +=\
    \ 1\n                if (a % 3 == 0) ans += 1\n                if (b % 3 == 0)\
    \ ans += 1\n                if (c % 3 == 0) ans += 1\n                if (d %\
    \ 3 == 0) ans += 1\n                m += 1\n            }\n            ans\n \
    \       }\n        count2(n)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_fvx8tfh.scala:52)\n\tat Problem.main(tmp_fvx8tfh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // https://math.stackexchange.com/questions/1039219/number-of-triples-such-that-i-j-k-and-x-x-x-0-mod-3\n\
    \        // http://www.mkyong.com/java/java-calculate-permutation-and-combination/\n\
    \        // https://en.wikipedia.org/wiki/Combination\n        // http://mathforum.org/library/drmath/view/55843.html\n\
    \        // https://en.wikipedia.org/wiki/Multinomial_theorem\n        // https://books.google.com/books?id=9d8jOiD34v0C&pg=PA43&lpg=PA43&dq=multinomial+theorem+bijective&source=bl&ots=TqT3NpnZnU&sig=sz_Ue7V9dC6e1Kjm_DZgHdYfDpY&hl=en&sa=X&ved=0ahUKEwjyl8OZhJjQAhVJZD4KHW5xD94Q6AEIOTAF#v=onepage&q=multinomial%20theorem%20bijective&f=false\n\
    \        // https://math.stackexchange.com/questions/173832/sum-of-multinomial-coefficients-with-equal-exponents\n\
    \        // https://www.quora.com/How-can-I-prove-1-x-x-x-x-n-x-x-k-1-n-k\n  \
    \      val s = n * (n + 1) / 2\n        var c = 0\n        for (a <- 1 to 3) {\n\
    \            if ((s - a) % 3 == 0) {\n                val i = (s - a) / 3 - 1\n\
    \                if (i > 0) {\n                    c += (n - 1)\n            \
    \        if (i <= n - 2) c += 1\n                }\n            }\n        }\n\
    \        c\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp707j_2_3.scala:29:22 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    c += (n - \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028423
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        return 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3cupxgz_.scala:18)\n\tat Problem.main(tmp3cupxgz_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // we only need to consider\
    \ all a[i] < a[j] < a[k]\n        // where i < j < k\n        // a[i] + a[j] +\
    \ a[k] is a multiple of 3\n        // (a[i] + a[j] + a[k]) % 3 == 0\n        //\
    \ a[i] + a[j] is a multiple of 3\n        // a[i] % 3 + a[j] % 3 = 3\n       \
    \ // a[i] % 3 + a[j] % 3 = 0\n        // a[i] % 3 = a[j] % 3 \n        // a[i]\
    \ % 3 = 0 and a[j] % 3 = 0\n        // Since (x + y) mod 3 = (x mod 3 + y mod\
    \ 3) mod 3\n        // a[i] + a[j] mod 3 = a[i] mod 3 + a[j] mod 3 mod 3\n   \
    \     // a[i] + a[j] mod 3 = a[i] mod 3 + a[j] mod 3\n        // a[i] + a[j] mod\
    \ 3 = 0\n        // a[i] mod 3 = - a[j] mod 3\n        // a[i] mod 3 = 0 and a[j]\
    \ mod 3 = 0\n        // a[i] = 3 * x\n        // a[j] = 3 * y\n        // a[i]\
    \ < a[j]\n        // 3 * x < 3 * y\n        // x < y\n        // a[k] < a[j]\n\
    \        // 3 * z < 3 * y\n        // z < y\n        // x < z\n        // since\
    \ a[k] = k * k - k + 1\n        // k * k - k + 1 < 3 * y\n        // k * k - k\
    \ < 3 * y - 1\n        // k * k - k < 3 * y\n        // y < k * k - k + 1\n  \
    \      // y < k * k - k + 1 - y\n        // y < k * k - 2 * k + 1\n        //\
    \ y < k * (k - 2) + 1\n        // y < k * (k - 2) + 1 - y\n       \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv0xbbjrm.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// we\
    \ only need to consider all a[i] < a[j] < a[k]\e[0m\n\e[31m16 |\e[0m        \e\
    [34m// where i < j < k\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ is a multiple of 3\e[0m\n\e[31m18 |\e[0m        \e[34m// (a[i] + a[j] + a[k])\
    \ % 3 == 0\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] + a[j] is a multiple of\
    \ 3\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i] % 3 + a[j] % 3 = 3\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// a[i] % 3 + a[j] % 3 = 0\e[0m\n\e[31m22 |\e[0m       \
    \ \e[34m// a[i] % 3 = a[j] % 3 \e[0m\n\e[31m23 |\e[0m        \e[34m// a[i] % 3\
    \ = 0 and a[j] % 3 = 0\e[0m\n\e[31m24 |\e[0m        \e[34m// Since (x + y) mod\
    \ 3 = (x mod 3 + y mod 3) mod 3\e[0m\n\e[31m25 |\e[0m        \e[34m// a[i] + a[j]\
    \ mod 3 = a[i] mod 3 + a[j] mod 3 mod 3\e[0m\n\e[31m26 |\e[0m        \e[34m//\
    \ a[i] + a[j] mod 3 = a[i] mod 3 + a[j] mod 3\e[0m\n\e[31m27 |\e[0m        \e\
    [34m// a[i] + a[j] mod 3 = 0\e[0m\n\e[31m28 |\e[0m        \e[34m// a[i] mod 3\
    \ = - a[j] mod 3\e[0m\n\e[31m29 |\e[0m        \e[34m// a[i] mod 3 = 0 and a[j]\
    \ mod 3 = 0\e[0m\n\e[31m30 |\e[0m        \e[34m// a[i] = 3 * x\e[0m\n\e[31m31\
    \ |\e[0m        \e[34m// a[j] = 3 * y\e[0m\n\e[31m32 |\e[0m        \e[34m// a[i]\
    \ < a[j]\e[0m\n\e[31m33 |\e[0m        \e[34m// 3 * x < 3 * y\e[0m\n\e[31m34 |\e\
    [0m        \e[34m// x < y\e[0m\n\e[31m35 |\e[0m        \e[34m// a[k] < a[j]\e\
    [0m\n\e[31m36 |\e[0m        \e[34m// 3 * z < 3 * y\e[0m\n\e[31m37 |\e[0m     \
    \   \e[34m// z < y\e[0m\n\e[31m38 |\e[0m        \e[34m// x < z\e[0m\n\e[31m39\
    \ |\e[0m        \e[34m// since a[k] = k * k - k + 1\e[0m\n\e[31m40 |\e[0m    \
    \    \e[34m// k * k - k + 1 < 3 * y\e[0m\n\e[31m41 |\e[0m        \e[34m// k *\
    \ k - k < 3 * y - 1\e[0m\n\e[31m42 |\e[0m        \e[34m// k * k - k < 3 * y\e\
    [0m\n\e[31m43 |\e[0m        \e[34m// y < k * k - k + 1\e[0m"
  stdout: ''
  timestamp: 1660028423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // for all i, j, k such that\
    \ i < j < k, \n        // a[i] + a[j] + a[k] = i*i - i + 1 + j*j - j + 1 + k*k\
    \ - k + 1\n        //                   = i*i + j*j + k*k + 3(i + j + k) - (i\
    \ + j + k) + 3\n        //                   = i*i + j*j + k*k + 3(i + j + k)\
    \ - (i + j + k) + 3\n        //                   = i*i + j*j + k*k + 3(i + j\
    \ + k)\n        // then to be a multiple of 3, we must have \n        //  i*i\
    \ + j*j + k*k = 3*x, x = (i + j + k)/3\n        //  \n        // \n        //\
    \ Let's start by getting all unique triplets (x, y, z) for which\n        // x^2\
    \ + y^2 + z^2 = 3*x and x < y < z.\n        // Let's start by solving the following\
    \ equation for z in terms of x and y:\n        // z^2 = 3*x - x^2 - y^2\n    \
    \    // z = +-(sqrt(3*x - x^2 - y^2))\n        // \n        // Now, notice that\
    \ if we have a triplet (x, y, z), then the triplet (x, y + 1, z) is also valid.\n\
    \        // So we can just iterate through all y starting from 2 and find all\
    \ valid values of z for that y.\n        // \n        // Finally, let's impose\
    \ the condition x < y < z.\n        // Let's solve the following equation for\
    \ x in terms of y and z:\n        // x^2 = 3*x - y^2 - z^2\n        // x = (y^2\
    \ + z^2) / (3 - 1)\n        // \n        // Finally, let's impose the condition\
    \ x < y < z.\n        // Notice that for a value of y, we can generate all valid\
    \ x for that value of y.\n        // Also, for a value of z, we\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu179ruxd.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// for\
    \ all i, j, k such that i < j < k, \e[0m\n\e[31m16 |\e[0m        \e[34m// a[i]\
    \ + a[j] + a[k] = i*i - i + 1 + j*j - j + 1 + k*k - k + 1\e[0m\n\e[31m17 |\e[0m\
    \        \e[34m//                   = i*i + j*j + k*k + 3(i + j + k) - (i + j\
    \ + k) + 3\e[0m\n\e[31m18 |\e[0m        \e[34m//                   = i*i + j*j\
    \ + k*k + 3(i + j + k) - (i + j + k) + 3\e[0m\n\e[31m19 |\e[0m        \e[34m//\
    \                   = i*i + j*j + k*k + 3(i + j + k)\e[0m\n\e[31m20 |\e[0m   \
    \     \e[34m// then to be a multiple of 3, we must have \e[0m\n\e[31m21 |\e[0m\
    \        \e[34m//  i*i + j*j + k*k = 3*x, x = (i + j + k)/3\e[0m\n\e[31m22 |\e\
    [0m        \e[34m//  \e[0m\n\e[31m23 |\e[0m        \e[34m// \e[0m\n\e[31m24 |\e\
    [0m        \e[34m// Let's start by getting all unique triplets (x, y, z) for which\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// x^2 + y^2 + z^2 = 3*x and x < y < z.\e[0m\n\
    \e[31m26 |\e[0m        \e[34m// Let's start by solving the following equation\
    \ for z in terms of x and y:\e[0m\n\e[31m27 |\e[0m        \e[34m// z^2 = 3*x -\
    \ x^2 - y^2\e[0m\n\e[31m28 |\e[0m        \e[34m// z = +-(sqrt(3*x - x^2 - y^2))\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// \e[0m\n\e[31m30 |\e[0m        \e[34m// Now,\
    \ notice that if we have a triplet (x, y, z), then the triplet (x, y + 1, z) is\
    \ also valid.\e[0m\n\e[31m31 |\e[0m        \e[34m// So we can just iterate through\
    \ all y starting from 2 and find all valid values of z for that y.\e[0m\n\e[31m32\
    \ |\e[0m        \e[34m// \e[0m\n\e[31m33 |\e[0m        \e[34m// Finally, let's\
    \ impose the condition x < y < z.\e[0m\n\e[31m34 |\e[0m        \e[34m// Let's\
    \ solve the following equation for x in terms of y and z:\e[0m\n\e[31m35 |\e[0m\
    \        \e[34m// x^2 = 3*x - y^2 - z^2\e[0m\n\e[31m36 |\e[0m        \e[34m//"
  stdout: ''
  timestamp: 1660028423
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val size = n.toInt\n    \
    \    val a = new Array[Long](size)\n        val b = new Array[Long](size)\n  \
    \      val c = new Array[Long](size)\n        val d = new Array[Long](size)\n\
    \        val e = new Array[Long](size)\n        val f = new Array[Long](size)\n\
    \        val g = new Array[Long](size)\n        val h = new Array[Long](size)\n\
    \        val i = new Array[Long](size)\n        val j = new Array[Long](size)\n\
    \        val k = new Array[Long](size)\n        for (x <- 0 until size) {\n  \
    \          a(x) = x + 1\n            b(x) = (x + 1) * (x + 1)\n            c(x)\
    \ = (x + 1) * (x + 1) - (x + 1)\n            d(x) = (x + 1) * (x + 1) - (x + 1)\
    \ + 1\n            e(x) = (x + 1) * (x + 1) - (x + 1) + 2\n            f(x) =\
    \ (x + 1) * (x + 1) - (x + 1) + 3\n            g(x) = (x + 1) * (x + 1) - (x +\
    \ 1) + 4\n            h(x) = (x + 1) * (x + 1) - (x + 1) + 5\n            i(x)\
    \ = (x + 1) * (x + 1) - (x + 1) + 6\n            j(x) = (x + 1) * (x + 1) - (x\
    \ + 1) + 7\n            k(x) = (x + 1) * (x + 1) - (x + 1) + 8\n        }\n  \
    \      (1 to size).map(x => d(x - 1) + e(x - 1) + f(x - 1)).filter(x => x % 3\
    \ == 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqunkdgaa.scala:43)\n\tat Problem.main(tmpqunkdgaa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // The first n - 1 values\
    \ are always evenly divisible by 3. \n        // The last value can be at most\
    \ 1 less than a multiple of 3.\n        // Therefore, the number of valid triples\
    \ is:\n        // (n - 1) choose 2 + (n - 2) choose 2 + ... + (n - 1) / 3 choose\
    \ 2\n        // = (n - 1) * (n - 2) / 2 * (n - 1) / 3\n        if (n < 3) 0\n\
    \        else (n - 1) * (n - 2) / 2 * (n - 1) / 3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9fa5p_p3.scala:24)\n\tat Problem.main(tmp9fa5p_p3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n\t\tvar lst = ListBuffer[Long]()\n\
    \t\tfor (i <- 1l to n) lst += i * i - i + 1\n\t\tvar sum = 0l\n\t\tfor (i <- 0\
    \ until lst.length; j <- i + 1 until lst.length; k <- j + 1 until lst.length)\n\
    \t\t\tif ((lst(i) + lst(j) + lst(k)) % 3 == 0) sum += 1\n\t\tsum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbfiqiazj.scala:21:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660028421
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        if (n <= 0) return 0\n  \
    \      // The value of a[i] = i * i - i + 1.\n        val prefixSum = Array.fill(n.toInt\
    \ + 1)(0)\n        for (i <- 1 to n.toInt) {\n            prefixSum(i) = prefixSum(i\
    \ - 1) + i * i - i + 1\n        }\n        // If a[i] + a[j] + a[k] is a multiple\
    \ of 3,\n        // a[i] + a[j] + a[k] = (a[i] + a[j]) + a[k] = prefixSum[j] -\
    \ prefixSum[i - 1] + a[k]\n        // 3 | (prefixSum[j] - prefixSum[i - 1] + a[k])\n\
    \        // 3 | (prefixSum[j] - prefixSum[i - 1])\n        // 3 | (prefixSum[j]\
    \ - prefixSum[i - 1] - a[k])\n        // This can be solved by double pointer.\n\
    \        // Be sure that i < j < k.\n        var maxTriples = 0\n        for (i\
    \ <- 1 to n.toInt - 2) {\n            for (j <- i + 1 to n.toInt - 1) {\n    \
    \            if ((prefixSum(j) - prefixSum(i - 1)) % 3 == 0) {\n             \
    \       maxTriples += 1\n                }\n            }\n        }\n       \
    \ maxTriples\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgfnst0q8.scala:40)\n\tat Problem.main(tmpgfnst0q8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var sum = 0L\n        var\
    \ total = 0L\n        var remainder = 0L\n        for (i <- 1 to n.toInt) {\n\
    \            remainder = i * i - i + 1\n            sum += remainder\n       \
    \     if (sum % 3 == 0) total += 1\n        }\n        total\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi7gx0s7.scala:26)\n\tat Problem.main(tmpwi7gx0s7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028424
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        def gcd(a : Long, b : Long)\
    \ : Long = {\n            if (b == 0) a else gcd(b, a % b)\n        }\n      \
    \  val k = (1L to n).foldLeft(1L)((b, a) => gcd(b, a))\n        (k % 3) match\
    \ {\n            case 0 => (n / k) * (n / k)\n            case 1 => (n / k) *\
    \ ((n / k) + 1) / 2\n            case 2 => ((n / k) + 1) * ((n / k) + 1) / 2\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg9ppgub7.scala:26)\n\tat Problem.main(tmpg9ppgub7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val nn = n.toInt\n      \
    \  val a = new Array[Int](nn)\n        for (i <- 1 to nn) {\n            a(i -\
    \ 1) = i * i - i + 1\n        }\n        var ans = 0\n        for (i <- 0 until\
    \ nn) {\n            for (j <- i + 1 until nn) {\n                for (k <- j\
    \ + 1 until nn) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) ans\
    \ += 1\n                }\n            }\n        }\n        ans\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        def isTriple(i : Long, j\
    \ : Long, k : Long) : Boolean = \n            (i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1) % 3 == 0 && i < j && j < k\n        var res = 0l\n        for\
    \ (i <- 1l to n) {\n            var cnt = 0l\n            for (j <- i + 1l to\
    \ n) {\n                for (k <- j + 1l to n) {\n                    if (isTriple(i,\
    \ j, k)) {\n                        // println(s\"$i, $j, $k\")\n            \
    \            cnt += 1\n                    }\n                }\n            }\n\
    \            res = max(res, cnt)\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmy6kj66d.scala:34)\n\tat Problem.main(tmpmy6kj66d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var counter = 0\n       \
    \ for (i <- 1l to n) {\n            for (j <- (i + 1) to n) {\n              \
    \  for (k <- (j + 1) to n) {\n                    if ((i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0) {\n                        counter += 1\n \
    \                   }\n                }\n            }\n        }\n        counter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val oneThird = n/3\n    \
    \    val twoThird = 2*n/3\n        val sumOneThird = (1l + oneThird)*oneThird/2\n\
    \        val sumTwoThird = (oneThird + 1l + twoThird)*(twoThird - oneThird)/2\n\
    \        val sumThird = (twoThird + 1l + n)*(n - twoThird)/2\n        sumOneThird*sumTwoThird\
    \ + sumOneThird*sumThird + sumTwoThird*sumThird\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk2ulqcww.scala:23)\n\tat Problem.main(tmpk2ulqcww.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n      //this function is just so\
    \ I can easily get the integer part of a division.\n      def myFloor(a : Double,\
    \ b : Double) : Double = {\n        val quotient = a / b\n        if(quotient\
    \ < 0)\n          (quotient - 1).toInt\n        else\n          quotient.toInt\n\
    \      }\n      def sumThirds(a : Long, b : Long, c : Long) : Long = {\n     \
    \   if(a % 3 == 0)\n          1\n        else if((a + b) % 3 == 0)\n         \
    \ 1\n        else if((a + c) % 3 == 0)\n          1\n        else if((b + c) %\
    \ 3 == 0)\n          1\n        else if((a + b + c) % 3 == 0)\n          1\n \
    \       else\n          0\n      }\n      //these are the helper functions to\
    \ get x and y values\n      def getY(a : Long, x : Long) : Long = {\n        myFloor((-3\
    \ * a + x * x + x) / 2.0, x)\n      }\n      def getX(a : Long, y : Long) : Long\
    \ = {\n        ((-3 * a + y * y + y) / 2).toInt\n      }\n      //the amount of\
    \ numbers that are multiplied by the number of numbers less than them to form\
    \ a multiple of 3\n      var c = 0\n      //iterate through all numbers from 1\
    \ to n\n      for(a <- 1l to n) {\n        //the third number is the smallest\
    \ number that can be combined with a and b to create a multiple of 3\n       \
    \ //so find the smallest such number, and iterate up to n.\n        val x : Long\
    \ = myFloor(sqrt(3 * a), 1)\n        //find the integer part of the y value\n\
    \        val y : Long = getY(a, x)\n        //add the number of multiples of 3\
    \ there are in the range [x, n]\n        c += ((n - x) / 3 + 1) * sumThirds(a,\
    \ x, y)\n      }\n      //return the counts\n      c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyx2mdktj.scala:39:15\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        myFloor((-\e[31m3\e[0m\
    \ * a + x * x + x) / \e[31m2.0\e[0m, x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyx2mdktj.scala:50:30\
    \ --------------------\e[0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mx\e\
    [0m : \e[35mLong\e[0m = myFloor(sqrt(\e[31m3\e[0m * a), \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Found:    Double\n\e[31m   |\e[0m                  \
    \     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyx2mdktj.scala:54:10\
    \ ------------------------\e[0m\e[0m\n\e[31m54 |\e[0m        c += ((n - x) / \e\
    [31m3\e[0m + \e[31m1\e[0m) * sumThirds(a, x, y)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^\e[0m\n\e[31m   |\e[0m        value += is not a member of Int - did you\
    \ mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We look at all pairs of\
    \ indices, \n        // and see how many pairs of indices can we add to i and\
    \ j to make the triple valid.\n        // If we have n integers, and we fix a\
    \ pair of indices, there are n - 3 choose 3\n        // ways to do that.\n   \
    \     // However, for some pairs of indices, we can have more than one valid triple.\n\
    \        // For example, the pair (1, 3) is valid for the triple (1, 3, 7), and\n\
    \        // it is also valid for the triple (1, 3, 13).\n        // Therefore,\
    \ we look at pairs of indices, and see how many pairs of indices\n        // can\
    \ we add to them.\n        val isValid = Array.fill(n.toInt)(true)\n        val\
    \ pairs = ArrayBuffer[Tuple2[Int, Int]]()\n        for (i <- 0 until n.toInt)\
    \ {\n            for (j <- i + 1 until n.toInt) {\n                if ((i * i\
    \ - i + 1 + j * j - j + 1) % 3 == 0) {\n                    pairs += ((i, j))\n\
    \                    isValid(i) = false\n                    isValid(j) = false\n\
    \                }\n            }\n        }\n        val validTriples = ArrayBuffer[Tuple3[Int,\
    \ Int, Int]]()\n        for (i <- 0 until n.toInt) {\n            if (isValid(i))\
    \ {\n                for (pair <- pairs) {\n                    if ((i * i - i\
    \ + 1 + pair._1 * pair._1 - pair._1 + 1 + pair._2 * pair._2 - pair._2 + 1) % 3\
    \ == 0) {\n                        validTriples += ((i, pair._1, pair._2))\n \
    \                   }\n                }\n            }\n        }\n        val\
    \ results = ArrayBuffer[Tuple3[Int, Int, Int]]()\n        for (i <- 0 until n.toInt)\
    \ {\n            for (j <- i + 1 until n.toInt) {\n                for (k <- j\
    \ + 1 until n.toInt) {\n                    if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) {\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt8g0ycxx.scala:59:0 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt8g0ycxx.scala:46:8\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n.toInt) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m \
    \  |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m47\
    \ |\e[0m            \e[33mfor\e[0m (j <- i + \e[31m1\e[0m until n.toInt) {\n\e\
    [31m48 |\e[0m                \e[33mfor\e[0m (k <- j + \e[31m1\e[0m until n.toInt)\
    \ {\n\e[31m49 |\e[0m                    \e[33mif\e[0m ((i * i - i + \e[31m1\e\
    [0m + j * j - j + \e[31m1\e[0m + k * k - k + \e[31m1\e[0m) % \e[31m3\e[0m == \e\
    [31m0\e[0m) {\n\e[31m50 |\e[0m    }\n\e[31m51 |\e[0m    \e[33mdef\e[0m \e[36mmain\e\
    [0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m52 |\e[0m\
    \    assert(getMaxTriples((\e[31m5l\e[0m)) == (\e[31m1l\e[0m));\n\e[31m53 |\e\
    [0m    assert(getMaxTriples((\e[31m6l\e[0m)) == (\e[31m4l\e[0m));\n\e[31m54 |\e\
    [0m    assert(getMaxTriples((\e[31m10l\e[0m)) == (\e[31m36l\e[0m));\n\e[31m55\
    \ |\e[0m    assert(getMaxTriples((\e[31m100l\e[0m)) == (\e[31m53361l\e[0m));\n\
    \e[31m56 |\e[0m    }\n\e[31m57 |\e[0m}\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1l to n).map(x =>\
    \ x * x - x + 1).toList\n        val c = ArrayBuffer[(Long, Long, Long)]()\n \
    \       for (i <- 0 until a.length - 2) {\n            for (j <- i + 1 until a.length\
    \ - 1) {\n                for (k <- j + 1 until a.length) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) c += ((a(i), a(j), a(k)))\n          \
    \      }\n            }\n        }\n        c.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028426
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        val\
    \ a = Array.tabulate(n.toInt)(i => i * i - i + 1)\n        for (i <- 0 until n.toInt)\
    \ {\n            for (j <- i + 1 until n.toInt) {\n                for (k <- j\
    \ + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0)\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph2b6u936.scala:29)\n\tat Problem.main(tmph2b6u936.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // The idea here is that\
    \ we want to find triples where the sum is\n        // equal to 3(n - 1) + 1.\n\
    \        // Which means that we must find triples where we have\n        // the\
    \ sum of the first element plus the sum of the last elements\n        // equal\
    \ to 3(n - 1) + 1 - the first element.\n        // So we can use a greedy algorithm\
    \ to find the number of pairs\n        // whose sum is divisible by 3.\n     \
    \   // See the following for more:\n        // https://math.stackexchange.com/questions/2052179/how-to-find-all-possible-triples-in-an-array-whose-sum-is-divisible-by-3\n\
    \        // I will call the sum of the last elements x, and each triple\n    \
    \    // is of the form (a, b, x - a - b) where a < b and a, b, x mod 3 = 0.\n\
    \        // The sum of the last elements is determined by the last element.\n\
    \        // For example, if n = 4, then the last element is (n - 1)^2 - (n - 1)\
    \ + 1\n        // = 3, and the sum of the last elements is x = (3, 7, 13).\n \
    \       // So we can find the number of triples by calling getMaxTriples(n - 1)\n\
    \        // and then greedily finding the number of valid triples with the last\n\
    \        // element x.\n        // let m = n - 1\n        // a = [1, 3, 7, 13,\
    \ 21]\n        // let m = 4\n        // x = 21\n        // sum of the last elements\
    \ = 3 + 7 + 13 = 23\n        // the sum of the three elements = 23 - (1 + 3 +\
    \ 7) = 12\n        //\n        // a = [1, 3, 7, 13]\n        // let m = 3\n  \
    \      // x = 13\n        // sum of the last elements = 3 + 7 = 10\n        //\
    \ the sum of the three elements = 10 - (1 + 3) = 6\n        // the sum of the\
    \ three elements = 10 - (1 + 7) = 2\n        //\n        // a = [1, 3]\n     \
    \   // let m =\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp45_r4vl_.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// The\
    \ idea here is that we want to find triples where the sum is\e[0m\n\e[31m16 |\e\
    [0m        \e[34m// equal to 3(n - 1) + 1.\e[0m\n\e[31m17 |\e[0m        \e[34m//\
    \ Which means that we must find triples where we have\e[0m\n\e[31m18 |\e[0m  \
    \      \e[34m// the sum of the first element plus the sum of the last elements\e\
    [0m\n\e[31m19 |\e[0m        \e[34m// equal to 3(n - 1) + 1 - the first element.\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// So we can use a greedy algorithm to find\
    \ the number of pairs\e[0m\n\e[31m21 |\e[0m        \e[34m// whose sum is divisible\
    \ by 3.\e[0m\n\e[31m22 |\e[0m        \e[34m// See the following for more:\e[0m\n\
    \e[31m23 |\e[0m        \e[34m// https://math.stackexchange.com/questions/2052179/how-to-find-all-possible-triples-in-an-array-whose-sum-is-divisible-by-3\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// I will call the sum of the last elements\
    \ x, and each triple\e[0m\n\e[31m25 |\e[0m        \e[34m// is of the form (a,\
    \ b, x - a - b) where a < b and a, b, x mod 3 = 0.\e[0m\n\e[31m26 |\e[0m     \
    \   \e[34m// The sum of the last elements is determined by the last element.\e\
    [0m\n\e[31m27 |\e[0m        \e[34m// For example, if n = 4, then the last element\
    \ is (n - 1)^2 - (n - 1) + 1\e[0m\n\e[31m28 |\e[0m        \e[34m// = 3, and the\
    \ sum of the last elements is x = (3, 7, 13).\e[0m\n\e[31m29 |\e[0m        \e\
    [34m// So we can find the number of triples by calling getMaxTriples(n - 1)\e\
    [0m\n\e[31m30 |\e[0m        \e[34m// and then greedily finding the number of valid\
    \ triples with the last\e[0m\n\e[31m31 |\e[0m        \e[34m// element x.\e[0m\n\
    \e[31m32 |\e[0m        \e[34m// let m = n - 1\e[0m\n\e[31m33 |\e[0m        \e\
    [34m// a = [1, 3, 7, 13, 21]\e[0m\n\e[31m34 |\e[0m        \e[34m// "
  stdout: ''
  timestamp: 1660028424
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = 1L\n        val b\
    \ = (n * n - n + 1L)\n        val c = (n * n + n + 1L)\n        (n * (n - 1) *\
    \ (n - 2) / 6) - ((b - a) * (c - b) / 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ykwu147.scala:21)\n\tat Problem.main(tmp5ykwu147.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val squares = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) squares(i - 1) = i * i\n        val evens = new\
    \ Array[Long]((n - 1).toInt)\n        val odds = new Array[Long]((n - 1).toInt)\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) evens(i - 2) =\
    \ squares(i - 1) - i + 1\n            else odds(i - 2) = squares(i - 1) - i +\
    \ 1\n        }\n        // n is odd, n / 2 is even, n / 2 + 1 is odd\n       \
    \ var result = evens.filter(x => x % 3 == 0).sum\n        result += odds.filter(x\
    \ => x % 3 == 0).sum\n        val evenSize = evens.length\n        val oddSize\
    \ = odds.length\n        if (evenSize >= 2) {\n            for (i <- 0 until evenSize\
    \ - 1) {\n                val t = evens(i)\n                val target = 3 - t\
    \ % 3\n                result += bSearch(evens, i + 1, evenSize - 1, target -\
    \ t)\n            }\n        }\n        if (oddSize >= 2) {\n            for (i\
    \ <- 0 until oddSize - 1) {\n                val t = odds(i)\n               \
    \ val target = 3 - t % 3\n                result += bSearch(odds, i + 1, oddSize\
    \ - 1, target - t)\n            }\n        }\n        if (evenSize >= 1 && oddSize\
    \ >= 1) {\n            for (i <- 0 until evenSize) {\n                val t =\
    \ evens(i)\n                val target = 3 - t % 3\n                result +=\
    \ bSearch(odds, 0, oddSize - 1, target - t)\n            }\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7latjuxh.scala:32:23 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                result += bSearch(evens, i + \e[31m1\e\
    [0m, evenSize - \e[31m1\e[0m, target - t)\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of\
    \ Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7latjuxh.scala:32:26\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                result +=\
    \ bSearch(evens, i + \e[31m1\e[0m, evenSize - \e[31m1\e[0m, target - t)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: bSearch\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7latjuxh.scala:39:23 ------------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m                result += bSearch(odds, i + \e[31m1\e[0m,\
    \ oddSize - \e[31m1\e[0m, target - t)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Long - did you\
    \ mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7latjuxh.scala:39:26\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m                result +=\
    \ bSearch(odds, i + \e[31m1\e[0m, oddSize - \e[31m1\e[0m, target - t)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: bSearch\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7latjuxh.scala:46:23 ------------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m                result += bSearch(odds, \e[31m0\e[0m, oddSize\
    \ - \e[31m1\e[0m, target - t)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Long - did you\
    \ mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7latjuxh.scala:46:26\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m                result +=\
    \ bSearch(odds, \e[31m0\e[0m, oddSize - \e[31m1\e[0m, target - t)\n\e[31m\e[31m\
    \   |\e[0m                "
  stdout: ''
  timestamp: 1660028432
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var arr = new Array[Long](n.toInt);\n\
    \        var count = 0L;\n        for (i <- 0 until n.toInt) {\n            arr(i)\
    \ = (i + 1L) * (i + 1L) - (i + 1L) + 1L;\n            // println(arr(i));\n  \
    \      }\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until\
    \ n.toInt) {\n                for (k <- j + 1 until n.toInt) {\n             \
    \       if ((arr(i) + arr(j) + arr(k)) % 3 == 0) {\n                        count\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return count;\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // for i, j, k, if \n   \
    \     // \ti = 0, i^2 - i + 1 = 1\n        // \tj = 1, j^2 - j + 1 = 3\n     \
    \   // \tk = 2, k^2 - k + 1 = 7\n        // then (1, 3, 7) will always be a possible\
    \ triplet\n        // we can see that j = i + 1 and k = j + 1 will always be a\
    \ valid triplet\n        // by getting all possible a[i], we can see that there\
    \ are only 2 possible a[i]\n        // the first a[i] is 1, and the last a[i]\
    \ is i^2 - i + 1 where i^2 - i + 1 is divisible by 3\n        // say i^2 - i +\
    \ 1 = 3l, then i = 2, 3 - 2 + 1 = 2\n        // say i^2 - i + 1 = 6l, then i =\
    \ 3, 9 - 3 + 1 = 7\n        // say i^2 - i + 1 = 9l, then i = 4, 16 - 4 + 1 =\
    \ 13\n        // say i^2 - i + 1 = 12l, then i = 5, 25 - 5 + 1 = 21\n        //\
    \ say i^2 - i + 1 = 15l, then i = 6, 36 - 6 + 1 = 31\n        // say i^2 - i +\
    \ 1 = 18l, then i = 7, 49 - 7 + 1 = 43\n        // say i^2 - i + 1 = 21l, then\
    \ i = 8, 64 - 8 + 1 = 57\n        // say i^2 - i + 1 = 24l, then i = 9, 81 - 9\
    \ + 1 = 73\n        // say i^2 - i + 1 = 27l, then i = 10, 100 - 10 + 1 = 91\n\
    \        // so there are 10 possible values of i that is divisible by 3\n    \
    \    // they are (2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n        // thus the answer\
    \ is 10 * 8 / 2 = 40\n        val answer = (1 to (n.toInt - 2)).filter(i => (i\
    \ * i - i + 1) % 3 == 0).length\n        answer.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppd_y5avl.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660028430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val v : Array[Long] = new\
    \ Array[Long](n.toInt + 1)\n        v(1) = 1\n        for (i <- 2 to n.toInt)\
    \ v(i) = i * i - i + 1\n        (1 until n.toInt - 1).map(i => {\n           \
    \ var s = 0\n            for (j <- i + 1 until n.toInt) {\n                val\
    \ x = v(i) + v(j)\n                val b = BinarySearch.lowerBound(v, j + 1, n.toInt,\
    \ x)\n                s += b - j - 1\n            }\n            s\n        }).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplz51e7io.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mb\e[0m = BinarySearch.lowerBound(v,\
    \ j + \e[31m1\e[0m, n.toInt, x)\n\e[31m\e[31m   |\e[0m                       \
    \ ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: BinarySearch\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028429
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var max = Long.MinValue\n        for (i <- 1 to n.toInt) {\n\
    \            for (j <- i + 1 to n.toInt) {\n                for (k <- j + 1 to\
    \ n.toInt) {\n                    if ((a(i - 1) + a(j - 1) + a(k - 1)) % 3 ==\
    \ 0) {\n                        max = max max (a(i - 1) + a(j - 1) + a(k - 1))\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgttus83k.scala:32)\n\tat Problem.main(tmpgttus83k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbo0mm86m.scala:18)\n\tat Problem.main(tmpbo0mm86m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We have\n        // a[i]\
    \ = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n\
    \        // Since (i + j + k) * (i + j + k) is a multiple of 3, \n        // (i\
    \ + j + k) * (i + j + k) - (i + j + k) is also a multiple of 3\n        // Therefore,\
    \ a[i] + a[j] + a[k] is a multiple of 3 if and only if (i + j + k) is a multiple\
    \ of 3\n        // or in other words, we want a[i] + a[j] + a[k] to be a multiple\
    \ of 3.\n        // That means, we want k to be a multiple of 3 - (i + j) mod\
    \ 3.\n        // If the number of such k is at least 2, then we have a possible\
    \ valid triple.\n        // We have to find all i and j where i < j and (i + j)\
    \ mod 3 is a constant c.\n        // Let's find all such i and j for a fixed c\
    \ first.\n        // We have (i + j) mod 3 = c.\n        // Since 0 \u2264 i <\
    \ j < n, we have 0 \u2264 j < n and i = c - j mod 3.\n        // Since i < j,\
    \ we have c - j mod 3 < j.\n        // In particular, we have j > c - j mod 3.\n\
    \        // That means, we have\n        // j mod 3 \u2265 c\n        // and\n\
    \        // j mod 3 \u2264 c + 2\n        // Therefore, j mod 3 = c or j mod 3\
    \ = c + 1 or j mod 3 = c + 2.\n        // If j mod 3 = c + 2, then\n        //\
    \ j = 3 * x + c + 2\n        // where x is a positive integer.\n        // Therefore,\
    \ we have\n        // i = c - j mod 3 = c - (c + 2) mod 3 = c - 2 mod 3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiw2ih8a3.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ have\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] = i * i - i + 1\e[0m\n\e[31m17\
    \ |\e[0m        \e[34m// a[i] + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1\e[0m\n\e[31m18 |\e[0m        \e[34m// = (i + j + k) * (i + j +\
    \ k) - (i + j + k) + 3\e[0m\n\e[31m19 |\e[0m        \e[34m// Since (i + j + k)\
    \ * (i + j + k) is a multiple of 3, \e[0m\n\e[31m20 |\e[0m        \e[34m// (i\
    \ + j + k) * (i + j + k) - (i + j + k) is also a multiple of 3\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// Therefore, a[i] + a[j] + a[k] is a multiple of 3 if and\
    \ only if (i + j + k) is a multiple of 3\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ or in other words, we want a[i] + a[j] + a[k] to be a multiple of 3.\e[0m\n\e\
    [31m23 |\e[0m        \e[34m// That means, we want k to be a multiple of 3 - (i\
    \ + j) mod 3.\e[0m\n\e[31m24 |\e[0m        \e[34m// If the number of such k is\
    \ at least 2, then we have a possible valid triple.\e[0m\n\e[31m25 |\e[0m    \
    \    \e[34m// We have to find all i and j where i < j and (i + j) mod 3 is a constant\
    \ c.\e[0m\n\e[31m26 |\e[0m        \e[34m// Let's find all such i and j for a fixed\
    \ c first.\e[0m\n\e[31m27 |\e[0m        \e[34m// We have (i + j) mod 3 = c.\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// Since 0 \u2264 i < j < n, we have 0 \u2264\
    \ j < n and i = c - j mod 3.\e[0m\n\e[31m29 |\e[0m        \e[34m// Since i < j,\
    \ we have c - j mod 3 < j.\e[0m\n\e[31m30 |\e[0m        \e[34m// In particular,\
    \ we have j > c - j mod 3.\e[0m\n\e[31m31 |\e[0m        \e[34m// That means, we\
    \ have\e[0m\n\e[31m32 |\e[0m        \e[34m// j mod 3 \u2265 c\e[0m\n\e[31m33 |\e\
    [0m        \e[34m// and\e[0m\n\e[31m34 |\e[0m        \e[34m// j mod 3 \u2264 c\
    \ + 2\e[0m\n\e[31m35 |\e[0m        \e[34m// Therefore, j mod 3 = c or j mod 3\
    \ = c + 1 or j mod 3 ="
  stdout: ''
  timestamp: 1660028433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // a[i] = i * i - i + 1\n\
    \        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1\
    \ + 3 * k * k - 3 * k + 1\n        // = 3 * (i^2 + j^2 + k^2) - 3 * (i + j + k)\
    \ + 3\n        // = 3 * (i^2 + j^2 + k^2) - 3 * (i + j + k) + 3\n        // =\
    \ 3 * (i + j + k) (i + j + k - 1)\n        // a[i] + a[j] + a[k] is a multiple\
    \ of 3 iff (i + j + k) is a multiple of 3, \n        // which can be satisfied\
    \ only if all of i, j, k are identical, \n        // and thus j = k = i, making\
    \ the value of the triple 1.\n        // Thus, return n - 1 for n > 2.\n     \
    \   if (n > 2) n - 1 else n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp11wkp67q.scala:27)\n\tat Problem.main(tmp11wkp67q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = new Array[Long](n.toInt)\n\
    \        var count = 0l\n        for (i <- 1 to n.toInt) {\n            a(i -\
    \ 1) = (i * i - i + 1) % 3\n            //println(a(i - 1))\n        }\n     \
    \   for (i <- 0 to n.toInt - 3) {\n            if (a(i) == 0) count += 1\n   \
    \         for (j <- i + 1 to n.toInt - 2) {\n                if (a(i) + a(j) ==\
    \ 3) count += 1\n                for (k <- j + 1 to n.toInt - 1) {\n         \
    \           if (a(i) + a(j) + a(k) == 0) count += 1\n                }\n     \
    \       }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkkfjgxrv.scala:34)\n\tat Problem.main(tmpkkfjgxrv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028435
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Make a list of length\
    \ n.\n        val list = List.fill(n.toInt)(1)\n        // Fill the list with\
    \ values of ai.\n        var list2 = list.zipWithIndex.map(p => p._1 * p._2 *\
    \ p._2)\n        list2 = list2.zipWithIndex.map(p => p._1 + p._2)\n        //\
    \ Filter for all possible triplets, only retain those that are multiples of 3.\n\
    \        val triplets = list2.combinations(3).toList.filter(l => l.sum % 3 ==\
    \ 0)\n        // Return the number of triplets.\n        triplets.length\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028436
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt\
    \ + 1)\n        for (i <- 1 to n.toInt) {\n            a(i) = i * i - i + 1\n\
    \        }\n        a(1) = -1\n        a(0) = -1\n        var total = 0l\n   \
    \     for (i <- 1 to n.toInt - 2) {\n            for (j <- i + 1 to n.toInt -\
    \ 1) {\n                for (k <- j + 1 to n.toInt) {\n                    if\
    \ ((a(i) + a(j) + a(k)) % 3 == 0) total += 1\n                }\n            }\n\
    \        }\n        total\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgzw19xib.scala:32)\n\tat Problem.main(tmpgzw19xib.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028436
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val modulo = 3l\n       \
    \ val moduloNeg = modulo - 1l\n        val indices = (1l to n).toList\n      \
    \  val s = new Solver()\n        val a = indices.map(i => i * i - i + 1l)\n  \
    \      s.solve(n, modulo, moduloNeg, a)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ihw7fpo.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = \e[33mnew\e[0m\
    \ \e[35mSolver\e[0m()\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: type Solver\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var result = 0l\n       \
    \ var result2 = 0l\n        var a = new Array[Long](n.toInt)\n        for (i <-\
    \ 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n            //println(a(i\
    \ - 1))\n        }\n        for (i <- 0 to n.toInt - 3) {\n            for (j\
    \ <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt - 1)\
    \ {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n              \
    \          //println(a(i) + \" \" + a(j) + \" \" + a(k))\n                   \
    \     result += 1\n                    }\n                }\n            }\n \
    \       }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Given a list of triples,\
    \ return whether the triple is valid.\n        def isValid(triple : (Long, Long,\
    \ Long)) : Boolean = {\n            val (a, b, c) = triple\n            a + b\
    \ + c % 3 == 0\n        }\n        // Given a pair and a list of values, return\
    \ the list of all triples that can be made \n        // with the pair and a value.\n\
    \        def appendAll(pair : (Long, Long), vals : ArrayBuffer[Long]) : ArrayBuffer[(Long,\
    \ Long, Long)] = {\n            var buffer = ArrayBuffer[(Long, Long, Long)]()\n\
    \            for (v <- vals) {\n                buffer += (pair._1, pair._2, v)\n\
    \            }\n            buffer\n        }\n        // Given a list of triples,\
    \ create a list of all valid triples.\n        def filterValid(triples : ArrayBuffer[(Long,\
    \ Long, Long)]) : ArrayBuffer[(Long, Long, Long)] = {\n            var buffer\
    \ = ArrayBuffer[(Long, Long, Long)]()\n            for (triple <- triples) {\n\
    \                if (isValid(triple)) {\n                    buffer += triple\n\
    \                }\n            }\n            buffer\n        }\n        // Given\
    \ two lists of values, create a list of all pairs of the two lists.\n        def\
    \ combineLists(l1 : ArrayBuffer[Long], l2 : ArrayBuffer[Long]) : ArrayBuffer[(Long,\
    \ Long)] = {\n            var buffer = ArrayBuffer[(Long, Long)]()\n         \
    \   for (v1 <- l1) {\n                for (v2 <- l2) {\n                    buffer\
    \ += (v1, v2)\n                }\n            }\n            buffer\n        }\n\
    \        // Given a list of pairs, create a list of all pairs that are valid.\n\
    \        def filterValidPairs(pairs : ArrayBuffer[(Long, Long)]) : ArrayBuffer[(Long,\
    \ Long)] = {\n            var buffer = ArrayBuffer[(Long, Long)]()\n         \
    \   for (pair <- pairs) {\n                if (pair._1 < pair._2) {\n        \
    \            buffer += pair\n                }\n            }\n            buffer\n\
    \        }\n        // Given a list of values\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwuq2581.scala:25:32\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                buffer += (pair._1,\
    \ pair._2, v)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Found:    Long\n\e[31m   |\e[0m      \
    \                     Required: (Long, Long, Long)\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphwuq2581.scala:25:41 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                buffer += (pair._1, pair._2, v)\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                    Found:    Long\n\e[31m   |\e[0m         \
    \                           Required: (Long, Long, Long)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwuq2581.scala:25:45 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                buffer += (pair._1, pair._2, v)\n\e[31m\e\
    [31m   |\e[0m                                             ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    (\e[1m\e[31mv\e[0m \e\
    [1m\e[31m:\e[0m Long)\n\e[31m   |\e[0m                                       \
    \     Required: (\e[1m\e[32mLong\e[0m\e[1m\e[32m,\e[0m \e[1m\e[32mLong\e[0m\e\
    [1m\e[32m,\e[0m Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwuq2581.scala:44:31\
    \ --------------------\e[0m\e[0m\n\e[31m44 |\e[0m                    buffer +=\
    \ (v1, v2)\n\e[31m\e[31m   |\e[0m                               ^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    (\e[1m\e[31mv1\e[0m\e[1m\e\
    [31m \e[0m\e[1m\e[31m:\e[0m Long)\n\e[31m   |\e[0m                           \
    \    Required: (\e[1m\e[32mLong\e[0m\e[1m\e[32m,\e[0m Long)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwuq2581.scala:44:35 --------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0"
  stdout: ''
  timestamp: 1660028436
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val mod3 = scala.collection.mutable.Map[Long,\
    \ Long]()\n        for (i <- (1 to n.toInt).reverse) {\n            val rem =\
    \ ((i * i - i + 1) % 3 + 3) % 3\n            mod3.put(rem, mod3.getOrElse(rem,\
    \ 0l) + 1)\n        }\n        var ret = mod3.getOrElse(0, 0l) * (mod3.getOrElse(0,\
    \ 0l) - 1) * (mod3.getOrElse(0, 0l) - 2) / 6\n        ret += mod3.getOrElse(1,\
    \ 0l) * mod3.getOrElse(2, 0l) * (mod3.getOrElse(1, 0l) - 1) / 2\n        ret +=\
    \ mod3.getOrElse(1, 0l) * mod3.getOrElse(2, 0l) * (mod3.getOrElse(2, 0l) - 1)\
    \ / 2\n        ret\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfyluxs7b.scala:26)\n\tat Problem.main(tmpfyluxs7b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028436
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val sum = n*(n+1)/2\n   \
    \     sum - sum % 3\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprf99cly8.scala:19)\n\tat Problem.main(tmprf99cly8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028435
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1 to n.toInt).map(i\
    \ => i * i - i + 1).toList\n        val m = a.toArray\n        val sum = m.indices.map(i\
    \ => m.indices.drop(i + 1).map(j => m.indices.drop(j + 1).map(k => (i, j, k)))).flatten.flatten.filter(\n\
    \            p => (m(p._1) + m(p._2) + m(p._3)) % 3 == 0\n        ).size\n   \
    \     sum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028437
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        if (n < 3) 0l\n        else\
    \ {\n            val a = Array.fill(n.toInt)(0l)\n            for (i <- 0 until\
    \ n.toInt) {\n                a(i) = i * i - i + 1\n            }\n          \
    \  val count = Array.fill(n.toInt)(0l)\n            for (i <- n.toInt - 1 to 2\
    \ by -1) {\n                for (j <- i - 1 to 1 by -1) {\n                  \
    \  for (k <- j - 1 to 0 by -1) {\n                        if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) count(i) += 1\n                    }\n                }\n        \
    \    }\n            count.max\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo56oez7_.scala:33)\n\tat Problem.main(tmpo56oez7_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028437
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val arr = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) arr(i) = i * i - i + 1\n        var res =\
    \ 0l\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until\
    \ n.toInt) {\n                for (k <- j + 1 until n.toInt) {\n             \
    \       if ((arr(i) + arr(j) + arr(k)) % 3 == 0) res += 1\n                }\n\
    \            }\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphm1af9f1.scala:28)\n\tat Problem.main(tmphm1af9f1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028437
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        var\
    \ ret = 0l\n        for (i <- 1l to n) {\n            var a1 = i * i - i + 1\n\
    \            if (a1 % 3 == 0) count += 1\n            var a2 = (i + 1) * (i +\
    \ 1) - (i + 1) + 1\n            if (a2 % 3 == 0) count += 1\n            var a3\
    \ = (i + 2) * (i + 2) - (i + 2) + 1\n            if (a3 % 3 == 0) count += 1\n\
    \            ret += count\n            count -= 3\n        }\n        ret\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjk4rq78t.scala:30)\n\tat Problem.main(tmpjk4rq78t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028438
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        if (n < 3) {\n          \
    \  return 0\n        }\n        if (n == 3) {\n            return 1\n        }\n\
    \        if (n == 4) {\n            return 3\n        }\n        val k = ceil(sqrt(n)).toLong\n\
    \        var result = (k - 2l) * (k - 1l) / 2l\n        result += getMaxTriples(n\
    \ - k)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmbhwhg6t.scala:31)\n\tat Problem.main(tmpmbhwhg6t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Define the possible values\
    \ for a[i], a[j], a[k].\n        // Let d[i] = i * i - i + 1\n        // Since\
    \ 1 \u2264 i \u2264 n, we get 1 \u2264 d[i] \u2264 n * n - n + 1.\n        //\
    \ Suppose d[i] + d[j] + d[k] \u2261 0 (mod 3)\n        // Since 0 \u2264 d[i]\
    \ \u2264 n * n - n + 1, d[i] % 3 = 0, 1, or 2.\n        // d[i] % 3 = 0: d[j]\
    \ % 3 = 1, d[k] % 3 = 2\n        // d[i] % 3 = 1: d[j] % 3 = 2, d[k] % 3 = 0\n\
    \        // d[i] % 3 = 2: d[j] % 3 = 0, d[k] % 3 = 1\n        // Assume 1 \u2264\
    \ i < j < k \u2264 n\n        // If d[i] % 3 = 0, d[i + 1] % 3 = 1, d[i + 2] %\
    \ 3 = 2, ..., d[k - 2] % 3 = 2, d[k - 1] % 3 = 0, d[k] % 3 = 1.\n        // If\
    \ d[i] % 3 = 1, d[i + 1] % 3 = 2, d[i + 2] % 3 = 0, ..., d[k - 2] % 3 = 0, d[k\
    \ - 1] % 3 = 1, d[k] % 3 = 2.\n        // If d[i] % 3 = 2, d[i + 1] % 3 = 0, d[i\
    \ + 2] % 3 = 1, ..., d[k - 2] % 3 = 1, d[k - 1] % 3 = 2, d[k] % 3 = 0.\n     \
    \   // Assume 1 \u2264 i < j < k \u2264 n\n        // If i = 1, k = n, and d[i]\
    \ % 3 = 0, d[j] % 3 = 1, d[k] % 3 = 2, then the triple (d[i], d[j], d[k]) is valid.\n\
    \        // If i = 1, k = n, and\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4ghd3lk.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// Define\
    \ the possible values for a[i], a[j], a[k].\e[0m\n\e[31m16 |\e[0m        \e[34m//\
    \ Let d[i] = i * i - i + 1\e[0m\n\e[31m17 |\e[0m        \e[34m// Since 1 \u2264\
    \ i \u2264 n, we get 1 \u2264 d[i] \u2264 n * n - n + 1.\e[0m\n\e[31m18 |\e[0m\
    \        \e[34m// Suppose d[i] + d[j] + d[k] \u2261 0 (mod 3)\e[0m\n\e[31m19 |\e\
    [0m        \e[34m// Since 0 \u2264 d[i] \u2264 n * n - n + 1, d[i] % 3 = 0, 1,\
    \ or 2.\e[0m\n\e[31m20 |\e[0m        \e[34m// d[i] % 3 = 0: d[j] % 3 = 1, d[k]\
    \ % 3 = 2\e[0m\n\e[31m21 |\e[0m        \e[34m// d[i] % 3 = 1: d[j] % 3 = 2, d[k]\
    \ % 3 = 0\e[0m\n\e[31m22 |\e[0m        \e[34m// d[i] % 3 = 2: d[j] % 3 = 0, d[k]\
    \ % 3 = 1\e[0m\n\e[31m23 |\e[0m        \e[34m// Assume 1 \u2264 i < j < k \u2264\
    \ n\e[0m\n\e[31m24 |\e[0m        \e[34m// If d[i] % 3 = 0, d[i + 1] % 3 = 1, d[i\
    \ + 2] % 3 = 2, ..., d[k - 2] % 3 = 2, d[k - 1] % 3 = 0, d[k] % 3 = 1.\e[0m\n\e\
    [31m25 |\e[0m        \e[34m// If d[i] % 3 = 1, d[i + 1] % 3 = 2, d[i + 2] % 3\
    \ = 0, ..., d[k - 2] % 3 = 0, d[k - 1] % 3 = 1, d[k] % 3 = 2.\e[0m\n\e[31m26 |\e\
    [0m        \e[34m// If d[i] % 3 = 2, d[i + 1] % 3 = 0, d[i + 2] % 3 = 1, ...,\
    \ d[k - 2] % 3 = 1, d[k - 1] % 3 = 2, d[k] % 3 = 0.\e[0m\n\e[31m27 |\e[0m    \
    \    \e[34m// Assume 1 \u2264 i < j < k \u2264 n\e[0m\n\e[31m28 |\e[0m       \
    \ \e[34m// If i = 1, k = n, and d[i] % 3 = 0, d[j] % 3 = 1, d[k] % 3 = 2, then\
    \ the triple (d[i], d[j], d[k]) is valid.\e[0m\n\e[31m29 |\e[0m        \e[34m//\
    \ If i = 1, k = n, and\e[0m\n\e[31m30 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028438
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var res = 0\n        for\
    \ (i <- 0 until n.toInt) for (j <- i + 1 until n.toInt) for (k <- j + 1 until\
    \ n.toInt) {\n            if ((1l + (i + 1) * (i + 1) - (i + 1) + 1 + (j + 1)\
    \ * (j + 1) - (j + 1) + 1 + (k + 1) * (k + 1) - (k + 1) + 1) % 3 == 0) res +=\
    \ 1\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8baq07xf.scala:22)\n\tat Problem.main(tmp8baq07xf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        def createSequence(n : Long)\
    \ : List[Long] = {\n            val b = new ListBuffer[Long]\n            for\
    \ (i <- 1l to n) {\n                b += i * i - i + 1\n            }\n      \
    \      b.toList\n        }\n        def sum3(i : Long, j : Long, k : Long) : Boolean\
    \ = {\n            (i + j + k) % 3 == 0\n        }\n        def count(tuple :\
    \ (List[Long], Long)) : Long = {\n            val (list, k) = tuple\n        \
    \    val (head, tail) = list.splitAt(k.toInt)\n            val triplets = for\
    \ (i <- head; j <- tail if sum3(i, j, head(k.toInt - 1))) yield (i, j, head(k.toInt\
    \ - 1))\n            triplets.size\n        }\n        val list = createSequence(n)\n\
    \        val m = (for (i <- 1l to n) yield count((list, i))).max\n        m\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm673_q18.scala:36)\n\tat Problem.main(tmpm673_q18.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028443
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1l to n).map(x =>\
    \ x * x - x + 1l).toArray\n        var dp = new Array[Long](3)\n        for (i\
    \ <- a.indices) {\n            val b = new Array[Long](3)\n            for (j\
    \ <- 0 until 3) b(j) = dp(j)\n            for (j <- 0 until 3) {\n           \
    \     if (a(i) % 3 == j) b(j) += dp(3 - j)\n                else b(j) += dp(j)\n\
    \            }\n            dp = b\n        }\n        return dp(0)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length\
    \ 3\n\tat Problem$.getMaxTriples$$anonfun$1$$anonfun$2(tmpn2f9ifsa.scala:21)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.getMaxTriples$$anonfun$1(tmpn2f9ifsa.scala:23)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.getMaxTriples(tmpn2f9ifsa.scala:25)\n\
    \tat Problem$.main(tmpn2f9ifsa.scala:29)\n\tat Problem.main(tmpn2f9ifsa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        def quadratic(a : Long, b\
    \ : Long, c : Long) : Long = (-b + sqrt(b * b - 4 * a * c)) / (2 * a)\n      \
    \  val m = quadratic(1l, 1l, -6l * n)\n        (0l until floor(m).toLong).map(i\
    \ => 6l * n - 3l * i * i - 3l * i - 1l).filter(x => x % 3l == 0l).size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx49grefd.scala:15:61\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mdef\e[0m \e[36mquadratic\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = (-b + sqrt(b * b - \e[31m4\e[0m * a\
    \ * c)) / (\e[31m2\e[0m * a)\n\e[31m\e[31m   |\e[0m                          \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Double\n\e[31m   |\e[0m                                                 \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028441
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \tvar map = new HashMap[Long,\
    \ Long]()\n    \tvar triples = 0l\n    \tvar total = 0l\n    \tfor (i <- 1l to\
    \ n) {\n    \t\tval a = i * i - i + 1\n    \t\tfor (j <- i + 1l to n) {\n    \t\
    \t\tval b = j * j - j + 1\n    \t\t\tval x = (a + b) % 3\n    \t\t\tmap(x) = map.getOrElse(x,\
    \ 0l) + 1\n    \t\t}\n    \t\tfor (k <- i + 1l to n) {\n    \t\t\tval b = k *\
    \ k - k + 1\n    \t\t\tval x = (a + b) % 3\n    \t\t\ttotal += map.getOrElse(x,\
    \ 0l)\n    \t\t}\n    \t}\n    \ttotal\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzm89dzmb.scala:34)\n\tat Problem.main(tmpzm89dzmb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028443
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.tabulate(n.toInt)(i\
    \ => i * i - i + 1)\n        // for each pair i, j calculate the number of k's\
    \ satisfying the criteria.\n        val count = Array.fill(n.toInt, n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt; j <- i + 1 until n.toInt) {\n            var\
    \ k = j + 1\n            while (k < n.toInt && (a(i) + a(j) + a(k)) % 3 == 0)\
    \ {\n                count(i)(j) += 1\n                k += 1\n            }\n\
    \        }\n        var result = 0l\n        for (i <- 0 until n.toInt; j <- i\
    \ + 1 until n.toInt) {\n            result += count(i)(j)\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0woeotlm.scala:32)\n\tat Problem.main(tmp0woeotlm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028444
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val al = new ArrayBuffer[Long]()\n\
    \        for (i <- 1l to n) {\n            al += i * i - i + 1\n        }\n  \
    \      var count = 0l\n        for (i <- 0 until al.length - 2) {\n          \
    \  for (j <- i + 1 until al.length - 1) {\n                for (k <- j + 1 until\
    \ al.length) {\n                    if ((al(i) + al(j) + al(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028444
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0l)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var ans = 0l\n\
    \        for (i <- 0 until n.toInt)\n        \tfor (j <- i + 1 until n.toInt)\n\
    \        \t\tfor (k <- j + 1 until n.toInt)\n        \t\t\tif ((a(i) + a(j) +\
    \ a(k)) % 3 == 0) ans += 1\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvo8j_dtx.scala:25)\n\tat Problem.main(tmpvo8j_dtx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028444
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val m = if (n % 3 == 0) {\n\
    \            n / 3\n        } else {\n            n / 3 + 1\n        }\n     \
    \   val v = if (n % 3 == 0) {\n            n / 3 * 2\n        } else {\n     \
    \       n / 3 * 2 + 1\n        }\n        m * v\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmporue1sx4.scala:28)\n\tat Problem.main(tmporue1sx4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028444
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        var\
    \ sum = 0l\n        val a = (1 to n.toInt).map(i => i * i - i + 1).toList\n  \
    \      for (i <- 0 to a.length - 3) {\n            for (j <- i + 1 to a.length\
    \ - 2) {\n                for (k <- j + 1 to a.length - 1) {\n               \
    \     sum = a(i) + a(j) + a(k)\n                    if (sum % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.getMaxTriples(tmpe3bgdxyo.scala:15)\n\tat Problem$.main(tmpe3bgdxyo.scala:18)\n\
    \tat Problem.main(tmpe3bgdxyo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028445
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Define the function.\n\
    \        def f(i : Long) : Long = i * i - i + 1\n        // Generate the list.\n\
    \        val l = for(i <- 1l to n) yield f(i)\n        // For each index i, find\
    \ the number of elements from i + 1 to n that\n        // have the same remainder\
    \ modulo 3.\n        var result = 0l\n        for(i <- 0l until n) {\n       \
    \     val remainder = l(i.toInt) % 3\n            var count = 0l\n           \
    \ for(j <- i + 1l until n) {\n                if(l(j.toInt) % 3 == remainder)\
    \ count += 1\n            }\n            result += count * (count + 1) / 2\n \
    \       }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt0k24jck.scala:33)\n\tat Problem.main(tmpt0k24jck.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028447
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        (1l)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkii99t0r.scala:19)\n\tat Problem.main(tmpkii99t0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        if (n < 3) return 0\n   \
    \     var cnt = 0\n        var two = (1 to n.toInt).map(i => i * i - i + 1).filter(i\
    \ => i % 3 == 2).toList\n        var one = (1 to n.toInt).map(i => i * i - i +\
    \ 1).filter(i => i % 3 == 1).toList\n        var zero = (1 to n.toInt).map(i =>\
    \ i * i - i + 1).filter(i => i % 3 == 0).toList\n        var map = scala.collection.mutable.Map[Int,\
    \ Int]()\n        var a = ArrayBuffer(one, two, zero)\n        for (i <- a) {\n\
    \            var l = i.length\n            for (j <- 0 until l) {\n          \
    \      for (k <- j + 1 until l) {\n                    var sum = i(j) + i(k)\n\
    \                    var v = map.getOrElse(sum, 0)\n                    map.put(sum,\
    \ v + 1)\n                }\n            }\n        }\n        for (i <- map)\
    \ {\n            cnt += i._2\n        }\n        return cnt\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0rjf8n_j.scala:38)\n\tat Problem.main(tmp0rjf8n_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Fill in the code here.\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3qijec3t.scala:19)\n\tat Problem.main(tmp3qijec3t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028445
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val (a, b, c) = (n / 3 -\
    \ 1, n / 3, (n + 2) / 3)\n        // From the equation, there are only three type\
    \ of triple.\n        return a * b * c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsun5ztz8.scala:20)\n\tat Problem.main(tmpsun5ztz8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var c = 0l\n        for (i\
    \ <- 1l to n) {\n            for (j <- i+1l to n) {\n                for (k <-\
    \ j+1l to n) {\n                    if ((i*i - i + 1) + (j*j - j + 1) + (k*k -\
    \ k + 1) % 3 == 0) {\n                        c += 1\n                    }\n\
    \                }\n            }\n        }\n        return c\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihutwy5z.scala:28)\n\tat Problem.main(tmpihutwy5z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028447
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0\n        val\
    \ squares = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt) {\n \
    \           squares(i) = i.toLong * i.toLong - i.toLong + 1\n        }\n     \
    \   for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((squares(i) + squares(j) + squares(k)) % 3 == 0) count += 1\n        \
    \        }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjv8hbh8c.scala:30)\n\tat Problem.main(tmpjv8hbh8c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // val a = (1l to n).map(i\
    \ => i * i - i + 1).toArray\n        // return (for {\n        //     i <- 0l\
    \ until n - 2\n        //     j <- i + 1l until n - 1\n        //     k <- j +\
    \ 1l until n\n        //     if (a(i.toInt) + a(j.toInt) + a(k.toInt)) % 3 ==\
    \ 0\n        // } yield ((i, j, k), a(i.toInt) + a(j.toInt) + a(k.toInt))).size\n\
    \        val a = (1l to n).map(i => i * i - i + 1).toArray\n        val set =\
    \ for {\n            i <- 0l until n - 2\n            j <- i + 1l until n - 1\n\
    \            k <- j + 1l until n\n            if (a(i.toInt) + a(j.toInt) + a(k.toInt))\
    \ % 3 == 0\n        } yield (i, j, k)\n        return set.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val factors = new Array[Int]((n\
    \ + 1).toInt)\n        var i = 1\n        while (i <= n) {\n            factors(i)\
    \ = i * i - i + 1\n            i += 1\n        }\n        // 1, 3, 7, 13, 21,\
    \ 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307, 343, 381, 421, 463,\
    \ 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123, 1191, 1261, 1333,\
    \ 1407, 1483, 1561, 1641, 1723, 1807, 1891, 1987, 2085, 2185, 2287, 2391, 2497,\
    \ 2605, 2715, 2827, 2941, 3057, 3175, 3295, 3417, 3541, 3667, 3795, 3925, 4057,\
    \ 4191, 4327, 4465, 4605, 4747, 4891, 5037, 5185, 5335, 5487, 5641, 5797, 5955,\
    \ 6115, 6277, 6441, 6607, 6775, 6945, 7117, 7291, 7467, 7645, 7825, 8007, 8191,\
    \ 8377, 8565, 8755, 8947, 9141, 9337, 9535, 9735, 9937, 10141, 10347, 10555, 10765,\
    \ 10977, 11191, 11407, 11625, 11845, 12067, 12291, 12517, 12745, 12975, 13207,\
    \ 13441, 13677, 13915, 14155, 14397, 14641, 14887, 15135, 15385, 15637, 15891,\
    \ 16147, 16405, 16665, 16927, 17191, 17457, 17725, 17995, 18267, 18541, 18817,\
    \ 19095, 19374, 19655, 19938, 20223, 20510, 20799, 21089, 21381, 21675, 21971,\
    \ 22269, 22569, 22871, 23175, 23481, 23789, 24099, 24411, 24725, 25041, 25359,\
    \ 25679,\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp05fxh60y.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mwhile\e[0m (i\
    \ <= n) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m18 |\e[0m            factors(i)\
    \ = i * i - i + \e[31m1\e[0m\n\e[31m19 |\e[0m            i += \e[31m1\e[0m\n\e\
    [31m20 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028447
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var sum : Long = 0\n    \
    \    var count : Long = 0\n        for (i <- 1l to n - 2) {\n            sum +=\
    \ i\n            if (sum % 3 == 0) count += (n - i - 1)\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmputt6m8i1.scala:24)\n\tat Problem.main(tmputt6m8i1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var ans = 0l\n        for\
    \ (i <- 1l to n) {\n            for (j <- i + 1l to n) {\n                for\
    \ (k <- j + 1l to n) {\n                    if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) {\n                        ans += 1\n           \
    \         }\n                }\n            }\n        }\n        ans\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var prev1 = 1l\n        var\
    \ prev2 = 3l\n        var prev3 = 7l\n        var ans = 0l\n        for (i <-\
    \ 4l to n) {\n            val temp = 6l * i - 9l\n            if (temp % 3 ==\
    \ 0) ans += 1\n            prev1 = prev2\n            prev2 = prev3\n        \
    \    prev3 = temp\n        }\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz_a3jvta.scala:29)\n\tat Problem.main(tmpz_a3jvta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var result = 0l\n       \
    \ for (i <- 0l until n) {\n            val ai = i * i - i + 1\n            for\
    \ (j <- i + 1l until n) {\n                val aj = j * j - j + 1\n          \
    \      if ((ai + aj) % 3 == 0) {\n                    result += (n - j)\n    \
    \            }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplr9tem64.scala:28)\n\tat Problem.main(tmplr9tem64.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028451
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(1)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var res = 0l\n\
    \        for (i <- 0 until n.toInt - 2)\n            for (j <- i + 1 until n.toInt\
    \ - 1)\n                for (k <- j + 1 until n.toInt)\n                    if\
    \ ((a(i) + a(j) + a(k)) % 3 == 0) res += 1\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq7v5_x3r.scala:25)\n\tat Problem.main(tmpq7v5_x3r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Simulation\n        val\
    \ a = (1 to n.toInt).map(i => i * i - i + 1).toList\n        a.combinations(3).count(x\
    \ => (x(0) + x(1) + x(2)) % 3 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // This is a naive solution\
    \ to the problem. We can do better.\n        var total = 0l\n        for (i <-\
    \ 1 to n.toInt) {\n            for (j <- i + 1 to n.toInt) {\n               \
    \ for (k <- j + 1 to n.toInt) {\n                    if ((i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0) {\n                        total += 1\n\
    \                    }\n                }\n            }\n        }\n        total\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val max = (n * (n - 1) *\
    \ (n - 2)) / 6\n        val tris = Map[Long, Long]()\n        for (i <- 1l to\
    \ n - 1l) {\n            for (j <- i + 1l to n) {\n                val s = i *\
    \ i - i + 1 + j * j - j + 1\n                if (s % 3 == 0) {\n             \
    \       if (tris.contains(s)) tris(s) += 1\n                    else tris(s) =\
    \ 1\n                }\n            }\n        }\n        return max - tris.values.map(v\
    \ => (v * (v - 1)) / 2).sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpto5ssxpr.scala:29)\n\tat Problem.main(tmpto5ssxpr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        for\
    \ (i <- 1l to n) {\n            val result = i * i - i + 1\n            val resultRemainder\
    \ = result % 3\n            if (resultRemainder == 0) count += 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfhoepnr1.scala:24)\n\tat Problem.main(tmpfhoepnr1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // n is even\n        if\
    \ (n % 2 == 0) (n / 2l) * (n / 2l)\n        // n is odd\n        else (n / 2l)\
    \ * (n / 2l + 1l)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkt7m745u.scala:21)\n\tat Problem.main(tmpkt7m745u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        def find(l : Long) : Boolean\
    \ = (1l to n).exists(m => ((m * m - m + 1) == l))\n        val arr = ArrayBuffer[Long]()\n\
    \        (1l to n).foreach(m => {\n            val l = m * m - m + 1\n       \
    \     if (find(l)) arr += l\n        })\n        println(arr)\n        arr.combinations(3).filter(a\
    \ => (a(0) + a(1) + a(2)) % 3 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: 'ArrayBuffer(1, 3, 7, 13, 21)

    ArrayBuffer(1, 3, 7, 13, 21, 31)

    ArrayBuffer(1, 3, 7, 13, 21, 31, 43, 57, 73, 91)

    ArrayBuffer(1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241,
    273, 307, 343, 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993,
    1057, 1123, 1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1893, 1981,
    2071, 2163, 2257, 2353, 2451, 2551, 2653, 2757, 2863, 2971, 3081, 3193, 3307,
    3423, 3541, 3661, 3783, 3907, 4033, 4161, 4291, 4423, 4557, 4693, 4831, 4971,
    5113, 5257, 5403, 5551, 5701, 5853, 6007, 6163, 6321, 6481, 6643, 6807, 6973,
    7141, 7311, 7483, 7657, 7833, 8011, 8191, 8373, 8557, 8743, 8931, 9121, 9313,
    9507, 9703, 9901)

    '
  timestamp: 1660028455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var t = 0\n        for (i\
    \ <- 1 to n.toInt) {\n            for (j <- i + 1 to n.toInt) {\n            \
    \    val ai = i * i - i + 1\n                val aj = j * j - j + 1\n        \
    \        if ((ai + aj) % 3 == 0) {\n                    for (k <- j + 1 to n.toInt)\
    \ {\n                        val ak = k * k - k + 1\n                        if\
    \ ((ai + aj + ak) % 3 == 0) {\n                            t += 1\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n        t\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzkkgzr8y.scala:33)\n\tat Problem.main(tmpzkkgzr8y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // binomial coefficients\n\
    \        def bcs(n : Long, k : Long) : Long = {\n            if (k > n) 0l\n \
    \           else if (k == 0l || k == n) 1l\n            else bcs(n - 1, k - 1)\
    \ + bcs(n - 1, k)\n        }\n        // this is a binomial coefficient problem\n\
    \        // you have to figure out how many possibilities you have in summing\
    \ up:\n        // a[i] + a[j] + a[k]\n        // a[i] + a[j] + a[k] + a[l]\n \
    \       // .. a[i] + a[j] + a[k] + a[l] + a[m]\n        // so that each case is\
    \ a multiple of 3\n        // for each case, a[i] + a[j] + a[k] is a multiple\
    \ of 3, \n        // then a[i] + a[j] is either 1 or 2, and a[k] is either 0 or\
    \ 1\n        // which means you have the following cases:\n        // a[i] + a[j]\
    \ + a[k] is a multiple of 3 => a[i] + a[j] = 1 and a[k] = 0\n        // a[i] +\
    \ a[j] + a[k] is a multiple of 3 => a[i] + a[j] = 2 and a[k] = 1\n        // the\
    \ cases are exhaustive\n        // now, the number of triples will be 2^n (because\
    \ a[i] and a[j] can be anything) \n        // * binomial coefficient (n, 2) (because\
    \ a[i] and a[j] are fixed to 2 out of n, and a[k] is fixed to 1 out of n) \n \
    \       // * 2 (because a[i] + a[j] = 1 and a[k] = 0, and a[i] + a[j] = 2 and\
    \ a[k] = 1)\n        // and do the same, you have to compute the number of quadruples,\
    \ etc\n        // and then, the answer will be:\n        // (2^n * C(n, 2) * 2)\
    \ - (\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkufbsk1e.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val sum = n.toInt * (n.toInt\
    \ + 1) / 2\n        if (sum % 3 == 0)\n        \tif (n.toInt % 3 == 0)\n     \
    \   \t\t(n.toInt - 1) * (n.toInt - 2) / 6\n        \telse if (n.toInt % 3 == 1)\n\
    \        \t\tn.toInt * (n.toInt - 1) / 2\n        \telse\n        \t\t(n.toInt\
    \ - 1) * (n.toInt - 2) / 2\n        else if (sum % 3 == 1)\n        \tif (n.toInt\
    \ % 3 == 0)\n        \t\t(n.toInt - 1) * (n.toInt - 2) / 2\n        \telse if\
    \ (n.toInt % 3 == 1)\n        \t\t(n.toInt - 1) * (n.toInt - 2) / 6\n        \t\
    else\n        \t\tn.toInt * (n.toInt - 1) / 2\n        else\n        \tif (n.toInt\
    \ % 3 == 0)\n        \t\tn.toInt * (n.toInt - 1) / 2\n        \telse if (n.toInt\
    \ % 3 == 1)\n        \t\t(n.toInt - 1) * (n.toInt - 2) / 2\n        \telse\n \
    \       \t\t(n.toInt - 1) * (n.toInt - 2) / 6\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3tyrwyho.scala:39)\n\tat Problem.main(tmp3tyrwyho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1l to n).map(x =>\
    \ x * x - x + 1).toList\n        var count = 0l\n        for (i <- 0 to a.length\
    \ - 3) {\n            for (j <- i + 1 to a.length - 2) {\n                for\
    \ (k <- j + 1 to a.length - 1) {\n                    if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) {\n                        count += 1\n                    }\n   \
    \             }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028457
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpncpts3ai.scala:28)\n\tat Problem.main(tmpncpts3ai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n.toInt,\
    \ n.toInt)\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt)\
    \ {\n                if (j <= i) a(i - 1)(j - 1) = i * i - i + 1\n           \
    \     else a(i - 1)(j - 1) = a(i - 1)(j - 2) + 2 * j - 2\n            }\n    \
    \    }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n       \
    \     for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i)(j) + a(i)(k) + a(j)(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps_pbfrsz.scala:33)\n\tat Problem.main(tmps_pbfrsz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // The sum of the first N\
    \ odd numbers is always N squared.\n        val max = n*n\n        var n3 = 0l\n\
    \        // This is the list of squares\n        var squares = new ArrayBuffer[Long]()\n\
    \        for (i <- 1l to max) {\n            val q = i*i\n            if (q >\
    \ max) break\n            squares += q\n        }\n        // This is the list\
    \ of squares of odds\n        var oddsquares = new ArrayBuffer[Long]()\n     \
    \   for (i <- 1l to max by 2) {\n            val q = i*i\n            if (q >\
    \ max) break\n            oddsquares += q\n        }\n        for (i <- 0 to squares.length\
    \ - 3) {\n            for (j <- i + 1 to squares.length - 2) {\n             \
    \   val sum = squares(i) + squares(j)\n                // Pick all possible squares\
    \ of odds\n                for (k <- 0 to oddsquares.length - 1) {\n         \
    \           if (sum + oddsquares(k) > max) break\n                    if ((sum\
    \ + oddsquares(k)) % 3 == 0) n3 += 1\n                }\n            }\n     \
    \   }\n        n3\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2puj1_u8.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (q > max) break\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \          Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2puj1_u8.scala:29:25 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m            \e[33mif\e[0m (q > max) break\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2puj1_u8.scala:37:51\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m                    \e[33mif\e\
    [0m (sum + oddsquares(k) > max) break\n\e[31m\e[31m   |\e[0m                 \
    \                                  ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                                    Not found: break\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // your code here\n     \
    \   var a = ArrayBuffer[Long]()\n        for (i <- 1l to n) a += i * i - i + 1\n\
    \        var count = 0l\n        for (i <- 1l to n - 2)\n        for (j <- i +\
    \ 1l to n - 1)\n        for (k <- j + 1l to n) {\n            val t = a(i.toInt\
    \ - 1) + a(j.toInt - 1) + a(k.toInt - 1)\n            if (t % 3 == 0) count +=\
    \ 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        // a.foreach(println)\n        var sum = 0l\n        for (i <-\
    \ 0 to a.length - 3) {\n            for (j <- i + 1 to a.length - 2) {\n     \
    \           for (k <- j + 1 to a.length - 1) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) sum += 1\n                }\n            }\n      \
    \  }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Assumptions: n >= 3.\n\
    \        // We use a triplet (a, b, c) to represent a set of three numbers a,\
    \ b, c where a < b < c.\n        // We want to find the number of triplets (a,\
    \ b, c) that satisfy a + b + c % 3 == 0.\n        // We can separate this into\
    \ two parts: triplets where the sum is % 3 == 0 and triplets where the sum is\
    \ % 3 == 1.\n        // Let's consider the case where the sum is % 3 == 0 first.\n\
    \        // We can create a triplet by picking a, then b, then c.\n        //\
    \ b has to satisfy (a % 3 + b % 3) % 3 == 0, so b % 3 == 0 if a % 3 == 0 and b\
    \ % 3 == 1 if a % 3 == 1.\n        // a has to satisfy (a % 3 + b % 3 + c % 3)\
    \ % 3 == 0, so c % 3 == 0.\n        // We are picking a, b, and c independently,\
    \ so (b - a - 1) * (c - b - 1) is the number of triplets we can construct.\n \
    \       // This can be done in O(1) time since (b - a - 1) and (c - b - 1) are\
    \ constants.\n        // We now want to count the number of triplets where the\
    \ sum is % 3 == 1.\n        // We can do the same thing as before, but now a and\
    \ b need to satisfy a % 3 == 1 and b % 3 == 2.\n        // This can be done in\
    \ O(1) time.\n        val count0 = (n - 1) * (n - 2) * (n - 3) / 6\n        val\
    \ count1 = (n - 2) * (n - 3) * (n - 4) / 6\n        count0 + count1\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpul2_r70q.scala:33)\n\tat Problem.main(tmpul2_r70q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028457
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        (1l to n).toList.map(i =>\
    \ (i * i - i + 1)).combinations(3).toList.filter(a => (a(0) + a(1) + a(2)) % 3\
    \ == 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var t = 0l\n        var v\
    \ = 1l\n        for (i <- 1l to n) {\n            t += (n - i) * (i - 1)\n   \
    \         v += 2\n        }\n        t\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1vrufnq7.scala:24)\n\tat Problem.main(tmp1vrufnq7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // This problem is not very\
    \ difficult, but it is very slow (n^3).\n        // For example, if n = 10^9,\
    \ the result can be obtained in 1 second, but if n = 10^10, it will take 10 minutes.\n\
    \        // By the way, this question is very similar to the question of how many\
    \ integer triples (x, y, z) satisfy x < y < z and x + y + z = n.\n        // As\
    \ long as it is known that the required number of triples is n(n-1) * (n-2) /\
    \ 6.\n        // As long as x + y + z is divisible by 3, there must be one i such\
    \ that x + y + z - i * 3 is divisible by 3.\n        // That is, the number of\
    \ triples (x, y, z) satisfying x < y < z and x + y + z is divisible by 3 is equal\
    \ to\n        // the number of triples (x, y, z) satisfying x < y < z and x +\
    \ y + z - 1 is divisible by 3 plus\n        // the number of triples (x, y, z)\
    \ satisfying x < y < z and x + y + z - 2 is divisible by 3.\n        // That is\
    \ to say, the number of triples (x, y, z) satisfying x < y < z and x + y + z is\
    \ divisible by 3 is\n        // equal to the number of triples (x, y, z) satisfying\
    \ x < y < z and x + y + z is divisible by 3 plus \n        // the number of triples\
    \ (x, y, z) satisfying x < y < z and x + y + z - 1 is divisible by 3 plus\n  \
    \      // the number of triples (x, y, z) satisfying x < y < z and x + y + z -\
    \ 2 is divisible by 3.\n        // In this way, the problem can be reduced to\
    \ the problem of calculating the number of triples satisfying x < y < z and x\
    \ + y + z = n,\n        // and the problem is reduced from O(n^3) to O(n).\n \
    \       val m = (n + 1) * n / 2\n        val s = m / 3\n        var result = 0\n\
    \        for (i\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuj_txfoe.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660028455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Define the given input(s)\n\
    \        val a = getSequence(n)\n        // Define the wanted output(s)\n    \
    \    val result =\n            // Pick two elements from a\n            for (i\
    \ <- a; j <- a) yield (i, j)\n            // Filter only valid triples: i < j\n\
    \            .filter(x => x._1 < x._2)\n            // Pick one element from a\n\
    \            .flatMap(x => a.map(k => (x._1, x._2, k)))\n            // Filter\
    \ only valid triples: j < k\n            .filter(x => x._2 < x._3)\n         \
    \   // Filter only valid triples: a[i] + a[j] + a[k] is a multiple of 3\n    \
    \        .filter(x => (x._1 + x._2 + x._3) % 3 == 0)\n        // Return the result(s)\n\
    \        result.length\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpefexodbf.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = getSequence(n)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Not found: getSequence\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.getMaxTriples(tmpe3bgdxyo.scala:15)\n\tat Problem$.main(tmpe3bgdxyo.scala:18)\n\
    \tat Problem.main(tmpe3bgdxyo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // \"a\" is a sorted list\
    \ of numbers, such that each number is a multiple of 3.\n        // Therefore,\
    \ we only need to count the number of triples where all numbers are multiples\
    \ of 3.\n        // For example:\n        // [1, 3, 6, 9, 12, 18, 21, 24, 27,\
    \ 33, 36, 39, 42, 48, 51, 54, 57, 63, 66, 69, 72, 78, 81, 84, 87, 93, 96, 99]\n\
    \        // We will only count triples where all numbers are multiples of 3.\n\
    \        // [3, 6, 9, 12, 18, 21, 24, 27, 33, 36, 39, 42, 48, 51, 54, 57, 63,\
    \ 66, 69, 72, 78, 81, 84, 87, 93, 96, 99]\n        // We only need to find the\
    \ total number of triples where all numbers are multiples of 3.\n        // We\
    \ can find the index of the last element < L, where L = N / 3.\n        // We\
    \ can then count the number of triples with exactly 3 elements, which are multiples\
    \ of 3.\n        // We can then count the number of triples with exactly 4 elements,\
    \ which are multiples of 3.\n        // Etc.\n        // In order to count the\
    \ number of triples with 3 elements, we need to find the index of the last element\
    \ < L - 1,\n        // and then the index of the last element < L - 2.\n     \
    \   // We then find the number of triples with these indices.\n        // We do\
    \ the same thing for 4 elements, and so on.\n        // If we look at the 0-based\
    \ indices, the problem reduces to a simpler problem:\n        // Given indices\
    \ I, J, K, count the number of triples (X, Y, Z) such that\n        // I <= X\
    \ < Y < Z <= K\n        // where I = 0, J = 1, and K = 2.\n        // When J =\
    \ 2, the problem reduces to a simpler problem:\n        // Given indices I, J,\
    \ count the number of triples (X, Y) such that\n        // I <= X < Y <= J\n \
    \       // We do this with dynamic programming.\n        val a = Array.fill(n.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp11z9hk6a.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp11z9hk6a.scala:38:29\
    \ -----------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e\
    [0m \e[36ma\e[0m = Array.fill(n.to\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mto\e[0m in \e[33mtrait\e[0m \e[35mIntegralProxy\e[0m with types\n\e\
    [31m   |\e[0m (end: Long, step: Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\
    \e[31m   |\e[0m (end: Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\
    \e[31m   |\e[0mmatch expected type Int\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp11z9hk6a.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // a[i] = i * i - i + 1\n\
    \        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j * j - j + 1) + 3\
    \ * (k * k - k + 1)\n        //                     = 3 * ((i * i - i + 1) + (j\
    \ * j - j + 1) + (k * k - k + 1))\n        //                     = 3 * ((i *\
    \ i - i + 1) + (j * j - j + 1) + (k * k - k + 1))\n        //                \
    \     = 3 * ((i + j + k) * (i + j + k) - (i + j + k) + 3)\n        //        \
    \             = 3 * ((i + j + k) * (i + j + k) - (i + j + k) + 3)\n        //\
    \                     = 3 * ((i + j + k) * (i + j + k) - i - j - k + 3)\n    \
    \    //                     = 3 * ((i + j + k) * (i + j + k) - i - j - k + 3)\n\
    \        // (i + j + k) * (i + j + k) - i - j - k + 3\n        //  i * i + j *\
    \ j + k * k + 3 * i * j + 3 * i * k + 3 * j * k\n        //  i * i + j * j + k\
    \ * k + 3 * i * j + 3 * i * k + 3 * j * k\n        //  a[i] + a[j] + a[k] = a[i]\
    \ + a[j] + a[k]\n        val arr = Array.ofDim[Int]((n * n + 3) / 3)\n       \
    \ for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n         \
    \       for (k <- 1 to n.toInt) {\n                    val x = i * i + j * j +\
    \ k * k + 3 * i * j + 3 * i * k + 3 * j * k\n                    if (x > 0 &&\
    \ x <= n * n) arr(x) += 1\n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps05zpy36.scala:43:0 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps05zpy36.scala:27:35\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36marr\e\
    [0m = Array.ofDim[\e[35mInt\e[0m]((n * n + \e[31m3\e[0m) / \e[31m3\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   Found:    Long\n\e[31m   |\e[0m  \
    \                                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps05zpy36.scala:28:8 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n.toInt)\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m29 |\e[0m            \e[33mfor\e\
    [0m (j <- \e[31m1\e[0m to n.toInt) {\n\e[31m30 |\e[0m                \e[33mfor\e\
    [0m (k <- \e[31m1\e[0m to n.toInt) {\n\e[31m31 |\e[0m                    \e[33mval\e\
    [0m \e[36mx\e[0m = i * i + j * j + k * k + \e[31m3\e[0m * i * j + \e[31m3\e[0m\
    \ * i * k + \e[31m3\e[0m * j * k\n\e[31m32 |\e[0m                    \e[33mif\e\
    [0m (x > \e[31m0\e[0m && x <= n * n) arr(x) += \e[31m1\e[0m\n\e[31m33 |\e[0m \
    \   }\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m35 |\e[0m    assert(getMaxTriples((\e[31m5l\e\
    [0m)) == (\e[31m1l\e[0m));\n\e[31m36 |\e[0m    assert(getMaxTriples((\e[31m6l\e\
    [0m)) == (\e[31m4l\e[0m));\n\e[31m37 |\e[0m    assert(getMaxTriples((\e[31m10l\e\
    [0m)) == (\e[31m36l\e[0m));\n\e[31m38 |\e[0m    assert(getMaxTriples((\e[31m100l\e\
    [0m)) == (\e[31m53361l\e[0m));\n\e[31m39 |\e[0m    }\n\e[31m40 |\e[0m}\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.tabulate(n.toInt)(x\
    \ => x * x - x + 1)\n        var c = 0\n        for (i <- 0 until n.toInt - 2)\
    \ {\n            for (j <- i + 1 until n.toInt - 1) {\n                for (k\
    \ <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) c += 1\n                }\n            }\n        }\n        c\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1rsvm5db.scala:27)\n\tat Problem.main(tmp1rsvm5db.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028463
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // (i, j, k) with (i + j\
    \ + k) % 3 == 0\n        // \n        // (i, j, k) with 1 <= i < j < k <= n\n\
    \        // 0 <= i + j + k <= 3n\n        // 0 <= i + j < 2n, 2 <= i + j < 3n\n\
    \        // 0 <= i + k < 2n, 2 <= i + k < 3n\n        // 0 <= j + k < 2n, 2 <=\
    \ j + k < 3n\n        val s : Long = 3 * n;\n        val arr = new Array[Int](s.toInt);\n\
    \        for (i <- 1 to n.toInt) {\n            val curr : Long = i * i - i +\
    \ 1;\n            for (j <- 1 to n.toInt) {\n                val sum : Long =\
    \ curr + j * j - j + 1;\n                if (sum <= s) arr(sum.toInt) += 1;\n\
    \            }\n        }\n        var result : Long = 0;\n        for (i <- 1\
    \ to n.toInt) {\n            val curr : Long = i * i - i + 1;\n            for\
    \ (j <- i + 1 to n.toInt) {\n                val sum : Long = curr + j * j - j\
    \ + 1;\n                if (sum <= s) result += arr(sum.toInt);\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3vq1fg3s.scala:42)\n\tat Problem.main(tmp3vq1fg3s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028463
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var arr = new Array[Int](n.toInt)\n\
    \        for (i <- 0 until n.toInt) {\n            arr(i) = i * i - i + 1\n  \
    \      }\n        var l = new ArrayBuffer[Int]\n        var s = new ArrayBuffer[Int]\n\
    \        var count = 0l\n        for (a <- arr) {\n            if (a % 3 == 0)\
    \ {\n                l += a\n            } else if (a % 3 == 1) {\n          \
    \      s += a\n            } else {\n                count += l.length\n     \
    \       }\n        }\n        var sp = 0\n        for (a <- s) {\n           \
    \ while (sp < l.length && l(sp) < a) {\n                sp += 1\n            }\n\
    \            count += l.length - sp\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfpaf_ufj.scala:41)\n\tat Problem.main(tmpfpaf_ufj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.tabulate(n.toInt)(x\
    \ => (x + 1) * (x + 1) - (x + 1) + 1)\n        var res = 0\n        var j = 0\n\
    \        var k = 0\n        while (j < n - 1) {\n            while (k < n) {\n\
    \                if (a(j) + a(k) < a(n.toInt - 1)) k += 1\n                else\
    \ {\n                    if ((a(j) + a(k)) % 3 == 0) res += 1\n              \
    \      k += 1\n                }\n            }\n            j += 1\n        \
    \    k = j + 1\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpll0bs7o5.scala:34)\n\tat Problem.main(tmpll0bs7o5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var ans = 0l\n        for\
    \ (i <- 1 to n.toInt - 2) {\n            for (j <- i + 1 to n.toInt - 1) {\n \
    \               for (k <- j + 1 to n.toInt) {\n                    if ((i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                     \
    \   ans += 1\n                    }\n                }\n            }\n      \
    \  }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n      var count = 0\n      for (i\
    \ <- 1 to n.toInt - 2) {\n        for (j <- i + 1 to n.toInt - 1) {\n        \
    \  for (k <- j + 1 to n.toInt) {\n            if ((i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0) {\n              count += 1\n            }\n  \
    \        }\n        }\n      }\n      count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \tval a = new Array[Long](n.toInt)\n\
    \    \tfor (i <- 0 until n.toInt) {\n    \t\ta(i) = i * i - i + 1\n    \t}\n \
    \   \ta.combinations(3).map {c => \n    \t\tif ((c(0) + c(1) + c(2)) % 3 == 0)\
    \ 1 else 0\n    \t}.sum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2fjbc_l5.scala:24)\n\tat Problem.main(tmp2fjbc_l5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var cnt = 0l\n\
    \        for (i <- 0 to n.toInt - 3)\n            for (j <- i + 1 to n.toInt -\
    \ 2)\n                for (k <- j + 1 to n.toInt - 1) if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) cnt += 1\n        cnt\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = new Array[Long](n.toInt)\n\
    \        var count = 0\n        for (i <- 0 until n.toInt) {\n            a(i)\
    \ = i * i - i + 1\n            for (j <- 0 until i) {\n                for (k\
    \ <- 0 until j) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz2jy7q5s.scala:30)\n\tat Problem.main(tmpz2jy7q5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \t(n * (n - 1) * (n - 2) / 6)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpljyrikxn.scala:18)\n\tat Problem.main(tmpljyrikxn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val table = scala.collection.mutable.HashMap[Long,\
    \ ArrayBuffer[Long]]()\n        var count = 0l\n        for (i <- 1l to n) {\n\
    \            val a = (i * i - i + 1) % 3\n            if (table.contains(a)) {\n\
    \                val buffer = table(a)\n                for (b <- buffer) count\
    \ += (i - b)\n                buffer += i\n            } else {\n            \
    \    table += a -> ArrayBuffer(i)\n            }\n        }\n        count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiaah_uea.scala:30)\n\tat Problem.main(tmpiaah_uea.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        (1l to n).map(x => x*x -\
    \ x + 1).foldLeft(0)((x,y) => x + y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9bly8mki.scala:15:61\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        (\e[31m1l\e[0m to n).map(\e\
    [36mx\e[0m => x*x - x + \e[31m1\e[0m).foldLeft(\e[31m0\e[0m)((\e[36mx\e[0m,\e\
    [36my\e[0m) => x + y)\n\e[31m\e[31m   |\e[0m                                 \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                                     Found:    Long\n\e[31m   |\e[0m        \
    \                                                  Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val sieve = new Sieve(n);\n\
    \        val primes = sieve.getPrimes(2, n.toInt);\n        val hash = new HashMap[Long,\
    \ Long]();\n        val sum = (1 to primes.length).foldLeft(0) {(acc, i) =>\n\
    \            var sum = 0;\n            for (j <- i + 1 to primes.length) {\n \
    \               sum += primes(j - 1);\n                if (sum <= n) {\n     \
    \               hash(sum) = hash.getOrElse(sum, 0) + 1;\n                }\n \
    \           }\n            acc\n        }\n        var result = 0;\n        for\
    \ (i <- 1 to primes.length) {\n            for (j <- i + 1 to primes.length) {\n\
    \                for (k <- j + 1 to primes.length) {\n                    val\
    \ a = primes(i - 1);\n                    val b = primes(j - 1);\n           \
    \         val c = primes(k - 1);\n                    if ((a + b + c) % 3 == 0)\
    \ {\n                        result += hash.getOrElse(a + b + c, 0);\n       \
    \             }\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfuje8j3p.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msieve\e[0m = \e[33mnew\e\
    [0m \e[35mSieve\e[0m(n);\n\e[31m\e[31m   |\e[0m                        ^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: type Sieve\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfuje8j3p.scala:23:55 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    hash(sum) = hash.getOrElse(sum, \e\
    [31m0\e[0m) + \e[31m1\e[0m;\n\e[31m\e[31m   |\e[0m                           \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ AnyVal, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpfuje8j3p.scala:36:31 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                        result += hash.getOrElse(a +\
    \ b + c, \e[31m0\e[0m);\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = ListBuffer[Long]()\n\
    \        for (i <- 1l to n) a += i * i - i + 1\n        val m = new Array[Int](3)\n\
    \        for (i <- 0 until 3) m(i) = a.count(_ % 3 == i)\n        println(m.mkString(\"\
    \ \"))\n        val res = m(0) * (m(0) - 1) * (m(0) - 2) / 6 + m(1) * (m(1) -\
    \ 1) * (m(2)) / 2 + m(2) * (m(2) - 1) * (m(1)) / 2\n        res\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphw8b955j.scala:24)\n\tat Problem.main(tmphw8b955j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: '2 3 0

    '
  timestamp: 1660028468
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        //val t = (1l to n).map(x\
    \ => x * x - x + 1l).toArray\n        val t = Array.tabulate(n.toInt)(x => (x\
    \ + 1l) * (x + 1l) - (x + 1l) + 1l)\n        var c = 0l\n        for (i <- 0 to\
    \ t.length - 1) {\n            for (j <- i + 1 to t.length - 1) {\n          \
    \      for (k <- j + 1 to t.length - 1) {\n                    val x = (t(i) +\
    \ t(j) + t(k)) % 3\n                    if (x == 0) c += 1\n                }\n\
    \            }\n        }\n        c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028468
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \t(1l to n - 2).foldLeft(0l)((acc,\
    \ i) => acc + (1l to n - i - 1).filter(j => (i + j) % 3 == 0).length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe6kijcb5.scala:18)\n\tat Problem.main(tmpe6kijcb5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ {\n            // If a[i] + a[j] + a[k] is a multiple of 3 then the sum of the\
    \ remainders when each of\n            // a[i], a[j], a[k] is divided by 3 must\
    \ also be a multiple of 3.\n            // The remainder when a[i] is divided\
    \ by 3 is given by (i * i - i + 1) % 3 = ((i - 1) % 3)^2\n            // Similarly,\
    \ the remainder when a[j] is divided by 3 is given by (j * j - j + 1) % 3 = ((j\
    \ - 1) % 3)^2\n            // Using this fact we can conclude that the sum of\
    \ the remainders when i, j, k is divided by 3\n            // is a multiple of\
    \ 3 if and only if ((i - 1) % 3)^2 + ((j - 1) % 3)^2 + ((k - 1) % 3)^2 = 0\n \
    \           // The set of values of (i - 1) % 3 is {0, 1, 2} and the set of values\
    \ of (i - 1)^2 % 3 is {0, 1}\n            // Hence the only possible value of\
    \ the sum of the remainders when i, j, k is divided by 3\n            // is 0,\
    \ 1, 2, 3.\n            // Note that a[i] + a[j] + a[k] is not necessarily a multiple\
    \ of 3 if the sum of the remainders\n            // when i, j, k is divided by\
    \ 3 is 0, 2, or 3.\n            // If the sum of the remainders when i, j, k is\
    \ divided by 3 is 2 or 3, then at least one of i, j, k is\n            // divisible\
    \ by 3, therefore a[i] + a[j] + a[k] is divisible by 3.\n            // If the\
    \ sum of the remainders when i, j, k is divided by 3 is 0, then all of i, j, k\
    \ are\n            // divisible by 3, therefore a[i] + a[j] + a[k] is divisible\
    \ by 3.\n            // Hence the count of valid triples is given by the number\
    \ of triples where the\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0sg7gfu6.scala:42:0 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0sg7gfu6.scala:41:1\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp0sg7gfu6.scala:34:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660028467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                if ((a(i) + a(j)) % 3 == 0) {\n                    var\
    \ k = j + 1\n                    while (k < n.toInt && (a(i) + a(j) + a(k)) %\
    \ 3 == 0) {\n                        count += 1\n                        k +=\
    \ 1\n                    }\n                }\n            }\n        }\n    \
    \    count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfpi1hz7d.scala:32)\n\tat Problem.main(tmpfpi1hz7d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        return 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3cupxgz_.scala:18)\n\tat Problem.main(tmp3cupxgz_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028423
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        0l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmwcd6vdc.scala:18)\n\tat Problem.main(tmpmwcd6vdc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028468
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // First approach:\n    \
    \    // The array has a pattern:\n        // [1, 3, 7, 13, 21]\n        // If\
    \ a sum of a triple is divisible by 3, then the sum of the indices is also divisible\
    \ by 3.\n        // To count the number of triples, just find all possible combinations.\n\
    \        // val sum = (1 to n.toInt).map(i => i * i - i + 1).groupBy(i => i).map(e\
    \ => e._2.length).sum\n        // (sum / 6l)\n        // Second approach:\n  \
    \      // The sum of the indices is always a multiple of 3\n        // so, if\
    \ the array has n numbers, then the number of triples is\n        // (n choose\
    \ 3) * 2.\n        val sum = n * (n - 1) * (n - 2) / 6l\n        // (sum / 6l)\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwozwkkzk.scala:31)\n\tat Problem.main(tmpwozwkkzk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028468
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // If n is odd, then no triples\
    \ will contain an odd number, \n        // so we only need to care about the even\
    \ numbers.\n        // a[i] + a[j] + a[k] is always multiple of 3, where k > j\
    \ > i\n        // a[i] + a[j] is always multiple of 3, where k > j > i\n     \
    \   // a[i] is always even, where k > j > i\n        // If a[i] + a[j] + a[k]\
    \ is multiple of 3, then a[i] + a[j] is also multiple of 3\n        // So we only\
    \ need to check the pairs of even numbers.\n        // a[i] + a[j] is always multiple\
    \ of 3, where i < j\n        // From i = 1 to i = n - 1, a[i] = i * i - i + 1\
    \ = (i - 1) * i + 1\n        // a[i] is always even, where i < j\n        // So,\
    \ a[i] will be a multiple of 3 where a[i] % 3 = 1\n        // Therefore, for each\
    \ a[i] = i * i - i + 1 = (i - 1) * i + 1 where a[i] % 3 = 1, \n        // (a[i],\
    \ a[j], a[k]) is a valid triple where k > j > i.\n        // We need to find the\
    \ number of all integers that are less than a[i] and are multiples of 3.\n   \
    \     // The number of all numbers that are multiples of 3 and less than a[i]\
    \ = a[i] / 3, if a[i] % 3 = 1\n        // The number of all numbers that are multiples\
    \ of 3 and less than a[i] = a[i] / 3 - 1, if a[i] % 3 = 2\n        val triples\
    \ = new Array[Long](3)\n        for (i <- 1 to n.toInt) {\n            triples(i\
    \ % 3) += (i * i - i + 1) / 3\n        }\n        triples(1) - triples(2)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ait_grh.scala:38)\n\tat Problem.main(tmp0ait_grh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val possibleValues = n.toInt\n\
    \        val a = new Array[Long](possibleValues)\n        for (i <- 1 to possibleValues)\
    \ {\n            a(i - 1) = (i * i - i + 1) % 3\n        }\n        var result\
    \ = 0l\n        var countOf0s = 0\n        var countOf1s = 0\n        var countOf2s\
    \ = 0\n        for (i <- 0 until possibleValues) {\n            if (a(i) == 0)\
    \ countOf0s += 1\n            else if (a(i) == 1) countOf1s += 1\n           \
    \ else countOf2s += 1\n        }\n        result += countOf0s * (countOf0s - 1)\
    \ * (countOf0s - 2) / 6\n        result += countOf1s * (countOf1s - 1) * (countOf1s\
    \ - 2) / 6\n        result += countOf2s * (countOf2s - 1) * (countOf2s - 2) /\
    \ 6\n        result += countOf0s * countOf1s * countOf2s\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028470
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val mod : Long = n % 3\n\
    \        if (mod == 0) {\n            val ans : Long = n * (n - 1) * (n - 2) /\
    \ 6\n            return ans\n        }\n        if (mod == 1) {\n            val\
    \ ans : Long = (n - 1) * (n - 2) * (n - 3) / 6\n            return ans\n     \
    \   }\n        val ans : Long = (n - 1) * (n - 2) * (n - 4) / 6\n        return\
    \ ans\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6v1e46mv.scala:28)\n\tat Problem.main(tmp6v1e46mv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // The formula for the sum\
    \ of arithmetic progression is given by:\n        // S_n = (a_1 + a_n) * n / 2\n\
    \        // a_1 = first term\n        // a_n = last term\n        // n = number\
    \ of terms\n        // S_n = sum of terms\n        // So, the number of terms\
    \ in the arithmetic progression, n is given by:\n        // n = 2 * S_n / (a_1\
    \ + a_n)\n        // So, the number of triples is:\n        // n * (n - 1) * (n\
    \ - 2) / 6\n        // Which is equivalent to:\n        // n * (n - 1) * (n -\
    \ 2) / (n * (n - 1) / 2)\n        // So, the number of triples is:\n        //\
    \ (n - 2) / 3\n        val firstTerm = 1l\n        val lastTerm = (n * n - n +\
    \ 1)\n        val sum = (firstTerm + lastTerm) * n / 2\n        val numOfTerms\
    \ = 2 * sum / (firstTerm + lastTerm)\n        (numOfTerms - 2) / 3\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3t41l7nm.scala:37)\n\tat Problem.main(tmp3t41l7nm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var triplets = 0l\n     \
    \   val s = new Array[Long](n.toInt + 1)\n        for (i <- 1 to n.toInt) s(i)\
    \ = i * i - i + 1\n        for (i <- 1 to n.toInt - 2) {\n            var j =\
    \ i + 1\n            while (j <= n.toInt - 1) {\n                var sum = s(i)\
    \ + s(j)\n                var k = j + 1\n                while (k <= n.toInt &&\
    \ sum + s(k) <= s(n.toInt)) {\n                    if ((sum + s(k)) % 3 == 0)\
    \ triplets += 1\n                    k += 1\n                }\n             \
    \   j += 1\n            }\n        }\n        triplets\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp69r0gv4e.scala:34)\n\tat Problem.main(tmp69r0gv4e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028475
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Write your code here\n\
    \        return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppu1n7uvr.scala:19)\n\tat Problem.main(tmppu1n7uvr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028473
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var c = 0l\n        for (i <- 0 to n.toInt - 3) {\n         \
    \   for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n         \
    \               c += 1\n                    }\n                }\n           \
    \ }\n        }\n        c\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // See discussions in https://codeforces.com/blog/entry/12348\n\
    \        // 1. For 0 \u2264 i \u2264 n, b[i] = the number of a[j]s that make a[i]\
    \ + a[j] divisible by 3.\n        //    Since a[i] + a[j] = i\xB2 - i + 1 + j\xB2\
    \ - j + 1 = (i + j)\xB2 - (i + j) + 2, \n        //    so a[i] + a[j] is divisible\
    \ by 3 iff i + j is divisible by 3.\n        //    Thus b[i] = (1 + 2 * (n - 1)\
    \ / 3) when i is divisible by 3, and\n        //               (2 * (n - 1) /\
    \ 3) otherwise.\n        // 2. The number of valid triples is sum(b[i] * b[j])\
    \ for 1 \u2264 i < j \u2264 n.\n        //    So the answer is 2 * n * (n - 1)\
    \ / 3 - n * (n - 1) / 2 + n.\n        // For example:\n        // a = [1, 3, 7,\
    \ 13, 21]\n        // b = [2, 4, 3, 3, 2]\n        // sum(b[i] * b[j]) = \n  \
    \      //     b[1] * b[2] + b[1] * b[3] + b[1] * b[4] + b[1] * b[5] +\n      \
    \  //     b[2] * b[3] + b[2] * b[4] + b[2] * b[5] +\n        //     b[3] * b[4]\
    \ + b[3] * b[5] +\n        //     b[4] * b[5] =\n        //     2 * 4 + 2 * 3\
    \ + 2 * 3 + 2 * 2 +\n        //     4 * 3 + 4 * 3 + 4 * 2 +\n        //     3\
    \ * 3 + 3 * 2 +\n        //     3 * 2 =\n        //     16 + 12 + 12 + 4 +\n \
    \       //     12 + 12 + 8 +\n        //     9 + 6 +\n        //     6 =\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp31zaofb6.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// See\
    \ discussions in https://codeforces.com/blog/entry/12348\e[0m\n\e[31m16 |\e[0m\
    \        \e[34m// 1. For 0 \u2264 i \u2264 n, b[i] = the number of a[j]s that\
    \ make a[i] + a[j] divisible by 3.\e[0m\n\e[31m17 |\e[0m        \e[34m//    Since\
    \ a[i] + a[j] = i\xB2 - i + 1 + j\xB2 - j + 1 = (i + j)\xB2 - (i + j) + 2, \e\
    [0m\n\e[31m18 |\e[0m        \e[34m//    so a[i] + a[j] is divisible by 3 iff i\
    \ + j is divisible by 3.\e[0m\n\e[31m19 |\e[0m        \e[34m//    Thus b[i] =\
    \ (1 + 2 * (n - 1) / 3) when i is divisible by 3, and\e[0m\n\e[31m20 |\e[0m  \
    \      \e[34m//               (2 * (n - 1) / 3) otherwise.\e[0m\n\e[31m21 |\e\
    [0m        \e[34m// 2. The number of valid triples is sum(b[i] * b[j]) for 1 \u2264\
    \ i < j \u2264 n.\e[0m\n\e[31m22 |\e[0m        \e[34m//    So the answer is 2\
    \ * n * (n - 1) / 3 - n * (n - 1) / 2 + n.\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ For example:\e[0m\n\e[31m24 |\e[0m        \e[34m// a = [1, 3, 7, 13, 21]\e[0m\n\
    \e[31m25 |\e[0m        \e[34m// b = [2, 4, 3, 3, 2]\e[0m\n\e[31m26 |\e[0m    \
    \    \e[34m// sum(b[i] * b[j]) = \e[0m\n\e[31m27 |\e[0m        \e[34m//     b[1]\
    \ * b[2] + b[1] * b[3] + b[1] * b[4] + b[1] * b[5] +\e[0m\n\e[31m28 |\e[0m   \
    \     \e[34m//     b[2] * b[3] + b[2] * b[4] + b[2] * b[5] +\e[0m\n\e[31m29 |\e\
    [0m        \e[34m//     b[3] * b[4] + b[3] * b[5] +\e[0m\n\e[31m30 |\e[0m    \
    \    \e[34m//     b[4] * b[5] =\e[0m\n\e[31m31 |\e[0m        \e[34m//     2 *\
    \ 4 + 2 * 3 + 2 * 3 + 2 * 2 +\e[0m\n\e[31m32 |\e[0m        \e[34m//     4 * 3\
    \ + 4 * 3 + 4 * 2 +\e[0m\n\e[31m33 |\e[0m        \e[34m//     3 * 3 + 3 * 2 +\e\
    [0m\n\e[31m34 |\e[0m        \e[34m//     3 * 2 =\e[0m\n\e[31m35 |\e[0m       \
    \ \e[34m//     16 + 12 + 12 + 4 +\e[0m\n\e[31m36 |\e[0m        \e[34m//     12\
    \ + 12 + 8 +\e[0m\n\e[31m37 |\e[0m        \e[34m/"
  stdout: ''
  timestamp: 1660028474
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) {\n            a(i) = i * i - i + 1\n    \
    \    }\n        println(a.toList)\n        var ans = 0l\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) ans += 1\n                }\n            }\n        }\n  \
    \      ans\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp82fgo151.scala:31)\n\tat Problem.main(tmp82fgo151.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: 'List(1, 1, 3, 7, 13)

    '
  timestamp: 1660028476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.getMaxTriples(tmpe3bgdxyo.scala:15)\n\tat Problem$.main(tmpe3bgdxyo.scala:18)\n\
    \tat Problem.main(tmpe3bgdxyo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Let S be the sum of the\
    \ all the elements in the list a, \n        // then the number of tuples (a[i],\
    \ a[j], a[k]) where a[i] + a[j] + a[k] is a multiple of 3\n        // is approximately\
    \ S / 3.\n        // The approximation is a rough estimate as we will see later.\n\
    \        // A list of squares will have a sum approximately equal to \n      \
    \  // S = n * (n + 1) * (2n + 1) / 6, which is n^3 / 3.\n        // 3 * S / n^3\
    \ is the approximation.\n        // The problem is to find all tuples for which\
    \ the sum is a multiple of 3, \n        // but is not an exact multiple of 3.\n\
    \        // Such a triple is of the form (x * x - x + 1, x * x + 1, y * y + y\
    \ + 1), where x and y are\n        // both non-zero integers.\n        // Because\
    \ x * x - x + 1 + x * x + 1 + y * y + y + 1 = 3 * x * x + 3 * y * y + 4 * x +\
    \ 4 * y + 3\n        // = 3 * (x * x + y * y + x + y) + 1, the sum is a multiple\
    \ of 3 only if 3 divides x * x + y * y + x + y,\n        // and x * x + y * y\
    \ + x + y is not divisible by 3.\n        // From these observations, we can see\
    \ that the problem is equivalent to finding the number of\n        // pairs (x,\
    \ y) of non-zero integers such that x * x + y * y + x + y is not divisible by\
    \ 3, but\n        // 3 divides x * x + y * y + x + y.\n        // We use a quadratic\
    \ equation to solve this.\n        // In particular, if we want to find the number\
    \ of triples for some n, then we need to find the number\n        // of pairs\
    \ (x, y) of non-zero integers, such that 3 divides x * x + y * y + x + y, but\
    \ x * x + y * y + x + y\n        // is not divisible by 3.\n        // For the\
    \ pair\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt8bdc48a.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// Let\
    \ S be the sum of the all the elements in the list a, \e[0m\n\e[31m16 |\e[0m \
    \       \e[34m// then the number of tuples (a[i], a[j], a[k]) where a[i] + a[j]\
    \ + a[k] is a multiple of 3\e[0m\n\e[31m17 |\e[0m        \e[34m// is approximately\
    \ S / 3.\e[0m\n\e[31m18 |\e[0m        \e[34m// The approximation is a rough estimate\
    \ as we will see later.\e[0m\n\e[31m19 |\e[0m        \e[34m// A list of squares\
    \ will have a sum approximately equal to \e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ S = n * (n + 1) * (2n + 1) / 6, which is n^3 / 3.\e[0m\n\e[31m21 |\e[0m    \
    \    \e[34m// 3 * S / n^3 is the approximation.\e[0m\n\e[31m22 |\e[0m        \e\
    [34m// The problem is to find all tuples for which the sum is a multiple of 3,\
    \ \e[0m\n\e[31m23 |\e[0m        \e[34m// but is not an exact multiple of 3.\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// Such a triple is of the form (x * x - x +\
    \ 1, x * x + 1, y * y + y + 1), where x and y are\e[0m\n\e[31m25 |\e[0m      \
    \  \e[34m// both non-zero integers.\e[0m\n\e[31m26 |\e[0m        \e[34m// Because\
    \ x * x - x + 1 + x * x + 1 + y * y + y + 1 = 3 * x * x + 3 * y * y + 4 * x +\
    \ 4 * y + 3\e[0m\n\e[31m27 |\e[0m        \e[34m// = 3 * (x * x + y * y + x + y)\
    \ + 1, the sum is a multiple of 3 only if 3 divides x * x + y * y + x + y,\e[0m\n\
    \e[31m28 |\e[0m        \e[34m// and x * x + y * y + x + y is not divisible by\
    \ 3.\e[0m\n\e[31m29 |\e[0m        \e[34m// From these observations, we can see\
    \ that the problem is equivalent to finding the number of\e[0m\n\e[31m30 |\e[0m\
    \        \e[34m// pairs (x, y) of non-zero integers such that x * x + y * y +\
    \ x + y is not divisible by 3, but\e[0m\n\e[31m31 |\e[0m        \e[34m// 3 divides\
    \ x * x + y * y + x + y.\e[0m\n\e[31m32 |\e[0m        \e[34m"
  stdout: ''
  timestamp: 1660028475
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \tvar total = 0l\n    \tfor (i\
    \ <- 1l to n - 2) {\n    \t\tfor (j <- i + 1l to n - 1) {\n    \t\t\tfor (k <-\
    \ j + 1l to n) {\n    \t\t\t\tif ((i * i - i + 1) + (j * j - j + 1) + (k * k -\
    \ k + 1) % 3 == 0) total += 1\n    \t\t\t}\n    \t\t}\n    \t}\n    \ttotal\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2onp6zv7.scala:26)\n\tat Problem.main(tmp2onp6zv7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val m = min(9l, n)\n    \
    \    if (n % 3 == 0) m * m\n        else if (n % 3 == 1) (m - 2) * (m - 2)\n \
    \       else (m - 4) * (m - 4)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxu3c7977.scala:22)\n\tat Problem.main(tmpxu3c7977.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028475
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        var total = 0\n        for (i <- 1 to n.toInt) {\n            a(i - 1)\
    \ = i * i - i + 1\n            for (j <- i + 1 to n.toInt) {\n               \
    \ for (k <- j + 1 to n.toInt) {\n                    if ((a(i - 1) + a(j - 1)\
    \ + a(k - 1)) % 3 == 0) {\n                        total += 1\n              \
    \      }\n                }\n            }\n        }\n        total\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb39obmsu.scala:30)\n\tat Problem.main(tmpb39obmsu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = (i * i - i + 1).toLong\n\
    \        }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n   \
    \         for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to\
    \ n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var sum = 0l\n        var\
    \ arr = ArrayBuffer[Long]()\n        for (i <- 1l to n) {\n            var temp\
    \ = (i * i) - i + 1\n            sum += temp\n            arr += temp\n      \
    \  }\n        var result = 0l\n        for (i <- 0l until n - 2) {\n         \
    \   for (j <- i + 1l until n - 1) {\n                if ((sum - arr(i.toInt) -\
    \ arr(j.toInt)) % 3 == 0) result += 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplpj9dwc5.scala:31)\n\tat Problem.main(tmplpj9dwc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.tabulate(n.toInt)(i\
    \ => i * i - i + 1)\n        a.map(x => (x, (1 to n.toInt).filter(y => x + y *\
    \ y - y + 1 < a(n.toInt - 1)).count(y => (x + y * y - y + 1) % 3 == 0))).map(x\
    \ => x._2 * (x._2 - 1) / 2).sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhd7ldsz.scala:19)\n\tat Problem.main(tmpnhd7ldsz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var s = new Array[Int](3)\n\
    \        var k = 1\n        var p = 0\n        while (k <= n) {\n            s(p)\
    \ = (k * k - k + 1) % 3\n            k += 1\n            p = (p + 1) % 3\n   \
    \     }\n        var c = 0l\n        if (s(0) == 0) c += 1\n        if (s(1) ==\
    \ 0) c += 1\n        if (s(2) == 0) c += 1\n        c += s(0) * (s(0) - 1) / 2\n\
    \        c += s(1) * (s(1) - 1) / 2\n        c += s(2) * (s(2) - 1) / 2\n    \
    \    c += s(0) * s(1) * s(2)\n        c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfxp_og01.scala:35)\n\tat Problem.main(tmpfxp_og01.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        for\
    \ (j <- 1 to n.toInt - 2) {\n            for (k <- j + 1 to n.toInt - 1) {\n \
    \               val sum = j * j - j + 1 + k * k - k + 1\n                if (sum\
    \ % 3 == 0) count += n.toInt - k\n            }\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5rxqpkvx.scala:25)\n\tat Problem.main(tmp5rxqpkvx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val c = new Array[Long](3)\n\
    \        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        for (i <- 0 until n.toInt) c(a(i).toInt % 3) +=\
    \ 1\n        val result = c(0) * (c(0) - 1) * (c(0) - 2) / 6\n        result +\
    \ c(1) * c(2) * (c(1) - 1) / 2 + c(2) * c(1) * (c(2) - 1) / 2\n        result.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpljllpu2p.scala:24)\n\tat Problem.main(tmpljllpu2p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val b = Buffer[Long]()\n\
    \        for (i <- 1l to n) {\n            b += i * i - i + 1\n        }\n   \
    \     b.sorted.filter(x => (x * 3) % 2 == 0).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5avjg1a1.scala:22)\n\tat Problem.main(tmp5avjg1a1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // First, we build a list\
    \ with n elements: a[i] = i * i - i + 1\n        // Then, we build a list with\
    \ all the possible sums of three indices of the first list.\n        // Finally,\
    \ we count the number of sums that are multiples of 3, and output the result.\n\
    \        //\n        // To build the list of sums, we iterate over all possible\
    \ pairs (i, j) of indices, and then \n        // we look for all indices k that\
    \ satisfy the inequality k > i and k > j. This is necessary to \n        // prevent\
    \ double counting the triples (i, j, k) and (k, i, j).\n        val l = ArrayBuffer[Long]()\n\
    \        for (i <- 0l until n) l += i * i - i + 1\n        val sums = ArrayBuffer[Long]()\n\
    \        for (i <- 0l until n) for (j <- i + 1l until n) {\n            for (k\
    \ <- j + 1l until n) {\n                sums += l(i.toInt) + l(j.toInt) + l(k.toInt)\n\
    \            }\n        }\n        // Filter out the sums that are multiple of\
    \ 3, and count them.\n        sums.filter(_ % 3 == 0).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps22yxhax.scala:34)\n\tat Problem.main(tmps22yxhax.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val l = (n + 1) / 2\n   \
    \     val u = n - l\n        val ln = (l + 1) * l / 2\n        val un = (u + 1)\
    \ * u / 2\n        ln * u + un * l\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5fkknpu.scala:22)\n\tat Problem.main(tmpm5fkknpu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbo0mm86m.scala:18)\n\tat Problem.main(tmpbo0mm86m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        //2 - 15 : List[Long] = List(3,\
    \ 5, 11, 21, 39, 69, 121, 203, 323, 489, 711, 979, 1281, 1611, 1973)\n       \
    \ //15 - 25 : List[Long] = List(2043, 2431, 2839, 3267, 3711, 4171, 4647, 5139,\
    \ 5647, 6171, 6711, 7267, 7839, 8427, 9029, 9647)\n        //25 - 30 : List[Long]\
    \ = List(10281, 10921, 11577, 12247, 12931, 13629, 14341, 15067, 15807, 16561,\
    \ 17331, 18111, 18907, 19717, 20541, 21379, 22231, 23097, 23977, 24871, 25779,\
    \ 26701, 27637, 28587, 29551, 30529, 31521)\n        //The following is a brute\
    \ force approach, which will not work for large n.\n        // var max = 0\n \
    \       // val a = Array.fill(n.toInt)(0)\n        // for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        // for (i <- 0 until n.toInt) {\n        //  \
    \   for (j <- i + 1 until n.toInt) {\n        //         for (k <- j + 1 until\
    \ n.toInt) {\n        //             if ((a(i) + a(j) + a(k)) % 3 == 0) max +=\
    \ 1\n        //         }\n        //     }\n        // }\n        // max\n  \
    \      //The following approach is optimal:\n        //The sum of three numbers\
    \ modulo 3 is equal to the sum of each modulo 3.\n        //  mod3 = 0 : 0, 3,\
    \ 6, 9, ...\n        //  mod3 = 1 : 1, 4, 7, 10, ...\n        //  mod3 = 2 : 2,\
    \ 5, 8, 11, ...\n        //The number of mod3 = 0 elements is 1 + (n - 1) / 3,\n\
    \        //  the number of mod3 = 1 elements is 1 + (n - 1) / 3,\n        // \
    \ the number of mod3 =\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpynsqqv83.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m//2 -\
    \ 15 : List[Long] = List(3, 5, 11, 21, 39, 69, 121, 203, 323, 489, 711, 979, 1281,\
    \ 1611, 1973)\e[0m\n\e[31m16 |\e[0m        \e[34m//15 - 25 : List[Long] = List(2043,\
    \ 2431, 2839, 3267, 3711, 4171, 4647, 5139, 5647, 6171, 6711, 7267, 7839, 8427,\
    \ 9029, 9647)\e[0m\n\e[31m17 |\e[0m        \e[34m//25 - 30 : List[Long] = List(10281,\
    \ 10921, 11577, 12247, 12931, 13629, 14341, 15067, 15807, 16561, 17331, 18111,\
    \ 18907, 19717, 20541, 21379, 22231, 23097, 23977, 24871, 25779, 26701, 27637,\
    \ 28587, 29551, 30529, 31521)\e[0m\n\e[31m18 |\e[0m        \e[34m//The following\
    \ is a brute force approach, which will not work for large n.\e[0m\n\e[31m19 |\e\
    [0m        \e[34m// var max = 0\e[0m\n\e[31m20 |\e[0m        \e[34m// val a =\
    \ Array.fill(n.toInt)(0)\e[0m\n\e[31m21 |\e[0m        \e[34m// for (i <- 0 until\
    \ n.toInt) a(i) = i * i - i + 1\e[0m\n\e[31m22 |\e[0m        \e[34m// for (i <-\
    \ 0 until n.toInt) {\e[0m\n\e[31m23 |\e[0m        \e[34m//     for (j <- i + 1\
    \ until n.toInt) {\e[0m\n\e[31m24 |\e[0m        \e[34m//         for (k <- j +\
    \ 1 until n.toInt) {\e[0m\n\e[31m25 |\e[0m        \e[34m//             if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) max += 1\e[0m\n\e[31m26 |\e[0m        \e[34m//    \
    \     }\e[0m\n\e[31m27 |\e[0m        \e[34m//     }\e[0m\n\e[31m28 |\e[0m    \
    \    \e[34m// }\e[0m\n\e[31m29 |\e[0m        \e[34m// max\e[0m\n\e[31m30 |\e[0m\
    \        \e[34m//The following approach is optimal:\e[0m\n\e[31m31 |\e[0m    \
    \    \e[34m//The sum of three numbers modulo 3 is equal to the sum of each modulo\
    \ 3.\e[0m\n\e[31m32 |\e[0m        \e[34m//  mod3 = 0 : 0, 3, 6, 9, ...\e[0m\n\e\
    [31m33 |\e[0m        \e[34m//  mod3 = 1 : 1, 4, 7, 10, ...\e[0m\n\e[31m34 |\e\
    [0m        \e[34m//  mod3 = 2 : 2, 5, 8, 11, ...\e[0m\n\e[31m35 |\e"
  stdout: ''
  timestamp: 1660028478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \tval modulo : Long = 1000000007l\n\
    \    \tval answers : Array[Long] = Array.fill(3)(0l)\n    \tvar combinatorics\
    \ : List[List[Long]] = List()\n    \tfor (i <- 1l to n - 2l) {\n    \t\tvar count\
    \ : Long = 0l\n    \t\tvar j : Long = 1l\n    \t\twhile (j <= i) {\n    \t\t\t\
    count += 1l\n    \t\t\tj += 1l\n    \t\t}\n    \t\tj = i + 1l\n    \t\twhile (j\
    \ <= n - 1l) {\n    \t\t\tcount += 1l\n    \t\t\tj += 1l\n    \t\t}\n    \t\t\
    combinatorics ::= List(i, count)\n    \t}\n    \tfor (List(i, count) <- combinatorics)\
    \ {\n    \t\tval div : Long = i / 3l\n    \t\tval mod : Long = i % 3l\n    \t\t\
    answers(mod.toInt) += count\n    \t\tif (mod == 0l) answers(0) -= div\n    \t\t\
    else answers(3 - mod.toInt) -= div\n    \t}\n    \tval answer : Long = (answers(0)\
    \ * (answers(0) - 1l) * (answers(0) - 2l) / 6l + \n    \t\tanswers(1) * (answers(1)\
    \ - 1l) * answers(2) / 2l + answers(2) * (answers(2) - 1l) * answers(1) / 2l)\
    \ % modulo\n    \tanswer\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp61w88x0l.scala:44)\n\tat Problem.main(tmp61w88x0l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var cnt = 0l\n        for (i <- 0 to n.toInt - 3) {\n       \
    \     for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) cnt += 1\n  \
    \              }\n            }\n        }\n        cnt\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        return 0;\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxl5vdtft.scala:18)\n\tat Problem.main(tmpxl5vdtft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028481
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val modulo = 3\n        val\
    \ a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt) a(i) = i *\
    \ i - i + 1\n        val sums = new Array[Long](modulo)\n        for (i <- 0 until\
    \ n.toInt) sums(a(i).toInt % modulo) += 1\n        val b = sums(0) * sums(0) -\
    \ sums(0)\n        val c = sums(1) * sums(2) - sums(1) - sums(2)\n        return\
    \ b + c\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmlqy1ovb.scala:25)\n\tat Problem.main(tmpmlqy1ovb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(1l)\n\
    \        for (i <- 1 until n.toInt) {\n            a(i) = i * i - i + 1\n    \
    \    }\n        var count = 0l\n        for (i <- 0 until n.toInt - 2) {\n   \
    \         for (j <- i + 1 until n.toInt - 1) {\n                for (k <- j +\
    \ 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzxibg0be.scala:32)\n\tat Problem.main(tmpzxibg0be.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        (1l to n).foldLeft(0l)((acc,\
    \ x) => {\n            val a = x * x - x + 1\n            acc + (1l to x - 1).count((y)\
    \ => {\n                (y * y - y + 1 + a) % 3 == 0 && (n - y) % 3 == 0\n   \
    \         })\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu8n71tnu.scala:24)\n\tat Problem.main(tmpu8n71tnu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028484
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        val b = new\
    \ Array[Array[Long]](3)\n        for (i <- 0 until 3) b(i) = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) b(a(i).toInt % 3)(i) = a(i)\n        var total\
    \ = 0l\n        for (i <- 0 until 3) {\n            var current = 0l\n       \
    \     for (j <- 0 until n.toInt) {\n                current += b(i)(j)\n     \
    \           total += current\n            }\n        }\n        total\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnt97yb_w.scala:31)\n\tat Problem.main(tmpnt97yb_w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        var\
    \ list = List[Int]()\n        for (i <- 1 to n.toInt) {\n            list = (i\
    \ * i - i + 1) :: list\n        }\n        for (i <- 0 to n.toInt - 3) {\n   \
    \         for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to\
    \ n.toInt - 1) {\n                    if ((list(i) + list(j) + list(k)) % 3 ==\
    \ 0) {\n                        count += 1\n                    }\n          \
    \      }\n            }\n        }\n        return count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt\
    \ + 1)\n        for (i <- 1 to n.toInt) a(i) = i * i - i + 1\n        var count\
    \ = 0l\n        for (i <- 1 to n.toInt - 2) {\n            for (j <- i + 1 to\
    \ n.toInt - 1) {\n                for (k <- j + 1 to n.toInt) {\n            \
    \        if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n  \
    \          }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        n.toLong - (n - 1) / 3 -\
    \ (n - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprrhh_f68.scala:18)\n\tat Problem.main(tmprrhh_f68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028484
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // My Solution\n        val\
    \ lst = (1l to n).map(x => x * x - x + 1).toList\n        val triples = for {i\
    \ <- 0 to lst.length - 3; j <- i + 1 to lst.length - 2; k <- j + 1 to lst.length\
    \ - 1} yield (lst(i), lst(j), lst(k))\n        triples.filter(x => (x._1 + x._2\
    \ + x._3) % 3 == 0).length.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028486
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We use the fact that i\
    \ < j < k, \n        // and a[i] + a[j] + a[k] is a multiple of 3 iff a[i] + a[j]\
    \ + a[k] == a[i] + a[j] + a[i + 1]\n        // We also use the fact that i < j\
    \ < k iff j - i > 1 and k - j > 1\n        // Then we have that the number of\
    \ triples is\n        // n(n - 1)(n - 2) - (n - 1)(n - 2)(n - 3) + (n - 2)(n -\
    \ 3)(n - 4)\n        // = n(n - 1)(n - 2) - (n - 1)(n - 2)(n - 3)\n        val\
    \ mod = 1000000007l\n        def getMaxTriplesHelper(n : Long, acc : Long) : Long\
    \ = {\n            if (n == 1) acc\n            else getMaxTriplesHelper(n - 1,\
    \ (acc + n * (n - 1) * (n - 2)) % mod)\n        }\n        getMaxTriplesHelper(n,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9x0lvxmd.scala:29)\n\tat Problem.main(tmp9x0lvxmd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n\t\t// Your Code Here\n\t\t0l\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsski5k9a.scala:17:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660028483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var res = 0l\n        val\
    \ a = Array.fill(n.toInt)(0l)\n        for (i <- 0 until n.toInt) a(i) = i * i\
    \ - i + 1\n        for (i <- 0 until n.toInt - 2)\n            for (j <- i + 1\
    \ until n.toInt - 1)\n                for (k <- j + 1 until n.toInt)\n       \
    \             if ((a(i) + a(j) + a(k)) % 3 == 0) res += 1\n        res\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxg8ujy0d.scala:25)\n\tat Problem.main(tmpxg8ujy0d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028488
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        var i = 0\n        for (i <- 0 until n.toInt) {\n            a(i) = i\
    \ * i - i + 1\n        }\n        var count = 0\n        for (i <- 0 until n.toInt)\
    \ {\n            for (j <- i + 1 until n.toInt) {\n                for (k <- j\
    \ + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0)\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ecmcg44.scala:33)\n\tat Problem.main(tmp1ecmcg44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028488
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \tval a = new Array[Long](n.toInt\
    \ + 1)\n    \tval b = new Array[Long](n.toInt + 1)\n    \tval c = new Array[Long](n.toInt\
    \ + 1)\n    \tfor (i <- 1 to n.toInt) {\n    \t\ta(i) = (i * i - i + 1) % 3\n\
    \    \t\tb(i) = (b(i - 1) + a(i)) % 3\n    \t\tc(i) = (c(i - 1) + (if (b(i) ==\
    \ 0) 1 else 0))\n    \t}\n    \tvar result = 0l\n    \tfor (i <- 1 to n.toInt)\
    \ {\n    \t\tresult += (if (a(i) == 0) c(i - 1) else 0)\n    \t}\n    \tresult\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl_h__l23.scala:31)\n\tat Problem.main(tmpl_h__l23.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028487
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val k = n / 3\n        k\
    \ * (k + 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqe2cmluj.scala:20)\n\tat Problem.main(tmpqe2cmluj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028486
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \t// the sum of 1,3,5,...,(2n-1)\
    \ is 3n(n-1)/2\n    \t// the sum of n, n+2, n+4, ..., 2n-2 is n(n-1)\n    \t//\
    \ therefore a[i] + a[j] + a[k] must be a multiple of 3\n    \t// iff i, j, k must\
    \ be all even or all odd\n    \tvar pairs = ArrayBuffer[Int]()\n    \tvar cur\
    \ = 1\n    \twhile (cur <= n) {\n    \t\tif (cur % 2 == 0) pairs += cur\n    \t\
    \tcur += 1\n    \t}\n    \tval res = ((pairs.length - 1) * pairs.length) / 2\n\
    \    \tres\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7z7_jx_.scala:30)\n\tat Problem.main(tmpe7z7_jx_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028488
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // 2 0 1 5 4\n        val\
    \ a = (1 to n.toInt).map(x => ((x * x) - x + 1) % 3).toList\n        // 1 0 0\
    \ 1 0\n        val d = Array.fill(3)(0)\n        for (x <- a) d(x) += 1\n    \
    \    // List(1, 0, 0, 1, 0)\n        val t = for (x <- d) yield ((2 * x * (x -\
    \ 1)) / 2)\n        // List(1, 0, 0, 1, 0)\n        (t(0) * t(1) * t(2)) + (t(0)\
    \ * t(3) * t(3)) + (t(2) * t(1) * t(3))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length\
    \ 3\n\tat Problem$.getMaxTriples(tmpht0vq464.scala:23)\n\tat Problem$.main(tmpht0vq464.scala:26)\n\
    \tat Problem.main(tmpht0vq464.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028488
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbo0mm86m.scala:18)\n\tat Problem.main(tmpbo0mm86m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \tval list = for (i <- 1l to\
    \ n) yield i * i - i + 1\n    \tval count = for (i <- 0 until list.length; j <-\
    \ (i + 1) until list.length; k <- (j + 1) until list.length) yield if ((list(i)\
    \ + list(j) + list(k)) % 3 == 0) 1 else 0\n    \tcount.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028489
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.tabulate(n.toInt)(x\
    \ => x * x - x + 1)\n        var max = 0l\n        for (i <- 0 until n.toInt -\
    \ 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                if ((a(i)\
    \ + a(j)) % 3 == 0) {\n                    for (k <- j + 1 until n.toInt) {\n\
    \                        if ((a(i) + a(j) + a(k)) % 3 == 0) max += 1\n       \
    \             }\n                }\n            }\n        }\n        max\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprssc1bz0.scala:29)\n\tat Problem.main(tmprssc1bz0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028489
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.tabulate(n.toInt)(i\
    \ => i * i - i + 1)\n        return a.combinations(3).map(c => c.sum).count(_\
    \ % 3 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ewkb73r.scala:19)\n\tat Problem.main(tmp8ewkb73r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028489
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbo0mm86m.scala:18)\n\tat Problem.main(tmpbo0mm86m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val mod3 = n % 3\n      \
    \  val m = if (mod3 == 0) n / 3 else (n - mod3) / 3\n        return m * (m + 1)\
    \ / 2\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpntwemjgm.scala:21)\n\tat Problem.main(tmpntwemjgm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028488
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n    \tval m = new Array[Long](n.toInt)\n\
    \    \tfor (i <- 1 to n.toInt) {\n    \t\tm(i - 1) = i * i - i + 1\n    \t}\n\
    \    \tval s = new Array[Long](3)\n    \tvar r = 0\n    \tfor (i <- 0 to n.toInt\
    \ - 3) {\n    \t\tfor (j <- i + 1 to n.toInt - 2) {\n    \t\t\tfor (k <- j + 1\
    \ to n.toInt - 1) {\n    \t\t\t\ts(0) = m(i)\n    \t\t\t\ts(1) = m(j)\n    \t\t\
    \t\ts(2) = m(k)\n    \t\t\t\tif (s.sum % 3 == 0) r += 1\n    \t\t\t}\n    \t\t\
    }\n    \t}\n    \tr\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028490
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var r = 0l\n\
    \        for (i <- 0 to n.toInt - 3) {\n            val sum = a(i)\n         \
    \   for (j <- i + 1 to n.toInt - 2) {\n                if ((sum + a(j)) % 3 ==\
    \ 0) {\n                    for (k <- j + 1 to n.toInt - 1) {\n              \
    \          if ((sum + a(j) + a(k)) % 3 == 0) r += 1\n                    }\n \
    \               }\n            }\n        }\n        r\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxxea39h7.scala:31)\n\tat Problem.main(tmpxxea39h7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var result = 0l\n       \
    \ val mod3 = (1l to n).map {_ * _ - _ + 1}.filter {_ % 3 == 0}.groupBy {_ % 3}\n\
    \        val lst1 = mod3.getOrElse(1, List())\n        val lst2 = mod3.getOrElse(2,\
    \ List())\n        if (lst1.size >= 2) {\n            result += lst1.combinations(2).count\
    \ {p => p(0) + p(1) + lst2.find{p(0) + p(1) + _ == 0}.getOrElse(0) == 0}\n   \
    \     }\n        if (lst2.size >= 2) {\n            result += lst2.combinations(2).count\
    \ {p => p(0) + p(1) + lst1.find{p(0) + p(1) + _ == 0}.getOrElse(0) == 0}\n   \
    \     }\n        if (lst1.size >= 1 && lst2.size >= 1) {\n            result +=\
    \ lst1.map {i => lst2.count {j => j + i + lst1.find{i + j + _ == 0}.getOrElse(0)\
    \ == 0}}.sum\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp8okyj8gd.scala:16:34 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmod3\e[0m = (\e[31m1l\e\
    [0m to n).map {_ * _ - _ + \e[31m1\e[0m}.filter {_ % \e[31m3\e[0m == \e[31m0\e\
    [0m}.groupBy {_ % \e[31m3\e[0m}\n\e[31m\e[31m   |\e[0m                       \
    \           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \   Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8okyj8gd.scala:16:59 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mmod3\e[0m = (\e[31m1l\e[0m to n).map {_ * _ -\
    \ _ + \e[31m1\e[0m}.filter {_ % \e[31m3\e[0m == \e[31m0\e[0m}.groupBy {_ % \e\
    [31m3\e[0m}\n\e[31m\e[31m   |\e[0m                                           \
    \              ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Nothing, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8okyj8gd.scala:16:80\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmod3\e[0m = (\e[31m1l\e[0m to n).map {_ * _ - _ + \e[31m1\e[0m}.filter {_\
    \ % \e[31m3\e[0m == \e[31m0\e[0m}.groupBy {_ % \e[31m3\e[0m}\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \    ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Nothing, but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\e[31m\
    \   |\e[0m  import Byte.byte2int\n\e[31m   "
  stdout: ''
  timestamp: 1660028491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        var cnt = 0\n        for (i <- 0 until n.toInt) {\n            a(i) =\
    \ i * i - i + 1\n            for (j <- i + 1 until n.toInt) {\n              \
    \  for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) cnt += 1\n                }\n            }\n        }\n        cnt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzrxm7sd.scala:29)\n\tat Problem.main(tmpbzrxm7sd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code goes here\n\
    \        return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfy62r1k9.scala:19)\n\tat Problem.main(tmpfy62r1k9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We have to find the number\
    \ of triplets (i, j, k) that satisfy the\n        // following conditions:\n \
    \       // 1. 1 \u2264 i < j < k \u2264 n\n        // 2. a[i] + a[j] + a[k] \u2261\
    \ 0 (mod 3)\n        // 3. 1 \u2264 a[i] < a[j] < a[k] \u2264 n\xB2.\n       \
    \ // According to the given conditions, we have that\n        // a[i] = i * i\
    \ - i + 1,\n        // so we have that\n        // a[i] \u2264 n\xB2,\n      \
    \  // a[i] = i * i - i + 1 = (i - 1) * i + 1.\n        // Since a[i] > a[i - 1],\
    \ then\n        // i > 1 + a[i - 1].\n        // So we have that\n        // a[i]\
    \ = (i - 1) * i + 1 > a[i - 1] + 1\n        // (i - 1) * i > a[i - 1]\n      \
    \  // i * i - i > a[i - 1] - i\n        // i * i > a[i - 1]\n        // (i - 1)\xB2\
    \ + (i - 1) + 1 > a[i - 1]\n        // (i - 1)\xB2 + i > a[i - 1]\n        //\
    \ i\xB2 - 2i + 1 + i > a[i - 1]\n        // i\xB2 - i > a[i - 1]\n        // i\
    \ * i - i > a[i - 1]\n        // a[i] = i * i - i + 1 > a[i - 1] + 1\n       \
    \ // a[i] > a[i - 1] + 1\n        // a[i] - a[i - 1] > 1\n        // a[i] - 1\
    \ > a[i - 1]\n        // Now we can form the inequality\n        // a[i] + a[j]\
    \ + a[k] > a[i - 1] + a[j - 1] + a[k - 1] + 3\n        // a[i] + a[j] + a[k] >\
    \ (a[i - 1] + a[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr56b_tpf.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ have to find the number of triplets (i, j, k) that satisfy the\e[0m\n\e[31m16\
    \ |\e[0m        \e[34m// following conditions:\e[0m\n\e[31m17 |\e[0m        \e\
    [34m// 1. 1 \u2264 i < j < k \u2264 n\e[0m\n\e[31m18 |\e[0m        \e[34m// 2.\
    \ a[i] + a[j] + a[k] \u2261 0 (mod 3)\e[0m\n\e[31m19 |\e[0m        \e[34m// 3.\
    \ 1 \u2264 a[i] < a[j] < a[k] \u2264 n\xB2.\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ According to the given conditions, we have that\e[0m\n\e[31m21 |\e[0m      \
    \  \e[34m// a[i] = i * i - i + 1,\e[0m\n\e[31m22 |\e[0m        \e[34m// so we\
    \ have that\e[0m\n\e[31m23 |\e[0m        \e[34m// a[i] \u2264 n\xB2,\e[0m\n\e\
    [31m24 |\e[0m        \e[34m// a[i] = i * i - i + 1 = (i - 1) * i + 1.\e[0m\n\e\
    [31m25 |\e[0m        \e[34m// Since a[i] > a[i - 1], then\e[0m\n\e[31m26 |\e[0m\
    \        \e[34m// i > 1 + a[i - 1].\e[0m\n\e[31m27 |\e[0m        \e[34m// So we\
    \ have that\e[0m\n\e[31m28 |\e[0m        \e[34m// a[i] = (i - 1) * i + 1 > a[i\
    \ - 1] + 1\e[0m\n\e[31m29 |\e[0m        \e[34m// (i - 1) * i > a[i - 1]\e[0m\n\
    \e[31m30 |\e[0m        \e[34m// i * i - i > a[i - 1] - i\e[0m\n\e[31m31 |\e[0m\
    \        \e[34m// i * i > a[i - 1]\e[0m\n\e[31m32 |\e[0m        \e[34m// (i -\
    \ 1)\xB2 + (i - 1) + 1 > a[i - 1]\e[0m\n\e[31m33 |\e[0m        \e[34m// (i - 1)\xB2\
    \ + i > a[i - 1]\e[0m\n\e[31m34 |\e[0m        \e[34m// i\xB2 - 2i + 1 + i > a[i\
    \ - 1]\e[0m\n\e[31m35 |\e[0m        \e[34m// i\xB2 - i > a[i - 1]\e[0m\n\e[31m36\
    \ |\e[0m        \e[34m// i * i - i > a[i - 1]\e[0m\n\e[31m37 |\e[0m        \e\
    [34m// a[i] = i * i - i + 1 > a[i - 1] + 1\e[0m\n\e[31m38 |\e[0m        \e[34m//\
    \ a[i] > a[i - 1] + 1\e[0m\n\e[31m39 |\e[0m        \e[34m// a[i] - a[i - 1] >\
    \ 1\e[0m\n\e[31m40 |\e[0m        \e[34m// a[i] - 1 > a[i - 1]\e[0m\n\e[31m41 |\e\
    [0m        \e[34m// Now we can form the inequality\e[0m\n\e[31m42 |\e[0m     \
    \   \e[34m"
  stdout: ''
  timestamp: 1660028491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // O(n^3) - time, O(1) -\
    \ space\n        var cnt = 0l\n        var i = 1l\n        while (i <= n) {\n\
    \            var j = i + 1\n            while (j <= n) {\n                var\
    \ k = j + 1\n                while (k <= n) {\n                    if ((i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) cnt += 1\n              \
    \      k += 1\n                }\n                j += 1\n            }\n    \
    \        i += 1\n        }\n        cnt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1l to n).map(x =>\
    \ x * x - x + 1).toList\n        return (for (i <- 1l to n; j <- i + 1l to n;\
    \ k <- j + 1l to n) yield (a(i.toInt - 1) + a(j.toInt - 1) + a(k.toInt - 1))).count(_\
    \ % 3 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val upperBound : Long = n\
    \ * n - n + 1\n        val dp : Array[Long] = new Array[Long](upperBound.toInt\
    \ + 1)\n        for (i <- 1 to n.toInt) {\n            val v : Long = i * i -\
    \ i + 1\n            for (d <- 1 to v) {\n                if (v + d <= upperBound)\
    \ dp(v.toInt) += 1\n                if (v - d >= 1) dp(v.toInt) += 1\n       \
    \     }\n        }\n        var result : Long = 0\n        for (i <- 1 to n.toInt)\
    \ {\n            val v : Long = i * i - i + 1\n            for (j <- i + 1 to\
    \ n.toInt) {\n                val w : Long = j * j - j + 1\n                if\
    \ ((v + w) % 3 == 0) {\n                    result += dp(w.toInt)\n          \
    \      }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwu4kzrm8.scala:19:27\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m (d\
    \ <- \e[31m1\e[0m to v) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (v : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // 1 \u2264 n \u2264 10^12\n\
    \        // 1 \u2264 a[i] \u2264 10^18\n        // 3 * 10^12 * 10^18 * 3 * 10^18\
    \ * 3 * 10^18 * 3 * 10^18 * 3 * 10^18 * 3 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2\
    \ * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18\
    \ * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2\
    \ * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18\
    \ * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2\
    \ * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18\
    \ * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2\
    \ * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18\
    \ * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2\
    \ * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18\
    \ * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2\
    \ * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18\
    \ * 2 *\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwwupjbma.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// 1\
    \ \u2264 n \u2264 10^12\e[0m\n\e[31m16 |\e[0m        \e[34m// 1 \u2264 a[i] \u2264\
    \ 10^18\e[0m\n\e[31m17 |\e[0m        \e[34m// 3 * 10^12 * 10^18 * 3 * 10^18 *\
    \ 3 * 10^18 * 3 * 10^18 * 3 * 10^18 * 3 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 *\
    \ 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18\
    \ * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2\
    \ * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18\
    \ * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2\
    \ * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18\
    \ * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2\
    \ * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18\
    \ * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2\
    \ * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18\
    \ * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2\
    \ * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18 * 2 * 10^18\
    \ * 2 *\e[0m\n\e[31m18 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We have to find for each\
    \ i and j, how many valid k, \n        // such that i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\n        // We can use cumulative sum for this purpose.\n\
    \        // Let us suppose that we have computed for each i and j, the number\
    \ of valid k.\n        // For each new j, we have to find the number of valid\
    \ k.\n        // We can use the fact that a[i] + a[j] + a[k] = 3 * k - (i + j).\n\
    \        // So, for each j, we will find the index i < j, \n        // such that\
    \ a[i] + a[j] + a[k] = 3 * k - (i + j) is a multiple of 3.\n        // In this\
    \ way, we will find the number of valid k.\n        // \n        // \n       \
    \ // Let us find how many times a number i appear in the array a,\n        //\
    \ such that a[i] + a[j] + a[k] = 3 * k - (i + j) is a multiple of 3.\n       \
    \ val a = Array.fill(n.toInt)((1, 0l))\n        for (i <- 1 until n.toInt) {\n\
    \            a(i) = (i * i - i + 1, a(i - 1)._2 + i * i - i + 1)\n        }\n\
    \        var ans = 0l\n        for (j <- 2 until n.toInt) {\n            val x\
    \ = 3 * j - a(j)._2\n            var l = 0\n            var r = j - 1\n      \
    \      while (l <= r) {\n                val mid = (l + r) / 2\n             \
    \   if (x < a(mid)._2) r = mid - 1\n                else if (x > a(mid)._2) l\
    \ = mid + 1\n                else {\n                    l = mid\n           \
    \         break\n                }\n            }\n            ans += l\n    \
    \    }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyahpjw7s.scala:43:20 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028491
