language: scala
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var i : Long = 0l\n        var j : Long =\
    \ 1l\n        for (k <- 2l until n + 1l) {\n            val t : Long = i + j\n\
    \            i = j\n            j = t\n        }\n        return j\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978486
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 1l\n        var b = 1l\n        var\
    \ c = a + b\n        if (n == 1l) return a\n        if (n == 2l) return b\n  \
    \      for (i <- 3l to n) {\n            a = b\n            b = c\n          \
    \  c = a + b\n        }\n        return c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqrrv8nvp.scala:25)\n\tat Problem.main(tmpqrrv8nvp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978486
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        for (i<-1l to n) {\n            val c : Long = a + b\n            a =\
    \ b\n            b = c\n        }\n        return a\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978486
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib(n : Long, n_1 : Long, n_2 : Long)\
    \ : Long = {\n            if (n == 0) return n_2\n            else return fib(n\
    \ - 1, n_1 + n_2, n_1)\n        }\n        return fib(n, 1, 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val m = n.toInt\n        val mem = Array.fill(m\
    \ + 1)(BigInt(0))\n        mem(0) = BigInt(0)\n        mem(1) = BigInt(1)\n  \
    \      for (i <- 2 to m) {\n            mem(i) = mem(i - 1) + mem(i - 2)\n   \
    \     }\n        mem(m).toLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978486
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0)\n            0\n        else if\
    \ (n == 1)\n            1\n        else\n            fib(n - 1) + fib(n - 2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var c : Long = 0\n        var d : Long = 1\n        var x : Long = n\n\
    \        var fib : Long = 0\n        var bit : Long = 0\n        var i : Long\
    \ = 1\n        while (i <= x) {\n            if ((x & i) != 0) {\n           \
    \     val temp : Long = a * c + b * d\n                b = a * d + b * c + b *\
    \ d\n                a = temp\n            }\n            val temp : Long = c\
    \ * c + d * d\n            d = 2 * c * d + d * d\n            c = temp\n     \
    \       i <<= 1\n        }\n        a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0l\n        var b : Long =\
    \ 1l\n        while (n > 0) {\n            val c : Long = a + b\n            a\
    \ = b\n            b = c\n            n = n - 1\n        }\n        return a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp7o6ukqzr.scala:18:14 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n = n - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978481
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val zero = BigInt(0)\n        val one = BigInt(1)\n\
    \        val two = BigInt(2)\n        def fibHelper(a : BigInt, b : BigInt, p\
    \ : BigInt, q : BigInt, count : Long) : BigInt = {\n            if (count == 0)\
    \ b\n            else if (count % 2 == 0) fibHelper(a, b, p * p + q * q, q * q\
    \ + 2 * p * q, count / 2)\n            else fibHelper(b * q + a * q + a * p, b\
    \ * p + a * q, p, q, count - 1)\n        }\n        if (n == 0) 0\n        else\
    \ fibHelper(one, zero, one, one, n - 1).toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuwa4fxry.scala:24)\n\tat Problem.main(tmpuwa4fxry.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib(a : Long, b : Long, n : Long) : Long\
    \ = if (n <= 0) a else fib(b, a + b, n - 1)\n        fib(0, 1, n)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n <= 2) 1\n        else fib(n - 1) + fib(n\
    \ - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) ==\
    \ (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n \
    \   assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if(n == 0) 0\n        else if(n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        for (i <- 0l until n) {\n            var next : Long = a + b\n      \
    \      a = b\n            b = next\n        }\n        a\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978486
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        var a = 1l\n\
    \        var b = 1l\n        var c = a + b\n        for (i <- 3 to n.toInt) {\n\
    \            c = a + b\n            a = b\n            b = c\n        }\n    \
    \    return c\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq2bk4495.scala:25)\n\tat Problem.main(tmpq2bk4495.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978486
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fibHelper(x : Long, y : Long, remaining\
    \ : Long) : Long = remaining match {\n            case 0 => x\n            case\
    \ _ => fibHelper(y, x + y, remaining - 1)\n        }\n        fibHelper(0, 1,\
    \ n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val memo = Array.fill[Long](n.toInt + 1)(0)\n\
    \        def fibHelp(n : Long) : Long = {\n            memo(n.toInt) match {\n\
    \                case 0 => {\n                    val ans = if (n < 2) 1 else\
    \ fibHelp(n - 1) + fibHelp(n - 2)\n                    memo(n.toInt) = ans\n \
    \                   ans\n                }\n                case x => x\n    \
    \        }\n        }\n        fibHelp(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg6we3s26.scala:26)\n\tat Problem.main(tmpg6we3s26.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978486
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0)\n            0\n        else if\
    \ (n == 1)\n            1\n        else\n            fib(n - 1) + fib(n - 2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val sum : Long = a + b\n                a = b\n                b = sum\n\
    \                i += 1\n            }\n        }\n        return a\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var i : Long = 0\n        var j : Long = 1\n\
    \        while (i < n) {\n            val k : Long = i + j\n            i = j\n\
    \            j = k\n        }\n        return i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3faixnqa.scala:22)\n\tat Problem.main(tmp3faixnqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        @tailrec def tail(n : Long, cur : Long, next\
    \ : Long) : Long = n match {\n            case 0 => cur\n            case _ =>\
    \ tail(n - 1, next, cur + next)\n        }\n        tail(n, 0, 1)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp6yqr3de.scala:12:9 -------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[35m@tailrec\e[0m \e[33mdef\e[0m \e[36mtail\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m, \e[36mcur\e[0m : \e[35mLong\e[0m, \e[36mnext\e\
    [0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = n \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m         ^^^^^^^\e[0m\n\e[31m   |\e[0m         Not found: type tailrec\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978482
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // TODO: implement this function.\n      \
    \  var a = 0l\n        var b = 1l\n        for (i <- 1l to n) {\n            var\
    \ tmp = a\n            a = b\n            b = tmp + b\n        }\n        a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0)\n            return 0;\n     \
    \   if (n == 1)\n            return 1;\n        fib(n - 1) + fib(n - 2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var x = 1l\n        var y = 1l\n        for\
    \ (i <- 3l to n) {\n            val z = x + y\n            x = y\n           \
    \ y = z\n        }\n        y\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else\
    \ if (n == 1) {\n            1\n        } else {\n            fib((n - 1)) + fib((n\
    \ - 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978489
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def pairProduct(a : (Long, Long), b : (Long,\
    \ Long)) : (Long, Long) = {\n            val (x, y) = a\n            val (z, w)\
    \ = b\n            ((x * z + y * w), (x * w + y * (z + w)))\n        }\n     \
    \   if (n == 0) return 0\n        else {\n            var a = (1l, 0l)\n     \
    \       var b = (0l, 1l)\n            for (i <- 2l to n) {\n                var\
    \ c = pairProduct(a, b)\n                a = b\n                b = c\n      \
    \      }\n            return b._1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2jjte__z.scala:30)\n\tat Problem.main(tmp2jjte__z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n <= 1) {\n            return 1\n    \
    \    }\n        var a : Long = 1\n        var b : Long = 1\n        var i : Long\
    \ = 2\n        while (i < n) {\n            {\n                {\n           \
    \         val t : Long = a\n                    a = b\n                    b =\
    \ t + b\n                }\n                i += 1\n            }\n        }\n\
    \        return b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var c : Long = 1\n        while(n > 0) {\n            c = a + b\n   \
    \         a = b\n            b = c\n            n -= 1\n        }\n        a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5cyt_3xp.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978493
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def _fib(i : Long, n : Long, p1 : Long, p2\
    \ : Long) : Long = {\n            if (i == n) p1\n            else _fib(i + 1,\
    \ n, p2, p1 + p2)\n        }\n        _fib(0, n, 0, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var f0 : Long = 0l\n        var f1 : Long\
    \ = 1l\n        var i : Long = 0l\n        while (i < n) {\n            {\n  \
    \              val f2 : Long = f0 + f1\n                f0 = f1\n            \
    \    f1 = f2\n                i += 1l\n            }\n        }\n        return\
    \ f0\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while ((i < n)) {\n            {\n        \
    \        val tmp : Long = a\n                a = b\n                b = tmp +\
    \ b\n                i = i + 1\n            }\n        }\n        return a\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val t = sqrt(5d)\n        val res = (pow((1d\
    \ + t) / 2d, n) - pow((1d - t) / 2d, n)) / t\n        return round(res)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        var v = Array(0L, 1L)\n        for (i <- 2 to n.toInt) {\n\
    \            v(0) = v(0) + v(1)\n            v(0) = v(0) % 1000000007\n      \
    \      v(1) = v(0) + v(1)\n            v(1) = v(1) % 1000000007\n        }\n \
    \       v(1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptg2sfqnv.scala:24)\n\tat Problem.main(tmptg2sfqnv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n <= 1) {\n            return 1l\n   \
    \     }\n        var a : Long = 1l\n        var b : Long = 1l\n        for (i\
    \ <- 2l to n) {\n            val t : Long = a\n            a = b\n           \
    \ b = t + b\n        }\n        return b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkf8i11hp.scala:25)\n\tat Problem.main(tmpkf8i11hp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val map = scala.collection.mutable.Map.empty[Long,\
    \ Long]\n        def fibHelper(n : Long) : Long = {\n            if (n == 0) 0l\n\
    \            else if (n == 1) 1l\n            else if (map.contains(n)) map(n)\n\
    \            else {\n                val result = fibHelper(n - 1) + fibHelper(n\
    \ - 2)\n                map(n) = result\n                result\n            }\n\
    \        }\n        fibHelper(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def helper(a : Long, b : Long, n : Long) :\
    \ Long = {\n            if (n == 0) a\n            else helper(b, a + b, n - 1)\n\
    \        }\n        helper(0, 1, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var n1 : Long = 0l\n        var n2 : Long\
    \ = 1l\n        var i : Long = 0l\n        while (i < n) {\n            {\n  \
    \              val next : Long = n1 + n2\n                n1 = n2\n          \
    \      n2 = next\n                i += 1l\n            }\n        }\n        return\
    \ n1\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var memo = List((0L, 1L))\n        def f(n\
    \ : Long) : Long = n match {\n            case 0 => 0\n            case 1 => 1\n\
    \            case n if n % 2 == 0 => {\n                val l = n / 2\n      \
    \          val a = memo.find(t => t._1 == l).getOrElse(memo.find(t => t._1 < l).getOrElse((0L,\
    \ 0L)))._2\n                val b = f(l - 1)\n                val c = a * (2 *\
    \ b + a)\n                val d = b * b + a * a\n                memo = (l, c)\
    \ :: (l + 1, d) :: memo\n                c\n            }\n            case n\
    \ if n % 2 == 1 => {\n                val l = (n - 1) / 2\n                val\
    \ a = memo.find(t => t._1 == l).getOrElse(memo.find(t => t._1 < l).getOrElse((0L,\
    \ 0L)))._2\n                val b = f(l)\n                val c = a * (2 * b -\
    \ a)\n                val d = b * b + a * a\n                memo = (l, c) ::\
    \ (l + 1, d) :: memo\n                d\n            }\n        }\n        f(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi2o_duxh.scala:38)\n\tat Problem.main(tmpi2o_duxh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        for(i <- 1l until n) {\n            val t : Long = a\n            a =\
    \ b\n            b = t + b\n        }\n        b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        return n match {\n            case 1 => 1\n\
    \            case 2 => 1\n            case n => fib(n - 1) + fib(n - 2)\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) ==\
    \ (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n \
    \   assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var _fib = Buffer(0l, 1l)\n        def fib(n\
    \ : Long) : Long = {\n            if (n < _fib.length) return _fib(n.toInt)\n\
    \            var i = _fib.length\n            var next = _fib(i - 1) + _fib(i\
    \ - 2)\n            while (i <= n) {\n                _fib += next\n         \
    \       i += 1\n                next = _fib(i - 1) + _fib(i - 2)\n           \
    \ }\n            next\n        }\n        fib(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpog6lq7su.scala:27)\n\tat Problem.main(tmpog6lq7su.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var fn = List[Long](0, 1)\n        for (i\
    \ <- 2 to n.toInt) {\n            fn = fn(0) + fn(1) :: fn\n        }\n      \
    \  fn(0)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsl0tjibz.scala:19)\n\tat Problem.main(tmpsl0tjibz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // >>> fib((10l))\n        // (55l)\n    \
    \    // >>> fib((1l))\n        // (1l)\n        // >>> fib((8l))\n        // (21l)\n\
    \        var fn_2 : Long = 1;\n        var fn_1 : Long = 1;\n        if (n ==\
    \ 1) {\n            return 1;\n        }\n        else {\n            if (n ==\
    \ 2) {\n                return 1;\n            }\n            else {\n       \
    \         var i : Long = 3;\n                while (i <= n) {\n              \
    \      {\n                        var tmp : Long = fn_1;\n                   \
    \     fn_1 = fn_1 + fn_2;\n                        fn_2 = tmp;\n             \
    \           i = i + 1;\n                    }\n                }\n           \
    \     return fn_1;\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // return fib(n)\n        var a = 0l\n   \
    \     var b = 1l\n        if (n == 0) a\n        else if (n == 1) b\n        else\
    \ {\n            var i = 0l\n            while (i < n) {\n                val\
    \ c = a + b\n                a = b\n                b = c\n                i +=\
    \ 1\n            }\n            a\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // We use (1 - sqrt(5)) / 2 and (1 + sqrt(5))\
    \ / 2 to calculate the n-th Fibonacci number.\n        // Since we need long,\
    \ we first use BigInt for this.\n        val sqrt5 = BigInt(sqrt(5)).doubleValue()\n\
    \        val sqrt52 = BigInt(sqrt(5) * sqrt(5)).doubleValue()\n        val base\
    \ = (1 - sqrt5) / 2\n        val base2 = (1 + sqrt5) / 2\n        val result =\
    \ BigInt(base * pow(base2, n) + base2 * pow(base, n)).doubleValue() / sqrt5\n\
    \        result.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmprygjpw1u.scala:14:20 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msqrt5\e[0m = BigInt(sqrt(\e\
    [31m5\e[0m)).doubleValue()\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mapply\e[0m in \e[33mobject\e[0m \e[35mBigInt\e[0m with types\n\e[31m   |\e\
    [0m (x: java.math.BigInteger): BigInt\n\e[31m   |\e[0m (x: String, radix: Int):\
    \ BigInt\n\e[31m   |\e[0m (x: String): BigInt\n\e[31m   |\e[0m (numbits: Int,\
    \ rnd: scala.util.Random): BigInt\n\e[31m   |\e[0m (bitlength: Int, certainty:\
    \ Int, rnd: scala.util.Random): BigInt\n\e[31m   |\e[0m (signum: Int, magnitude:\
    \ Array[Byte]): BigInt\n\e[31m   |\e[0m (x: Array[Byte]): BigInt\n\e[31m   |\e\
    [0m (l: Long): BigInt\n\e[31m   |\e[0m (i: Int): BigInt\n\e[31m   |\e[0mmatch\
    \ arguments (Double)\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmprygjpw1u.scala:15:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e\
    [0m \e[36msqrt52\e[0m = BigInt(sqrt(\e[31m5\e[0m) * sqrt(\e[31m5\e[0m)).doubleValue()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mobject\e\
    [0m \e[35mBigInt\e[0m with types\n\e[31m   |\e[0m (x: java.math.BigInteger): BigInt\n\
    \e[31m   |\e[0m (x: String, radix: Int): BigInt\n\e[31m   |\e[0m (x: String):\
    \ BigInt\n\e[31m   |\e[0m (numbits: Int, rnd: scala.util.Random): BigInt\n\e[31m\
    \   |\e[0m (bitlength: Int, certainty: Int, rnd: scala.util.Random): BigInt\n\e\
    [31m   |\e[0m (signum: Int, magnitude: Array[Byte]): BigInt\n\e[31m   |\e[0m (x:\
    \ Array[Byte]): BigInt\n\e[31m   |\e[0m (l: Long): BigInt\n\e[31m   |\e[0m (i:\
    \ Int): BigInt\n\e[31m   |\e[0mmatch arguments (Double)\n2 errors found\n"
  stdout: ''
  timestamp: 1659978494
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0l) return 0l;\n        if (n ==\
    \ 1l) return 1l;\n        return fib(n - 1l) + fib(n - 2l);\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // >>> n = (10l)\n        // (10l)\n     \
    \   // >>> fib_n_minus_2 = (0l)\n        // (0l)\n        // >>> fib_n_minus_1\
    \ = (1l)\n        // (1l)\n        // >>> fib_n = ((fib_n_minus_1) + (fib_n_minus_2))\n\
    \        // (1l)\n        // >>> n = ((n) - (1l))\n        // (9l)\n        //\
    \ >>> fib_n_minus_2 = (fib_n_minus_1)\n        // (1l)\n        // >>> fib_n_minus_1\
    \ = (fib_n)\n        // (1l)\n        // >>> fib_n = ((fib_n_minus_1) + (fib_n_minus_2))\n\
    \        // (2l)\n        // >>> n = ((n) - (1l))\n        // (8l)\n        //\
    \ >>> fib_n_minus_2 = (fib_n_minus_1)\n        // (1l)\n        // >>> fib_n_minus_1\
    \ = (fib_n)\n        // (2l)\n        // >>> fib_n = ((fib_n_minus_1) + (fib_n_minus_2))\n\
    \        // (3l)\n        // >>> n = ((n) - (1l))\n        // (7l)\n        //\
    \ >>> fib_n_minus_2 = (fib_n_minus_1)\n        // (2l)\n        // >>> fib_n_minus_1\
    \ = (fib_n)\n        // (3l)\n        // >>> fib_n = ((fib_n_minus_1) + (fib_n_minus_2))\n\
    \        // (5l)\n        // >>> n = ((n) - (1l))\n        // (6l)\n        //\
    \ >>> fib_n_minus_2 = (fib_n_minus_1)\n        // (3l)\n        // >>> fib_n_minus_1\
    \ = (fib_n)\n        // (5l)\n        // >>> fib\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeqig7e80.scala:11:31\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mfib\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                               ^\e[0m\n\e[31m   |\e[0m                    \
    \           Found:    Unit\n\e[31m   |\e[0m                               Required:\
    \ Long\n\e[31m12 |\e[0m        \e[34m// >>> n = (10l)\e[0m\n\e[31m13 |\e[0m  \
    \      \e[34m// (10l)\e[0m\n\e[31m14 |\e[0m        \e[34m// >>> fib_n_minus_2\
    \ = (0l)\e[0m\n\e[31m15 |\e[0m        \e[34m// (0l)\e[0m\n\e[31m16 |\e[0m    \
    \    \e[34m// >>> fib_n_minus_1 = (1l)\e[0m\n\e[31m17 |\e[0m        \e[34m// (1l)\e\
    [0m\n\e[31m18 |\e[0m        \e[34m// >>> fib_n = ((fib_n_minus_1) + (fib_n_minus_2))\e\
    [0m\n\e[31m19 |\e[0m        \e[34m// (1l)\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ >>> n = ((n) - (1l))\e[0m\n\e[31m21 |\e[0m        \e[34m// (9l)\e[0m\n\e[31m22\
    \ |\e[0m        \e[34m// >>> fib_n_minus_2 = (fib_n_minus_1)\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// (1l)\e[0m\n\e[31m24 |\e[0m        \e[34m// >>> fib_n_minus_1\
    \ = (fib_n)\e[0m\n\e[31m25 |\e[0m        \e[34m// (1l)\e[0m\n\e[31m26 |\e[0m \
    \       \e[34m// >>> fib_n = ((fib_n_minus_1) + (fib_n_minus_2))\e[0m\n\e[31m27\
    \ |\e[0m        \e[34m// (2l)\e[0m\n\e[31m28 |\e[0m        \e[34m// >>> n = ((n)\
    \ - (1l))\e[0m\n\e[31m29 |\e[0m        \e[34m// (8l)\e[0m\n\e[31m30 |\e[0m   \
    \     \e[34m// >>> fib_n_minus_2 = (fib_n_minus_1)\e[0m\n\e[31m31 |\e[0m     \
    \   \e[34m// (1l)\e[0m\n\e[31m32 |\e[0m        \e[34m// >>> fib_n_minus_1 = (fib_n)\e\
    [0m\n\e[31m33 |\e[0m        \e[34m// (2l)\e[0m\n\e[31m34 |\e[0m        \e[34m//\
    \ >>> fib_n = ((fib_n_minus_1) + (fib_n_minus_2))\e[0m\n\e[31m35 |\e[0m      \
    \  \e[34m// (3l)\e[0m\n\e[31m36 |\e[0m        \e[34m// >>> n = ((n) - (1l))\e\
    [0m\n\e[31m37 |\e[0m        \e[34m// (7l)\e[0m\n\e[31m38 |\e[0m        \e[34m//\
    \ >>> fib_n_minus_2 = (fib_n_minus_1)\e[0m\n\e[31m39 |\e[0m        \e[34m// (2l)\e\
    [0m\n\e[31m40 |\e[0m        \e[34m// >>> fib_n_minus_1 = (fib_n)\e[0m\n\e[31m41\
    \ |\e[0m        \e[34m// (3l)\e[0m\n\e[31m42 |\e[0m        \e[34m// >>> fib_n\
    \ = ((fib_n_minus_1) + (fib_n_minus_2))\e[0m\n\e[31m43 |\e[0m        \e[34m//\
    \ (5l)\e[0m\n\e[31m44 |\e[0m        \e[34m// >>> n = "
  stdout: ''
  timestamp: 1659978498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if(n < 2) {\n            1\n        } else\
    \ {\n            var a : Long = 1\n            var b : Long = 1\n            for(i\
    \ <- 2l to n) {\n                var t : Long = a\n                a = b\n   \
    \             b = t + b\n            }\n            b\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgcrtipz5.scala:26)\n\tat Problem.main(tmpgcrtipz5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 2\n        while (i <= n) {\n            {\n         \
    \       val c : Long = a + b\n                a = b\n                b = c\n \
    \               i += 1\n            }\n        }\n        return b\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n <= 1) return n\n        var a = 0l\n\
    \        var b = 1l\n        var i = 2l\n        while (i <= n) {\n          \
    \  val t = a + b\n            a = b\n            b = t\n            i += 1\n \
    \       }\n        return b\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        require(n >= 0)\n        n match {\n     \
    \       case 0 => 0\n            case 1 => 1\n            case _ => fib(n - 1)\
    \ + fib(n - 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978502
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val phi = (1 + sqrt(5)) / 2\n        val psi\
    \ = -1 / phi\n        val num = pow(phi, n) - pow(psi, n)\n        val den = sqrt(5)\n\
    \        return (num / den).toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fibAcc(n : Long, a : Long, b : Long) :\
    \ Long = {\n            if(n == 0) {\n                return a\n            }\n\
    \            else {\n                return fibAcc(n - 1, b, a + b)\n        \
    \    }\n        }\n        return fibAcc(n, 0, 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var x = (1l, 1l)\n        for (i <- 1 to n.toInt)\
    \ {\n            x = (x._2, x._1 + x._2)\n        }\n        return x._1\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplf6hrlf0.scala:19)\n\tat Problem.main(tmplf6hrlf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val m = ((1l + sqrt(5l)) / 2l)\n        val\
    \ result = floor((pow(m, n) / sqrt(5l) + 0.5))\n        return result.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n <= 1) {\n            return n\n    \
    \    }\n        var a : Long = 0l\n        var b : Long = 1l\n        for (i <-\
    \ 2l to n) {\n            val c : Long = a + b\n            a = b\n          \
    \  b = c\n        }\n        return b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib2(a : Long, b : Long, n : Long) : Long\
    \ = if (n == 0) a else fib2(b, a + b, n - 1)\n        fib2(0, 1, n)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var prev = 1l\n        var curr = 1l\n   \
    \     for (i <- 2l to n) {\n            val next = prev + curr\n            prev\
    \ = curr\n            curr = next\n        }\n        return curr\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fy0308s.scala:22)\n\tat Problem.main(tmp3fy0308s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 1;\n        while (i < n) {\n            {\n    \
    \            val temp : Long = a;\n                a = b;\n                b =\
    \ temp + b;\n                i = i + 1\n            }\n        };\n        return\
    \ b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var c : Long = 1;\n        var i : Long = 0;\n        while (i <\
    \ n) {\n            c = a + b;\n            a = b;\n            b = c;\n     \
    \       i = i + 1;\n        }\n        return a;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        (2l to n).foldLeft((1l, 1l))((x, y) => (x._2,\
    \ x._1 + x._2))._2\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4s1cyomb.scala:15)\n\tat Problem.main(tmp4s1cyomb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            {\n                val c = a +\
    \ b\n                a = b\n                b = c\n                i += 1\n  \
    \          }\n        }\n        a\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fibb(n : Long, a : Long, b : Long) : Long\
    \ = {\n            if (n == 0) a\n            else fibb((n - 1), b, (a + b))\n\
    \        }\n        fibb(n, 0, 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        a\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            val c : Long =\
    \ a + b\n            a = b\n            b = c\n            i = i + 1\n       \
    \ }\n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib$(n : Long, a : Long, b : Long) : Long\
    \ = {\n            if ((n == 0l))\n                return a;\n            else\n\
    \                return fib$((n - 1l), b, (a + b));\n        }\n        return\
    \ fib$(n, 0l, 1l);\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0)\n            0\n        else if\
    \ (n == 1)\n            1\n        else\n            fib(n - 1) + fib(n - 2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        for( i <- 1 until n) {\n            val c : Long = a;\n        \
    \    a = b;\n            b = c + b;\n        }\n        return b;\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnuaox4ff.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val s = new Array[Long]((n + 1).toInt)\n \
    \       s(0) = 0\n        s(1) = 1\n        var i = 2\n        while (i <= n)\
    \ {\n            s(i.toInt) = s((i - 1).toInt) + s((i - 2).toInt)\n          \
    \  i += 1\n        }\n        return s(n.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n == 1)\
    \ return 1l\n        var a : Long = 0l\n        var b : Long = 1l\n        var\
    \ i : Long = 2l\n        while (i <= n) {\n            {\n                val\
    \ c : Long = a + b\n                a = b\n                b = c\n           \
    \     i += 1l\n            }\n        }\n        return b\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // 1, 1, 2, 3, 5, 8, 13, 21, 34, 55\n    \
    \    if (n <= 1) 1 else (fib(n - 1) + fib(n - 2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp79q3_62u.scala:16)\n\tat Problem.main(tmp79q3_62u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978506
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0l) 0l\n        else if (n == 1l)\
    \ 1l\n        else fib(n - 1l) + fib(n - 2l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib1(a : Long, b : Long, n : Long) : Long\
    \ = {\n            n match {\n                case x if (x < 2l) => b\n      \
    \          case _ => fib1(b, a + b, n - 1l)\n            }\n        }\n      \
    \  fib1(0l, 1l, n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib(n : Long, prev : Long, cur : Long)\
    \ : Long = {\n            if (n == 0) {\n                prev\n            } else\
    \ {\n                fib(n - 1, cur, prev + cur)\n            }\n        }\n \
    \       fib(n, 0, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        for (i <- 1l until n) {\n            val temp : Long = a\n          \
    \  a = b\n            b = temp + b\n        }\n        return b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978512
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ c = 0l\n        var i = 0l\n        while (i < n) {\n            c = a + b\n\
    \            a = b\n            b = c\n            i = i + 1\n        }\n    \
    \    return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var prev : Long = 0\n        var curr : Long\
    \ = 1\n        var i : Long = 2\n        while (i <= n) {\n            {\n   \
    \             val nxt : Long = prev + curr\n                prev = curr\n    \
    \            curr = nxt\n                i += 1\n            }\n        }\n  \
    \      curr\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978512
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var i : Long = 1;\n        var j : Long =\
    \ 0;\n        var k : Long = 0;\n        var l : Long = 1;\n        val modulo\
    \ : Long = 1000000007l;\n        var m : Long = n;\n        while (m > 0) {\n\
    \            if ((m % 2) == 1) {\n                var t : Long = (j * l) % modulo;\n\
    \                t = (t + (i * k) % modulo) % modulo;\n                j = (j\
    \ * k) % modulo;\n                j = (j + (i * l) % modulo) % modulo;\n     \
    \           i = t;\n            };\n            m = m / 2;\n            var t2\
    \ : Long = (k * k) % modulo;\n            t2 = (t2 + (l * l) % modulo) % modulo;\n\
    \            k = (2 * k * l) % modulo;\n            l = t2;\n        };\n    \
    \    return j;\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0j1fi5ye.scala:35)\n\tat Problem.main(tmp0j1fi5ye.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978512
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var p : Long = 1;\n        var c : Long =\
    \ 1;\n        var i : Long = 2;\n        while ((i < n)) {\n            val nc\
    \ : Long = (p + c);\n            p = c;\n            c = nc;\n            i =\
    \ (i + 1);\n        }\n        return c;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978512
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val mod : Long = (pow(10.0,9.0)).toLong +\
    \ 7\n        var result : Long = 0\n        var fib_minus_2 : Long = 0\n     \
    \   var fib_minus_1 : Long = 1\n        if (n == 0) {\n            result = 0\n\
    \        }\n        else if (n == 1) {\n            result = 1\n        }\n  \
    \      else {\n            for (i <- 2 to n.toInt) {\n                result =\
    \ (fib_minus_1 + fib_minus_2) % mod\n                fib_minus_2 = fib_minus_1\n\
    \                fib_minus_1 = result\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978513
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var c : Long = 1\n        var i : Long = 1\n        while (i < n) {\n\
    \            {\n                i += 1\n                c = a + b\n          \
    \      a = b\n                b = c\n            }\n        }\n        return\
    \ c\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978513
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n <= 1) 1\n        else fib(n - 1) + fib(n\
    \ - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) ==\
    \ (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n \
    \   assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpywpsk7wn.scala:16)\n\tat Problem.main(tmpywpsk7wn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978512
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        (n, 1l, 0l) match {\n            case (_,\
    \ _, a) if (n == 0l) => a\n            case (_, b, a) if (n == 1l) => b\n    \
    \        case (n, b, a) => fib((n - 1l), (a + b), b)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbf72_4wh.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m (n,\
    \ b, a) => fib((n - \e[31m1l\e[0m), (a + b), b)\n\e[31m\e[31m   |\e[0m       \
    \                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           Found:    (Long, Long, Long)\n\e[31m   |\e[0m    \
    \                              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978512
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        //def loop(i : Long, prev : Long, cur : Long)\
    \ : Long = {\n        //    if (i == n) {\n        //        cur\n        // \
    \   } else {\n        //        loop(i + 1, cur, prev + cur)\n        //    }\n\
    \        //}\n        //loop(2, 1, 1)\n        if (n <= 2) {\n            1\n\
    \        } else {\n            fib(n - 1) + fib(n - 2)\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978512
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ c = 1l\n        var i = 1l\n        while (i < n) {\n            a = b\n   \
    \         b = c\n            c = a + b\n            i += 1\n        }\n      \
    \  return c\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphicevbpp.scala:25)\n\tat Problem.main(tmphicevbpp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978513
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 1\n        while (i < n) {\n            val c : Long =\
    \ a + b\n            a = b\n            b = c\n            i = i + 1\n       \
    \ }\n        b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978512
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var x : Long = 1;\n        var y : Long =\
    \ 0;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val z : Long = x + y;\n                x = y;\n                y\
    \ = z;\n                i = i + 1\n            }\n        };\n        x\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd77_ikfe.scala:26)\n\tat Problem.main(tmpd77_ikfe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978512
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // TODO: implement this method.\n        return\
    \ 0;\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8o0z4mlg.scala:16)\n\tat Problem.main(tmp8o0z4mlg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978512
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val phi = (1 + sqrt(5)) / 2\n        val psi\
    \ = (1 - sqrt(5)) / 2\n        val lambda = n + 1\n        return round((pow(phi,\
    \ lambda) - pow(psi, lambda)) / sqrt(5))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpunuf50u3.scala:18)\n\tat Problem.main(tmpunuf50u3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978513
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 1l\n        var b = 1l\n        if\
    \ (n == 1) {\n            return 1l\n        }\n        if (n == 2) {\n      \
    \      return 1l\n        }\n        for (i <- 3l to n) {\n            val c =\
    \ a + b\n            a = b\n            b = c\n        }\n        return b\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0l) {\n            0l\n        }\
    \ else if (n == 1l) {\n            1l\n        } else {\n            fib((n -\
    \ 1l)) + fib((n - 2l))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978513
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var phi : Double = (1 + sqrt(5)) / 2\n   \
    \     var psi : Double = (1 - sqrt(5)) / 2\n        return ((pow(phi, n) - pow(psi,\
    \ n)) / sqrt(5)).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val a = 0l\n        val b = 1l\n        def\
    \ fib2(n : Long, a : Long, b : Long) : Long = {\n            if (n == 0l) a\n\
    \            else fib2(n - 1l, b, a + b)\n        }\n        fib2(n, a, b)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978513
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fibRec(a : Long, b : Long, n : Long) :\
    \ Long = {\n            if (n == 0) a\n            else fibRec(b, a + b, n - 1)\n\
    \        }\n        return fibRec(0, 1, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978515
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var i : Long = 0\n        var j : Long = 1\n\
    \        var c : Long = 0\n        while(c < n) {\n            val t : Long =\
    \ i\n            i = j\n            j = t + j\n            c = c + 1\n       \
    \ }\n        return i\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else\
    \ if (n == 1) {\n            1\n        } else {\n            fib((n - 1)) + fib((n\
    \ - 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        /*\n         * n    n-1   n-2   n-3\n    \
    \     * 1    0     0     0\n         * 0    1     0     0\n         * 1    1 \
    \    1     0\n         * 2    2     1     1\n         * 3    3     2     1\n \
    \        * 4    5     3     2\n         * 5    8     5     3\n         * 6   \
    \ 13    8     5\n         * 7    21    13    8\n         * 8    34    21    13\n\
    \         * 9    55    34    21\n         * 10   89    55    34\n         * 11\
    \   144   89    55\n         * 12   233   144   89\n         * 13   377   233\
    \   144\n         * 14   610   377   233\n         * 15   987   610   377\n  \
    \       * 16   1597  987   610\n         * 17   2584  1597  987\n         * 18\
    \   4181  2584  1597\n         * 19   6765  4181  2584\n         * 20   10946\
    \ 6765  4181\n         * 21   17711 10946 6765\n         * 22   28657 17711 10946\n\
    \         * 23   46368 28657 17711\n         * 24   75025 46368 28657\n      \
    \   * 25   121393    75025 46368\n         * 26   196418    121393    75025\n\
    \         * 27   317811    196418    121393\n         * 28   514229    317811\
    \    196418\n         * 29   832040    514229    317811\n         * 30   1346269\
    \   832040    514229\n         * 31   2178309   1346269   832040\n         * 32\
    \   3524578   2178309   1346269\n         * 33   5702887   3524578   2178309\n\
    \         * 34   9227465   5702887   3524578\n         * 35   14930352  9227465\
    \   5702887\n         * 36   24157817  14930352  9227465\n         * 37   39088169\
    \  24157817  14930352\n         * 38   63245986\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpesiu739o.scala:12:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[34m/*\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\
    \e[31m   |\e[0m        unclosed comment\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpesiu739o.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpesiu739o.scala:11:31 --------------------\e[0m\e[0m\n\
    \e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mfib\e[0m(\e[36mn\e[0m : \e[35mLong\e[0m)\
    \ : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                               ^\e\
    [0m\n\e[31m   |\e[0m                               Found:    Unit\n\e[31m   |\e\
    [0m                               Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        for\
    \ (i <- 0l until n) {\n            val c = a + b\n            a = b\n        \
    \    b = c\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var (a, b) = (0l, 1l)\n        (1l to n).foreach(i\
    \ => {val tmp = a; a = b; b = tmp + b})\n        a\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib_acc(i : Long, p : Long, c : Long)\
    \ : Long = {\n            if (i == n) {\n                c\n            } else\
    \ {\n                fib_acc((i + 1l), c, (p + c))\n            }\n        }\n\
    \        fib_acc(0l, 0l, 1l)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1mk1zibw.scala:22)\n\tat Problem.main(tmp1mk1zibw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n <= 1) return n\n        return fib(n\
    \ - 1) + fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // Fill in the body of this function.\n  \
    \      if (n == 0) 0 else if (n == 1) 1 else fib(n - 1) + fib(n - 2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0 else if (n == 1) 1 else fib(n\
    \ - 1) + fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib(i : Long, current : Long, next : Long)\
    \ : Long = {\n            if (i == n) current\n            else fib(i + 1, next,\
    \ current + next)\n        }\n        fib(0, 0, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val MOD = 1000000007l\n        val N = n.toInt\n\
    \        val dp = Array.fill(N + 1)(0l)\n        dp(0) = 1l\n        dp(1) = 1l\n\
    \        for (i <- 2 to N) {\n            dp(i) = dp(i - 1) + dp(i - 2)\n    \
    \        dp(i) %= MOD\n        }\n        dp(N)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e6ukur6.scala:24)\n\tat Problem.main(tmp5e6ukur6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var c : Long = 1\n        for (i <- 0l until n) {\n            a = b\n\
    \            b = c\n            c = a + b\n        }\n        a\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        var l : List[Long] = List(0, 1)\n        for (i <- 2l to n)\
    \ {\n            var newValue : Long = l(0) + l(1)\n            l = List(l(1),\
    \ newValue)\n        }\n        return l(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fibMemo(n : Long, memo : ListBuffer[Long])\
    \ : Long = {\n            if (n == 0) {\n                0\n            } else\
    \ if (n == 1) {\n                1\n            } else if (memo.length > n) {\n\
    \                memo(n.toInt)\n            } else {\n                var i =\
    \ memo.length\n                while (i <= n) {\n                    memo += (memo(i\
    \ - 1) + memo(i - 2))\n                    i += 1\n                }\n       \
    \         memo(n.toInt)\n            }\n        }\n        fibMemo(n, ListBuffer[Long](0,\
    \ 1))\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) ==\
    \ (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n \
    \   assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        n match {\n            case 0l => 0l\n   \
    \         case 1l => 1l\n            case _ => fib(n - 1l) + fib(n - 2l)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) ==\
    \ (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n \
    \   assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var c : Long = 1;\n        var i : Long = 1;\n        while (i <\
    \ n) {\n            a = b;\n            b = c;\n            c = a + b;\n     \
    \       i = i + 1;\n        }\n        return c;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxvfq6631.scala:25)\n\tat Problem.main(tmpxvfq6631.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val eps = 1e-5\n        var a = 1.0\n    \
    \    var b = 1.0\n        for (i <- 1 to n.toInt - 1) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjnleit7x.scala:23)\n\tat Problem.main(tmpjnleit7x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        var tmp : Long = 0;\n        while (i\
    \ < n) {\n            tmp = a;\n            a = b;\n            b = b + tmp;\n\
    \            i = i + 1;\n        }\n        return a;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0l)\n            return 0l\n    \
    \    if (n == 1l)\n            return 1l\n        var (a, b) = (0l, 1l)\n    \
    \    for (i <- 0l until n) {\n            val tmp = a\n            a = b\n   \
    \         b = tmp + b\n        }\n        return a\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var c : Long = 0;\n        var i : Long = 0;\n        while (i <\
    \ n) {\n            {\n                c = a + b;\n                a = b;\n  \
    \              b = c;\n                i = i + 1\n            }\n        };\n\
    \        return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else\
    \ if (n == 1) {\n            1\n        } else {\n            fib((n - 1)) + fib((n\
    \ - 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978489
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val a : Array[Long] = new Array[Long]((n +\
    \ 1l).toInt)\n        a(0) = 0l\n        a(1) = 1l\n        for (i <- 2 to n.toInt)\
    \ {\n            a(i) = a(i - 1) + a(i - 2)\n        }\n        return a(n.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        return if(n > 1) fib(n - 1) + fib(n - 2) else\
    \ n\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var last : Long = 1\n        var next : Long\
    \ = 1\n        var index : Long = 3\n        while (index <= n) {\n          \
    \  val tmp : Long = next\n            next = last + next\n            last = tmp\n\
    \            index = index + 1\n        }\n        return next\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        var a = 1\n\
    \        var b = 1\n        var c = 1\n        for (i <- 3 to n.toInt) {\n   \
    \         c = a + b\n            a = b\n            b = c\n        }\n       \
    \ return c\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n <= 2) 1\n        else fib(n - 1) + fib(n\
    \ - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) ==\
    \ (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n \
    \   assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val mem : HashMap[Long, Long] = HashMap((0l\
    \ -> 0l), (1l -> 1l))\n        def f(n : Long) : Long = mem.get(n) match {\n \
    \           case Some(x) => x\n            case None => {\n                val\
    \ x = f(n - 1) + f(n - 2)\n                mem.put(n, x)\n                x\n\
    \            }\n        }\n        f(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if(n == 0)\n            return 0\n       \
    \ if(n == 1)\n            return 1\n        var a : Long = 0\n        var b :\
    \ Long = 1\n        var temp : Long = 0\n        for(i <- 2l to n) {\n       \
    \     temp = a + b\n            a = b\n            b = temp\n        }\n     \
    \   return b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if(n == 0) return 0\n        else if(n ==\
    \ 1) return 1\n        return fib(n - 1) + fib(n - 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val two = (2l)\n        val one = (1l)\n \
    \       def fib_1(n : Long, prev : Long, curr : Long) : Long = {\n           \
    \ n match {\n                case `two` => {\n                    curr\n     \
    \           }\n                case _ => {\n                    fib_1((n - one),\
    \ curr, (prev + curr))\n                }\n            }\n        }\n        n\
    \ match {\n            case `one` => {\n                one\n            }\n \
    \           case _ => {\n                fib_1(n, one, two)\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5axennat.scala:34)\n\tat Problem.main(tmp5axennat.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        return n match {\n            case 0l => 0l\n\
    \            case 1l => 1l\n            case _ => fib((n - 1l)) + fib((n - 2l))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def go(m : Long, a : Long, b : Long) : Long\
    \ = {\n            if (m == 0) a\n            else go(m - 1, b, a + b)\n     \
    \   }\n        go(n, 0, 1)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // n is a long\n        if (n == 0l) {\n \
    \           0l\n        } else if (n == 1l) {\n            1l\n        } else\
    \ {\n            Problem.fib((n - 1l)) + Problem.fib((n - 2l))\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val table = Array.fill(n.toInt + 1)(0l)\n\
    \        table(0) = 0l\n        table(1) = 1l\n        for (i <- 2 to n.toInt)\
    \ {\n            table(i) = table(i - 1) + table(i - 2)\n        }\n        table(n.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        return n match {\n            case 0 => (0)\n\
    \            case 1 => (1)\n            case _ => (fib((n - 1)) + fib((n - 2)))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // Your code here (Part 1.1)\n        var\
    \ result = 0l\n        if (n <= 1) result = n\n        else result = fib(n-1)\
    \ + fib(n-2)\n        result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0l) return 0l\n        if (n == 1l)\
    \ return 1l\n        return (fib((n - 1l)) + fib((n - 2l)))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val f = ArrayBuffer[Long]()\n        f.insert(0,\
    \ 0)\n        f.insert(1, 1)\n        var i = 2\n        while (i <= n) {\n  \
    \          f.insert(i, f(i - 1) + f(i - 2))\n            i += 1\n        }\n \
    \       return f(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0l) return 0l\n        if (n == 1l)\
    \ return 1l\n        if (n % 2l == 0l) {\n            val k = n / 2l\n       \
    \     val f = fib(k)\n            return f * (2l * fib(k - 1l) + f)\n        }\n\
    \        else {\n            val k = (n - 1l) / 2l\n            val f = fib(k)\n\
    \            val f1 = fib(k + 1l)\n            return f1 * f1 + f * f\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 1l\n        var b = 1l\n        for\
    \ (i <- 2l to n) {\n            val c = a + b\n            a = b\n           \
    \ b = c\n        }\n        return b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoeuo7piv.scala:22)\n\tat Problem.main(tmpoeuo7piv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = n\n        while (i > 0) {\n            val temp = a\n            a = b\n\
    \            b = temp + b\n            i -= 1\n        }\n        return a\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val b1 : Long = a + b\n                a = b\n                b = b1\n\
    \                i += 1\n            }\n        }\n        return a\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if(n == 0) return 0\n        if(n == 1) return\
    \ 1\n        var n2 = 0l\n        var n1 = 1l\n        var n0 = 1l\n        for(i\
    \ <- 1l until n) {\n            n0 = n1 + n2\n            n2 = n1\n          \
    \  n1 = n0\n        }\n        return n0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if(n == 0) return 0\n        var a : Long\
    \ = 0\n        var b : Long = 1\n        for(i <- 0l until n) {\n            var\
    \ c : Long = a + b\n            a = b\n            b = c\n        }\n        return\
    \ a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            val c : Long =\
    \ a + b\n            a = b\n            b = c\n            i = i + 1\n       \
    \ }\n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        (1L to n).map(x => if (x <= 2) 1 else fib(x\
    \ - 1) + fib(x - 2)).last\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n <= 2) {\n            return 1\n    \
    \    }\n        return fib((n - 1)) + fib((n - 2))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        return memo(n, (n : Long) => fib(n));\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy_3u5avb.scala:12:15 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mreturn\e[0m memo(n, (\e[36mn\e[0m : \e\
    [35mLong\e[0m) => fib(n));\n\e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e\
    [31m   |\e[0m               Not found: memo\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        while (n > 0) {\n            val c : Long = a + b\n            a = b\n\
    \            b = c\n            n = n - 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpv22te2fz.scala:18:14 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n = n - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0)\n            0\n        else if\
    \ (n == 1)\n            1\n        else\n            fib(n - 1) + fib(n - 2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        (n, n < 2) match {\n            case (_, true)\
    \ => n\n            case (n, _) => fib((n - 1l)) + fib((n - 2l))\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 1l\n        var b = 1l\n        var\
    \ i = 2l\n        while (i < n) {\n            val tmp = a\n            a = b\n\
    \            b = tmp + b\n            i += 1\n        }\n        b\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b;\n                a = b;\n                b\
    \ = c;\n                i += 1;\n            }\n        }\n        return a;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        for\
    \ (i <- 1l to n) {\n            var c = a + b\n            a = b\n           \
    \ b = c\n        }\n        return a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        a\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib_iter(a : Long, b : Long, p : Long,\
    \ q : Long, count : Long) : Long = {\n            if (count == 0) b\n        \
    \    else if (count % 2 == 0) fib_iter(a, b, p * p + q * q, q * q + 2 * p * q,\
    \ count / 2)\n            else fib_iter(b * q + a * q + a * p, b * p + a * q,\
    \ p, q, count - 1)\n        }\n        fib_iter(1, 0, 0, 1, n)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        a\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = n\n        while(i > 0) {\n            i = i - 1\n            val b1 = b\n\
    \            b = a + b\n            a = b1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var cache = Map[Long, Long]()\n        def\
    \ fibImpl(n : Long) : Long = {\n            if (n == 0) {\n                return\
    \ 0\n            }\n            if (n == 1) {\n                return 1\n    \
    \        }\n            if (cache.contains(n)) {\n                return cache(n)\n\
    \            }\n            var res = fibImpl(n - 1) + fibImpl(n - 2)\n      \
    \      cache(n) = res\n            return res\n        }\n        return fibImpl(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var c : Long = 1\n        var i : Long = 1\n        while (i < n) {\n\
    \            c = a + b\n            a = b\n            b = c\n            i =\
    \ i + 1\n        }\n        return c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n == 1)\
    \ return 1l\n        var a : Long = 0l\n        var b : Long = 1l\n        var\
    \ i : Long = 2l\n        while (i <= n) {\n            {\n                var\
    \ t : Long = a + b\n                a = b\n                b = t\n           \
    \     i += 1l\n            }\n        }\n        return b\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        for\
    \ (i <- 1 to n.toInt) {\n            val c = a + b\n            a = b\n      \
    \      b = c\n        }\n        a\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978540
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        return 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2hrpyir0.scala:15)\n\tat Problem.main(tmp2hrpyir0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        for\
    \ (i <- 0 until n) {\n            val c = a + b\n            a = b\n         \
    \   b = c\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp8ez2s2p.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        //Write your code here\n        def fib0(n\
    \ : Long, a : Long, b : Long) : Long = {\n            if (n == 0)\n          \
    \      a\n            else\n                fib0(n - 1, b, a + b)\n        }\n\
    \        fib0(n, 0, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0l\n        var b : Long =\
    \ 1l\n        while (n != 0l) {\n            var c : Long = a + b\n          \
    \  a = b\n            b = c\n            n = n - 1l\n        }\n        return\
    \ a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxvtlkh5l.scala:18:14 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            n = n - \e[31m1l\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0l\n        var b : Long =\
    \ 1l\n        var i : Long = 1l\n        if (n == 0l) {\n            return 0l\n\
    \        }\n        while (i <= n) {\n            val temp : Long = a\n      \
    \      a = b\n            b = temp + b\n            i = i + 1l\n        }\n  \
    \      return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978540
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // Start coding here\n        return 0l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqwvrl7l0.scala:16)\n\tat Problem.main(tmpqwvrl7l0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978540
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 1l\n        var b = 1l\n        for\
    \ (i <- 3l to n) {\n            val tmp = a\n            a = b\n            b\
    \ = tmp + b\n        }\n        b\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        @tailrec def fib_tail(n : Long, k : Long,\
    \ f0 : Long, f1 : Long) : Long = {\n            if (n == k) f0\n            else\
    \ fib_tail(n, k + 1, f1, f0 + f1)\n        }\n        fib_tail(n, 0, 0, 1)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1mwc94wt.scala:12:9 -------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[35m@tailrec\e[0m \e[33mdef\e[0m \e[36mfib_tail\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m, \e[36mk\e[0m : \e[35mLong\e[0m, \e[36mf0\e\
    [0m : \e[35mLong\e[0m, \e[36mf1\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\
    \e[31m\e[31m   |\e[0m         ^^^^^^^\e[0m\n\e[31m   |\e[0m         Not found:\
    \ type tailrec\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        return 1l;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbuosqf2s.scala:15)\n\tat Problem.main(tmpbuosqf2s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978540
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var m = SortedMap[Long, Long]()\n        m(0)\
    \ = 0\n        m(1) = 1\n        m(2) = 1\n        for (i <- 3 to n.toInt) {\n\
    \            m(i) = m(i - 1) + m(i - 2)\n        }\n        return m(n.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // The n-th Fibonacci number: 1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986,\
    \ 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903,\
    \ 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173,\
    \ 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041,\
    \ 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723,\
    \ 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994,\
    \ 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657,\
    \ 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221,\
    \ 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497,\
    \ 160500643816367088, 259695496911122585, 420196140727489673, 679891637638612258,\
    \ 1100087778366101931, 1779979416004714189, 2880067194370816120, 4660046610375530309,\
    \ 7540113804746346429, 1220016041512\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppi421tsd.scala:11:31\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mfib\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                               ^\e[0m\n\e[31m   |\e[0m                    \
    \           Found:    Unit\n\e[31m   |\e[0m                               Required:\
    \ Long\n\e[31m12 |\e[0m        \e[34m// The n-th Fibonacci number: 1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986,\
    \ 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903,\
    \ 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173,\
    \ 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041,\
    \ 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723,\
    \ 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994,\
    \ 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657,\
    \ 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221,\
    \ 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497,\
    \ 160500643816367088, 259695496911122585, 420196140727489673, 679891637638612258,\
    \ 1100087778366101931, 1779979416004714189, 2880067194370816120, 4660046610375530309,\
    \ 7540113804746346429, 1220016041512\e[0m\n\e[31m13 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if(n <= 2) {\n            1\n        } else\
    \ {\n            fib(n - 1) + fib(n - 2)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while(i < n) {\n            {\n           \
    \     var c : Long = a + b\n                a = b\n                b = c\n   \
    \             i += 1\n            }\n        }\n        return a\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val phi = (1.0 + sqrt(5.0)) / 2.0\n      \
    \  round(pow(phi, n) / sqrt(5.0)).asInstanceOf[Long]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib_acc(n : Long, a : Long, b : Long)\
    \ : Long = {\n            if (n == 0) a\n            else fib_acc(n - 1, b, a\
    \ + b)\n        }\n        fib_acc(n, 0, 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val a = ArrayBuffer[Long]()\n        a +=\
    \ 1l\n        a += 1l\n        var i = 2l\n        while (i < n) {\n         \
    \   a += a(i.toInt - 1) + a(i.toInt - 2)\n            i += 1l\n        }\n   \
    \     return a(n.toInt - 1)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return (0l)\n \
    \       }\n        if (n == 1) {\n            return (1l)\n        }\n       \
    \ return (fib((n - 1l)) + fib((n - 2l)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n <= 1) return n\n        var left = 1l\n\
    \        var right = 0l\n        for (i <- 2l to n) {\n            val t = left\
    \ + right\n            right = left\n            left = t\n        }\n       \
    \ return left\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        n match {\n            case 0 => 0\n     \
    \       case 1 => 1\n            case n => fib(n - 1) + fib(n - 2)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        // Binary exponentiation, logarithmic complexity.\n\
    \        //\n        // .. math::\n        //\n        //   x^n = \\prod_{i=0}^{\\\
    lfloor \\log_2 n \\rfloor} x^{2^i}\n        def binpow(x : Long, n : Long) : Long\
    \ = {\n            def loop(x : Long, n : Long, acc : Long) : Long = n match {\n\
    \                case 0 => acc\n                case _ => loop(x * x, n / 2, if\
    \ ((n % 2) == 1) (acc * x) else acc)\n            }\n            loop(x, n, 1)\n\
    \        }\n        // Useful constants.\n        val (sqrt5, phi) = (sqrt(5),\
    \ (1 + sqrt(5)) / 2)\n        // Main computation.\n        ((binpow(phi, n) -\
    \ binpow(1 - phi, n)) / sqrt5).toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsrh5k_ea.scala:27:17\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        ((binpow(phi, n) - binpow(\e\
    [31m1\e[0m - phi, n)) / sqrt5).toLong\n\e[31m\e[31m   |\e[0m                 ^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    (phi : Double)\n\e[31m   |\e[0m\
    \                 Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsrh5k_ea.scala:27:34 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        ((binpow(phi, n) - binpow(\e[31m1\e[0m - phi, n)) / sqrt5).toLong\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                  Found:    Double\n\e[31m   |\e[0m  \
    \                                Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib_acc(n : Long, a : Long, b : Long)\
    \ : Long = {\n            if (n == 0) a\n            else fib_acc(n - 1, b, a\
    \ + b)\n        }\n        fib_acc(n, 0, 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var tmp : Long = 0\n        var i : Long = 0\n        while (i < n) {\n\
    \            tmp = a\n            a = b\n            b = tmp + b\n           \
    \ i = i + 1\n        }\n        return a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        val fibs = HashMap[Long, Long]()\n        fibs.put(0, 0)\n\
    \        fibs.put(1, 1)\n        def fib_rec(n : Long) : Long = {\n          \
    \  if (fibs.contains(n)) {\n                return fibs(n)\n            }\n  \
    \          fibs.put(n, fib_rec(n - 1) + fib_rec(n - 2))\n            return fibs(n)\n\
    \        }\n        return fib_rec(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fibHelper(n : Long, a : Long, b : Long)\
    \ : Long = {\n            if (n == 0) {\n                a\n            } else\
    \ {\n                fibHelper((n - 1), b, (a + b))\n            }\n        }\n\
    \        fibHelper(n, 0, 1)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else {\n            var a = 0l\n            var b = 1l\n            for\
    \ (i <- 1l until n) {\n                val temp = a\n                a = b\n \
    \               b = temp + b\n            }\n            b\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib_tail(n : Long, a : Long, b : Long)\
    \ : Long = {\n            if (n == 0) return a\n            else return fib_tail(n\
    \ - 1, b, a + b)\n        }\n        return fib_tail(n, 0, 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        val fibs = new Array[Long](max(n.toInt, 0))\n\
    \        fibs(0) = 0\n        fibs(1) = 1\n        var i = 2\n        while (i\
    \ <= n) {\n            fibs(i) = fibs(i - 1) + fibs(i - 2)\n            i += 1\n\
    \        }\n        return fibs(n.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 10 out of bounds for length\
    \ 10\n\tat Problem$.fib(tmp4rth0edc.scala:17)\n\tat Problem$.main(tmp4rth0edc.scala:23)\n\
    \tat Problem.main(tmp4rth0edc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        var i : Long = 0\n        var j : Long = 1\n        var k : Long\
    \ = 1\n        while (k < n) {\n            {\n                val t : Long =\
    \ i + j\n                i = j\n                j = t\n                k += 1\n\
    \            }\n        }\n        return j\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978545
