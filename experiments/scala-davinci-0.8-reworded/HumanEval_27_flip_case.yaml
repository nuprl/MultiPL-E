name: HumanEval_27_flip_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    def flipCase(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\
  \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
  These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE\
  \ VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ['        return string.toLowerCase', '      return string.map(c => if
    (c.isUpper) c.toLower else c.toUpper)', '        return string.map(x => if (x.isUpper)
    x.toLower else x.toUpper)', '        string.map((c: Char) => if (c.isUpper) c.toLower
    else c.toUpper)', '        return string.map(c => if (c.isUpper) c.toLower else
    c.toUpper)', '        string.map(c => if (c.isUpper) c.toLower else c.toUpper)',
  "        //This is what I'm shooting for: http://stackoverflow.com/questions/1974639/scala-flip-case-of-a-string\n\
    \        //string.flatMap(c => if (c.isUpper) c.toLower else c.toUpper)\n    \
    \    //realize this is incorrect on second look. above only works on scala 2.8,\
    \ not 2.7\n        //This is what I'm actually going to do\n        val buffer\
    \ = new StringBuilder()\n        for (i <- 0 until string.length) {\n        \
    \    val c = string.charAt(i)\n            if (c.isUpper) buffer.append(c.toLower)\n\
    \            else buffer.append(c.toUpper)\n        }\n        buffer.toString",
  "        var str = string\n        var result = \"\"\n        for (i <- 0 until\
    \ str.length) {\n            if (str(i).isUpper) {\n                result +=\
    \ str(i).toLower\n            } else {\n                result += str(i).toUpper\n\
    \            }\n        }\n        result", "        var newString = \"\"\n  \
    \      for (i <- 0 until string.length) {\n            if (string(i).isUpper)\
    \ {\n                newString += string(i).toLower\n            } else {\n  \
    \              newString += string(i).toUpper\n            }\n        }\n    \
    \    newString", "        string.map(x => {\n            if (x.isLower) {\n  \
    \              x.toUpper\n            } else {\n                x.toLower\n  \
    \          }\n        })", "        // TODO: implement this\n        \"\"", " \
    \       if (string.length == 0) return \"\"\n        val char = string.head\n\
    \        val upper : Boolean = char >= 'A' && char <= 'Z'\n        if (upper)\
    \ return char.toLower + flipCase(string.tail)\n        else return char.toUpper\
    \ + flipCase(string.tail)", "        def go(i : Int, reversed : String) : String\
    \ = {\n            if (i < 0) reversed\n            else {\n                val\
    \ c = string(i)\n                val d = if (c.isUpper) c.toLower else c.toUpper\n\
    \                go(i - 1, d + reversed)\n            }\n        }\n        go(string.length\
    \ - 1, \"\")", "        // Since 'a' = 97 and 'A' = 65, XOR-ing a letter with\
    \ 32 toggles the case.\n        // This is one of the few cases where XOR is useful.\
    \ :)\n        var output : String = \"\"\n        for (c <- string) {\n      \
    \      output += (c ^ 32).toChar\n        }\n        return output", '        string.map(x
    => if (x.isUpper) x.toLower else x.toUpper)', "        var s = string.toCharArray\n\
    \        for (i <- 0 until s.length) {\n            s(i) = if (s(i).isUpper) s(i).toLower\
    \ else s(i).toUpper\n        }\n        s.mkString", "      val buffer = new StringBuilder\n\
    \      for (char <- string) {\n        if (char.isUpper) buffer.append(char.toLower)\n\
    \        else buffer.append(char.toUpper)\n      }\n      buffer.toString", '        string.map(x
    => if (x.isUpper) x.toLower else x.toUpper)', '        string.map(c => if (c.isLower)
    c.toUpper else c.toLower)', "        val lowerCase = ('a' to 'z').toList\n   \
    \     val upperCase = ('A' to 'Z').toList\n        string.map(i => if (lowerCase.contains(i))\
    \ i.toUpper else i.toLower)", "        return string.map(char => char match {\n\
    \            case char if char.isUpper => char.toLower\n            case char\
    \ if char.isLower => char.toUpper\n            case _ => char\n        })", " \
    \       // type String = StringOps\n        string.toLowerCase.zip(string).map\
    \ {\n            case (l, u) => if (l.isUpper) l else u\n        }.mkString",
  '        string.map(c => if (c.isUpper) c.toLower else c.toUpper)', "        val\
    \ chars = string.toCharArray();\n        for (i <- 0 until chars.length) {\n \
    \           chars(i) = if (chars(i).isLower) chars(i).toUpper else chars(i).toLower\n\
    \        }\n        return new String(chars)", '        string.map(char => if
    (char.isUpper) char.toLower else char.toUpper)', "\t\tvar s : String = \"\";\n\
    \t\tfor (l <- string)\n\t\t\tif (l.isUpper)\n\t\t\t\ts += l.toLower;\n\t\t\telse\
    \ if (l.isLower)\n\t\t\t\ts += l.toUpper;\n\t\treturn s;", "        val chars\
    \ = string.toCharArray\n        for (i <- 0 until chars.length) {\n          \
    \  if (chars(i).isLower) chars(i) = chars(i).toUpper\n            else if (chars(i).isUpper)\
    \ chars(i) = chars(i).toLower\n        }\n        new String(chars)", "      \
    \  var newString = \"\"\n        for (c <- string) {\n            if (c.isUpper)\
    \ {\n                newString += c.toLower\n            } else {\n          \
    \      newString += c.toUpper\n            }\n        }\n        return newString",
  "      val reversed = for(c <- string) yield c match {\n        case a if Character.isUpperCase(a)\
    \ => Character.toLowerCase(a)\n        case a if Character.isLowerCase(a) => Character.toUpperCase(a)\n\
    \        case a => a\n      }\n      reversed.mkString", '        string.map(ch
    => if (ch.isLower) ch.toUpper else ch.toLower)', "        var stringBuilder =\
    \ new StringBuilder()\n        for (c <- string) {\n            stringBuilder.append(c\
    \ match {\n                case x if x.isUpper => x.toLower\n                case\
    \ x if x.isLower => x.toUpper\n                case x => x\n            })\n \
    \       }\n        stringBuilder.toString", '        return string.map(c => if
    (c.isUpper) c.toLower else c.toUpper)', '        string.map(x => if (x.isUpper)
    x.toLower else x.toUpper)', '        string.map(c => if (c.isUpper) c.toLower
    else c.toUpper)', "        var result = \"\"\n        for (c <- string) {\n  \
    \          if (c.isUpper) {\n                result += c.toLower\n           \
    \ } else {\n                result += c.toUpper\n            }\n        }\n  \
    \      result", "        var string_ = \"\"\n        string.foreach(char => if\
    \ (char.isUpper) string_ += char.toLower else string_ += char.toUpper)\n     \
    \   string_", "\t\tstring.map(x => if (x.isUpper) x.toLower else x.toUpper)",
  '        string.map(c => if (c.isUpper) c.toLower else c.toUpper)', "        string.map(ch\
    \ => ch match {\n            case ch if ch.isUpper => ch.toLower\n           \
    \ case ch if ch.isLower => ch.toUpper\n            case _ => ch\n        })",
  "        var s:String = \"\"\n        for (c <- string) {\n            if (c.isUpper)\
    \ s += c.toLower\n            else s += c.toUpper\n        }\n        s", "  \
    \      var flippedCase = \"\"\n        for (i <- 0 until string.length) {\n  \
    \          if (string(i).isUpper) {\n                flippedCase += string(i).toLower\n\
    \            } else {\n                flippedCase += string(i).toUpper\n    \
    \        }\n        }\n        flippedCase", "        var flippedString = \"\"\
    \n        for (c <- string) {\n            if (c.isUpper) {\n                flippedString\
    \ += c.toLower\n            } else {\n                flippedString += c.toUpper\n\
    \            }\n        }\n        flippedString", '        string.map(c => if
    (c.isUpper) c.toLower else c.toUpper)', "        var result = \"\"\n        string.map(x\
    \ => if (x.isUpper) result += x.toLower else result += x.toUpper)\n        result",
  '        string.map((c : Char) => if (c.isUpper) c.toLower else c.toUpper)', '        string.map(x
    => if (x.isLower) x.toUpper else x.toLower)', '        string.map(x => if (x.isLower)
    x.toUpper else x.toLower)', "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            if (string(i).isUpper) {\n                result\
    \ += string(i).toLower\n            } else {\n                result += string(i).toUpper\n\
    \            }\n        }\n        return result", '        string.map(x => if
    (x.isUpper) x.toLower else x.toUpper)', "        var flipped = \"\"\n        for\
    \ (c <- string) {\n            if (c.isLower) {\n                flipped += c.toUpper\n\
    \            } else {\n                flipped += c.toLower\n            }\n \
    \       }\n        flipped", '        string.map(_.toLowerCase.toUpperCase)',
  "        string.map(Character.isUpperCase(_) match {\n            case true => Character.toLowerCase(_)\n\
    \            case false => Character.toUpperCase(_)\n        })", "        return\
    \ string.map(\n            _ match {\n                case c : Char if c.isUpper\
    \ => c.toLower\n                case c : Char if c.isLower => c.toUpper\n    \
    \            case _ => _\n            }\n        )", '        string.map(x =>
    if (x.isUpper) x.toLower else x.toUpper)', '        string.map(_.toLowerCase ^
    _.isUpper).mkString', '        string.map(c => if (c.isUpper) c.toLower else c.toUpper)',
  '        string.map(c => if (c.isUpper) c.toLower else c.toUpper)', '        return
    string.map(c => if (c.isUpper) c.toLower else c.toUpper)', '        string.map(flip)',
  "        var output = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     if (string(i).isUpper) {\n                output += string(i).toLower\n\
    \            } else {\n                output += string(i).toUpper\n         \
    \   }\n        }\n        output", "        var sb = new StringBuilder\n     \
    \   for (ch <- string) {\n            sb += (if (ch.isUpper) ch.toLower else ch.toUpper)\n\
    \        }\n        sb.toString", '        string.map(c => if (c.isUpper) c.toLower
    else c.toUpper)', '        return string.map(c => if (c.isUpper) c.toLower else
    c.toUpper)', "        return string.map(c => {\n            if (c.isUpper) c.toLower\
    \ else c.toUpper\n        })", '        string.map(x => if (x.isUpper) x.toLower
    else x.toUpper)', "        string.map { char =>\n            if (char.isLower)\
    \ char.toUpper\n            else char.toLower\n        }", "        // TODO: implement\
    \ this function\n        var temp : String = \"\"\n        for (c <- string) {\n\
    \            if (c.isLower) {\n                temp += c.toUpper\n           \
    \ } else {\n                temp += c.toLower\n            }\n        }\n    \
    \    return temp", "        val cs = string.toCharArray\n        for (i <- 0 until\
    \ cs.length) {\n            if (cs(i).isUpper) cs(i) = cs(i).toLower\n       \
    \     else cs(i) = cs(i).toUpper\n        }\n        return new String(cs)", " \
    \       var result = \"\"\n        for (char <- string) {\n            if (char.isLower)\
    \ {\n                result += char.toUpper\n            } else {\n          \
    \      result += char.toLower\n            }\n        }\n        result", "  \
    \      // Flip case by mapping the individual characters.\n        val newString\
    \ = string.map {\n            case c : Char if c.isLower => c.toUpper\n      \
    \      case c : Char if c.isUpper => c.toLower\n            case c : Char => c\n\
    \        }\n        return newString", '        string.toCharArray.map(c => if
    (c.isUpper) c.toLower else c.toUpper).mkString', "        string.flatMap {\n \
    \           case char if char.isUpper =>\n                char.toLower.toString\n\
    \            case char if char.isLower =>\n                char.toUpper.toString\n\
    \            case char =>\n                char.toString\n        }", "      \
    \  val arr = string.toCharArray\n        for (i <- 0 until arr.length) {\n   \
    \         if (arr(i).isUpper) {\n                arr(i) = arr(i).toLower\n   \
    \         } else {\n                arr(i) = arr(i).toUpper\n            }\n \
    \       }\n        arr.mkString", "        val sb = new StringBuilder()\n    \
    \    for (c <- string) {\n            if (c.isUpper) sb.append(c.toLower)\n  \
    \          else sb.append(c.toUpper)\n        }\n        sb.toString", '        string.map(c
    => if (c.isUpper) c.toLower else c.toUpper)', '        return string.map(x =>
    if (x.isUpper) x.toLower else x.toUpper)', '        string.map(x => if (x.isUpper)
    x.toLower else x.toUpper)', "        val upCase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        val downCase = \"abcdefghijklmnopqrstuvwxyz\"\n        string.map((c\
    \ : Char) => if (upCase.contains(c)) downCase(upCase.indexOf(c)) else upCase(downCase.indexOf(c)))",
  "        var s : String = \"\"\n        for (c <- string) {\n            if (c.isLower)\
    \ s += c.toUpper\n            else s += c.toLower\n        }\n        return s",
  '        return string.map { case c if (c.isLower) => c.toUpper; case c if (c.isUpper)
    => c.toLower; case c => c}', "        val temp = string.split(\"\")\n        var\
    \ result = \"\"\n        for (i <- 0 until temp.length) {\n            result\
    \ += temp(i).swapCase\n        }\n        result", "        string.map(c => {\n\
    \            if (c.isLower) c.toUpper\n            else c.toLower\n        })",
  "        var builder = new StringBuilder()\n        for (ch <- string)\n       \
    \     if (ch.isUpper) builder += ch.toLower\n            else builder += ch.toUpper\n\
    \        builder.toString", "        var lst = new ListBuffer[Char]()\n      \
    \  for (c <- string) {\n            if (c.isUpper) {\n                lst += c.toLower\n\
    \            } else {\n                lst += c.toUpper\n            }\n     \
    \   }\n        return lst.mkString", '        return string.map(c => if (c.isUpper)
    c.toLower else c.toUpper)', '        return string.map(c => if (c.isUpper) c.toLower
    else c.toUpper)', "        var newString = \"\"\n        for (char <- string)\
    \ {\n            if (char.isUpper) {\n                newString += char.toLower\n\
    \            } else {\n                newString += char.toUpper\n           \
    \ }\n        }\n        return newString", "        // TODO\n        string",
  '        string.map(c => if (c.isLower) c.toUpper else c.toLower)', "        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            if (string(i).isUpper)\
    \ {\n                result += string(i).toLower\n            } else {\n     \
    \           result += string(i).toUpper\n            }\n        }\n        return\
    \ result", '        string.map(x => if (x.isLower) x.toUpper else x.toLower)',
  "        var res = \"\"\n        for (i <- 0 until string.length) {\n          \
    \  if (Character.isUpperCase(string.charAt(i))) res += Character.toLowerCase(string.charAt(i))\n\
    \            else res += Character.toUpperCase(string.charAt(i))\n        }\n\
    \        res", "        string.map {\n            case letter if letter.isLower\
    \ => letter.toUpper\n            case letter if letter.isUpper => letter.toLower\n\
    \            case _ => _\n        }", '        string.map(x => if (x.isUpper)
    x.toLower else x.toUpper)', "        var charArray = string.toCharArray\n    \
    \    var flippedString = \"\"\n        for (c <- charArray) {\n            if\
    \ (c.isLower) flippedString += c.toUpper\n            else flippedString += c.toLower\n\
    \        }\n        flippedString", '        string.map(c => if (c.isLower) c.toUpper
    else c.toLower)', '        return string.map(c => if (c.isUpper) c.toLower else
    c.toUpper)', '        return string.map((c : Char) => if (c.isLower) c.toUpper
    else c.toLower)', '        string.map(x => if (x.isUpper) x.toLower else x.toUpper)',
  "        val chars = string.toCharArray\n        for (i <- 0 until chars.length)\
    \ {\n            if (chars(i).isUpper) chars(i) = chars(i).toLower\n         \
    \   else chars(i) = chars(i).toUpper\n        }\n        return chars.mkString",
  "        var flipped = new StringBuilder\n        for (char <- string) {\n     \
    \       if (char.isLower) flipped += char.toUpper\n            else flipped +=\
    \ char.toLower\n        }\n        flipped.toString", '        string.map(c =>
    if (c.isUpper) c.toLower else c.toUpper)', "        val builder = new StringBuilder\n\
    \        for (char <- string) {\n            if (char.isUpper) builder.append(char.toLower)\n\
    \            else builder.append(char.toUpper)\n        }\n        builder.toString",
  "        // Returns the string with case flipped.\n        def recurse(string :\
    \ String, index : Int) : String = {\n            if (index == string.length())\
    \ return string\n            if (string(index).isLower) string.updated(index,\
    \ string(index).toUpper)\n            else string.updated(index, string(index).toLower)\n\
    \            recurse(string, index + 1)\n        }\n        recurse(string, 0)",
  "        val buffer = new StringBuilder\n        for (letter <- string) {\n    \
    \        if (letter.isLower) buffer.append(letter.toUpper)\n            else buffer.append(letter.toLower)\n\
    \        }\n        buffer.toString", '        string.map(c => if (c.isLower)
    c.toUpper else c.toLower)', "        def loop(i : Int, s : String) : String =\
    \ {\n            if (i == s.length) \"\"\n            else if (s(i).isUpper) s(i).toLower\
    \ + loop(i + 1, s)\n            else s(i).toUpper + loop(i + 1, s)\n        }\n\
    \        loop(0, string)", '        string.map(x => if (x.isLower) x.toUpper else
    x.toLower)', "        val buffer = new StringBuilder\n        for (c <- string)\
    \ {\n            if (c.isUpper) buffer.append(c.toLower)\n            else buffer.append(c.toUpper)\n\
    \        }\n        buffer.toString", "        val upperCase = ('A' to 'Z').toSet\n\
    \        string.map(character => if (upperCase.contains(character)) character.toLower\
    \ else character.toUpper)", "        return string.map( x => {\n            if\
    \ (x.isLower) x.toUpper\n            else x.toLower\n        })", "        val\
    \ s = string.toCharArray\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i).isUpper) s(i) = s(i).toLower\n            else s(i) = s(i).toUpper\n \
    \       }\n        s.mkString", "        var result = \"\"\n        for (ch <-\
    \ string) {\n            if (ch.isUpper) {\n                result += ch.toLower\n\
    \            } else {\n                result += ch.toUpper\n            }\n \
    \       }\n        result", "        for (i <- 0 until string.length) yield {\n\
    \            if (string(i).isLower) {\n                string(i).toUpper\n   \
    \         } else {\n                string(i).toLower\n            }\n       \
    \ }.mkString", "        val chars = string.toCharArray()\n        var index =\
    \ 0\n        while (index < chars.length) {\n            if (Character.isUpperCase(chars(index)))\
    \ {\n                chars(index) = Character.toLowerCase(chars(index))\n    \
    \        } else if (Character.isLowerCase(chars(index))) {\n                chars(index)\
    \ = Character.toUpperCase(chars(index))\n            }\n            index += 1\n\
    \        }\n        return chars.mkString", "        string.map {char =>\n   \
    \         if (char.isUpper) char.toLower\n            else char.toUpper\n    \
    \    }", '        string.map(character => if (character.isUpper) character.toLower
    else character.toUpper)', '      string.map(c => if (c.isUpper) c.toLower else
    c.toUpper)', '        string.map(c => if (c.isUpper) c.toLower else c.toUpper)',
  "        //return string\n        //string.map(x => if(x.isUpper) x.toLower else\
    \ x.toUpper)\n        string.foldLeft(\"\")((r, c) => if(c.isUpper) r + c.toLower\
    \ else r + c.toUpper)", '        string.map(x => if (x.isUpper) x.toLower else
    x.toUpper)', "      val uppers = 'A' to 'Z' map {_ toString}\n      val lowers\
    \ = 'a' to 'z' map {_ toString}\n      def flip(c : Char) : Char = {\n       \
    \ if (uppers contains c.toString) lowers(uppers.indexOf(c.toString))(0)\n    \
    \    else if (lowers contains c.toString) uppers(lowers.indexOf(c.toString))(0)\n\
    \        else c\n      }\n      (string map {flip}).mkString", '        string.map(ch
    => if (ch.isUpper) ch.toLower else ch.toUpper)', '        return string.map(char
    => if (char.isUpper) char.toLower else char.toUpper)', '        string.map(c =>
    if (c.isUpper) c.toLower else c.toUpper)', "        var stringBuilder = new StringBuilder()\n\
    \        for (c <- string) c match {\n            case x if (x.isLower) => stringBuilder.append(x.toUpper)\n\
    \            case x if (x.isUpper) => stringBuilder.append(x.toLower)\n      \
    \      case _ => None\n        }\n        stringBuilder.toString", "        var\
    \ output = \"\"\n        for (c <- string) {\n            if (c.isUpper) {\n \
    \               output += c.toLower\n            } else {\n                output\
    \ += c.toUpper\n            }\n        }\n        output", "        return string.map(\n\
    \            (c: Char) => if (c.isUpper) c.toLower else c.toUpper\n        )",
  "        var result : String = \"\"\n        for (c <- string) {\n            if\
    \ (c.isUpper) result += c.toLower\n            else result += c.toUpper\n    \
    \    }\n        return result", "        string.map {\n            case x if (x.isUpper)\
    \ => x.toLower\n            case x if (x.isLower) => x.toUpper\n            case\
    \ x => x\n        }", "        if (string.isEmpty) {\n            return string\n\
    \        }\n        else {\n            val flippedChar = flipCase(string.charAt(0))\n\
    \            return flippedChar + flipCase(string.drop(1))\n        }", "    \
    \    var array = new Array[Char](string.length)\n        for (i <- 0 until string.length)\
    \ {\n            val char = string(i)\n            if (char.isUpper) array(i)\
    \ = char.toLower\n            else array(i) = char.toUpper\n        }\n      \
    \  return array.mkString", "        //val regex = (\"([a-z]+)|([A-Z]+)\").r\n\
    \        val regex = (\".\").r\n        val replaced = regex.replaceAllIn(string,\
    \ m => m.group(0) match {\n            case word if word.toUpperCase == word =>\
    \ word.toLowerCase\n            case word if word.toLowerCase == word => word.toUpperCase\n\
    \        })\n        replaced", '        return string.map(c => if (c.isUpper)
    c.toLower else c.toUpper)', '        return string.map(a => if (a.isUpper) a.toLower
    else a.toUpper)', "        if (string.length() == 0) {\n            return \"\"\
    \n        }\n        var ch = string.charAt(0)\n        if (ch >= 'a' && ch <=\
    \ 'z') {\n            ch = (ch - 'a' + 'A').toChar\n        } else if (ch >= 'A'\
    \ && ch <= 'Z') {\n            ch = (ch - 'A' + 'a').toChar\n        }\n     \
    \   return ch + flipCase(string.substring(1))", "\tstring.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", '        string.map((c : Char) => if (c.isLower)
    c.toUpper else c.toLower)', "        string.map { c =>\n            c match {\n\
    \                case x if c.isLower => x.toUpper\n                case x if c.isUpper\
    \ => x.toLower\n                case _ => c\n            }\n        }", "    \
    \    var answer : String = \"\"\n        string.foreach(c => {\n            if\
    \ (c.isUpper) {\n                answer += c.toLower\n            } else {\n \
    \               answer += c.toUpper\n            }\n        })\n        return\
    \ answer", '        string.map(c => if (c.isUpper) c.toLower else c.toUpper)',
  '        return string.map {x => if (x.isUpper) x.toLower else x.toUpper}', "  \
    \      var s = \"\"\n        for (c <- string) {\n            if (c.isUpper) {\n\
    \                s += c.toLower\n            } else {\n                s += c.toUpper\n\
    \            }\n        }\n        s", "        val charArray = string.toCharArray\n\
    \        for (i <- 0 until charArray.length) {\n            charArray(i) = if\
    \ (charArray(i).isUpper) charArray(i).toLower else charArray(i).toUpper\n    \
    \    }\n        return charArray.mkString", "        // Returns an array of characters\
    \ that are either upper or lowercase\n        string.map(x => x match {\n    \
    \        case ch if(ch.isUpper) => ch.toLower\n            case ch if(ch.isLower)\
    \ => ch.toUpper\n            case _ => ch\n        })", "        string.map {\n\
    \            case c if Character.isUpperCase(c) => c.toLower\n            case\
    \ c if Character.isLowerCase(c) => c.toUpper\n            case c => c\n      \
    \  }", '        return string.map(c => if (c.isUpper) c.toLower else c.toUpper)',
  "        if (string.isEmpty) return \"\"\n        return string.head.toString.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower) + flipCase(string.tail)", '        string.map(char
    => if (char.isUpper) char.toLower else char.toUpper)', "        var s = \"\"\n\
    \        for (i <- 0 until string.length) {\n            if (string(i).isUpper)\
    \ s += string(i).toLower\n            else s += string(i).toUpper\n        }\n\
    \        s", '        return string.map(x => if (x.isUpper) x.toLower else x.toUpper)',
  "        val s = string.toList\n        val s2 = s.map(l => l match {\n        \
    \    case l if l.isLower => l.toUpper\n            case l if l.isUpper => l.toLower\n\
    \            case l => l\n        })\n        s2.mkString", "        var ret :\
    \ String = \"\"\n        for (c <- string) {\n            if (c.isUpper) ret +=\
    \ c.toLower\n            else ret += c.toUpper\n        }\n        return ret",
  "        val lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n        val uppercase =\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        string.toList.map(c => {\n         \
    \   if (lowercase.contains(c))\n                uppercase(lowercase.indexOf(c))\n\
    \            else if (uppercase.contains(c))\n                lowercase(uppercase.indexOf(c))\n\
    \            else\n                c\n        }).mkString", "        var result\
    \ = \"\"\n        for (c <- string) {\n            if (c.isLower) {\n        \
    \        result += c.toUpper\n            } else {\n                result +=\
    \ c.toLower\n            }\n        }\n        result", "        var result :\
    \ String = \"\"\n        for (i <- 0 until string.length) {\n            var c\
    \ : Char = string.charAt(i)\n            var lower = c.isLower\n            var\
    \ upper = c.isUpper\n            if (lower) result += c.toUpper else result +=\
    \ c.toLower\n        }\n        return result", '        string.map(c => if (c.isLower)
    c.toUpper else c.toLower)', "        val temp = string.toList.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)\n        temp.mkString", '        ???', "        return\
    \ string.map(x => {\n            if (x.isUpper) x.toLower else x.toUpper\n   \
    \     })", '        return string.map(x => if (x.isUpper) x.toLower else x.toUpper)',
  '        string.map((ch : Char) => if (ch.isUpper) ch.toLower else ch.toUpper)',
  "        string.map(x => {\n            if (x.isLower) {\n                x.toUpper\n\
    \            } else {\n                x.toLower\n            }\n        })",
  "        val flipped = string.toCharArray.map(x => if (x.isUpper) x.toLower else\
    \ x.toUpper)\n        flipped.mkString", "        string.map(_.toLowerCase match\
    \ {\n            case c : Char if (c.isLower) => c.toUpper\n            case c\
    \ : Char if (c.isUpper) => c.toLower\n            case c : Char => c\n       \
    \ })", "        var result : String = string\n        if (string != \"\") {\n\
    \            var split = string.split(\"\")\n            result = \"\"\n     \
    \       for (i <- 0 until split.length) {\n                if (split(i).head.isUpper)\
    \ {\n                    result += split(i).head.toLower\n                } else\
    \ {\n                    result += split(i).head.toUpper\n                }\n\
    \            }\n        }\n        return result", "        var newString = \"\
    \"\n        for (char <- string) newString += char match {\n            case 'a'\
    \ => 'A'\n            case 'b' => 'B'\n            case 'c' => 'C'\n         \
    \   case 'd' => 'D'\n            case 'e' => 'E'\n            case 'f' => 'F'\n\
    \            case 'g' => 'G'\n            case 'h' => 'H'\n            case 'i'\
    \ => 'I'\n            case 'j' => 'J'\n            case 'k' => 'K'\n         \
    \   case 'l' => 'L'\n            case 'm' => 'M'\n            case 'n' => 'N'\n\
    \            case 'o' => 'O'\n            case 'p' => 'P'\n            case 'q'\
    \ => 'Q'\n            case 'r' => 'R'\n            case 's' => 'S'\n         \
    \   case 't' => 'T'\n            case 'u' => 'U'\n            case 'v' => 'V'\n\
    \            case 'w' => 'W'\n            case 'x' => 'X'\n            case 'y'\
    \ => 'Y'\n            case 'z' => 'Z'\n            case 'A' => 'a'\n         \
    \   case 'B' => 'b'\n            case 'C' => 'c'\n            case 'D' => 'd'\n\
    \            case 'E' => 'e'\n            case 'F' => 'f'\n            case 'G'\
    \ => 'g'\n            case 'H' => 'h'\n            case 'I' => 'i'\n         \
    \   case 'J' => 'j'\n            case 'K' => 'k'\n            case 'L' => 'l'\n\
    \            case 'M' => 'm'\n            case 'N' => 'n'\n            case 'O'\
    \ => 'o'\n            case 'P' => 'p'\n            case 'Q' => 'q'\n         \
    \   case 'R' => 'r'\n            case 'S' => 's'\n            case 'T' => 't'\n\
    \            case 'U' => 'u'\n            case 'V' => 'v'\n            case 'W'\
    \ => 'w'\n", '        return string.toLowerCase.map(x => if (x.isLower) x.toUpper
    else x.toLower)', "        var result : String = \"\"\n        for (c <- string)\
    \ {\n            if (c.isUpper) {\n                result += c.toLower\n     \
    \       } else {\n                result += c.toUpper\n            }\n       \
    \ }\n        return result", "        var result : String = \"\"\n        for\
    \ (i <- 0 until string.length) {\n            if (string(i).isUpper) result +=\
    \ string(i).toLower\n            else result += string(i).toUpper\n        }\n\
    \        return result", "        // Return a new string whose case is flipped.\n\
    \        return string.map(_.toLower)", "        var s = new StringBuilder()\n\
    \        for (i <- 0 until string.length) {\n            if (string(i).isLower)\
    \ s += string(i).toUpper\n            else s += string(i).toLower\n        }\n\
    \        s.toString", "        var result = \"\"\n        for (char <- string)\
    \ {\n            if (char.isLower) result += char.toUpper\n            else result\
    \ += char.toLower\n        }\n        result", '        return string.map((c:
    Char) => if (c.isUpper) c.toLower else c.toUpper)', '        string.map(x => {if
    (x.isUpper) x.toLower else x.toUpper})', '        string.map(c => if (c.isLower)
    c.toUpper else c.toLower)', "        if (string.isEmpty) \"\"\n        else if\
    \ (string.head.isUpper) string.head.toLower + flipCase(string.tail)\n        else\
    \ string.head.toUpper + flipCase(string.tail)", '        string.map(char => if
    (char.isUpper) char.toLower else char.toUpper)', '        string.map(c => if (c.isLower)
    c.toUpper else c.toLower)', "        var ans = \"\"\n        for (x <- string)\
    \ {\n            if (x.isLower) {\n                ans += x.toUpper\n        \
    \    } else {\n                ans += x.toLower\n            }\n        }\n  \
    \      ans", '        string.map(x => if (x.isUpper) x.toLower else x.toUpper)',
  '        string.map(c => if (c.isLower) c.toUpper else c.toLower)', "        var\
    \ newString = \"\"\n        for (c <- string) {\n            newString += if (c.isUpper)\
    \ c.toLower else c.toUpper\n        }\n        newString", "        var fliped\
    \ = string.map(c => if (c.isUpper) c.toLower else c.toUpper)\n        fliped",
  "        var output = \"\"\n        for (c <- string) {\n            if (c.isUpper)\
    \ output += c.toLower\n            else output += c.toUpper\n        }\n     \
    \   output", '        return string.map(c => if (c.isLower) c.toUpper else c.toLower)',
  "        var str = new StringBuilder(string)\n        for (i <- 0 until str.length)\
    \ {\n            if (str(i).isLower) {\n                str(i) = str(i).toUpper\n\
    \            } else {\n                str(i) = str(i).toLower\n            }\n\
    \        }\n        str.toString", '        string.map( c => if (c.isUpper) c.toLower
    else c.toUpper)', "      var flippedString = \"\"\n      for (char <- string)\
    \ {\n        if (char.isUpper) flippedString += char.toLower\n        else flippedString\
    \ += char.toUpper\n      }\n      flippedString", "        string.map(ch => ch\
    \ match {\n            case ch if ch.isUpper => ch.toLower\n            case ch\
    \ if ch.isLower => ch.toUpper\n            case _ => ch\n        })", '        return
    string.map(c => if (c.isUpper) c.toLower else c.toUpper)', "        val sb = new\
    \ StringBuilder()\n        for (letter <- string) {\n            if (letter.isLower)\
    \ sb.append(letter.toUpper)\n            else sb.append(letter.toLower)\n    \
    \    }\n        sb.toString", '        string.toCharArray.map((x : Char) => if
    (x.isUpper) x.toLower else x.toUpper).mkString', "        val lowercase = (c :\
    \ Char) => c.isLower\n        val changeCase = (c : Char) => if (lowercase(c))\
    \ c.toUpper else c.toLower\n        string.map(changeCase)", "        var output\
    \ : String = \"\"\n        for (char <- string) {\n            if (char.isUpper)\
    \ {\n                output += char.toLower\n            } else {\n          \
    \      output += char.toUpper\n            }\n        }\n        return output",
  "        string.map(\n            c => if (c.isLower) c.toUpper else c.toLower\n\
    \        )", '        string.map(c => if (c.isUpper) c.toLower else c.toUpper)',
  "        var newString = \"\"\n        for (c <- string) {\n            if (c.isUpper)\
    \ newString += c.toLower\n            else newString += c.toUpper\n        }\n\
    \        newString", "        string.map {\n            case c if c.isLower =>\
    \ c.toUpper\n            case c if c.isUpper => c.toLower\n            case c\
    \ => c\n        }", "        return string.map(char => char match {\n        \
    \    case c if c.isLower => c.toUpper\n            case c if c.isUpper => c.toLower\n\
    \            case c => c\n        })"]
stop_tokens:
- "\n    }\n"
