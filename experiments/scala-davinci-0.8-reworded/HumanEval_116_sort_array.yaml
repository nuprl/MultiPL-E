name: HumanEval_116_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this Kata, you have to sort a list of non-negative integers according\
  \ to\n    // number of ones in their binary representation in ascending order.\n\
  \    // For similar number of ones, sort based on decimal value.\n    // It must\
  \ be implemented like this:\n    // >>> sortArray((List[Long](1l.toLong, 5l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))\n    // >>> sortArray((List[Long](-2l.toLong, -3l.toLong,\
  \ -4l.toLong, -5l.toLong, -6l.toLong)))\n    // (List[Long](-6l.toLong, -5l.toLong,\
  \ -4l.toLong, -3l.toLong, -2l.toLong))\n    // >>> sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))\n    def sortArray(arr : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong,\
  \ -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong,\
  \ -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
  \ 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong,\
  \ 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong,\
  \ 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"
completions: ["        val ones = mutable.HashMap[Long, List[Long]]()\n        arr.foreach(n\
    \ => {\n            val onesCount = ones.getOrElse(n.toBinaryString.count(_ ==\
    \ '1'), List[Long]())\n            ones += (n.toBinaryString.count(_ == '1') ->\
    \ (n :: onesCount))\n        })\n        ones.keys.toList.sorted.flatMap(k =>\
    \ ones(k).sorted)", "        arr.sortWith((a, b) => {\n            val aOnes =\
    \ a.toBinaryString.count(_ == '1')\n            val bOnes = b.toBinaryString.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  '        arr.sortWith(sort)', "        var result = new ListBuffer[Long]()\n   \
    \     var sorted = new ListBuffer[Long]()\n        var list1 = new ListBuffer[Long]()\n\
    \        var list2 = new ListBuffer[Long]()\n        var temp = new ListBuffer[Long]()\n\
    \        var one_count = 0\n        var b_count = 0\n        var b_count_next\
    \ = 0\n        var count = 0\n        var max_count = 0\n        var isSorted\
    \ = false\n        for (i <- 0 until arr.length) {\n            if (count == 0)\
    \ {\n                list1.append(arr(i))\n                count += 1\n      \
    \      } else {\n                b_count = numOfOnes(arr(i))\n               \
    \ b_count_next = numOfOnes(list1(count - 1))\n                if (b_count > b_count_next)\
    \ {\n                    list1.append(arr(i))\n                    count += 1\n\
    \                } else if (b_count == b_count_next) {\n                    list2.append(arr(i))\n\
    \                } else {\n                    temp.append(arr(i))\n         \
    \       }\n            }\n        }\n        while (isSorted == false) {\n   \
    \         max_count = 0\n            for (i <- 0 until list1.length) {\n     \
    \           one_count = numOfOnes(list1(i))\n                if (one_count > max_count)\
    \ {\n                    max_count = one_count\n                }\n          \
    \  }\n            for (i <- 0 until list1.length) {\n                one_count\
    \ = numOfOnes(list1(i))\n                if (one_count == max_count) {\n     \
    \               sorted.append(list1(i))\n                }\n            }\n  \
    \          for (i <- 0 until list2.length) {\n                one_count = numOfOnes(list2(i))\n\
    \                if (one_count == max_count) {\n                    sorted.append(list2(i))\n\
    \                }\n            }\n            list1.clear()\n            list2.clear()\n\
    \            list1 ++= sorted\n            sorted.clear()\n            isSorted\
    \ = true\n        }\n        var final_result = new", "        arr.sortWith((a,\
    \ b) => {\n            if (a < 0 && b < 0) {\n                val onesA = a.toBinaryString.filter(_\
    \ == '1').length\n                val onesB = b.toBinaryString.filter(_ == '1').length\n\
    \                if (onesA == onesB) a > b else onesA < onesB\n            } else\
    \ if (a < 0) false\n            else if (b < 0) true\n            else {\n   \
    \             val onesA = a.toBinaryString.filter(_ == '1').length\n         \
    \       val onesB = b.toBinaryString.filter(_ == '1').length\n               \
    \ if (onesA == onesB) a < b else onesA < onesB\n            }\n        })", " \
    \       return arr.sortWith((a, b) => {\n            if (a.toBinaryString.count(_\
    \ == '1') != b.toBinaryString.count(_ == '1')) {\n                return a.toBinaryString.count(_\
    \ == '1') < b.toBinaryString.count(_ == '1')\n            }\n            return\
    \ a < b\n        })", "        // Your Code Here\n        var tmpArr = Array.fill(arr.length)(0L)\n\
    \        var i = 0\n        var j = 0\n        for (x <- arr) {\n            tmpArr(i)\
    \ = x\n            i += 1\n        }\n        val sorted = tmpArr.sortWith(_.toBinaryString.count(_\
    \ == '1') < _.toBinaryString.count(_ == '1'))\n        var lst = List[Long]()\n\
    \        while (j < sorted.length) {\n            lst = lst :+ sorted(j)\n   \
    \         j += 1\n        }\n        lst", "        def f(l : List[Long]) : Int\
    \ = {\n            val buff = l.map(n => n.toBinaryString.count(_ == '1')).zip(l).sortWith((p1,\
    \ p2) => p1._1 < p2._1)\n            println(buff)\n            buff.map(_._2).toList\n\
    \        }\n        f(arr)", "        arr.sortWith((a, b) => if (a.toBinaryString.count(_\
    \ == '1') == b.toBinaryString.count(_ == '1')) a < b else a.toBinaryString.count(_\
    \ == '1') < b.toBinaryString.count(_ == '1'))", "        var sortedList = scala.collection.mutable.ListBuffer[Long]()\n\
    \        var numDict = Map[Int, List[Long]]()\n        for (num <- arr) {\n  \
    \          val count = countBits(num)\n            if (numDict.contains(count))\
    \ {\n                numDict(count) = (numDict(count) :+ num).sorted\n       \
    \     } else {\n                numDict(count) = List(num)\n            }\n  \
    \      }\n        var numDictSorted = numDict.toSeq.sortBy(_._1)\n        for\
    \ (i <- 0 until numDictSorted.length) {\n            for (j <- 0 until numDictSorted(i)._2.length)\
    \ {\n                sortedList += numDictSorted(i)._2(j)\n            }\n   \
    \     }\n        sortedList.toList", "        arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'), x.toBinaryString.count(_ == '1'))).toArray.sortWith((a, b) => (a._2\
    \ > b._2) || (a._2 == b._2 && a._3 < b._3)).map(_._1).toList", "        val result\
    \ = (arr.sortWith((a, b) => {\n            val abin = a.toBinaryString\n     \
    \       val bbin = b.toBinaryString\n            val abin1s = abin.count(x =>\
    \ x == '1')\n            val bbin1s = bbin.count(x => x == '1')\n            if\
    \ (abin1s == bbin1s) a < b else abin1s < bbin1s\n        }))\n        result",
  "        def convertBinary(x : Long) : Long = {\n            var y = x; var c =\
    \ 0;\n            while (y > 0) {\n                if (y % 2 == 1) c += 1;\n \
    \               y /= 2;\n            }\n            return c;\n        }\n   \
    \     def order(x : Long, y : Long) : Boolean = {\n            val x1 = convertBinary(x);\
    \ val y1 = convertBinary(y);\n            if (x1 < y1) true\n            else\
    \ if (x1 > y1) false\n            else {\n                if (x < y) true else\
    \ false\n            }\n        }\n        return arr.sortWith(order);", "   \
    \   val compFunc = (x : Long, y : Long) => {\n        def count1(n : Long) : Int\
    \ = n match {\n          case 0 => 0\n          case n => 1 + count1(n & (n -\
    \ 1))\n        }\n        val c1 = count1(x)\n        val c2 = count1(y)\n   \
    \     if (c1 == c2) {\n          if (x < y) -1 else 1\n        } else {\n    \
    \      if (c1 < c2) -1 else 1\n        }\n      }\n      val res = arr.sorted(compFunc)\n\
    \      res", "        val c = for (x <- arr) yield {\n            val k = x.toBinaryString.reverse.zipWithIndex.count(y\
    \ => y._1 == '1')\n            (k, x)\n        }\n        val d = c.sortWith((a,\
    \ b) => a._1 < b._1 || (a._1 == b._1 && a._2 < b._2))\n        d.map(x => x._2)",
  "        val map = HashMap[Int, ArrayBuffer[Long]]()\n        arr.foreach(a => {\n\
    \            val ones = a.toBinaryString.filter(_ == '1').length\n           \
    \ if (!map.contains(ones)) map(ones) = ArrayBuffer[Long]()\n            map(ones)\
    \ += a\n        })\n        val keys = map.keys.toList.sorted\n        var result\
    \ = List[Long]()\n        keys.foreach(k => {\n            map(k).toList.sorted.foreach(l\
    \ => result = result :+ l)\n        })\n        result", "        def numberOfOnes(i\
    \ : Long) : Int = i.toBinaryString.count(c => c == '1')\n        arr.sortWith(\
    \ (a, b) => if (numberOfOnes(a) == numberOfOnes(b)) a < b else numberOfOnes(a)\
    \ < numberOfOnes(b))", "        val map : Map[Long, Int] = Map[Long, Int]()\n\
    \        for (e <- arr) {\n            val binary = e.toBinaryString\n       \
    \     val ones = binary.filter(c => c == '1').length\n            map += (e ->\
    \ ones)\n        }\n        return arr.sortWith( (a, b) => {\n            if (map(a)\
    \ == map(b)) {\n                a < b\n            } else {\n                map(a)\
    \ < map(b)\n            }\n        })", "      val res = (arr.map(e => (countBinaryOne(e),\
    \ e)) sortWith((x, y) => x._1 < y._1 || (x._1 == y._1 && x._2 < y._2))).map(e\
    \ => e._2)\n      res", "        var countOnesMap = Map[Long, Int]()\n       \
    \ arr.foreach(n => {\n            var count = 0\n            var pow = 1\n   \
    \         while (pow <= n) {\n                if ((n & pow) != 0) {\n        \
    \            count += 1\n                }\n                pow <<= 1\n      \
    \      }\n            countOnesMap += (n -> count)\n        })\n        arr.sortWith((a,\
    \ b) => {\n            val aCount = countOnesMap(a)\n            val bCount =\
    \ countOnesMap(b)\n            if (aCount < bCount) true\n            else if\
    \ (aCount > bCount) false\n            else if (a < b) true\n            else\
    \ false\n        })", "        // your code goes here\n        // recursively\
    \ goes through the list using selection sort\n        def sort(arr : List[Long])\
    \ : List[Long] = {\n            arr match {\n                case Nil => Nil\n\
    \                case h :: Nil => h :: Nil\n                case h :: t => {\n\
    \                    val min = (h /: t)((min, v) => if (Integer.bitCount(v.toInt)\
    \ < Integer.bitCount(min.toInt)) v else min)\n                    val t2 = t.filter(v\
    \ => v != min)\n                    min :: sort(t2)\n                }\n     \
    \       }\n        }\n        sort(arr)", "        def countOnes(x : Long) : Int\
    \ = {\n            var cnt = 0\n            var c = x\n            while (c >\
    \ 0) {\n                cnt += c % 2\n                c /= 2\n            }\n\
    \            cnt\n        }\n        arr.sortWith((a, b) => countOnes(a) < countOnes(b)\
    \ || (countOnes(a) == countOnes(b) && a < b))", "        arr.toArray.sortWith((a\
    \ : Long, b : Long) => {\n            if (a.toBinaryString.count(c => c == '1')\
    \ == b.toBinaryString.count(c => c == '1'))\n                return a < b\n  \
    \          a.toBinaryString.count(c => c == '1') < b.toBinaryString.count(c =>\
    \ c == '1')\n        }).toList", "        val sortedList = arr.sortWith((x, y)\
    \ => {\n            val countX = (x.toBinaryString filter (_ == '1')).length\n\
    \            val countY = (y.toBinaryString filter (_ == '1')).length\n      \
    \      if (countX == countY) {\n                x < y\n            } else {\n\
    \                countX < countY\n            }\n        })\n        sortedList",
  "        def numOfOne(n : Long) : Int = n.toBinaryString.count(_ == '1')\n     \
    \   arr.sortWith((a, b) => {\n            val numA = numOfOne(a)\n           \
    \ val numB = numOfOne(b)\n            if (numA == numB) a < b else numA < numB\n\
    \        })", "        arr.sortWith((a, b) => {\n            if (a > 0 && b >\
    \ 0) {\n                val onesA = a.toBinaryString.count(_ == '1')\n       \
    \         val onesB = b.toBinaryString.count(_ == '1')\n                if (onesA\
    \ == onesB) {\n                    a < b\n                } else {\n         \
    \           onesA < onesB\n                }\n            } else {\n         \
    \       a < b\n            }\n        })", "        arr.sortWith((a, b) => {\n\
    \            val aNum = toBinary(a).count(x => x == '1')\n            val bNum\
    \ = toBinary(b).count(x => x == '1')\n            if (aNum == bNum) a < b else\
    \ aNum < bNum\n        })", "        var ones = Map[Long, Long]()\n        for\
    \ (i <- arr) {\n            var l = List[Long]()\n            var n = i\n    \
    \        while (n > 0) {\n                l = l :+ (n % 2)\n                n\
    \ /= 2\n            }\n            var sum = 0l\n            for (j <- l) sum\
    \ += j\n            if (ones.contains(sum)) ones += (sum -> (ones(sum) + i))\n\
    \            else ones += (sum -> i)\n        }\n        var sorted = List[Long]()\n\
    \        for (i <- 0l to arr.length - 1) {\n            var temp = ones.minBy(x\
    \ => x._1)._1\n            ones -= ones.minBy(x => x._1)._1\n            sorted\
    \ = sorted :+ temp\n        }\n        return sorted", "      var res = arr.sortWith(_<_)\n\
    \      def numOfOnes(num : Long) : Int = {\n        var res = 0\n        for (d\
    \ <- num.toBinaryString) if (d == '1') res += 1\n        res\n      }\n      def\
    \ countOnes(arr : List[Long]) : List[(Long, Int)] = {\n        arr.map(e => (e,\
    \ numOfOnes(e)))\n      }\n      res = countOnes(res).sortWith((x, y) => x._2\
    \ < y._2 || (x._2 == y._2 && x._1 < y._1)).map(_._1)\n      res", "        val\
    \ ones = arr.map(n => (n, countOnes(n))).sortWith((a, b) => (a._2, a._1) < (b._2,\
    \ b._1))\n        ones.map(n => n._1)", "        val m = arr.map(i => (i, i.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        // m.foreach(println)\n        var p = 0\n \
    \       var q = 1\n        while (q < m.length) {\n            if (m(p)._2 ==\
    \ m(q)._2) {\n                var r = q\n                while (r < m.length &&\
    \ m(r)._2 == m(p)._2) r += 1\n                // println(r)\n                m.slice(p,\
    \ r).sortBy(_._1).foreach(a => println(a._1))\n                p = r\n       \
    \         q = r\n            } else {\n                p = q\n               \
    \ q += 1\n            }\n        }\n        m.map(_._1)", '        arr.sortWith(compare)',
  "    \tval arrOnesCount = arr.map(i => (i, countOnes(i)))\n    \tarrOnesCount.sortWith((x,\
    \ y) => x._2 == y._2 && x._1 > y._1 || x._2 < y._2).map(x => x._1)", '      List(1,5,2,3,4).sortWith(a
    => a > b)', "        def one_count(l : Long) : Int = {\n            var r = 0\n\
    \            var i = 0\n            while (i < 32) {\n                if ((l &\
    \ (1l << i)) != 0) r += 1\n                i += 1\n            }\n           \
    \ r\n        }\n        arr.sortWith(\n            (x, y) => {\n             \
    \   if (one_count(x) != one_count(y)) one_count(x) < one_count(y)\n          \
    \      else x < y\n            }\n        )", "        return arr.sortWith((a,\
    \ b) => {\n            val aa = a.toBinaryString\n            val bb = b.toBinaryString\n\
    \            val aaa = aa.filter(x => x == '1').length\n            val bbb =\
    \ bb.filter(x => x == '1').length\n            if (aaa == bbb) {\n           \
    \     return a < b\n            }\n            return aaa < bbb\n        })",
  '        arr.map(x => (x, Integer.bitCount(x.toInt))).sortBy(_._2).map(_._1)', " \
    \       arr.sortWith((x, y) => {\n            val (x1, y1) = (getOneCount(x),\
    \ getOneCount(y))\n            if (x1 == y1)\n                x < y\n        \
    \    else\n                x1 < y1\n        })", "        val bin = arr.map(x\
    \ => (x, toBinary(x))).sortWith((a, b) => a._2.length < b._2.length)\n       \
    \ val res = bin.groupBy(_._2.length).map(x => x._2.map(_._1).sorted).toList.sorted\n\
    \        if (res.length == 1) res.head\n        else res.flatten", "        arr.sortWith((a,\
    \ b) => {\n            val aBinary = a.toBinaryString\n            val bBinary\
    \ = b.toBinaryString\n            if (aBinary.count(_ == '1') == bBinary.count(_\
    \ == '1')) a < b\n            else aBinary.count(_ == '1') < bBinary.count(_ ==\
    \ '1')\n        })", "        val listOfTuple = arr.map(n => (Long.bitCount(n),\
    \ n))\n        listOfTuple.sortBy(f => (f._1, f._2)).map(f => f._2)", "      \
    \  val c = arr.map(a => (a, Integer.bitCount(a.toInt))).sortWith((a, b) => a._2\
    \ < b._2 || (a._2 == b._2 && a._1 < b._1))\n        c.map(x => x._1)", "     \
    \   val sorted = arr.sortWith(_ < _)\n        val a = sorted.map(x => (x, x.toBinaryString.split(\"\
    \").filter(_ == \"1\").length))\n        a.sortWith((a, b) => (a._2 == b._2) &&\
    \ (a._1 > b._1)).map(_._1)", "        arr.sortWith((a, b) => {\n            val\
    \ n1 = count(a)\n            val n2 = count(b)\n            if (n1 == n2) a <\
    \ b else n1 < n2\n        })", "        arr.sortWith((x, y) => {\n           \
    \ val x_bs = bitString(x)\n            val y_bs = bitString(y)\n            val\
    \ x_ones = numOnes(x_bs)\n            val y_ones = numOnes(y_bs)\n           \
    \ if (x_ones < y_ones) true\n            else if (x_ones > y_ones) false\n   \
    \         else x < y\n        })", "        arr.sortWith((x, y) => x < y).sortWith((x,\
    \ y) => {\n          val xv = x.toBinaryString\n          val yv = y.toBinaryString\n\
    \          if (xv.count(_ == '1') == yv.count(_ == '1')) x < y else xv.count(_\
    \ == '1') < yv.count(_ == '1')\n        })", "        arr.sortWith((n1, n2) =>\
    \ {\n            if (n1 == n2) false\n            else if (n1 > 0 && n2 > 0) {\n\
    \                val n1Ones = n1.toBinaryString.toCharArray.count(_ == '1')\n\
    \                val n2Ones = n2.toBinaryString.toCharArray.count(_ == '1')\n\
    \                if (n1Ones == n2Ones) n1 < n2\n                else n1Ones <\
    \ n2Ones\n            }\n            else n1 < n2\n        })", '        arr.sortWith(cmp)',
  "        val sorted = arr.sortWith(_ < _)\n        val result = ArrayBuffer[Long]()\n\
    \        val zeros = ArrayBuffer[Long]()\n        val ones = ArrayBuffer[Long]()\n\
    \        for (i <- sorted) {\n            var count = 0\n            var tmp =\
    \ i\n            while (tmp > 0) {\n                if (tmp % 2 == 1) count +=\
    \ 1\n                tmp = tmp / 2\n            }\n            if (count == 0)\
    \ zeros += i\n            else if (count == 1) ones += i\n            else result\
    \ += i\n        }\n        zeros ++= ones ++= result\n        zeros.toList", " \
    \       //define a function to sort element in the list\n        def sortElem(x\
    \ : Long, y : Long) : Boolean = {\n            val (a, b) = (binToOnes(x), binToOnes(y))\n\
    \            if (a != b)\n                a < b\n            else\n          \
    \      x < y\n        }\n        //define a function to convert binary string\
    \ to number of ones\n        def binToOnes(x : Long) : Int = {\n            var\
    \ res = 0\n            while (x > 0) {\n                if (x % 2 == 1)\n    \
    \                res += 1\n                x /= 2\n            }\n           \
    \ res\n        }\n        arr.sortWith(sortElem)", "        def numOnes(l : Long)\
    \ : Int = {\n            var count = 0\n            var i = l\n            while\
    \ (i > 0) {\n                if (i % 2 == 1) count += 1\n                i = i\
    \ / 2\n            }\n            count\n        }\n        arr.sortWith((a, b)\
    \ => {\n            if (numOnes(a) == numOnes(b)) {\n                a < b\n \
    \           } else {\n                numOnes(a) < numOnes(b)\n            }\n\
    \        })", "        arr.sortWith((a, b) => {\n            if (a.toBinaryString.filter(_\
    \ == '1').length < b.toBinaryString.filter(_ == '1').length) true\n          \
    \  else if (a.toBinaryString.filter(_ == '1').length > b.toBinaryString.filter(_\
    \ == '1').length) false\n            else a < b\n        })", "        def countOne(num\
    \ : Long) : Int = {\n            if (num == 0) 0\n            else if (num ==\
    \ 1) 1\n            else countOne(num / 2) + (num % 2).toInt\n        }\n    \
    \    arr.sortWith((x, y) => countOne(x) < countOne(y) || (countOne(x) == countOne(y)\
    \ && x < y))", '        arr.toArray.sortWith(compare).toList', "        val res\
    \ = arr.sortWith((a, b) => {\n            val aones = Integer.bitCount(a.toInt)\n\
    \            val bones = Integer.bitCount(b.toInt)\n            if (aones == bones)\
    \ a < b else aones < bones\n        })\n        res", "        var tmp : List[(Long,\
    \ Int)] = arr.map((x : Long) => (x, toBinary(x).count(_ == '1')))\n        var\
    \ result : List[Long] = tmp.sortBy(_._2).map(_._1)\n        return result", '        arr.sortWith(isGreaterThan(_,
    _))', "        var map = Map[Int, List[Long]]()\n        for (num <- arr) {\n\
    \            var binStr = num.toBinaryString\n            var count = binStr.filter(_\
    \ == '1').length\n            if (map.contains(count)) {\n                map(count)\
    \ = map(count) :+ num\n            } else {\n                map(count) = List(num)\n\
    \            }\n        }\n        map.toList.sortBy(_._1).flatMap(_._2).sorted",
  "        def ones(l : Long) : Long = {\n            if (l == 0) 0\n            else\
    \ if (l % 2 == 0) ones(l / 2)\n            else ones(l / 2) + 1\n        }\n \
    \       arr.sortWith((x, y) => {\n            val ox = ones(x)\n            val\
    \ oy = ones(y)\n            if (ox < oy) true\n            else if (ox > oy) false\n\
    \            else x < y\n        })", "        arr.sortWith((x, y) => {\n    \
    \        val xOnes = (x.toBinaryString.toList.filter(_ == '1').length)\n     \
    \       val yOnes = (y.toBinaryString.toList.filter(_ == '1').length)\n      \
    \      if (xOnes == yOnes) {\n                x < y\n            } else {\n  \
    \              xOnes < yOnes\n            }\n        })", "        val a = ArrayBuffer[Long]()\n\
    \        for (x <- arr) a += x\n        val k = a.toArray\n        val n = k.length\n\
    \        for (i <- 0 until n) {\n            for (j <- 1 until n - i) {\n    \
    \            val c1 = count(k(j - 1).toInt)\n                val c2 = count(k(j).toInt)\n\
    \                if (c1 > c2) {\n                    val temp = k(j - 1)\n   \
    \                 k(j - 1) = k(j)\n                    k(j) = temp\n         \
    \       } else if (c1 == c2) {\n                    if (k(j - 1) > k(j)) {\n \
    \                       val temp = k(j - 1)\n                        k(j - 1)\
    \ = k(j)\n                        k(j) = temp\n                    }\n       \
    \         }\n            }\n        }\n        k.toList", "        var a = arr.filter(_\
    \ >= 0)\n        var b = arr.filter(_ < 0)\n        a = a.sortWith((x, y) => x.toBinaryString.count(_\
    \ == '1') < y.toBinaryString.count(_ == '1') || (x.toBinaryString.count(_ == '1')\
    \ == y.toBinaryString.count(_ == '1') && x < y))\n        b = b.sortWith((x, y)\
    \ => x.toBinaryString.count(_ == '1') > y.toBinaryString.count(_ == '1') || (x.toBinaryString.count(_\
    \ == '1') == y.toBinaryString.count(_ == '1') && x > y))\n        a ++ b", " \
    \       val hm = new HashMap[Int, List[Long]]\n        for (n <- arr) {\n    \
    \        val bit = n.toBinaryString.split(\"1\").length - 1\n            if (hm.contains(bit))\
    \ hm(bit) = hm(bit) :+ n\n            else hm(bit) = List(n)\n        }\n    \
    \    val ks = hm.keys.toList.sorted\n        var nn = List[Long]()\n        for\
    \ (k <- ks) nn = nn ::: hm(k).sorted\n        nn", "    \tarr.sortWith((a, b)\
    \ => {\n    \t\tval cnt_a = a.toBinaryString.count(c => c == '1')\n    \t\tval\
    \ cnt_b = b.toBinaryString.count(c => c == '1')\n    \t\tif (cnt_a == cnt_b) {\n\
    \    \t\t\ta < b\n    \t\t} else {\n    \t\t\tcnt_a < cnt_b\n    \t\t}\n    \t\
    })", "        // Implement this\n        arr.map(x => (x, x.toBinaryString.filter(_\
    \ == '1').length, x.toBinaryString)).sortBy(x => (x._2, x._3)).map(_._1)", " \
    \       // a simple test\n        // the result should be:\n        // (List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n        // val tmp_list = List[Long](1l.toLong,\
    \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)\n        // tmp_list.sortWith((a,\
    \ b) => {\n        //     // count the number of ones in binary representation\n\
    \        //     // a.toBinaryString.toList.filter(p => { p == '1' }).length\n\
    \        //     if (a.toBinaryString.toList.filter(p => { p == '1' }).length <\
    \ b.toBinaryString.toList.filter(p => { p == '1' }).length) {\n        //    \
    \     true\n        //     } else if (a.toBinaryString.toList.filter(p => { p\
    \ == '1' }).length > b.toBinaryString.toList.filter(p => { p == '1' }).length)\
    \ {\n        //         false\n        //     } else {\n        //         if\
    \ (a < b) {\n        //             true\n        //         } else {\n      \
    \  //             false\n        //         }\n        //     }\n        // })\n\
    \        // for the real testing\n        // the result should be:\n        //\
    \ (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n      \
    \  arr.sortWith((a, b) => {\n            // count the number of ones in binary\
    \ representation\n            // a.toBinaryString.toList.filter(p => { p == '1'\
    \ }).length\n            if (a.toBinaryString.toList.filter(p => { p == '1' }).length\
    \ < b.toBinaryString.toList.filter(p => { p == '1' }).length) {\n            \
    \    true\n            } else if (a.toBinaryString.toList.filter(p => { p == '1'\
    \ }).length > b", "        // Given a list of longs, return the list sorted according\
    \ to the following\n        // priority:\n        //     1. Long with most 1s\
    \ in its binary representation\n        //     2. Within group of Longs with same\
    \ number of 1s in binary representation,\n        //        order in increasing\
    \ magnitude.\n        //     3. For Longs with equal binary representation and\
    \ value, order should not\n        //        change.\n        val (ones, zeros)\
    \ = arr.partition(_ > 0)\n        ones.map(_.toBinaryString.count(_ == '1')).zip(ones).toMap.toList.sortBy(_._1).map(_._2)\
    \ ++\n        zeros.map(_.toBinaryString.count(_ == '1')).zip(zeros).toMap.toList.sortBy(_._1).map(_._2)",
  "        val sorted = arr.sortWith(_.toBinaryString.count(_ == '1') < _.toBinaryString.count(_\
    \ == '1'))\n        sorted.sortWith((a, b) => if (a.toBinaryString.count(_ ==\
    \ '1') == b.toBinaryString.count(_ == '1')) a < b else false)", "        val mp\
    \ = new HashMap[Int, List[Long]]\n        for (x <- arr) {\n            val cnt\
    \ = toOne(x)\n            if (mp.contains(cnt)) {\n                mp(cnt) = x\
    \ :: mp(cnt)\n            } else {\n                mp(cnt) = List(x)\n      \
    \      }\n        }\n        val keys = mp.keys.toList.sorted\n        var res\
    \ = List[Long]()\n        for (k <- keys) {\n            val tmp = mp(k).sorted\n\
    \            res ++= tmp\n        }\n        res", '        arr.sorted', "   \
    \     def countBits(n : Long) : Int = (n.toBinaryString.count(_ == '1'))\n   \
    \     def f(a : Long, b : Long) : Boolean = (countBits(a) < countBits(b)) || (countBits(a)\
    \ == countBits(b) && a < b)\n        arr.sortWith(f)", "      arr.sortWith((a,\
    \ b) => {\n        a.toBinaryString.count(_ == '1') < b.toBinaryString.count(_\
    \ == '1') ||\n        (a.toBinaryString.count(_ == '1') == b.toBinaryString.count(_\
    \ == '1') && a < b)\n      })", "        arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(x => (x._2, x._1)).map(_._1)", "      arr.sortWith( (a, b)\
    \ => (a.toBinaryString.count(_ == '1') < b.toBinaryString.count(_ == '1')) ||\
    \ (a.toBinaryString.count(_ == '1') == b.toBinaryString.count(_ == '1') && a <\
    \ b))", "        return arr.sortWith(\n            (l, r) => {\n             \
    \   val lbits = getBits(l)\n                val rbits = getBits(r)\n         \
    \       if (lbits == rbits) {\n                    return l < r\n            \
    \    }\n                return lbits < rbits\n            }\n        )", "   \
    \     var anss = ArrayBuffer[Long]()\n        val nums = (1 to arr.length).map(a\
    \ => new IntPair(a, arr(a - 1))).toArray\n        val hash = HashMap[Long, Int]()\n\
    \        arr.foreach(a => hash(a) = hash.getOrElse(a, 0) + 1)\n        val maxNum\
    \ = arr.map(a => log(a + 1) / log(2)).max.toInt\n        val q1 = new PriorityQueue[IntPair]()(new\
    \ Ordering[IntPair] {\n            override def compare(x : IntPair, y : IntPair)\
    \ = {\n                val v1 = x.v\n                val v2 = y.v\n          \
    \      var i = 0\n                while (i < maxNum && (v1 >> i & 1) == (v2 >>\
    \ i & 1)) i += 1\n                if (i == maxNum) x.i.compare(y.i)\n        \
    \        else {\n                    if ((v1 >> i & 1) > (v2 >> i & 1)) -1\n \
    \                   else 1\n                }\n            }\n        })\n   \
    \     val q2 = new PriorityQueue[IntPair]()(new Ordering[IntPair] {\n        \
    \    override def compare(x : IntPair, y : IntPair) = {\n                if (x.v\
    \ == y.v) 0\n                else {\n                    if (x.v > y.v) -1\n \
    \                   else 1\n                }\n            }\n        })\n   \
    \     nums.foreach(n => q1.enqueue(n))\n        while (q1.size > 0) {\n      \
    \      val n = q1.dequeue\n            val num = hash(n.v)\n            if (num\
    \ == 1) {\n                q2.enqueue(n)\n                hash.remove(n.v)\n \
    \           }\n            else hash(n.v) = num - 1\n        }\n        while\
    \ (q2.size > 0) {\n            val n = q2.dequeue\n            anss += n.v\n \
    \       }\n        anss.toList", "      val ones = arr.map(a => (a, Integer.bitCount(a.toInt))).groupBy(_._2).map(a\
    \ => (a._1, a._2.map(_._1))).toList.sortBy(_._1)\n      (ones.map(_._2).foldLeft(List[Long]())((l,\
    \ i) => l ::: i.sortWith(_ < _))).toList", "        arr.sortWith({(x : Long, y\
    \ : Long) =>\n            val xones = x.toBinaryString.count(_ == '1')\n     \
    \       val yones = y.toBinaryString.count(_ == '1')\n            if (xones ==\
    \ yones) {\n                x < y\n            } else {\n                xones\
    \ < yones\n            }\n        })", '        arr.sortWith((a, b) => f(a) <
    f(b))', "        val ones = arr.map(x => Longs.toByteArray(x).foldLeft(0)((a,\
    \ b) => a + Integer.bitCount(b & 0xFF)))\n        arr.zip(ones).sortBy(x => (x._2,\
    \ x._1)).map(x => x._1)", "        def getBitCount(num : Long) : Int = {\n   \
    \         var n = num\n            var count = 0\n            while (n > 0) {\n\
    \                count += n % 2\n                n /= 2\n            }\n     \
    \       count\n        }\n        arr.sortWith((x, y) => {\n            val xOnes\
    \ = getBitCount(x)\n            val yOnes = getBitCount(y)\n            if (xOnes\
    \ == yOnes) x < y else xOnes < yOnes\n        })", "        var ones = 0\n   \
    \     var twos = 0\n        val table = new HashMap[Long, Int]\n        arr.foreach(x\
    \ => {\n            val count = countOnes(x)\n            if (count > ones) {\n\
    \                twos = ones\n                ones = count\n            } else\
    \ if (count > twos) {\n                twos = count\n            }\n         \
    \   table(x) = count\n        })\n        var result = new ListBuffer[Long]\n\
    \        result ++= (arr.filter(x => table(x) == ones))\n        result ++= (arr.filter(x\
    \ => table(x) == twos))\n        result.toList", "        arr.sortWith((l1, l2)\
    \ => {\n            val s1 = l1.toBinaryString\n            val s2 = l2.toBinaryString\n\
    \            val t1 = s1.count(_ == '1')\n            val t2 = s2.count(_ == '1')\n\
    \            t1 == t2 match {\n                case true => l1 <= l2\n       \
    \         case false => t1 < t2\n            }\n        })", "        arr.sortWith((a,\
    \ b) => countOnes(a) < countOnes(b) ||\n                (countOnes(a) == countOnes(b)\
    \ && a < b))", "        arr.sortWith((a, b) => Integer.bitCount(a.toInt) < Integer.bitCount(b.toInt)\
    \ ||\n            (Integer.bitCount(a.toInt) == Integer.bitCount(b.toInt) && a\
    \ < b))", "        val dic : Map[Int, ArrayBuffer[Long]] = new HashMap[Int, ArrayBuffer[Long]]\n\
    \        for (x <- arr) {\n            val str = x.toBinaryString\n          \
    \  var cnt = 0\n            for (c <- str) {\n                if (c == '1') cnt\
    \ += 1\n            }\n            if (!dic.contains(cnt)) dic(cnt) = new ArrayBuffer[Long]\n\
    \            dic(cnt) += x\n        }\n        val sortedKeys = dic.keys.toList.sorted\n\
    \        val res = new ArrayBuffer[Long]\n        for (k <- sortedKeys) {\n  \
    \          val a = dic(k).toList.sorted\n            for (x <- a) res += x\n \
    \       }\n        res.toList", '        arr.sortWith((n1, n2) => getOnes(n1)
    < getOnes(n2))', "        class Number(val n : Long) {\n            def count\
    \ = Number.count(n)\n            def compare(that : Number) = {\n            \
    \    if (this.count == that.count) this.n.compare(that.n)\n                else\
    \ this.count.compare(that.count)\n            }\n        }\n        object Number\
    \ {\n            def count(n : Long) : Int = {\n                if (n == 0) 0\n\
    \                else if (n == 1) 1\n                else count(n / 2) + (n %\
    \ 2).toInt\n            }\n        }\n        val result = arr.map(new Number(_)).sortWith(_.compare(_)\
    \ < 0)\n        result.map(_.n)", '      arr.sortWith(compare)', "        arr.sortWith((x,\
    \ y) => {\n            if (x == y) {\n                x < y\n            } else\
    \ {\n                onesInBinary(x) < onesInBinary(y)\n            }\n      \
    \  })", "        arr.map(x => (x, x.toBinaryString.count(_ == '1'))).sortBy(x\
    \ => (x._2, x._1)).map(_._1)", "        var count = new HashMap[Long, Int]()\n\
    \        var queue = new Queue[Long]()\n        for (i <- arr) {\n           \
    \ count(i) = count.getOrElse(i, 0) + 1\n            queue += i\n        }\n  \
    \      var result = new Queue[Long]()\n        while (queue.size > 0) {\n    \
    \        var smallest = Long.MaxValue\n            var c = Int.MaxValue\n    \
    \        var i = queue.size - 1\n            while (i >= 0) {\n              \
    \  val n = queue(i)\n                if (count(n) < c || (count(n) == c && n <\
    \ smallest)) {\n                    smallest = n\n                    c = count(n)\n\
    \                }\n                i -= 1\n            }\n            queue -=\
    \ smallest\n            var j = 0\n            while (j < c) {\n             \
    \   result += smallest\n                j += 1\n            }\n        }\n   \
    \     result.toList", "        arr.sortWith((a, b) => {\n            if (a >=\
    \ 0 && b >= 0) {\n                val onesA = a.toBinaryString.count(_ == '1')\n\
    \                val onesB = b.toBinaryString.count(_ == '1')\n              \
    \  if (onesA == onesB) {\n                    a < b\n                } else {\n\
    \                    onesA < onesB\n                }\n            } else if (a\
    \ < 0 && b < 0) {\n                val onesA = abs(a).toBinaryString.count(_ ==\
    \ '1')\n                val onesB = abs(b).toBinaryString.count(_ == '1')\n  \
    \              if (onesA == onesB) {\n                    a > b\n            \
    \    } else {\n                    onesA < onesB\n                }\n        \
    \    } else {\n                a > b\n            }\n        })", '        arr.sorted',
  "        if (arr.length == 0) {\n            return List[Long]()\n        }\n  \
    \      // Your code here\n        arr.map(value => (value, value.toBinaryString.count(_\
    \ == '1'), value.toBinaryString)).sortBy(value => (value._2, value._3, value._1)).map(value\
    \ => value._1)", "        if (arr.size == 0) return List[Long]()\n        if (arr.size\
    \ == 1) return arr\n        val onesMap = new scala.collection.mutable.HashMap[Long,\
    \ Int]\n        arr.foreach(x => onesMap.put(x, x.toBinaryString.count(_ == '1')))\n\
    \        arr.sortWith((x, y) => {\n            if (onesMap(x) == onesMap(y)) x\
    \ < y\n            else onesMap(x) < onesMap(y)\n        })", "        val ones\
    \ = arr.map(x => (x, countOnes(x))).sortWith((x, y) => x._2 < y._2 || (x._2 ==\
    \ y._2 && x._1 < y._1))\n        ones.map(x => x._1)", "        var bmp = Map[Int,\
    \ List[Long]]()\n        arr.foreach(x => bmp(x.toBinaryString.filter(_ == '1').length)\
    \ = bmp.getOrElse(x.toBinaryString.filter(_ == '1').length, List[Long]()) :+ x)\n\
    \        var result = List[Long]()\n        (0 to 31).foreach(x => result = bmp.getOrElse(x,\
    \ List[Long]()) ::: result)\n        result", "        // length of longest binary\
    \ string\n        val mx = arr.map(x => x.toBinaryString.length).max\n       \
    \ // add leading 0s\n        val arr2 = arr.map(x => x.toBinaryString.reverse.padTo(mx,\
    \ '0').reverse.map(x => x.asDigit).toList)\n        // remove leading 0s and sort\
    \ by number of 1s and then by binary value\n        arr2.sortBy(x => (x.count(_\
    \ == 1), x)).map(x => BigInt(x.mkString(\"\"), 2).toLong)", "        val data\
    \ = new ArrayBuffer[(Long, Long)]()\n        for (i <- arr) {\n            var\
    \ count : Long = 0\n            var sum : Long = 0\n            var temp = i\n\
    \            while (temp > 0) {\n                if (temp % 2 == 1) {\n      \
    \              count += 1\n                }\n                sum += temp % 2\n\
    \                temp /= 2\n            }\n            data += ((count, sum *\
    \ pow(10, i.toString.length).toLong + i))\n        }\n        return data.toList.sortBy(x\
    \ => (x._1, x._2)).map(x => x._2 % pow(10, i.toString.length).toLong)", "    \
    \    arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n     \
    \       val bBin = b.toBinaryString\n            val aOnes = aBin.count(c => c\
    \ == '1')\n            val bOnes = bBin.count(c => c == '1')\n            if (aOnes\
    \ == bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        val m = Map.empty[Int, ArrayBuffer[Long]]\n\
    \        for (n <- arr) {\n            val ones = n.toBinaryString.count(_ ==\
    \ '1')\n            m(ones) = m.getOrElse(ones, ArrayBuffer()) += n\n        }\n\
    \        val keys = m.keys.toList.sorted\n        val r = new ArrayBuffer[Long]\n\
    \        for (k <- keys) {\n            val list = m(k).sorted\n            for\
    \ (n <- list) r += n\n        }\n        r.toList", "        arr.sorted(new Ordering[Long]\
    \ {\n            def compare(x : Long, y : Long) = {\n                if (x <\
    \ 0) {\n                    if (y < 0) {\n                        y.toBinaryString.count(_\
    \ == '1') - x.toBinaryString.count(_ == '1')\n                    } else {\n \
    \                       1\n                    }\n                } else {\n \
    \                   if (y < 0) {\n                        -1\n               \
    \     } else {\n                        x.toBinaryString.count(_ == '1') - y.toBinaryString.count(_\
    \ == '1')\n                    }\n                }\n            }\n        })",
  "        def countOnes(num : Long) : Int = {\n            var count = 0\n      \
    \      var n = num\n            while (n > 0) {\n                count += (n &\
    \ 1)\n                n = n >> 1\n            }\n            count\n        }\n\
    \        arr.sortWith((a, b) => {\n            if (countOnes(a) < countOnes(b))\
    \ true\n            else if (countOnes(a) > countOnes(b)) false\n            else\
    \ a < b\n        })", "      arr.sorted(new Ordering[Long] {\n        def compare(a\
    \ : Long, b : Long) = {\n          val onesA = ones(a)\n          val onesB =\
    \ ones(b)\n          if (onesA == onesB) a compare b\n          else onesA compare\
    \ onesB\n        }\n      })", "        arr.sortWith((a, b) => a.toBinaryString.filter(_\
    \ == '1').length == b.toBinaryString.filter(_ == '1').length match {\n       \
    \     case true => a < b\n            case false => a.toBinaryString.filter(_\
    \ == '1').length < b.toBinaryString.filter(_ == '1').length\n        })", "  \
    \      var l = List[Long]()\n        var ones = 0\n        for (i <- arr) {\n\
    \            var j = i\n            while (j > 0) {\n                ones += j\
    \ % 2\n                j /= 2\n            }\n            l = (ones, i) :: l\n\
    \            ones = 0\n        }\n        l = l.sortWith((x, y) => (x._1 == y._1\
    \ && x._2 < y._2) || x._1 < y._1)\n        return l.map(x => x._2)", "       \
    \ arr.sortWith((x, y) => {\n            val c1 = countOnes(x)\n            val\
    \ c2 = countOnes(y)\n            c1 < c2 || (c1 == c2 && x < y)\n        })",
  "      val countOnes = (a : Long) => a.toBinaryString.count(_ == '1')\n      arr.sorted(Ordering.by((x\
    \ : Long) => (countOnes(x), x)))", "        arr.sortWith((n1, n2) => {\n     \
    \       val s1 = Integer.toBinaryString(n1.toInt)\n            val s2 = Integer.toBinaryString(n2.toInt)\n\
    \            if (s1.count(_ == '1') == s2.count(_ == '1')) n1 < n2 else s1.count(_\
    \ == '1') < s2.count(_ == '1')\n        })", "        val sorted = arr.sortWith(\n\
    \            (a : Long, b : Long) =>\n                {\n                    val\
    \ binA = a.toBinaryString\n                    val binB = b.toBinaryString\n \
    \                   val onesA = binA.count(_ == '1')\n                    val\
    \ onesB = binB.count(_ == '1')\n                    if (onesA != onesB) onesA\
    \ < onesB\n                    else a < b\n                }\n        )\n    \
    \    sorted", "        // Gotta be some better way, no?\n        var zipped =\
    \ arr.zip(arr.map(x => x.toBinaryString.filter(_ == '1').length).zip(arr))\n \
    \       zipped = zipped.sortWith(_._2._1 < _._2._1)\n        zipped = zipped.sortWith(_._2._2\
    \ < _._2._2)\n        zipped.map(_._1)", "        // Your code goes here...\n\
    \        arr.map(x => (count(x), x)).sortBy(x => (x._1, x._2)).map(x => x._2)",
  "        val ones = new HashMap[Long, Int]()\n        val ans = new ListBuffer[Long]()\n\
    \        for (x <- arr) {\n            val binaryString = x.toBinaryString\n \
    \           val count = binaryString.filter(y => y == '1').length\n          \
    \  ones(x) = count\n            ans += x\n        }\n        val sortedOnes =\
    \ arr.sortWith((x, y) => ones(x) < ones(y))\n        ans.sortWith((x, y) => if\
    \ (ones(x) == ones(y)) x < y else ones(x) < ones(y))", "        var res = new\
    \ ArrayBuffer[Long]\n        var temp = new ArrayBuffer[Long]\n        while (arr.length\
    \ > 0) {\n            var oneCount = getOneCount(arr.head)\n            res +=\
    \ arr.head\n            arr.foreach {x => if (getOneCount(x) == oneCount) temp\
    \ += x}\n            temp.foreach {x => arr -= x}\n            var tempRes = res.toList\n\
    \            temp.foreach {x => tempRes = tempRes.filter {y => y != x}}\n    \
    \        tempRes.foreach {x => temp += x}\n            temp = temp.sortWith {_\
    \ < _}\n            temp.foreach {x => res += x}\n            temp.clear\n   \
    \     }\n        res.toList", "        if (arr.length <= 1) return arr\n     \
    \   val pivot = arr(arr.length / 2)\n        val same = arr.filter(_ == pivot)\n\
    \        val lesser = sortArray(arr.filter(_ < pivot))\n        val greater =\
    \ sortArray(arr.filter(_ > pivot))\n        lesser ::: same ::: greater", "  \
    \      val map = arr.map(x => (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n\
    \        map.map(_._1)", '        arr.sortWith(compare)', "        arr.sortWith((e1,\
    \ e2) => {\n            val e1Bin = e1.toBinaryString\n            val e2Bin =\
    \ e2.toBinaryString\n            e1Bin.count(_ == '1') < e2Bin.count(_ == '1')\
    \ ||\n            (e1Bin.count(_ == '1') == e2Bin.count(_ == '1') && e1 < e2)\n\
    \        })", "        arr.sortWith((a, b) => {\n            var aOnes = convertToBinary(a.toInt).count(c\
    \ => c == '1')\n            var bOnes = convertToBinary(b.toInt).count(c => c\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        if (arr.size <= 1) return arr\n        def f(x : Long) : Long = {\n   \
    \         var count = 0\n            var num = x\n            while (num > 0)\
    \ {\n                if (num % 2 == 1) count += 1\n                num /= 2\n\
    \            }\n            return count\n        }\n        arr.sortWith((x,\
    \ y) => f(x) < f(y) || (f(x) == f(y) && x < y))", "        var oneCnt = ListBuffer[(Long,\
    \ Int)]()\n        for (v <- arr) {\n            var cnt = 0\n            var\
    \ n = v\n            while (n > 0) {\n                if (n % 2 == 1) cnt += 1\n\
    \                n /= 2\n            }\n            oneCnt += Tuple2(v, cnt)\n\
    \        }\n        oneCnt.sortWith((a, b) => if (a._2 == b._2) a._1 < b._1 else\
    \ a._2 < b._2).map(_._1).toList", "        // your code here\n        var zeroOne\
    \ = scala.collection.mutable.Map[Long, Int]()\n        var res = new ListBuffer[Long]()\n\
    \        var maxOne = -1\n        for (x <- arr) {\n            var num = x\n\
    \            var counter = 0\n            while (num > 0) {\n                if\
    \ (num % 2 == 1) counter += 1\n                num /= 2\n            }\n     \
    \       if (counter > maxOne) maxOne = counter\n            zeroOne += (x -> counter)\n\
    \        }\n        for (i <- 0 to maxOne) {\n            for (x <- arr) {\n \
    \               if (zeroOne(x) == i) res += x\n            }\n        }\n    \
    \    res.toList", "        arr.sorted((a, b) => {\n            if (countOnes(a)\
    \ == countOnes(b)) {\n                a < b\n            } else {\n          \
    \      countOnes(a) < countOnes(b)\n            }\n        })", "        arr.sortWith((x,\
    \ y) => {\n            var xStr = x.toBinaryString\n            var yStr = y.toBinaryString\n\
    \            var xCount = 0\n            var yCount = 0\n            for (i <-\
    \ 0 until xStr.length) if (xStr(i) == '1') xCount += 1\n            for (i <-\
    \ 0 until yStr.length) if (yStr(i) == '1') yCount += 1\n            if (xCount\
    \ != yCount) xCount < yCount else x < y\n        })", "        var result = new\
    \ HashMap[Int, ArrayBuffer[Long]]()\n        for (i <- arr) {\n            var\
    \ num = getOneNum(i)\n            if (result.contains(num)) {\n              \
    \  result(num) += i\n            } else {\n                result += (num -> ArrayBuffer(i))\n\
    \            }\n        }\n        var resultList = new ArrayBuffer[Long]()\n\
    \        for (i <- result.keySet.toList.sorted) {\n            resultList ++=\
    \ result(i).toList.sorted\n        }\n        return resultList.toList", '        arr.map(x
    => (x, x.toBinaryString.toCharArray.map(c => c.toString.toInt).sum)).sortBy(x
    => (x._2, x._1)).map(x => x._1)', "        var map = Map[Int, List[Long]]()\n\
    \        for (n <- arr) {\n            var one = n.toBinaryString.filter(_ ==\
    \ '1').length\n            if (map.contains(one)) {\n                map += (one\
    \ -> (map(one) :+ n))\n            } else {\n                map += (one -> List(n))\n\
    \            }\n        }\n        var res = List[Long]()\n        for (n <- map.keys.toList.sorted)\
    \ {\n            map(n).sorted.foreach(res :+= _)\n        }\n        res", '        arr.sortWith(getBinaryOnes(_)
    < getBinaryOnes(_))', "        arr.sortWith((x, y) => {\n            Integer.bitCount(x.toInt)\
    \ < Integer.bitCount(y.toInt) || (Integer.bitCount(x.toInt) == Integer.bitCount(y.toInt)\
    \ && x < y)\n        })", "        def numOfBits(num : Long) : Int = {\n     \
    \       val s = num.toBinaryString\n            var count = 0\n            for\
    \ (i <- 0 until s.length) {\n                if (s(i) == '1') count += 1\n   \
    \         }\n            count\n        }\n        arr.sortWith({case (num1, num2)\
    \ =>\n            if (numOfBits(num1) < numOfBits(num2)) true\n            else\
    \ if (numOfBits(num1) > numOfBits(num2)) false\n            else num1 < num2\n\
    \        })", "        def count(x : Long) : Int = x.toBinaryString.count(c =>\
    \ c == '1')\n        arr.sortWith((x, y) => count(x) < count(y) || (count(x) ==\
    \ count(y) && x < y))", "        // your code here\n        return arr", "   \
    \     arr.sortWith((x, y) => x.toBinaryString.count(_ == '1') < y.toBinaryString.count(_\
    \ == '1')).sortWith((x, y) => x < y)", "        val sorted = arr.sortWith {(x,\
    \ y) =>\n            val binX = x.toBinaryString\n            val binY = y.toBinaryString\n\
    \            val onX = binX.count(_ == '1')\n            val onY = binY.count(_\
    \ == '1')\n            if (onX == onY)\n                x < y\n            else\n\
    \                onX < onY\n        }\n        sorted", "        val ones = arr.map(x\
    \ => (Long.bitCount(x), x)).sortWith((a, b) => if (a._1 != b._1) a._1 < b._1 else\
    \ a._2 < b._2)\n        ones.map(x => x._2)", "        arr.sortWith((a, b) =>\
    \ {\n            var counterA = 0\n            var counterB = 0\n            var\
    \ tempA = a\n            var tempB = b\n            while (tempA > 0) {\n    \
    \            if (tempA % 2 == 1) counterA += 1\n                tempA /= 2\n \
    \           }\n            while (tempB > 0) {\n                if (tempB % 2\
    \ == 1) counterB += 1\n                tempB /= 2\n            }\n           \
    \ counterA != counterB match {\n                case true => counterA < counterB\n\
    \                case false => a < b\n            }\n        })", "        arr.sortWith((x,\
    \ y) => (x.toBinaryString.filter(_ == '1').length, x) < (y.toBinaryString.filter(_\
    \ == '1').length, y))", "        def countOnes(num : Long) : Int = num.toBinaryString.count(x\
    \ => x == '1')\n        arr.sortWith((a, b) => (countOnes(a) > countOnes(b)) ||\
    \ (countOnes(a) == countOnes(b) && a > b))", '        arr.sortWith(compare)',
  '        arr.sortWith(compare)', "        arr.sortWith((l, r) => l.toBinaryString.count(_\
    \ == '1') < r.toBinaryString.count(_ == '1') || l < r)", "        def countOnes(num\
    \ : Long) : Int = {\n            var n = num\n            var res = 0\n      \
    \      while (n > 0) {\n                res += (n & 1)\n                n >>=\
    \ 1\n            }\n            res\n        }\n        arr.sortWith((x, y) =>\
    \ {\n            val countx = countOnes(x)\n            val county = countOnes(y)\n\
    \            if (countx < county) true\n            else if (countx > county)\
    \ false\n            else x < y\n        })", "        println(arr.toArray.sorted.toList)\n\
    \        return arr.toArray.sorted.toList", "    \tarr.sortWith(compare)", " \
    \       def countBits(num : Long) : Int = {\n            def countBits1(num :\
    \ Long, s : Int) : Int = {\n                if (num == 0) s\n                else\
    \ countBits1(num >> 1, s + (num & 1).toInt)\n            }\n            countBits1(num,\
    \ 0)\n        }\n        arr.sortWith((a, b) => {\n            if (countBits(a)\
    \ != countBits(b)) {\n                countBits(a) < countBits(b)\n          \
    \  } else {\n                a < b\n            }\n        })", "        // Your\
    \ code here\n        arr.sortWith(compare)", "        if (arr.isEmpty) List()\n\
    \        else {\n            var bitCountMap = Map[Long, Int]()\n            for\
    \ (item <- arr) {\n                bitCountMap.put(item, Integer.bitCount(item.toInt))\n\
    \            }\n            var sortedMap = bitCountMap.toList.sortBy(_._2)\n\
    \            var bitMap = scala.collection.mutable.Map[Int, List[Long]]()\n  \
    \          for (item <- sortedMap) {\n                val bitCount = item._2\n\
    \                val value = item._1\n                if (bitMap.contains(bitCount))\
    \ {\n                    val oldList = bitMap(bitCount)\n                    bitMap.put(bitCount,\
    \ value :: oldList)\n                } else {\n                    bitMap.put(bitCount,\
    \ List(value))\n                }\n            }\n            var result = List[Long]()\n\
    \            for (item <- bitMap) {\n                val bitCount = item._1\n\
    \                val list = item._2\n                val sorted = list.sortBy(x\
    \ => x)\n                result = result ::: sorted\n            }\n         \
    \   result\n        }", "      // convert to binary, then sort by number of 1s,\
    \ and then sort by decimal value\n      // code here\n      arr.sortWith((x, y)\
    \ => (x.toBinaryString.count(x => x == '1') < y.toBinaryString.count(x => x ==\
    \ '1')) || (x.toBinaryString.count(x => x == '1') == y.toBinaryString.count(x\
    \ => x == '1') && x < y))", "        // your code here...\n        null", "  \
    \      // Your code here.\n        arr.sortWith((a, b) => a.toBinaryString.toList.filter(_\
    \ == '1').length < b.toBinaryString.toList.filter(_ == '1').length)", "      def\
    \ toBinary(x : Long) : String = {\n        def toBinary(x : Long, str : String)\
    \ : String = {\n          if (x == 0) str\n          else toBinary(x / 2, (x %\
    \ 2).toString + str)\n        }\n        toBinary(x, \"\")\n      }\n      def\
    \ numberOfOnes(x : Long) : Int = {\n        toBinary(x).toInt\n      }\n     \
    \ arr.sortWith((a, b) => {\n        if (numberOfOnes(a) != numberOfOnes(b)) numberOfOnes(a)\
    \ < numberOfOnes(b)\n        else a < b\n      })", "        // Your code here\n\
    \        val ones = arr.map(x => (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n\
    \        ones.groupBy(_._2).toList.sortBy(_._1).map(_._2).map(_.sortBy(_._1)).flatten.map(_._1)",
  '        arr.sortWith(sort)', "        val zero = List[Long]()\n        val one\
    \ = List[Long]()\n        val two = List[Long]()\n        val three = List[Long]()\n\
    \        val four = List[Long]()\n        val five = List[Long]()\n        val\
    \ six = List[Long]()\n        val seven = List[Long]()\n        val eight = List[Long]()\n\
    \        val nine = List[Long]()\n        val ten = List[Long]()\n        val\
    \ eleven = List[Long]()\n        val twelve = List[Long]()\n        val thirteen\
    \ = List[Long]()\n        val fourteen = List[Long]()\n        val fifteen = List[Long]()\n\
    \        val sixteen = List[Long]()\n        val seventeen = List[Long]()\n  \
    \      val eighteen = List[Long]()\n        val nineteen = List[Long]()\n    \
    \    val twenty = List[Long]()\n        for (i <- arr) {\n            var k =\
    \ i\n            var count = 0\n            while (k > 0) {\n                count\
    \ += 1\n                k &= k - 1\n            }\n            count match {\n\
    \                case 0 => zero :+ i\n                case 1 => one :+ i\n   \
    \             case 2 => two :+ i\n                case 3 => three :+ i\n     \
    \           case 4 => four :+ i\n                case 5 => five :+ i\n       \
    \         case 6 => six :+ i\n                case 7 => seven :+ i\n         \
    \       case 8 => eight :+ i\n                case 9 => nine :+ i\n          \
    \      case 10 => ten :+ i\n                case 11 => eleven :+ i\n         \
    \       case 12 => twelve :+ i\n                case 13 => thirteen :+ i\n   \
    \             case 14 => fourteen :+ i\n                case 15 => fifteen :+\
    \ i\n                case 16 => sixteen :+ i\n                case 17 => seventeen\
    \ :+ i\n                case 18 => eighteen :+ i\n                case 19 => nineteen\
    \ :+ i\n                case 20 => twenty :+ i\n            }\n        }\n   \
    \     zero ::: one ::: two ::: three ::: four ::: five ::: six ::: seven ::: eight\
    \ ::: nine ::: ten ::: eleven ::: twelve ::: thirteen ::: fourteen ::: fifteen\
    \ ::: sixteen ::: seventeen :::", "        arr.sortWith((a, b) => a.toBinaryString.count(_\
    \ == '1') < b.toBinaryString.count(_ == '1') ||\n            (a.toBinaryString.count(_\
    \ == '1') == b.toBinaryString.count(_ == '1') && a < b))", "      val tmp = arr.map(e\
    \ => (countOne(e), e)).sortWith((a, b) => a._1 < b._1)\n      tmp.map(e => e._2)",
  "        //  Sort Array In Ascending Order By The Count Of The Ones In Their Binary\
    \ Representation\n        arr.sortWith((a, b) => (countOne(a) == countOne(b) &&\
    \ a < b) || countOne(a) < countOne(b))", "        var result : List[Long] = List[Long]()\n\
    \        var arr_LtoH : Map[Long, Long] = Map[Long, Long]()\n        var arr_HtoL\
    \ : Map[Long, Long] = Map[Long, Long]()\n        arr.foreach((num) => {\n    \
    \        var bin = num.toBinaryString\n            var ones : Long = bin.filter((x)\
    \ => x == '1').length\n            arr_LtoH += (num -> ones)\n            arr_HtoL\
    \ += (ones -> num)\n        })\n        var sorted_HtoL = arr_HtoL.toList.sortBy((p)\
    \ => p._1)\n        sorted_HtoL.foreach((p) => {\n            result = result\
    \ :+ p._2\n        })\n        return result", "        // your code here\n  \
    \      null", "        val dec_arr = arr.map((i : Long) => (i, Integer.bitCount(i.toInt))).toArray\n\
    \        scala.util.Sorting.stableSort(dec_arr, (x : (Long, Int), y : (Long, Int))\
    \ => x._2 < y._2)\n        dec_arr.map((x : (Long, Int)) => x._1).toList", " \
    \       import scala.collection.mutable.ListBuffer\n        var result = ListBuffer[Long]()\n\
    \        for (i <- arr) result += i\n        for (i <- 0 until result.length)\
    \ {\n            for (j <- i + 1 until result.length) {\n                if (f(result(i))\
    \ > f(result(j))) {\n                    val temp = result(i)\n              \
    \      result(i) = result(j)\n                    result(j) = temp\n         \
    \       }\n            }\n        }\n        result.toList", "      arr.sortWith((i1,\
    \ i2) => {\n        Integer.bitCount(i1.toInt) == Integer.bitCount(i2.toInt) match\
    \ {\n          case true => i1 < i2\n          case false => Integer.bitCount(i1.toInt)\
    \ < Integer.bitCount(i2.toInt)\n        }\n      })", "        arr.sortWith((a,\
    \ b) => {\n            val x = a.toBinaryString.toList.filter(_ == '1').length\n\
    \            val y = b.toBinaryString.toList.filter(_ == '1').length\n       \
    \     if (x == y) a < b else x < y\n        })", "        arr.sortWith((x, y)\
    \ => {\n            if (x < 0 && y < 0) -x.toBinaryString.count(_ == '1') == -y.toBinaryString.count(_\
    \ == '1') match {\n                case true => x < y\n                case false\
    \ => -x.toBinaryString.count(_ == '1') < -y.toBinaryString.count(_ == '1')\n \
    \           }\n            else if (x < 0) true\n            else if (y < 0) false\n\
    \            else x.toBinaryString.count(_ == '1') == y.toBinaryString.count(_\
    \ == '1') match {\n                case true => x < y\n                case false\
    \ => x.toBinaryString.count(_ == '1') < y.toBinaryString.count(_ == '1')\n   \
    \         }\n        })", "        if (arr.length <= 1) return arr\n        val\
    \ (sortedLeft, sortedRight) = arr.splitAt(arr.length / 2)\n        merge(sortArray(sortedLeft),\
    \ sortArray(sortedRight))", "        // return arr.sorted\n        // return arr.sorted(Ordering.by((x\
    \ : Long) => (x.toBinaryString.count(_ == '1'), x)))\n        return arr.sortWith((x,\
    \ y) => \n            if (x.toBinaryString.count(_ == '1') == y.toBinaryString.count(_\
    \ == '1')) x < y\n            else x.toBinaryString.count(_ == '1') < y.toBinaryString.count(_\
    \ == '1'))", "        arr.sortWith((x, y) => {\n            val xx = x.toBinaryString.count(_\
    \ == '1')\n            val yy = y.toBinaryString.count(_ == '1')\n           \
    \ xx == yy match {\n                case true => x < y\n                case false\
    \ => xx < yy\n            }\n        })", "        val sorted = arr.toArray.sortWith((a,\
    \ b) => bitCount(a) == bitCount(b) match {\n            case true => a < b\n \
    \           case false => bitCount(a) < bitCount(b)\n        })\n        sorted.toList",
  "        def cmp(x : Long, y : Long) : Boolean = {\n            val xBin = x.toBinaryString\n\
    \            val yBin = y.toBinaryString\n            val xOnes = xBin.count(ch\
    \ => ch == '1')\n            val yOnes = yBin.count(ch => ch == '1')\n       \
    \     if (xOnes < yOnes) true\n            else if (xOnes > yOnes) false\n   \
    \         else x < y\n        }\n        arr.sortWith(cmp)", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.foldLeft(0) { case (c, b) => if (b == '1') c + 1\
    \ else c }\n            val bOnes = bBin.foldLeft(0) { case (c, b) => if (b ==\
    \ '1') c + 1 else c }\n            if (aOnes != bOnes) aOnes < bOnes else a <\
    \ b\n        })", '        arr.sortWith(compare)', "        var result = ListBuffer[Long]()\n\
    \        for (i <- arr) result += i\n        result = result.sortWith( (l1, l2)\
    \ => {\n            var (l1BinStr, l2BinStr) = (l1.toBinaryString, l2.toBinaryString)\n\
    \            if (l1BinStr.length != l2BinStr.length) l1BinStr.length < l2BinStr.length\n\
    \            else {\n                val (l1OnesCount, l2OnesCount) = (l1BinStr.count(c\
    \ => c == '1'), l2BinStr.count(c => c == '1'))\n                if (l1OnesCount\
    \ != l2OnesCount) l1OnesCount < l2OnesCount\n                else l1 < l2\n  \
    \          }\n        })\n        result.toList", "        def countOnes(x : Long)\
    \ : Int = {\n            var count = 0\n            var n = x\n            while\
    \ (n > 0) {\n                count += n % 2\n                n /= 2\n        \
    \    }\n            count\n        }\n        val cmp = (a : Long, b : Long) =>\
    \ {\n            val c = countOnes(a) - countOnes(b)\n            if (c != 0)\
    \ c else a.toInt - b.toInt\n        }\n        val v = arr.toArray\n        scala.util.Sorting.quickSort(v)(cmp)\n\
    \        v.toList", "        def ones_count(n : Long) : Int = {\n            var\
    \ count = 0\n            var l = n\n            while (l > 0) {\n            \
    \    if (l % 2 == 1) count += 1\n                l /= 2\n            }\n     \
    \       count\n        }\n        arr.sortWith((a, b) => (ones_count(a) < ones_count(b))\
    \ || (ones_count(a) == ones_count(b) && a < b))", "        if (arr.length <= 1)\
    \ return arr\n        val pivot = arr(0)\n        var left = List[Long]()\n  \
    \      var right = List[Long]()\n        for (a <- arr.slice(1, arr.length)) {\n\
    \            if (a >= pivot) right ::= a\n            else left ::= a\n      \
    \  }\n        return sortArray(left) ::: (pivot :: sortArray(right))", "     \
    \   // your code here\n        arr.sortWith((a, b) => (Integer.bitCount(a.toInt)\
    \ < Integer.bitCount(b.toInt)) || (Integer.bitCount(a.toInt) == Integer.bitCount(b.toInt)\
    \ && a < b))", '        arr.sortWith((a, b) => (a - b) < 0)', "        arr.sortWith((a,\
    \ b) => {\n            val c = (a ^ b).toBinaryString.count(_ == '1')\n      \
    \      if (c == 0) a < b else c < 0\n        })", "        var oneCounts = arr.map(x\
    \ => (x, x.toBinaryString.count(y => y == '1'))).sortBy(x => (x._2, x._1))\n \
    \       oneCounts.map(x => x._1)", "        val counter = new HashMap[Long, Int]()\n\
    \        val max = arr.map(x => {\n            val s = x.toBinaryString.count(_\
    \ == '1')\n            counter.put(x, s)\n            s\n        }).max\n    \
    \    arr.sortWith((a, b) => {\n            val countA = counter(a)\n         \
    \   val countB = counter(b)\n            if (countA == countB) a < b\n       \
    \     else countA < countB\n        })", "        // your code here\n        if\
    \ (arr.length == 0) {\n            List[Long]()\n        } else {\n          \
    \  val head = arr.head\n            var zeros = arr.tail.filter(x => Integer.bitCount(x.toInt)\
    \ == Integer.bitCount(head.toInt))\n            var ones = arr.tail.filter(x =>\
    \ Integer.bitCount(x.toInt) > Integer.bitCount(head.toInt))\n            sortArray(ones)\
    \ ::: head :: sortArray(zeros)\n        }", "        var length = arr.length\n\
    \        var count = 0\n        while (count < length) {\n            if (arr(count)\
    \ >= 0) {\n                var tmp = arr(count)\n                var index = count\
    \ - 1\n                while (index >= 0 && tmp < arr(index)) {\n            \
    \        arr(index + 1) = arr(index)\n                    index -= 1\n       \
    \         }\n                arr(index + 1) = tmp\n            }\n           \
    \ count += 1\n        }\n        var b = arr.filter(i => i >= 0)\n        var\
    \ l = arr.filter(i => i < 0)\n        l = l.reverse\n        return l ++ b", " \
    \       arr.sortWith((x, y) => {\n            def countOne(n : Long) : Int = {\n\
    \                if (n == 0) 0\n                else if (n % 2 == 1) 1 + countOne(n\
    \ / 2)\n                else countOne(n / 2)\n            }\n            val xCount\
    \ = countOne(x)\n            val yCount = countOne(y)\n            if (xCount\
    \ == yCount) x < y\n            else xCount < yCount\n        })", "      def\
    \ bin2Dec(s : String) : Long = {\n        s.zipWithIndex.foldLeft(0l)((x, y) =>\
    \ x + y._1.toString.toLong * pow(2, s.length - y._2 - 1).toLong)\n      }\n  \
    \    val dic = new HashMap[Long, Long]()\n      val answer = arr.sortBy((l : Long)\
    \ => l.toBinaryString.count(_ == '1')).reverse\n      answer.map((l : Long) =>\
    \ (l.toBinaryString.count(_ == '1'), l)).foreach((p : (Int, Long)) => dic += (p._2\
    \ -> bin2Dec(p._2.toBinaryString)))\n      answer.sortBy((l : Long) => dic(l))",
  "        def foo(l : List[Long]) : List[(Long, Int)] = {\n            def foo0(n\
    \ : Long, count : Int) : Int = {\n                if (n == 0) count\n        \
    \        else foo0(n / 2, count + (n % 2).toInt)\n            }\n            l.map(x\
    \ => (x, foo0(x, 0)))\n        }\n        foo(arr).sortWith((x, y) => x._2 < y._2\
    \ || (x._2 == y._2 && x._1 < y._1)).map(_._1)", "        val count = HashMap[Long,\
    \ (Int, Long)]()\n        for (i <- arr) {\n            val x = i\n          \
    \  var num = 0\n            while (x > 0) {\n                if (x % 2 == 1) num\
    \ += 1\n                x /= 2\n            }\n            if (count.contains(i))\
    \ {\n                count(i) = (count(i)._1 + num, count(i)._2 + 1)\n       \
    \     } else {\n                count(i) = (num, 1)\n            }\n        }\n\
    \        count.toArray.sortWith((x, y) => {\n            val avg1 = x._2._1.toDouble\
    \ / x._2._2\n            val avg2 = y._2._1.toDouble / y._2._2\n            if\
    \ (avg1 == avg2) {\n                x._1 < y._1\n            } else {\n      \
    \          avg1 < avg2\n            }\n        }).map(_._1).toList", "       \
    \ val f = (x : Long) => x.toBinaryString.count(_ == '1')\n        val g = (x :\
    \ Long) => x\n        val cmp = Ordering.fromLessThan[(Int, Long)]((l, r) => {\n\
    \            if (l._1 == r._1) l._2 < r._2 else l._1 < r._1\n        })\n    \
    \    val res = arr.map(x => (f(x), g(x))).sorted(cmp).map(_._2)\n        res",
  "        def bin(x : Long) : String = {\n            if (x == 0) return \"0\"\n\
    \            val s = new StringBuilder\n            var y = x\n            while\
    \ (y > 0) {\n                s.append(y % 2)\n                y /= 2\n       \
    \     }\n            s.reverse.toString\n        }\n        def countOne(x : Long)\
    \ : Int = {\n            var c = 0\n            var y = x\n            while (y\
    \ > 0) {\n                if (y % 2 == 1) c += 1\n                y /= 2\n   \
    \         }\n            c\n        }\n        arr.sortWith((x, y) => {\n    \
    \        val x1 = countOne(x)\n            val y1 = countOne(y)\n            if\
    \ (x1 < y1) true\n            else if (x1 > y1) false\n            else x < y\n\
    \        })", '        arr.sortWith((x, y) => countOnes(x) < countOnes(y) || (countOnes(x)
    == countOnes(y) && x < y))', '      arr.sortWith((a, b) => (a ^ b) < 0).sortWith((a,
    b) => BigInt(a).bitCount < BigInt(b).bitCount)', "        val map = arr.map(x\
    \ => (x, x.toBinaryString.filter(_ == '1').length)).sortBy(_._2)\n        map.sortBy(_._1).map(_._1)",
  "      def countOnes(num : Long) : Int = {\n        def loop(num : Long, count :\
    \ Int) : Int = {\n          if (num == 0) count\n          else loop(num / 2,\
    \ count + (num % 2).toInt)\n        }\n        loop(num, 0)\n      }\n      arr.map(x\
    \ => (x, countOnes(x))).sortWith((a, b) => a._2 < b._2 || (a._2 == b._2 && a._1\
    \ < b._1)).map(_._1)", "        arr.sortWith((x, y) => {\n            val xbin\
    \ = x.toBinaryString\n            val ybin = y.toBinaryString\n            val\
    \ xsum = xbin.count(_ == '1')\n            val ysum = ybin.count(_ == '1')\n \
    \           if (xsum < ysum) true\n            else if (xsum > ysum) false\n \
    \           else {\n                val xlast = xbin.last\n                val\
    \ ylast = ybin.last\n                if (xlast == '1' && ylast == '0') true\n\
    \                else if (xlast == '0' && ylast == '1') false\n              \
    \  else {\n                    if (x < y) true\n                    else false\n\
    \                }\n            }\n        })", '        arr.sortWith(compare)',
  "        val binaryList = arr.map(x => (x, x.toBinaryString.count(_ == '1')))\n\
    \        binaryList.sortWith((x, y) => x._2 < y._2 || (x._2 == y._2 && x._1 <\
    \ y._1)).map(_._1)", '        arr.sortWith((x, y) => countBits(x) < countBits(y))',
  "        val x = arr.map(x => (x, Integer.bitCount(x.toInt))).sortWith((x, y) =>\
    \ {\n            if (x._2 == y._2) {\n                x._1 < y._1\n          \
    \  } else {\n                x._2 < y._2\n            }\n        })\n        x.map(x\
    \ => x._1)", '        arr.sortWith(compare).reverse', '        arr.sortWith((x,
    y) => countOnes(x) < countOnes(y))']
stop_tokens:
- "\n    }\n"
