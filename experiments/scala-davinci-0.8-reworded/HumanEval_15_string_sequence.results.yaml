language: scala
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n      (0 to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkeej2vik.scala:10:12\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m      (\e[31m0\e[0m to n).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m    \
    \        Found:    (n : Long)\n\e[31m   |\e[0m            Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- (0l) to n) {\n  \
    \          result += (\"\" + i + \" \")\n        }\n        return result.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n < 0) return \"\"\n        var result = \"\"\n  \
    \      for (i <- 0 to n.toInt) {\n            result += i.toString + \" \"\n \
    \       }\n        return result.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i + \" \")\n        }\n        s.toString.trim\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) {\n            return \"0\"\n        }\n \
    \       var buf = new StringBuilder\n        buf ++= \"0\"\n        var i = 1l\n\
    \        while (i <= n) {\n            buf ++= \" \"\n            buf ++= i.toString\n\
    \            i += 1\n        }\n        return buf.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val limit = n + 1\n        (0l to limit by 1l).map(i =>\
    \ i.toString).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp31zt41wj.scala:14)\n\tat Problem.main(tmp31zt41wj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).map(_.toString).mkString(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i + \" \")\n        }\n        sb.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbdw99m6p.scala:17)\n\tat Problem.main(tmpbdw99m6p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) \"0\"\n        else {\n            val buffer\
    \ = new StringBuilder\n            buffer.append(0)\n            for (i <- 1 to\
    \ n.toInt) {\n                buffer.append(\" \")\n                buffer.append(i)\n\
    \            }\n            buffer.toString\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val result = new StringBuilder\n        for (x <- 0 to\
    \ n.toInt) {\n            result.append(x.toString + \" \")\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val l = for (i <- (0l to n)) yield i.toString\n      \
    \  l.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val r = new StringBuilder\n        var x = 0l\n      \
    \  while (x <= n) {\n            r.append(x)\n            r.append(\" \")\n  \
    \          x += 1\n        }\n        r.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc4xlwjct.scala:20)\n\tat Problem.main(tmpc4xlwjct.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n      var b = new StringBuilder\n      for (i <- 0 to n.toInt)\
    \ b ++= (i + \" \")\n      b.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt88ih3x7.scala:15)\n\tat Problem.main(tmpt88ih3x7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val s = new StringBuilder();\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i);\n            s.append(\" \");\n        }\n     \
    \   s.toString.trim;\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val array = new Array[Long](n.toInt + 1)\n        array(0)\
    \ = 0\n        var idx = 1\n        while (idx <= n) {\n            array(idx)\
    \ = idx\n            idx += 1\n        }\n        array.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sequence = new ArrayBuffer[String]\n        (0l).to(n).foreach(x\
    \ => sequence += x.toString)\n        sequence.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rjh4mu6.scala:17)\n\tat Problem.main(tmp6rjh4mu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rjh4mu6.scala:17)\n\tat Problem.main(tmp6rjh4mu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   return sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbnqs1kr_.scala:18)\n\tat Problem.main(tmpbnqs1kr_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        return (0 to n.toInt).mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += \" \" + i.toString\n        }\n        s.substring(1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = new StringBuilder(\"\")\n        for (i <-\
    \ 0 to n.toInt) {\n            result.append(i)\n            result.append(\"\
    \ \")\n        }\n        result.toString().trim()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder()\n        for (i <- 0l to\
    \ n) {\n            sb.append(i.toString)\n            sb.append(\" \")\n    \
    \    }\n        sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = new StringBuilder\n        for (i <- 0l to\
    \ n) {\n            result ++= i.toString ++= \" \"\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzq9hm30t.scala:17)\n\tat Problem.main(tmpzq9hm30t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        def stringSequenceRecur(i : Long, s : String) : String\
    \ = {\n            if (i > n) s\n            else if (i == n) s + i.toString\n\
    \            else stringSequenceRecur(i + 1, s + i.toString + \" \")\n       \
    \ }\n        stringSequenceRecur(0, \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        def reverseString(n : Long) : String = n match {\n   \
    \         case 0 => \"0\"\n            case _ => n + \" \" + reverseString(n -\
    \ 1)\n        }\n        reverseString(n).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxvt6ckrb.scala:19)\n\tat Problem.main(tmpxvt6ckrb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var res = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ res.append(i.toString + \" \")\n        res.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp00it1sh.scala:15)\n\tat Problem.main(tmpp00it1sh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).map(_.toString).mkString(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0 to n).map(x => x.toString).reduce(_ + \" \" + _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg2nwd63d.scala:10:14\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        (\e[31m0\e[0m to n).map(\e\
    [36mx\e[0m => x.toString).reduce(_ + \e[31m\" \"\e[0m + _)\n\e[31m\e[31m   |\e\
    [0m              ^\e[0m\n\e[31m   |\e[0m              Found:    (n : Long)\n\e\
    [31m   |\e[0m              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        for (i <- 0l to n) {\n\
    \            s += i.toString\n            if (i != n) {\n                s +=\
    \ \" \"\n            }\n        }\n        return s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val buffer = new StringBuilder\n        buffer.append(0)\n\
    \        for (i <- 1l to n) {\n            buffer.append(\" \")\n            buffer.append(i)\n\
    \        }\n        buffer.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sequence = new StringBuilder()\n        for (i <-\
    \ 0l to n) {\n            sequence.append(i.toString)\n            sequence.append(\"\
    \ \")\n        }\n        sequence.deleteCharAt(sequence.length - 1)\n       \
    \ sequence.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) result\
    \ += i + \" \"\n        result.substring(0, result.length - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        var i = 0l\n        while (i\
    \ <= n) {\n            result += i.toString + \" \"\n            i += 1\n    \
    \    }\n        result.trim\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        return (0l to n).map(_.toString).reduce(_ + \" \" + _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        return (0l to n).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\";\n        for (i <- 0 to n.toInt) s += i\
    \ + \" \";\n        s.trim\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        return (for (x <- (0l to n)) yield x.toString).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        for (i <- 0l to n) {\n\
    \            s += \" \" + i.toString\n        }\n        return s.trim\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var sequence = new StringBuilder()\n        for (i <-\
    \ 0l to n) {\n            sequence.append(i + \" \")\n        }\n        sequence.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = new StringBuilder\n        for (i <- 0 to\
    \ n.toInt) result.append(i + \" \")\n        result.toString.trim\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var sequence = new StringBuilder\n        var i = 0\n\
    \        while (i <= n) {\n            sequence.append(i + \" \")\n          \
    \  i += 1\n        }\n        return sequence.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var l = List[String]()\n        for (i <- 0l to n) l ::=\
    \ i.toString\n        l.reverse.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\";\n        for (i <- 0 to n.toInt) {\n\
    \            result += i + \" \";\n        }\n        return result.trim;\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        def stringSequenceHelper(n : Long, ans : String) : String\
    \ = {\n            if (n == 0) ans + \"0\"\n            else stringSequenceHelper(n\
    \ - 1, ans + n.toString + \" \")\n        }\n        stringSequenceHelper(n, \"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcda87n4f.scala:18)\n\tat Problem.main(tmpcda87n4f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) result +=\
    \ \" \" + i\n        return result.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var x = new ArrayBuffer[String]()\n        for (i <- 0\
    \ to n.toInt) x += i.toString\n        return x.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).map(_.toString).reduceLeft(_ + \" \" + _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) return \"0\"\n        var r = new StringBuilder\n\
    \        for (i <- 0 to n.toInt) r.append(i + \" \")\n        r.toString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmsu4h2b1.scala:17)\n\tat Problem.main(tmpmsu4h2b1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) {\n            return \"0\"\n        }\n \
    \       val temp = (0l).to(n).mkString(\" \")\n        return temp.substring(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpctbtrkb4.scala:18)\n\tat Problem.main(tmpctbtrkb4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val range = Range(0, (n + 1).toInt)\n        range.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        assert(n >= 0)\n        val sb = new StringBuilder(2 *\
    \ n + 1)\n        for (i <- 0 to n) {\n            sb.append(i)\n            sb.append('\
    \ ')\n        }\n        sb.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0l7hx9v_.scala:11:21 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36msb\e[0m = \e[33mnew\e[0m\
    \ \e[35mStringBuilder\e[0m(\e[31m2\e[0m * n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mconstructor\e[0m \e[35mStringBuilder\e[0m in \e[33mclass\e\
    [0m \e[35mStringBuilder\e[0m with types\n\e[31m   |\e[0m (initCapacity: Int, initValue:\
    \ String): StringBuilder\n\e[31m   |\e[0m (str: String): StringBuilder\n\e[31m\
    \   |\e[0m (capacity: Int): StringBuilder\n\e[31m   |\e[0m (): StringBuilder\n\
    \e[31m   |\e[0m (underlying: StringBuilder): StringBuilder\n\e[31m   |\e[0mmatch\
    \ arguments (Long)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0l7hx9v_.scala:12:23\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val a = new Array[String](n.toInt + 1)\n        for (i\
    \ <- 0 to n.toInt) {\n            a(i) = i.toString\n        }\n        a.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val a = new Array[String](n.toInt + 1)\n        for (i\
    \ <- 0 to n.toInt) a(i) = i.toString\n        a.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val s = new StringBuilder()\n        var i = 0l\n    \
    \    while (i <= n) {\n            s.append(i.toString)\n            s.append(\"\
    \ \")\n            i += 1\n        }\n        s.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder()\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i + \" \")\n        }\n        s.toString().trim()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        var r = List[Long]()\n\
    \        var i = 0l\n        while (i <= n) {\n            r = i :: r\n      \
    \      i += 1\n        }\n        s.append(r.reverse.mkString(\" \"))\n      \
    \  return s.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var res = \"\";\n        for (i <- 0 to n.toInt) res +=\
    \ i + \" \";\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwbxmayw.scala:15)\n\tat Problem.main(tmprwbxmayw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val result = for(i <- 0l to n) yield i.toString\n    \
    \    result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var seq = \"\"\n        for (i <- 0l to n) {\n       \
    \     seq += i + \" \"\n        }\n        seq.stripSuffix(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n      val indices = (0l to n).map(_.toString())\n      return\
    \ indices.reduceLeft(_ + \" \" + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder()\n        for (i <- 0l to\
    \ n) {\n            sb.append(i)\n            sb.append(\" \")\n        }\n  \
    \      sb.substring(0, sb.length - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n < 0) return \"\";\n        var result = \"\";\n\
    \        for (i <- 0l to n) {\n            result += i.toString + \" \";\n   \
    \     }\n        return result.trim;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var res = \"\";\n        for (i <- 0l to n) res += i +\
    \ \" \";\n        res.substring(0, res.length - 1);\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) \"0\"\n        else {\n            val sb\
    \ = new StringBuilder\n            for (i <- 0 to n.toInt) sb.append(i + \" \"\
    )\n            sb.toString.trim\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder();\n        var i = 0l;\n \
    \       while (i <= n) {\n            sb.append(i);\n            sb.append(\"\
    \ \");\n            i += 1;\n        }\n        sb.toString();\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4p7g4cpn.scala:20)\n\tat Problem.main(tmp4p7g4cpn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ s.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n      return (0l to n).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i + \" \")\n        }\n        return sb.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupp4y2yj.scala:17)\n\tat Problem.main(tmpupp4y2yj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        ((0l) to n).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var i = 0l\n        var res = \"\"\n        while (i <=\
    \ n) {\n            res += i + \" \"\n            i += 1\n        }\n        res.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val list = for(i <- 0 to n.toInt) yield i.toString\n \
    \       list.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        return n.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps52h5knt.scala:14)\n\tat Problem.main(tmps52h5knt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val builder = new StringBuilder\n        var i = 0l\n\
    \        while (i <= n) {\n            builder.append(i + \" \")\n           \
    \ i += 1\n        }\n        return builder.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.stripSuffix(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = ArrayBuffer[String]()\n        for (i <- 0l to\
    \ n) s += i.toString\n        return s.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) result +=\
    \ i + \" \"\n        result.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).map(_.toString).reduce(_ + \" \" + _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0 to n.toInt).map(_.toString).reduce(_ + \" \" + _)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        for (i <- 0l to n) {\n\
    \            s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val result = new StringBuilder\n        var k = 0\n  \
    \      while (k <= n) {\n            result.append(k)\n            result.append(\"\
    \ \")\n            k += 1\n        }\n        result.toString.trim\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        var i : Long = 0\n    \
    \    while (i <= n) {\n            s += i + \" \"\n            i += 1\n      \
    \  }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpur719hg7.scala:19)\n\tat Problem.main(tmpur719hg7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val b = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            b.append(i.toString).append(\" \")\n        }\n        b.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) return \"0\"\n        val a = new Array[String](n.toInt\
    \ + 1)\n        for (i <- 0 to n.toInt) a(i) = i.toString\n        a.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        // Your code here.\n        List.range(0, n.toInt + 1).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val array = new Array[Long](n.toInt)\n        for (i <-\
    \ 0 to n.toInt) array(i) = i\n        return array.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length\
    \ 0\n\tat Problem$.stringSequence$$anonfun$1(tmps1k2x2hh.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.stringSequence(tmps1k2x2hh.scala:11)\n\
    \tat Problem$.main(tmps1k2x2hh.scala:15)\n\tat Problem.main(tmps1k2x2hh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var res = \"\"\n        for (i <- 0l to n) {\n       \
    \     res += i.toString\n            if (i != n) res += \" \"\n        }\n   \
    \     res\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i + \" \"\n        }\n        result.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n      (0l to n).toList.map(x => x.toString).reduce(_ + \" \" +\
    \ _)\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val b = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            b.append(i)\n            b.append(\" \")\n        }\n       \
    \ b.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        //Base case.\n        if (n == 0) return \"0\"\n     \
    \   else return stringSequence(n - 1) + \" \" + n.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.result\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkq07bgc8.scala:18)\n\tat Problem.main(tmpkq07bgc8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0l to n)\
    \ s.append(i + \" \")\n        s.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i.toString)\n            s.append(\" \")\n        }\n\
    \        s.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbl1zqnu3.scala:18)\n\tat Problem.main(tmpbl1zqnu3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) result +=\
    \ i + \" \"\n        result.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += (i.toString + \" \")\n        }\n        s.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s ++= i.toString\n            s ++= \" \"\n        }\n      \
    \  s.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978738
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = new StringBuilder\n        for (i <- 0l to\
    \ n) {\n            result.append(i.toString + \" \")\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978739
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val numbers = new ArrayBuffer[Long]\n        var i = 0l\n\
    \        while (i <= n) {\n            numbers += i\n            i += 1\n    \
    \    }\n        numbers.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978739
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var array = new Array[Long](n.toInt + 1)\n        for\
    \ (i <- 0 to n.toInt) array(i) = i\n        return array.mkString(\" \")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978739
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var r = new ListBuffer[String]()\n        for (i <- 0l\
    \ to n) r += i.toString\n        return r.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978739
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) result +=\
    \ i + \" \"\n        result\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppof26494.scala:15)\n\tat Problem.main(tmppof26494.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        List.range(0, (n+1).toInt).mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978739
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\";\n        for (i <- 0 to n.toInt) {\n   \
    \         s += i.toString;\n            if (i != n.toInt) s += \" \";\n      \
    \  }\n        return s;\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        for (i <- 0l to n) {\n\
    \            s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var ans = \"\";\n        var i = 0l;\n        while (i\
    \ <= n) {\n            ans += i.toString() + \" \";\n            i += 1;\n   \
    \     }\n        ans;\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv_5yigmk.scala:19)\n\tat Problem.main(tmpv_5yigmk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978739
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result.trim\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) return \"0\"\n        val a = ArrayBuffer.fill(n.toInt\
    \ + 1)(\"\")\n        for (i <- 0 to n.toInt) a(i) = i.toString\n        return\
    \ a.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val a = new Array[String](n.toInt + 1)\n        for (i\
    \ <- 0 to n.toInt) a(i) = i.toString\n        a.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder()\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i + \" \")\n        }\n        return sb.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        return (0l to n).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (k <- 0 to n.toInt) {\n    \
    \        s += k + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val b = ListBuffer[String]()\n        for (i <- 0 to n.toInt)\
    \ {\n            b += i.toString\n        }\n        b.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sequence = for(i <- 0 to n.toInt) yield i.toString\n\
    \        sequence.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sequence = new StringBuilder\n        for (k <- 0\
    \ to n.toInt) {\n            sequence.append(k)\n            sequence.append(\"\
    \ \")\n        }\n        return sequence.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl4y7j3i2.scala:18)\n\tat Problem.main(tmpl4y7j3i2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var tmp = new StringBuilder()\n        for (i <- 0 to\
    \ n.toInt) tmp.append(i).append(\" \")\n        tmp.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq4wahscc.scala:15)\n\tat Problem.main(tmpq4wahscc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        ((0l to n).mkString(\" \"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) {\n            \"0\"\n        } else {\n \
    \           (1 to n.toInt).mkString(\" \")\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbkyr08vs.scala:18)\n\tat Problem.main(tmpbkyr08vs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0 to n.toInt).map(_.toString).mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978741
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        for (i <- 0 to n.toInt)\
    \ s += \" \" + i\n        s\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp988ps9f5.scala:15)\n\tat Problem.main(tmp988ps9f5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        def rec(s : String, n : Long) : String = {\n         \
    \   if (n == 0) s\n            else rec(s + \" \" + n, n - 1)\n        }\n   \
    \     rec(\"0\", n)\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptviyuwrz.scala:18)\n\tat Problem.main(tmptviyuwrz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = new ListBuffer[String]\n        for (i <-\
    \ 0l to n) result += i.toString\n        return result.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978756
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) return \"0\"\n        val array = new Array[String](n.toInt\
    \ + 1)\n        array(0) = \"0\"\n        for (i <- 1 to n.toInt) {\n        \
    \    array(i) = i.toString\n        }\n        return array.mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n      val lst = List.range(0, n.toInt + 1)\n      lst.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) return \"0\"\n        else {\n           \
    \ val sb = new StringBuilder\n            for (i <- (0l to n)) {\n           \
    \     sb.append(i)\n                sb.append(\" \")\n            }\n        \
    \    return sb.toString.trim\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString\n            if (i != n) s += \" \"\n        }\n        s\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        def recurse(n : Long, i : Long, s : String) : String =\
    \ if (i == n) (s + i) else recurse(n, i + 1, s + i + \" \")\n        if (n ==\
    \ 0) return \"0\"\n        return recurse(n, 0, \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i.toString)\n            sb.append(\" \")\n       \
    \ }\n        return sb.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) \"0\"\n        else {\n            val sb\
    \ = new StringBuilder()\n            for (i <- (0l) to n) sb.append(i.toString\
    \ + \" \")\n            sb.toString().trim()\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val range = (0l to n)\n        range.mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0 to n).map(_.toString).reduceLeft(_ + \" \" + _)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxvbju3kb.scala:10:14\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        (\e[31m0\e[0m to n).map(_.toString).reduceLeft(_\
    \ + \e[31m\" \"\e[0m + _)\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m \
    \  |\e[0m              Found:    (n : Long)\n\e[31m   |\e[0m              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val buf = new StringBuilder()\n        for (i <- 0l to\
    \ n) {\n            buf.append(i + \" \")\n        }\n        return buf.toString().trim()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = new StringBuilder\n        for (i <- 0l to\
    \ n) {\n            result.append(i + \" \")\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder()\n        var i = 0\n    \
    \    for (i <- 0 to n.toInt) {\n            sb.append(i + \" \")\n        }\n\
    \        sb.toString().trim()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var output = \"\"\n        var i = 0l\n        while (i\
    \ <= n) {\n            output += i.toString + \" \"\n            i += 1\n    \
    \    }\n        output.trim\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        def stringSequenceIter(i : Long, acc : String) : String\
    \ = {\n            if (i > n) acc\n            else if (i == n) stringSequenceIter(i\
    \ + 1, acc + i.toString)\n            else stringSequenceIter(i + 1, acc + i.toString\
    \ + \" \")\n        }\n        stringSequenceIter(0, \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val elements = for (i <- 0 to n.toInt) yield i.toString\n\
    \        return elements.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val s = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            s.append(i + \" \")\n        }\n        return s.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val numbers = new ArrayBuffer[String]\n        for (i\
    \ <- 0l to n) {\n            numbers += i.toString\n        }\n        numbers.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        return (0l to n).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        //return string(n).join(\" \")\n        //now using immutable\
    \ List\n        (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i.toString)\n            sb.append(\" \")\n       \
    \ }\n        sb.deleteCharAt(sb.length - 1)\n        sb.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978760
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).map(m => m.toString).mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        return (0l to n).toList.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var str : String = \"\"\n        for (i <- 0 to n.toInt)\
    \ {\n            str += i.toString + \" \"\n        }\n        str.trim\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n      (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n      (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) \"0\"\n        else {\n            val result\
    \ = new StringBuilder()\n            for (i <- 0l to n) {\n                result.append(i.toString()\
    \ + \" \")\n            }\n            result.toString().trim()\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) \"0\"\n        else stringSequence(n - 1)\
    \ + \" \" + n.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ return s.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var list : List[Long] = Nil\n        for (i <- 0l to n)\
    \ list = i :: list\n        return list.reverse.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i + \" \")\n        }\n        return sb.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        var i : Long = 0\n    \
    \    while (i <= n) {\n            s += i.toString + \" \"\n            i += 1\n\
    \        }\n        s.trim\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        return (0l to n).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new ListBuffer[String]\n        for (i <- 0l to\
    \ n) s += i.toString\n        s.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        return (0l to n).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString\n            if (i != n.toInt) s += \" \"\n        }\n\
    \        return s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) \"0\"\n        else (1 to n.toInt).map(_.toString).reduce(_\
    \ + \" \" + _)\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ndp80li.scala:15)\n\tat Problem.main(tmp2ndp80li.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString\n            if (i != n.toInt) s += \" \"\n        }\n\
    \        return s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val builder = new StringBuilder\n        for (i <- 0l\
    \ to n) {\n            builder.append(i)\n            builder.append(\" \")\n\
    \        }\n        builder.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) return \"0\"\n        val sb = new StringBuilder\n\
    \        for (i <- 0 to n.toInt) {\n            sb.append(i)\n            sb.append(\"\
    \ \")\n        }\n        sb.setLength(sb.length - 1)\n        sb.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var m = (0l)\n        var s = \"\"\n        while ((m\
    \ <= n)) {\n            {\n                s = (s + (if ((s == \"\")) (\"\") else\
    \ (\" \"))) + (m.toString)\n                m = (m + 1l)\n            }\n    \
    \    }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) s += i + \" \"\
    \n        s.substring(0, s.length - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder()\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i + \" \")\n        }\n        return s.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3193htkk.scala:17)\n\tat Problem.main(tmp3193htkk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) {\n    \
    \        result += i.toString + \" \"\n        }\n        result.trim\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        Range(0, n.toInt + 1).mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = new StringBuilder()\n        var i = 0l\n\
    \        while (i <= n) {\n            result.append(i)\n            if (i !=\
    \ n) result.append(\" \")\n            i += 1\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        for (i <- 0 to n.toInt)\
    \ {\n            s += \" \" + i.toString\n        }\n        return s.trim\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        // PUT YOUR CODE HERE\n        var s = \"\"\n        for\
    \ (i <- 0 to n.toInt) {\n            s += i + \" \"\n        }\n        s.stripSuffix(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvjopgqf4.scala:18)\n\tat Problem.main(tmpvjopgqf4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978779
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val result = new StringBuilder();\n        for (i <- 0l\
    \ to n) {\n            result.append(i);\n            result.append(\" \");\n\
    \        }\n        result.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n      var s = new StringBuilder()\n      for (x <- 0l to n) {\n\
    \        s.append(x.toString() + \" \")\n      }\n      s.toString().trim()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += (i + \" \")\n        }\n        s.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0 to n.toInt).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.stripSuffix(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i + \" \")\n        }\n        s.toString\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwezfetvk.scala:17)\n\tat Problem.main(tmpwezfetvk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) s += i +\
    \ \" \"\n        s.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n      var r = \"\"\n      for (i <- 0 to n.toInt) {\n        r\
    \ += i + \" \"\n      }\n      r.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i + \" \")\n        }\n        s.toString.trim\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0 to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt_5ynybe.scala:10:14\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        (\e[31m0\e[0m to n).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m  \
    \            Found:    (n : Long)\n\e[31m   |\e[0m              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n      val r : ArrayBuffer[String] = new ArrayBuffer[String]()\n\
    \      for (i <- 0l to n) r += i.toString\n      r.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val result = new StringBuilder();\n        for (i <- 0\
    \ to n.toInt) {\n            result.append(i);\n            result.append(\" \"\
    );\n        }\n        result.deleteCharAt(result.length - 1);\n        return\
    \ result.toString();\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   return sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp15vblm59.scala:18)\n\tat Problem.main(tmp15vblm59.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val s = new Array[String](n.toInt + 1)\n        for (i\
    \ <- 0 to n.toInt) s(i) = i.toString\n        s.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        // var result = \"\"\n        // for (i <- 0 to n) result\
    \ += i + \" \"\n        // result.trim\n        (0 to n).mkString(\" \")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ocqgw0e.scala:13:14\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        (\e[31m0\e[0m to n).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m  \
    \            Found:    (n : Long)\n\e[31m   |\e[0m              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val a = new Array[String](n.toInt + 1)\n        (0 to\
    \ n.toInt).foreach(i => a(i) = i.toString)\n        a.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val bldr = new StringBuilder\n        for (i <- 0l to\
    \ n) {\n            bldr.append(i)\n            bldr.append(\" \")\n        }\n\
    \        bldr.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5zqa5kkk.scala:18)\n\tat Problem.main(tmp5zqa5kkk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val buf = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            buf.append(i)\n            buf.append(\" \")\n        }\n   \
    \     buf.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new ListBuffer[String]()\n        for (i <- 0\
    \ to n.toInt) s += i.toString\n        return s.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978790
