name: HumanEval_153_Strongest_Extension
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given the name of a class (a string) and a list of extensions.\n\
  \    // The extensions are to be used to load additional classes to the class. The\n\
  \    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    // in the extension's name, the strength is given by the fraction CAP -\
  \ SM. \n    // You should find the strongest extension and return a string in this\
  \ \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or\
  \ more extensions with the same strength, you should\n    // choose the one that\
  \ comes first in the list.\n    // For example, if you are given \"Slices\" as the\
  \ class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is\
  \ the strongest extension \n    // (its strength is -1).\n    // Example:\n    //\
  \ >>> StrongestExtension((\"my_class\"), (List[String](\"AA\", \"Be\", \"CC\")))\n\
  \    // (\"my_class.AA\")\n    def StrongestExtension(class_name : String, extensions\
  \ : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
  Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
  )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\"\
  , \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"\
  __YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
  , \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\"\
  )));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\"\
  , \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"\
  -_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
  finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
  finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\"\
  , \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"\
  671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        //YOUR CODE GOES HERE\n        return \"\";", '        extensions.zipWithIndex.sortBy(x
    => (x._1.count(_.isUpper) - x._1.count(_.isLower), x._2)).head._1', "        var\
    \ ret = class_name + \".\" + extensions(0)\n        var maxStrength = (extensions(0).count(x\
    \ => x.isUpper) - extensions(0).count(x => x.isLower)).toDouble / extensions(0).length\n\
    \        for (i <- 1 until extensions.length) {\n            val strength = (extensions(i).count(x\
    \ => x.isUpper) - extensions(i).count(x => x.isLower)).toDouble / extensions(i).length\n\
    \            if (strength > maxStrength) {\n                maxStrength = strength\n\
    \                ret = class_name + \".\" + extensions(i)\n            }\n   \
    \     }\n        ret", "        // your code here\n        if (extensions.length\
    \ == 0) return \"\";\n        val sorted = extensions.sortWith(_.length > _.length)\n\
    \        val filtered = sorted.filter(ext => ext.length >= class_name.length)\n\
    \        val result = \n            if (filtered.length == 0) \n             \
    \   (class_name + \".\" + sorted(0))\n            else\n                (class_name\
    \ + \".\" + filtered(0))\n        return result", "        val strength = (x :\
    \ String) => x.toCharArray.map(y => if (y.isUpper) 1 else -1).sum\n        val\
    \ strongest = extensions.reduce((x, y) => if (strength(x) > strength(y)) x else\
    \ y)\n        class_name + \".\" + strongest", '        ""', "        // Your\
    \ Code Here\n        \"\"", "        val strengths = extensions.map(e => (e, strength(e)))\n\
    \        val (sname, _) = strengths.foldLeft((\"\", 0.0))((s1, s2) => if (s1._2\
    \ >= s2._2) s1 else s2)\n        class_name + \".\" + sname", "    \tvar strength\
    \ = -1.0\n    \tvar strongest = \"\"\n    \tfor (ext <- extensions) {\n    \t\t\
    var temp = ext.count(c => c.isUpper) - ext.count(c => c.isLower)\n    \t\tif (temp\
    \ > strength) {\n    \t\t\tstrength = temp\n    \t\t\tstrongest = ext\n    \t\t\
    }\n    \t}\n    \treturn class_name + \".\" + strongest", "        var strength\
    \ = Map[String, Double]()\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (ch <- ext) {\n           \
    \     if (ch.isUpper) cap += 1\n                else sm += 1\n            }\n\
    \            strength += (ext -> (cap - sm))\n        }\n        strength = strength.toList.sortBy(x\
    \ => -x._2).toMap\n        val ans = strength.toList.sortBy(x => x._1).head\n\
    \        class_name + \".\" + ans._1", '        class_name + "." + extensions.maxBy(x
    => x.filter(isUpper(_)).length - x.filter(isLower(_)).length)', "        var maxStrength\
    \ = (-999999999.0, \"\")\n        for (extension <- extensions) {\n          \
    \  var strength = 0.0\n            for (c <- extension) {\n                if\
    \ (c.isUpper) strength += 1\n                else strength -= 1\n            }\n\
    \            if (strength > maxStrength._1) maxStrength = (strength, extension)\n\
    \        }\n        return class_name + \".\" + maxStrength._2", "        var\
    \ strongest_extension = \"\";\n        var strongest_strength = -1.0;\n      \
    \  for (extension <- extensions) {\n            var cap = 0.0;\n            var\
    \ sm = 0.0;\n            for (letter <- extension) {\n                if (letter.isUpper)\
    \ cap += 1.0;\n                else sm += 1.0;\n            }\n            var\
    \ strength = cap - sm;\n            if (strength > strongest_strength) {\n   \
    \             strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", '        "to be completed"', "        var max = 0.0\n\
    \        var ext_name = \"\"\n        extensions.foreach(ext => {\n          \
    \  var n1 = ext.foldLeft(0)((count, c) => if (c.isUpper) count + 1 else count)\n\
    \            var n2 = ext.foldLeft(0)((count, c) => if (c.isLower) count + 1 else\
    \ count)\n            if (max < (n1 - n2)) {\n                max = n1 - n2\n\
    \                ext_name = ext\n            }\n        })\n        return class_name\
    \ + \".\" + ext_name", "        val exts = extensions.map(ext => (ext, ext.count(_.isUpper)\
    \ - ext.count(_.isLower)))\n        val max = exts.maxBy(_._2)\n        return\
    \ s\"$class_name.${max._1}\"", "        val strongest_extension = extensions.maxBy(extension\
    \ => (extension.count(_.isUpper) - extension.count(_.isLower))).mkString(\"\"\
    )\n        class_name + \".\" + strongest_extension", "        def computeStrength(extension\
    \ : String) : Float = {\n            val num_capitals = extension.filter(_.isUpper).length\n\
    \            val num_small = extension.filter(_.isLower).length\n            return\
    \ (num_capitals - num_small).toFloat\n        }\n        var strongest = \"\"\n\
    \        var strongest_strength = 0.0f\n        for (extension <- extensions)\
    \ {\n            val strength = computeStrength(extension)\n            if (strength\
    \ > strongest_strength) {\n                strongest = extension\n           \
    \     strongest_strength = strength\n            }\n        }\n        return\
    \ class_name + \".\" + strongest", "        // Your Code Here\n        return\
    \ \"\"", "        var strongest_extension = \"\";\n        var strong_level =\
    \ 0.0;\n        var extension_level = 0.0;\n        var cap_count = 0;\n     \
    \   var sm_count = 0;\n        for (extension <- extensions) {\n            for\
    \ (c <- extension) {\n                if (c.isUpper) cap_count += 1;\n       \
    \         else if (c.isLower) sm_count += 1;\n            }\n            extension_level\
    \ = cap_count - sm_count;\n            if (extension_level > strong_level) {\n\
    \                strong_level = extension_level;\n                strongest_extension\
    \ = extension;\n            }\n            cap_count = 0;\n            sm_count\
    \ = 0;\n        }\n        return (class_name + \".\" + strongest_extension);",
  "        var strength_map = HashMap[String, Double]()\n        for (extension <-\
    \ extensions) {\n            var temp = extension.replaceAll(\"\\\\s\", \"\")\n\
    \            var upper_case = temp.filter(_.isUpper).size\n            var lower_case\
    \ = temp.filter(_.isLower).size\n            strength_map += (extension -> (upper_case\
    \ - lower_case))\n        }\n        var new_list = strength_map.toList.sortBy(_._2)\n\
    \        var strongest_extension = \"\"\n        var last_strength = -1.0\n  \
    \      for (element <- new_list) {\n            if (element._2 != last_strength)\
    \ {\n                last_strength = element._2\n                strongest_extension\
    \ = element._1\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension", "        val extFraction = extensions.map(x => (x, (x.toCharArray.map(y\
    \ => if (y.isUpper) 1 else -1).sum.toDouble/x.length.toDouble))).sortBy(_._2)\n\
    \        class_name + \".\" + extFraction.last._1", "        var str = class_name\n\
    \        for (i <- extensions) {\n            if (extensions.indexOf(i) == 0)\
    \ {\n                str += \".\" + i\n            }\n            else {\n   \
    \             var x = 0\n                var y = 0\n                for (j <-\
    \ i) {\n                    if (j.isUpper) {\n                        x += 1\n\
    \                    }\n                    else {\n                        y\
    \ += 1\n                    }\n                }\n                val strength\
    \ = x - y\n                var str2 = str.split(\"\\\\.\").toList.last\n     \
    \           var x2 = 0\n                var y2 = 0\n                for (k <-\
    \ str2) {\n                    if (k.isUpper) {\n                        x2 +=\
    \ 1\n                    }\n                    else {\n                     \
    \   y2 += 1\n                    }\n                }\n                val strength2\
    \ = x2 - y2\n                if (strength > strength2) {\n                   \
    \ str = str.split(\"\\\\.\").toList.head + \".\" + i\n                }\n    \
    \        }\n        }\n        str", "        var strongest_extension = extensions(0)\n\
    \        var strength = 0\n        extensions.foreach(extension => {\n       \
    \     val numbers = extension.split(\"\").map(x => {\n                if (x.isUpper)\
    \ 1\n                else if (x.isLower) -1\n                else 0\n        \
    \    })\n            val new_strength = numbers.sum\n            if (new_strength\
    \ > strength) {\n                strength = new_strength\n                strongest_extension\
    \ = extension\n            }\n        })\n        return class_name + \".\" +\
    \ strongest_extension", "        var max_strength = -9999999\n        var max_extension\
    \ = \"\"\n        for (extension <- extensions) {\n            var strength =\
    \ 0\n            for (char <- extension) {\n                if (char.isUpper)\
    \ strength += 1\n                else strength -= 1\n            }\n         \
    \   if (strength > max_strength) {\n                max_strength = strength\n\
    \                max_extension = extension\n            }\n        }\n       \
    \ class_name + \".\" + max_extension", "        var max_strength = -100.0\n  \
    \      var max_extension = \"\"\n        for (extension <- extensions) {\n   \
    \         var strength = 0.0\n            for (letter <- extension) {\n      \
    \          if (letter.isUpper) strength += 1\n                else strength -=\
    \ 1\n            }\n            if (strength > max_strength) {\n             \
    \   max_strength = strength\n                max_extension = extension\n     \
    \       }\n        }\n        return class_name + \".\" + max_extension", "  \
    \      val strength = (x : String) => (x.filter(_.isUpper).length).toDouble -\
    \ (x.filter(_.isLower).length).toDouble\n        class_name + \".\" + extensions.maxBy(strength)",
  "        var max = 0.0\n        var index = 0\n        var prefix = 0\n        for\
    \ (i <- 0 until extensions.length) {\n            var t = extensions(i).split(\"\
    (?=\\\\p{Upper})\")\n            val up = t.filter(x => x.forall(c => c.isUpper)).length\n\
    \            val down = t.filter(x => x.forall(c => c.isLower)).length\n     \
    \       val strength = if (down == 0) 0 else up.toDouble / down\n            if\
    \ (strength > max) {\n                max = strength\n                index =\
    \ i\n                prefix = up\n            } else if (strength == max) {\n\
    \                if (up > prefix) {\n                    max = strength\n    \
    \                index = i\n                    prefix = up\n                }\n\
    \            }\n        }\n        return class_name + \".\" + extensions(index)",
  "        val strengths = extensions.map(ext => (class_name + \".\" + ext, ext.count(_.isUpper)\
    \ - ext.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n  \
    \      if (strongest._2 <= 0) class_name else strongest._1", "        def cn(c\
    \ : Char) = c.isUpper\n        def cn2(c : Char) = c.isLower\n        val n =\
    \ extensions.map(s => (s, (s.count(cn) - s.count(cn2)))).zipWithIndex.sortBy(x\
    \ => (x._1._2, x._2)).head._1._1\n        class_name + \".\" + n", "    \tvar\
    \ strongest = -1\n    \tvar answer = \"\"\n    \textensions.foreach(s => {\n \
    \   \t\tvar upper = 0\n    \t\tvar lower = 0\n    \t\ts.foreach(c => {\n    \t\
    \t\tif (c.isUpper) upper += 1\n    \t\t\telse lower += 1\n    \t\t})\n    \t\t\
    if (upper - lower > strongest) {\n    \t\t\tstrongest = upper - lower\n    \t\t\
    \tanswer = s\n    \t\t}\n    \t})\n    \treturn class_name + \".\" + answer",
  "        var result = \"\"\n        var best_strength = -Double.MaxValue\n     \
    \   for (extension <- extensions) {\n            var strength = extension.count(_.isUpper)\
    \ - extension.count(_.isLower)\n            if (strength > best_strength) {\n\
    \                best_strength = strength\n                result = class_name\
    \ + \".\" + extension\n            }\n        }\n        return result", "   \
    \ \tval strengths = extensions.map(ext => {\n    \t\text.filter(x => x.isUpper).length\
    \ - ext.filter(x => x.isLower).length\n    \t})\n    \tval max_strength = strengths.max\n\
    \    \tval index = strengths.indexOf(max_strength)\n    \treturn class_name +\
    \ \".\" + extensions(index)", "        // Your code goes here\n        \"implement\
    \ me\"", "        val strengths = extensions.map(ext => (ext, ext.count(_.isUpper)\
    \ - ext.count(_.isLower)))\n        class_name + \".\" + strengths.reduceLeft((x,\
    \ y) => if (x._2 >= y._2) x else y)._1", "        var exts = extensions.map(x\
    \ => (x, (x.count(c => c.isUpper), x.count(c => c.isLower)))).sortBy(x => -(x._2._1\
    \ - x._2._2))\n        class_name + \".\" + exts(0)._1", "        var (best_extension,\
    \ best_value) = (\"\", 0.0)\n        for (extension <- extensions) {\n       \
    \     var strength = 0.0\n            for (c <- extension) {\n               \
    \ if (c.isUpper) strength += 1\n                else strength -= 1\n         \
    \   }\n            if (strength > best_value) {\n                best_value =\
    \ strength\n                best_extension = extension\n            }\n      \
    \  }\n        class_name + \".\" + best_extension", "        var max_strength\
    \ = Int.MinValue\n        var strongest_ext = \"\"\n        for (ext <- extensions)\
    \ {\n            var ext_strength = 0\n            for (ch <- ext) {\n       \
    \         if (ch.isUpper) ext_strength += 1\n                else ext_strength\
    \ -= 1\n            }\n            if (ext_strength > max_strength) {\n      \
    \          max_strength = ext_strength\n                strongest_ext = ext\n\
    \            }\n        }\n        return class_name + \".\" + strongest_ext",
  "    \tval strs = extensions.map(s => s.foldLeft(0, 0)((pair, c) => {\n    \t\t\
    if (c.isUpper)\n    \t\t\t(pair._1 + 1, pair._2)\n    \t\telse\n    \t\t\t(pair._1,\
    \ pair._2 + 1)\n    \t}))\n    \tval str = strs.foldLeft(0.0, 0, 0)((acc, pair)\
    \ => {\n    \t\tval strength = pair._1 - pair._2\n    \t\tif (strength > acc._1)\n\
    \    \t\t\t(strength, acc._2, pair._2)\n    \t\telse if (strength == acc._1) {\n\
    \    \t\t\tif (pair._2 < acc._3)\n    \t\t\t\t(strength, acc._2, pair._2)\n  \
    \  \t\t\telse\n    \t\t\t\tacc\n    \t\t}\n    \t\telse\n    \t\t\tacc\n    \t\
    })\n    \tval index = str._3\n    \tclass_name + \".\" + extensions(index)", " \
    \       var strongest_extension = \"\";\n        var strongest_value = -1;\n \
    \       for (i <- 0 until extensions.length) {\n            var extension = extensions(i);\n\
    \            var strength = 0;\n            for (j <- 0 until extension.length)\
    \ {\n                var c = extension(j);\n                if (c.isUpper) strength\
    \ += 1;\n                else strength -= 1;\n            }\n            if (strength\
    \ > strongest_value) {\n                strongest_value = strength;\n        \
    \        strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        var best_strength = 0.0\n\
    \        var best_extension = \"\"\n        for (extension <- extensions) {\n\
    \            var strength = 0.0\n            var low = 0\n            var up =\
    \ 0\n            for (letter <- extension) {\n                if (letter.isUpper)\
    \ up += 1\n                else low += 1\n            }\n            strength\
    \ = up - low\n            if (strength > best_strength) {\n                best_strength\
    \ = strength\n                best_extension = extension\n            }\n    \
    \    }\n        return class_name + \".\" + best_extension", "        val strength\
    \ = extensions.map(x => x.count(c => c.isUpper).toDouble - x.count(c => c.isLower).toDouble)\n\
    \        val strongest = strength.indexOf(strength.max)\n        class_name +\
    \ \".\" + extensions(strongest)", '        return class_name + "." + extensions.maxBy(x
    => countUpper(x) - countLower(x))', "        val best = extensions.map(ext =>\
    \ (class_name + \".\" + ext, ext.foldLeft(0)((x, y) => x + (if (y.isUpper) 1 else\
    \ 0) - (if (y.isLower) 1 else 0)))).sortBy(x => x._2).last\n        best._1",
  "        // Your code here!\n        return \"\"", "        var max_strength = -1.0\n\
    \        var max_str_extension = \"\"\n        extensions.foreach(extension =>\
    \ {\n            var upper_case_count = 0\n            var lower_case_count =\
    \ 0\n            extension.foreach(ch => {\n                if (ch.isUpper) upper_case_count\
    \ += 1\n                else lower_case_count += 1\n            })\n         \
    \   var strength = upper_case_count - lower_case_count\n            if (strength\
    \ > max_strength) {\n                max_strength = strength\n               \
    \ max_str_extension = extension\n            }\n        })\n        class_name\
    \ + \".\" + max_str_extension", "        // Your code starts here\n        var\
    \ max_strength = extensions.head(0).toInt - extensions.head(1).toInt\n       \
    \ var strongest_extension = extensions.head\n        for (extension <- extensions)\
    \ {\n            var strength = extension(0).toInt - extension(1).toInt\n    \
    \        if (strength > max_strength) {\n                max_strength = strength\n\
    \                strongest_extension = extension\n            }\n        }\n \
    \       return class_name + \".\" + strongest_extension\n        // Your code\
    \ ends here", "        // Fill in the code here\n        \"\".toString", "   \
    \     val strengths = for (e <- extensions) yield {\n            val uppers =\
    \ e.filter(c => c.isUpper).length\n            val lowers = e.filter(c => c.isLower).length\n\
    \            (e, uppers - lowers)\n        }\n        val max = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + max._1", "        var best = -100.0\n        var\
    \ best_extension = \"None\"\n        for (extension <- extensions) {\n       \
    \     var uppers = 0\n            var lowers = 0\n            for (char <- extension)\
    \ {\n                if (char.isUpper) uppers += 1\n                else lowers\
    \ += 1\n            }\n            var ratio = (uppers - lowers).toDouble / extension.length\n\
    \            if (ratio > best) {\n                best = ratio\n             \
    \   best_extension = extension\n            }\n        }\n        return class_name\
    \ + \".\" + best_extension", "        // Your code goes here\n        return \"\
    \";", "        if (extensions.length == 0) {\n            return class_name\n\
    \        }\n        var max_strength = 0.0\n        var best_index = 0\n     \
    \   for (i <- 0 until extensions.length) {\n            val lower = extensions(i).filter(c\
    \ => !c.isUpper).length\n            val upper = extensions(i).filter(c => c.isUpper).length\n\
    \            val strength = upper - lower\n            if (strength > max_strength)\
    \ {\n                max_strength = strength\n                best_index = i\n\
    \            }\n        }\n        return class_name + \".\" + extensions(best_index)",
  "        var (max_strength, max_extension) = (-1000.0, \"\")\n        for (extension\
    \ <- extensions) {\n            var (upper, lower) = (0, 0)\n            for (letter\
    \ <- extension) {\n                if (letter.isUpper) upper += 1\n          \
    \      else lower += 1\n            }\n            var strength = (upper - lower).toDouble\
    \ / extension.length\n            if (strength > max_strength) {\n           \
    \     max_strength = strength\n                max_extension = extension\n   \
    \         }\n        }\n        return class_name + \".\" + max_extension", " \
    \       class Extension(val name : String, val strength : Int)\n        var strongest_extension\
    \ : Extension = null\n        for (extension <- extensions) {\n            var\
    \ strength = 0\n            for (c <- extension) {\n                if (c.isUpper)\
    \ strength += 1\n                else if (c.isLower) strength -= 1\n         \
    \   }\n            if (strongest_extension == null || strength > strongest_extension.strength)\
    \ {\n                strongest_extension = new Extension(extension, strength)\n\
    \            }\n        }\n        class_name + \".\" + strongest_extension.name",
  "        var strongest = \"\";\n        var strength = 0.0;\n        extensions.foreach(s\
    \ => {\n            val cap = s.filter(c => c.isUpper).length;\n            val\
    \ sm = s.filter(c => c.isLower).length;\n            val st = cap - sm;\n    \
    \        if (st > strength) {\n                strength = st;\n              \
    \  strongest = s;\n            }\n        })\n        class_name + \".\" + strongest;",
  "        var strongest = extensions(0)\n        for (ext <- extensions) {\n    \
    \        if (strength(ext) > strength(strongest)) strongest = ext\n        }\n\
    \        class_name + \".\" + strongest", "        // Your code goes here...\n\
    \        var strength = 0.0\n        var strongest = \"\"\n        for (e <- extensions)\
    \ {\n            var cap = 0\n            var sm = 0\n            for (i <- 0\
    \ until e.length) {\n                if (e(i).isUpper) cap += 1\n            \
    \    else sm += 1\n            }\n            var newStrength = cap - sm\n   \
    \         if (newStrength > strength) {\n                strength = newStrength\n\
    \                strongest = e\n            }\n        }\n        return class_name\
    \ + \".\" + strongest", "        if (extensions.length == 0) class_name\n    \
    \    else {\n            val first = extensions.head\n            val tail = extensions.tail\n\
    \            var strongest = first\n            val strength = first.count(_.isUpper)\
    \ - first.count(_.isLower)\n            for (x <- tail) {\n                val\
    \ str = x.count(_.isUpper) - x.count(_.isLower)\n                if (str > strength)\
    \ {\n                    strongest = x\n                }\n            }\n   \
    \         class_name + \".\" + strongest\n        }", '        extensions.map(ext
    => (ext, class_name + "." + ext)).reduceLeft((x, y) => if (calcStrength(x._1)
    > calcStrength(y._1)) x else y)._2', "        var strength = new Array[(String,\
    \ Double)](extensions.length)\n        for (i <- 0 until extensions.length) {\n\
    \            var cap = 0\n            var sm = 0\n            for (j <- 0 until\
    \ extensions(i).length) {\n                if (extensions(i)(j).isUpper) cap +=\
    \ 1\n                else sm += 1\n            }\n            strength(i) = (extensions(i),\
    \ cap - sm)\n        }\n        strength = strength.sortWith((a, b) => a._2 >\
    \ b._2)\n        class_name + \".\" + strength(0)._1", "        val strength =\
    \ extensions.map(ext => {\n            val u = ext.filter(x => x.isUpper).length\n\
    \            val l = ext.filter(x => x.isLower).length\n            (ext, u -\
    \ l)\n        })\n        val (ext, st) = strength.sortBy(x => x._2).reverse.head\n\
    \        return class_name + \".\" + ext", "        val strength = extensions.map(ext\
    \ => { \n            val cap = ext.count(c => c.isUpper)\n            val sm =\
    \ ext.count(c => c.isLower)\n            (cap - sm, ext)\n        })\n       \
    \ val strongest = strength.maxBy(_._1)\n        class_name + \".\" + strongest._2",
  "        // \"Write your code here\"\n        class_name + \".\" + extensions.maxBy(f=>(f.filter(_.isUpper).length-f.filter(_.isLower).length))",
  "        // your code here\n        val a = extensions.zipWithIndex.sortBy(x =>\
    \ x._1.filter(_.isUpper).length - x._1.filter(_.isLower).length).reverse.head\n\
    \        class_name + \".\" + a._1", "        var bestStrength = Double.NegativeInfinity\n\
    \        var bestExtension = \"\"\n        for (extension <- extensions) {\n \
    \           var strength = extension.count(_.isUpper) - extension.count(_.isLower)\n\
    \            if (strength > bestStrength) {\n                bestStrength = strength\n\
    \                bestExtension = extension\n            }\n        }\n       \
    \ return class_name + \".\" + bestExtension", "        // Write code here\n  \
    \      val l = extensions.map(x => (x,(x.toList.filter(x => x.isUpper).length\
    \ - x.toList.filter(x => x.isLower).length)))\n        val strongest = l.maxBy(x\
    \ => x._2)\n        class_name + \".\" + strongest._1", "        val e = extensions.map(f\
    \ => (f, f.count(c => c.isUpper) - f.count(c => c.isLower))).sortBy(f => -f._2)\n\
    \        class_name + \".\" + e(0)._1", "        var maxStrength = Int.MinValue\n\
    \        var maxStrengthExtension : String = null\n        for (extension <- extensions)\
    \ {\n            var strength = 0\n            for (letter <- extension) {\n \
    \               if (letter.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > maxStrength) {\n           \
    \     maxStrength = strength\n                maxStrengthExtension = extension\n\
    \            }\n        }\n        return class_name + \".\" + maxStrengthExtension",
  '        null', "    \tif (extensions.length == 0) class_name\n    \telse {\n  \
    \  \t\tval strengths = extensions.map(x => (x, abs(x.count(_.isUpper) - x.count(_.isLower)))).sortBy(x\
    \ => x._2)\n    \t\t//println(strengths)\n    \t\tclass_name + \".\" + strengths.last._1\n\
    \    \t}", "        val strongest = extensions.maxBy(ext => ext.filter(_.isUpper).length\
    \ - ext.filter(_.isLower).length)\n        class_name + \".\" + strongest", " \
    \       val strength = extensions.map(e => e.filter(Character.isUpperCase(_)).length\
    \ - e.filter(Character.isLowerCase(_)).length)\n        val max = strength.max\n\
    \        return class_name + \".\" + extensions(strength.indexOf(max))", "   \
    \     // Your code goes here.\n        return \"\"", "        // Your code here\n\
    \        return \"\";", "        val map = HashMap[String, Double]()\n       \
    \ for (ext <- extensions) {\n            var uppers = 0\n            var lowers\
    \ = 0\n            for (ch <- ext) {\n                if (ch.isUpper) uppers +=\
    \ 1\n                else lowers += 1\n            }\n            map += (ext\
    \ -> (uppers - lowers))\n        }\n        val sorted = map.toList.sortBy(_._2)\n\
    \        class_name + \".\" + sorted.head._1", "        val p = extensions.map(x\
    \ => (class_name + \".\" + x, x.count(_.isUpper) - x.count(_.isLower))).maxBy(_._2)\n\
    \        p._1", "        var strongest_extension = \"\"\n        var strongest_strength\
    \ = -1.0\n        for (extension <- extensions) {\n            var strength =\
    \ 0.0\n            for (char <- extension) strength += if (char.isUpper) 1.0 else\
    \ -1.0\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension", "      \
    \  // Start of user code StrongestExtension\n        // Your code here\n     \
    \   \"Replace this string with the solution\"\n        // End of user code", " \
    \       var c_name = class_name\n        var strongest_strength = 0.0\n      \
    \  var strongest_extension = \"\"\n        for (i <- 0 until extensions.length)\
    \ {\n            var uppercase_count = 0\n            var lowercase_count = 0\n\
    \            var current_string = extensions(i)\n            for (j <- 0 until\
    \ current_string.length) {\n                if (current_string(j).isUpper) {\n\
    \                    uppercase_count += 1\n                } else {\n        \
    \            lowercase_count += 1\n                }\n            }\n        \
    \    if (uppercase_count > 0 && lowercase_count > 0) {\n                var current_strength\
    \ = (uppercase_count.toDouble / lowercase_count.toDouble)\n                if\
    \ (current_strength > strongest_strength) {\n                    strongest_strength\
    \ = current_strength\n                    strongest_extension = current_string\n\
    \                }\n            }\n        }\n        c_name += \".\" + strongest_extension\n\
    \        return c_name", "    \tvar max = 0\n    \tvar maxName = \"\"\n    \t\
    for (x <- extensions) {\n    \t\tvar cap = 0\n    \t\tvar sm = 0\n    \t\tfor\
    \ (y <- x) {\n    \t\t\tif (y >= 'A' && y <= 'Z') cap += 1\n    \t\t\telse sm\
    \ += 1\n    \t\t}\n    \t\tif (cap - sm > max) {\n    \t\t\tmax = cap - sm\n \
    \   \t\t\tmaxName = x\n    \t\t}\n    \t}\n    \treturn class_name + \".\" + maxName",
  "        var max_strength = 0.0\n        var strongest_extension_name = \"\"\n \
    \       for (extension <- extensions) {\n            var strength = extension.count(x\
    \ => x.isUpper) - extension.count(x => x.isLower)\n            if (strength >\
    \ max_strength) {\n                max_strength = strength\n                strongest_extension_name\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension_name",
  '        // Your Code Here', "        var strength = 0\n        var strongest_extension\
    \ = \"\"\n        for (extension <- extensions) {\n            var n_upper = 0\n\
    \            var n_lower = 0\n            for (c <- extension) {\n           \
    \     if (c.isUpper) n_upper += 1\n                else n_lower += 1\n       \
    \     }\n            if (n_upper - n_lower > strength) {\n                strength\
    \ = n_upper - n_lower\n                strongest_extension = extension\n     \
    \       }\n        }\n        return class_name + \".\" + strongest_extension",
  "        // Your answer here.\n        val extensionStrength = new Array[Double](extensions.length)\n\
    \        for (i <- 0 until extensions.length) {\n            var s = extensions(i)\n\
    \            var cnt:Int = 0\n            for (c <- s) {\n                if (c.isUpper)\
    \ cnt += 1\n            }\n            extensionStrength(i) = cnt - s.length\n\
    \        }\n        val maxStrength = extensionStrength.max\n        val maxStrengthIndex\
    \ = extensionStrength.indexOf(maxStrength)\n        class_name + \".\" + extensions(maxStrengthIndex)",
  "        // Your Code Here\n        var className = class_name\n        val extList\
    \ = extensions\n        val extListCap = extList.map(_.filter(_.isUpper))\n  \
    \      val extListSmall = extList.map(_.filter(_.isLower))\n        val extListDiff\
    \ = extListCap.zip(extListSmall).map(i => i._1.length - i._2.length)\n       \
    \ var max = extListDiff.max\n        var index = extListDiff.indexOf(max)\n  \
    \      className = className + \".\" + extList(index)\n        return className",
  "        var strongest_extension = \"\"\n        var strongest_strength = 0.0\n\
    \        for (extension <- extensions) {\n            var strength = (extension.filter(_.isUpper).length).toDouble\
    \ - (extension.filter(_.isLower).length).toDouble\n            if (strength >=\
    \ strongest_strength) {\n                strongest_strength = strength\n     \
    \           strongest_extension = extension\n            }\n        }\n      \
    \  return class_name + \".\" + strongest_extension", "        val STRENGTH = (a\
    \ : String) => a.count(_.isUpper) - a.count(_.isLower)\n        val str = STRENGTH(extensions.maxBy(STRENGTH))\n\
    \        \"(\" + class_name + \".\" + extensions.maxBy(STRENGTH) + \")\"", " \
    \       var strongest_strength = -1.0\n        var strongest_extension = \"\"\n\
    \        for (extension <- extensions) {\n            var strength = 0.0\n   \
    \         for (letter <- extension) {\n                strength += if (letter.isUpper)\
    \ 1 else -1\n            }\n            if (strength > strongest_strength) {\n\
    \                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension",
  "        var strongest : String = \"\"\n        var strongest_strength : Double\
    \ = -1\n        for (extension <- extensions) {\n            var uppercase_count\
    \ : Int = 0\n            var lowercase_count : Int = 0\n            for (character\
    \ <- extension) {\n                if (character.isUpper) uppercase_count += 1\n\
    \                else if (character.isLower) lowercase_count += 1\n          \
    \  }\n            var strength : Double = uppercase_count - lowercase_count\n\
    \            if (strength > strongest_strength) {\n                strongest =\
    \ extension\n                strongest_strength = strength\n            }\n  \
    \      }\n        return (class_name + \".\" + strongest)", "        var best_strength\
    \ = -1\n        var best_strength_ext = \"\"\n        for (ext <- extensions)\
    \ {\n            var strength = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) strength += 1\n                else strength -= 1\n      \
    \      }\n            if (strength > best_strength) {\n                best_strength\
    \ = strength\n                best_strength_ext = ext\n            }\n       \
    \ }\n        class_name + \".\" + best_strength_ext", "        var result = class_name\n\
    \        var max = 0.0\n        for (name <- extensions) {\n            var uppercase_count\
    \ = 0\n            var lowercase_count = 0\n            for (c <- name) {\n  \
    \              if (c.isUpper) uppercase_count += 1\n                else if (c.isLower)\
    \ lowercase_count += 1\n            }\n            var strength = uppercase_count\
    \ - lowercase_count\n            if (strength > max) {\n                max =\
    \ strength\n                result = class_name + \".\" + name\n            }\n\
    \        }\n        result", "      val class_name_plus_dot = class_name + \"\
    .\"\n      if (extensions.length == 0) class_name_plus_dot\n      else {\n   \
    \     val extension_strengths = extensions.map(x => (x, Strength(x)))\n      \
    \  val extension_name_max_strength = extension_strengths.maxBy(_._2)\n       \
    \ val extension_name = extension_name_max_strength._1\n        class_name_plus_dot\
    \ + extension_name\n      }", "        // Your code here\n        var strongestExt:\
    \ String = \"\"\n        var strongest: Double = 0\n        var s: String = \"\
    \"\n        var strength: Double = 0\n        for (i <- 0 until extensions.length)\
    \ {\n            s = extensions(i)\n            var a: Double = 0\n          \
    \  var b: Double = 0\n            for (j <- 0 until s.length) {\n            \
    \    if (s(j).isUpper) {\n                    a += 1\n                } else {\n\
    \                    b += 1\n                }\n            }\n            strength\
    \ = a - b\n            if (strength > strongest) {\n                strongest\
    \ = strength\n                strongestExt = s\n            }\n        }\n   \
    \     return class_name + \".\" + strongestExt", "        val class_name_length\
    \ = class_name.length\n        val (strongest_extension, index) = extensions.zipWithIndex.map\
    \ { case (x, y) => (x, y, x.toLowerCase.filter(_.isLower).length - x.toUpperCase.filter(_.isUpper).length)\
    \ }.sortBy(_._3).last\n        return class_name + \".\" + extensions(index)",
  "        if (extensions.length == 0) return class_name + \".NoExtension\";\n   \
    \     var strength = -100.0;\n        var strongest = \"\";\n        for (extension\
    \ <- extensions) {\n            var cap = 0;\n            var sm = 0;\n      \
    \      for (c <- extension) {\n                if (c.isUpper) cap += 1;\n    \
    \            else sm += 1;\n            }\n            if (strength < cap - sm)\
    \ {\n                strength = cap - sm;\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \     // ADD YOUR CODE HERE\n      var strongest: String = \"\"\n      var strength:\
    \ Double = 0\n      for (x <- extensions) {\n        var strength_x: Double =\
    \ x.toList.filter(_.isUpper).length - x.toList.filter(_.isLower).length\n    \
    \    if (strength_x > strength) {\n          strength = strength_x\n         \
    \ strongest = x\n        }\n      }\n      class_name + \".\" + strongest", " \
    \       // Fill in the code for this function.\n        \"\"", "        if (extensions.length\
    \ == 0) return class_name\n        val strengths = extensions.map(e => (e, e.count(_.isUpper)\
    \ - e.count(_.isLower)))\n        strengths.sortBy(e => e._2)(Ordering[Int].reverse).head._1",
  "        // Fill in the solution here \n        var result = class_name + \".\"\
    \ + extensions(0)\n        var strength = 0\n        for (i <- 0 until extensions.length)\
    \ {\n            var upper = 0\n            var lower = 0\n            for (j\
    \ <- 0 until extensions(i).length) {\n                if (extensions(i)(j).isUpper)\
    \ upper += 1\n                else lower += 1\n            }\n            if (upper\
    \ - lower > strength) {\n                strength = upper - lower\n          \
    \      result = class_name + \".\" + extensions(i)\n            }\n        }\n\
    \        result", "        val strength = extensions.map(x => new Extension(x).strength).zipWithIndex.maxBy(_._1)._2\n\
    \        s\"$class_name.${extensions(strength)}\"", "        var max = -100\n\
    \        var r = \"\"\n        for (ext <- extensions) {\n            var CAP\
    \ = 0; var SM = 0\n            for (c <- ext) if (c.isUpper) CAP += 1 else SM\
    \ += 1\n            if (max < CAP - SM) {\n                max = CAP - SM\n  \
    \              r = ext\n            }\n        }\n        return class_name +\
    \ \".\" + r", "        var maxStrength = 0.0\n        var result : String = null\n\
    \        for (extension <- extensions) {\n            var strength = 0.0\n   \
    \         for (ch <- extension) {\n                if (ch.isUpper) strength +=\
    \ 1\n                else strength -= 1\n            }\n            if (strength\
    \ > maxStrength) {\n                maxStrength = strength\n                result\
    \ = class_name + \".\" + extension\n            }\n        }\n        return result",
  "        var maxStrength = 0\n        var maxStrengthStr = extensions(0)\n     \
    \   for (str <- extensions) {\n            var strength = 0\n            for (c\
    \ <- str) {\n                if (c.isUpper) strength += 1\n                else\
    \ strength -= 1\n            }\n            if (strength > maxStrength) {\n  \
    \              maxStrength = strength\n                maxStrengthStr = str\n\
    \            }\n        }\n        return class_name + \".\" + maxStrengthStr",
  "        val strength_extensions = extensions.map(e => (e, e.filter(c => c.isUpper).length\
    \ - e.filter(c => c.isLower).length))\n        val (strongest_extension, strength)\
    \ = strength_extensions.reduce((e1, e2) => if (e1._2 >= e2._2) e1 else e2)\n \
    \       class_name + \".\" + strongest_extension", "        val extension = extensions.maxBy(\n\
    \            e => e.count(_.isUpper) - e.count(_.isLower)\n        )\n       \
    \ class_name + \".\" + extension", "        var strength = 0.0\n        var strongest\
    \ = \"\"\n        for (i <- 0 until extensions.length) {\n            val s =\
    \ extensions(i).filter(x => x.isUpper).length - extensions(i).filter(x => x.isLower).length\n\
    \            if (s > strength) {\n                strength = s\n             \
    \   strongest = extensions(i)\n            }\n        }\n        return class_name\
    \ + \".\" + strongest", "        val strengths = new ArrayBuffer[Double]\n   \
    \     for (ext <- extensions) {\n            var upper = 0\n            var lower\
    \ = 0\n            for (ch <- ext) {\n                if (ch.isUpper) upper +=\
    \ 1\n                else lower += 1\n            }\n            strengths +=\
    \ (upper - lower)\n        }\n        var ans = 0\n        for (i <- 1 until strengths.length)\
    \ {\n            if (strengths(i) > strengths(ans)) ans = i\n        }\n     \
    \   class_name + \".\" + extensions(ans)", "        var strongest : String = \"\
    \"\n        var strength : Double = 0\n        for (ext <- extensions) {\n   \
    \         var cap : Int = 0\n            var sm : Int = 0\n            for (c\
    \ <- ext) {\n                if (c.isUpper) cap += 1\n                else sm\
    \ += 1\n            }\n            var new_strength : Double = cap - sm\n    \
    \        if (new_strength > strength) {\n                strength = new_strength\n\
    \                strongest = ext\n            }\n        }\n        class_name\
    \ + \".\" + strongest", "        // Split the extensions into a list of lists,\
    \ where each sublist has an element\n        // for the strength (calculated above)\
    \ and the extension name.\n        var extension_strength = extensions.map(extension\
    \ => (extension.count(_.isUpper) - extension.count(_.isLower), extension))\n \
    \       // Find the extension with the maximum strength and return it.\n     \
    \   return class_name + \".\" + extension_strength.maxBy(_._1)._2", "        val\
    \ strengths = extensions.map(x => (x, (x.count(y => y.isUpper), x.count(y => y.isLower)))).map(x\
    \ => (x._1, x._2._1 - x._2._2))\n        val maxStrength = strengths.maxBy(x =>\
    \ x._2)._2\n        val strongest = strengths.filter(x => x._2 == maxStrength).minBy(x\
    \ => x._1)\n        class_name + \".\" + strongest._1", "        // fill here\n\
    \        extensions.foldLeft((\"\", \"\", 0.0))((b, a) => {\n            val s\
    \ = a.count(x => x.isUpper) - a.count(x => x.isLower)\n            if (s > b._3)\
    \ (class_name, a, s) else b\n        })._1 + \".\" + extensions.foldLeft((\"\"\
    , \"\", 0.0))((b, a) => {\n            val s = a.count(x => x.isUpper) - a.count(x\
    \ => x.isLower)\n            if (s > b._3) (class_name, a, s) else b\n       \
    \ })._2", "        val strengths = extensions.map(s => s.count(_.isUpper) - s.count(_.isLower))\n\
    \        class_name + \".\" + extensions(strengths.indexOf(strengths.max))", " \
    \       val class_name_upper = class_name.toUpperCase\n        var strongest_index\
    \ = 0\n        var strongest_value = 0.0\n        for (i <- 0 until extensions.length)\
    \ {\n            val upper = extensions(i).toUpperCase\n            val lower\
    \ = extensions(i).toLowerCase\n            val value = upper.toString.length -\
    \ lower.toString.length\n            if (value > strongest_value) {\n        \
    \        strongest_value = value\n                strongest_index = i\n      \
    \      }\n        }\n        class_name + \".\" + extensions(strongest_index)",
  "        var strongest = 0.0\n        var strongest_string = \"\"\n        for (str\
    \ <- extensions) {\n            var caps = 0\n            var smalls = 0\n   \
    \         for (c <- str) {\n                if (c.isUpper) caps += 1\n       \
    \         else if (c.isLower) smalls += 1\n            }\n            val ratio\
    \ = caps.toDouble / smalls.toDouble\n            if (ratio > strongest) {\n  \
    \              strongest = ratio\n                strongest_string = str\n   \
    \         }\n        }\n        class_name + \".\" + strongest_string", "    \
    \    var name = \"\"\n        var strength = Int.MinValue\n        for (ext <-\
    \ extensions) {\n            var stre = 0\n            for (i <- 0 until ext.length)\
    \ {\n                if (ext(i).isUpper) stre += 1\n                else if (ext(i).isLower)\
    \ stre -= 1\n            }\n            if (stre > strength) {\n             \
    \   strength = stre\n                name = ext\n            }\n        }\n  \
    \      class_name + \".\" + name", "        if (extensions.length == 0) class_name\n\
    \        else {\n            val strengths = extensions.map(x => (x, strength(x)))\n\
    \            val strongest_ext = strengths.maxBy(_._2)\n            class_name\
    \ + \".\" + strongest_ext._1\n        }", "        // Your code here\n       \
    \ var name = \"\";\n        var stren = 0;\n        for (i <- extensions) {\n\
    \            var count1 = 0;\n            var count2 = 0;\n            for (j\
    \ <- i) {\n                if (j.isUpper) {\n                    count1 += 1;\n\
    \                } else {\n                    count2 += 1;\n                }\n\
    \            }\n            if (count1 - count2 > stren) {\n                stren\
    \ = count1 - count2;\n                name = i;\n            }\n        }\n  \
    \      return class_name + \".\" + name;", "        val strengths = extensions.map(n\
    \ => n.count(c => c.isUpper) - n.count(c => c.isLower))\n        class_name +\
    \ \".\" + extensions(strengths.indexOf(strengths.max))", "        // Your code\
    \ here\n        extensions.maxBy(x => x.count(_.isUpper) - x.count(_.isLower))",
  "        var max = -1.0\n        var extension = \"\"\n        for (e <- extensions)\
    \ {\n            var cap = 0\n            var sm = 0\n            for (ch <- e)\
    \ {\n                if (ch.isUpper) cap += 1\n                else sm += 1\n\
    \            }\n            var tmp = cap - sm\n            if (tmp > max) {\n\
    \                max = tmp\n                extension = e\n            }\n   \
    \     }\n        return class_name + \".\" + extension", "        var result =\
    \ class_name\n        var max_strength = 0.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (char <- extension) {\n \
    \               if (char.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                result = class_name + \".\" +\
    \ extension\n            }\n        }\n        return result", "        var result\
    \ = \"\";\n        var maxStrength = -100.0;\n        extensions.foreach(extension\
    \ => {\n            var strength = extension.filter(ch => ch.isUpper).length -\
    \ extension.filter(ch => ch.isLower).length;\n            if (strength > maxStrength)\
    \ {\n                maxStrength = strength;\n                result = class_name\
    \ + \".\" + extension;\n            }\n        })\n        return result;", " \
    \       val class_name_length = class_name.length\n        val extensions_length\
    \ = extensions.length\n        val extension_strenght = new Array[Double](extensions_length)\n\
    \        val extension_letter_counts = Array.ofDim[Int](extensions_length, 2)\n\
    \        for (i <- 0 until extensions_length) {\n            val extension = extensions(i)\n\
    \            val extension_length = extension.length\n            var uppercase_count\
    \ = 0\n            var lowercase_count = 0\n            for (j <- 0 until extension_length)\
    \ {\n                val char = extension(j)\n                if (char >= 'A'\
    \ && char <= 'Z') uppercase_count += 1\n                else if (char >= 'a' &&\
    \ char <= 'z') lowercase_count += 1\n            }\n            extension_letter_counts(i)(0)\
    \ = uppercase_count\n            extension_letter_counts(i)(1) = lowercase_count\n\
    \            extension_strenght(i) = uppercase_count - lowercase_count\n     \
    \   }\n        var strongest_index = 0\n        var strongest_extension_strength\
    \ = extension_strenght(0)\n        for (i <- 1 until extensions_length) {\n  \
    \          val current_extension_strength = extension_strenght(i)\n          \
    \  if (current_extension_strength > strongest_extension_strength) {\n        \
    \        strongest_index = i\n                strongest_extension_strength = current_extension_strength\n\
    \            }\n        }\n        class_name + \".\" + extensions(strongest_index)",
  "        // Your Code Here\n        var max_strength = -Double.MaxValue\n      \
    \  var max_strength_extension = \"\"\n        for (extension <- extensions) {\n\
    \            var strength = 0.0\n            for (i <- 0 until extension.length)\
    \ {\n                var char = extension(i)\n                if (char.isUpper)\
    \ strength += 1.0\n                else strength -= 1.0\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength\n\
    \                max_strength_extension = extension\n            }\n        }\n\
    \        return class_name + \".\" + max_strength_extension", "    \tvar max_index\
    \ = 0\n    \tvar max_strength = 0.0\n    \tfor (i <- 0 until extensions.length)\
    \ {\n    \t\tvar CAP = 0\n    \t\tvar SM = 0\n    \t\tvar temp = extensions(i)\n\
    \    \t\tfor (j <- 0 until temp.length) {\n    \t\t\tif (temp(j).isUpper) CAP\
    \ += 1\n    \t\t\telse SM += 1\n    \t\t}\n    \t\tvar strength = CAP - SM\n \
    \   \t\tif (strength > max_strength) {\n    \t\t\tmax_strength = strength\n  \
    \  \t\t\tmax_index = i\n    \t\t}\n    \t}\n    \treturn class_name + \".\" +\
    \ extensions(max_index)", "        // TODO: Implement\n        return \"\"", " \
    \       var result = 0\n        var strength = 0\n        for (i <- 0 until extensions.length)\
    \ {\n            var s = 0\n            var c = 0\n            for (j <- 0 until\
    \ extensions(i).length) {\n                if (extensions(i)(j).isUpper) s +=\
    \ 1\n                else c += 1\n            }\n            if (s - c > strength)\
    \ {\n                strength = s - c\n                result = i\n          \
    \  }\n        }\n        class_name + \".\" + extensions(result)", "    \t\tvar\
    \ max_strength = -9999999.0\n    \t\tvar max_extension = \"\"\n    \t\tfor (extension\
    \ <- extensions) {\n    \t\t\tvar strength = extension.count(c => c.isUpper) -\
    \ extension.count(c => c.isLower)\n    \t\t\tif (strength > max_strength) {\n\
    \    \t\t\t\tmax_strength = strength\n    \t\t\t\tmax_extension = extension\n\
    \    \t\t\t}\n    \t\t}\n    \t\treturn class_name + \".\" + max_extension", " \
    \       if (extensions.isEmpty) return class_name\n        var strength = extensions.head.count(i\
    \ => i.isUpper) - extensions.head.count(i => i.isLower)\n        var strongest\
    \ = extensions.head\n        for (i <- extensions) {\n            val s = i.count(i\
    \ => i.isUpper) - i.count(i => i.isLower)\n            if (s > strength) {\n \
    \               strength = s\n                strongest = i\n            }\n \
    \       }\n        return class_name + \".\" + strongest", "        val l = for\
    \ (ex <- extensions) yield (ex.count(_.isUpper), ex.count(_.isLower), ex)\n  \
    \      class_name + \".\" + l.minBy(x => if (x._1 - x._2 != 0) x._1 - x._2 else\
    \ x._2)._3", '        "".toString', "        val c = class_name + \".\"\n    \
    \    var best_extension = \"\"\n        var best_extension_strength = Int.MinValue\n\
    \        for (extension <- extensions) {\n            var strength = 0\n     \
    \       for (c <- extension if c.isUpper) strength += 1\n            for (c <-\
    \ extension if c.isLower) strength -= 1\n            if (strength > best_extension_strength)\
    \ {\n                best_extension = extension\n                best_extension_strength\
    \ = strength\n            }\n        }\n        c + best_extension", "      var\
    \ maxStrength = -1\n      var maxExtension = \"\"\n      for (extension <- extensions)\
    \ {\n        var strength = 0\n        for (c <- extension) {\n          if (c.isUpper)\
    \ strength += 1\n          else strength -= 1\n        }\n        if (strength\
    \ > maxStrength) {\n          maxStrength = strength\n          maxExtension =\
    \ extension\n        }\n      }\n      return class_name + \".\" + maxExtension",
  "      var strongest = 0.0\n      var result = \"\"\n      extensions.foreach(s\
    \ => {\n        var cap = 0\n        var sm = 0\n        s.foreach(c => {\n  \
    \        if (c.isUpper) cap += 1\n          else sm += 1\n        })\n       \
    \ if (cap - sm > strongest) {\n          strongest = cap - sm\n          result\
    \ = class_name + \".\" + s\n        }\n      })\n      result", "        if (extensions.isEmpty)\
    \ class_name\n        else {\n            val sorted_extensions = extensions.sortWith((a,\
    \ b) => {\n                val a_strength = (a.count(_.isUpper) - a.count(_.isLower)).toDouble\
    \ / a.length\n                val b_strength = (b.count(_.isUpper) - b.count(_.isLower)).toDouble\
    \ / b.length\n                b_strength < a_strength\n            })\n      \
    \      class_name + \".\" + sorted_extensions.head\n        }", "        if (extensions.length\
    \ == 0) return class_name\n        else {\n          var sc = 0\n          var\
    \ lc = 0\n          for (i <- 0 until extensions(0).length) {\n            if\
    \ (extensions(0)(i).isUpper) sc += 1\n            else lc += 1\n          }\n\
    \          var strongestExtension = extensions(0)\n          var strength = sc\
    \ - lc\n          for (i <- 1 until extensions.length) {\n            sc = 0\n\
    \            lc = 0\n            for (j <- 0 until extensions(i).length) {\n \
    \             if (extensions(i)(j).isUpper) sc += 1\n              else lc +=\
    \ 1\n            }\n            if (sc - lc > strength) {\n              strength\
    \ = sc - lc\n              strongestExtension = extensions(i)\n            }\n\
    \          }\n          return class_name + \".\" + strongestExtension\n     \
    \   }", "        val strengths = extensions.map(ext => (ext, ext.count(_.isUpper)\
    \ - ext.count(_.isLower)))\n        class_name + \".\" + strengths.maxBy(_._2)._1",
  "        // your code here\n        \"\";", "        def fraction(s : String) :\
    \ Double = {\n            def to_counts(s : String) : (Int, Int) = {\n       \
    \         def loop(s : String, acc : (Int, Int)) : (Int, Int) = s match {\n  \
    \                  case \"\" => acc\n                    case _ => {\n       \
    \                 val (cap, sm) = acc\n                        if (s.head.isUpper)\
    \ loop(s.tail, (cap + 1, sm))\n                        else loop(s.tail, (cap,\
    \ sm + 1))\n                    }\n                }\n                loop(s,\
    \ (0, 0))\n            }\n            val (cap, sm) = to_counts(s)\n         \
    \   cap - sm\n        }\n        extensions.zipWithIndex.map(x => (x._1, fraction(x._1))).maxBy(_._2)._1",
  "        var strongest = \"\";\n        var strongest_strength = Double.NegativeInfinity;\n\
    \        for (extension <- extensions) {\n            var strength = 0;\n    \
    \        for (i <- 0 until extension.length) strength += if (extension(i).isUpper)\
    \ 1 else -1;\n            if (strength > strongest_strength) {\n             \
    \   strongest = extension;\n                strongest_strength = strength;\n \
    \           }\n        }\n        return class_name + \".\" + strongest;", " \
    \       var strongest = extensions(0)\n        var maxStrength = -10000.0\n  \
    \      for (ext <- extensions) {\n            var strength = getStrength(ext)\n\
    \            if (strength > maxStrength) {\n                maxStrength = strength\n\
    \                strongest = ext\n            }\n        }\n        class_name\
    \ + \".\" + strongest", '        ""', "        val _upper = (x : String) => x.filter(_.isUpper).length.toDouble\n\
    \        val _lower = (x : String) => x.filter(_.isLower).length.toDouble\n  \
    \      var max_strength = (-1, \"\"); var max_index = -1\n        for (i <- 0\
    \ until extensions.length) {\n            val s = (_upper(extensions(i)) - _lower(extensions(i)))\
    \ / (1.0 * extensions(i).length)\n            if (s > max_strength._1) {\n   \
    \             max_strength = (s, extensions(i))\n                max_index = i\n\
    \            }\n        }\n        return class_name + \".\" + max_strength._2",
  "        var max_strength = 0.0\n        var max_strength_extension = \"\"\n   \
    \     for (extension <- extensions) {\n            var uppercase_count = 0\n \
    \           var lowercase_count = 0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) uppercase_count += 1\n                else if (c.isLower)\
    \ lowercase_count += 1\n            }\n            val strength = uppercase_count\
    \ - lowercase_count\n            if (strength > max_strength) {\n            \
    \    max_strength = strength\n                max_strength_extension = extension\n\
    \            }\n        }\n        class_name + \".\" + max_strength_extension",
  "      val weights = extensions.map(str => {\n        val upper = str.toList.filter(c\
    \ => c.isUpper).length\n        val lower = str.toList.filter(c => c.isLower).length\n\
    \        (upper - lower).toDouble / upper\n      })\n      class_name + \".\"\
    \ + extensions(weights.indexOf(weights.max))", "        var best_extension = \"\
    \"\n        var best_strength = -Double.MaxValue\n        extensions.foreach(extension\
    \ => {\n            var strength = extension.filter(char => char.isUpper).length\
    \ - extension.filter(char => char.isLower).length\n            if (strength >\
    \ best_strength) {\n                best_strength = strength\n               \
    \ best_extension = extension\n            }\n        })\n        return class_name\
    \ + \".\" + best_extension", "        var strongest = extensions(0)\n        for\
    \ (ext <- extensions) {\n            if (strength(ext) > strength(strongest))\
    \ strongest = ext\n        }\n        class_name + \".\" + strongest", "     \
    \   val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        return class_name + \".\" + strengths.maxBy(_._2)._1", "        val (max_strength,\
    \ strongest_extension) = extensions.foldLeft((Double.MinValue, \"\"))((tuple,\
    \ s) => {\n            val (upper, lower) = ((s.count(x => x.isUpper)), (s.count(x\
    \ => x.isLower)))\n            if (upper - lower > tuple._1) (upper - lower, s)\
    \ else tuple\n        })\n        class_name + \".\" + strongest_extension", " \
    \       def is_all_cap(c : Char) : Boolean = c >= 'A' && c <= 'Z'\n        def\
    \ is_all_small(c : Char) : Boolean = c >= 'a' && c <= 'z'\n        val strong_extension\
    \ = extensions.maxBy(p => p.count(is_all_cap) - p.count(is_all_small))\n     \
    \   class_name + \".\" + strong_extension", "        val max = extensions.map\
    \ { extension => val caps = extension.count(_.isUpper); val smalls = extension.count(_.isLower);\
    \ caps - smalls }.max\n        val strongest_extension = extensions.map { extension\
    \ => val caps = extension.count(_.isUpper); val smalls = extension.count(_.isLower);\
    \ caps - smalls }.zip(extensions).filter(x => x._1 == max).head._2\n        return\
    \ class_name + \".\" + strongest_extension", "        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ s = 0\n            for (c <- ext) if (c.isUpper) s += 1 else s -= 1\n      \
    \      if (s > strength) {\n                strength = s\n                strongest\
    \ = ext\n            }\n        }\n        class_name + \".\" + strongest", " \
    \       def strength(str : String) : Double = {\n            var cap = 0\n   \
    \         var sm = 0\n            for (i <- 0 until str.length) {\n          \
    \      if (str(i).isUpper) cap += 1\n                else sm += 1\n          \
    \  }\n            cap - sm\n        }\n        var str = 0.0\n        var ans\
    \ = \"\"\n        for (ext <- extensions) {\n            val st = strength(ext)\n\
    \            if (st > str) {\n                str = st\n                ans =\
    \ ext\n            }\n        }\n        class_name + \".\" + ans", "        //\
    \ Fill in the function body\n        return null", "        var m = -10000.0\n\
    \        var idx = -1\n        for (i <- 0 until extensions.length) {\n      \
    \      val CAP = extensions(i).count(_.isUpper)\n            val SM = extensions(i).count(_.isLower)\n\
    \            val strength = CAP - SM\n            if (strength > m) {\n      \
    \          m = strength\n                idx = i\n            }\n        }\n \
    \       class_name + \".\" + extensions(idx)", "        val strengths = extensions.map(x\
    \ => x.count(y => y.isUpper) - x.count(y => y.isLower)).zipWithIndex\n       \
    \ val strongest = strengths.maxBy(_._1)\n        class_name + \".\" + extensions(strongest._2)",
  "    \textensions.maxBy(x => (x.count(_.isUpper), -x.count(_.isLower))) match {\n\
    \    \t\tcase x => class_name + \".\" + x\n    \t}", "        var result = class_name\
    \ + \".\" + extensions(0)\n        var maxStrength = 0.0\n        for (extension\
    \ <- extensions) {\n            var uppercase = 0\n            var lowercase =\
    \ 0\n            for (c <- extension) {\n                if (c.isUpper) uppercase\
    \ += 1\n                else lowercase += 1\n            }\n            val strength\
    \ = (uppercase - lowercase).toDouble / extension.length\n            if (strength\
    \ > maxStrength) {\n                maxStrength = strength\n                result\
    \ = class_name + \".\" + extension\n            }\n        }\n        result",
  "        val str_ext = extensions.map(x => (class_name + \".\" + x, x.toLowerCase.split(\"\
    \")\n\t\t\t.filter(c => c.isUpper).length - x.toLowerCase.split(\"\").filter(c\
    \ => c.isLower).length))\n\t\tstr_ext.sortBy(x => x._2)(Ordering[Int].reverse).head._1",
  '        class_name + "." + extensions.map(x => (x.count(_.isUpper) - x.count(_.isLower),
    x)).max._2', "    \tval strong_extension = extensions.sortWith((e1, e2) => \n\
    \    \t\t{\n    \t\t\tval strength1 = e1.filter(_.isUpper).length - e1.filter(_.isLower).length\n\
    \    \t\t\tval strength2 = e2.filter(_.isUpper).length - e2.filter(_.isLower).length\n\
    \    \t\t\tstrength1 > strength2\n    \t\t}).head\n    \tclass_name + \".\" +\
    \ strong_extension", "        // your code here\n        return \"\"", "     \
    \   val xs = for (x <- extensions) yield (x.count(_.isUpper) - x.count(_.isLower),\
    \ x)\n        return class_name + \".\" + xs.maxBy(_._1)._2", "        var s :\
    \ String = \"\";\n        var max_strength : Double = 0;\n        for (extension\
    \ <- extensions) {\n            val caps : Int = extension.count(c => c.isUpper);\n\
    \            val smalls : Int = extension.count(c => c.isLower);\n           \
    \ val strength : Double = caps - smalls;\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                s = extension;\n\
    \            }\n        }\n        return class_name + \".\" + s;", "        var\
    \ strongest_ext : String = \"\"\n        var strongest_ext_strength : Double =\
    \ -999.0\n        var i : Int = 0\n        while (i < extensions.length) {\n \
    \           var strength : Double = 0.0\n            var j : Int = 0\n       \
    \     while (j < extensions(i).length) {\n                if (extensions(i)(j).isUpper)\
    \ strength += 1.0\n                else strength -= 1.0\n                j +=\
    \ 1\n            }\n            if (strength > strongest_ext_strength) {\n   \
    \             strongest_ext_strength = strength\n                strongest_ext\
    \ = extensions(i)\n            }\n            i += 1\n        }\n        return\
    \ class_name + \".\" + strongest_ext", "        // Write your code here...\n \
    \       val result = extensions.maxBy(x => x.count(_.isUpper) - x.count(_.isLower))\n\
    \        class_name + \".\" + result", "        def score(ext : String) : Float\
    \ = {\n            var uc = 0\n            var lc = 0\n            for (i <- 0\
    \ until ext.length) {\n                if (ext(i).isUpper) uc += 1\n         \
    \       else lc += 1\n            }\n            return (uc - lc).toFloat\n  \
    \      }\n        var best = 0.0f\n        var ans = \"\"\n        for (i <- 0\
    \ until extensions.length) {\n            val current = score(extensions(i))\n\
    \            if (current > best) {\n                best = current\n         \
    \       ans = extensions(i)\n            }\n        }\n        return class_name\
    \ + \".\" + ans", "        val strengths = extensions.map(s => s.filter(c => c.isUpper).length\
    \ - s.filter(c => c.isLower).length)\n        val i = strengths.indexOf(strengths.max)\n\
    \        return \"%s.%s\".format(class_name, extensions(i))", "        var strongest_extension\
    \ = \"\"\n        var strongest_strength = -1\n        for (extension <- extensions)\
    \ {\n            var strength = extension.filter(c => c.isUpper).length - extension.filter(c\
    \ => c.isLower).length\n            if (strength > strongest_strength) {\n   \
    \             strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        class_name + \".\" + strongest_extension",
  "        val strengths = extensions.map { ext =>\n            val cap = ext.count(Character.isUpperCase(_))\n\
    \            val sm = ext.count(Character.isLowerCase(_))\n            val strength\
    \ = cap - sm\n            (ext, strength)\n        }\n        val maxStrength\
    \ = strengths.maxBy(_._2)._2\n        return class_name + \".\" + strengths.filter(_._2\
    \ == maxStrength).minBy(_._1)._1", "        // Write your code here\n        null",
  "        var strongest = \"\"\n        var strength = 0.0\n        extensions.foreach(ext\
    \ => {\n            var cap = 0\n            var sm = 0\n            ext.foreach(c\
    \ => {\n                if(c >= 'A' && c <= 'Z') cap += 1\n                else\
    \ if(c >= 'a' && c <= 'z') sm += 1\n            })\n            if(cap - sm >\
    \ strength) {\n                strength = cap - sm\n                strongest\
    \ = ext\n            }\n        })\n        return class_name + \".\" + strongest",
  "        var strongest : String = \"\";\n        var strength : Double = Double.NegativeInfinity;\n\
    \        var current_strength : Double = 0;\n        for (extension <- extensions)\
    \ {\n            current_strength = 0;\n            for (character <- extension)\
    \ {\n                if (character.isUpper) current_strength += 1;\n         \
    \       else current_strength -= 1;\n            }\n            if (current_strength\
    \ > strength) {\n                strength = current_strength;\n              \
    \  strongest = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;", "        var strongest = 0\n        var strongest_extension\
    \ : String = \"\"\n        for (i <- 0 until extensions.length) {\n          \
    \  var upper = 0\n            var lower = 0\n            var strength = 0\n  \
    \          for (j <- 0 until extensions(i).length) {\n                if (extensions(i)(j).isUpper)\
    \ upper += 1\n                else lower += 1\n            }\n            strength\
    \ = upper - lower\n            if (strength > strongest) {\n                strongest\
    \ = strength\n                strongest_extension = extensions(i)\n          \
    \  }\n        }\n        return class_name + \".\" + strongest_extension", " \
    \       var strong_extension = extensions(0)\n        for (extension <- extensions)\
    \ {\n            if (strength(extension) > strength(strong_extension)) strong_extension\
    \ = extension\n        }\n        return class_name + \".\" + strong_extension",
  "    \tval s = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower))).maxBy(_._2)\n\
    \    \tclass_name + \".\" + s._1", "        // Your code goes here\n        return\
    \ \"\"", "        val list = extensions.map(x => (x, x.count(_.isUpper)-x.count(_.isLower))).sortBy(_._2)\n\
    \        class_name + \".\" + list.last._1", "        // We'll need the class\
    \ name, the strength of the extension, and the extension name.\n        // The\
    \ extension strength is calculated as the difference between the number of uppercase\n\
    \        // letters and the number of lowercase letters.\n        val strongest_extension\
    \ = extensions.map(x => \n                (x, x.filter(y => y.isUpper).length\
    \ - x.filter(y => y.isLower).length)).reduceLeft((x, y) => \n                if\
    \ (x._2 > y._2) x else y)\n        val class_extension = (class_name, strongest_extension._1)\n\
    \        \"%s.%s\".format(class_extension._1, class_extension._2)", "        var\
    \ strength = -Double.MaxValue\n        var strongest = \"\"\n        for (ext\
    \ <- extensions) {\n            var cap = 0\n            var sm = 0\n        \
    \    for (c <- ext) {\n                if (c.isUpper) cap += 1\n             \
    \   else sm += 1\n            }\n            var st = cap - sm\n            if\
    \ (st > strength) {\n                strength = st\n                strongest\
    \ = ext\n            }\n        }\n        class_name + \".\" + strongest", " \
    \     val strengths = extensions.map(a => {\n        val caps = a.filter(b =>\
    \ b.isUpper).length\n        val sm = a.filter(b => b.isLower).length\n      \
    \  (a, caps - sm)\n      })\n      strengths.sortBy(a => a._2).last._1", "   \
    \   def getStrength(s : String) : Double = {\n        var cnt = 0\n        for\
    \ (c <- s) {\n          if (c.isUpper) cnt += 1\n        }\n        cnt - s.length\n\
    \      }\n      val ss = extensions.map(getStrength(_))\n      val best = ss.reduceLeft(_\
    \ max _)\n      class_name + \".\" + extensions(ss.indexOf(best))", "        def\
    \ strength(s : String) : Double = {\n            val lowerCase = s.filter(_.isLower).length\n\
    \            val upperCase = s.filter(_.isUpper).length\n            val ans =\
    \ upperCase - lowerCase\n            ans\n        }\n        val namedExtension\
    \ = ListMap(extensions.map(x => (x, strength(x))).toSeq.sortBy(-_._2):_*)\n  \
    \      var maxValue = Double.MinValue\n        var maxExtension = \"\"\n     \
    \   for ((extension, value) <- namedExtension) {\n            if (value > maxValue)\
    \ {\n                maxValue = value\n                maxExtension = extension\n\
    \            }\n        }\n        class_name + \".\" + maxExtension", "     \
    \   var strongest_extension = extensions(0)\n        var strongest_extension_strength\
    \ = -1000.0\n        for (extension <- extensions) {\n            var cap = 0\n\
    \            var sm = 0\n            for (i <- 0 until extension.length) {\n \
    \               if (extension(i).isUpper) cap += 1\n                else sm +=\
    \ 1\n            }\n            if (cap - sm > strongest_extension_strength) {\n\
    \                strongest_extension_strength = cap - sm\n                strongest_extension\
    \ = extension\n            }\n        }\n        class_name + \".\" + strongest_extension",
  "        val m = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower))).maxBy(_._2)\n\
    \        class_name + \".\" + m._1", "        // Your code goes here\n       \
    \ var s = 0.0\n        var e = \"\"\n        for (x <- extensions) {\n       \
    \     var temp = 0.0\n            for (y <- x) {\n                if (y.isUpper)\
    \ temp += 1\n                else temp -= 1\n            }\n            if (temp\
    \ > s) {\n                s = temp\n                e = x\n            }\n   \
    \     }\n        return (class_name + \".\" + e)", "        val sorted = extensions.sortWith((x,\
    \ y) =>\n            (x.count(_.isUpper) - x.count(_.isLower)) <\n           \
    \ (y.count(_.isUpper) - y.count(_.isLower)))\n        class_name + \".\" + sorted.last",
  "      // Fill in the function here\n      \"\"", "    \tif (extensions.length ==\
    \ 0) {\n    \t\treturn class_name\n    \t}\n    \tvar strongest_extension = extensions(0)\n\
    \    \tvar strength = 0\n    \tfor (i <- 0 until extensions.length) {\n    \t\t\
    val cur_strength = extensions(i).filter(_.isUpper).length - extensions(i).filter(_.isLower).length\n\
    \    \t\tif (cur_strength > strength) {\n    \t\t\tstrength = cur_strength\n \
    \   \t\t\tstrongest_extension = extensions(i)\n    \t\t}\n    \t}\n    \treturn\
    \ class_name + \".\" + strongest_extension", "        // Your code goes here\n\
    \        return \"\";", "    \tvar strongestExtension = \"\";\n    \tvar strongestStrength\
    \ = 0.0;\n    \textensions.foreach(extension => {\n    \t\tvar strength = 0.0;\n\
    \    \t\textension.foreach(character => {\n    \t\t\tif (character.isUpper) strength\
    \ += 1.0;\n    \t\t\telse strength -= 1.0;\n    \t\t});\n    \t\tif (strength\
    \ > strongestStrength) {\n    \t\t\tstrongestStrength = strength;\n    \t\t\t\
    strongestExtension = extension;\n    \t\t}\n    \t});\n    \tclass_name + \".\"\
    \ + strongestExtension;", "        val strength = (s : String) => s.toList.map(x\
    \ => if (x.isUpper) 1 else -1).reduceLeft(_ + _)\n        val ext = extensions.map(x\
    \ => (strength(x), x)).sortWith(_._1 > _._1).head._2\n        class_name + \"\
    .\" + ext", "        val strengths = extensions.map(s => {\n            val caps\
    \ = s.filter(c => c.isUpper).length\n            val smalls = s.filter(c => c.isLower).length\n\
    \            caps - smalls\n        })\n        val max_strength = strengths.max\n\
    \        val max_indices = strengths.zipWithIndex.filter(i => i._1 == max_strength).map(i\
    \ => i._2)\n        class_name + \".\" + extensions(max_indices(0))", "      \
    \  val uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        val lowercase = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val extension_strength = extensions.map(x\
    \ => (x, x.foldLeft(0)((acc, c) => {\n            if (uppercase.contains(c)) acc\
    \ + 1\n            else if (lowercase.contains(c)) acc - 1\n            else acc\n\
    \        })))\n        val strongest_extension = extension_strength.maxBy(_._2)._1\n\
    \        class_name + \".\" + strongest_extension", "        var cap = 0\n   \
    \     var sm = 0\n        var ans = 0\n        var strongest = \"\"\n        for\
    \ (ext <- extensions) {\n            cap = 0\n            sm = 0\n           \
    \ for (i <- 0 until ext.length) {\n                if (ext(i).isUpper) cap +=\
    \ 1\n                else sm += 1\n            }\n            if (cap - sm > ans)\
    \ {\n                ans = cap - sm\n                strongest = ext\n       \
    \     }\n        }\n        return class_name + \".\" + strongest", '        return
    "";', "        var strongest = extensions(0)\n        var strongest_strength =\
    \ 0\n        for (i <- 0 until extensions.length) {\n            var strength\
    \ = 0\n            for (j <- 0 until extensions(i).length) {\n               \
    \ if (extensions(i)(j).isUpper) strength += 1\n                else strength -=\
    \ 1\n            }\n            if (strength > strongest_strength) {\n       \
    \         strongest = extensions(i)\n                strongest_strength = strength\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        val\
    \ ext_map = new HashMap[Int, Int]\n        for (ext <- extensions) {\n       \
    \     val cnt_caps = ext.count(c => c.isUpper)\n            val cnt_smalls = ext.count(c\
    \ => c.isLower)\n            ext_map.put(cnt_caps - cnt_smalls, extensions.indexOf(ext))\n\
    \        }\n        if (ext_map.size == 0) {\n            class_name\n       \
    \ } else {\n            val max_ext = ext_map.maxBy(_._1)\n            if (max_ext._1\
    \ >= 0) {\n                class_name + \".\" + extensions(max_ext._2)\n     \
    \       } else {\n                class_name\n            }\n        }", "   \
    \     var extension = \"\";\n        var strength = 0.0;\n        for (e <- extensions)\
    \ {\n            var cap = 0;\n            var sm = 0;\n            for (i <-\
    \ 0 until e.length) {\n                if (e(i).isUpper) cap += 1;\n         \
    \       else sm += 1;\n            }\n            var str = cap - sm;\n      \
    \      if (str > strength) {\n                strength = str;\n              \
    \  extension = e;\n            }\n        }\n        class_name + \".\" + extension;",
  "        var maxStrength = -1.0\n        var maxStrengthIndex = -1\n        for\
    \ (i <- 0 until extensions.length) {\n            var cap = 0\n            var\
    \ sm = 0\n            for (c <- extensions(i)) {\n                if (c.isUpper)\
    \ cap += 1\n                else sm += 1\n            }\n            var strength\
    \ = cap - sm\n            if (strength > maxStrength) {\n                maxStrength\
    \ = strength\n                maxStrengthIndex = i\n            }\n        }\n\
    \        return class_name + \".\" + extensions(maxStrengthIndex)"]
stop_tokens:
- "\n    }\n"
