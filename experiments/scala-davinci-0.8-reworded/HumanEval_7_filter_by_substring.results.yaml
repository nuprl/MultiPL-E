language: scala
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // TODO\n  \
    \      var ret : List[String] = List[String]()\n        for (i <- 0 until strings.length)\
    \ {\n            val s = strings(i)\n            if (s.contains(substring)) {\n\
    \                ret = ret ++ List(s)\n            }\n        }\n        return\
    \ ret\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028443
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Handle empty\
    \ list case\n        if (strings.isEmpty) {\n            return List[String]()\n\
    \        }\n        // Recursively filter list\n        var subList = filterBySubstring(strings.tail,\
    \ substring)\n        // If current list element contains the substring, add it\
    \ to the sublist\n        if (strings.head.contains(substring)) {\n          \
    \  subList = subList :+ strings.head\n        }\n        // Return sublist\n \
    \       return subList\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpisdkpyhh.scala:26)\n\tat Problem.main(tmpisdkpyhh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        for {\n    \
    \        string <- strings\n            if string.contains(substring)\n      \
    \  } yield string\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(((s)\
    \ => s.contains(substring)))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n      val set1 = Set[String]()\n\
    \      val set2 = Set[String]()\n      var newlist = List[String]()\n      for\
    \ (i <- strings) {\n          val bool = i.contains(substring)\n          if (bool)\
    \ set1 += i\n          else set2 += i\n      }\n      newlist = set1.toList\n\
    \      return newlist\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbdq781bp.scala:23)\n\tat Problem.main(tmpbdq781bp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        def filterBySubstringHelper(strings\
    \ : List[String], substring : String, newList : List[String]) : List[String] =\
    \ {\n            strings match {\n                case List() => newList\n   \
    \             case head::tail => if (head.contains(substring)) filterBySubstringHelper(tail,\
    \ substring, newList :+ head) else filterBySubstringHelper(tail, substring, newList)\n\
    \            }\n        }\n        filterBySubstringHelper(strings, substring,\
    \ List[String]())\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Get one that\
    \ contains substring\n        def getContain(s : String) : Boolean = {\n     \
    \       if (s.contains(substring)) {\n                true\n            } else\
    \ {\n                false\n            }\n        }\n        // Filtering\n \
    \       return strings.filter(getContain)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.length\
    \ == 0) {\n            return List[String]()\n        }\n        if (strings.head.contains(substring))\
    \ {\n            return strings.head :: filterBySubstring(strings.tail, substring)\n\
    \        }\n        return filterBySubstring(strings.tail, substring)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Fill in here\n\
    \        return null\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.filterBySubstring(scala.collection.immutable.List,\
    \ String)\" is null\n\tat Problem$.main(tmprcidynns.scala:14)\n\tat Problem.main(tmprcidynns.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((s\
    \ : String) => s.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((s\
    \ : String) => s.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(str\
    \ => str.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        //TODO\n   \
    \     return List[String]()\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb8_0tlfp.scala:15)\n\tat Problem.main(tmpb8_0tlfp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        for (string\
    \ <- strings if string.contains(substring)) yield string\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((str\
    \ : String) => (str.contains(substring)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var res = List[String]()\n\
    \        for (string <- strings) {\n            if (string.contains(substring))\
    \ res = string :: res\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcl7geyqq.scala:19)\n\tat Problem.main(tmpcl7geyqq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // CHECKME:\
    \ May be implemented more efficiently?\n        var list = List[String]()\n  \
    \      for (str <- strings) {\n            if (str.contains(substring)) {\n  \
    \              list = str :: list\n            }\n        }\n        return list\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjeziic5e.scala:22)\n\tat Problem.main(tmpjeziic5e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // YOUR CODE\
    \ HERE\n        strings.filter(x => x.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val result =\
    \ (List[String]() /: strings) ((filteredStrings, string) => {\n            if\
    \ (string.contains(substring)) {\n                filteredStrings :+ string\n\
    \            } else {\n                filteredStrings\n            }\n      \
    \  })\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // >>> filterBySubstringRecurse((List[String](\"\
    abc\", \"bacd\", \"cde\", \"array\")), (\"a\"), (List[String]()))\n        //\
    \ (List[String](\"abc\", \"bacd\", \"array\"))\n        def filterBySubstringRecurse(strings\
    \ : List[String], substring : String, acc : List[String]) : List[String] = {\n\
    \            if (strings.isEmpty)\n                acc\n            else {\n \
    \               if (strings.head.contains(substring))\n                    filterBySubstringRecurse(strings.tail,\
    \ substring, acc :+ strings.head)\n                else\n                    filterBySubstringRecurse(strings.tail,\
    \ substring, acc)\n            }\n        }\n        filterBySubstringRecurse(strings,\
    \ substring, List[String]())\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val matchingStrings\
    \ = new ListBuffer[String]()\n        for (string <- strings) {\n            if\
    \ (string.contains(substring)) matchingStrings += string\n        }\n        return\
    \ matchingStrings.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028460
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter((x)\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028460
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((str\
    \ : String) => str.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028460
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((str\
    \ : String) => str.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028460
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        def iter(strings\
    \ : List[String], acc : List[String]) : List[String] = {\n            if (strings.length\
    \ == 0) {\n                acc\n            } else {\n                val str\
    \ = strings.head\n                if (str.contains(substring)) {\n           \
    \         iter(strings.tail, acc :+ str)\n                } else {\n         \
    \           iter(strings.tail, acc)\n                }\n            }\n      \
    \  }\n        iter(strings, List[String]())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Assume the\
    \ default case is that the given substring is not present in the input list of\
    \ strings\n        // Return the empty list\n        var output : List[String]\
    \ = List[String]()\n        // Go through the list of input strings\n        for\
    \ (string <- strings) {\n            // If the given substring is present in the\
    \ string, add the string to the output list\n            if (string.contains(substring))\
    \ {\n                output = output :+ string\n            }\n        }\n   \
    \     // Return the output list\n        return output\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var newList\
    \ = List[String]()\n        for (i <- 0 until strings.length) {\n            if\
    \ (strings(i).contains(substring)) {\n                newList = newList :+ strings(i)\n\
    \            }\n        }\n        return newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val trimmed\
    \ = strings.map(_.trim)\n        trimmed.filter(s => s.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        (for (x <- strings\
    \ if x.contains(substring)) yield x).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028460
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter((s)\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.isEmpty)\
    \ List[String]()\n        else if (strings.head.contains(substring)) strings.head\
    \ :: filterBySubstring(strings.tail, substring)\n        else filterBySubstring(strings.tail,\
    \ substring)\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter((string\
    \ : String) => string.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var found =\
    \ List[String]()\n        for (s <- strings) {\n            if (s.contains(substring))\
    \ {\n                found = s :: found\n            }\n        }\n        found\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeaaevm4m.scala:21)\n\tat Problem.main(tmpeaaevm4m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var matches\
    \ : List[String] = List[String]()\n        for (i <- 0 until strings.length) {\n\
    \            if (strings(i).contains(substring)) matches = matches :+ strings(i)\n\
    \        }\n        return matches\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val positive\
    \ = new ListBuffer[String]\n        for (string <- strings) {\n            if\
    \ (string.contains(substring)) {\n                positive += string\n       \
    \     }\n        }\n        return positive.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        for (s <- strings;\
    \ if s.contains(substring)) yield s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter((string)\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(\
    \ (s : String) => s.contains(substring) )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        (strings.filter((s\
    \ : String) => s.contains(substring)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.isEmpty)\
    \ {\n            return List[String]()\n        }\n        else {\n          \
    \  if (strings.head.contains(substring)) {\n                return List(strings.head)\
    \ ::: filterBySubstring(strings.tail, substring)\n            }\n            else\
    \ {\n                return filterBySubstring(strings.tail, substring)\n     \
    \       }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n      strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Create list\
    \ of matches\n        var matches = List[String]()\n        // Iterate over strings\n\
    \        for (string <- strings) {\n            // If string contains substring,\
    \ add to list of matches\n            if (string.contains(substring)) matches\
    \ = string :: matches\n        }\n        // Return list of matches\n        return\
    \ matches\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp12pwny9w.scala:23)\n\tat Problem.main(tmp12pwny9w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var filtered\
    \ = List[String]()\n        for (str <- strings) {\n            if (str.contains(substring))\
    \ {\n                filtered = str :: filtered\n            }\n        }\n  \
    \      filtered\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpux7kkjgk.scala:21)\n\tat Problem.main(tmpux7kkjgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((s\
    \ : String) => s.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((x\
    \ : String) => x.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((x)\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.isEmpty)\
    \ {\n            List[String]()\n        } else {\n            val first = strings.head\n\
    \            val rest = strings.tail\n            if (first.contains(substring))\
    \ {\n                List(first) ++ filterBySubstring(rest, substring)\n     \
    \       } else {\n                filterBySubstring(rest, substring)\n       \
    \     }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(str\
    \ => str.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List()\n        for (str <- strings) {\n            if (str.contains(substring))\
    \ {\n                result = str :: result\n            }\n        }\n      \
    \  return result\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8jg1a_3r.scala:21)\n\tat Problem.main(tmp8jg1a_3r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((x)\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val processedStrings\
    \ = strings.foldLeft(List[String]())((l, e) => if (e.contains(substring)) l :+\
    \ e else l)\n        processedStrings\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List[String]()\n        for (word <- strings) {\n           \
    \ if (word.contains(substring)) {\n                result = word :: result\n \
    \           }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv33ldcua.scala:21)\n\tat Problem.main(tmpv33ldcua.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // strings.filter(s\
    \ => s.contains(substring))\n        strings.filter(_.contains(substring))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var newList\
    \ = new ListBuffer[String]()\n        for (currStr <- strings) {\n           \
    \ if (currStr.contains(substring)) newList += currStr\n        }\n        return\
    \ newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        def filterSubstring(target\
    \ : String) : Boolean = {\n            var result = false\n            for (index\
    \ <- 0 until target.length) {\n                if (target.substring(index, index\
    \ + 1) == substring) {\n                    result = true\n                }\n\
    \            }\n            result\n        }\n        strings.filter(x => filterSubstring(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8fgbfq26.scala:23)\n\tat Problem.main(tmp8fgbfq26.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter((str\
    \ : String) => str.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        def filter(strings\
    \ : List[String], substring : String, accumulator : List[String]) : List[String]\
    \ = {\n            if (strings.length == 0) accumulator\n            else if (strings.head.contains(substring))\
    \ filter(strings.tail, substring, accumulator :+ strings.head)\n            else\
    \ filter(strings.tail, substring, accumulator)\n        }\n        filter(strings,\
    \ substring, List[String]())\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var ret = List[String]()\n\
    \        for (i <- 0 until strings.length) {\n            if (strings(i).contains(substring))\
    \ {\n                ret = ret :+ strings(i)\n            }\n        }\n     \
    \   return ret\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List[String]()\n        for (s <- strings) {\n            if\
    \ (s.contains(substring)) {\n                result = s :: result\n          \
    \  }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeqcdx4ah.scala:21)\n\tat Problem.main(tmpeqcdx4ah.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((s\
    \ : String) => s.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(word\
    \ => word.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.isEmpty)\
    \ return List[String]()\n        if (strings.head.contains(substring)) List(strings.head)\
    \ ::: filterBySubstring(strings.tail, substring)\n        else filterBySubstring(strings.tail,\
    \ substring)\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List()\n        for (x <- strings) {\n            if (x.contains(substring))\
    \ {\n                result = x :: result\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1b8x_v8k.scala:21)\n\tat Problem.main(tmp1b8x_v8k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n      return strings.filter(str\
    \ => str.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        for {\n    \
    \        s <- strings\n            if s.contains(substring)\n        } yield s\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((s\
    \ : String) => s.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val filterResult\
    \ = strings.filter(string => string.contains(substring))\n        filterResult\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(e\
    \ => e.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return (strings.filter((x\
    \ : String) => x.contains(substring)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n      strings.filter(str\
    \ => str.indexOf(substring) != -1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var ans = List[String]()\n\
    \        for (i <- 0 until strings.length) {\n            if (strings(i).contains(substring))\
    \ {\n                ans = ans :+ strings(i)\n            }\n        }\n     \
    \   return ans\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var filteredStrings\
    \ = List[String]()\n        for (string <- strings) {\n            if (string.contains(substring))\
    \ {\n                filteredStrings = string :: filteredStrings\n           \
    \ }\n        }\n        return filteredStrings\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp56hsjtm4.scala:21)\n\tat Problem.main(tmp56hsjtm4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        for (string\
    \ <- strings; if (string.contains(substring))) yield string\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List()\n        for (s <- strings) {\n            if (s.contains(substring))\
    \ {\n                result = result :+ s\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.isEmpty)\
    \ strings\n        else {\n            val head = strings.head\n            val\
    \ result = ListBuffer[String]()\n            if (head.contains(substring)) result\
    \ += head\n            if (strings.tail.isEmpty) result.toList\n            else\
    \ result.toList ++ filterBySubstring(strings.tail, substring)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List()\n        for (str <- strings) if (str.contains(substring))\
    \ result = result ++ List(str)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter((string)\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(element\
    \ => element.contains(substring))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(str\
    \ => (str.indexOf(substring) != -1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List[String]()\n        for (i <- 0 until strings.length) {\n\
    \            if (strings(i).contains(substring)) {\n                result = strings(i)\
    \ :: result\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkskhr8og.scala:21)\n\tat Problem.main(tmpkskhr8og.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        for (s <- strings;\
    \ if s.contains(substring)) yield s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => (s.contains(substring)))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n      strings.filter((s\
    \ : String) => s.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n      if (strings.isEmpty)\
    \ strings\n      else {\n        val left = strings.head\n        val right =\
    \ strings.tail\n        if (left.contains(substring)) left :: filterBySubstring(right,\
    \ substring)\n        else filterBySubstring(right, substring)\n      }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // TODO\n  \
    \      return List()\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_4eq2juj.scala:15)\n\tat Problem.main(tmp_4eq2juj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((string\
    \ : String) => string.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val N = strings.length\n\
    \        var ret = List[String]()\n        for (i <- 0 until N) {\n          \
    \  val string = strings(i)\n            if (string.contains(substring)) {\n  \
    \              ret = string :: ret\n            }\n        }\n        return ret\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg31l584h.scala:23)\n\tat Problem.main(tmpg31l584h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List[String]()\n        for (s <- strings) {\n            if\
    \ (s.contains(substring)) {\n                result = s :: result\n          \
    \  }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeqcdx4ah.scala:21)\n\tat Problem.main(tmpeqcdx4ah.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val result :\
    \ ListBuffer[String] = ListBuffer()\n        for (str <- strings) {\n        \
    \    if (str.contains(substring)) {\n                result += str\n         \
    \   }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((s\
    \ : String) => (s.contains(substring)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(word\
    \ => word.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.isEmpty)\
    \ List[String]()\n        else if (strings.head.contains(substring)) List(strings.head)\
    \ ::: filterBySubstring(strings.tail, substring)\n        else filterBySubstring(strings.tail,\
    \ substring)\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        def helper(strings\
    \ : List[String], filtered : List[String]) : List[String] = {\n            if\
    \ (strings.isEmpty) return filtered\n            if (strings.head.contains(substring))\
    \ helper(strings.tail, strings.head :: filtered)\n            else helper(strings.tail,\
    \ filtered)\n        }\n        helper(strings, List[String]())\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgtz8cx0w.scala:20)\n\tat Problem.main(tmpgtz8cx0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(e\
    \ => e.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(str\
    \ => str.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(str\
    \ => str.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(element\
    \ => element.contains(substring))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028499
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Filter the\
    \ input array\n        var result = strings.filter((string : String) => {\n  \
    \          // Check if it contains substring\n            string.contains(substring)\n\
    \        })\n        // Return the result\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028499
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n      var result : List[String]\
    \ = Nil\n      for (string <- strings) {\n        if (string.contains(substring))\
    \ {\n          result = result :+ string\n        }\n      }\n      return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028499
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        def filterBySubstringRecursive(strings\
    \ : List[String], substring : String, acc : List[String]) : List[String] = {\n\
    \            if (strings.isEmpty) acc\n            else if (strings.head.contains(substring))\
    \ filterBySubstringRecursive(strings.tail, substring, acc :+ strings.head)\n \
    \           else filterBySubstringRecursive(strings.tail, substring, acc)\n  \
    \      }\n        filterBySubstringRecursive(strings, substring, List[String]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.isEmpty)\
    \ {\n            return strings\n        }\n        if (strings.head.contains(substring))\
    \ {\n            return List(strings.head) ::: filterBySubstring(strings.tail,\
    \ substring)\n        }\n        return filterBySubstring(strings.tail, substring)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = Nil\n        for (str <- strings) {\n            if (str.contains(substring))\
    \ {\n                result = str :: result\n            }\n        }\n      \
    \  return result\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxw40n3fh.scala:21)\n\tat Problem.main(tmpxw40n3fh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((s\
    \ : String) => s.contains(substring))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List[String]()\n        for (string <- strings) {\n         \
    \   if (string.contains(substring)) {\n                result = result :+ string\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List()\n        for (s <- strings) {\n            if (s.contains(substring))\
    \ result = s :: result\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0gwyt2g.scala:19)\n\tat Problem.main(tmpw0gwyt2g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.length\
    \ == 0) {\n            return List[String]()\n        }\n        val filtered\
    \ = filterBySubstring(strings.tail, substring)\n        if (strings.head.contains(substring))\
    \ {\n            strings.head :: filtered\n        } else {\n            filtered\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(p\
    \ => p.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = Nil\n        for (s <- strings) {\n            if (s.contains(substring))\
    \ {\n                result = s :: result\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsrzj_z4k.scala:21)\n\tat Problem.main(tmpsrzj_z4k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Filter function\n\
    \        def filter(input : List[String], substring : String) : List[String] =\
    \ {\n            if (input.isEmpty) {\n                return input\n        \
    \    } else {\n                // Check if current string contains given substring\n\
    \                if (input.head.contains(substring)) {\n                    return\
    \ List(input.head) ::: filter(input.tail, substring)\n                } else {\n\
    \                    return filter(input.tail, substring)\n                }\n\
    \            }\n        }\n        return filter(strings, substring)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var filtered\
    \ = List[String]()\n        for (str <- strings) {\n            if (str.contains(substring))\
    \ {\n                filtered = filtered ++ List(str)\n            }\n       \
    \ }\n        return filtered\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List[String]()\n        for (str <- strings) {\n            if\
    \ (str.contains(substring)) {\n                result = result :+ str\n      \
    \      }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(x\
    \ => x.indexOf(substring) != -1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.isEmpty)\
    \ {\n            return List[String]()\n        }\n        var output : List[String]\
    \ = List[String]()\n        for (s <- strings) {\n            if (s.contains(substring))\
    \ {\n                output = output :+ s\n            }\n        }\n        return\
    \ output\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var s = substring\n\
    \        var list = strings\n        list.filter(list => list.contains(s))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List[String]()\n        for (str <- strings) {\n            if\
    \ (str.contains(substring)) {\n                result = str :: result\n      \
    \      }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe9_7j6gl.scala:21)\n\tat Problem.main(tmpe9_7j6gl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var newList\
    \ = List[String]()\n        strings.foreach(x => if (x.contains(substring)) newList\
    \ = newList :+ x)\n        return newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // This function\
    \ should be simple and short, I think it's unnecessary to\n        // create a\
    \ new function like \"filterBySubstring\" to filter the list\n        // because\
    \ there's a built-in funciton to filter a list - filter(p: (A) => Boolean): List[A]\n\
    \        // This function should return all elements of this list which satisfy\
    \ a predicate.\n        // So I modified the function to a simplified version.\n\
    \        strings.filter(word => word.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((string\
    \ : String) => { string.contains(substring) })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter((str)\
    \ => str.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(\n\
    \            string => {\n                string.indexOf(substring) != -1\n  \
    \          }\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List()\n        for (string <- strings) {\n            if (string.contains(substring))\
    \ {\n                result = string :: result\n            }\n        }\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7okelm3c.scala:21)\n\tat Problem.main(tmp7okelm3c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // >>> strings.filter(str\
    \ => { str.contains(substring) })\n        // (List[String](\"abc\", \"bacd\"\
    , \"array\"))\n        strings.filter(str => { str.contains(substring) })\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // >>> strings(0)\n\
    \        // \"abc\"\n        // >>> strings(1)\n        // \"bacd\"\n        //\
    \ >>> strings(2)\n        // \"cde\"\n        // >>> strings(3)\n        // \"\
    array\"\n        val filteredList = strings.filter(x => x.contains(substring))\n\
    \        return filteredList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // TODO: Implement\
    \ me\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.filterBySubstring(scala.collection.immutable.List,\
    \ String)\" is null\n\tat Problem$.main(tmpwhzgyz92.scala:14)\n\tat Problem.main(tmpwhzgyz92.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List[String]()\n        for (i <- 0 until strings.length) {\n\
    \            if (strings(i).contains(substring)) {\n                result = result\
    \ :+ strings(i)\n            }\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List()\n        for (str <- strings) {\n            if (str.contains(substring))\
    \ {\n                result = str :: result\n            }\n        }\n      \
    \  return result\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8jg1a_3r.scala:21)\n\tat Problem.main(tmp8jg1a_3r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var filtered\
    \ : List[String] = List[String]()\n        for (string <- strings) {\n       \
    \     if (string.contains(substring)) {\n                filtered = filtered :+\
    \ string\n            }\n        }\n        return filtered\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List[String]()\n        for (index <- 0 until strings.length)\
    \ {\n            if (strings(index).contains(substring)) {\n                result\
    \ = strings(index) :: result\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpus7ucw_m.scala:21)\n\tat Problem.main(tmpus7ucw_m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter((s\
    \ : String) => (s.contains(substring)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var r = List[String]()\n\
    \        for (s <- strings) {\n            if (s.contains(substring)) {\n    \
    \            r = s :: r\n            }\n        }\n        return r\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47nrqt5o.scala:21)\n\tat Problem.main(tmp47nrqt5o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val filtered\
    \ : ListBuffer[String] = ListBuffer.empty[String]\n        for (s <- strings)\
    \ {\n            if (s.contains(substring)) filtered += s\n        }\n       \
    \ filtered.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        if (strings.isEmpty)\
    \ return strings\n        val newStrings = if (strings.head.contains(substring))\
    \ List(strings.head) else List[String]()\n        return newStrings ::: filterBySubstring(strings.tail,\
    \ substring)\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var filtered\
    \ : List[String] = Nil\n        for (s <- strings) if (s.contains(substring))\
    \ filtered = s :: filtered\n        filtered.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(_.contains(substring))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // If List is\
    \ empty, return it\n        if (strings.length == 0)\n            return strings\n\
    \        // Check if string head is equal to given string\n        else if (strings.head.contains(substring))\n\
    \            return List(strings.head) ::: filterBySubstring(strings.tail, substring)\n\
    \        // Go to the next string\n        else\n            return filterBySubstring(strings.tail,\
    \ substring)\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var result :\
    \ List[String] = List[String]()\n        strings.foreach((s : String) => if (s.contains(substring))\
    \ result = s :: result)\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdktnre57.scala:17)\n\tat Problem.main(tmpdktnre57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val filt = strings.filter(s\
    \ => s.contains(substring))\n        filt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        var output :\
    \ List[String] = List[String]()\n        for (string <- strings) {\n         \
    \   if (string.contains(substring)) {\n                output = string :: output\n\
    \            }\n        }\n        return output\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq719a22m.scala:21)\n\tat Problem.main(tmpq719a22m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val index =\
    \ strings.indexWhere(! _.contains(substring))\n        if (index == -1) strings\n\
    \        else filterBySubstring(strings.take(index) ++ strings.drop(index + 1),\
    \ substring)\n    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Handle empty\
    \ list\n        if (strings.length == 0) {\n            return List[String]()\n\
    \        }\n        // Recursive implementation\n        val head = strings.head\n\
    \        val tail = strings.tail\n        if (head.contains(substring)) {\n  \
    \          return head :: filterBySubstring(tail, substring)\n        }\n    \
    \    else {\n            return filterBySubstring(tail, substring)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // filter: Filter\
    \ a list of objects satisfying given predicate\n        // >>> filter(List[Int](1,2,3,4,5),\
    \ (x: Int) => (x % 2 == 0))\n        // (List[Int](2, 4))\n        def filter[T](input\
    \ : List[T], predicate : T => Boolean) : List[T] = {\n            if (input.isEmpty)\
    \ {\n                return List[T]()\n            } else {\n                val\
    \ head = input.head\n                val tail = input.tail\n                if\
    \ (predicate(head)) {\n                    return head :: filter(tail, predicate)\n\
    \                } else {\n                    return filter(tail, predicate)\n\
    \                }\n            }\n        }\n        return filter(strings, (string\
    \ : String) => (string.contains(substring)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(x\
    \ => x.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        val stringsFiltered\
    \ = ListBuffer[String]()\n        for (string <- strings) if (string.contains(substring))\
    \ stringsFiltered += string\n        stringsFiltered.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        // Base case:\
    \ Empty list returns empty list\n        if (strings.isEmpty) {\n            return\
    \ List[String]()\n        }\n        // Recursive case: Recursively call on tail,\
    \ prepending head if head contains substring\n        else {\n            val\
    \ result = filterBySubstring(strings.tail, substring)\n            if (strings.head.contains(substring))\
    \ {\n                return strings.head :: result\n            }\n          \
    \  else {\n                return result\n            }\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        return strings.filter(string\
    \ => string.contains(substring))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        strings.filter(s\
    \ => s.contains(substring))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
    \ : List[String], substring : String) : List[String] = {\n        for (s <- strings;\
    \ if s.contains(substring)) yield s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028461
