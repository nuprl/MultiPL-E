name: HumanEval_163_generate_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two positive integers a and b, return the even digits between a\n\
  \    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
  \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    //\
  \ >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong,\
  \ 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
  \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
  \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n  \
  \  assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
  \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        if (a > b) return generateIntegers(b, a)\n        if (a % 2\
    \ == 1) return generateIntegers(a + 1, b)\n        if (a > b) return Nil\n   \
    \     a :: generateIntegers(a + 2, b)", "        if (a > b)\n            generateIntegers(b,\
    \ a)\n        else if (a % 2 != 0)\n            generateIntegers(a + 1, b)\n \
    \       else if (b % 2 != 0)\n            generateIntegers(a, b - 1)\n       \
    \ else\n            List.range(a.toInt, b.toInt + 1, 2).map(_.toLong)", "    \
    \    var low = min(a, b)\n        var high = max(a, b)\n        var result = List[Long]()\n\
    \        for (i <- low to high) {\n            if (i % 2 == 0) result = result\
    \ :+ i\n        }\n        return result", "        var min = min(a, b)\n    \
    \    var max = max(a, b)\n        var temp : List[Long] = List[Long]()\n     \
    \   while (min <= max) {\n            if (min % 2 == 0) temp = temp :+ min\n \
    \           min += 1\n        }\n        return temp", "        val min = min(a,\
    \ b)\n        val max = max(a, b)\n        val buff = ListBuffer[Long]()\n   \
    \     for (i <- min to max) {\n            if (i % 2 == 0) buff += i\n       \
    \ }\n        buff.toList", "        var (start, stop) = if (a > b) (b, a) else\
    \ (a, b)\n        var result = List[Long]()\n        if (start % 2 == 1) start\
    \ += 1\n        while (start <= stop) {\n            result = result :+ start\n\
    \            start += 2\n        }\n        result", "        if (a > b) generateIntegers(b,\
    \ a)\n        else if (a % 2 == 0) (a to b by 2).toList\n        else (a + 1 to\
    \ b by 2).toList", "        val min = min(a, b)\n        val max = max(a, b)\n\
    \        val range = min to max\n        range.filter(x => x % 2 == 0).toList",
  "        var acc = List[Long]()\n        for (i <- a to b) {\n            if (i\
    \ % 2 == 0) acc = i :: acc\n        }\n        acc.reverse", "        var l =\
    \ List[Long]()\n        val lo = if (a > b) b else a\n        val hi = if (a >\
    \ b) a else b\n        for (i <- lo to hi if i % 2 == 0) l = i :: l\n        l.reverse",
  '        return (a to b).filter(x => x % 2 == 0).toList', "        val x = a min\
    \ b\n        val y = a max b\n        var list : List[Long] = List()\n       \
    \ for (i <- x to y if i % 2 == 0) list = list :+ i\n        list", "        var\
    \ list = List[Long]()\n        for (i <- a to b) {\n            if (i % 2 == 0)\
    \ list = list :+ i\n        }\n        list", "        val min = min(a, b)\n \
    \       val max = max(a, b)\n        val result = new ListBuffer[Long]\n     \
    \   for (i <- min to max) {\n            if (i % 2 == 0) result += i\n       \
    \ }\n        result.toList", "        // Create a range of integers from a to\
    \ b\n        // Get the even integers in the range\n        // Return the list\
    \ of even integers\n        val r = (a to b).toList\n        var evens = List[Long]()\n\
    \        for (i <- r) {\n            if (i % 2 == 0) {\n                evens\
    \ = evens :+ i\n            }\n        }\n        evens", "        if (a > b)\
    \ return generateIntegers(b, a)\n        var lst = List[Long]()\n        for (i\
    \ <- a to b) {\n            if (i % 2 == 0) lst = lst :+ i\n        }\n      \
    \  return lst", "        val s = ArrayBuffer[Long]()\n        var min = min(a,\
    \ b)\n        var max = max(a, b)\n        if (min % 2 != 0) min += 1\n      \
    \  if (max % 2 != 0) max -= 1\n        for (i <- min to max by 2) s += i\n   \
    \     s.toList", "        var list : List[Long] = List()\n        val min = min(a,\
    \ b)\n        val max = max(a, b)\n        for (i <- min to max if i % 2 == 0)\
    \ {\n            list = list :+ i\n        }\n        list", "        // Write\
    \ your code here\n        var numbers : List[Long] = List()\n        if (a > b)\
    \ {\n            for (i <- b to a) {\n                if (i % 2 == 0) {\n    \
    \                numbers = numbers :+ i\n                }\n            }\n  \
    \      } else {\n            for (i <- a to b) {\n                if (i % 2 ==\
    \ 0) {\n                    numbers = numbers :+ i\n                }\n      \
    \      }\n        }\n        numbers", "        if (a > b) {\n            return\
    \ generateIntegers(b, a)\n        }\n        if (a % 2 == 1) {\n            return\
    \ generateIntegers(a + 1, b)\n        }\n        if (a == b) {\n            return\
    \ List(a)\n        }\n        a :: generateIntegers(a + 2, b)", "        var min\
    \ = min(a, b)\n        var max = max(a, b)\n        if (min % 2 != 0) {\n    \
    \        min += 1\n        }\n        var result = new ListBuffer[Long]()\n  \
    \      for (i <- min to max by 2) {\n            result += i\n        }\n    \
    \    return result.toList", "        var r = new ListBuffer[Long]\n        for\
    \ (i <- min(a, b) to max(a, b)) if (i % 2 == 0) r += i\n        r.toList", '        (a
    to b).filter(_ % 2 == 0).toList', "        var range = List[Long]()\n        if\
    \ (a > b) {\n            range = generateRange(b, a, List[Long]())\n        }\
    \ else {\n            range = generateRange(a, b, List[Long]())\n        }\n \
    \       range.filter(num => num % 2 == 0)", "        var res = ArrayBuffer[Long]()\n\
    \        var x = min(a, b)\n        while (x <= max(a, b)) {\n            if (x\
    \ % 2 == 0) res += x\n            x += 1\n        }\n        res.toList", "  \
    \      var result = List[Long]()\n        for (i <- min(a, b) to max(a, b)) {\n\
    \            if (i % 2 == 0) result = result :+ i\n        }\n        result",
  "      val lower = if (a < b) a else b\n      val upper = if (a > b) a else b\n\
    \      var list = List[Long]()\n      for (i <- lower to upper) {\n        if\
    \ (i % 2 == 0) list = list :+ i\n      }\n      list", '        (a to b).filter(_
    % 2 == 0).toList', "        var res = new ListBuffer[Long]\n        var (small,\
    \ big) = if (a < b) (a, b) else (b, a)\n        while (small <= big) {\n     \
    \       if (small % 2 == 0) {\n                res += small\n            }\n \
    \           small += 1\n        }\n        res.toList", "        val ai = a.toInt\n\
    \        val bi = b.toInt\n        val limit = min(ai, bi) + 1\n        var ans\
    \ = List[Long]()\n        for (i <- ai to limit) {\n            if (i % 2 == 0)\
    \ ans = ans :+ i.toLong\n        }\n        for (i <- limit to bi) {\n       \
    \     if (i % 2 == 0) ans = ans :+ i.toLong\n        }\n        ans", "      \
    \  var evens = List[Long]()\n        var i = min(a, b)\n        var j = max(a,\
    \ b)\n        while (i <= j) {\n            if (i % 2 == 0) evens = evens :+ i\n\
    \            i += 1\n        }\n        evens", "        // Generate integer sequence\
    \ from a to b.\n        var list = List[Long]()\n        if (a <= b) {\n     \
    \       for (n <- a to b) list = list :+ n\n        } else {\n            for\
    \ (n <- a to b by -1) list = list :+ n\n        }\n        // Return even integer\
    \ sequence.\n        return list.filter(_ % 2 == 0)", "        var result = List[Long]()\n\
    \        var start = if (a % 2 == 0) a else a + 1\n        var end = if (b % 2\
    \ == 0) b else b - 1\n        for (i <- start to end by 2) result = result :+\
    \ i\n        result", "        var result = List[Long]()\n        var i = a\n\
    \        if (a > b) {\n            i = b\n            while (i <= a) {\n     \
    \           if (i % 2 == 0) result ::= i\n                i += 1\n           \
    \ }\n        } else {\n            while (i <= b) {\n                if (i % 2\
    \ == 0) result ::= i\n                i += 1\n            }\n        }\n     \
    \   result.reverse", "        var result = List[Long]()\n        val step = if\
    \ (a > b) -1 else 1\n        var i = a\n        while (i != b) {\n           \
    \ if (i % 2 == 0) result = result :+ i\n            i += step\n        }\n   \
    \     if (b % 2 == 0) result = result :+ b\n        result", "        val evens\
    \ = ListBuffer[Long]()\n        if (a <= b) {\n            for (i <- a to b) if\
    \ (i % 2 == 0) evens += i\n        } else {\n            for (i <- b to a) if\
    \ (i % 2 == 0) evens += i\n        }\n        evens.toList", '        (a to b).filter(x
    => x % 2 == 0).toList', "        val min = min(a, b)\n        val max = max(a,\
    \ b)\n        var result = List[Long]()\n        for (i <- min to max) {\n   \
    \         if (i % 2 == 0) result = result :+ i\n        }\n        result", " \
    \       var res = List[Long]()\n        if (a == b) {\n            if (a % 2 ==\
    \ 0) {\n                res ::= a\n            }\n        } else {\n         \
    \   if (a > b) {\n                for (i <- (b to a).toList) {\n             \
    \       if (i % 2 == 0) {\n                        res ::= i\n               \
    \     }\n                }\n            } else {\n                for (i <- (a\
    \ to b).toList) {\n                    if (i % 2 == 0) {\n                   \
    \     res ::= i\n                    }\n                }\n            }\n   \
    \     }\n        res.sorted", "        val r = Range.inclusive(a, b).toList\n\
    \        for (x <- r if (x % 2 == 0)) yield x", "        if (a > b) {\n      \
    \      generateIntegers(b, a)\n        } else {\n            var result = List[Long]()\n\
    \            for (i <- a to b) {\n                if (i % 2 == 0) {\n        \
    \            result = result :+ i\n                }\n            }\n        \
    \    result\n        }", "        // Your code here\n        val low = min(a,\
    \ b)\n        val high = max(a, b)\n        if (low % 2 == 1) return List[Long]()\n\
    \        var ans = new ListBuffer[Long]()\n        ans += low\n        while (low\
    \ < high) {\n            low += 2\n            ans += low\n        }\n       \
    \ ans.toList", "        var result = List[Long]()\n        for (i <- a to b) {\n\
    \            if (i % 2 == 0) result = result :+ i\n        }\n        result",
  "        var result = List[Long]()\n        for (n <- a to b) if (n % 2 == 0) result\
    \ = result :+ n\n        return result", "        val min = a min b\n        val\
    \ max = a max b\n        (for (i <- min.toInt to max.toInt if i % 2 == 0) yield\
    \ i.toLong).toList", '        return List[Long]()', "        val min = min(a,\
    \ b)\n        val max = max(a, b)\n        var list = List[Long]()\n        for\
    \ (i <- min to max) {\n            if (i % 2 == 0) {\n                list = list\
    \ :+ i\n            }\n        }\n        list", "        val (start, end) = if\
    \ (a > b) (b, a) else (a, b)\n        val ls = (for (i <- start to end if i %\
    \ 2 == 0) yield i).toList\n        ls", "        var l = List[Long]()\n      \
    \  if (a > b) {\n            for (i <- b to a) {\n                if (i % 2 ==\
    \ 0) l = i :: l\n            }\n        } else {\n            for (i <- a to b)\
    \ {\n                if (i % 2 == 0) l = i :: l\n            }\n        }\n  \
    \      return l", "        val min = min(a, b)\n        val max = max(a, b)\n\
    \        (min to max).filter(i => i % 2 == 0).toList", "        val sorted = List(a,\
    \ b).sorted\n        (sorted(0) to sorted(1)).filter(x => x % 2 == 0).toList",
  "        if (a > b) generateIntegers(b, a)\n        else {\n            (a to b).toList.filter(_\
    \ % 2 == 0)\n        }", "        var l = List[Long]()\n        if (a > b) {\n\
    \            for (x <- b to a by 2)\n                l = x :: l\n        } else\
    \ {\n            for (x <- a to b by 2)\n                l = x :: l\n        }\n\
    \        return l", "        // Given two positive integers a and b, return the\
    \ even digits between a\n        // and b, in ascending order.\n        def generate(a\
    \ : Long, b : Long) : List[Long] = {\n            var c = if (a < b) a else b\n\
    \            var d = if (a < b) b else a\n            val result = ListBuffer[Long]()\n\
    \            while (c <= d) {\n                if (c % 2 == 0) result += c\n \
    \               c += 1\n            }\n            result.toList\n        }\n\
    \        val result = generate(a, b)\n        result.sorted", "        def generate(from\
    \ : Long, to : Long, all : List[Long]) : List[Long] = {\n            if (from\
    \ == to) all.reverse\n            else {\n                val next = if (from\
    \ % 2 == 0) from + 2 else from + 1\n                generate(next, to, next ::\
    \ all)\n            }\n        }\n        generate(a, b, List())", "        var\
    \ c : Long = a\n        var d : Long = b\n        if (a > b) {\n            c\
    \ = b\n            d = a\n        }\n        var r : List[Long] = Nil\n      \
    \  while (c <= d) {\n            if (c % 2 == 0) r = c :: r\n            c +=\
    \ 1\n        }\n        r.reverse", "        var list = new ListBuffer[Long]()\n\
    \        for (i <- min(a, b) to max(a, b)) {\n            if (i % 2 == 0) list\
    \ += i\n        }\n        list.toList", "        var lowerLimit = min(a, b)\n\
    \        var upperLimit = max(a, b)\n        var result : List[Long] = Nil\n \
    \       while (lowerLimit <= upperLimit) {\n            if (lowerLimit % 2 ==\
    \ 0) result = lowerLimit :: result\n            lowerLimit += 1\n        }\n \
    \       result.reverse", "        var ret = List[Long]()\n        var x = min(a,\
    \ b)\n        while (x <= max(a, b)) {\n            if (x % 2 == 0) ret = ret\
    \ ++ List(x)\n            x += 1\n        }\n        return ret", "        val\
    \ lo = min(a, b)\n        val hi = max(a, b)\n        var arr = List[Long]()\n\
    \        for (i <- lo to hi if i % 2 == 0) arr ::= i\n        arr.reverse", " \
    \       var evens = List[Long]()\n        val (min, max) = if (a < b) (a, b) else\
    \ (b, a)\n        for (i <- min to max) {\n            if (i % 2 == 0) evens =\
    \ evens :+ i\n        }\n        evens", '        return (if (a <= b) Range.Long(a,
    b + 1, 2).toList else Range.Long(b, a + 1, 2).toList).reverse', "        if (a\
    \ > b) generateIntegers(b, a)\n        else if (a % 2 == 0) (a to b by 2).toList\n\
    \        else (a + 1 to b by 2).toList", "        var res = List[Long]()\n   \
    \     val min = min(a, b)\n        val max = max(a, b)\n        for (n <- min\
    \ to max) {\n            if (n % 2 == 0) {\n                res = res :+ n\n \
    \           }\n        }\n        res", "        var result = new ListBuffer[Long]\n\
    \        if (a > b) {\n            for (i <- b to a) {\n                if (i\
    \ % 2 == 0) {\n                    result += i\n                }\n          \
    \  }\n        } else {\n            for (i <- a to b) {\n                if (i\
    \ % 2 == 0) {\n                    result += i\n                }\n          \
    \  }\n        }\n        result.toList", "        val start = min(a, b)\n    \
    \    val end = max(a, b)\n        val out = Buffer[Long]()\n        for (i <-\
    \ start to end) {\n            if (i % 2 == 0) {\n                out += i\n \
    \           }\n        }\n        out.toList", "        if (a > b) return generateIntegers(b,\
    \ a)\n        var result = List[Long]()\n        for (i <- a to b) {\n       \
    \     if (i % 2 == 0) result = result :+ i\n        }\n        return result",
  "        // place holder\n        List[Long]()", "        var result = List[Long]()\n\
    \        for (i <- min(a, b) to max(a, b)) {\n            if (i % 2 == 0) result\
    \ ::= i\n        }\n        result.reverse", "        val min = min(a, b)\n  \
    \      val max = max(a, b)\n        var ret : List[Long] = List[Long]()\n    \
    \    var c = min;\n        while (c <= max) {\n            if (c % 2 == 0) {\n\
    \                ret = ret :+ c\n            }\n            c += 1\n        }\n\
    \        return ret", "        var min = math.min(a, b)\n        var max = math.max(a,\
    \ b)\n        if (min % 2 == 1) min += 1\n        var output = new ListBuffer[Long]()\n\
    \        while (min <= max) {\n            output += min\n            min += 2\n\
    \        }\n        return output.toList", "        var result = List[Long]()\n\
    \        if (a < b) {\n            for (i <- a to b if i % 2 == 0) {\n       \
    \         result = result :+ i\n            }\n        } else {\n            for\
    \ (i <- b to a if i % 2 == 0) {\n                result = result :+ i\n      \
    \      }\n        }\n        return result", '        (a.to(b).filter(_ % 2 ==
    0)).toList', '        (a to b).filter(x => x % 2 == 0).toList', "        var start\
    \ = a.toLong\n        if (start % 2 != 0) start += 1\n        var end = b.toLong\n\
    \        if (end % 2 != 0) end -= 1\n        var i = start\n        var l = List[Long]()\n\
    \        while (i <= end) {\n            l = l :+ i\n            i += 2\n    \
    \    }\n        return l", "        val c = if (a <= b) a else b\n        val\
    \ d = if (a <= b) b else a\n        val r = new ListBuffer[Long]\n        for\
    \ (i <- c to d) {\n            if (i % 2 == 0) r += i\n        }\n        r.toList",
  "        def loop(count : Long, acc : List[Long]) : List[Long] = {\n           \
    \ val c = count + 2\n            if (c > b) acc\n            else if (c < a) loop(c,\
    \ acc)\n            else loop(c, acc :+ c)\n        }\n        if (a == b) List(a)\n\
    \        else if (a < b) loop(a, List())\n        else loop(b, List())", "   \
    \     val min = min(a, b)\n        val max = max(a, b)\n        var list = List[Long]()\n\
    \        for (i <- (min to max).toList) {\n            if (i % 2 == 0) {\n   \
    \             list = list :+ i\n            }\n        }\n        list", "   \
    \     var n = List[Long]()\n        for (i <- a to b) if (i % 2 == 0) n = n :+\
    \ i\n        return n", "        if (a > b) return generateIntegers(b, a)\n  \
    \      if (a % 2 == 1) a += 1\n        if (a == b) return List(a)\n        List(a)\
    \ ++ generateIntegers(a + 2, b)", "        val lb = if (a > b) b else a\n    \
    \    val ub = if (a > b) a else b\n        var result = List[Long]()\n       \
    \ for (i <- lb to ub) {\n            if (i % 2 == 0) {\n                result\
    \ = result :+ i\n            }\n        }\n        result", "        var list\
    \ : List[Long] = List();\n        if (a == b) {\n            if (a % 2 == 0) list\
    \ = List(a);\n        } else if (a < b) {\n            var i = if (a % 2 == 0)\
    \ a else a + 1;\n            while (i <= b) {\n                list = list :+\
    \ i;\n                i += 2;\n            }\n        } else {\n            var\
    \ i = if (a % 2 == 0) a else a - 1;\n            while (i >= b) {\n          \
    \      list = list :+ i;\n                i -= 2;\n            }\n        }\n\
    \        return list;", "        if (a > b) generateIntegers(b, a)\n        if\
    \ (a % 2 == 1) generateIntegers(a + 1, b)\n        else if (b % 2 == 1) generateIntegers(a,\
    \ b - 1)\n        else {\n            if (a + 2 > b) List[Long](a)\n         \
    \   else List[Long](a) ++ generateIntegers(a + 2, b)\n        }", "      def helper(a\
    \ : Long, b : Long, acc : List[Long]) : List[Long] = {\n        if (a > b) acc.reverse\n\
    \        else if (a % 2 == 0) helper(a + 1, b, a :: acc)\n        else helper(a\
    \ + 1, b, acc)\n      }\n      if (a <= b) helper(a, b, List())\n      else helper(b,\
    \ a, List())", "      def helper(a : Long, b : Long, acc : List[Long]) : List[Long]\
    \ = {\n        if (a == b) {\n          if (a % 2 == 0) a :: acc else acc\n  \
    \      } else if (a > b) {\n          if (a % 2 == 0) helper(a - 1, b, a :: acc)\
    \ else helper(a - 1, b, acc)\n        } else {\n          if (a % 2 == 0) helper(a\
    \ + 1, b, a :: acc) else helper(a + 1, b, acc)\n        }\n      }\n      val\
    \ list = if (a > b) helper(a, b, Nil) else helper(b, a, Nil)\n      list.sorted",
  "        val integers = a.to(b)\n        integers.filter(x => x % 2 == 0).toList",
  "        var n = if (a > b) b else a\n        var m = if (a > b) a else b\n    \
    \    if (n % 2 != 0) n += 1\n        if (m % 2 != 0) m -= 1\n        var res =\
    \ List[Long]()\n        while (n <= m) {\n            res ::= n\n            n\
    \ += 2\n        }\n        res.reverse", "        var result = List[Long]()\n\
    \        val from = min(a, b)\n        val to = max(a, b)\n        for (i <- from\
    \ to to) {\n            if (i % 2 == 0) result = result :+ i\n        }\n    \
    \    result", "        var result = new ListBuffer[Long]()\n        val (min,\
    \ max) = if (a < b) (a, b) else (b, a)\n        for (i <- min to max) {\n    \
    \        if (i % 2 == 0) {\n                result += i\n            }\n     \
    \   }\n        result.toList", "      val range = if (a <= b) Range.Long(a, b\
    \ + 1, 1) else Range.Long(b, a + 1, 1)\n      val even = range.filter(_ % 2 ==\
    \ 0)\n      even.toList", "        if (a > b) return generateIntegers(b, a)\n\
    \        return Range(a.toInt, b.toInt + 1).filter(_ % 2 == 0).map(i => i.toLong).toList",
  "        var list = List[Long]()\n        for (num <- a to b) {\n            if\
    \ (num % 2 == 0) list = list :+ num\n        }\n        list", "        // Returns\
    \ a list of even integers between a and b\n        def getEvenInts(a : Long, b\
    \ : Long) : List[Long] = {\n            if (a > b) List()\n            else if\
    \ (a % 2 == 0) a :: getEvenInts(a + 2, b)\n            else getEvenInts(a + 1,\
    \ b)\n        }\n        if (a < b) getEvenInts(a, b)\n        else getEvenInts(b,\
    \ a)", "      val evenRange = if (a % 2 == 0) a to b by 2 else a + 1 to b by 2\n\
    \      if (a < b) evenRange.toList else evenRange.toList.reverse", "        val\
    \ max = max(a, b)\n        val min = min(a, b)\n        val result = new ListBuffer[Long]\n\
    \        var current = min\n        while (current <= max) {\n            if (current\
    \ % 2 == 0) {\n                result += current\n            }\n            current\
    \ += 1\n        }\n        result.toList", "        if (a > b) generateIntegers(b,\
    \ a)\n        else if (a == b) {\n            if (a % 2 == 0) List(a)\n      \
    \      else List()\n        }\n        else {\n            if (a % 2 == 0) a ::\
    \ generateIntegers(a + 2, b)\n            else generateIntegers(a + 1, b)\n  \
    \      }", "        if (a < b) {\n            generateIntegers((a.toInt), (b.toInt)).map(x\
    \ => x.toLong)\n        } else {\n            generateIntegers((b.toInt), (a.toInt)).map(x\
    \ => x.toLong)\n        }", "        val lb = ListBuffer[Long]()\n        val\
    \ s = min(a, b)\n        val e = max(a, b)\n        var c = s\n        while (c\
    \ <= e) {\n            if (c % 2 == 0) lb += c\n            c += 1\n        }\n\
    \        lb.toList", "        var result = List[Long]()\n        if (a == b) result\
    \ = a :: result\n        else if (a < b) {\n            if (a % 2 == 0) result\
    \ = a :: result\n            result = generateIntegers(a + 1, b) ::: result\n\
    \        }\n        else {\n            if (a % 2 == 0) result = a :: result\n\
    \            result = generateIntegers(a - 1, b) ::: result\n        }\n     \
    \   result", "        val s = if (a > b) b else a\n        val e = if (a > b)\
    \ a else b\n        var result = List[Long]()\n        for (i <- s to e) {\n \
    \           if (i % 2 == 0) result = result :+ i\n        }\n        result",
  "      if (a < b) {\n        val xs = for (i <- a to b) yield i\n        xs.filter(_\
    \ % 2 == 0).toList\n      } else {\n        val xs = for (i <- b to a) yield i\n\
    \        xs.filter(_ % 2 == 0).toList\n      }", "        // 2. If a is even then\
    \ return 2, 4, 6, 8, ..., b.\n        // 3. If a is odd and b is even then return\
    \ a + 1, a + 3, a + 5, ..., b.\n        // 4. If a is odd and b is odd then return\
    \ a + 1, a + 3, a + 5, ..., b - 1.\n        if (a == b) List(a)\n        else\
    \ if (a % 2 == 0) {\n            if (a < b) a :: generateIntegers(a + 2, b)\n\
    \            else generateIntegers(b, a)\n        }\n        else {\n        \
    \    if (a < b) {\n                if (b % 2 == 0) generateIntegers(a + 1, b)\n\
    \                else generateIntegers(a + 1, b - 1)\n            }\n        \
    \    else {\n                if (b % 2 == 0) generateIntegers(b, a)\n        \
    \        else generateIntegers(b + 1, a)\n            }\n        }", "       \
    \ val minValue = min(a, b)\n        val maxValue = max(a, b)\n        val l =\
    \ new ListBuffer[Long]\n        var c = minValue\n        while (c <= maxValue)\
    \ {\n            if (c % 2 == 0) {\n                l += c\n            }\n  \
    \          c += 1\n        }\n        l.toList", "        def check(n : Long)\
    \ : Boolean = {\n            n % 2 == 0\n        }\n        (a to b).filter(check).toList",
  '        List()', "        var arr : List[Long] = List()\n        for (i <- a to\
    \ b) {\n            if (i % 2 == 0) arr = arr :+ i\n        }\n        arr", " \
    \       val (min, max) = if (a < b) (a, b) else (b, a)\n        val range = (min\
    \ to max).toList\n        range.filter(n => n % 2 == 0)", "        if (a > b)\
    \ generateIntegers(b, a)\n        else if (a % 2 == 0) a :: generateIntegers(a\
    \ + 2, b)\n        else generateIntegers(a + 1, b)", "        val aa = a.toString.length\n\
    \        val bb = b.toString.length\n        val af = pow(10, aa - 1).toLong\n\
    \        val bf = pow(10, bb - 1).toLong\n        val ae = a / (af * 10)\n   \
    \     val be = b / (bf * 10)\n        if (ae == be) {\n            (a to b).filter(x\
    \ => (x % 2 == 0)).toList\n        } else {\n            val al = (af to a).filter(x\
    \ => (x % 2 == 0)).toList\n            val bl = (b to bf by -1).filter(x => (x\
    \ % 2 == 0)).toList\n            bl ::: al\n        }", "        val m = max(a,\
    \ b)\n        val n = min(a, b)\n        val num = (n to m).toList\n        val\
    \ even = num.filter(_ % 2 == 0)\n        even", "        var result = List[Long]()\n\
    \        for (i <- min(a, b) to max(a, b)) if (i % 2 == 0) result = result :+\
    \ i\n        return result", '        (a to b).filter(_ % 2 == 0).toList', " \
    \       if (a > b) generateIntegers(b, a)\n        else if (a % 2 == 0) a :: generateIntegers(a\
    \ + 2, b)\n        else generateIntegers(a + 1, b)", "        var result = List[Long]()\n\
    \        val begin = if (a % 2 == 0) a else a + 1\n        val end = if (b % 2\
    \ == 0) b else b - 1\n        if (begin > end) return result\n        for (i <-\
    \ begin to end by 2) result ::= i\n        result.reverse", "        val bottom\
    \ = min(a, b)\n        val top = max(a, b)\n        val result = ListBuffer[Long]()\n\
    \        for (i <- bottom to top) {\n            if (i % 2 == 0) result += i\n\
    \        }\n        result.toList", "        var ints = new ListBuffer[Long]\n\
    \        for (i <- min(a, b) to max(a, b)) {\n            if (i % 2 == 0) ints\
    \ += i\n        }\n        ints.toList", "        var result = List[Long]()\n\
    \        for (i <- a to b) {\n            if (i % 2 == 0) result = result :+ i\n\
    \        }\n        result", "        val c = (a + b) / 2.0\n        val d = c.ceil.toLong\n\
    \        val e = c.floor.toLong\n        if (d % 2 == 0) ((e until d + 1) by 2).toList\
    \ else (e until d by 2).toList", "        if (a <= b) {\n            if (a % 2\
    \ == 0) {\n                a :: generateIntegers(a + 2, b)\n            } else\
    \ {\n                generateIntegers(a + 1, b)\n            }\n        } else\
    \ {\n            if (b % 2 == 0) {\n                b :: generateIntegers(a, b\
    \ - 2)\n            } else {\n                generateIntegers(a, b - 1)\n   \
    \         }\n        }", "        val lst = ListBuffer[Long]()\n        for (i\
    \ <- min(a, b) to max(a, b)) if (i % 2 == 0) lst += i\n        lst.toList", '        (for
    (i <- (min(a, b) to max(a, b)).toList if i % 2 == 0) yield i).toList', "     \
    \   val evenDigits = new ListBuffer[Long]\n        val start = min(a, b)\n   \
    \     val end = max(a, b)\n        for (x <- start to end) {\n            if (x\
    \ % 2 == 0) evenDigits += x\n        }\n        evenDigits.toList", "        val\
    \ (start, end) =\n            if (a < b) (a, b)\n            else (b, a)\n   \
    \     val range = Range(start.toInt, end.toInt + 1)\n        var lst = List[Long]()\n\
    \        for (x <- range)\n            if (x % 2 == 0) lst = lst :+ x.toLong\n\
    \        lst", "        def loop(x : Long, acc : List[Long]) : List[Long] = if\
    \ (x > b) acc else if (x % 2 == 0) loop(x + 1, x :: acc) else loop(x + 1, acc)\n\
    \        loop(a, List[Long]()).reverse", "        val aa = if (a <= b) a else\
    \ b\n        val bb = if (a <= b) b else a\n        var res = List[Long]()\n \
    \       for (i <- aa to bb) {\n            if (i % 2 == 0) res = res :+ i\n  \
    \      }\n        res", "        val start = List[Long](a)\n        val end =\
    \ List[Long](b)\n        val range = start ::: end\n        val startToEnd = range.min\
    \ to range.max\n        val evenList = startToEnd.filter(_ % 2 == 0).toList\n\
    \        evenList", "        var start = min(a, b)\n        var end = max(a, b)\n\
    \        var lst = List[Long]()\n        while (start <= end) {\n            if\
    \ (start % 2 == 0) lst = lst :+ start\n            start += 1\n        }\n   \
    \     return lst", "        var result = List[Long]()\n        val min = min(a,\
    \ b)\n        val max = max(a, b)\n        for (i <- min to max) {\n         \
    \   if (i % 2 == 0) result = result :+ i\n        }\n        result", "      \
    \  var res : List[Long] = Nil\n        var curr = min(a, b)\n        while (curr\
    \ <= max(a, b)) {\n            if (curr % 2 == 0) res = res :+ curr\n        \
    \    curr += 1\n        }\n        res", "        val start = if (a < b) a else\
    \ b\n        val end = if (a < b) b else a\n        val lst = ListBuffer[Long]()\n\
    \        for (i <- start to end by 2) {\n            lst += i\n        }\n   \
    \     lst.toList", "        var result = List[Long]()\n        for (num <- a to\
    \ b) {\n            if (num % 2 == 0) result = result :+ num\n        }\n    \
    \    result", '        (a to b).filter(e => e % 2 == 0).toList', "        var\
    \ list = new ArrayBuffer[Long]()\n        val even_digit = (2 to 8 by 2).toList\n\
    \        val list_of_digits = even_digit.map((x) => pow(10, x).toLong)\n     \
    \   for (number <- list_of_digits) {\n            if (number >= a && number <=\
    \ b) {\n                list += number\n            }\n        }\n        return\
    \ list.toList", "        (a, b) match {\n            case (a, b) if a > b => \n\
    \                (a to b by -2).toList.reverse\n            case (a, b) if a <\
    \ b => \n                (a to b by 2).toList\n            case (a, b) if a ==\
    \ b => \n                if (a % 2 == 0) List(a) else List()\n        }", "  \
    \      var result = List[Long]()\n        var i = min(a, b)\n        var j = max(a,\
    \ b)\n        while (i <= j) {\n            if (i % 2 == 0) result = result :+\
    \ i\n            i += 1\n        }\n        result", "        if (a > b) generateIntegers(b,\
    \ a)\n        else if (a % 2 == 0) a :: generateIntegers(a + 2, b)\n        else\
    \ generateIntegers(a + 1, b)", "        var result = List[Long]()\n        val\
    \ (min, max) = (min(a, b), max(a, b))\n        for (i <- min to max) {\n     \
    \       if (i % 2 == 0) result = result :+ i\n        }\n        result", "  \
    \      if (a > b) {\n            return generateIntegers(b, a)\n        }\n  \
    \      if (a % 2 == 1) {\n            return generateIntegers(a + 1, b)\n    \
    \    }\n        if (a % 2 == 0 && a <= b) {\n            return List(a) ++ generateIntegers(a\
    \ + 2, b)\n        }\n        return List[Long]()", "        var evens = new ListBuffer[Long]\n\
    \        for (i <- a to b if i % 2 == 0) {\n            evens += i\n        }\n\
    \        evens.toList", "        if (a == b) return List(a)\n        val is =\
    \ if (a < b) a to b else b to a\n        is.filter(i => i % 2 == 0).toList", " \
    \       if (a > b) return generateIntegers(b, a)\n        if (a % 2 == 1) return\
    \ generateIntegers(a + 1, b)\n        if (a <= b) return a :: generateIntegers(a\
    \ + 2, b)\n        List()", "        if (a > b) return generateIntegers(b, a)\n\
    \        if (a % 2 != 0) a += 1\n        val buf = new ListBuffer[Long]\n    \
    \    for (i <- a to b by 2) buf += i\n        buf.toList", "        val buf =\
    \ new ListBuffer[Long]\n        if (a <= b) {\n            for (i <- a to b) {\n\
    \                if (i % 2 == 0) buf += i\n            }\n        } else {\n \
    \           for (i <- a to b by -1) {\n                if (i % 2 == 0) buf +=\
    \ i\n            }\n        }\n        buf.toList", "        def generateList(start\
    \ : Long, end : Long, list : List[Long]) : List[Long] = {\n            if (start\
    \ > end) list.sorted\n            else if (start % 2 == 0) generateList(start\
    \ + 1, end, list :+ start)\n            else generateList(start + 1, end, list)\n\
    \        }\n        generateList(a, b, List[Long]())", "      val range = if (a\
    \ < b) a to b else b to a\n      val even = range.filter(_ % 2 == 0)\n      even.toList",
  "        var c = if (a < b) a else b\n        var d = if (a < b) b else a\n    \
    \    if (c % 2 != 0) c += 1\n        var l = List[Long]()\n        while (c <=\
    \ d) {\n            l ::= c\n            c += 2\n        }\n        l.reverse",
  "        val l = new ListBuffer[Long]()\n        for (i <- a to b) {\n         \
    \   if (i % 2 == 0) l += i\n        }\n        l.toList", '        (a to b).toList.filter(_
    % 2 == 0)', "        var l = List[Long]()\n        for (i <- a to b) if (i % 2\
    \ == 0) l = l :+ i\n        return l", "        val result = ListBuffer[Long]()\n\
    \        val low = if (a > b) b else a\n        val high = if (a > b) a else b\n\
    \        for (i <- low to high) {\n            if (i % 2 == 0) result += i\n \
    \       }\n        result.toList", "        if (a <= b)\n            (a to b).toList.filter(_\
    \ % 2 == 0)\n        else\n            (b to a).toList.filter(_ % 2 == 0)", " \
    \       val min = min(a, b)\n        val max = max(a, b)\n        val result =\
    \ new ListBuffer[Long]\n        var i = min\n        while (i <= max) {\n    \
    \        if (i % 2 == 0) {\n                result += i\n            }\n     \
    \       i += 1\n        }\n        result.toList", "        if (a == b) return\
    \ List(a)\n        else {\n            val list = new ListBuffer[Long]\n     \
    \       var i = min(a, b)\n            val j = max(a, b)\n            while (i\
    \ <= j) {\n                if (i % 2 == 0) list += i\n                i += 1\n\
    \            }\n            list.toList\n        }", "        //YOUR CODE HERE\n\
    \        (a to b).filter(_ % 2 == 0).toList", "        // a: Long, b: Long) =\
    \ {\n        // Write your code here\n        // val r = new scala.util.Random\n\
    \        // var randoms = new ListBuffer[Long]()\n        // for (i <- a to b)\
    \ {\n        //     val c = r.nextInt()\n        //     if (c % 2 == 0) {\n  \
    \      //         randoms += c\n        //     }\n        // }\n        // randoms.toList\n\
    \        val n = (b - a + 1) / 2 + 1\n        (1 to n.toInt).map(i => a + i *\
    \ 2 - 1).toList", "        // return toList(from(2).takeWhile(_ <= b).filter(_\
    \ % 2 == 0))\n        val lb = min(a, b)\n        val ub = max(a, b)\n       \
    \ if (lb % 2 == 0) (lb to ub by 2).toList\n        else (lb + 1 to ub by 2).toList",
  "        var min = a\n        var max = b\n        if (min > max) {\n          \
    \  val temp = min\n            min = max\n            max = temp\n        }\n\
    \        var i = min\n        var result = List[Long]()\n        while (i <= max)\
    \ {\n            if (i % 2 == 0) result = result :+ i\n            i += 1\n  \
    \      }\n        result", "        // This can be done much more efficiently,\
    \ but I'm lazy.\n        return ((a to b).toList.filter((x : Long) => (x % 2 ==\
    \ 0))).sorted", "        val aa = a / 2\n        val bb = b / 2\n        if (a\
    \ % 2 == 1) List() else List.range(aa, bb).map(n => n * 2)", "        if (a >\
    \ b) generateIntegers(b, a)\n        else if (a % 2 == 0) (List(a) ::: generateIntegers(a\
    \ + 2, b))\n        else generateIntegers(a + 1, b)", "        val low = min(a,\
    \ b)\n        val high = max(a, b)\n        val range = (low / 2) until (high\
    \ / 2)\n        return ((range.map(2l * _ + 1l) :+ 2l * range.end + 1l) :+ 2l\
    \ * range.start).toList", "        if (a == b) {\n            if (a % 2 == 0)\
    \ List(a) else List()\n        } else if (a < b) {\n            ((a + 1) to b\
    \ by 2).toList\n        } else {\n            (b to (a - 1) by 2).toList\n   \
    \     }", "        var i = a\n        var list = List[Long]()\n        while (i\
    \ <= b) {\n            if (i % 2 == 0) list = list :+ i\n            i += 1\n\
    \        }\n        list", "        var result = List[Long]()\n        var c =\
    \ max(a, b)\n        var d = min(a, b)\n        while (c >= d) {\n           \
    \ if (c % 2 == 0) result = c :: result\n            c -= 1\n        }\n      \
    \  return result", "        if (a == b) List(a)\n        else {\n            var\
    \ result = List[Long]()\n            val (begin, end) = if (a < b) (a, b) else\
    \ (b, a)\n            for (i <- begin to end) {\n                if (i % 2 ==\
    \ 0) result = result :+ i\n            }\n            result\n        }", "  \
    \      val (lower, upper) = if (a < b) (a, b) else (b, a)\n        var result\
    \ = List[Long]()\n        for (i <- lower to upper) {\n            if (i % 2 ==\
    \ 0) result = result :+ i\n        }\n        result", "        var result = List[Long]()\n\
    \        for (i <- a to b) {\n            if (i % 2 == 0) result = result :+ i\n\
    \        }\n        result", "        val lst = new ListBuffer[Long]\n       \
    \ val l = min(a, b)\n        val r = max(a, b)\n        for (i <- l to r) {\n\
    \            if (i % 2 == 0) lst += i\n        }\n        lst.toList", "     \
    \   var r = List[Long]()\n        var start = if (a > b) b else a\n        var\
    \ end = if (a > b) a else b\n        for (i <- start to end if i % 2 == 0) {\n\
    \            r = r :+ i\n        }\n        r", '      (for (i <- min(a, b) to
    max(a, b) if i % 2 == 0) yield i).toList', "        // Your code here\n      \
    \  if (a == b) {\n            if (a % 2 == 0) List(a) else List()\n        } else\
    \ if (a < b) {\n            var ls = List[Long]()\n            for (i <- a to\
    \ b) {\n                if (i % 2 == 0) ls = ls :+ i\n            }\n        \
    \    ls\n        } else {\n            var ls = List[Long]()\n            for\
    \ (i <- a to b by -1) {\n                if (i % 2 == 0) ls = ls :+ i\n      \
    \      }\n            ls\n        }", "        var start : Long = min(a, b)\n\
    \        var end : Long = max(a, b)\n        var result : List[Long] = List()\n\
    \        while (start <= end) {\n            if (start % 2 == 0) result = result\
    \ :+ start\n            start += 1\n        }\n        return result", "     \
    \   if (a > b) generateIntegers(b, a)\n        else if (a % 2 == 0) {\n      \
    \      var result = new ListBuffer[Long]\n            var temp = a\n         \
    \   while (temp <= b) {\n                result += temp\n                temp\
    \ += 2\n            }\n            result.toList\n        } else {\n         \
    \   var result = new ListBuffer[Long]\n            var temp = a + 1\n        \
    \    while (temp <= b) {\n                result += temp\n                temp\
    \ += 2\n            }\n            result.toList\n        }", "        if (a <\
    \ b) {\n            if (a % 2 == 0) {\n                a :: generateIntegers(a\
    \ + 2, b)\n            } else {\n                generateIntegers(a + 1, b)\n\
    \            }\n        } else if (a > b) {\n            if (a % 2 == 0) {\n \
    \               a :: generateIntegers(a - 2, b)\n            } else {\n      \
    \          generateIntegers(a - 1, b)\n            }\n        } else {\n     \
    \       Nil\n        }", '        ((a to b).toList.filter(i => i % 2 == 0))',
  "        var (m, n) = (a, b)\n        if (m > n) {\n            var (m, n) = (b,\
    \ a)\n        }\n        var evens = List[Long]()\n        for (i <- m to n) {\n\
    \            if (i % 2 == 0) {\n                evens = evens :+ i\n         \
    \   }\n        }\n        evens", "        val lo = if (a <= b) a else b\n   \
    \     val hi = if (a <= b) b else a\n        val results = new ListBuffer[Long]\n\
    \        var i = lo\n        while (i <= hi) {\n            if (i % 2 == 0) results\
    \ += i\n            i += 1\n        }\n        results.toList", "        def helper(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n > b) acc\n   \
    \         else if (n % 2 == 0) helper(n + 1, n :: acc)\n            else helper(n\
    \ + 1, acc)\n        }\n        helper(a, List()).reverse", "        var list\
    \ = List[Long]()\n        val x = if (a > b) b else a\n        val y = if (a >\
    \ b) a else b\n        for (i <- x to y if i % 2 == 0) list ::= i\n        list.reverse",
  "        def generate(list : List[Long], acc : Long) : List[Long] = {\n        \
    \    if (acc > b) list.reverse\n            else if (acc % 2 == 0) generate(acc\
    \ :: list, acc + 1)\n            else generate(list, acc + 1)\n        }\n   \
    \     def generate2(list : List[Long], acc : Long) : List[Long] = {\n        \
    \    if (acc < a) list.reverse\n            else if (acc % 2 == 0) generate2(acc\
    \ :: list, acc - 1)\n            else generate2(list, acc - 1)\n        }\n  \
    \      if (a <= b) generate(List(), a)\n        else generate2(List(), b)", " \
    \       var start = 0l.toLong\n        var end = 0l.toLong\n        var interval\
    \ = List[Long]()\n        if (a < b) {\n            start = a\n            end\
    \ = b\n        } else {\n            start = b\n            end = a\n        }\n\
    \        while (start <= end) {\n            if (start % 2 == 0) interval = interval\
    \ :+ start\n            start += 1\n        }\n        interval", "        if\
    \ (a > b) {\n            return generateIntegers(b, a)\n        }\n        if\
    \ (a % 2 == 1) {\n            return generateIntegers(a + 1, b)\n        }\n \
    \       if (a > b) {\n            return List[Long]()\n        }\n        return\
    \ List[Long](a) ++ generateIntegers(a + 2, b)", "        // Fill up this function\
    \ body\n        // 'a' and 'b' are both positive numbers\n        val min = min(a,\
    \ b)\n        val max = max(a, b)\n        val result = ListBuffer[Long]()\n \
    \       if (min % 2 == 0) {\n            result += min\n        }\n        var\
    \ num = min + 1\n        while (num < max) {\n            if (num % 2 == 0) {\n\
    \                result += num\n            }\n            num += 1\n        }\n\
    \        if (max % 2 == 0) {\n            result += max\n        }\n        result.toList",
  "        val result = new ListBuffer[Long]()\n        for (i <- min(a, b) to max(a,\
    \ b)) {\n            if (i % 2 == 0) result += i\n        }\n        result.toList",
  "        var l = List[Long]()\n        val start = if (a < b) a else b\n       \
    \ val end = if (a < b) b else a\n        for (i <- start to end if i % 2 == 0)\
    \ l = l ++ List(i)\n        l", "        val bounds = if (a < b) (a, b) else (b,\
    \ a)\n        val start = \n            if (bounds._1 % 2 == 0) bounds._1 else\
    \ bounds._1 + 1\n        val end =\n            if (bounds._2 % 2 == 0) bounds._2\
    \ else bounds._2 - 1\n        if (start <= end) Range(start.toInt, end.toInt +\
    \ 1, 2).toList\n        else List[Long]()", "      val lower = a.min(b)\n    \
    \  val upper = a.max(b)\n      var result = new ListBuffer[Long]()\n      for\
    \ (n <- lower to upper) {\n        if (n % 2 == 0) result += n\n      }\n    \
    \  result.toList", "        var r : List[Long] = Nil\n        var lower = min(a,\
    \ b)\n        var upper = max(a, b)\n        var n = lower\n        while (n <=\
    \ upper) {\n            if (n % 2 == 0) r = n :: r\n            n += 1\n     \
    \   }\n        r.reverse", "        val start = min(a, b)\n        val end = max(a,\
    \ b)\n        val result = new ListBuffer[Long]\n        for (i <- start to end)\
    \ {\n            if (i % 2 == 0) result += i\n        }\n        result.toList",
  "        var result = List[Long]()\n        for (i <- a to b) if (i % 2 == 0) result\
    \ = result :+ i\n        return result", "        var list = new ListBuffer[Long]\n\
    \        var min = min(a, b)\n        var max = max(a, b)\n        while (min\
    \ <= max) {\n            if (min % 2 == 0) {\n                list += min\n  \
    \          }\n            min += 1\n        }\n        list.toList", "       \
    \ val start = if (a > b) b else a\n        val end = if (a > b) a else b\n   \
    \     (start to end).toList.filter(_ % 2 == 0)", "        // Your code here.\n\
    \        null", "        var evens = List[Long]()\n        var i = a\n       \
    \ if (i % 2 != 0) i += 1\n        while (i <= b) {\n            evens = i :: evens\n\
    \            i += 2\n        }\n        evens.sortWith(_ < _)", "        // Type\
    \ your code here\n        var result = ArrayBuffer[Long]()\n        var start\
    \ = min(a, b)\n        var end = max(a, b)\n        while (start <= end) {\n \
    \           if (start % 2 == 0) result += start\n            start += 1\n    \
    \    }\n        result.toList", "        val (a1, b1) = if (a < b) (a, b) else\
    \ (b, a)\n        (2 to b1.toInt).toList.filter((x) => x % 2 == 0 && x >= a1.toInt).map(_.toLong)",
  "        val aOrb = if (a > b) b else a\n        val bOrb = if (a > b) a else b\n\
    \        var list = List[Long]()\n        var i = aOrb\n        while (i <= bOrb)\
    \ {\n            if (i % 2 == 0) list = list :+ i\n            i += 1\n      \
    \  }\n        list", "        val lower = if (a < b) a else b\n        val upper\
    \ = if (a > b) a else b\n        var current = lower\n        var result = List[Long]()\n\
    \        while (current <= upper) {\n            if (current % 2 == 0) {\n   \
    \             result = result :+ current\n            }\n            current +=\
    \ 1\n        }\n        result", "        val lo = min(a, b)\n        val hi =\
    \ max(a, b)\n        List.range(lo, hi + 1).filter(x => x % 2 == 0)", "      \
    \  val n = max(a, b)\n        val m = min(a, b)\n        val result = ListBuffer[Long]()\n\
    \        for (i <- m to n) {\n            if (i % 2 == 0) {\n                result\
    \ += i\n            }\n        }\n        result.toList"]
stop_tokens:
- "\n    }\n"
