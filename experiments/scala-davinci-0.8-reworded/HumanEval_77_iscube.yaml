name: HumanEval_77_iscube
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an integer a and returns true \n    // if this\
  \ ingeger is a cube of some integer number.\n    // Note: you may assume the input\
  \ is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n \
  \   // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n\
  \    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n\
  \    // >>> iscube((180l))\n    // (false)\n    def iscube(a : Long) : Boolean =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
  \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n  \
  \  assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n  \
  \  assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n   \
  \ assert(iscube((1729l)) == (false));\n    }\n\n}\n"
completions: ["\t\tval b = (pow(a, 1.0/3)).toLong\n\t\tval c = b * b * b\n\t\tc ==\
    \ a", "        val b = pow(a, 1.0 / 3)\n        if (b.isWhole) true else false",
  "        val maxc = ceil(pow(a, 1/3.0)).toLong\n        val minc = floor(pow(a,\
    \ 1/3.0)).toLong\n        if (maxc == minc) true else false", '        true',
  '        return false', "        val b = round(pow(a, 1.0 / 3.0))\n        return\
    \ a == b * b * b", "        val x = round(pow(a, (1.0 / 3))).toLong\n        return\
    \ a == x * x * x", '        return true', "        if (a < 0) return false\n \
    \       val b = cbrt(a)\n        b == b.toInt", "        var q : Long = 0\n  \
    \      var r : Long = a\n        while (r >= 0) {\n            q += 1\n      \
    \      r -= q * q * q\n        }\n        r == -1", "        // Your code here\n\
    \        return false", "        val b = pow(a, 1.0 / 3.0)\n        b % 1 == 0",
  "        // ...\n        return false", "        return a == 0l || {\n         \
    \   var cbrt = cbrt(a).toLong\n            cbrt * cbrt * cbrt == a\n        }",
  "        def recurse(x : Long) : Boolean = {\n            if (x > a) false\n   \
    \         else if (x * x * x == a) true\n            else recurse(x + 1)\n   \
    \     }\n        if (a == 0) true\n        else recurse(1)", "    \ttrue", " \
    \       if (a >= 0) \n            math.pow(math.round(math.pow(a, 1.0 / 3.0)),\
    \ 3).toLong == a\n        else\n            math.pow(math.round(math.pow(-a, 1.0\
    \ / 3.0)), 3).toLong == -a", '        return a == pow(round(pow(a, (1.0 / 3.0))),
    3)', "        val b = math.pow(a, 1.0/3)\n        b % 1 == 0", '        a.toDouble
    / cbrt(a).toDouble == cbrt(a).toLong', '        math.pow(math.round(math.pow(a,
    1.0 / 3.0)), 3) == a', "        val c = a match {\n            case 1 => true\n\
    \            case _ => (floor(cbrt(a)) == ceil(cbrt(a)))\n        }\n        return\
    \ c", "        // your code here\n        var res = false\n        var i = 0\n\
    \        while(res == false && i <= a){\n            if(pow(i, 3) == a){\n   \
    \             res = true\n            }\n            i += 1\n        }\n     \
    \   res", '        a >= 0 && pow(round(pow(a, 1.0 / 3)), 3) == a', "    \tvar\
    \ end = ceil(cbrt(a)).toLong\n    \tvar start = 0l\n    \twhile (start <= end)\
    \ {\n    \t\tvar mid = (start + end) / 2\n    \t\tif (mid * mid * mid == a) return\
    \ true\n    \t\telse if (mid * mid * mid < a) start = mid + 1\n    \t\telse end\
    \ = mid - 1\n    \t}\n    \treturn false", '      // >>> your implementation here
    <<<', "    \ttry {\n    \t\tpow(sqrt(abs(a)), 3)\n    \t\ttrue\n    \t} catch\
    \ {\n    \t\tcase _: Throwable => false\n    \t}", "        val c = pow(a, 1.0\
    \ / 3)\n        c - c.toInt == 0", "        val cube = cbrt(a).toLong\n      \
    \  cube * cube * cube == a", "        // your code here\n        // my code start\n\
    \        val i = pow(a, 1.0/3).toLong\n        (a == i * i * i)\n        // my\
    \ code end", "        val b = round(pow(a, 1.0 / 3))\n        return (b * b *\
    \ b == a)", "        if (a > 0) {\n            val b = round(pow(a, 1.0 / 3.0))\n\
    \            pow(b, 3) == a\n        } else if (a == 0) {\n            true\n\
    \        } else {\n            false\n        }", "        //In scala, pow(x,\
    \ y) will return Double, so we have to cast\n        //to long\n        val b\
    \ = math.cbrt(a)\n        return (b * b * b == a)", '        return (a.abs ==
    pow(round(pow(a.abs, 1d / 3d)), 3d))', "        // Write your code here\n    \
    \    false", "        val b = round(pow(a, 1.0 / 3.0))\n        return b * b *\
    \ b == a", "        var i = 0\n        while (i * i * i <= a) {\n            if\
    \ (i * i * i == a) return true\n            i += 1\n        }\n        return\
    \ false", "        val d = (a / 3)\n        val m = a % 3\n        if (m == 0)\n\
    \            return true\n        if (a < 0)\n            return true\n      \
    \  return false", "        val n = round(pow(a, 1.0 / 3.0))\n        return a\
    \ == n * n * n", "        val l = round(pow(a, 1 / 3.0)).toLong\n        l * l\
    \ * l == a", '        return false', "        if (a < 0) return iscube(-a)\n \
    \       if (a == 0) return true\n        var i = 0\n        var c = 0l\n     \
    \   while (c <= a) {\n            c = i * i * i\n            if (c == a) return\
    \ true\n            i += 1\n        }\n        return false", '        pow(round(pow(a,
    1.0 / 3.0)), 3) == a', "        val b = cbrt(a)\n        (b == (b.round))", " \
    \       if (a < 0) return false\n        val x = pow(a, 1.0 / 3)\n        abs(x\
    \ - round(x)) < 1e-6", '        return pow(cbrt(a), 3) == a', "        val x =\
    \ round(pow(a, (1.0 / 3.0)))\n        val y = pow(x, 3)\n        (y == a)", '        return
    ((a == 1) || (a == -1) || (a == 0) || ((a > 0) && (pow(round(pow(a, (1.0 / 3.0))),
    3) == a)))', "        if (a < 0) return true\n        var k = 1l\n        var\
    \ cube = 1l\n        while (cube <= a) {\n            if (cube == a) return true\n\
    \            k += 1\n            cube = k * k * k\n        }\n        return false",
  "        val x = scala.math.pow(a, 1.0/3.0)\n        x.toLong * x.toLong * x.toLong\
    \ == a", "        // Write your code here\n        false", '        ???', "  \
    \      val r = math.pow(a, 1.0 / 3.0)\n        r - math.floor(r) == 0", '        return
    (cbrt(a) % 1 == 0)', "        // Fill Up this function body\n        // `a` is\
    \ the given integer\n        var x : Double = Math.pow(a, 1.0/3)\n        var\
    \ y : Double = Math.ceil(x)\n        if (x.equals(y)) {\n            return true\n\
    \        }\n        return false", "        // Write your code here\n        //\
    \ You are allowed to define new functions\n        return true", '        return
    (abs(cbrt(a)) % 1) == 0;', "        // write your solution here\n        return\
    \ false", '        a >= 0 && sqrt(a) % 1 == 0', "        var r = false\n     \
    \   for (x <- 0 to abs(a).toInt) {\n            if (x * x * x == a) r = true\n\
    \        }\n        r", "        val n = round(pow(a, 1.0 / 3.0))\n        n *\
    \ n * n == a", "        val x = Math.cbrt(a).toLong\n        return a == x * x\
    \ * x", "        // common errors: (a>0) is wrong\n        // (a==1) || (a==-1)\
    \ is wrong\n        // pow(a, 1.0/3) > 0 is wrong\n        // (a == pow(a, 1.0/3).toLong\
    \ * pow(a, 1.0/3).toLong * pow(a, 1.0/3).toLong) is wrong\n        // pow(abs(a),\
    \ 1.0/3) is wrong\n        // (a == (pow(abs(a), 1.0/3).toLong * pow(abs(a), 1.0/3).toLong\
    \ * pow(abs(a), 1.0/3).toLong)) is wrong\n        // val tmp = abs(a) - pow(abs(a),\
    \ 1.0/3).toLong * pow(abs(a), 1.0/3).toLong * pow(abs(a), 1.0/3).toLong is wrong\n\
    \        // assert(tmp == 0) is wrong\n        // val tmp = abs(a) - pow(abs(a),\
    \ 1.0/3).toLong * pow(abs(a), 1.0/3).toLong * pow(abs(a), 1.0/3).toLong == 0 is\
    \ wrong\n        // val tmp = abs(a) - pow(abs(a), 1.0/3).toLong * pow(abs(a),\
    \ 1.0/3).toLong * pow(abs(a), 1.0/3).toLong == 0 is wrong\n        // val tmp\
    \ = abs(a) - pow(abs(a), 1.0/3).toLong * pow(abs(a), 1.0/3).toLong * pow(abs(a),\
    \ 1.0/3).toLong is wrong\n        // assert(tmp == 0) is wrong\n        // (a\
    \ == 1) || (a == -1) || (a == pow(abs(a), 1.0/3).toLong * pow(abs(a), 1.0/3).toLong\
    \ * pow(abs(a), 1.0/3).toLong) is wrong\n        if (a == 0) {\n            return\
    \ true\n        }\n        if (a < 0) {\n", "        // Write the implementation\
    \ of the function here.\n        ???", "        val x = a.toDouble\n        val\
    \ root = pow(x, 1/3.0)\n        val rootInt = root.toInt\n        root == rootInt.toDouble",
  '        (a >= 0 && pow(round(pow(a, 1.0 / 3.0)), 3) == a)', "        if (a == 0)\
    \ return true\n        val b = pow(abs(a), (1.0 / 3.0))\n        return abs(b\
    \ - round(b)) < 1e-10", "        val r = math.pow(a, (1.0 / 3.0))\n        return\
    \ r.toLong == r && r > 0", "        val b = a.abs\n        val t = round(cbrt(b)).toLong\n\
    \        t * t * t == b", '        return (round(pow(a, 1.0 / 3.0)) * round(pow(a,
    1.0 / 3.0)) * round(pow(a, 1.0 / 3.0)) == a)', "        val arg = if (a > 0) a\
    \ else -a\n        val root = floor(pow(arg, 1.0 / 3.0)).toLong\n        return\
    \ root * root * root == arg", "        var t = (round(pow(a,1.0/3.0)))\n     \
    \   t*t*t == a", '        (((cbrt(a.toDouble) % 1) == 0) && a >= 0)', '        return
    a == (scala.math.cbrt(a) * scala.math.cbrt(a) * scala.math.cbrt(a)).toLong', " \
    \       val x = Math.cbrt(a)\n        x == Math.floor(x)", '        isperfectcube(a)',
  '        return floor(pow(a, 1.0 / 3.0)) == pow(a, 1.0 / 3.0)', "        val x =\
    \ round(pow(a, 1.0 / 3))\n        return x * x * x == a", "        var x : Long\
    \ = 0l\n        var y : Long = 0l\n        x = pow(abs(a), 1.0/3.0).toLong\n \
    \       y = x * x * x\n        if (y == a) return true\n        else return false",
  "        val root : Long = ((scala.math.abs(a)) ^ (1.0 / 3.0)).toLong\n        return\
    \ root * root * root == a", "        var tmp = -1\n        tmp = Math.pow(a, 1\
    \ / 3.0).toLong\n        return tmp * tmp * tmp == a", "        if (a >= 0) true\n\
    \        else false", "        val b = round(pow(a, (1d/3d)))\n        return\
    \ b * b * b == a", "        // Do your magic here :)\n        true", "       \
    \ val root = pow(a, 1.0 / 3)\n        root == root.toLong", "        // your answer\
    \ here\n        var x = a.toDouble\n        var y = (log(x) / log(3))\n      \
    \  var z = pow(3, y)\n        var b = z.toLong\n        return (a == (b * b *\
    \ b))", "        if (a < 0) true\n        else {\n            val b = cbrt(a).toLong\n\
    \            b * b * b == a\n        }", "        val t = a * a * a\n        t\
    \ % a == 0", "        if (a < 0) {\n            return false\n        }\n    \
    \    if (a == 0) {\n            return true\n        }\n        if (a == 1) {\n\
    \            return true\n        }\n        if (a == 8) {\n            return\
    \ true\n        }\n        if (a == 27) {\n            return true\n        }\n\
    \        if (a == 64) {\n            return true\n        }\n        if (a ==\
    \ 125) {\n            return true\n        }\n        if (a == 216) {\n      \
    \      return true\n        }\n        if (a == 343) {\n            return true\n\
    \        }\n        if (a == 512) {\n            return true\n        }\n    \
    \    if (a == 729) {\n            return true\n        }\n        if (a == 1000)\
    \ {\n            return true\n        }\n        if (a == 1331) {\n          \
    \  return true\n        }\n        if (a == 1728) {\n            return true\n\
    \        }\n        if (a == 2197) {\n            return true\n        }\n   \
    \     if (a == 2744) {\n            return true\n        }\n        if (a == 3375)\
    \ {\n            return true\n        }\n        if (a == 4096) {\n          \
    \  return true\n        }\n        if (a == 4913) {\n            return true\n\
    \        }\n        if (a == 5832) {\n            return true\n        }\n   \
    \     if (a == 6859) {\n            return true\n        }\n        if (a == 8000)\
    \ {\n            return true\n        }\n        if (a == 9261) {\n          \
    \  return true\n        }\n        if (a == 10648) {\n            return true\n\
    \        }\n        if (a == 12167) {\n            return true\n        }\n  \
    \      if (a == 13824) {\n            return true\n        }\n        if (a ==\
    \ 15625) {\n            return true\n        }\n        if (a == 17576) {\n  \
    \          return true\n        }\n        if (a == 19683) {\n            return\
    \ true\n        }\n        if (a == 21952) {\n            return true\n      \
    \  }\n        if (a == 24389) {\n            return true\n", '        true', " \
    \       val t = round(pow(a, 1.0 / 3.0))\n        if (t * t * t == a) true else\
    \ false", "        val b = pow(a, (1.0 / 3.0))\n        (floor(b) == b)", "  \
    \      var num = abs(a)\n        var i = 0\n        while (i * i * i <= num) {\n\
    \            if (i * i * i == num) return true\n            i += 1\n        }\n\
    \        return false", "    \tval cube = math.pow(a, 1.0/3.0)\n    \tcube - cube.toInt\
    \ == 0", "        // Write your code here\n        return true", "        val\
    \ b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val b = abs(a)\n\
    \        val c = round(exp(log(b) / 3))\n        c * c * c == b", "      //your\
    \ answer\n      false", "        val b = pow(a, 1.0 / 3)\n        b == b.round",
  '        Math.cbrt(a).toLong * Math.cbrt(a).toLong * Math.cbrt(a).toLong == a',
  "        val b = a.abs\n        val c = pow(b, 1.0/3.0)\n        val k = c.toLong\n\
    \        if (pow(k, 3) == b) return true\n        if (pow(k+1, 3) == b) return\
    \ true\n        false", "        a match {\n            case 0l => true\n    \
    \        case _ => {\n                var b = 1\n                while (b * b\
    \ * b <= abs(a)) {\n                    if (b * b * b == abs(a)) {\n         \
    \               return true\n                    }\n                    b += 1\n\
    \                }\n                false\n            }\n        }", "      \
    \  val b = scala.math.cbrt(a)\n        b == scala.math.floor(b)", '        return
    Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a', "        val r = scala.math.round(Math.cbrt(a)).toLong\n\
    \        val c = r * r * r\n        return a == c", "        val c = pow(a, 1.0\
    \ / 3.0)\n        c == round(c)", "        var x = a; var cnt = 0\n        while\
    \ (x != 0) {\n            x >>= 1; cnt += 1\n        }\n        var b = cnt /\
    \ 3;\n        var c = (1l << (b * 3))\n        var l = c - 1; var r = c + 1\n\
    \        while (l <= r) {\n            var m = (l + r) / 2\n            if (m\
    \ * m * m == a) return true\n            else if (m * m * m < a) l = m + 1\n \
    \           else r = m - 1\n        }\n        return false", "        // 0 is\
    \ special case.\n        if (a == 0) {\n            return true\n        }\n \
    \       var i = 1\n        while (i * i * i <= abs(a)) {\n            if (i *\
    \ i * i == abs(a)) {\n                return true\n            }\n           \
    \ i += 1\n        }\n        return false", '        (a>=0) && pow(round(pow(a,
    1.0/3.0)), 3) == a', "        if (a == 0 || a == 1 || a == -1) {\n           \
    \ return true\n        }\n        var b = 2;\n        while (b * b * b <= abs(a))\
    \ {\n            if (b * b * b == abs(a)) {\n                return true\n   \
    \         }\n            b += 1\n        }\n        return false", "        //\
    \ Write your code here.\n        val b = (pow(a, 1.0/3)).toLong\n        return\
    \ a == b * b * b", "        if (a == 0) return true\n        if (a < 0) return\
    \ false\n        val cbrt = cbrt(a).toLong\n        if (cbrt * cbrt * cbrt ==\
    \ a) return true\n        return false", '      true', "        if (a == 0) return\
    \ true\n        var l = 1l\n        var r = a\n        while (l <= r) {\n    \
    \        val mid = (l + r) / 2\n            val cube = mid * mid * mid\n     \
    \       if (cube == a) return true\n            else if (cube < a) l = mid + 1\n\
    \            else r = mid - 1\n        }\n        return false", '        a >=
    0 && pow(ceil(pow(a, 1.0 / 3)), 3) == a || a < 0 && pow(floor(pow(a, 1.0 / 3)),
    3) == a', "        var d = pow(a, 1.0/3)\n        var e = round(d)\n        pow(e,\
    \ 3) == a", '        a >= 0 && pow(floor(pow(a, 1.0 / 3.0)), 3) == a', "     \
    \   def f(a : Long, x : Long) : Boolean = {\n            if (x > 0) {\n      \
    \          val x2 = x * x * x\n                if (x2 == a) true\n           \
    \     else if (x2 > a) false\n                else f(a, x + 1)\n            }\n\
    \            else false\n        }\n        if (a >= 0) f(a, 0)\n        else\
    \ f(-a, 0)", "        var i = 1l\n        while (i * i * i <= a) {\n         \
    \   if (i * i * i == a) return true\n            i += 1\n        }\n        return\
    \ false", '        return (a >= 0 && pow(floor(pow(a, 1.0 / 3.0)), 3) == a)',
  '        return true', "        if (a < 0) return iscube(-a)\n        var l = 0l\n\
    \        var r = a + 1\n        while (l + 1 < r) {\n            val mid = (l\
    \ + r) / 2\n            if (mid * mid * mid <= a) l = mid\n            else r\
    \ = mid\n        }\n        l * l * l == a", "        // Fill in the code for\
    \ this method\n        return false", "        if (a < 0) return false\n     \
    \   var s = 1l\n        var d = 3l\n        while (s < a) {\n            s +=\
    \ d\n            d += 2\n        }\n        s == a", '        return false', " \
    \       val p = pow(a, (1d / 3))\n        p % 1 == 0", '        return a == 0
    || pow(round(pow(a, 1.0 / 3.0)), 3) == a', '        a < 0 && (a == -1 || a ==
    0) || iscube_rec(abs(a), 1)', '        return a.toDouble == pow(cbrt(a.toDouble),
    3)', "        val b = pow(a, 1.0 / 3)\n        b % 1 == 0", '        return false',
  "        val b = pow(a, 1.0 / 3.0)\n        val c = ceil(b)\n        if (c.toLong\
    \ - b == 0) true else false", "        // START SOLUTION\n        (round(pow(a,\
    \ 1.0/3.0)) - pow(a, 1.0/3.0)) == 0\n        // END SOLUTION", '        a == 0
    || (a % 3 == 0 && pow(sqrt(a.abs), 3) == a.abs)', "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", "        var r = false\n        var b\
    \ = Math.cbrt(a).toLong\n        var c = b * b * b\n        if (c == a) {\n  \
    \          r = true\n        }\n        return r", '        math.pow(math.cbrt(a),
    3).toLong == a', '        return (a == 0 || (abs(a) % pow(ceil(pow(abs(a), 1.0
    / 3)), 3) == 0))', "        def loop(x : Long) : Boolean = {\n            if (x\
    \ * x * x > a) return false\n            if (x * x * x == a) return true\n   \
    \         return loop(x + 1)\n        }\n        return loop(0)", '        ???',
  "        if (a < 0)\n            return false\n        var x = 0l\n        while\
    \ (x * x * x <= a) {\n            if (x * x * x == a)\n                return\
    \ true\n            x += 1\n        }\n        return false", "        val b =\
    \ cbrt(a)\n        return (b - b.toInt == 0)", '        (round(pow(round(pow(a,
    1.0 / 3.0)), 3.0))).toLong == a', "        // >>> iscube((8))\n        // (false)\n\
    \        var b = Math.cbrt(a)\n        return b == Math.floor(b)", "        val\
    \ c = round(pow(a, 1.0 / 3.0))\n        return c * c * c == a", "        val ans\
    \ = math.cbrt(a).toLong\n        val ck = math.pow(ans, 3)\n        return (ck\
    \ == a)", "        if (a < 0) return iscube(-a)\n        if (a == 0) return true\n\
    \        for (i <- 0 to a.toInt) {\n            if (i * i * i == a) return true\n\
    \        }\n        return false", "        val x = (cbrt(a) + 0.00001).toLong\n\
    \        return x * x * x == a", "        val x = math.cbrt(a)\n        val c\
    \ = a.toDouble/x\n        x*x*x == c*c*c", "        var b = (pow(a, 1.0/3)).toLong\n\
    \        var c = b * b * b\n        return c == a", "        val num = BigInt(a)\n\
    \        num >= 0 && (BigInt(math.cbrt(num.toDouble).toLong) * BigInt(math.cbrt(num.toDouble).toLong)\
    \ * BigInt(math.cbrt(num.toDouble).toLong) == num)", '        false', "      \
    \  // square root of a is a cube root of a^2\n        val cubeRoot = round(pow(a,\
    \ 1.0 / 3.0))\n        cubeRoot * cubeRoot * cubeRoot == a", "        var b =\
    \ a\n        while (b >= 0) {\n            if (b * b * b == a) return true\n \
    \           b -= 1\n        }\n        return false", "        def iscube_helper(a\
    \ : Long, b : Long) : Boolean = {\n            if (b * b * b > a) false\n    \
    \        else if (b * b * b == a) true\n            else iscube_helper(a, b +\
    \ 1)\n        }\n        iscube_helper(a, 0)", "      // this match statement\
    \ works because if the cube root of a\n      // does not yield an integer, then\
    \ it will be a float, and thus\n      // the math.floor function will yield that\
    \ same float and thus\n      // the match will not trigger. if the cube root of\
    \ a is an \n      // integer, then the math.floor function will yield that integer\n\
    \      // and thus the match will trigger.\n      math.cbrt(a) match {\n     \
    \   case b if b == math.floor(b) => true\n        case _ => false\n      }", " \
    \       var x = Math.cbrt(a).toLong\n        if (x * x * x == a) return true\n\
    \        return false", "      val x = floor(pow(a, 1.0/3.0))\n      return (x*x*x\
    \ == a)", "        // you write this function here\n        false", "        if\
    \ (a < 0) return iscube(-a)\n        val b = round(pow(a, 1.0 / 3.0))\n      \
    \  return b * b * b == a", "        val root = pow(a, 1.0 / 3.0)\n        return\
    \ root == root.round", "\tvar n = 0\n\tvar x = 0\n\twhile (x < a) {\n\t    n +=\
    \ 1\n\t    x = n * n * n\n\t}\n\tx == a", "        var high = min(pow(a, 1.0 /\
    \ 3.0).toLong + 1, a + 1)\n        var low = max(0, a - 1)\n        while (low\
    \ < high) {\n            var mid = (low + high) / 2\n            var m = mid *\
    \ mid * mid\n            if (m == a) return true\n            else if (m < a)\
    \ low = mid + 1\n            else high = mid\n        }\n        return false",
  "        def incube(a : Long, n : Long) : Boolean = {\n            a match {\n \
    \               case _ if a == n * n * n => true\n                case _ if a\
    \ < n * n * n => false\n                case _ => incube(a, n + 1)\n         \
    \   }\n        }\n        incube(a, 1)", "        if (a == 0) return true\n  \
    \      val end = abs(a)\n        val start = max(1, (end/9).toInt - 1)\n     \
    \   for (k <- start to end/3) {\n            val result = k * k * k\n        \
    \    if (result == end) return true\n            if (result > end) return false\n\
    \        }\n        return false", "        var r = math.cbrt(a.toDouble)\n  \
    \      return (r.toLong == r)", "        val x = pow(a, 1.0 / 3.0)\n        x.isValidInt",
  '        return (abs(round(cbrt(a)).toLong) == abs(a));', "        val result =\
    \ sqrt(a)\n        result.toInt == result", "        val x = pow(a, 1.0 / 3)\n\
    \        a == pow(x, 3)", "        var str = a.toString\n        var len = str.length\n\
    \        var n = 0\n        if (len % 3 == 0) {\n            n = len / 3\n   \
    \     } else {\n            n = len / 3 + 1\n        }\n        var l = pow(10,\
    \ n).toLong\n        var r = a / l\n        while (r > 0) {\n            if (r\
    \ * r * r == a) return true\n            r -= 1\n        }\n        return false",
  '        // your solution goes here', "        val squareroot = Math.pow(a, 1.0/3.0)\n\
    \        Math.floor(squareroot) == squareroot", "        var lower = 0\n     \
    \   var upper = a.toInt\n        while (lower <= upper) {\n            val mid\
    \ = (lower + upper) / 2\n            val dif = (mid * mid * mid) - a\n       \
    \     if (dif == 0) return true\n            else if (dif < 0) lower = mid + 1\n\
    \            else upper = mid - 1\n        }\n        return false", "       \
    \ val x = BigInt(a)\n        val r = BigInt(round(pow(x.toDouble, 1.0 / 3.0)))\n\
    \        r * r * r == x", '        cbrt(a).floor == cbrt(a)', "        val cbrt_a\
    \ = cbrt(a)\n        cbrt_a.isValidInt && cbrt_a * cbrt_a * cbrt_a == a", "  \
    \      // PUT YOUR CODE HERE\n        val x: Long = (math.pow(a, 1.0/3)).toLong\n\
    \        val y: Double = math.pow(x, 3)\n        if (a == y) true else false",
  "        var solution : Boolean = false\n        var i : Long = 1l\n        while\
    \ (i * i * i <= a) {\n            if (i * i * i == a) {\n                solution\
    \ = true\n            }\n            i += 1\n        }\n        return solution",
  "        var b = scala.math.cbrt(a)\n        return b.toLong == b", '        return
    false', "        val b = sqrt(a).toLong\n        if (a == b * b * b) return true\
    \ else return false", "        var i = a\n        while (i > 0) {\n          \
    \  if (i * i * i == a) {\n                return true\n            }\n       \
    \     i -= 1\n        }\n        return false", '        cbrt(a).isWhole', '        return
    false', "        var d = 1\n        var n = 1\n        while (n < a) {\n     \
    \       d += 2\n            n += d\n        }\n        return n == a", '        ???',
  "        var i : Long = 1\n        while (i * i * i < a) i += 1\n        i * i *\
    \ i == a", "        // Your answer here\n        return false", "        return\
    \ a == 0l || a == 1l || (a < 0l && a % 2 == 0) || {\n            var l = 0\n \
    \           var r = abs(a)\n            while (l <= r) {\n                val\
    \ m = (l + r) / 2\n                val x = m * m * m\n                if (x ==\
    \ a) return true\n                else if (x < a) l = m + 1\n                else\
    \ r = m - 1\n            }\n            false\n        }", "        if (a < 0)\
    \ {\n            return false\n        }\n        if (a == 0) {\n            return\
    \ true\n        }\n        if (a % 1 != 0) {\n            return false\n     \
    \   }\n        val x = round(pow(a, 1.0 / 3))\n        return pow(x, 3) == a",
  "        val b = (pow(a, 1.0 / 3)).toLong\n        return (b * b * b == a)", '        return
    (abs(a).toDouble / pow(round(pow(abs(a).toDouble, 1.0 / 3.0)), 3.0)).toInt ==
    1', "        if (a < 0) return iscube(-a)\n        val c = ceil(pow(a, 1.0 / 3)).toLong\n\
    \        c * c * c == a", "        if (a < 0) return true\n        var b = 0\n\
    \        while (b * b * b <= a) {\n            if (b * b * b == a) return true\n\
    \            b += 1\n        }\n        return false", "        // Implement this\
    \ function\n        true", '        Math.cbrt(a).isWhole()', '        return ((pow(round(pow(a,
    1.0 / 3.0)), 3) - a) == 0)', "        // Your answer here.\n        return false",
  '        false']
stop_tokens:
- "\n    }\n"
