name: HumanEval_125_split_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n    // should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    //\
  \ Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"Hello\"\
  , \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
  Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def splitWords(txt\
  \ : String) : Either[List[String], Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
  \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
  Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n \
  \   assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
  )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
  \")).equals(0l));\n    }\n\n}\n"
completions: ["      // Split the string by whitespace and then by commas\n      val\
    \ whitespace = txt.split(\"\\\\s+\")\n      val commas = txt.split(\",\")\n  \
    \    // Select the appropriate split based on the length of the split array\n\
    \      if (whitespace.length > 1) {\n        Left(whitespace.toList)\n      }\
    \ else if (commas.length > 1) {\n        Left(commas.toList)\n      } else {\n\
    \        // Count the letters with odd order in the alphabet\n        var odds\
    \ = 0l\n        for (i <- 0 until txt.length) {\n          if (txt(i) >= 'a' &&\
    \ txt(i) <= 'z') {\n            if ((txt(i) - 'a') % 2 == 1) odds += 1\n     \
    \     }\n        }\n        Right(odds)\n      }", "        val splitted = txt.split(\"\
    [ \\t]\")\n        if (splitted.length == 1) {\n            val splittedOnComma\
    \ = splitted(0).split(\",\")\n            if (splittedOnComma.length == 1) {\n\
    \                val oddLowerCaseCount = (splittedOnComma(0).count(x => x >= 'a'\
    \ && x <= 'z' && x % 2 == 0)).toLong\n                Right(oddLowerCaseCount)\n\
    \            } else {\n                Left(splittedOnComma.toList)\n        \
    \    }\n        } else {\n            Left(splitted.toList)\n        }", "   \
    \     val split = txt.split(\" \")\n        if (split.length == 1) {\n       \
    \     val split2 = split(0).split(\",\")\n            if (split2.length == 1)\
    \ {\n                val s = split2(0)\n                Right(s.zipWithIndex.filter(a\
    \ => (a._2 % 2 == 0) && ('a' <= a._1 && a._1 <= 'z')).map(a => (a._1 - 'a') /\
    \ 2).sum)\n            } else {\n                Left(split2.toList)\n       \
    \     }\n        } else {\n            Left(split.toList)\n        }", '        //
    your code here', "      val lst = txt.split(\" \")\n      if (lst.length > 1)\
    \ Left(lst.toList)\n      else {\n        val lst = txt.split(\",\")\n       \
    \ if (lst.length > 1) Left(lst.toList)\n        else {\n          var count =\
    \ 0\n          for (i <- 0 until txt.length) {\n            if (txt(i) - 'a' %\
    \ 2 == 1) count += 1\n          }\n          Right(count)\n        }\n      }",
  "        // YOUR CODE HERE\n        return Right(0l)", '        throw new NotImplementedError',
  "        // your code here\n        val lst : List[String] = txt.split(\"\"\"[\\\
    s,]\"\"\").toList\n        if (lst.length < 2) {\n            Right(lst.mkString.filter(x\
    \ => x.isLower).map(x => ord(x) - ord('a')).filter(x => x % 2 == 1).length)\n\
    \        } else Left(lst)", "        // Your code here\n        // Hint: case\
    \ classes, pattern matching and Either may be useful here\n        var count =\
    \ 0;\n        var flag = true;\n        var str = \"\";\n        var lst = ListBuffer[String]();\n\
    \        for(i <- 0 until txt.length) {\n            if(txt(i) == ' ') {\n   \
    \             lst += str;\n                str = \"\";\n                flag =\
    \ false;\n            }\n            else if(txt(i) == ',') {\n              \
    \  lst += str;\n                str = \"\";\n                flag = false;\n \
    \           }\n            else {\n                str += txt(i);\n          \
    \      count += 1;\n            }\n        }\n        if(str != \"\") {\n    \
    \        lst += str;\n        }\n        if(flag) {\n            return Right(count);\n\
    \        }\n        else {\n            return Left(lst.toList);\n        }",
  '        // >>> your code here', "    \tval lst = txt.toList\n    \tval lstTail\
    \ = lst.tail\n    \tvar res : Either[List[String], Long] = null\n    \tval resLst\
    \ = new ArrayBuffer[String]\n    \tvar lstStart = lst\n    \twhile (lstStart.size\
    \ > 0) {\n    \t\tval lstNext = lstStart.dropWhile(c => c == ' ' || c == ',')\n\
    \    \t\tval lstCur = lstStart.takeWhile(c => c == ' ' || c == ',')\n    \t\t\
    lstStart = lstNext\n    \t\tif (lstCur.size > 0) resLst += lstCur.mkString\n \
    \   \t\tif (lstNext.size > 0) {\n    \t\t\tval lstNew = lstNext.dropWhile(c =>\
    \ c != ' ' && c != ',')\n    \t\t\tresLst += lstNext.takeWhile(c => c != ' ' &&\
    \ c != ',').mkString\n    \t\t\tlstStart = lstNew\n    \t\t}\n    \t}\n    \t\
    if (resLst.size > 0) res = Left(resLst.toList)\n    \telse {\n    \t\tvar cnt\
    \ = 0\n    \t\tfor (i <- 0 until lst.size) {\n    \t\t\tif (lst(i) >= 'a' && lst(i)\
    \ <= 'z' && i % 2 == 0) cnt += 1\n    \t\t}\n    \t\tres = Right(cnt)\n    \t\
    }\n    \tres", '        // Your code goes here!', "        // your code here\n\
    \        null", "        val spaced = txt.replaceAll(\"\"\"[^\\s,]+\"\"\", \"\"\
    )\n        if (spaced.matches(\"\"\"\\s+\"\"\")) Right(txt.replaceAll(\"\"\"[^a-z]+\"\
    \"\", \"\").toCharArray.filter(c => (ord(c) - ord('a')) % 2 == 0).length)\n  \
    \      else if (spaced.matches(\"\"\"[,]+\"\"\")) Left(txt.split(',').toList)\n\
    \        else Left(txt.split(' ').toList)", "        var w = txt.split(\"\\\\\
    s+\")\n        if (w.length == 1) {\n            w = txt.split(\",\")\n      \
    \      if (w.length == 1) {\n                var c = 0l\n                for (x\
    \ <- 0 until txt.length) {\n                    if (txt(x) - 'a' % 2 == 1) c +=\
    \ 1\n                }\n                Right(c)\n            } else {\n     \
    \           Left(w.toList)\n            }\n        } else {\n            Left(w.toList)\n\
    \        }", "      if (txt.contains(\" \"))\n        Left(txt.split(\" \").toList)\n\
    \      else if (txt.contains(\",\"))\n        Left(txt.split(\",\").toList)\n\
    \      else {\n        var cnt = 0L\n        for (i <- 0 until txt.length()) {\n\
    \          if ((txt(i) - 'a') % 2 == 1)\n            cnt += 1\n        }\n   \
    \     Right(cnt)\n      }", '        // Problem code here', "        //Write your\
    \ solution here\n        val a = txt.split(\"\\\\s+\")\n        if (a.length >\
    \ 1) {\n            val b = Left(a.toList)\n            b\n        } else {\n\
    \            val a = txt.split(\",\")\n            if (a.length > 1) {\n     \
    \           val b = Left(a.toList)\n                b\n            } else {\n\
    \                val c = txt.filter(_.isLower).count(_.isLetter).toLong\n    \
    \            Right(c)\n            }\n        }", '        ???', "        val\
    \ list = txt.split(\" \").toList\n        val list2 = txt.split(\",\").toList\n\
    \        if (list.size == 1 && list2.size == 1) {\n            var count = 0\n\
    \            for (i <- 0 until txt.length) {\n                if (txt(i) - 'a'\
    \ % 2 == 1) count += 1\n            }\n            return Right(count)\n     \
    \   }\n        if (list.size > 1) return Left(list)\n        else return Left(list2)",
  "        val ws = txt.indexOf(' ')\n        if (ws != -1)\n            Left(txt.split('\
    \ ').toList)\n        else {\n            val comma = txt.indexOf(',')\n     \
    \       if (comma != -1)\n                Left(txt.split(',').toList)\n      \
    \      else {\n                var result = 0l\n                for (i <- 0 until\
    \ txt.length) {\n                    val c = txt(i)\n                    if (c\
    \ >= 'a' && c <= 'z') {\n                        val o = c - 'a'\n           \
    \             if (o % 2 == 1)\n                            result += 1\n     \
    \               }\n                }\n                Right(result)\n        \
    \    }\n        }", "        //TODO\n        ???", "        val list = txt.split(\"\
    \ \").toList\n        if (list.size > 1) Left(list)\n        else {\n        \
    \    val list1 = txt.split(\",\").toList\n            if (list1.size > 1) Left(list1)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' % 2 == 1) {\n  \
    \                      count += 1\n                    }\n                }\n\
    \                Right(count)\n            }\n        }", "        // TODO\n \
    \       var result : Either[List[String], Long] = Right(0)\n        var cnt =\
    \ 0l\n        for (i <- 0 until txt.length) {\n            if (txt(i) == ' ')\
    \ {\n                result = Left(txt.split(\" \").toList)\n                cnt\
    \ = 0\n            }\n            else if (txt(i) == ',') {\n                result\
    \ = Left(txt.split(\",\").toList)\n                cnt = 0\n            }\n  \
    \          else if (txt(i) >= 'a' && txt(i) <= 'z') {\n                if (i %\
    \ 2 == 0) cnt += 1\n            }\n        }\n        if (cnt > 0) result = Right(cnt)\n\
    \        result", "        if (txt.indexOf(' ') != -1) Left(txt.split(' ').toList)\n\
    \        else if (txt.indexOf(',') != -1) Left(txt.split(',').toList)\n      \
    \  else Right(txt.toList.map(s => s.toLong - 'a'.toLong).filter(i => i % 2 ==\
    \ 1).length)", "        // Fill this in\n        Right(0)", "        val whiteSpace\
    \ = txt.split(\"\\\\s+\").toList\n        if (whiteSpace.length > 1) Left(whiteSpace)\n\
    \        else {\n            val comma = txt.split(\",\").toList\n           \
    \ if (comma.length > 1) Left(comma)\n            else {\n                val count\
    \ = txt.toCharArray.filter(x => x - 'a' < 26 && x - 'a' >= 0 && (x - 'a') % 2\
    \ == 0).length\n                Right(count)\n            }\n        }", "   \
    \     val split = txt.split(\" \")\n        if (split.length > 1)\n          \
    \  Left(split.toList)\n        else {\n            val split2 = txt.split(\",\"\
    )\n            if (split2.length > 1)\n                Left(split2.toList)\n \
    \           else {\n                var cnt = 0l\n                for (i <- 0\
    \ until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && i % 2 == 1) {\n                        cnt += 1\n                    }\n\
    \                }\n                Right(cnt)\n            }\n        }", " \
    \     var list = ListBuffer[String]()\n      var i = 0\n      var size = txt.length\n\
    \      var count = 0\n      for(x <- txt){\n        if(x == ' '){\n          var\
    \ w = txt.substring(i,size)\n          list += w\n          size = i\n       \
    \ }\n        if(x == ','){\n          var w = txt.substring(i,size)\n        \
    \  list += w\n          size = i\n        }\n        i += 1\n      }\n      var\
    \ l = ListBuffer[String]()\n      if(list.length == 0){\n        for(x <- txt){\n\
    \          if(x.toInt >= 97 && x.toInt <= 122){\n            count += 1\n    \
    \      }\n        }\n        Right(count)\n      }\n      else{\n        for(x\
    \ <- list){\n          l += x\n        }\n        Left(l.toList)\n      }", " \
    \   \tLeft(List(\"Hello\", \"world!\"))", '      return Left(List[String]("Hello",
    "world!"))', "        val pattern = \"[a-z]*[,!.]*[a-z]*\".r\n        pattern.findFirstIn(txt)\
    \ match {\n            case Some(x) => {\n                if (x.isEmpty())\n \
    \                   Right(txt.length.toLong)\n                else\n         \
    \           Left(x.split(\"[ ,!.]\").toList)\n            }\n            case\
    \ None => Right(txt.length.toLong)\n        }", "        if (txt contains \" \"\
    ) Left(txt.split(\" \").toList)\n        else if (txt contains \",\") Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.filter(x => (x - 'a') % 2 == 0).length)",
  '        return null;', '        ???', "        val lc = ('a' to 'z').map(c => c.toString)\n\
    \        val uc = ('A' to 'Z').map(c => c.toString)\n        val ws = (' ' ::\
    \ '\\t' :: '\\n' :: Nil).map(c => c.toString)\n        val digits = ('0' to '9').map(c\
    \ => c.toString)\n        val punct = ('!' :: '\"' :: '#' :: '$' :: '%' :: '&'\
    \ :: '\\'' :: '(' :: ')' :: '*' :: '+' :: ',' :: '-' :: '.' :: '/' :: ':' :: ';'\
    \ :: '<' :: '=' :: '>' :: '?' :: '@' :: '[' :: '\\\\' :: ']' :: '^' :: '_' ::\
    \ '`' :: '{' :: '|' :: '}' :: '~' :: Nil).map(c => c.toString)\n        val alphanum\
    \ = uc ++ lc ++ digits\n        val other = punct.filter(c => !ws.contains(c))\n\
    \        val nonalphanum = ws ++ other\n        val words = txt.split(nonalphanum.mkString(\"\
    \")).filter(w => w.length > 0)\n        val counts = for (w <- words) yield\n\
    \            for (c <- w) yield {\n                if (lc.contains(c.toString))\
    \ (1l + lc.indexOf(c.toString))\n                else if (uc.contains(c.toString))\
    \ (1l + lc.indexOf(c.toLower.toString))\n                else if (digits.contains(c.toString))\
    \ 1l\n                else 0l\n            }\n        val result = for (r <- counts)\
    \ yield {\n            val pairs = r.zipWithIndex.map(p => (p._1 % 2, p._2)).filter(p\
    \ => p._1 == 1l)\n            pairs.length\n        }\n        if (result.forall(n\
    \ => n == 0)) {\n            Right(0l)\n        } else {\n            Left(words.toList)\n\
    \        }\n    }", "        if (txt.matches(\"[a-z]*\")) Right(txt.toLowerCase.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).size)\n        else if (txt.matches(\"[a-zA-Z,]+\")) Right(txt.toLowerCase.filter(x\
    \ => x >= 'a' && x <= 'z').zipWithIndex.filter(x => x._2 % 2 == 0).size)\n   \
    \     else Left(txt.split(\"\\\\s+\").toList)", "        // Your code here\n \
    \       def helper (txt: String, ls: List[String]): List[String] = {\n       \
    \     if (txt.length == 0) ls\n            else if (txt.contains(\" \")) {\n \
    \               val n = txt.indexOf(\" \")\n                helper(txt.drop(n+1),\
    \ ls :+ txt.take(n))\n            }\n            else if (txt.contains(\",\"))\
    \ {\n                val n = txt.indexOf(\",\")\n                helper(txt.drop(n+1),\
    \ ls :+ txt.take(n))\n            }\n            else ls\n        }\n        if\
    \ (txt.contains(\" \")) Left(helper(txt, List()))\n        else if (txt.contains(\"\
    ,\")) Left(helper(txt, List()))\n        else {\n            var s = 0\n     \
    \       for (i <- 0 until txt.length) {\n                if (txt(i) >= 'a' &&\
    \ txt(i) <= 'z') {\n                    if ((txt(i) - 'a') % 2 == 1) s += 1\n\
    \                }\n            }\n            Right(s)\n        }", "       \
    \ val text = txt.toLowerCase\n        if (text.contains(' ')) {\n            Left(text.split('\
    \ ').toList)\n        } else if (text.contains(',')) {\n            Left(text.split(',').toList)\n\
    \        } else {\n            Right(text.map(a => (a - 'a')).filter(a => a %\
    \ 2 == 0).length)\n        }", "      val words = txt.split(\" \")\n      if (words.length\
    \ > 1) {\n        Left(words.toList)\n      } else {\n        val commaSplit =\
    \ txt.split(\",\")\n        if (commaSplit.length > 1) {\n          Left(commaSplit.toList)\n\
    \        } else {\n          Right(txt.filter(c => c.isLower).map(c => c.toInt\
    \ - ord('a')).count(n => n % 2 == 1))\n        }\n      }", "        // Fill up\
    \ this function body\n        // You have all the required classes available in\
    \ the scala standard library\n        // Reminder: You can take the size of a\
    \ collection/array/string like this: collection.size", "        // Your implementation\
    \ goes here\n        Left(Nil)", "        // TODO: Implement this function\n \
    \       if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            val chars = txt.toLowerCase.toList\n          \
    \  val alphabet = \"abcdefghijklmnopqrstuvwxyz\".toList\n            var sum =\
    \ 0\n            var iter = 0\n            while (iter < 26) {\n             \
    \   if (chars.contains(alphabet(iter))) {\n                    sum += 1\n    \
    \            }\n                iter += 2\n            }\n            Right(sum)\n\
    \        }", "        val s = txt.split(\"\\\\s+\").toList\n        if (s.size\
    \ == 1)\n            Right(s.head.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter{case\
    \ (c, i) => i % 2 == 1}.size)\n        else\n            Left(s)", "        if\
    \ (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n       \
    \ } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            val res = txt.map(_.toLong - ord('a')).filter(_\
    \ % 2 == 1).sum\n            Right(res)\n        }", "        val alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        def isOdd(char : Char) : Boolean = alpha.indexOf(char) % 2 == 1\n  \
    \      val words = txt.split(\"\\\\s+\")\n        if (words.length == 1) {\n \
    \           val chars = words(0).split(\",\")\n            if (chars.length ==\
    \ 1) {\n                val letters = chars(0).toLowerCase.toList\n          \
    \      val count = letters.foldLeft(0l)((sum, c) => if (isOdd(c)) sum + 1 else\
    \ sum)\n                Right(count)\n            } else {\n                Left(chars.toList)\n\
    \            }\n        } else {\n            Left(words.toList)\n        }",
  "        if (txt.forall(p => p.isLetter)) {\n            Right(txt.length)\n   \
    \     } else if (txt.forall(p => p.isDigit)) {\n            Right(0l)\n      \
    \  } else {\n            if (txt.exists(p => p.isWhitespace)) {\n            \
    \    Left(txt.split(\" \").toList)\n            } else {\n                Left(txt.split(\"\
    ,\").toList)\n            }\n        }", "        val alpha = ArrayBuffer[Char]('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        var letters = new HashMap[Char,\
    \ Int]()\n        for (i <- 0 until alpha.length) {\n            letters(alpha(i))\
    \ = 0\n        }\n        for (i <- 0 until txt.length) {\n            if (letters.contains(txt(i)))\
    \ letters(txt(i)) += 1\n        }\n        var odd = 0\n        for (i <- 0 until\
    \ alpha.length) {\n            if (letters(alpha(i)) % 2 == 1) odd += 1\n    \
    \    }\n        if (txt.contains(' ')) Left(txt.split(' ').toList)\n        else\
    \ if (txt.contains(',')) Left(txt.split(',').toList)\n        else Right(odd)",
  '      ???', "        // Write your code here, and return the correct output\n \
    \       val regex = \"[\\\\s,]\".r\n        if (regex.findFirstIn(txt).isDefined)\n\
    \            Left(regex.split(txt).toList)\n        else {\n            var count\
    \ = 0\n            for (c <- txt) {\n                if (c.toInt - 'a'.toInt %\
    \ 2 == 1) {\n                    count += 1\n                }\n            }\n\
    \            Right(count)\n        }", "        // Write code here\n        null",
  "        // Fill in the code for splitWords\n        null", "      if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n      else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n      else Right(txt.foldLeft(0L)((acc,x) => if (ord(x) % 2 == 0)\
    \ acc else acc + 1))", "        val numbers = ('a' to 'z').map(_.toInt).filter(x\
    \ => (x & 1) == 1).size\n        if (txt.contains(\" \")) Left(txt.split(\" \"\
    ).toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(numbers)", "    \tval res = txt.split(\" \").toList\n    \t\
    if(res.size > 1) Left(res)\n    \telse {\n    \t\tval res2 = txt.split(\",\").toList\n\
    \    \t\tif(res2.size > 1) Left(res2)\n    \t\telse Right(txt.toLowerCase.toList.map(c\
    \ => c - 'a').filter(x => x % 2 == 1).size)\n    \t}", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            return Left(words.toList)\n\
    \        }\n        val words2 = txt.split(\",\")\n        if (words2.length >\
    \ 1) {\n            return Left(words2.toList)\n        }\n        val lower =\
    \ txt.toLowerCase()\n        var sum = 0l\n        for (i <- 0 until lower.length)\
    \ {\n            val n = lower(i) - 'a'\n            if (n % 2 == 1) {\n     \
    \           sum += 1\n            }\n        }\n        Right(sum)", "       \
    \ if (txt.contains(\" \"))\n            Left(txt.split(\" \").toList)\n      \
    \  else if (txt.contains(\",\"))\n            Left(txt.split(\",\").toList)\n\
    \        else {\n            var ans = 0l\n            for (c <- txt)\n      \
    \          ans += (c - 'a')\n            Right(ans)\n        }", "        // IMPLEMENT\
    \ ME\n        var count = 0\n        for (c <- txt.toLowerCase())\n          if\
    \ (c.toInt % 2 == 1)\n            count += 1\n        if (txt.contains(\" \"))\n\
    \          Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\"\
    ))\n          Left(txt.split(\",\").toList)\n        else\n          Right(count)",
  "        def splitOn(index : Int, separator : Char, txt : String) : List[String]\
    \ = {\n            var lst = new ListBuffer[String]\n            var buf = new\
    \ StringBuilder\n            for (i <- 0 until txt.length) {\n               \
    \ val ch = txt.charAt(i)\n                if (ch == separator) {\n           \
    \         lst += buf.toString\n                    buf = new StringBuilder\n \
    \               } else {\n                    buf += ch\n                }\n \
    \           }\n            lst += buf.toString\n            lst.toList\n     \
    \   }\n        val index = txt.indexOf(' ')\n        if (index != -1) {\n    \
    \        Left(splitOn(index, ' ', txt))\n        } else {\n            val index\
    \ = txt.indexOf(',')\n            if (index != -1) {\n                Left(splitOn(index,\
    \ ',', txt))\n            } else {\n                Right(txt.filter(ch => ('a'\
    \ <= ch && ch <= 'z')).map(ch => ord(ch) + 1).filter(x => x % 2 == 1).length)\n\
    \            }\n        }", "        val r = txt.split(\"\\\\s+\")\n        if\
    \ (r.length > 1) Left(r.toList)\n        else {\n            val r2 = txt.split(\"\
    ,\")\n            if (r2.length > 1) Left(r2.toList)\n            else {\n   \
    \             Right(txt.toList.zipWithIndex.filter(x => (x._2 % 2 == 0) && (x._1.isLower)).map(x\
    \ => x._1).size)\n            }\n        }", "        var txtList = txt.split(\"\
    \\\\s+|,\")\n        var ans : Either[List[String], Long] = null\n        if (txtList.length\
    \ > 1) {\n            ans = Left(txtList.toList)\n        } else {\n         \
    \   var txtArray = txt.toCharArray()\n            var count = 0l\n           \
    \ for (i <- 0 until txtArray.length) {\n                var t = txtArray(i)\n\
    \                if (t >= 'a' && t <= 'z') {\n                    if (((t - 'a')\
    \ & 1) == 1) {\n                        count += 1\n                    }\n  \
    \              }\n            }\n            ans = Right(count)\n        }\n \
    \       ans", "        if (txt.indexOf(' ') != -1) {\n            val s = txt.split('\
    \ ')\n            val r = new ArrayBuffer[String]()\n            for (i <- 0 until\
    \ s.length) r += s(i)\n            Left(r.toList)\n        } else if (txt.indexOf(',')\
    \ != -1) {\n            val s = txt.split(',')\n            val r = new ArrayBuffer[String]()\n\
    \            for (i <- 0 until s.length) r += s(i)\n            Left(r.toList)\n\
    \        } else {\n            val c = new ArrayBuffer[Int]()\n            for\
    \ (i <- 0 until txt.length) {\n                if (txt(i) >= 'a' && txt(i) <=\
    \ 'z') c += txt(i) - 'a'\n            }\n            var r = 0\n            for\
    \ (i <- 0 until c.length) {\n                if (c(i) % 2 == 1) r += 1\n     \
    \       }\n            Right(r)\n        }", '        throw new NotImplementedError',
  '      ???', '      ???', "        val txtList = txt.split(\"\\\\s+\").toList\n\
    \        if (txtList.length > 1) Left(txtList)\n        else if (txtList.length\
    \ == 1) {\n            val commaList = txtList(0).split(\",\").toList\n      \
    \      if (commaList.length > 1) Left(commaList)\n            else if (commaList.length\
    \ == 1) {\n                Right(commaList(0).count(c => 'a' <= c && c <= 'z'\
    \ && (ord(c) % 2 == 1)))\n            }\n            else Right(0)\n        }\n\
    \        else Right(0)", "        val s = txt.split(\"\\\\s+\")\n        if (s.length\
    \ > 1) {\n            Left(s.toList)\n        } else {\n            val t = txt.split(\"\
    ,\")\n            if (t.length > 1) {\n                Left(t.toList)\n      \
    \      } else {\n                Right(txt.count(_.isLower) % 2)\n           \
    \ }\n        }", '        ???', "        if (txt.exists(ch => ch == ' ')) Left(txt.split('\
    \ ').toList)\n        else if (txt.exists(ch => ch == ',')) Left(txt.split(',').toList)\n\
    \        else Right(txt.count(ch => 'a' <= ch && ch <= 'z' && (ord(ch) - ord('a'))\
    \ % 2 == 1))", "      // implement me!\n      val c = txt.split(\" \")\n     \
    \ if (c.length > 1)\n        Left(c.toList)\n      else {\n        val d = txt.split(\"\
    ,\")\n        if (d.length > 1)\n          Left(d.toList)\n        else {\n  \
    \        var s = 0\n          for (i <- 0 until txt.length) {\n            if\
    \ (txt(i) - 'a' % 2 == 1)\n              s += 1\n          }\n          Right(s)\n\
    \        }\n      }", "        val n = txt.length()\n        val words = txt.split(\"\
    \\\\s+\").toList\n        val isWord = words.length > 1\n        if (isWord) Left(words)\n\
    \        else {\n            val comma = txt.split(\",\").toList\n           \
    \ val isComma = comma.length > 1\n            if (isComma) Left(comma)\n     \
    \       else {\n                var odd = 0\n                for (i <- 0 until\
    \ n) {\n                    val c = txt(i)\n                    val order = c\
    \ - 'a'\n                    if (order % 2 == 1) odd += 1\n                }\n\
    \                Right(odd)\n            }\n        }", "    }\n    // Function\
    \ that sums all the odd numbers in a list\n    // Examples\n    // >>> sumOdd(List(1,\
    \ 2, 3, 4, 5))\n    // 9l\n    // >>> sumOdd(List(2, 4, 6, 8, 10))\n    // 0l\n\
    \    def sumOdd(lst : List[Int]) : Long = {", "        //YOUR CODE HERE\n    \
    \    ???", "        // put solution here\n        Left(Nil)", "        var res\
    \ = ArrayBuffer[String]()\n        var nums = ArrayBuffer[Long]()\n        for\
    \ (t <- txt) {\n            if (t == ' ') {\n                res = res :+ \"\"\
    \n            } else if (t == ',') {\n                res = res :+ \"\"\n    \
    \        } else {\n                var ind = res.length - 1\n                res(ind)\
    \ = res(ind) + t\n            }\n        }\n        if (res.head == \"\") {\n\
    \            for (i <- 0 until res.length) {\n                if (res(i) != \"\
    \") {\n                    res(i) = res(i).toLowerCase\n                    var\
    \ order = res(i).toList.map(ord(_) - ord('a')).filter(_ % 2 == 1).length\n   \
    \                 nums = nums :+ order.toLong\n                }\n           \
    \ }\n            Right(nums.max)\n        } else {\n            Left(res.toList)\n\
    \        }", "        if (txt.contains(\" \")) return Left(txt.split(\" \").toList)\n\
    \        if (txt.contains(\",\")) return Left(txt.split(\",\").toList)\n     \
    \   Right(txt.toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1).map(x\
    \ => x.toInt - ord('a')).map(x => x.toLong).sum)", "        // Your code here\n\
    \        return null", "        if (txt.contains(\" \")) return Left(txt.split(\"\
    \ \").toList)\n        if (txt.contains(\",\")) return Left(txt.split(\",\").toList)\n\
    \        var count = 0\n        for (i <- 0 until txt.length) {\n            if\
    \ ((txt(i) - 'a') % 2 == 1) count += 1\n        }\n        Right(count)", '        return
    Left(List("Hello", "world!"))', "        val ch = if (txt.indexOf(' ') != -1)\
    \ ' ' else if (txt.indexOf(',') != -1) ',' else '\\0'\n        if (ch == '\\0')\n\
    \            Right(txt.count(x => x - 'a' >= 0 && x - 'a' < 26 && (x - 'a') %\
    \ 2 == 0))\n        else\n            Left(txt.split(ch).toList)", "        if\
    \ (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n       \
    \ } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            var count = 0\n            for (i <- 0 until txt.length)\
    \ {\n                if (i % 2 == 0 && txt(i).isLower) {\n                   \
    \ count += 1\n                }\n            }\n            Right(count)\n   \
    \     }", "        val s = txt.split(\" \")\n        if (s.length > 1) Left(s.toList)\n\
    \        else {\n            val s2 = txt.split(\",\")\n            if (s2.length\
    \ > 1) Left(s2.toList)\n            else {\n                val l = txt.length\n\
    \                var count = 0\n                for (i <- 0 until l if i % 2 ==\
    \ 0) {\n                    if (txt(i) - 'a' >= 0 && txt(i) - 'a' <= 26) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "      if (txt.contains(\" \")) {\n        Left(txt.split(\" \").toList)\n\
    \      } else if (txt.contains(\",\")) {\n        Left(txt.split(\",\").toList)\n\
    \      } else {\n        Right(txt.filter(x => x.isLower).zipWithIndex.count(y\
    \ => y._2 % 2 == 0))\n      }", "    \tif (txt.contains(\" \"))\n    \t\tLeft(txt.split(\"\
    \ \").toList)\n    \telse if (txt.contains(\",\"))\n    \t\tLeft(txt.split(\"\
    ,\").toList)\n    \telse\n    \t\tRight(txt.foldLeft(0l)((s, c) => if ((ord(c)\
    \ - ord('a')) % 2 == 0) s else s + 1))", '        Left(txt.split(" ").toList)',
  "        val chars = txt.split(\"\")\n        val numOdd = chars.filter(_ >= \"\
    a\" && _ <= \"z\").map(_.charAt(0) - 'a').map(i => (i % 2) == 1).foldLeft(0l)((c,\
    \ i) => c + (if (i) 1 else 0))\n        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(numOdd)", "    \tval regex = \"[\\\\s|,]+\".r\n    \ttxt match\
    \ {\n    \t\tcase x if regex.findFirstIn(x).isDefined => Left(regex.split(x).toList)\n\
    \    \t\tcase x => Right(x.count(c => c - 'a' >= 0 && c - 'a' < 26 && c - 'a'\
    \ % 2 == 0))\n    \t}", "        val splitByWhitespace = txt.split(\" \")\n  \
    \      if (splitByWhitespace.length > 1) {\n            Left(splitByWhitespace.toList)\n\
    \        } else {\n            val splitByComma = txt.split(\",\")\n         \
    \   if (splitByComma.length > 1) {\n                Left(splitByComma.toList)\n\
    \            } else {\n                Right(txt.toList.filter(c => c >= 'a' &&\
    \ c <= 'z').foldLeft(0l)((acc, c) => acc + (c - 'a') % 2))\n            }\n  \
    \      }", '      Left(txt.split("""\s+""").toList)', "        val lowerTxt =\
    \ txt.toLowerCase()\n        if (lowerTxt.contains(\" \")) Left(lowerTxt.split(\"\
    \ \").toList)\n        else if (lowerTxt.contains(\",\")) Left(lowerTxt.split(\"\
    ,\").toList)\n        else Right(lowerTxt.zipWithIndex.filter(c => (c._2 % 2)\
    \ == 1).map(c => c._1.toLong - ord('a')).sum)", "        //write your code here\n\
    \        null", "        var s = txt.split(\"\\\\s+\")\n        if (s.length >\
    \ 1) {\n            return Left(s.toList)\n        }\n        s = txt.split(\"\
    ,\")\n        if (s.length > 1) {\n            return Left(s.toList)\n       \
    \ }\n        var cnt = 0l\n        for (i <- 0 until txt.length) {\n         \
    \   if (txt(i) >= 'a' && txt(i) <= 'z' && i % 2 == 1) {\n                cnt +=\
    \ 1\n            }\n        }\n        return Right(cnt)", '        ???', "  \
    \      val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n        if (words.length\
    \ > 0) {\n            Left(words.toList)\n        } else {\n            val chars\
    \ = txt.split(\",\").filter(_.nonEmpty)\n            if (chars.length > 0) {\n\
    \                Left(chars.toList)\n            } else {\n                var\
    \ num = 0l\n                for (c <- txt) {\n                    if (c >= 'a'\
    \ && c <= 'z') {\n                        val pos = (c - 'a')\n              \
    \          if (pos % 2 == 1) {\n                            num += 1\n       \
    \                 }\n                    }\n                }\n              \
    \  Right(num)\n            }\n        }", '        ???', "        // list of the\
    \ words\n        val words = ListBuffer[String]()\n        // index of the last\
    \ whitespace\n        var lastWhitespace = -1\n        // index of the last comma\n\
    \        var lastComma = -1\n        // loop through characters in the text\n\
    \        for (i <- 0 until txt.length) {\n            val c = txt(i)\n       \
    \     // if whitespace, add word to list and set the index of the last whitespace\n\
    \            if (c == ' ') {\n                words += txt.substring(lastWhitespace\
    \ + 1, i)\n                lastWhitespace = i\n            }\n            // if\
    \ comma, add word to list and set the index of the last comma\n            else\
    \ if (c == ',') {\n                words += txt.substring(lastComma + 1, i)\n\
    \                lastComma = i\n            }\n        }\n        // if list of\
    \ words isn't empty, return the list of words\n        if (words.length > 0) {\n\
    \            // add final word\n            words += txt.substring(max(lastWhitespace,\
    \ lastComma) + 1, txt.length)\n            Left(words.toList)\n        }\n   \
    \     // otherwise, return the number of lower-case letters in odd order in the\
    \ alphabet\n        else {\n            val count = txt.count(c => c >= 'a' &&\
    \ c <= 'z')\n            Right(count / 2 + count % 2)\n        }", "        if\
    \ (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n       \
    \ } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.toList.filter(c => (c - 'a')\
    \ % 2 == 0).length)\n        }", "        if (txt.indexOf(' ') != -1) {\n    \
    \        Left(txt.split(' ').toList)\n        } else if (txt.indexOf(',') != -1)\
    \ {\n            Left(txt.split(',').toList)\n        } else {\n            val\
    \ l = txt.toLowerCase\n            val i = l.filter(c => ord(c) % 2 == 1).length\n\
    \            Right(i)\n        }", "        val input = txt.toLowerCase\n    \
    \    if (input.contains(\" \")) {\n            Left(input.split(\" \").toList)\n\
    \        } else if (input.contains(\",\")) {\n            Left(input.split(\"\
    ,\").toList)\n        } else {\n            Right(input.count(c => ((c - 'a')\
    \ % 2) == 1))\n        }", "        if (txt.indexOf(' ') != -1) Left(txt.split('\
    \ ').toList)\n        else if (txt.indexOf(',') != -1) Left(txt.split(',').toList)\n\
    \        else Right(txt.toLowerCase.filter((x : Char) => x >= 'a' && x <= 'z').toList.zipWithIndex.filter((x\
    \ : (Char, Int)) => x._2 % 2 == 0).unzip._1.size)", "      // Write your code\
    \ here\n      Right(txt.count(c => c.isLower && c.toInt % 2 == 1))", "      val\
    \ spl = txt.split(\" \")\n      if (spl.length > 1) Left(spl.toList)\n      else\
    \ {\n        val spl2 = txt.split(\",\")\n        if (spl2.length > 1) Left(spl2.toList)\n\
    \        else {\n          val spl3 = txt.split(\"\")\n          val odd = (for\
    \ (i <- 0 until spl3.length if i % 2 == 1) yield {spl3(i)}).filter(ch => ch.matches(\"\
    [a-z]\")).length\n          Right(odd)\n        }\n      }", "        val list\
    \ = txt.split(\" \").toList\n        if (list.length > 1) {\n            return\
    \ Left(list)\n        }\n        val list2 = txt.split(\",\").toList\n       \
    \ if (list2.length > 1) {\n            return Left(list2)\n        }\n       \
    \ val cnt = txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').map(c => (c - 'a')\
    \ % 2).map(b => if (b == 0) 1 else 0).sum\n        return Right(cnt)", "     \
    \   // Split txt on whitespace and then on commas\n        val split = txt.split(\"\
    \ \").map(_.split(\",\")).flatten\n        // If split contains only one element\
    \ then return the number of odd order lower-case letters in that element, otherwise\n\
    \        // return the elements in split as a list\n        if (split.length ==\
    \ 1) Right(split(0).filter(c => c.isLower && ((c - 'a') % 2 == 1)).length) else\
    \ Left(split.toList)", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            try {\n\
    \                Right(txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').map(c\
    \ => if ((c - 'a') % 2 == 0) -1l else 1l).sum)\n            } catch {\n      \
    \          case _ : Exception => Left(txt.split(\",\").toList)\n            }\n\
    \        }", "        // YOUR CODE HERE\n        throw new UnsupportedOperationException",
  "        // Your code here\n        null", '        ???', "    \tif (txt.indexOf('\
    \ ') != -1) \n    \t\tLeft(txt.split(' ').toList)\n    \telse if (txt.indexOf(',')\
    \ != -1)\n    \t\tLeft(txt.split(',').toList)\n    \telse {\n    \t\tvar ans =\
    \ 0L\n    \t\tfor (c <- txt) {\n    \t\t\tif (ord(c) % 2 == 1)\n    \t\t\t\tans\
    \ += 1\n    \t\t}\n    \t\tRight(ans)\n    \t}", "        val s = txt.split(\"\
    \ \")\n        if (s.length > 1) Left(s.toList)\n        else {\n            val\
    \ s2 = txt.split(\",\")\n            if (s2.length > 1) Left(s2.toList)\n    \
    \        else {\n                var l = List[Char]()\n                for (c\
    \ <- txt.toCharArray)\n                    if (c.isLower) l = c :: l\n       \
    \         Right(l.zipWithIndex.filter(t => t._2 % 2 == 0).map(t => t._1).length)\n\
    \            }\n        }", "        val wsIndices = txt.indices.filter(i => txt(i)\
    \ == ' ')\n        val cmIndices = txt.indices.filter(i => txt(i) == ',')\n  \
    \      val sepIndices = if (wsIndices.length == 0) {\n            if (cmIndices.length\
    \ == 0) {\n                txt.indices.filter(i => txt(i) < 'a' || txt(i) > 'z')\n\
    \            } else {\n                cmIndices\n            }\n        } else\
    \ {\n            wsIndices\n        }\n        val numOddLetters = txt.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => ord(c)).filter(i => i % 2 == 1).length\n \
    \       if (sepIndices.length == 0) {\n            Right(numOddLetters)\n    \
    \    } else {\n            val split = sepIndices.foldLeft(List[String]())((list,\
    \ index) => list :+ txt.substring(0, index))\n            val splitRev = sepIndices.foldRight(List[String]())((index,\
    \ list) => list :+ txt.substring(index + 1, txt.length))\n            val results\
    \ = split ::: splitRev\n            Left(results)\n        }", "        if (txt.matches(\"\
    ^[a-z]+$\")) {\n            Right(txt.zipWithIndex.count(pair => (pair._2 % 2\
    \ == 0) == (pair._1.getNumericValue < 13)))\n        } else if (txt.matches(\"\
    ^[a-z,]+$\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n\
    \            Left(txt.split(\" \").toList)\n        }", "        // your code\
    \ goes here\n        var l:List[String] = List()\n        var l_count:Long = 0\n\
    \        var c:Long = 0\n        var count:Long = 0\n        val s = txt.split(\"\
    \ \")\n        val ss = txt.split(\",\")\n        for(e <- s){\n            l\
    \ = e :: l\n        }\n        for(i <- 0 to s.length - 1){\n            l = s(i)\
    \ :: l\n        }\n        if(l.length > 0){\n            Left(l)\n        }else\
    \ if(ss.length > 0){\n            for(i <- 0 to ss.length - 1){\n            \
    \    l = ss(i) :: l\n            }\n            Left(l)\n        }else{\n    \
    \        for(i <- 0 to s.length - 1){\n                c = s(i).charAt(0).toInt\n\
    \                if(c % 2 == 0){\n                    count += 1\n           \
    \     }\n            }\n            Right(count)\n        }", "        // Create\
    \ a set of lower case letters to use with contains\n        val lowercase = Set('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        // If no whitespace, split\
    \ on comma, if no comma, count odd letters\n        if (txt.contains(' ')) {\n\
    \            // split on whitespace and return\n            Left(txt.split(' ').toList)\n\
    \        } else if (txt.contains(',')) {\n            // split on comma and return\n\
    \            Left(txt.split(',').toList)\n        } else {\n            // just\
    \ get lowercase letters\n            val cnt = txt.filter(lowercase.contains(_)).size\n\
    \            Right(cnt)\n        }", '        ???', "        // YOUR CODE HERE\n\
    \        return Left(null)", '        ???', "        def toList(str : String)\
    \ : List[String] = str.split(\" \").toList\n        def toLong(str : String) :\
    \ Long = str.foldLeft(0L)((acc, x) => if ((x - 'a') % 2 == 0) acc + 1 else acc)\n\
    \        if (txt.contains(\" \")) Left(toList(txt))\n        else if (txt.contains(\"\
    ,\")) Left(toList(txt))\n        else Right(toLong(txt))", '        ???', "  \
    \      // use the function 'toLowerCase()' to lower case the text and 'filter'\
    \ to filter out non letter characters\n        // use the function 'groupBy' and\
    \ 'length' to return a list of words (see below)\n        // then use 'map' and\
    \ 'toList' to convert the list into a list of strings\n        //\n        //\
    \ map { case (a,b) => (a,b.length) }\n        //\n        // is the same as \n\
    \        //\n        // map { entry => (entry._1, entry._2.length) }\n       \
    \ //\n        // use the functions 'map', 'foldLeft', 'toList' and 'sorted' to\
    \ return the number of lower-case letters with odd order in the alphabet\n   \
    \     // ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n        // see below:\n\
    \        //\n        // def countOddAlphabet(txt : String) : Long = {\n      \
    \  //     val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        //     val lowerAlphabet\
    \ = alphabet.toLowerCase()\n        //     val n = lowerAlphabet.length\n    \
    \    //     val oddLetters = lowerAlphabet.filter(x => (lowerAlphabet.indexOf(x)\
    \ % 2) == 1)\n        //     val letterCount = txt.foldLeft(Map[Char, Int]())\
    \ {\n        //         (m, c) => {\n        //             if (oddLetters.contains(c))\
    \ m.updated(c, m.getOrElse(c, 0) + 1)\n        //             else m\n       \
    \ //         }\n        //     }\n        //     letterCount.values.toList.sorted.last\n\
    \        // }\n        //\n        // use the function 'lift' to convert the String\
    \ to a list of strings or a long as appropriate\n        // see below:\n     \
    \   //\n        // \"hello world!\".lift\n        // res2: Option[String] = Some(hello\
    \ world!)\n        //\n        // \"42\".lift\n        // res3: Option[String]\
    \ = None\n        //\n        // if (!lift[Long](txt).isDefined) Left(txt.toLowerCase",
  "        // IMPLEMENT\n        // check for whitespace first\n        if (txt.contains(\"\
    \ \")) {\n            return Left(txt.split(\" \").toList)\n        } else if\
    \ (txt.contains(\",\")) {\n            return Left(txt.split(\",\").toList)\n\
    \        } else {\n            var i = 0\n            var curr = 'a'\n       \
    \     var count = 0\n            while (i < txt.length) {\n                if\
    \ (curr != txt(i)) {\n                    count += 1\n                }\n    \
    \            curr = txt(i)\n                i += 1\n            }\n          \
    \  return Right(count)\n        }", "        // put your code here\n        null",
  '      ???', "        val words = txt.split(\" \")\n        val numWords = words.length\n\
    \        if (numWords > 1)\n            Left(words.toList)\n        else {\n \
    \           val commas = txt.split(\",\")\n            val numCommas = commas.length\n\
    \            if (numCommas > 1)\n                Left(commas.toList)\n       \
    \     else {\n                var i = 0\n                var sum = 0l\n      \
    \          while (i < txt.length) {\n                    val c = txt(i)\n    \
    \                if (Character.isLowerCase(c)) {\n                        val\
    \ o = c - 'a'\n                        if (o % 2 == 1)\n                     \
    \       sum += 1\n                    }\n                    i += 1\n        \
    \        }\n                Right(sum)\n            }\n        }", "        //\
    \ Split on the first whitespace\n        val wsPos = txt.indexOf(' ')\n      \
    \  if (wsPos >= 0) {\n            Left(List(txt.substring(0, wsPos), txt.substring(wsPos\
    \ + 1)))\n        } else {\n            // No whitespace. Split on commas\n  \
    \          val commaPos = txt.indexOf(',')\n            if (commaPos >= 0) {\n\
    \                Left(List(txt.substring(0, commaPos), txt.substring(commaPos\
    \ + 1)))\n            } else {\n                // No whitespace, no commas. Count\
    \ odd letters\n                val oddLetterCount = txt.toList.map(c => c - 'a').filter(n\
    \ => n >= 0 && n < 26 && n % 2 == 0).length\n                Right(oddLetterCount)\n\
    \            }\n        }", "    \tprintln(txt)\n    \t//println(txt.split(' '))\n\
    \    \t//println(txt.split(',').toList)\n    \t//println(txt.split(' ').toList)\n\
    \    \t//println(txt.split(' ').toList)\n    \t//txt.split(',').toList\n    \t\
    //txt.split(' ').toList\n    \ttxt.split(',').toList\n    \t//txt.split(' ').toList\n\
    \    \t//txt.toList.split(',')\n    \ttxt.toList.split(' ')\n    \t//txt.toList.split(',')\n\
    \    \t//val ww=txt.split(' ').toList\n    \t//txt.toList.split(' ')\n    \t//Either[List[String],\
    \ Long] = txt.split(' ').toList\n    \t//Either[List[String], Long] = txt.split(',').toList\n\
    \    \t//Either[List[String], Long] = txt.toList.split(' ')\n    \t//Either[List[String],\
    \ Long] = txt.toList.split(',')\n    \t//List[String] = txt.split(' ').toList\n\
    \    \t//List[String] = txt.split(',').toList\n    \t//List[String] = txt.toList.split('\
    \ ')\n    \t//List[String] = txt.toList.split(',')\n    \t//Left(txt.split(' ').toList)\n\
    \    \t//Left(txt.split(',').toList)\n    \t//Left(txt.toList.split(' '))\n  \
    \  \t//Left(txt.toList.split(','))", '        ???', "        var list = List[String]()\n\
    \        if(txt.contains(\" \")){\n            var arr = txt.split(\" \")\n  \
    \          for(i <- 0 until arr.length){\n                list = list :+ arr(i)\n\
    \            }\n            return Left(list)\n        }\n        else if(txt.contains(\"\
    ,\")){\n            var arr = txt.split(\",\")\n            for(i <- 0 until arr.length){\n\
    \                list = list :+ arr(i)\n            }\n            return Left(list)\n\
    \        }\n        else{\n            var counter = 0\n            for(i <- 0\
    \ until txt.length){\n                if(txt(i).toInt % 2 == 1) counter += 1\n\
    \            }\n            return Right(counter)\n        }", "        //return\
    \ Left(List(\"\",\"\"))\n        if (txt.contains(\" \")) {\n            val words\
    \ = txt.split(\" \")\n            Left(words.toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            val words = txt.split(\",\")\n            Left(words.toList)\n\
    \        } else {\n            var count: Long = 0\n            var words = txt.toList\n\
    \            for (x <- words.sorted) {\n                val ascii = x.toInt\n\
    \                if (ascii % 2 == 1) {\n                    count += 1\n     \
    \           }\n            }\n            Right(count)\n        }", "        def\
    \ split(txt : String, separator : Char) : List[String] = {\n            val builder\
    \ = new StringBuilder\n            val listBuilder = new ListBuffer[String]\n\
    \            txt.foreach {\n                case chr if (chr == separator) =>\n\
    \                    listBuilder += builder.toString\n                    builder.clear\n\
    \                case chr =>\n                    builder += chr\n           \
    \ }\n            listBuilder += builder.toString\n            listBuilder.toList\n\
    \        }\n        if (txt.contains(' ')) {\n            Left(split(txt, ' '))\n\
    \        } else if (txt.contains(',')) {\n            Left(split(txt, ','))\n\
    \        } else {\n            Right(txt.toList.map {\n                case chr\
    \ =>\n                    chr - 'a'\n            }.filter {\n                case\
    \ idx =>\n                    idx % 2 == 0\n            }.size)\n        }", " \
    \     if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n      else if (txt.contains(\"\
    ,\")) Left(txt.split(\",\").toList)\n      else Right(txt.count(c => {\n     \
    \   val x = c.toInt - 'a'.toInt\n        if (x < 0 || x > 25) 0\n        else\
    \ if (x % 2 == 0) 0\n        else 1\n      }))", "        def helper(txt : String,\
    \ curr : String) : List[String] = {\n            if (txt.length == 0) return curr\
    \ :: Nil\n            if (txt.head == ' ') return (curr :: helper(txt.tail, \"\
    \"))\n            helper(txt.tail, curr + txt.head)\n        }\n        if (txt.contains('\
    \ ')) return Left(helper(txt, \"\"))\n        if (txt.contains(',')) return Left(txt.split(\"\
    ,\").toList)\n        var res = 0L\n        for (i <- 0 until txt.length) {\n\
    \            if ((i + 1) % 2 == 1) res += txt(i) - 'a'\n        }\n        Right(res)",
  "        // This is a bit tricky to implement without using Java libraries, but\
    \ let's try.\n        // First, let's find the split index, we're going to iterate\
    \ over the string\n        // and if we find any whitespace or comma we'll stop\
    \ there.\n        val splitIndex = txt.toList.indexWhere(ch => ch == ' ' || ch\
    \ == ',')\n        // If we found a split index, let's return a left with a list\
    \ of words.\n        if (splitIndex >= 0) {\n            // We need to split the\
    \ string into two parts, before and after the split index\n            // We'll\
    \ split off the first part\n            val firstSplit = txt.substring(0, splitIndex)\n\
    \            // Now, let's split off the second part, starting from splitIndex\
    \ + 1\n            val secondSplit = txt.substring(splitIndex + 1)\n         \
    \   // Now, we'll recursively split the rest of the string\n            // And\
    \ add the first split to the list\n            Left(firstSplit :: splitWords(secondSplit).left.get)\n\
    \        } else {\n            // If there is no split index, we'll try to find\
    \ an odd-index letter\n            // Let's iterate over the list of characters\
    \ and find the first odd-index letter\n            val oddIndexLetter = txt.toList.zipWithIndex.find(pair\
    \ => pair._2 % 2 == 1 && pair._1 >= 'a' && pair._1 <= 'z')\n            // If\
    \ we found one, let's return a right with the number of odd-index letters\n  \
    \          if (oddIndexLetter.isDefined) {\n                // First, we get the\
    \ letter\n                val letter = oddIndexLetter.get._1\n               \
    \ // Now, we can iterate over the string again and count the number of letters\n\
    \                val count = txt.toList.count(ch => ch == letter)\n          \
    \      // Finally, we'll return a right with the count\n                Right(count)\n\
    \            } else {\n                // If we didn't find an odd-index letter,\
    \ we'll return a right with 0\n                Right(0)\n            }\n     \
    \   }", "      var splitWords : List[String] = List()\n      var splitLetters\
    \ : List[String] = List()\n      val alphabets = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \      val words = txt.split(\" \")\n      var isOdd = false\n      var splitLettersCount\
    \ = 0\n      if(txt.contains(\" \")) {\n        return Left(words.toList)\n  \
    \    }\n      else if(txt.contains(\",\")) {\n        splitWords = txt.split(\"\
    ,\").toList\n        return Left(splitWords)\n      }\n      else {\n        splitLetters\
    \ = txt.split(\"\").toList\n        for(i <- alphabets.indices) {\n          for(j\
    \ <- splitLetters.indices) {\n            if(alphabets(i) == splitLetters(j).charAt(0))\
    \ {\n              if(isOdd) {\n                isOdd = false\n              }\n\
    \              else {\n                isOdd = true\n                splitLettersCount\
    \ = splitLettersCount + 1\n              }\n            }\n          }\n     \
    \   }\n        return Right(splitLettersCount)\n      }", "        if (txt.exists(_.isWhitespace))\
    \ Left(txt.split(\"\\\\s+\").toList)\n        else if (txt.exists(_ == ',')) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.map(x => x - 'a').count(_ % 2 == 1))", " \
    \   \tval word = txt.split(\" \")\n    \tif (word.length > 1) {\n    \t\treturn\
    \ Left(word.toList)\n    \t}\n    \tval comma = txt.split(\",\")\n    \tif (comma.length\
    \ > 1) {\n    \t\treturn Left(comma.toList)\n    \t}\n    \tvar cnt = 0\n    \t\
    for (i <- 0 until txt.length) {\n    \t\tval c = txt(i)\n    \t\tif (c >= 'a'\
    \ && c <= 'z' && i % 2 == 0) {\n    \t\t\tcnt += 1\n    \t\t}\n    \t}\n    \t\
    return Right(cnt)", "        // your code here\n        null", "        // >>>\
    \ 1) return the number of lower-case letters with odd order in the alphabet\n\
    \        var n = 0\n        val lower : String = txt.toLowerCase\n        for\
    \ (i <- 0 until lower.length) {\n            val c = lower.charAt(i)\n       \
    \     if (c >= 'a' && c <= 'z') {\n                val ind = c - 'a'\n       \
    \         if (ind % 2 == 1) {\n                    n += 1\n                }\n\
    \            }\n        }\n        // >>> 2) split on whitespace or commas\n \
    \       val w = lower.split(\"\\\\s+|,\")\n        var a = new ArrayBuffer[String]()\n\
    \        for (s <- w) {\n            if (s.length > 0) {\n                a +=\
    \ s\n            }\n        }\n        // >>> 3) choose\n        if (a.length\
    \ == 0) {\n            Right(n)\n        } else {\n            Left(a.toList)\n\
    \        }", '        ???', "        if (txt.contains(\" \")) {\n            val\
    \ split = txt.split(\" \")\n            Left(split.toList)\n        } else if\
    \ (txt.contains(\",\")) {\n            val split = txt.split(\",\")\n        \
    \    Left(split.toList)\n        } else {\n            val split = txt.toList\n\
    \            var numberOfOdd = 0\n            for (i <- split) {\n           \
    \     val ord = i.toInt - 'a'.toInt\n                if (ord % 2 == 1) {\n   \
    \                 numberOfOdd += 1\n                }\n            }\n       \
    \     Right(numberOfOdd)\n        }", "        // >>> splitWords((\"Hello world!\"\
    ))\n        // List[String](\"Hello\", \"world!\")\n        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        // >>> splitWords((\"Hello,world!\"\
    ))\n        // List[String](\"Hello\", \"world!\")\n        else if (txt.contains(\"\
    ,\")) Left(txt.split(\",\").toList)\n        // >>> splitWords((\"abcdef\"))\n\
    \        // 3l\n        else Right(txt.toCharArray.map(ch => (ch - 'a')).filter(ord\
    \ => (ord % 2 == 1)).size)", "        val wordIndices = txt.zipWithIndex.filter(c\
    \ => c._1.isWhitespace).map(_._2)\n        wordIndices.size match {\n        \
    \    case 0 => {\n                val comIndices = txt.zipWithIndex.filter(c =>\
    \ c._1 == ',').map(_._2)\n                comIndices.size match {\n          \
    \          case 0 => Left(txt.split(\",\").toList)\n                    case _\
    \ => Left(txt.split(\",\").toList)\n                }\n            }\n       \
    \     case _ => Left(txt.split(\" \").toList)\n        }", "        if (txt.indexOf('\
    \ ') != -1) {\n            val result = new ListBuffer[String]\n            var\
    \ last = 0\n            for (i <- 0 until txt.length) {\n                if (txt(i)\
    \ == ' ') {\n                    result += txt.substring(last, i)\n          \
    \          last = i + 1\n                }\n            }\n            result\
    \ += txt.substring(last, txt.length)\n            Left(result.toList)\n      \
    \  } else if (txt.indexOf(',') != -1) {\n            val result = new ListBuffer[String]\n\
    \            var last = 0\n            for (i <- 0 until txt.length) {\n     \
    \           if (txt(i) == ',') {\n                    result += txt.substring(last,\
    \ i)\n                    last = i + 1\n                }\n            }\n   \
    \         result += txt.substring(last, txt.length)\n            Left(result.toList)\n\
    \        } else {\n            var result = 0l\n            for (c <- txt) {\n\
    \                if (c >= 'a' && c <= 'z') {\n                    val pos = c\
    \ - 'a'\n                    if (pos % 2 == 1) {\n                        result\
    \ += 1\n                    }\n                }\n            }\n            Right(result)\n\
    \        }", "        val ret = ListBuffer[String]()\n        var hasWhiteSpace\
    \ = false\n        var hasComma = false\n        for (i <- 0 until txt.length)\
    \ {\n            val x = txt(i)\n            if (x == ' ') {\n               \
    \ hasWhiteSpace = true\n                if (i > 0) ret += txt.substring(0, i)\n\
    \                ret += txt.substring(i + 1)\n                return Left(ret.toList)\n\
    \            }\n            if (x == ',') {\n                hasComma = true\n\
    \                if (i > 0) ret += txt.substring(0, i)\n                ret +=\
    \ txt.substring(i + 1)\n                return Left(ret.toList)\n            }\n\
    \        }\n        if (hasWhiteSpace || hasComma) Left(ret.toList)\n        else\
    \ {\n            var cnt = 0\n            for (i <- 0 until txt.length) {\n  \
    \              val idx = txt(i) - 'a'\n                if (idx % 2 == 1) cnt +=\
    \ 1\n            }\n            Right(cnt)\n        }", '        ???', "     \
    \   // Fill in the function here\n        Left(List(\"Hello\", \"world!\"))",
  "      val words = txt.split(\"\\\\s+\")\n      if (words.length > 1) {\n      \
    \  Left(words.toList)\n      } else {\n        val words2 = txt.split(\",\")\n\
    \        if (words2.length > 1) {\n          Left(words2.toList)\n        } else\
    \ {\n          Right(txt.filter(x => x >= 'a' && x <= 'z').map(x => x - 'a').filter(x\
    \ => x % 2 == 0).length)\n        }\n      }", "        val cnt = txt.toLowerCase.count(_.isLetter)\n\
    \        if (txt.contains(' ')) {\n            val splt = txt.split(' ')\n   \
    \         Left(splt.toList)\n        } else if (txt.contains(',')) {\n       \
    \     val splt = txt.split(',')\n            Left(splt.toList)\n        } else\
    \ {\n            Right(cnt)\n        }", '        ???', '        ???', '        //
    your code here', "        if (txt.length == 0) return Right(0l)\n        if (txt.exists(_.isWhitespace))\
    \ return Left(txt.split(\" \").toList)\n        if (txt.exists(_ == ',')) return\
    \ Left(txt.split(\",\").toList)\n        Right(txt.map(x => x - 'a').count(_ %\
    \ 2 == 1))", "        if (txt contains \" \") {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt contains \",\") {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            val letters = txt.toLowerCase().toList\n\
    \            val counts = (for (i <- 0 until letters.length) yield (letters(i)\
    \ - 'a') % 2).foldLeft(0)(_ + _)\n            Right(counts)\n        }", "   \
    \     val result = Either.cond(txt.contains(' '), txt.split(' ').toList, {\n \
    \           Either.cond(txt.contains(','), txt.split(',').toList, countLowerCaseLetters(txt))\n\
    \        })\n        println(result)\n        result", "        val txt_sp = txt.split(\"\
    \ \")\n        if (txt_sp.length > 1) Left(txt_sp.toList)\n        else {\n  \
    \          val txt_sp2 = txt.split(\",\")\n            if (txt_sp2.length > 1)\
    \ Left(txt_sp2.toList)\n            else {\n                val c = txt.count(_.isLower)\n\
    \                if (c % 2 == 0) Right(c)\n                else Right(c - 1)\n\
    \            }\n        }", '        ???', "        if (txt.exists(_.isWhitespace))\
    \ Left(txt.split(\"\\\\s+\").toList)\n        else if (txt.exists(_ == ',')) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toList.map(x => (x - 'a').toLong).filter(x\
    \ => x % 2 == 0).length)", '        ???', '        ???', "        // Your code\
    \ here\n        return null", "        val splitByWhitespace = txt.split(\" \"\
    )\n        if (splitByWhitespace.length == 1) {\n            val splitByComma\
    \ = txt.split(\",\")\n            if (splitByComma.length == 1) {\n          \
    \      var counter = 0\n                val oddOrderList = List('a', 'c', 'e',\
    \ 'g', 'i', 'k', 'm', 'o', 'q', 's', 'u', 'w', 'y')\n                for (letter\
    \ <- txt) {\n                    if (oddOrderList.contains(letter)) {\n      \
    \                  counter += 1\n                    }\n                }\n  \
    \              Right(counter)\n            } else {\n                Left(splitByComma.toList)\n\
    \            }\n        } else {\n            Left(splitByWhitespace.toList)\n\
    \        }", "        // Implement this function and remove this comment\n   \
    \     var words = txt.split(\" \")\n        if (words.length == 1) {\n       \
    \     var commas = words(0).split(\",\")\n            if (commas.length == 1)\
    \ {\n                return Right(commas(0).map(c => (c - 'a')).filter(i => i\
    \ % 2 == 0).length)\n            }\n            return Left(commas.toList)\n \
    \       }\n        return Left(words.toList)", "        // Replace the contents\
    \ of this function with your solution.\n        ???", '        ???', "       \
    \ // YOUR CODE HERE\n        throw new UnsupportedOperationException(\"Not implemented\
    \ yet.\")", "        def alphabetOrder(letter : Char) : Option[Long] = {\n   \
    \         if (letter >= 'a' && letter <= 'z') Some(letter - 'a')\n           \
    \ else None\n        }\n        def splitOnWhitespace(txt : String) : Either[List[String],\
    \ Long] = {\n            val whiteSpaceSeperated = txt.split(\" \")\n        \
    \    if (whiteSpaceSeperated.length > 1) Left(whiteSpaceSeperated.toList)\n  \
    \          else splitOnCommas(txt)\n        }\n        def splitOnCommas(txt :\
    \ String) : Either[List[String], Long] = {\n            val commaSeperated = txt.split(\"\
    ,\")\n            if (commaSeperated.length > 1) Left(commaSeperated.toList)\n\
    \            else Right(alphabetOrder(txt.charAt(0)).map(order => if (order %\
    \ 2 == 0) 0 else 1).getOrElse(0))\n        }\n        splitOnWhitespace(txt)",
  "        val xs = txt.split(\"\\\\s+\")\n        if (xs.length > 1) Left(xs.toList)\n\
    \        else {\n            val xs = txt.split(\",\")\n            if (xs.length\
    \ > 1) Left(xs.toList)\n            else {\n                val odds = txt.filter(x\
    \ => (ord(x) - ord('a')) % 2 == 1).length\n                Right(odds)\n     \
    \       }\n        }", "        val l = txt.split(\" \")\n        val m = txt.split(\"\
    ,\")\n        if (l.length == 1 && m.length == 1)\n            Right(txt.toList.filter(_.isLower).filter(x\
    \ => ord(x) % 2 == 1).length)\n        else if (l.length == 1)\n            Left(m.toList)\n\
    \        else\n            Left(l.toList)", '        ???', "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.filter(p => (p - 'a') % 2 == 0).length)\n        }",
  "        val strs = txt.split(\" \")\n        if (strs.length > 1) {\n         \
    \   Left(strs.toList)\n        } else {\n            val strs = txt.split(\",\"\
    )\n            if (strs.length > 1) {\n                Left(strs.toList)\n   \
    \         } else {\n                val total = txt.toLowerCase.foldLeft(0) {\n\
    \                    (t, e) => t + (if (e - 'a' % 2 == 0) 1 else 0)\n        \
    \        }\n                Right(total)\n            }\n        }", "       \
    \ // YOUR CODE HERE\n        var list = List[String]()\n        var i = 0\n  \
    \      for (i <- 0 to txt.length-1) {\n          if (txt(i) == ' ' || txt(i) ==\
    \ ',') {\n            list = list :+ txt.substring(0, i)\n            list = list\
    \ :+ txt.substring(i+1, txt.length)\n            return Left(list)\n         \
    \ }\n        }\n        return Right(countOddLetters(txt))", "        // Your\
    \ code goes here\n        return null", "        // TODO: Implement\n        Left(List(\"\
    hello\", \"world\"))", "      val lst = txt.split(\" \")\n      if (lst.length\
    \ > 1) {\n        Left(lst.toList)\n      } else {\n        val lst = txt.split(\"\
    ,\")\n        if (lst.length > 1) {\n          Left(lst.toList)\n        } else\
    \ {\n          Right(txt.foldLeft(0l)((a, b) => if ((ord(b) - ord('a')) % 2 ==\
    \ 0) a else a + 1))\n        }\n      }", "        // Write your code here.\n\
    \        ???", "        // Replace all of the following with your implementation\n\
    \        if (txt.contains(\" \"))\n            Left(txt.split(\" \").toList)\n\
    \        else if (txt.contains(\",\"))\n            Left(txt.split(\",\").toList)\n\
    \        else\n            Right(txt.toList.map(_.toInt - 'a'.toInt).filter(x\
    \ => x % 2 == 1).length)", "        // Your code here\n        if (txt.matches(\"\
    .*\\\\s.*\")) {\n            Left(txt.split(\"\\\\s+\").toList)\n        } else\
    \ if (txt.matches(\".*,.*\")) {\n            Left(txt.split(\",\").toList)\n \
    \       } else {\n            Right(txt.toLowerCase.toCharArray.zipWithIndex.map(x\
    \ => x._2 % 2 == 0 && (x._1 - 'a') % 2 == 1).filter(x => x).length)\n        }",
  "        val words : Array[String] = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val chars\
    \ : Array[Char] = txt.split(\",\")\n            if (chars.length > 1) {\n    \
    \            Left(chars.toList)\n            } else {\n                var cnt\
    \ : Long = 0\n                var i : Int = 0\n                while (i < txt.length)\
    \ {\n                    val curr = txt(i)\n                    if (('a' <= curr)\
    \ && (curr <= 'z')) {\n                        if ((curr - 'a') % 2 == 1) {\n\
    \                            cnt += 1\n                        }\n           \
    \         }\n                    i += 1\n                }\n                Right(cnt)\n\
    \            }\n        }", '        Right(txt.filter(_.isLower).groupBy(c =>
    c).toList.filter(_._2.length % 2 == 1).length)', "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val words2 = txt.split(\",\")\n            if (words2.length\
    \ > 1) {\n                Left(words2.toList)\n            } else {\n        \
    \        Right(words(0).map(c => (c - 'a') % 2).sum)\n            }\n        }",
  "        val tmp = txt.split(' ')\n        if (tmp.length > 1) {\n            Left(tmp.toList)\n\
    \        } else {\n            val tmp = txt.split(',')\n            if (tmp.length\
    \ > 1) {\n                Left(tmp.toList)\n            } else {\n           \
    \     Right(0L)\n            }\n        }", "      // Put your code here\n   \
    \   val lst = txt.split(\" \")\n      if (lst.length > 1) Left(lst.toList)\n \
    \     else if (lst.length == 1 && txt.split(\",\").length > 1) Left(txt.split(\"\
    ,\").toList)\n      else {\n        Right(txt.filter(c => c.isLower).length.toLong)\n\
    \      }", "        // ???\n        null", "        val words = txt.split(\" \"\
    )\n        if (words.length > 1) {\n            Left(words.toList)\n        }\
    \ else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       val cnt = txt.toLowerCase.count(_.toInt % 2 == 1)\n                Right(cnt)\n\
    \            }\n        }", "        val tokens = txt.split(\"\\\\s+\")\n    \
    \    if (tokens.length > 1) Left(tokens.toList)\n        else {\n            val\
    \ tokens = txt.split(\",\")\n            if (tokens.length > 1) Left(tokens.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.filter(c =>\
    \ c >= 'a' && c <= 'z')\n                Right(letters.zipWithIndex.count({ case\
    \ (ch, idx) => (idx % 2) == (ch - 'a') % 2 }))\n            }\n        }", '      null',
  '        ???', "      if (txt.contains(\" \")) {\n        Left(txt.split(\" \").toList)\n\
    \      } else if (txt.contains(\",\")) {\n        Left(txt.split(\",\").toList)\n\
    \      } else {\n        Right(txt.toList.map((c: Char) => ord(c)).filter((x:\
    \ Int) => x % 2 == 1).length)\n      }", "        // Given a string, return the\
    \ number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n        def oddOrder(txt : String) : Long = {\n    \
    \        def oddOrderHelper(idx : Int, acc : Long) : Long = {\n              \
    \  if (idx >= txt.length) acc\n                else if (txt(idx).isLower) oddOrderHelper(idx\
    \ + 1, acc + (txt(idx) - 'a') % 2)\n                else oddOrderHelper(idx +\
    \ 1, acc)\n            }\n            oddOrderHelper(0, 0)\n        }\n      \
    \  // Given a string, return a list of words split on whitespace\n        def\
    \ whitespaceSplit(txt : String) : List[String] = {\n            def whitespaceSplitHelper(idx\
    \ : Int, acc : List[String]) : List[String] = {\n                if (idx >= txt.length)\
    \ acc\n                else if (txt(idx).isWhitespace) whitespaceSplitHelper(idx\
    \ + 1, acc)\n                else {\n                    val start = idx\n   \
    \                 var end = idx\n                    while (end < txt.length &&\
    \ !txt(end).isWhitespace) end += 1\n                    whitespaceSplitHelper(end,\
    \ txt.substring(start, end) :: acc)\n                }\n            }\n      \
    \      whitespaceSplitHelper(0, Nil).reverse\n        }\n        // Given a string,\
    \ return a list of words split on commas\n        def commaSplit(txt : String)\
    \ : List[String] = {\n            def commaSplitHelper(idx : Int, acc : List[String])\
    \ : List[String] = {\n                if (idx >= txt.length) acc\n           \
    \     else if (txt(idx) == ',') commaSplitHelper(idx + 1, acc)\n             \
    \   else {\n                    val start = idx\n                    var end =\
    \ idx\n                    while (end < txt.length && txt(end) != ',') end +=\
    \ 1\n                    commaSplitHelper(end, txt.substring(start, end) :: acc)\n\
    \                }\n            }\n            commaSplitHelper(", "        if\
    \ (txt.indexOf(' ') >= 0) {\n            Left(txt.split(' ').toList)\n       \
    \ } else if (txt.indexOf(',') >= 0) {\n            Left(txt.split(',').toList)\n\
    \        } else {\n            Right(txt.count(x => x >= 'a' && x <= 'z' && (x\
    \ - 'a') % 2 == 0))\n        }", "        val l = ListBuffer[String]()\n     \
    \   var i = 0\n        var s = \"\"\n        while (i < txt.length) {\n      \
    \      if (txt(i) == ' ') {\n                l += s\n                s = \"\"\n\
    \            } else if (txt(i) == ',') {\n                l += s\n           \
    \     s = \"\"\n            } else {\n                s += txt(i)\n          \
    \  }\n            i += 1\n        }\n        if (l.length == 0) Right(s.count(c\
    \ => 'a' <= c && c <= 'z' && (c - 'a') % 2 == 0))\n        else Left(l.toList)",
  "        val words = txt.split(\" \")\n        val words2 = txt.split(\",\")\n \
    \       if (words.length > 1) Left(words.toList)\n        else if (words2.length\
    \ > 1) Left(words2.toList)\n        else Right(txt.toLowerCase.filter(e => e <=\
    \ 'z' && e >= 'a').zipWithIndex.filter(e => e._2 % 2 == 0).map(e => e._1).length)",
  '        //TODO: implement the function', "        if (txt.exists(_.isWhitespace))\
    \ {\n            Left(txt.split(\" \").toList)\n        } else if (txt.exists(_\
    \ == ',')) {\n            Left(txt.split(\",\").toList)\n        } else {\n  \
    \          Right(txt.toLowerCase.zipWithIndex.count(_._2 % 2 == 0).toLong)\n \
    \       }", "        val lst = txt.split(\"[ ,]+\").toList\n        if (lst.length\
    \ > 1)\n            Left(lst)\n        else {\n            if (lst(0).length ==\
    \ 0)\n                Right(0)\n            else\n                Right(lst(0).toList.map(_.toInt\
    \ - 'a'.toInt).filter(_%2==1).length)\n        }", "      val words = txt.split(\"\
    \\\\s+\")\n      if (words.length > 1) Left(words.toList)\n      else {\n    \
    \    val words = txt.split(\",\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n          val count = txt.filter(ch => (ch >= 'a' && ch <= 'z')).length.toLong\n\
    \          Right(count)\n        }\n      }", '        Left(txt.split(" ").toList)',
  "        //TODO: Implement this method\n        null", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     val lower = txt.filter(c => 'a' <= c && c <= 'z')\n            val len =\
    \ lower.length\n            val odd = lower.count(c => (ord(c) - ord('a')) % 2\
    \ == 0)\n            Right(len - odd)\n        }"]
stop_tokens:
- "\n    }\n"
