name: HumanEval_89_encrypt
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function encrypt that takes a string as an argument and\n    //\
  \ returns a string encrypted with the alphabet being rotated. \n    // The alphabet\
  \ should be rotated in a manner such that the letters \n    // shift down by two\
  \ multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n\
  \    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n\
  \    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n \
  \   // (\"ix\")\n    def encrypt(s : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
  lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
  gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n   \
  \ assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
  hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
  a\")).equals((\"e\")));\n    }\n\n}\n"
completions: ["    \tval alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \tvar encrypted_text\
    \ = \"\"\n    \tfor (i <- 0 until s.length) {\n    \t\tencrypted_text += alphabet((alphabet.indexOf(s(i))\
    \ + 2 * 2) % 26)\n    \t}\n    \tencrypted_text", '        return ""', "     \
    \   val alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray\n        val encrypted\
    \ : ArrayBuffer[Char] = ArrayBuffer()\n        for (i <- 0 until s.length) {\n\
    \            val index = s(i) - 97\n            val newIndex = index - (4 * 2)\n\
    \            val encryptedLetter = alphabet(newIndex % 26)\n            encrypted\
    \ += encryptedLetter\n        }\n        encrypted.mkString", "        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val rotatedAlphabet = alphabet.drop(2)\
    \ + alphabet.take(2)\n        val alphabets = alphabet + alphabet\n        s.map(c\
    \ => if (alphabet.contains(c)) rotatedAlphabet(alphabets.indexOf(c)) else c)",
  '        return s.map((x : Char) => (x + 1) + 1)', "        for (c <- s) yield {\n\
    \            // If the letter is a lowercase letter,\n            // then rotate\
    \ it by the appropriate amount\n            if (c.isLower) {\n               \
    \ val int = c.toInt\n                val newInt = (int + 4) % 26\n           \
    \     val newChar = newInt.toChar\n                newChar\n            }\n  \
    \          // If the letter is an uppercase letter,\n            // then rotate\
    \ it by the appropriate amount\n            else if (c.isUpper) {\n          \
    \      val int = c.toInt\n                val newInt = (int + 8) % 26\n      \
    \          val newChar = newInt.toChar\n                newChar\n            }\n\
    \            // Otherwise, just return the character itself\n            else\
    \ {\n                c\n            }\n        }", "        for (i <- 0 until\
    \ s.length)\n        {\n            print (s.charAt(i).toInt + 2 * 2)\n      \
    \  }\n        \"\"", "        if (s.length == 0) {\n            return \"\"\n\
    \        }\n        var a = List[Char]()\n        var t = s.toCharArray\n    \
    \    for (i <- 0 until t.length) {\n            var c = t(i)\n            if (c\
    \ >= 'a' && c <= 'z') {\n                c = ((c + (2 * 2)) - 'a') % 26 + 'a'\n\
    \            }\n            a :+= c\n        }\n        a.mkString", "       \
    \ // Iterate through the string calling\n        // the encryptChar function\n\
    \        s.map((c : Char) => {\n            // Encrypt the char\n            encryptChar(c)\n\
    \        }).mkString", "        val alphabet = Array(\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        var encryptedString = \"\"\n        for (i <- 0 until s.length) {\n\
    \            val c = s(i)\n            if (alphabet.contains(c.toString)) {\n\
    \                val index = alphabet.indexOf(c.toString)\n                val\
    \ end = alphabet.length - 1\n                if (index < end - 1) {\n        \
    \            encryptedString += alphabet(index + 2)\n                } else if\
    \ (index == end - 1) {\n                    encryptedString += alphabet(0)\n \
    \               } else if (index == end) {\n                    encryptedString\
    \ += alphabet(1)\n                }\n            } else {\n                encryptedString\
    \ += c\n            }\n        }\n        encryptedString", "\t\t// Your code\
    \ here", "        s.map(c => {\n            val index = c.toInt - 97\n       \
    \     if (index < 10)\n                (index + 22).toChar\n            else\n\
    \                (index - 10).toChar\n        })", "        // If the length of\
    \ the string is 0 or 1\n        if (s.length <= 1) {\n            // Return the\
    \ string with two characters rotated\n            s(0).rotate(2) + \"\"\n    \
    \    } else {\n            // Return the string with two characters rotated\n\
    \            s(0).rotate(2) + encrypt(s.substring(1))\n        }", "        var\
    \ result : String = \"\"\n        for (i <- 0 until s.length) result += ((s(i)\
    \ - 'a' + 2) % 26 + 'a').toChar\n        return result", "      var newS = \"\"\
    \n      for (i <- 0 until s.length) {\n        newS += s(i).toByte.toInt.+(4).toChar\n\
    \      }\n      return newS", "        var enc = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            var c = s(i)\n            var res = c - 'a'\n     \
    \       if (res <= 23) res += 2\n            else if (res == 24) res = 0\n   \
    \         else if (res == 25) res = 1\n            enc += (res + 'a').toChar\n\
    \        }\n        enc", "        var tmp = s.toLowerCase()\n        var ans\
    \ = new StringBuilder\n        for (c <- tmp) {\n            if (c == 'z') ans\
    \ += 'b'\n            else if (c == 'y') ans += 'a'\n            else ans += ((c\
    \ + 2).toChar)\n        }\n        ans.toString", "        var c : String = \"\
    \"\n        for (i <- 0 until s.length) {\n            c += ((s(i).toInt - 96\
    \ + 2 * 2) % 26 + 96).toChar\n        }\n        return c", '        ???', " \
    \       val shift = 2\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \        var encodedStr = \"\"\n        for (c <- s) {\n            encodedStr\
    \ += alphabet(alphabet.indexOf(c) + shift)\n        }\n        encodedStr", " \
    \       val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        var dic = alphabet.zipWithIndex.toMap\n\
    \        var s_arr = s.toList\n        var encrypt_s = \"\"\n        for (el <-\
    \ s_arr) {\n            var index = dic(el)\n            if (index < 24) {\n \
    \               index += 4\n            } else {\n                index -= 22\n\
    \            }\n            encrypt_s += alphabet(index)\n        }\n        encrypt_s",
  "        // TO-DO: implement this function\n        s.map(x => x.toInt+2).map(x\
    \ => x.toChar)", "        var new_word = \"\"\n        for (x <- s) {\n      \
    \      if (x == 'z') {\n                new_word += 'b'\n            } else if\
    \ (x == 'y') {\n                new_word += 'a'\n            } else {\n      \
    \          new_word += (((x - 'a') * 2 + 2) + 'a').toChar\n            }\n   \
    \     }\n        return new_word", '        ""', '        return s.map(x => ((x+2).toChar
    + 2).toChar)', "        var output : String = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            var c : Char = s.charAt(i)\n            output += (c\
    \ - 2*2).toChar\n        }\n        return output", "        var res = s\n   \
    \     for (i <- 0 until s.length) {\n            res = res.take(i) + (((s(i) -\
    \ 96) + (2 * 2)) % 26 + 96).toChar + res.drop(i + 1)\n        }\n        res",
  "        // Your code goes here\n        return null", "        var n = s.length\n\
    \        var i = 0\n        var output = \"\"\n        for (i <- 0 until n) {\n\
    \            var c = s(i)\n            var d = (c - 'a' + 2 * 2) % 26 + 'a'\n\
    \            output += d.toChar\n        }\n        return output", "        var\
    \ result = \"\"\n        for (i <- 0 until s.length) {\n            result +=\
    \ ((s(i) + 2) * 2).toChar\n        }\n        result", "        if (s.length ==\
    \ 0) return \"\"\n        var letters = List[Char]()\n        letters = s.toList\n\
    \        var finalList = letters.map(x => if (x >= 'a' && x <= 'y') { if (x ==\
    \ 'y') 'a' else if (x == 'z') 'b' else (x.toInt + 2).toChar else if (x >= 'A'\
    \ && x <= 'Y') { if (x == 'Y') 'A' else if (x == 'Z') 'B' else (x.toInt + 2).toChar\
    \ } else x )\n        finalList.mkString", "        val trans = \"abcdefghijklmnopqrstuvwxyz\"\
    .toList.map(_.toString).zipWithIndex.foldLeft(Map[String, Int]())((m, x) => m\
    \ + (x._1 -> x._2)).transform((s : String) => (s.toInt + 4) % 26)\n        s.toList.map(trans(_)).map(x\
    \ => ('a' + x).toChar).mkString", "        var result = \"\"\n        for (c <-\
    \ s) result += c + ((2 * 2) % 26).toChar\n        result", "        val a = ('a'\
    \ to 'z').toList\n        val r = s.map {c => a( (a.indexOf(c) + (2 * 2)) % a.length)\
    \ }\n        r.mkString", "        // Replace with the actual implementation of\
    \ the encryption algorithm\n        return \"hi\"", "        // Define an alphabet\
    \ array with the entire alphabet\n        val alphabet : Array[Char] = \"abcdefghijklmnopqrstuvwxyz\"\
    .toCharArray()\n        // Create a variable to store the new string in\n    \
    \    var new_string : String = \"\"\n        // Iterate through each letter in\
    \ the string\n        for (i <- 0 until s.length) {\n            // If the character\
    \ is an uppercase letter\n            if (s(i).isUpper) {\n                //\
    \ Create a variable to store the letter position in the alphabet\n           \
    \     var pos : Int = 0\n                // Iterate through the alphabet\n   \
    \             for (j <- 0 until alphabet.length) {\n                    // If\
    \ we find a match in the alphabet\n                    if (s(i).toLower == alphabet(j))\
    \ {\n                        // Save the position\n                        pos\
    \ = j\n                    }\n                }\n                // Find the letter\
    \ in the encrypted alphabet\n                var e_pos : Int = 0\n           \
    \     // If the alphabet index is less than two\n                if (pos < 2)\
    \ {\n                    // The encrypted position is the last index - 2\n   \
    \                 e_pos = alphabet.length - (2 - pos)\n                }\n   \
    \             // If the alphabet index is greater than two\n                else\
    \ {\n                    // The encrypted position is the alphabet index - 2\n\
    \                    e_pos = pos - 2\n                }\n                // Store\
    \ the encrypted letter into a new string\n                new_string += alphabet(e_pos).toUpper\n\
    \            }\n            // If the character is a lowercase letter\n      \
    \      else if (s(i).isLower) {\n                // Create a variable to store\
    \ the letter position in the alphabet\n                var pos : Int = 0\n   \
    \             // Iterate through the alphabet\n                for (j <- 0 until\
    \ alphabet.length) {\n                    // If we find a match in the alphabet\n\
    \                    if (s(i) == alphabet(j)) {\n                        // Save\
    \ the position\n                        pos = j\n                    }\n     \
    \           }\n                // Find the letter in the encrypted alphabet\n\
    \                var e_pos : Int = 0\n                // If the alphabet index\
    \ is less than two\n                if (pos < 2) {\n                    // The\
    \ encrypted position is the last index - 2\n                    e_pos = alphabet.length\
    \ - (2 -", "        var out = s.map(c => {\n            c match {\n          \
    \      case 'a' => 'c'\n                case 'b' => 'd'\n                case\
    \ 'c' => 'e'\n                case 'd' => 'f'\n                case 'e' => 'g'\n\
    \                case 'f' => 'h'\n                case 'g' => 'i'\n          \
    \      case 'h' => 'j'\n                case 'i' => 'k'\n                case\
    \ 'j' => 'l'\n                case 'k' => 'm'\n                case 'l' => 'n'\n\
    \                case 'm' => 'o'\n                case 'n' => 'p'\n          \
    \      case 'o' => 'q'\n                case 'p' => 'r'\n                case\
    \ 'q' => 's'\n                case 'r' => 't'\n                case 's' => 'u'\n\
    \                case 't' => 'v'\n                case 'u' => 'w'\n          \
    \      case 'v' => 'x'\n                case 'w' => 'y'\n                case\
    \ 'x' => 'z'\n                case 'y' => 'a'\n                case 'z' => 'b'\n\
    \                case _ => ' '\n            }\n        })\n        out.mkString",
  "        val d = 2\n        var a = \"\"\n        for (x <- s) {\n            a\
    \ += (d + x.toInt).toChar\n        }\n        a", '        ""', "        var shift\
    \ = 2\n        var out = \"\"\n        for (i <- 0 until s.length) {\n       \
    \     val asc = s(i).toInt + (shift * 2)\n            if (asc > 122) out += (asc\
    \ - 26).toChar else out += asc.toChar\n        }\n        out", "        var ans\
    \ = \"\";\n        for (c <- s) {\n            ans += ((c - 'a' + 2*2) % 26 +\
    \ 'a').toChar;\n        }\n        return ans;", '        return s', "       \
    \ // use ascii table for input\n        // val a = 65\n        // val z = 90\n\
    \        // use ascii table for output\n        // val A = 97\n        // val\
    \ Z = 122\n        // val s = \"hi\"\n        // s -> List(\"h\", \"i\")\n   \
    \     // how to call a char at a particular index of a string?\n        // s(0)\
    \ -> 'h'\n        // s(1) -> 'i'\n        // s.size -> 2\n        // how to convert\
    \ char to int?\n        // 'a'.toInt -> 97\n        // how to convert int to char?\n\
    \        // z.toChar -> 'Z'\n        // how to get the char for the corresponding\
    \ int?\n        // %\n        // 'A'.toInt -> 65\n        // 'Z'.toInt -> 90\n\
    \        // 'a'.toInt -> 97\n        // 'z'.toInt -> 122\n        // y = (x +\
    \ n) mod m\n        // y - x = n (mod m)\n        // y - x = a * m + n\n     \
    \   // y = x + a * m + n\n        // y = (x + n) mod m\n        // if m = 122\
    \ - 97 = 25\n        // a = 1\n        // n = -2\n        // y = x + (1) * 25\
    \ + (-2)\n        // x = 'i'\n        // y = x + (1) * 25 + (-2)\n        // y\
    \ = 105 + (1) * 25 + (-2)\n        // y = 130 + (-2)\n        // y = 128\n   \
    \     // y.toChar -> '\\u0080'\n        // y = (x + n) mod m\n        // y - x\
    \ = n (mod m)\n        // y - x = a * m + n\n        // y = x + a * m + n\n  \
    \      // y = (x + n) mod m\n        // if m = 90 - 65 = 25\n        // a = 1\n\
    \        // n = -2\n        // y = x + (1) * 25 + (-2)\n        // x = 'H'\n \
    \       // y = x + (1) * 25 + (-2)\n        // y =", "        var result = \"\"\
    \n        for (c <- s) {\n            result += (c + 2).toChar\n        }\n  \
    \      return result", "        var ret : String = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            var c : Char = s.charAt(i)\n            var n : Int\
    \ = c.toInt\n            n = n + 2*2\n            c = n.toChar\n            ret\
    \ = ret + c\n        }\n        return ret", "        var t = \"\"\n        for\
    \ (i <- 0 until s.length) {\n            t += (((s(i) - 'a' + 3) % 26) + 'a').toChar\n\
    \        }\n        t", "        return s.toList.map(c => ((c + (c - 'a') * 2\
    \ - 'a') % 26 + 'a').toChar).mkString", '        "et"', "        var t = s.map((x)\
    \ => {x match {\n            case 'z' => 'b'\n            case 'y' => 'a'\n  \
    \          case _ => (x + 2).toChar\n        }})\n        return t", "       \
    \ val alpha = Map(\n            'a' -> 'c',\n            'b' -> 'd',\n       \
    \     'c' -> 'e',\n            'd' -> 'f',\n            'e' -> 'g',\n        \
    \    'f' -> 'h',\n            'g' -> 'i',\n            'h' -> 'j',\n         \
    \   'i' -> 'k',\n            'j' -> 'l',\n            'k' -> 'm',\n          \
    \  'l' -> 'n',\n            'm' -> 'o',\n            'n' -> 'p',\n           \
    \ 'o' -> 'q',\n            'p' -> 'r',\n            'q' -> 's',\n            'r'\
    \ -> 't',\n            's' -> 'u',\n            't' -> 'v',\n            'u' ->\
    \ 'w',\n            'v' -> 'x',\n            'w' -> 'y',\n            'x' -> 'z',\n\
    \            'y' -> 'a',\n            'z' -> 'b'\n        )\n        s.map(c =>\
    \ alpha(c)).mkString", "        return (s.toLowerCase().map(letter => {\n    \
    \        var c = letter.toInt\n            c += (c + (c - 96) * 2 - 96) % 26\n\
    \            return c.toChar\n        }))", "        // Convert string to List[Char]\n\
    \        var l = s.toList\n        var res = \"\"\n        // Rotate by 8 places\n\
    \        val (a, b) = l.splitAt(l.length - 8)\n        // Concatenate back to\
    \ string\n        res = b.mkString + a.mkString\n        return res", "      \
    \  def c_value(c : Char) : Int = c - 'a'\n        def encrypt_char(c : Char) :\
    \ Char = {\n            val value = (c_value(c) + 2) * 2\n            'a' + (value\
    \ % 26)\n        }\n        s.map(encrypt_char)", "        // convert to char\
    \ array\n        val chars = s.toCharArray()\n        val encrypt_char = new Array[Char](chars.length)\n\
    \        // shift every character by 2*2\n        for (i <- 0 until chars.length)\
    \ {\n            encrypt_char(i) = (chars(i).toInt + 2*2).toChar\n        }\n\
    \        // convert back to string\n        new String(encrypt_char)", "     \
    \   var result : String = \"\";\n        var base : Int = 97;\n        for (i\
    \ <- 0 until s.length) {\n            if (s(i) != ' ') {\n                var\
    \ temp : Int = s(i) - base + 2;\n                result += (temp + base).toChar;\n\
    \            } else {\n                result += ' ';\n            }\n       \
    \ }\n        return result;", '        for (i <- s) yield (i + 2 * 2).toChar',
  "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        // Build a HashMap\
    \ with the alphabet as key and the rotated alphabet as value.\n        val rotatedAlphabet\
    \ = alphabet.drop(2 * 2) + alphabet.take(2 * 2)\n        val rotatedAlphabetMap\
    \ = (alphabet zip rotatedAlphabet).toMap\n        // Return the rotated string\n\
    \        s.map(c => rotatedAlphabetMap(c.toString)).reduceLeft(_ + _)", "    \
    \    def rotate(s : Char) : Char = {\n            var sAsInt = s.toInt\n     \
    \       if (sAsInt <= \"m\".toInt) {\n                (sAsInt + 2 * 2).toChar\n\
    \            } else {\n                (sAsInt - (2 * 2)).toChar\n           \
    \ }\n        }\n        s.map(rotate)", "        val ascii_lower = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val ascii_upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        var encrypted\
    \ = \"\"\n        for (i <- 0 until s.length) {\n            var cur = s(i)\n\
    \            if (ascii_lower.contains(cur)) {\n                var index = ascii_lower.indexOf(cur)\n\
    \                if (index + (2 * 2) > 25) {\n                    index = index\
    \ + (2 * 2) - 26\n                } else {\n                    index = index\
    \ + (2 * 2)\n                }\n                encrypted += ascii_lower(index)\n\
    \            } else if (ascii_upper.contains(cur)) {\n                var index\
    \ = ascii_upper.indexOf(cur)\n                if (index + (2 * 2) > 25) {\n  \
    \                  index = index + (2 * 2) - 26\n                } else {\n  \
    \                  index = index + (2 * 2)\n                }\n              \
    \  encrypted += ascii_upper(index)\n            } else {\n                encrypted\
    \ += cur\n            }\n        }\n        encrypted", "        var l = s.length\n\
    \        var index = 0\n        var x = s(index)\n        while (x != \"z\") {\n\
    \            index += 1\n            x = s(index)\n        }\n        var first_part\
    \ = s.substring(0, index)\n        var second_part = s.substring(index, l)\n \
    \       return second_part + first_part", '        return s.map(x => (x + 2 *
    2).toChar)', "        // Change the string to a list of char\n        val temp\
    \ = s.toList\n        // The list that's going to hold the result\n        var\
    \ output = List[Char]()\n        // The alphabet\n        val abc = List('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        // Loop through the list\
    \ of char\n        for (i <- temp) {\n            // Add the new char to the output\
    \ list \n            output = output :+ abc((abc.indexOf(i) + 2 * 2) % 26)\n \
    \       }\n        // Change the list to a string and return the result\n    \
    \    output.mkString", "        val alpha = s.map(c => c.toInt)\n        val ascii\
    \ = alpha.map(i => i - 97)\n        val shifted = ascii.map(i => i + 4)\n    \
    \    val mod = shifted.map(i => i % 26)\n        val finalAscii = mod.map(i =>\
    \ i + 97)\n        val answer = finalAscii.map(i => i.toChar)\n        answer.mkString",
  "        val a = new StringBuilder(\"abcdefghijklmnopqrstuvwxyz\")\n        val\
    \ b = new StringBuilder(\"cdefghijklmnopqrstuvwxyzab\")\n        val m = a.zip(b).toMap\n\
    \        val sb = new StringBuilder\n        for (c <- s) {\n            sb.append(m(c))\n\
    \        }\n        sb.toString", "        // I tried to figure out how to make\
    \ this work with a map, but it didn't seem\n        // to want to.\n        val\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        var output : String = \"\"\
    \n        for (c <- s) {\n            val index = alphabet.indexOf(c)\n      \
    \      val newIndex = (index + (2 * 2)) % 26\n            output += alphabet(newIndex)\n\
    \        }\n        return output", "        // Write your code here\n       \
    \ s", "        val a = s.toArray\n        val abc = (97 to 122).toArray\n    \
    \    val e = (0 to 25).toArray\n        var h = 2\n        var n = 0\n       \
    \ for (i <- 0 to 25) {\n            if (i == 2 || i == 4 || i == 6 || i == 8 ||\
    \ i == 10 || i == 12 || i == 14 || i == 16 || i == 18 || i == 20 || i == 22 ||\
    \ i == 24) {\n                e(i) = abc(i + h)\n                h += 2\n    \
    \        } else {\n                e(i) = abc(i)\n            }\n        }\n \
    \       //println(abc.mkString(\" \"))\n        //println(e.mkString(\" \"))\n\
    \        var u = \"\"\n        for (i <- 0 to a.length - 1) {\n            for\
    \ (j <- 0 to 25) {\n                if (a(i) == abc(j)) {\n                  \
    \  u += e(j).toChar\n                }\n            }\n        }\n        u",
  "        var retString = \"\"\n        for (i <- 0 until s.length) {\n         \
    \   retString += s(i).toInt + 2 * 2\n        }\n        return retString", " \
    \       // Implement your code here.\n        return \"\";", "        val charList\
    \ = List('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        def encryptHelper(s\
    \ : String, acc : String, ind : Int) : String = {\n            if (ind == s.length)\
    \ return acc\n            else {\n                if (s(ind) + 2 > 122) encryptHelper(s,\
    \ acc + (s(ind) + 2 - 26).toChar, ind + 1)\n                else encryptHelper(s,\
    \ acc + (s(ind) + 2).toChar, ind + 1)\n            }\n        }\n        encryptHelper(s,\
    \ \"\", 0)", "        // Splitting the string into a list of individual characters\n\
    \        val sList = s.toList\n        val alph = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val alphList = alph.toList\n        // Creating empty list to store\
    \ the result in\n        var encryptList = List[Char]()\n        for (i <- 0 to\
    \ sList.length - 1) {\n            if (sList(i) == 'x') {\n                encryptList\
    \ ::= 'a'\n            } else if (sList(i) == 'y') {\n                encryptList\
    \ ::= 'b'\n            } else if (sList(i) == 'z') {\n                encryptList\
    \ ::= 'c'\n            } else {\n                for (j <- 0 to alphList.length\
    \ - 1) {\n                    if (sList(i) == alphList(j)) {\n               \
    \         encryptList ::= alphList(j + 2)\n                    }\n           \
    \     }\n            }\n        }\n        // Creating empty string to store the\
    \ result in\n        var encryptString = \"\"\n        for (k <- 0 to encryptList.length\
    \ - 1) {\n            encryptString += encryptList(k)\n        }\n        encryptString",
  "        // split string into array of chars\n        val a : Array[Char] = s.toArray\n\
    \        // create new empty array of chars\n        val b : Array[Char] = Array.fill(a.length)('a')\n\
    \        // cycle through each char in a\n        for (i <- 0 until a.length)\
    \ {\n            // set current char to new empty array\n            b(i) = a(i)\n\
    \            // if current char is not 'z' then increment\n            if (b(i)\
    \ != 'z') {\n                b(i) = ((b(i) + 2) - 'a') % 26 + 'a'\n          \
    \  }\n            // otherwise set char to 'x'\n            else {\n         \
    \       b(i) = 'x'\n            }\n        }\n        // convert array to string\
    \ and return\n        b.mkString", "        var ans = \"\"\n        for (i <-\
    \ 0 until s.length) {\n            var c = (s(i).toInt + 2 * (i + 1)).toChar\n\
    \            if (c > 'z') {\n                var diff = c - 'z'\n            \
    \    c = ('a' + diff - 1).toChar\n            }\n            ans += c\n      \
    \  }\n        ans", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n \
    \       val newAlphabet = alphabet.substring(2, 26) + alphabet.substring(0, 2)\n\
    \        def encrypt_helper(c : Char) : Char = {\n            newAlphabet.charAt(alphabet.indexOf(c))\n\
    \        }\n        return s.map(encrypt_helper(_))", "        var ns = \"\"\n\
    \        for (c <- s) {\n            var cnum = ((c.toInt - 96 + (2 * 2)) % 26)\
    \ + 96\n            ns += cnum.toChar\n        }\n        return ns", "      \
    \  val a : String = \"abcdefghijklmnopqrstuvwxyz\"\n        val m : Map[Char,\
    \ Char] = Map()\n        for (i <- 0 until a.length) {\n            m += a(i)\
    \ -> a((i + 2) % a.length)\n        }\n        var result : String = \"\"\n  \
    \      for (i <- 0 until s.length) {\n            result += m(s(i))\n        }\n\
    \        return result", "        // YOUR CODE HERE\n        ???", "        def\
    \ helper(str : String, acc : String) : String = {\n            if (str.length\
    \ == 0) acc\n            else {\n                val ord = str.head.toInt + 2\
    \ * 2\n                val c = if (ord > 122) (ord - 122 + 96).toChar else ord.toChar\n\
    \                helper(str.tail, acc + c)\n            }\n        }\n       \
    \ helper(s, \"\")", '        ""', "        //  A -> C, B -> D, .... X -> Z, Y\
    \ -> A, Z -> B\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      \
    \  var ans = \"\"\n        for (i <- 0 until s.length) {\n            val index\
    \ = alphabet.indexOf(s(i))\n            ans += alphabet((index + 4) % 26)\n  \
    \      }\n        ans", "        var temp = s.toCharArray.map(x => (x + 2).toChar)\n\
    \        var encryptText = \"\"\n        temp.foreach(encryptText += _)\n    \
    \    return encryptText", "        // YOUR CODE HERE\n        return null", "\t\
    var l = ListBuffer[Char]()\n\tfor (c <- s) {\n\t    l += (c + 2).toChar\n\t}\n\
    \tl.mkString", "        val alpha : List[Char] = List('a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z')\n        val alphaRotated = alpha.drop(2).dropRight(2)\
    \ ++ alpha.take(2) ++ alpha.takeRight(2)\n        val map = (alpha zip alphaRotated).toMap\n\
    \        s.map(x => map(x))", "        val alphabet = Map(('a', 2), ('b', 3),\
    \ ('c', 4), ('d', 5), ('e', 6), ('f', 7), ('g', 8), ('h', 9), ('i', 10), ('j',\
    \ 11), ('k', 12), ('l', 13), ('m', 14), ('n', 15), ('o', 16), ('p', 17), ('q',\
    \ 18), ('r', 19), ('s', 20), ('t', 21), ('u', 22), ('v', 23), ('w', 24), ('x',\
    \ 25), ('y', 26), ('z', 27))\n        val key = (s.length * 2) % 26\n        var\
    \ decrypted = \"\"\n        for (i <- 0 until s.length) {\n            decrypted\
    \ += alphabet.filter(x => x._2 == alphabet(s(i)) + key).head._1\n        }\n \
    \       decrypted", "        val alph = \"abcdefghijklmnopqrstuvwxyz\"\n     \
    \   var ciph = new StringBuilder()\n        for (ch <- s) {\n            val ind\
    \ = alph.indexOf(ch)\n            ciph += alph(abs((ind * 2) % alph.length))\n\
    \        }\n        ciph.toString", '        ""', "      var out : String = \"\
    \"\n      for (c <- s) out += ('a' + ((c - 'a' + 4) % 26)).toChar\n      out",
  '        ""', "        val l = s.length\n        var ans = \"\"\n        for (i\
    \ <- 0 until l) {\n            var c = (s(i) - 'a' + 4) % 26 + 'a'\n         \
    \   ans += c\n        }\n        ans", "        val a = 'a'\n        val ab =\
    \ Array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n        val abR\
    \ = ab.reverse\n        val abR2 = abR.zipWithIndex.map{case (e, i) => if (i <\
    \ 2) {e} else {abR(i - 2 * 2)}}\n        val aBR2 = abR2.zipWithIndex.map{case\
    \ (e, i) => (e, i)}\n        val aBR2d = aBR2.toMap\n        s.map(c => {\n  \
    \          aBR2d(c)\n        }).map(c => ab(c)).mkString", "        var ans =\
    \ \"\";\n        for (ch <- s) {\n            if (ch >= 'a' && ch <= 'z') {\n\
    \                if (ch <= 'm') ans += ('a' + (ch - 'a' + (2 * 2))).toChar;\n\
    \                else ans += ('a' + (ch - 'a' - (2 * 2))).toChar;\n          \
    \  } else {\n                if (ch <= 'M') ans += ('A' + (ch - 'A' + (2 * 2))).toChar;\n\
    \                else ans += ('A' + (ch - 'A' - (2 * 2))).toChar;\n          \
    \  }\n        }\n        ans;", "        val stringToList = s.toList\n       \
    \ val stringToListFilter = stringToList.filter(x => x.isLetter)\n        val stringToListMap\
    \ = stringToListFilter.map(x => x.toLower)\n        val stringToListMap2 = stringToListMap.map(x\
    \ => x.toInt)\n        val stringToListMap3 = stringToListMap2.map(x => x - 97)\n\
    \        val listOfShifted = stringToListMap3.map(x => (x + 2) % 26)\n       \
    \ val listOfShifted2 = listOfShifted.map(x => x + 97)\n        val listOfShifted3\
    \ = listOfShifted2.map(x => x.toChar)\n        val listToString = listOfShifted3.mkString\n\
    \        listToString", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    .toList\n        val encryption = for (c <- s) yield {\n            val index\
    \ = alphabet.indexOf(c)\n            val newIndex = (index + (index * 2)) % alphabet.length\n\
    \            alphabet(newIndex)\n        }\n        encryption.mkString", "  \
    \      var result : String = \"\"\n        for (i <- 0 until s.length) {\n   \
    \         var letter : Char = s(i)\n            if (letter == 'z') {\n       \
    \         letter = 'b'\n            } else if (letter == 'y') {\n            \
    \    letter = 'a'\n            } else {\n                letter = (letter + 2).toChar\n\
    \            }\n            result += letter\n        }\n        return result",
  "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val alphabetMap\
    \ = alphabet.toList.zipWithIndex.toMap\n        var encryptedWord = \"\"\n   \
    \     for (i <- 0 until s.length) {\n            var newChar = alphabetMap(s(i))\
    \ + 2 * 2\n            if (newChar > 25) {\n                newChar = newChar\
    \ - 26\n            }\n            encryptedWord += alphabet(newChar)\n      \
    \  }\n        encryptedWord", "        // Use a mutable buffer to store the output\
    \ string\n        var output = new StringBuilder\n        val asciiA = 65\n  \
    \      val asciiZ = 90\n        // Iterate through each letter in the input string\n\
    \        for (i <- 0 until s.length) {\n            var newChar = 0\n        \
    \    // If character is a letter\n            if (s(i) <= asciiZ && s(i) >= asciiA)\
    \ {\n                // If character is at the end of the alphabet, rotate to\
    \ \n                // beginning\n                if (s(i) + 2 > asciiZ) {\n \
    \                   newChar = s(i) + 2 - asciiZ + asciiA - 1\n               \
    \ } else {\n                    newChar = s(i) + 2\n                }\n      \
    \      } else {\n                newChar = s(i)\n            }\n            output\
    \ += newChar.toChar\n        }\n        output.toString", "        var arr = s.toCharArray.map(x\
    \ => x.toInt)\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ < 110) {\n                arr(i) += 2\n            } else if (arr(i) == 110)\
    \ {\n                arr(i) = 97\n            } else if (arr(i) == 111) {\n  \
    \              arr(i) = 98\n            } else if (arr(i) < 115) {\n         \
    \       arr(i) += 3\n            } else if (arr(i) == 115) {\n               \
    \ arr(i) = 99\n            } else if (arr(i) == 116) {\n                arr(i)\
    \ = 100\n            } else if (arr(i) < 118) {\n                arr(i) += 4\n\
    \            } else if (arr(i) == 118) {\n                arr(i) = 101\n     \
    \       } else if (arr(i) == 119) {\n                arr(i) = 102\n          \
    \  } else if (arr(i) < 122) {\n                arr(i) += 5\n            } else\
    \ if (arr(i) == 122) {\n                arr(i) = 103\n            } else if (arr(i)\
    \ == 123) {\n                arr(i) = 104\n            } else if (arr(i) < 126)\
    \ {\n                arr(i) += 6\n            } else if (arr(i) == 126) {\n  \
    \              arr(i) = 105\n            } else if (arr(i) == 127) {\n       \
    \         arr(i) = 106\n            } else if (arr(i) < 130) {\n             \
    \   arr(i) += 7\n            } else if (arr(i) == 130) {\n                arr(i)\
    \ = 107\n            } else if (arr(i) == 131) {\n                arr(i) = 108\n\
    \            } else if (arr(i) < 133) {\n                arr(i) += 8\n       \
    \     } else if (arr(i) == 133) {\n                arr(i) = 109\n            }\
    \ else if (arr(i) == 134) {\n                arr(i) = 110\n            } else\
    \ if (arr(i) < 136) {\n                arr(i", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        var output = \"\"\n        for (i <- 0 until s.length) {\n         \
    \   if (s(i) == 'z') {\n                output += 'b'\n            } else if (s(i)\
    \ == 'y') {\n                output += 'a'\n            } else {\n           \
    \     val index = alphabet.indexOf(s(i))\n                output += alphabet((index\
    \ + 4) % 26)\n            }\n        }\n        output", "        var res = \"\
    \"\n        for (c <- s) {\n            var ci = (c.toInt + 2 * 2)\n         \
    \   if (ci > 122) ci -= 26\n            res += ci.toChar\n        }\n        res",
  "        var a = \"abcdefghijklmnopqrstuvwxyz\"\n        var b = \"cdefghijklmnopqrstuvwxyzab\"\
    \n        var c = \"\"\n        for (i <- 0 to s.length - 1) {\n            c\
    \ += b(a.indexOf(s(i)))\n        }\n        return c", "        var sb : StringBuilder\
    \ = new StringBuilder\n        for (c <- s) {\n            sb += c.toInt.toChar\n\
    \        }\n        sb.toString", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        var map = Map[Char, Char]()\n        for (i <- 0 until alphabet.length)\
    \ {\n            map(alphabet(i)) = alphabet(((i - 2) * 2) % alphabet.length)\n\
    \        }\n        var output = \"\"\n        for (i <- 0 until s.length) {\n\
    \            output += map(s(i))\n        }\n        return output", "       \
    \ var out : String = \"\";\n        for (i <- 0 until s.length) {\n          \
    \  out += (s(i) + 2 * 2).toChar;\n        }\n        return out;", "        val\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        var result = \"\"\n     \
    \   for (c <- s) {\n            var index = alphabet.indexOf(c)\n            if\
    \ (index != -1) {\n                index = (index + 2 * 2) % alphabet.length\n\
    \                result += alphabet(index)\n            }\n            else result\
    \ += c\n        }\n        result", "        val chars = s.toCharArray.map(_.toInt)\n\
    \        val newChars = chars.map { i =>\n            if (i - 2 < 97) {\n    \
    \            i + 26 - 4\n            } else {\n                i - 4\n       \
    \     }\n        }\n        newChars.map(_.toChar).mkString", "        val a :\
    \ Array[Char] = \"abcdefghijklmnopqrstuvwxyz\".toCharArray()\n        var hs :\
    \ ArrayBuffer[Char] = ArrayBuffer()\n        for (c <- s) hs += a((a.indexOf(c)\
    \ + 2) % 26)\n        hs.mkString", '        s.map(c => (c.toInt + 2 * 2).toChar)',
  "        val d = s.map(x => x.toLower).map(x => x - 'a').map(x => (x + (2 * 2))\
    \ % 26).map(x => x + 'a').map(x => x.toChar).mkString\n        d", "        val\
    \ c : Array[Char] = s.toCharArray()\n        val temp : Array[Char] = new Array[Char](c.length)\n\
    \        var i = 0\n        while (i < c.length) {\n            temp(i) = (c(i)\
    \ + 2 * 2).toChar\n            i += 1\n        }\n        temp.mkString", "  \
    \      var ans = \"\";\n        for (ch <- s) {\n            var c = ((ch - 'a')\
    \ * 2 + 2) % 26;\n            if (c < 0) c += 26;\n            ans += ('a' + c).toChar;\n\
    \        }\n        return ans;", "        // Create a varible to store the result\n\
    \        var result = \"\"\n        // Create an if statement to see if s is empty,\
    \ if so, return an empty string\n        if (s.length() == 0) {\n            return\
    \ result\n        }\n        // Create a for loop, iterating from 0 to the length\
    \ of s\n        for (i <- 0 to s.length() - 1) {\n            // Create an if\
    \ statement, to see if the element at index i of s, is between a and y\n     \
    \       if (s(i) >= 'a' && s(i) <= 'y') {\n                // Add the new element\
    \ to the result string\n                result += (s(i) + 2).toChar\n        \
    \    }\n            // Create an else if statement, to see if the element at index\
    \ i of s, is 'z'\n            else if (s(i) == 'z') {\n                // Add\
    \ the new element to the result string\n                result += ('a').toChar\n\
    \            }\n            // Create an else if statement, to see if the element\
    \ at index i of s, is 'z'\n            else if (s(i) == 'y') {\n             \
    \   // Add the new element to the result string\n                result += ('b').toChar\n\
    \            }\n            // Create an else if statement, to see if the element\
    \ at index i of s, is between A and Y\n            else if (s(i) >= 'A' && s(i)\
    \ <= 'Y') {\n                // Add the new element to the result string\n   \
    \             result += (s(i) + 2).toChar\n            }\n            // Create\
    \ an else if statement, to see if the element at index i of s, is 'Z'\n      \
    \      else if (s(i) == 'Z') {\n                // Add the new element to the\
    \ result string\n                result += ('A').toChar\n            }\n     \
    \       // Create an else if statement, to see if the element at index i of s,\
    \ is 'Z'\n            else if (s(i) == 'Y') {\n                // Add the new\
    \ element to the result string\n                result += ('B').toChar\n     \
    \       }\n            // Create an else statement, to see if the element at index\
    \ i of s, is a number\n            else {\n               ", "        var alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        var new_string = \"\"\n        for\
    \ (i <- 0 to s.length - 1) {\n            new_string += alphabet(alphabet.indexOf(s(i))\
    \ + (2 * 2) - 26)\n        }\n        return new_string", "        var array =\
    \ new Array[Char](s.length)\n        for (i <- 0 until s.length) {\n         \
    \   if (s(i) == 'y') {\n                array(i) = 'a'\n            } else if\
    \ (s(i) == 'z') {\n                array(i) = 'b'\n            } else {\n    \
    \            array(i) = (s(i) + 2).toChar\n            }\n        }\n        return\
    \ array.mkString", "        // Iterate through the characters of the input string.\n\
    \        // If the character is a capital letter or a lowercase letter, \n   \
    \     // add 2 * 2 = 4 to the ascii value of the character. \n        // If the\
    \ resulting ascii value exceeds 122, then subtract 26\n        // from the ascii\
    \ value, and turn it into a character. \n        // If the character is not a\
    \ letter, then keep it as it is.\n        val newStr = new StringBuilder(s)\n\
    \        for (i <- 0 until s.length) {\n            if (s(i) >= 'a' && s(i) <=\
    \ 'z') {\n                val asciiVal = s(i).toInt + 4\n                if (asciiVal\
    \ > 122) {\n                    newStr(i) = (asciiVal - 26).toChar\n         \
    \       } else {\n                    newStr(i) = asciiVal.toChar\n          \
    \      }\n            } else if (s(i) >= 'A' && s(i) <= 'Z') {\n             \
    \   val asciiVal = s(i).toInt + 4\n                if (asciiVal > 90) {\n    \
    \                newStr(i) = (asciiVal - 26).toChar\n                } else {\n\
    \                    newStr(i) = asciiVal.toChar\n                }\n        \
    \    }\n        }\n        newStr.toString", "      // you can use this alphabet\n\
    \      val abc = \"abcdefghijklmnopqrstuvwxyz\"\n      var tmp = \"\"\n      //\
    \ var encrypted_word = \"\"\n      // fill in your code here\n      for (i <-\
    \ 0 until s.length){\n        tmp = s.substring(i, i+1)\n        var x = (abc.indexOf(tmp)\
    \ + 2*2) % abc.length()\n        var y = abc.substring(x, x+1)\n        // encrypted_word\
    \ += y\n        // println(y)\n        tmp = y\n      }\n      return tmp", " \
    \       var i : Int = 0\n        var e : String = \"\"\n        while (i < s.length)\
    \ {\n            var curr : Char = s.charAt(i)\n            e += (curr + 2 * 2).toChar\n\
    \            i += 1\n        }\n        return e", '        return s.map( x =>
    (x + 2).toChar).toString', "      // TODO: implement this function\n      s.map(e=>\
    \ {\n          if(e.toInt>=119)\n            e.toInt-24\n          else if(e.toInt>=115)\n\
    \            e.toInt-22\n          else if(e.toInt>=112)\n            e.toInt-20\n\
    \          else if(e.toInt>=108)\n            e.toInt-18\n          else if(e.toInt>=105)\n\
    \            e.toInt-16\n          else if(e.toInt>=101)\n            e.toInt-14\n\
    \          else if(e.toInt>=98)\n            e.toInt-12\n          else if(e.toInt>=95)\n\
    \            e.toInt-10\n          else if(e.toInt>=91)\n            e.toInt-8\n\
    \          else if(e.toInt>=87)\n            e.toInt-6\n          else if(e.toInt>=84)\n\
    \            e.toInt-4\n          else if(e.toInt>=80)\n            e.toInt-2\n\
    \          else\n            e.toInt\n      }).map(_.toChar).mkString", "    \
    \    var output = \"\"\n        for (c <- s) output += ((((c - 'a') + (1 + (1\
    \ << 1))) % 26) + 'a').toChar\n        output", "\t// Return the empty string\
    \ if the string is empty.\n\tif (s.isEmpty) return \"\"\n\t// Otherwise, encrypt\
    \ the first character.\n\tval c = shift(s.charAt(0))\n\t// If the string is of\
    \ length 1, return the encrypted character.\n\tif (s.length == 1) return c.toString\n\
    \t// Otherwise, encrypt the rest of the string recursively and append.\n\treturn\
    \ c + encrypt(s.substring(1))", "        val alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        var result = \"\"\n        for (c <- s) {\n            if (alpha.contains(c))\
    \ {\n                var idx = alpha.indexOf(c)\n                result += alpha((idx\
    \ + (2 * 2)) % 26)\n            } else {\n                result += c\n      \
    \      }\n        }\n        result", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        s.map { case c => {\n            val index = alphabet.indexOf(c)\n \
    \           if (index < 24) alphabet(index + 2)\n            else if (index ==\
    \ 24) alphabet(0)\n            else alphabet(1)\n        }}", "        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val rotated = \"cdefghijklmnopqrstuvwxyzab\"\
    \n        val charMap = alphabet.zip(rotated).toMap\n        s.map(c => charMap(c))",
  "        val map = List('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n    \
    \    val filteredMap = map.filter(e => e != 'q' && e != 'z')\n        var result\
    \ = \"\"\n        for (e <- s) {\n            val index = filteredMap.indexOf(e)\n\
    \            if (index < 0) result += e\n            else result += filteredMap((index\
    \ + 2 * 2) % filteredMap.length)\n        }\n        result", "        def shiftOne(c\
    \ : Char) : Char = {\n            c match {\n                case ' ' => ' '\n\
    \                case 'a' => 'c'\n                case 'b' => 'd'\n          \
    \      case 'c' => 'e'\n                case 'd' => 'f'\n                case\
    \ 'e' => 'g'\n                case 'f' => 'h'\n                case 'g' => 'i'\n\
    \                case 'h' => 'j'\n                case 'i' => 'k'\n          \
    \      case 'j' => 'l'\n                case 'k' => 'm'\n                case\
    \ 'l' => 'n'\n                case 'm' => 'o'\n                case 'n' => 'p'\n\
    \                case 'o' => 'q'\n                case 'p' => 'r'\n          \
    \      case 'q' => 's'\n                case 'r' => 't'\n                case\
    \ 's' => 'u'\n                case 't' => 'v'\n                case 'u' => 'w'\n\
    \                case 'v' => 'x'\n                case 'w' => 'y'\n          \
    \      case 'x' => 'z'\n                case 'y' => 'a'\n                case\
    \ 'z' => 'b'\n            }\n        }\n        def shift(c : Char) : Char = {\n\
    \            shiftOne(shiftOne(c))\n        }\n        s.map(c => shift(c))",
  "        var out = \"\"\n        for (c <- s) {\n            if (c == 'z') {\n \
    \               out += 'b'\n            } else if (c == 'y') {\n             \
    \   out += 'a'\n            } else {\n                out += ((c.toInt + 2 * 2).toChar)\n\
    \            }\n        }\n        out", '        ???', "        var b = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            var c = s(i)\n           \
    \ b += c\n            if (c == 'h') b += 'j'\n            else if (c == 'z') b\
    \ += 'b'\n            else if (c == 'y') b += 'a'\n            else b += (c.toInt\
    \ + 2).toChar\n        }\n        b.toString", "        var finalString = \"\"\
    \n        for (i <- 0 until s.length) {\n            var c = s(i)\n          \
    \  var charNum = c.toInt\n            var charNumAfterShift = charNum + 4\n  \
    \          if (charNumAfterShift > 122) {\n                charNumAfterShift =\
    \ charNumAfterShift - 122 + 96\n            }\n            finalString += charNumAfterShift.toChar\n\
    \        }\n        return finalString", '      return s.map(x => (x + 8).toChar)',
  "        val alpha = ('a' to 'z').toList\n        val rotate = alpha.map(x => (x,\
    \ alpha.indexOf(x) + 1))\n        val lookup = (rotate :+ (' ', 0)).groupBy(_._1).map(x\
    \ => (x._1, x._2.head._2))\n        s.map(x => lookup(x)).map(x => if (x == 0)\
    \ ' ' else alpha(x - 1)).mkString", "        var word = \"\"\n        for (char\
    \ <- s) {\n            word += ((char + 2 * 2).toChar)\n        }\n        return\
    \ word", '        return "write some code"', "        // We are not allowed to\
    \ use mutable characters \n        // (var types), because they are considered\n\
    \        // bad practice. There is no way to change the character\n        //\
    \ in string. Thus we use a workaround - we build a \n        // new string and\
    \ return it.\n        var result = \"\"\n        for (i <- 0 until s.length) {\n\
    \            val a = s(i)\n            var b = a\n            if (a >= 'a' &&\
    \ a <= 'x') {\n                b = (a.toInt + 2).toChar\n            } else if\
    \ (a == 'y') {\n                b = 'a'\n            } else if (a == 'z') {\n\
    \                b = 'b'\n            }\n            result += b\n        }\n\
    \        result", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray()\n\
    \        var sEncrypt = \"\"\n        for (i <- 0 until s.length) {\n        \
    \    var index = alphabet.indexOf(s(i)) + 2\n            if (index > 25) {\n \
    \               index -= 26\n            }\n            sEncrypt += alphabet(index)\n\
    \        }\n        sEncrypt", "        return s.map(x => x match {\n        \
    \    case 'y' => 'a'\n            case 'z' => 'b'\n            case _ => (x.toInt\
    \ + 2).toChar\n        })", "        val e = s.toCharArray().map(c => c + 2)\n\
    \        new String(e)", "        return s.map(c => if (c.isLetter) if (c.isUpper)\
    \ (((c - 'A' + 2*2) % 26) + 'A').toChar else (((c - 'a' + 2*2) % 26) + 'a').toChar\
    \ else c)", '        s.map( c => (97 + (c + 2*2 - 97) % 26).toChar )', "     \
    \   val lower_alpha = (('a' to 'z') zip ('c' to 'z')) ++ (('a' to 'b') zip ('c'\
    \ to 'd'))\n        val upper_alpha = (('A' to 'Z') zip ('C' to 'Z')) ++ (('A'\
    \ to 'B') zip ('C' to 'D'))\n        var encrypted_s = \"\"\n        for (char\
    \ <- s) {\n            if (char.isLower) {\n                val idx = lower_alpha.indexWhere(m\
    \ => m._1 == char)\n                encrypted_s += lower_alpha(idx)._2\n     \
    \       } else if (char.isUpper) {\n                val idx = upper_alpha.indexWhere(m\
    \ => m._1 == char)\n                encrypted_s += upper_alpha(idx)._2\n     \
    \       } else {\n                encrypted_s += char\n            }\n       \
    \ }\n        encrypted_s", '        ""', "        var result = \"\"\n        for\
    \ (i <- 0 until s.length) {\n            var index = s(i) + 2*2\n            if\
    \ (index > 122) {\n                index = index - 26\n            }\n       \
    \     result += index.toChar\n        }\n        result", "        var result\
    \ : String = \"\"\n        for (c <- s) {\n            if (c == 'z') {\n     \
    \           result += 'b'\n            } else if (c == 'y') {\n              \
    \  result += 'a'\n            } else {\n                result += ((c + 2) toChar)\n\
    \            }\n        }\n        return result", "        var a = 'a'\n    \
    \    var newS = \"\"\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'z') {\n                newS += 'b'\n            } else if (s(i) == 'y')\
    \ {\n                newS += 'a'\n            } else {\n                newS +=\
    \ s(i) + 2\n            }\n        }\n        return newS", "        val alpha\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val new_s = ListBuffer[Char]()\n \
    \       for (c <- s) {\n            val i = alpha.indexOf(c)\n            val\
    \ j = (i + (2 * 2)) % 26\n            new_s += alpha(j)\n        }\n        new_s.mkString",
  "        val rot = ('a' to 'z') ++ ('a' to 'y')\n        val map = ('a' to 'z').zip(rot).toMap\n\
    \        s.map(x => map(x))", "        val enc = Map('a' -> 'c', 'b' -> 'd', 'c'\
    \ -> 'e', 'd' -> 'f', 'e' -> 'g', 'f' -> 'h', 'g' -> 'i', 'h' -> 'j', 'i' -> 'k',\
    \ 'j' -> 'l', 'k' -> 'm', 'l' -> 'n', 'm' -> 'o', 'n' -> 'p', 'o' -> 'q', 'p'\
    \ -> 'r', 'q' -> 's', 'r' -> 't', 's' -> 'u', 't' -> 'v', 'u' -> 'w', 'v' -> 'x',\
    \ 'w' -> 'y', 'x' -> 'z', 'y' -> 'a', 'z' -> 'b')\n        s.map(c => enc(c)).mkString",
  '        s.map(c => (c.toInt + 4).toChar)', "        var r = \"\"\n        var shift\
    \ = 0\n        for (c <- s) {\n            if (shift == 4) shift = 0\n       \
    \     val index = (c.toLower - 'a')\n            r += (((index + (2 * (shift +\
    \ 1))) % 26) + 'a').toChar\n            shift += 1\n        }\n        r", " \
    \       var word : String = \"\"\n        for (c <- s) {\n            word +=\
    \ (c + 2).toChar\n        }\n        return word", "        s.map(_ match {\n\
    \          case 'a' => 'c'\n          case 'b' => 'd'\n          case 'c' => 'e'\n\
    \          case 'd' => 'f'\n          case 'e' => 'g'\n          case 'f' => 'h'\n\
    \          case 'g' => 'i'\n          case 'h' => 'j'\n          case 'i' => 'k'\n\
    \          case 'j' => 'l'\n          case 'k' => 'm'\n          case 'l' => 'n'\n\
    \          case 'm' => 'o'\n          case 'n' => 'p'\n          case 'o' => 'q'\n\
    \          case 'p' => 'r'\n          case 'q' => 's'\n          case 'r' => 't'\n\
    \          case 's' => 'u'\n          case 't' => 'v'\n          case 'u' => 'w'\n\
    \          case 'v' => 'x'\n          case 'w' => 'y'\n          case 'x' => 'z'\n\
    \          case 'y' => 'a'\n          case 'z' => 'b'\n          case ' ' => '\
    \ '\n        })", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \     var encrypted = \"\"\n        for (c <- s) {\n            encrypted += alphabet(alphabet.indexOf(c)\
    \ + 2 * 2).toString\n        }\n        encrypted", "        // Replace the code\
    \ below with your own code.\n        \"ewhjklnop\"", "        val alphabet = Array(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val alphabet_mapped = alphabet.zipWithIndex.toMap\n\
    \        val new_string = s.map(x => alphabet((alphabet_mapped(x.toString()) +\
    \ 2 * 2) % 26))\n        return new_string.mkString", "        var sb = new StringBuilder\n\
    \        for (c <- s) {\n            sb += ((c - 'a' + 2) % 26 + 'a').toChar\n\
    \        }\n        sb.toString", "        var i = 0\n        var encoded : String\
    \ = \"\"\n        while (i < s.length()) {\n            encoded += s(i) + 2\n\
    \            i += 1\n        }\n        return encoded", "        s.toList.map(l\
    \ => (l.toByte - 96) match {\n            case 97 => 99\n            case 98 =>\
    \ 100\n            case x if x <= 26 => x + 2 * 2\n            case _ => 0\n \
    \       }).map(_.toChar).mkString", "        // write code here\n        return\
    \ null", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        var result\
    \ = \"\"\n        for (i <- 0 until s.length) {\n            var index = (alphabet.indexOf(s(i))\
    \ + 4) % 26\n            result += alphabet(index)\n        }\n        result",
  "        var r = \"\"\n        var arr = s.toCharArray\n        for (ch <- arr)\
    \ {\n            r += (ch+2*2).toChar\n        }\n        return r", "       \
    \ var result : String = \"\"\n        var newLetter : Char = 'a'\n        for\
    \ (letter <- s) {\n            newLetter = (letter + (2 * 2)).toChar\n       \
    \     result += newLetter\n        }\n        return result", "        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        var result = \"\"\n        for (c\
    \ <- s) {\n            result += alphabet(alphabet.indexOf(c) - 2 * 2)\n     \
    \   }\n        result", "        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \        val encrypted = s.map { x =>\n            if (x == ' ') ' '\n       \
    \     else {\n                var index = letters.indexOf(x)\n               \
    \ val newIndex = (index + (2 * 2)) % 26\n                letters(newIndex)\n \
    \           }\n        }\n        return encrypted", '        s.map(x => (x +
    2 * 2).toChar)', "      var result : String = \"\"\n      var dict = new HashMap[Char,\
    \ Char]\n      dict('a') = 'c'\n      dict('b') = 'd'\n      dict('c') = 'e'\n\
    \      dict('d') = 'f'\n      dict('e') = 'g'\n      dict('f') = 'h'\n      dict('g')\
    \ = 'i'\n      dict('h') = 'j'\n      dict('i') = 'k'\n      dict('j') = 'l'\n\
    \      dict('k') = 'm'\n      dict('l') = 'n'\n      dict('m') = 'o'\n      dict('n')\
    \ = 'p'\n      dict('o') = 'q'\n      dict('p') = 'r'\n      dict('q') = 's'\n\
    \      dict('r') = 't'\n      dict('s') = 'u'\n      dict('t') = 'v'\n      dict('u')\
    \ = 'w'\n      dict('v') = 'x'\n      dict('w') = 'y'\n      dict('x') = 'z'\n\
    \      dict('y') = 'a'\n      dict('z') = 'b'\n      s.foreach(c => {\n      \
    \  result += dict(c)\n      })\n      result", "        // returns an encrypted\
    \ string using the rotational cipher.\n        // First, create a set of the letters\
    \ in the alphabet. Then, get the \n        // index of the letter, and add 2 to\
    \ it. Then, if it is out of range,\n        // subtract 26, the total number of\
    \ letters in the alphabet, to it.\n        // Then, return the letter at that\
    \ index.\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        def encrypt_char(c\
    \ : Char) : Char = {\n            val index = alphabet.indexOf(c)\n          \
    \  val new_index = (index + 2) % 26\n            alphabet(new_index)\n       \
    \ }\n        return s.map(encrypt_char)", "        var n = \"\"\n        for (c\
    \ <- s) {\n            n += ((c.toInt + 2 * 2).toChar)\n        }\n        return\
    \ n", "        // START SOLUTION\n        var newStr = \"\"\n        for (i <-\
    \ 0 until s.length) {\n            newStr += (s(i) + 2*2).toChar\n        }\n\
    \        newStr\n        // END SOLUTION", "        val str = s.toCharArray.toList.map(c\
    \ => (c.toInt - 97 + 4) % 26 + 97).map(x => x.toChar)\n        return str.mkString",
  "      var ss = ArrayBuffer[Char]()\n      for (c <- s) ss += c\n      val n = ss.length\n\
    \      for (i <- 0 until n) {\n        val c = ss(i)\n        var cc = (c - 'a'\
    \ + 2) % 26 + 'a'\n        if (cc < 'a') cc += 26\n        ss(i) = cc\n      }\n\
    \      ss.mkString", "    \tval myMap = Map(\"a\" -> \"c\", \"b\" -> \"d\", \"\
    c\" -> \"e\", \"d\" -> \"f\", \"e\" -> \"g\", \"f\" -> \"h\", \"g\" -> \"i\",\
    \ \"h\" -> \"j\", \"i\" -> \"k\", \"j\" -> \"l\", \"k\" -> \"m\", \"l\" -> \"\
    n\", \"m\" -> \"o\", \"n\" -> \"p\", \"o\" -> \"q\", \"p\" -> \"r\", \"q\" ->\
    \ \"s\", \"r\" -> \"t\", \"s\" -> \"u\", \"t\" -> \"v\", \"u\" -> \"w\", \"v\"\
    \ -> \"x\", \"w\" -> \"y\", \"x\" -> \"z\", \"y\" -> \"a\", \"z\" -> \"b\")\n\
    \        var result = \"\"\n        for (i <- 0 until s.length) {\n          \
    \  result += myMap(s(i).toString)\n        }\n        result", "\tval alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n\tvar encryptedString = \"\"\n\tfor (c <-\
    \ s) {\n\t    val shiftedChar = alphabet((alphabet.indexOf(c) + 2) % alphabet.length)\n\
    \t    encryptedString += shiftedChar\n\t}\n\tencryptedString", "        val alphabet\
    \ = ('a' to 'z').toList\n        val encryptAlphabet = alphabet.tail.tail :::\
    \ alphabet.tail.tail\n        val str = s.toList\n        val res = str.map(c\
    \ => alphabet.indexOf(c)).map(index => encryptAlphabet(index))\n        res.mkString",
  "        var res = \"\"\n        val dic = \"abcdefghijklmnopqrstuvwxyz\".toList\n\
    \        for (i <- 0 until s.length) {\n            val n = dic.indexOf(s(i))\n\
    \            res += dic((n + 4) % 26)\n        }\n        res", "        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val newAlphabet = alphabet.drop(2)\
    \ + alphabet.take(2)\n        s.map((c : Char) => newAlphabet(alphabet.indexOf(c)))",
  "        var result = \"\"\n        for (i <- 0 until s.length) {\n            result\
    \ += (('a' + (s(i) - 'a' + s.length) % 26).toChar)\n        }\n        result",
  "      // Function to convert ASCII alphabet number to shifted number.\n      def\
    \ shift(n : Int) : Int = (n+16)%26+97\n      return s.map(shift(_).toChar)", " \
    \       // your solution here\n        return s", "        var output : String\
    \ = \"\"\n        val alphabet : String = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \     val splitted : Array[String] = s.split(\"\")\n        var i : Int = 0\n\
    \        while (i < splitted.length) {\n            if (splitted(i) == \" \")\
    \ {\n                output += \" \"\n            } else {\n                var\
    \ j : Int = 0\n                var find : Boolean = false\n                while\
    \ (j < alphabet.length && !find) {\n                    if (splitted(i) == alphabet(j).toString)\
    \ {\n                        find = true\n                        if (j < alphabet.length\
    \ - 4) {\n                            output += alphabet(j + 4)\n            \
    \            } else {\n                            output += alphabet(j - 22)\n\
    \                        }\n                    }\n                    j += 1\n\
    \                }\n            }\n            i += 1\n        }\n        output",
  "        var current_char : Char = '\\0'\n        var current_pos : Int = 0\n  \
    \      var s_encrypted : String = \"\"\n        var len_s : Int = s.length\n \
    \       var c_counter : Int = 0\n        while (c_counter < len_s) {\n       \
    \     current_char = s.charAt(c_counter)\n            current_pos = current_char.toInt\
    \ - 97\n            if (current_pos > 21) {\n                current_pos = (current_pos\
    \ - 23) + 97\n            } else {\n                current_pos = (current_pos\
    \ + 23) + 97\n            }\n            s_encrypted += current_pos.toChar\n \
    \           c_counter += 1\n        }\n        return s_encrypted", "        val\
    \ arr = s.toArray\n        for (i <- 0 until arr.length) {\n            val x\
    \ = arr(i) - 97\n            val y = ((x+2)*2) % 26\n            arr(i) = (y +\
    \ 97).toChar\n        }\n        return arr.mkString", '        // Write your
    code here', "    \tvar k = s.toList\n    \tvar h = 0\n    \tvar out = new String\n\
    \    \tfor (i <- k) {\n    \t\th = (i.toInt + (2*2)) % 122\n    \t\tif (h < 97)\
    \ {\n    \t\t\th = h + 96\n    \t\t}\n    \t\tout = out + h.toChar\n    \t}\n\
    \    \treturn out", "        val alpha = ('a' to 'z').toList\n        val d =\
    \ ('d' to 'z').toList ++ ('a' to 'c').toList\n        val list = s.toList\n  \
    \      val b = list.map {x => (alpha.indexOf(x.toLower), x.isUpper)}\n       \
    \ val c = b.map { case (p, q) => \n            if (q) d(p).toUpper\n         \
    \   else d(p)\n        }\n        return c.mkString", '        s.map((c : Char)
    => (c + 2).toChar)', "        var result = \"\";\n        for (c <- s) result\
    \ += rotate(c, 2);\n        return result;", "        return s.map(x => ('a' +\
    \ ((x - 'a' + 2 * 2) % 26)).toChar)", "        var array = new Array[Char](s.length)\n\
    \        for (i <- 0 until s.length) {\n            if (s(i) >= 'a' && s(i) <=\
    \ 'x') {\n                array(i) = (s(i) + 2).toChar\n            } else if\
    \ (s(i) >= 'y' && s(i) <= 'z') {\n                array(i) = ((s(i) - 24) + 2).toChar\n\
    \            } else if (s(i) >= 'A' && s(i) <= 'X') {\n                array(i)\
    \ = (s(i) + 2).toChar\n            } else if (s(i) >= 'Y' && s(i) <= 'Z') {\n\
    \                array(i) = ((s(i) - 24) + 2).toChar\n            } else {\n \
    \               array(i) = s(i)\n            }\n        }\n        return array.mkString",
  "        // Use this ASCII mapping from space to '~'\n        // http://www.asciitable.com/\n\
    \        val asciiMap = Map(32 -> 126, 33 -> 127, 34 -> 128, 35 -> 129, 36 ->\
    \ 130, 37 -> 131, 38 -> 132, 39 -> 133, 40 -> 134, 41 -> 135, 42 -> 136, 43 ->\
    \ 137, 44 -> 138, 45 -> 139, 46 -> 140, 47 -> 141, 48 -> 142, 49 -> 143, 50 ->\
    \ 144, 51 -> 145, 52 -> 146, 53 -> 147, 54 -> 148, 55 -> 149, 56 -> 150, 57 ->\
    \ 151, 58 -> 152, 59 -> 153, 60 -> 154, 61 -> 155, 62 -> 156, 63 -> 157, 64 ->\
    \ 158, 65 -> 159, 66 -> 160, 67 -> 161, 68 -> 162, 69 -> 163, 70 -> 164, 71 ->\
    \ 165, 72 -> 166, 73 -> 167, 74 -> 168, 75 -> 169, 76 -> 170, 77 -> 171, 78 ->\
    \ 172, 79 -> 173, 80 -> 174, 81 -> 175, 82 -> 176, 83 -> 177, 84 -> 178, 85 ->\
    \ 179, 86 -> 180, 87 -> 181, 88 -> 182, 89 -> 183, 90 -> 184, 91 -> 185, 92 ->\
    \ 186, 93 -> 187, 94 -> 188, 95 -> 189, 96 -> 190, 97 -> 191, 98 -> 192, 99 ->\
    \ 193, 100 -> 194, 101 -> 195, 102 -> 196, 103 -> 197, 104 -> 198, 105 -> 199,\
    \ 106 -> 200, 107 -> 201, 108 -> 202, 109 -> 203, 110 -> 204, 111 -> 205, 112\
    \ -> 206, 113 -> 207, 114 -> 208, 115 -> 209, 116 -> 210, 117 -> 211, 118 -> 212,\
    \ 119 -> 213, 120 -> 214, 121 -> 215, 122 -> 216, 123 -> 217, 124 -> 218, 125\
    \ -> 219, 126 -> 220, 127 -> 221, 128 -> 222, 129 -> 223, 130 -> 224, 131 -> 225,\
    \ 132 -> 226, 133 -> 227, 134 -> 228, 135 -> 229, 136 -> 230, 137 -> 231, 138\
    \ -> 232, 139 -> 233, 140 -> 234, 141 -> 235, 142 -> 236, 143 -> 237, 144 -> 238,\
    \ 145 -> 239, 146 -> 240, 147 -> 241, 148 -> 242, 149 -> 243, 150 -> 244,", " \
    \       val alphabet = \"abcdefghijklmnopqrstuvwxyz\".toSet\n        val alphabetMap\
    \ = (alphabet zip alphabet.drop(2)).toMap\n        val alphabetSet = alphabet.drop(2)\n\
    \        val size = alphabet.size\n        s.map(c => if (alphabetSet.contains(c))\
    \ alphabetMap(c) else (alphabetMap(c) + alphabetMap(c)).toSet.filterNot(alphabet.contains).head)",
  "        val alpha = \"abcdefghijklmnopqrstuvwxyz\"\n        val alpha2 = alpha.substring(2,alpha.length)\
    \ + alpha.substring(0,2)\n        val res = s.map(x => if (alpha.contains(x))\
    \ alpha2(alpha.indexOf(x)) else x)\n        res", "        val alphabets = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        s.map(a => {\n            val shiftedIndex\
    \ = (alphabets.indexOf(a.toLower) + 2 * 2) % 26\n            alphabets(shiftedIndex)\n\
    \        })", "        var temp = for (i <- 0 until s.length) yield s(i)\n   \
    \     var result = Array[Char]()\n        for (i <- 0 until temp.length) {\n \
    \           val ch = temp(i)\n            var ch_int = ch.toInt\n            if\
    \ (ch_int >= 97 && ch_int <= 122) {\n                if (ch_int + 2 > 122) {\n\
    \                    ch_int = 96 + ch_int - 122 + 2\n                } else {\n\
    \                    ch_int += 2\n                }\n            } else if (ch_int\
    \ >= 65 && ch_int <= 90) {\n                if (ch_int + 2 > 90) {\n         \
    \           ch_int = 64 + ch_int - 90 + 2\n                } else {\n        \
    \            ch_int += 2\n                }\n            }\n            result\
    \ = result :+ ch_int.toChar\n        }\n        result.mkString", "        var\
    \ sb = new StringBuilder(s)\n        for (i <- 0 until s.length) {\n         \
    \   sb(i) = ((sb(i) - 'a' + 2) % 26 + 'a').toChar\n        }\n        sb.toString",
  "        val alphabet = 'a' to 'z'\n        val rotated2 = alphabet.map(x => (x\
    \ + 2 * 2).toChar)\n        // Use the union operator on 2 to combine the 2 maps.\n\
    \        alphabet.zip(rotated2).toMap\n        // Use the updated method to map\
    \ letters to the encryption algorithm.\n        s.toCharArray.map(x => alphabet.updated(x,\
    \ rotated2(x)).toString).mkString", "        var result = \"\"\n        for (c\
    \ <- s) result += ((c.toInt - 'a'.toInt + 4) % 26 + 'a'.toInt).toChar\n      \
    \  result", "        val alphabet = (1 to 26).map(x => (x + 96).toChar)\n    \
    \    val newLetters = s.map(x => if (x == 'z') 'b' else if (x == 'y') 'a' else\
    \ alphabet(alphabet.indexOf(x) + 2))\n        newLetters.mkString", "        var\
    \ r : String = \"\"\n        for (c <- s) {\n            if (c == 'z') {\n   \
    \             r += 'b'\n            } else if (c == 'y') {\n                r\
    \ += 'a'\n            } else {\n                r += (c.toInt + 2).toChar\n  \
    \          }\n        }\n        return r", "        val map = \"abcdefghijklmnopqrstuvwxyz\"\
    .zip(\"cdefghijklmnopqrstuvwxyzab\").toMap;\n        return s.map(c => map(c));"]
stop_tokens:
- "\n    }\n"
