name: HumanEval_31_is_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return true if a given number is prime, and false otherwise.\n    // >>>\
  \ isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n   \
  \ // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n\
  \    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n\
  \    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n : Long) : Boolean =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) ==\
  \ (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) ==\
  \ (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
  \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) ==\
  \ (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) ==\
  \ (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) ==\
  \ (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
  \ == (false));\n    }\n\n}\n"
completions: ["        val limit = sqrt(n).toLong\n        for (i <- 2l to limit)\
    \ if (n % i == 0) return false\n        true", "        if (n == 1l) {\n     \
    \       return false\n        }\n        else if (n == 2l) {\n            return\
    \ true\n        }\n        else if (n % 2l == 0l) {\n            return false\n\
    \        }\n        val upper_bound = ceil(sqrt(n)).toLong\n        var i = 3l\n\
    \        while (i <= upper_bound) {\n            if (n % i == 0l) {\n        \
    \        return false\n            }\n            i += 2l\n        }\n       \
    \ return true", "        if (n == 2 || n == 3) true\n        else if (n < 2 ||\
    \ n % 2 == 0 || n % 3 == 0) false\n        else {\n            var i = 5\n   \
    \         while (i * i <= n) {\n                if (n % i == 0 || n % (i + 2)\
    \ == 0) return false\n                i += 6\n            }\n            true\n\
    \        }", "        if (n == 1) return false\n        val limit = math.sqrt(n).toLong\n\
    \        for (d <- 2l to limit) {\n            if (n % d == 0) return false\n\
    \        }\n        return true", "        if (n == 1) return false\n        for\
    \ (i <- 2 until n) {\n            if (n % i == 0) return false\n        }\n  \
    \      return true", "        val max = sqrt(n).toLong\n        return (2l to\
    \ max).forall(i => n % i != 0)", "        val factors = for (i <- 2 to n.toInt\
    \ if n % i == 0) yield i\n        factors.length == 1", "        def isPrimeAcc(p\
    \ : Long, n : Long) : Boolean = {\n            if (p >= n) return true\n     \
    \       if (n % p == 0) return false\n            isPrimeAcc(p + 1, n)\n     \
    \   }\n        if (n <= 1) return false\n        isPrimeAcc(2, n)", "        if\
    \ (n == 1) return false\n        if (n == 2) return true\n        if (n % 2 ==\
    \ 0) return false\n        var i = 3\n        while (i <= sqrt(n)) {\n       \
    \     if (n % i == 0) return false\n            i += 2\n        }\n        return\
    \ true", "        val max = (sqrt(n)).toLong\n        if (n <= 1) return false\n\
    \        if (n == 2) return true\n        if (n % 2 == 0) return false\n     \
    \   var i = 3l\n        while (i <= max) {\n            if (n % i == 0) return\
    \ false\n            i += 2\n        }\n        return true", "        if (n ==\
    \ 1) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n\
    \ % i == 0) return false\n        }\n        return true", "        if (n == 1)\
    \ {\n            return false\n        }\n        if (n == 2) {\n            return\
    \ true\n        }\n        if (n % 2 == 0) {\n            return false\n     \
    \   }\n        val limit = sqrt(n).toLong\n        var i = 3l\n        while (i\
    \ <= limit) {\n            if (n % i == 0) {\n                return false\n \
    \           }\n            i += 2\n        }\n        return true", "        if\
    \ (n == 2) return true\n        if (n < 2 || n % 2 == 0) return false\n      \
    \  val limit = sqrt(n).toLong\n        def isPrime0(i : Long) : Boolean = {\n\
    \            if (i > limit) return true\n            if (n % i == 0) return false\n\
    \            isPrime0(i + 2)\n        }\n        isPrime0(3)", "        val n2\
    \ = sqrt(n)\n        var i = 2l\n        while (i <= n2) {\n            if (n\
    \ % i == 0) return false\n            i += 1\n        }\n        return true",
  "        if (n == 1) return false\n        var i = 2\n        while (i <= sqrt(n).toInt)\
    \ {\n            if (n % i == 0) return false\n            i += 1\n        }\n\
    \        return true", "        if (n < 2) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt\
    \ by 2) if (n % i == 0) return false\n        return true", "        if (n ==\
    \ 1) {\n            return false\n        }\n        val sqrtn = ceil(sqrt(n)).toLong\n\
    \        if (n == 2) {\n            return true\n        }\n        if (n % 2\
    \ == 0) {\n            return false\n        }\n        for (i <- (3l to sqrtn\
    \ by 2)) {\n            if (n % i == 0) {\n                return false\n    \
    \        }\n        }\n        return true", "        var i = n - 1\n        while\
    \ (i > 1) {\n            if (n % i == 0) {\n                return false\n   \
    \         }\n            i = i - 1\n        }\n        return true", "       \
    \ val s = sqrt(n).toLong\n        if (n <= 1) return false\n        for (i <-\
    \ 2l to s) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true", "        if (n == 1) false\n        else if (n < 4) true\n        else\
    \ if (n % 2 == 0) false\n        else if (n < 9) true\n        else if (n % 3\
    \ == 0) false\n        else {\n            val root = sqrt(n).toLong\n       \
    \     var f = 5l\n            while (f <= root) {\n                if (n % f ==\
    \ 0) return false\n                if (n % (f + 2) == 0) return false\n      \
    \          f += 6\n            }\n            true\n        }", "      def isPrimeHelper(n\
    \ : Long, l : Long) : Boolean = {\n        if (l == 1) true\n        else if (n\
    \ % l == 0) false\n        else isPrimeHelper(n, l - 1)\n      }\n      if (n\
    \ == 1) false\n      else isPrimeHelper(n, floor(sqrt(n)).toLong)", '        (n
    > 1) && ((2 to (sqrt(n).toInt)).forall((x : Int) => (n % x) != 0))', "       \
    \ val max : Long = sqrt(n).toLong\n        (2l to max).forall(x => n % x != 0)",
  "        if (n < 2) {\n            return false\n        }\n        if (n == 2)\
    \ {\n            return true\n        }\n        if (n % 2 == 0) {\n         \
    \   return false\n        }\n        val max = (sqrt(n) + 1).toLong\n        for\
    \ (i <- 2l to max) {\n            if (n % i == 0) {\n                return false\n\
    \            }\n        }\n        return true", "        if (n <= 1) false\n\
    \        else if (n <= 3) true\n        else if (n % 2 == 0 || n % 3 == 0) false\n\
    \        else {\n            var i = 5\n            while (i * i <= n) {\n   \
    \             if (n % i == 0 || n % (i + 2) == 0) return false\n             \
    \   i += 6\n            }\n            true\n        }", "        // REPLACE THE\
    \ CODE BELOW WITH YOUR CODE\n        var flag = true\n        if (n==1) return\
    \ false\n        if (n==2) return true\n        for (i <- 2l to n-1l){\n     \
    \       if (n%i==0) {\n                flag = false\n                return flag\n\
    \            }\n        }\n        return flag", "        if (n == 1) return false\n\
    \        if (n == 2) return true\n        if (n % 2 == 0) return false\n     \
    \   for (x <- 3 to sqrt(n).toInt by 2) {\n            if (n % x == 0) return false\n\
    \        }\n        return true", "        if (n == 1) {\n            return false\n\
    \        }\n        val sqrtN = Math.sqrt(n).toLong\n        (2l to sqrtN).forall(i\
    \ => n % i != 0)", "        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        var k = sqrt(n).toLong\n        while (k >= 2) {\n           \
    \ if (n % k == 0) return false\n            k -= 1\n        }\n        return\
    \ true", "        if (n < 1) return false\n        if (n == 1) return false\n\
    \        if (n == 2) return true\n        val limit = sqrt(n).toLong\n       \
    \ for (i <- 2l to limit) {\n            if (n % i == 0) return false\n       \
    \ }\n        return true", '        return n > 1 && !(2l to sqrt(n).toLong).exists(x
    => n % x == 0)', "        if (n <= 1) false\n        else if (n == 2) true\n \
    \       else !(2l to sqrt(n).toLong).exists(x => n % x == 0)", '        (n ==
    2l) || (n == 3l) || (n == 5l) || (n == 7l) || (n == 11l) || (n == 13l) || (n ==
    17l) || (n == 19l) || (n == 23l) || (n == 29l) || (n == 31l) || (n == 37l) ||
    (n == 41l) || (n == 43l) || (n == 47l) || (n == 53l) || (n == 59l) || (n == 61l)
    || (n == 67l) || (n == 71l) || (n == 73l) || (n == 79l) || (n == 83l) || (n ==
    89l) || (n == 97l) || (n == 101l) || (n == 103l) || (n == 107l) || (n == 109l)
    || (n == 113l) || (n == 127l) || (n == 131l) || (n == 137l) || (n == 139l) ||
    (n == 149l) || (n == 151l) || (n == 157l) || (n == 163l) || (n == 167l) || (n
    == 173l) || (n == 179l) || (n == 181l) || (n == 191l) || (n == 193l) || (n ==
    197l) || (n == 199l) || (n == 211l) || (n == 223l) || (n == 227l) || (n == 229l)
    || (n == 233l) || (n == 239l) || (n == 241l) || (n == 251l) || (n == 257l) ||
    (n == 263l) || (n == 269l) || (n == 271l) || (n == 277l) || (n == 281l) || (n
    == 283l) || (n == 293l) || (n == 307l) || (n == 311l) || (n == 313l) || (n ==
    317l) || (n == 331l) || (n == 337l) || (n == 347l) || (n == 349l) || (n == 353l)
    || (n == 359l) || (n == 367l)', "        val max = ceil(sqrt(n)).toLong\n    \
    \    (n % 2 != 0) && (3 to max by 2).forall(n % _ != 0)", "        if (n < 2)\
    \ {\n            return false\n        }\n        if (n == 2) {\n            return\
    \ true\n        }\n        if (n % 2 == 0) {\n            return false\n     \
    \   }\n        for (i <- 3l until sqrt(n).toLong + 1 by 2) {\n            if (n\
    \ % i == 0) {\n                return false\n            }\n        }\n      \
    \  return true", "        if (n < 2) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        var sqrtN = scala.math.sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true", "        val root : Double = sqrt(n)\n     \
    \   val ceiling : Int = ceil(root).toInt\n        for (i <- 2 to ceiling) {\n\
    \            if (n % i == 0) return false\n        }\n        return true", " \
    \       if (n == 2) {\n            return true;\n        }\n        if (n == 1\
    \ || n % 2 == 0) {\n            return false;\n        }\n        for (i <- 3\
    \ to (n / 2) by 2) {\n            if (n % i == 0) {\n                return false;\n\
    \            }\n        }\n        return true;", "        // This uses the fact\
    \ that all numbers can be expressed as 6k+-1.\n        if (n == 1) {\n       \
    \     return false\n        }\n        if (n < 4) {\n            return true\n\
    \        }\n        if (n % 2 == 0) {\n            return false\n        }\n \
    \       if (n < 9) {\n            return true\n        }\n        if (n % 3 ==\
    \ 0) {\n            return false\n        }\n        val r = floor(sqrt(n)).toLong\n\
    \        var f = 5\n        while (f <= r) {\n            if (n % f == 0) {\n\
    \                return false\n            }\n            if (n % (f + 2) == 0)\
    \ {\n                return false\n            }\n            f += 6\n       \
    \ }\n        return true", "        def test(k : Long) : Boolean = {\n       \
    \     if (k == 1) return true;\n            if (n % k == 0) return false;\n  \
    \          return test(k - 1);\n        }\n        return test(n - 1);", "   \
    \     // We only need to check up to the square root of n to check if n is prime.\n\
    \        if (n < 2) {\n            false\n        } else {\n            val squareRootN\
    \ = ceil(sqrt(n))\n            !(2l to squareRootN.toLong).exists(n % _ == 0)\n\
    \        }", "        if (n < 2) return false\n        val limit = sqrt(n).toLong\n\
    \        (2l to limit).forall(n % _ != 0)", '      (BigInt(n).isProbablePrime(100))',
  "        if (n == 1l) return false\n        if (n == 2l) return true\n        if\
    \ (n % 2l == 0l) return false\n        val ubound = sqrt(n).toLong\n        for\
    \ (i <- 3l to ubound by 2l) {\n            if (n % i == 0l) return false\n   \
    \     }\n        return true", "        val p = sqrt(n)\n        var i = 2l\n\
    \        while (i <= p) {\n            if (n % i == 0) return false\n        \
    \    i += 1\n        }\n        return true", "        if (n < 2) return false\n\
    \        if (n == 2) return true\n        val upper : Long = sqrt(n).toLong +\
    \ 1\n        for (i <- 2l to upper) {\n            if (n % i == 0) return false\n\
    \        }\n        return true", "        if (n == 2) return true\n        if\
    \ (n == 1 || n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt by\
    \ 2) {\n            if (n % i == 0) return false\n        }\n        return true",
  "        if (n <= 1) return false\n        var i = 2\n        while (i <= sqrt(n).toInt)\
    \ {\n            if (n % i == 0) return false\n            i += 1\n        }\n\
    \        return true", "        if (n < 2) {\n            return false\n     \
    \   }\n        if (n == 2) {\n            return true\n        }\n        if (n\
    \ % 2 == 0) {\n            return false\n        }\n        val sqrtN = sqrt(n).toLong\n\
    \        if (sqrtN * sqrtN == n) {\n            return false\n        }\n    \
    \    val limit = floor(sqrt(n)).toLong\n        for (i <- 3l to limit by 2) {\n\
    \            if (n % i == 0) {\n                return false\n            }\n\
    \        }\n        return true", "      val r = sqrt(n).toLong\n      if (n ==\
    \ 2 || n == 3) true\n      else if (n % 2 == 0 || n % 3 == 0) false\n      else\
    \ {\n        var i = 5\n        while (i <= r) {\n          if (n % i == 0) return\
    \ false\n          if (n % (i + 2) == 0) return false\n          i += 6\n    \
    \    }\n        true\n      }", "        if (n == 1) return false\n        return\
    \ (2 to sqrt(n).toInt).forall(x => n % x != 0)", "        // https://stackoverflow.com/questions/1623375/writing-your-own-prime-checker-function-in-basic-language\n\
    \        // https://stackoverflow.com/questions/26551055/best-algorithm-to-check-for-prime-numbers-in-java\n\
    \        if (n == 2 || n == 3) return true\n        if (n % 2 == 0 || n % 3 ==\
    \ 0) return false\n        if (n == 1) return false\n        var i = 5\n     \
    \   var w = 2\n        while (i * i <= n) {\n            if (n % i == 0) return\
    \ false\n            i += w\n            w = 6 - w\n        }\n        return\
    \ true", "        var i = 2\n        while (i < n) {\n            if (n % i ==\
    \ 0) {\n                return false\n            }\n            i += 1\n    \
    \    }\n        true", "        if (n <= 1) return false\n        if (n <= 3)\
    \ return true\n        if (n % 2 == 0 || n % 3 == 0) return false\n        var\
    \ i = 5\n        while (i * i <= n) {\n            if (n % i == 0 || n % (i +\
    \ 2) == 0) return false\n            i += 6\n        }\n        return true",
  "        if (n == 2) {\n            return true;\n        }\n        if (n == 1\
    \ || n % 2 == 0) {\n            return false;\n        }\n        var i : Long\
    \ = 3;\n        while (i <= sqrt(n)) {\n            if (n % i == 0) {\n      \
    \          return false;\n            }\n            i = i + 2;\n        }\n \
    \       return true;", '        return n > 1 && Iterator.range(2, round(sqrt(n)).toInt
    + 1).forall(i => n % i != 0)', "        if (n == 1l) return false\n        if\
    \ (n == 2l) return true\n        val max = ceil(sqrt(n))\n        var i = 2l\n\
    \        while (i <= max) {\n            if (n % i == 0) return false\n      \
    \      i += 1\n        }\n        return true", "        if (n <= 1) {\n     \
    \       return false\n        }\n        if (n == 2) {\n            return true\n\
    \        }\n        if (n % 2 == 0) {\n            return false\n        }\n \
    \       for (i <- 3l to sqrt(n).toLong by 2) {\n            if (n % i == 0) {\n\
    \                return false\n            }\n        }\n        return true",
  "        var k = (2l to floor(sqrt(n)).toLong)\n        for (i <- k) {\n       \
    \     if (n % i == 0) {\n                return false\n            }\n       \
    \ }\n        return true", "        if (n == 1) return false\n        if (n ==\
    \ 2) return true\n        if (n % 2 == 0) return false\n        for (i <- 3l to\
    \ Math.sqrt(n).asInstanceOf[Long] by 2) {\n            if (n % i == 0) return\
    \ false\n        }\n        return true", "        if (n == 1) return false\n\
    \        if (n % 2 == 0) return false\n        if (n % 3 == 0) return false\n\
    \        for (i <- 1 to (sqrt(n).toInt + 1) / 6) {\n            if (n % (6 * i\
    \ - 1) == 0) return false\n            if (n % (6 * i + 1) == 0) return false\n\
    \        }\n        return true", "        var i = 2l\n        var f = true\n\
    \        while (i < (sqrt(n) + 1)) {\n            if ((n % i) == 0) {\n      \
    \          f = false\n            }\n            i += 1\n        }\n        return\
    \ f", "        if (n == 2) return true\n        if (n < 2 || n % 2 == 0) return\
    \ false\n        val upperBound = math.sqrt(n).toLong\n        for (x <- 3l to\
    \ upperBound by 2) {\n            if (n % x == 0) return false\n        }\n  \
    \      return true", "        if (n == 1) {\n            return false\n      \
    \  }\n        val sqrt : Double = sqrt(n)\n        val upper : Long = sqrt.toLong\n\
    \        for (i <- 2 to upper) {\n            if (n % i == 0) {\n            \
    \    return false\n            }\n        }\n        return true", "        if\
    \ (n < 2) false\n        else if (n == 2) true\n        else !(2 to sqrt(n).toInt).exists(x\
    \ => n % x == 0)", "        if (n == 2 || n == 3) return true\n        if (n ==\
    \ 1 || n % 2 == 0) return false\n        var i = 3\n        var sqrtOfn = sqrt(n).toInt\n\
    \        while (i <= sqrtOfn) {\n            if (n % i == 0) return false\n  \
    \          i += 2\n        }\n        return true", "        if (n == 2) return\
    \ true\n        if (n == 1 || n % 2 == 0) return false\n        val limit = sqrt(n)\n\
    \        var i = 3\n        while (i <= limit) {\n            if (n % i == 0)\
    \ return false\n            i += 2\n        }\n        return true", "       \
    \ if (n == 1) false\n        else if (n < 4) true\n        else if (n % 2 == 0)\
    \ false\n        else if (n < 9) true\n        else if (n % 3 == 0) false\n  \
    \      else {\n            val r = floor(sqrt(n)).toLong\n            var f =\
    \ 5\n            while (f <= r) {\n                if (n % f == 0) return false\n\
    \                if (n % (f + 2) == 0) return false\n                f += 6\n\
    \            }\n            true\n        }", "        val sqrt = sqrt(n)\n  \
    \      if (n == 1) {\n            return false\n        }\n        if (n == 2)\
    \ {\n            return true\n        }\n        if (n % 2 == 0) {\n         \
    \   return false\n        }\n        for (i <- 3 to sqrt.toInt by 2) {\n     \
    \       if (n % i == 0) {\n                return false\n            }\n     \
    \   }\n        return true", "        if (n <= 1) return false\n        if (n\
    \ == 2) return true\n        val sqrt_n = sqrt(n).toLong\n        for (i <- 2l\
    \ to sqrt_n) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true", "        if (n == 1) false\n        else if (n < 4) true\n        else\
    \ if (n % 2 == 0) false\n        else if (n < 9) true\n        else if (n % 3\
    \ == 0) false\n        else {\n            val sq = sqrt(n).toLong\n         \
    \   var f = 5\n            while (f <= sq) {\n                if (n % f == 0)\
    \ return false\n                if (n % (f + 2) == 0) return false\n         \
    \       f += 6\n            }\n            true\n        }", "        if (n ==\
    \ 2) return true\n        val u = (n / 2) + 1\n        for (i <- 2l to u) {\n\
    \            if (n % i == 0) return false\n        }\n        return true", " \
    \       val nSqrt = sqrt(n).toLong\n        for (i <- 2 to nSqrt) {\n        \
    \    if (n % i == 0) return false\n        }\n        return true", "        if\
    \ (n == 1) return false\n        if (n == 2) return true\n        if (n % 2 ==\
    \ 0) return false\n        val max = sqrt(n).toLong\n        for (i <- 3l to max\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true", "        if (n <= 0) return false\n        if (n == 1) return false\n\
    \        val sqrt = ceil(Math.sqrt(n))\n        for (i <- 2l to sqrt.toLong) {\n\
    \            if (n % i == 0) return false\n        }\n        return true", " \
    \       // Insert your code here\n        var result = true\n        if (n > 1)\
    \ {\n            if (n > 2) {\n                if (n % 2 == 0) {\n           \
    \         result = false\n                } else {\n                    var i\
    \ = 3\n                    while (i <= sqrt(n) && result) {\n                \
    \        if (n % i == 0) {\n                            result = false\n     \
    \                   }\n                        i += 2\n                    }\n\
    \                }\n            }\n        } else {\n            result = false\n\
    \        }\n        result", "        var x = n\n        if (x == 1) {\n     \
    \       return false\n        }\n        var y = 2\n        while (y < (x)) {\n\
    \            if (((x) % (y)) == 0) {\n                return false\n         \
    \   }\n            y = (y) + (1)\n        }\n        return true", "        if\
    \ (n == 1) false\n        else {\n            val sqrtn = sqrt(n).toLong\n   \
    \         def loop(i : Long) : Boolean = {\n                if (i <= sqrtn) {\n\
    \                    if (n % i == 0) false\n                    else loop(i +\
    \ 1)\n                }\n                else true\n            }\n          \
    \  loop(2)\n        }", "        if (n == 2) return true\n        if (n < 2 ||\
    \ n % 2 == 0) return false\n        for (i <- 3 to scala.math.sqrt(n).toInt by\
    \ 2) {\n            if (n % i == 0) return false\n        }\n        return true",
  "        if (n < 2) return false\n        if (n == 2) return true\n        val sqrtn\
    \ = math.sqrt(n).toLong\n        for (i <- 2l to sqrtn) {\n            if (n %\
    \ i == 0) return false\n        }\n        return true", "        if (n == 1)\
    \ return false\n        if (n == 2) return true\n        var i = 2l\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) return false\n            i += 1\n\
    \        }\n        return true", "        if (n <= 1) return false\n        if\
    \ (n <= 3) return true\n        if (n % 2 == 0 || n % 3 == 0) return false\n \
    \       var i = 5\n        while (i * i <= n) {\n            if (n % i == 0 ||\
    \ n % (i + 2) == 0) return false\n            i += 6\n        }\n        return\
    \ true", "        if (n <= 1) return false\n        for (i <- 2l to sqrt(n).toLong)\
    \ {\n            if (n % i == 0) return false\n        }\n        return true",
  "        val top : Double = sqrt(n)\n        val max : Int = floor(top).toInt\n\
    \        (2 to max).forall((k : Int) => n % k != 0)", "        if (n <= 1) return\
    \ false\n        var i = 2\n        while (i <= sqrt(n).toInt) {\n           \
    \ if (n % i == 0) return false\n            i += 1\n        }\n        return\
    \ true", "        if (n < 2) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 2l to limit) if (n % i == 0) return false\n        return true",
  "        if (n == 1) false\n        else {\n            for (i <- 2l to sqrt(n).toLong)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ true\n        }", "        if (n <= 1) {\n            return false\n       \
    \ }\n        else if (n == 2) {\n            return true\n        }\n        else\
    \ if (n % 2 == 0) {\n            return false\n        }\n        else {\n   \
    \         var isPrime : Boolean = true\n            var i : Long = 3\n       \
    \     while (i <= ceil(sqrt(n))) {\n                if (n % i == 0) {\n      \
    \              isPrime = false\n                    return isPrime\n         \
    \       }\n                i += 2\n            }\n            return isPrime\n\
    \        }", "        // BigInt(5l).isProbablePrime(1)\n        if (n == 1) false\n\
    \        else if (n < 4) true\n        else if (n % 2 == 0) false\n        else\
    \ if (n < 9) true\n        else if (n % 3 == 0) false\n        else {\n      \
    \      val r = floor(sqrt(n)).toLong\n            var f = 5l\n            while\
    \ (f <= r) {\n                if (n % f == 0) return false\n                if\
    \ (n % (f + 2) == 0) return false\n                f += 6\n            }\n   \
    \         true\n        }", "        if (n < 2) return false\n        else if\
    \ (n == 2) return true\n        else if (n % 2 == 0) return false\n        else\
    \ {\n            val sqrtn = sqrt(n).toLong\n            for (i <- 3l to sqrtn\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }", "        if (n < 2) false\n        else {\n \
    \           var factor : Long = 2\n            while (factor <= n / factor) {\n\
    \                if (n % factor == 0) return false\n                factor +=\
    \ 1\n            }\n            true\n        }", "        if (n < 2) return false\n\
    \        if (n == 2) return true\n        var i = 2\n        while (i <= sqrt(n).toInt)\
    \ {\n            if (n % i == 0) return false\n            i += 1\n        }\n\
    \        return true", "        if (n <= 0) return false\n        if (n == 1)\
    \ return false\n        if (n == 2) return true\n        if (n % 2 == 0) return\
    \ false\n        val ubound = ceil(sqrt(n)).toLong\n        for (i <- 3l to ubound\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true", "        if (n < 2) {\n            return false\n        }\n        if\
    \ (n == 2) {\n            return true\n        }\n        if (n % 2 == 0) {\n\
    \            return false\n        }\n        var i : Long = 3\n        val sqrtN\
    \ : Long = sqrt(n).toLong\n        while (i <= sqrtN) {\n            if (n % i\
    \ == 0) {\n                return false\n            }\n            i += 2\n \
    \       }\n        return true", "        if (n == 1) {\n            return false\n\
    \        }\n        if (n == 2) {\n            return true\n        }\n      \
    \  if (n == 3) {\n            return true\n        }\n        if (n % 2 == 0)\
    \ {\n            return false\n        }\n        if (n % 3 == 0) {\n        \
    \    return false\n        }\n        var i : Long = 5\n        var w : Long =\
    \ 2\n        while (i * i <= n) {\n            if (n % i == 0) {\n           \
    \     return false\n            }\n            i += w\n            w = 6 - w\n\
    \        }\n        return true", "        if (n <= 1) false\n        else if\
    \ (n == 2) true\n        else !(2 to (sqrt(n).toInt + 1)).exists(x => n % x ==\
    \ 0)", "        if (n <= 1) return false\n        if (n == 2) return true\n  \
    \      if (n % 2 == 0) return false\n        val x = Math.sqrt(n).toLong\n   \
    \     var y = 3l\n        while (y <= x) {\n            if (n % y == 0) return\
    \ false\n            y += 2\n        }\n        return true", "        if (n ==\
    \ 1) {\n            return false\n        }\n        if (n == 2) {\n         \
    \   return true\n        }\n        if (n % 2 == 0) {\n            return false\n\
    \        }\n        var i : Long = 3\n        while (i <= sqrt(n)) {\n       \
    \     if (n % i == 0) {\n                return false\n            }\n       \
    \     i += 2\n        }\n        return true", "        if (n == 1) false\n  \
    \      else if (n < 4) true\n        else if (n % 2 == 0) false\n        else\
    \ if (n < 9) true\n        else if (n % 3 == 0) false\n        else {\n      \
    \      val r = floor(sqrt(n)).toLong\n            var f = 5l\n            while\
    \ (f <= r) {\n                if (n % f == 0) return false\n                if\
    \ (n % (f + 2) == 0) return false\n                f += 6\n            }\n   \
    \         true\n        }", "        if (n < 1) {\n            return false\n\
    \        }\n        if (n == 1) {\n            return false\n        }\n     \
    \   if (n < 4) {\n            return true\n        }\n        if (n % 2 == 0)\
    \ {\n            return false\n        }\n        if (n < 9) {\n            return\
    \ true\n        }\n        if (n % 3 == 0) {\n            return false\n     \
    \   }\n        val r = floor(sqrt(n)).toLong\n        var f = 5l\n        while\
    \ (f <= r) {\n            if (n % f == 0) {\n                return false\n  \
    \          }\n            if (n % (f + 2) == 0) {\n                return false\n\
    \            }\n            f += 6\n        }\n        return true", "       \
    \ if (n == 2) true\n        else if (n < 2 || n % 2 == 0) false\n        else\
    \ (3l to sqrt(n).toLong by 2).forall(n % _ != 0)", "        if (n < 2) return\
    \ false\n        for (i <- 2 to ceil(sqrt(n)).toInt) {\n            if (n % i\
    \ == 0) return false\n        }\n        return true", "        // Note: according\
    \ to my calculations, assuming a 50% false positive rate, we have to check up\
    \ to 1,333,544,849 before getting a false positive.\n        // However, according\
    \ to Wolfram Alpha, the 1,333,544,849th prime is 22,670,731,541, which is way\
    \ too large to check by this method.\n        // So we need to use the Sieve of\
    \ Eratosthenes method.\n        if (n <= 1) false\n        else if (n == 2) true\n\
    \        else !(2 until (sqrt(n) + 1).toInt).exists(x => n % x == 0)", "     \
    \   if (n == 2) return true\n        if (n < 2 || n % 2 == 0) return false\n \
    \       val q = sqrt(n).toLong\n        var i = 3l\n        while (i <= q) {\n\
    \            if (n % i == 0) return false\n            i += 2\n        }\n   \
    \     return true", "        if (n <= 1) return false\n        var i = 2l\n  \
    \      while (i <= sqrt(n)) {\n            if (n % i == 0) return false\n    \
    \        i += 1\n        }\n        return true", "        if (n == 1) return\
    \ false\n        if (n == 2) return true\n        if (n % 2 == 0) return false\n\
    \        var i = 3\n        while (i <= sqrt(n)) {\n            if (n % i == 0)\
    \ return false\n            i += 2\n        }\n        return true", "       \
    \ if (n == 1) return false\n        var sqrtn = sqrt(n).toLong\n        if (sqrtn\
    \ * sqrtn == n) sqrtn -= 1\n        while (sqrtn > 1) {\n            if (n % sqrtn\
    \ == 0) return false\n            sqrtn -= 1\n        }\n        return true",
  "        var i = 2l\n        while(i <= floor(sqrt(n.toDouble)).toLong) {\n    \
    \        if(n % i == 0) {\n                return false\n            }\n     \
    \       i += 1\n        }\n        return true", "        if (n == 2 || n == 3)\
    \ {\n            return true\n        }\n        if (n % 2 == 0 || n % 3 == 0)\
    \ {\n            return false\n        }\n        var i = 5\n        while (i\
    \ * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n           \
    \     return false\n            }\n            i += 6\n        }\n        return\
    \ true", "        val upperBound = (floor(sqrt(n))).toLong\n        var i = 2l\n\
    \        while (i <= upperBound) {\n            if (n % i == 0) {\n          \
    \      return false\n            }\n            i += 1\n        }\n        return\
    \ true", '        return !(2 to (sqrt(n).toInt)).exists(i => n % i == 0)', " \
    \       if (n == 1) return false\n        if (n == 2) return true\n        val\
    \ sqrtN = sqrt(n)\n        for (d <- 2 to sqrtN.toInt) {\n            if (n %\
    \ d == 0) return false\n        }\n        return true", "        if (n == 2)\
    \ return true\n        if (n < 2 || n % 2 == 0) return false\n        for (i <-\
    \ 3l to sqrt(n).toLong by 2) {\n            if (n % i == 0) return false\n   \
    \     }\n        return true", "        var d = 2\n        while (d <= sqrt(n))\
    \ {\n            if (n % d == 0) return false\n            d += 1\n        }\n\
    \        return true", "        if (n == 1) return false\n        if (n == 2)\
    \ return true\n        val root = math.sqrt(n).toLong\n        val primes = (2l\
    \ to root).toList.filter(x => isPrime(x))\n        if (primes.exists(p => n %\
    \ p == 0)) return false\n        true", "        if (n <= 1) return false\n  \
    \      if (n == 2) return true\n        if (n % 2 == 0) return false\n       \
    \ for (i <- 3 to sqrt(n).toInt by 2) if (n % i == 0) return false\n        return\
    \ true", "        if (n == 1l) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 2l to sqrtN) {\n            if (n % i == 0) return false\n\
    \        }\n        return true", "        if (n < 2) return false\n        val\
    \ last = Math.sqrt(n).toLong\n        val primes = HashSet((2l, 3l, 5l, 7l, 11l,\
    \ 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l,\
    \ 79l, 83l, 89l, 97l, 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l,\
    \ 151l, 157l, 163l, 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l,\
    \ 227l, 229l, 233l, 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l,\
    \ 293l, 307l, 311l, 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l,\
    \ 379l, 383l, 389l, 397l, 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l, 449l,\
    \ 457l, 461l, 463l, 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 541l,\
    \ 547l, 557l, 563l, 569l, 571l, 577l, 587l, 593l, 599l, 601l, 607l, 613l, 617l,\
    \ 619l, 631l, 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l,\
    \ 709l, 719l, 727l, 733l, 739l, 743l, 751l, 757l, 761l, 769l, 773l, 787l, 797l,\
    \ 809l, 811l, 821l", "        if (n <= 1) false\n        else if (n == 2) true\n\
    \        else !(2 to (sqrt(n).toInt) + 1).exists(x => n % x == 0)", "        if\
    \ (n == 1) {\n            return false\n        }\n        for (x <- 2l to (floor(sqrt(n)).toLong))\
    \ {\n            if (n % x == 0) {\n                return false\n           \
    \ }\n        }\n        return true", "        if (n == 2) return true\n     \
    \   if (n == 1 || n % 2 == 0) return false\n        val sqrt_n = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt_n by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true", "        if (n <= 1) return false\n        if\
    \ (n == 2) return true\n        if (n % 2 == 0) return false\n        var i =\
    \ 3\n        while (i <= Math.sqrt(n)) {\n            if (n % i == 0) return false\n\
    \            i += 2\n        }\n        return true", "        if (n == 1) return\
    \ false\n        if (n % 2 == 0) return n == 2\n        if (n % 3 == 0) return\
    \ n == 3\n        val l = sqrt(n).toLong\n        var i = 5l\n        while (i\
    \ <= l) {\n            if (n % i == 0) return false\n            i += 2\n    \
    \        if (n % i == 0) return false\n            i += 4\n        }\n       \
    \ return true", "        if (n == 2) return true\n        if (n % 2 == 0) return\
    \ false\n        val limit = Math.sqrt(n)\n        for (i <- 3l to limit by 2)\
    \ {\n            if (n % i == 0) return false\n        }\n        return true",
  "        if (n < 2) {\n            return false\n        }\n        if (n == 2)\
    \ {\n            return true\n        }\n        if (n % 2 == 0) {\n         \
    \   return false\n        }\n        for (i <- (3l to (sqrt(n).asInstanceOf[Long]\
    \ + 1l) by 2l)) {\n            if (n % i == 0) {\n                return false\n\
    \            }\n        }\n        return true", "        if (n == 2) return true\n\
    \        if (n % 2 == 0) return false\n        val end = ceil(sqrt(n)).toLong\n\
    \        var d = 3l\n        while (d <= end) {\n            if (n % d == 0) return\
    \ false\n            d += 2\n        }\n        return true", '        (1l until
    n).forall(x => n % x != 0)', "        if (n <= 1) false\n        else if (n ==\
    \ 2) true\n        else !(2 to (sqrt(n).toInt) + 1).exists(x => n % x == 0)",
  "        if (n == 2 || n == 3) return true\n        if (n % 2 == 0 || n % 3 == 0)\
    \ return false\n        val root = sqrt(n).toLong\n        for (i <- 2 to root)\
    \ {\n            if (n % i == 0) return false\n        }\n        return true",
  "        if (n < 2) return false\n        if (n == 2) return true\n        val bound\
    \ = (sqrt(n)).toLong\n        for (i <- 2l to bound) {\n            if (n % i\
    \ == 0) return false\n        }\n        return true", "        if (n == 2) return\
    \ true\n        if (n < 2 || n % 2 == 0) return false\n        for (i <- 3l to\
    \ sqrt(n).toLong by 2) {\n            if (n % i == 0) return false\n        }\n\
    \        return true", "        if (n == 1) {\n            return false\n    \
    \    }\n        if (n < 4) {\n            return true\n        }\n        if (n\
    \ % 2 == 0) {\n            return false\n        }\n        if (n < 9) {\n   \
    \         return true\n        }\n        if (n % 3 == 0) {\n            return\
    \ false\n        }\n        var r : Long = floor(sqrt(n)).toLong\n        var\
    \ f : Long = 5\n        while (f <= r) {\n            if (n % f == 0) {\n    \
    \            return false\n            }\n            if (n % (f + 2) == 0) {\n\
    \                return false\n            }\n            f += 6\n        }\n\
    \        return true", "        if (n == 1) return false\n        return !(2l\
    \ to (sqrt(n)).toLong).exists(n % _ == 0)", '        return (2 to sqrt(n).toInt).toList.forall(p
    => n % p != 0)', "        if (n == 1) return false\n        var i = 2\n      \
    \  while (i <= sqrt(n).toInt) {\n            if (n % i == 0) return false\n  \
    \          i += 1\n        }\n        return true", "        if (n == 2 || n ==\
    \ 3) return true\n        if (n % 2 == 0 || n % 3 == 0) return false\n       \
    \ val r = floor(sqrt(n)).toLong\n        var f = 5l\n        while (f <= r) {\n\
    \            if (n % f == 0) return false\n            if (n % (f + 2) == 0) return\
    \ false\n            f += 6\n        }\n        return true", "        if (n ==\
    \ 1l) {\n            return false\n        }\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 2l to limit) {\n            if (n % i == 0l) {\n          \
    \      return false\n            }\n        }\n        return true", "       \
    \ for (i <- 2l to (sqrt(n) + 1).toLong) {\n            if (n % i == 0) return\
    \ false\n        }\n        return true", "        if (n < 2) false\n        else\
    \ {\n            val ubound = ceil(sqrt(n)).toLong\n            (2l to ubound).forall(n\
    \ % _ != 0)\n        }", "        n match {\n            case n if n <= 1 => false\n\
    \            case n if n == 2 => true\n            case n if n % 2 == 0 => false\n\
    \            case n =>\n                val upperBound = sqrt(n).toLong\n    \
    \            val primes = (3l to upperBound by 2).toArray\n                primes.foreach(i\
    \ =>\n                    if (i <= upperBound && n % i == 0) return false)\n \
    \               true\n        }", "        if (n <= 1) false\n        else if\
    \ (n == 2) true\n        else !(2 to sqrt(n).toInt).exists(x => n % x == 0)",
  '        (2l to sqrt(n).toLong).exists(n % _ == 0) == false', "        if (n ==\
    \ 2) {\n            return true;\n        }\n        if (n < 2 || n % 2 == 0)\
    \ {\n            return false;\n        }\n        val bound = ceil(sqrt(n)).toLong;\n\
    \        var i = 3l;\n        while (i <= bound) {\n            if (n % i == 0)\
    \ {\n                return false;\n            }\n            i += 2;\n     \
    \   }\n        return true;", "        if (n <= 1) return false\n        if (n\
    \ == 2) return true\n        if (n % 2 == 0) return false\n        val sqrt =\
    \ sqrt(n).toLong\n        var i = 3l\n        while (i <= sqrt) {\n          \
    \  if (n % i == 0) return false\n            i += 2\n        }\n        return\
    \ true", "        if (n < 2) return false\n        if (n == 2) return true\n \
    \       if (n % 2 == 0) return false\n        val upperLimit = floor(sqrt(n)).toLong\n\
    \        var i = 3l\n        while (i <= upperLimit) {\n            if (n % i\
    \ == 0) return false\n            i += 2\n        }\n        return true", " \
    \       // Return true if n is greater than 1, and if n is only divisible by 1\
    \ and n.\n        (n > 1) && (2 to round(sqrt(n)).toInt).forall(n % _ != 0)",
  "        val sqrtN = sqrt(n)\n        val sqrtInt = sqrtN.toInt\n        if (n ==\
    \ 1) false\n        else if (n == 2) true\n        else if (n == 3) true\n   \
    \     else {\n            var i = 2\n            while (i <= sqrtInt) {\n    \
    \            if (n % i == 0) {\n                    return false\n           \
    \     }\n                i += 1\n            }\n            true\n        }",
  "        n match {\n            case n if n == 1 => false\n            case n if\
    \ n == 2 => true\n            case n if n % 2 == 0 => false\n            case\
    \ n => {\n                (3l to (sqrt(n).toLong + 1)).forall(x => n % x != 0)\n\
    \            }\n        }", "        if (n == 1) return false\n        if (n <\
    \ 4) return true\n        if (n % 2 == 0) return false\n        if (n < 9) return\
    \ true\n        if (n % 3 == 0) return false\n        val r = floor(sqrt(n)).toLong\n\
    \        var f = 5l\n        while (f <= r) {\n            if (n % f == 0) return\
    \ false\n            if (n % (f + 2) == 0) return false\n            f += 6\n\
    \        }\n        return true", "        val i : Long = 2\n        if (n <=\
    \ 1) false\n        else if (n == 2) true\n        else if (n % i == 0) false\n\
    \        else {\n            var prime : Boolean = true\n            var j : Long\
    \ = 3\n            while (j <= math.sqrt(n).toLong) {\n                if (n %\
    \ j == 0) {\n                    prime = false\n                    return prime\n\
    \                }\n                j += 2\n            }\n            prime\n\
    \        }", "        if (n == 1) return false\n        val max : Long = sqrt(n).toLong\n\
    \        for (i <- 2l to max) {\n            if (n % i == 0) return false\n  \
    \      }\n        return true", "        if (n == 2 || n == 3) {\n           \
    \ return true\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n          \
    \  return false\n        }\n        var i = 5\n        var w = 2\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                return false\n\
    \            }\n            i += w\n            w = 6 - w\n        }\n       \
    \ return true", "        var result : Boolean = true\n        var i : Long = 2\n\
    \        while(i <= sqrt(n.toDouble)) {\n            if(n % i == 0) {\n      \
    \          result = false\n                i = n\n            }\n            i\
    \ += 1\n        }\n        return result", "        if (n <= 1) return false\n\
    \        if (n <= 3) return true\n        if (n % 2 == 0 || n % 3 == 0) return\
    \ false\n        var i = 5\n        while (i * i <= n) {\n            if (n %\
    \ i == 0 || n % (i + 2) == 0) return false\n            i += 6\n        }\n  \
    \      return true", "        val h = ceil(sqrt(n)).toLong\n        if (n <= 1)\
    \ return false\n        if (n == 2) return true\n        if (n % 2 == 0) return\
    \ false\n        if (n == 3) return true\n        if (n % 3 == 0) return false\n\
    \        var i = 5\n        while (i <= h) {\n            if (n % i == 0) return\
    \ false\n            if (n % (i + 2) == 0) return false\n            i += 6\n\
    \        }\n        return true", "        if (n < 2) return false\n        val\
    \ m = sqrt(n).toLong\n        for (i <- 2l to m) {\n            if (n % i == 0)\
    \ return false\n        }\n        return true", "        if (n <= 1) return false\n\
    \        var i = 2\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ return false\n            i += 1\n        }\n        return true", "       \
    \ if (n <= 1) return false\n        if (n <= 3) return true\n        var i = 2\n\
    \        while (i <= sqrt(n)) {\n            if (n % i == 0) return false\n  \
    \          i += 1\n        }\n        return true", "        if (n == 2) {\n \
    \           return true;\n        }\n        if (n < 2 || n % 2 == 0) {\n    \
    \        return false;\n        }\n        var i : Long = 3;\n        while (i\
    \ <= sqrt(n)) {\n            if (n % i == 0) {\n                return false;\n\
    \            }\n            i += 2;\n        }\n        return true;", "     \
    \   if (n == 2) return true\n        if (n == 1 || n % 2 == 0) return false\n\
    \        var p = 3\n        while (p <= sqrt(n)) {\n            if (n % p == 0)\
    \ return false\n            p += 2\n        }\n        return true", "       \
    \ if (n < 2) return false\n        if (n == 2) return true\n        if (n % 2\
    \ == 0) return false\n        val max = ceil(sqrt(n)).toLong\n        for (i <-\
    \ 3l to max by 2) {\n            if (n % i == 0) return false\n        }\n   \
    \     return true", "        if (n <= 1) {\n            return false\n       \
    \ }\n        else if (n == 2) {\n            return true\n        }\n        else\
    \ if (n % 2 == 0) {\n            return false\n        }\n        var i : Long\
    \ = 3\n        while (i <= (floor(sqrt(n)))) {\n            if (n % i == 0) {\n\
    \                return false\n            }\n            i += 2\n        }\n\
    \        return true", "        if (n <= 1) return false\n        val r = sqrt(n).toLong\n\
    \        for (i <- 2l to r) if (n % i == 0) return false\n        return true",
  "        if (n == 1) return false\n        for (i <- 2l to sqrt(n).toLong) {\n \
    \           if (n % i == 0) return false\n        }\n        return true", " \
    \       val m = sqrt(n)\n        !(2l to m.toLong).exists(n % _ == 0)", "    \
    \    val limit = floor(sqrt(n)).toLong + 1\n        if (n == 1) return false\n\
    \        if (n < 4) return true\n        if (n % 2 == 0) return false\n      \
    \  if (n < 9) return true\n        if (n % 3 == 0) return false\n        var counter\
    \ = 5l\n        while (counter <= limit) {\n            if (n % counter == 0)\
    \ return false\n            if (n % (counter + 2) == 0) return false\n       \
    \     counter += 6\n        }\n        return true", '        (n > 1) && (List.range(2,
    (n.toInt + 1)) forall ((i : Int) => (n % i) != 0))', "        if (n == 2 || n\
    \ == 3) return true\n        if (n % 2 == 0 || n % 3 == 0) return false\n    \
    \    var i = 5\n        var w = 2\n        while (i * i <= n) {\n            if\
    \ (n % i == 0) return false\n            i += w\n            w = 6 - w\n     \
    \   }\n        return true", "        if (n == 1) false\n        else if (n <\
    \ 4) true\n        else if (n % 2 == 0) false\n        else if (n < 9) true\n\
    \        else if (n % 3 == 0) false\n        else {\n            val r = floor(sqrt(n)).toLong\n\
    \            var f = 5\n            while (f <= r) {\n                if (n %\
    \ f == 0) return false\n                if (n % (f + 2) == 0) return false\n \
    \               f += 6\n            }\n            true\n        }", "       \
    \ if (n < 2) return false\n        var i = 2\n        while (i * i <= n) {\n \
    \           if (n % i == 0) return false\n            i += 1\n        }\n    \
    \    return true", "        if (n <= 1) return false\n        for (i <- 2l to\
    \ (sqrt(n) + 1).toLong) {\n            if (n % i == 0) return false\n        }\n\
    \        return true", "        if (n == 2) {\n            return true;\n    \
    \    }\n        if (n == 1 || n % 2 == 0) {\n            return false;\n     \
    \   }\n        for (x <- (3l) to (sqrt(n).toLong) by (2l)) {\n            if (n\
    \ % x == 0) {\n                return false;\n            }\n        }\n     \
    \   return true;", "        for (i <- 2l to (ceil(sqrt(n)) + 1).toLong) {\n  \
    \          if (n % i == 0) return false\n        }\n        return true", "  \
    \      // Commented out for speeding up.\n        // if (n == 1) {\n        //\
    \     return false\n        // }\n        // if (n == 2) {\n        //     return\
    \ true\n        // }\n        for (i <- 2l to round(sqrt(n)).toLong) {\n     \
    \       if (n % i == 0) {\n                return false\n            }\n     \
    \   }\n        return true", "        if (n <= 1) return false\n        val x\
    \ = sqrt(n).toLong\n        for (i <- 2l to x) {\n            if (n % i == 0)\
    \ return false\n        }\n        return true", "        val upper = round(sqrt(n.asInstanceOf[Double])).asInstanceOf[Long]\n\
    \        if (n == 1) return false\n        if (n == 2) return true\n        for\
    \ (i <- 2l to upper) {\n            if (n % i == 0) return false\n        }\n\
    \        return true", "        // Negative numbers are not prime.\n        if\
    \ (n < 0)\n            return false\n        // One is not prime.\n        if\
    \ (n == 1)\n            return false\n        // Two is prime.\n        if (n\
    \ == 2)\n            return true\n        // Even numbers are not prime.\n   \
    \     if (n % 2 == 0)\n            return false\n        // Number must be odd\
    \ now.\n        var i : Long = 3\n        while (i <= math.sqrt(n).toLong) {\n\
    \            if (n % i == 0)\n                return false\n            i += 2\n\
    \        }\n        return true", "        if (n <= 1) return false\n        if\
    \ (n == 2) return true\n        if (n % 2 == 0) return false\n        val limit\
    \ = sqrt(n)\n        for (i <- 3l to limit by 2) {\n            if (n % i == 0)\
    \ return false\n        }\n        return true", "        if (n < 2) return false\n\
    \        val limit = sqrt(n).toLong\n        for (i <- 2l to limit) {\n      \
    \      if (n % i == 0) return false\n        }\n        return true", "      \
    \  if (n == 1) return false\n        for (i <- 2l to (sqrt(n).toLong)) {\n   \
    \         if (n % i == 0) return false\n        }\n        return true", "   \
    \     if (n <= 1) false\n        else if (n == 2) true\n        else !(2 to sqrt(n).toInt).exists(x\
    \ => n % x == 0)", "        val nums = (2l until n).toList\n        val lst =\
    \ for (i <- nums) yield n % i\n        lst.forall(_ != 0)", '        return n.toString().forall(c
    => c.toString().toInt() == 0 || c.toString().toInt() == 1 || c.toString().toInt()
    == 2 || c.toString().toInt() == 3 || c.toString().toInt() == 5 || c.toString().toInt()
    == 7)', '        (n == 1l) || ((2l to sqrt(n).toLong).forall((i) => (n % i !=
    0l)))', "        if (n == 1l) return false\n        for (i <- 2l to (sqrt(n).toLong))\
    \ if (n % i == 0l) return false\n        return true", "        if (n == 2 ||\
    \ n == 3) true\n        else if (n < 2 || n % 2 == 0 || n % 3 == 0) false\n  \
    \      else {\n            val sqrtN = sqrt(n)\n            var i = 5\n      \
    \      while (i <= sqrtN) {\n                if (n % i == 0) return false\n  \
    \              i += 2\n                if (n % i == 0) return false\n        \
    \        i += 4\n            }\n            true\n        }", "        val root\
    \ : Long = ceil(sqrt(n)).toLong\n        val l : List[Long] = (2l to root).toList\n\
    \        l.forall(p => n % p != 0)", "      if (n == 2) return true\n      if\
    \ (n == 1 || n % 2 == 0) return false\n      for (i <- 3 to sqrt(n).toInt by 2)\
    \ {\n        if (n % i == 0) return false\n      }\n      return true", "    \
    \    if (n <= 1) {\n            return false\n        }\n        if (n <= 3) {\n\
    \            return true\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n\
    \            return false\n        }\n        var i : Long = 5\n        while\
    \ (i * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n        \
    \        return false\n            }\n            i += 6\n        }\n        return\
    \ true", "        val max = sqrt(n).toLong\n        return (3l to max by 2l).toList.forall((x\
    \ : Long) => n % x != 0)", "        if (n == 2) true\n        else if (n < 2 ||\
    \ n % 2 == 0) false\n        else {\n            var i = 3\n            var sqrt\
    \ = sqrt(n).toInt\n            while (i <= sqrt) {\n                if (n % i\
    \ == 0) return false\n                i += 2\n            }\n            true\n\
    \        }", "        if (n <= 1) {\n            return false\n        }\n   \
    \     val max = sqrt(n).toLong\n        for (i <- 2 to max) {\n            if\
    \ (n % i == 0) {\n                return false\n            }\n        }\n   \
    \     return true", "        if (n < 1) return false\n        if (n == 1) return\
    \ false\n        if (n == 2) return true\n        if (n == 3) return true\n  \
    \      if (n % 2 == 0) return false\n        if (n % 3 == 0) return false\n  \
    \      val root = sqrt(n).toLong\n        var k = 1l\n        while (6 * k - 1\
    \ <= root) {\n            if (n % (6 * k - 1) == 0) return false\n           \
    \ if (n % (6 * k + 1) == 0) return false\n            k += 1\n        }\n    \
    \    return true", "        if (n == 2) true\n        else if (n < 2 || n % 2\
    \ == 0) false\n        else {\n            for (i <- 3l to sqrt(n).toLong by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ true\n        }", "        if (n == 2) { return true }\n        else if (n ==\
    \ 1 || n % 2 == 0) { return false }\n        val sqrtN = sqrt(n).toLong\n    \
    \    var i = 3l\n        while (i <= sqrtN) {\n            if (n % i == 0) { return\
    \ false }\n            i += 2\n        }\n        return true", "        val limit\
    \ = round(sqrt(n))\n        val range = List.range(2, limit.toInt + 1)\n     \
    \   val i = range.find(n % _ == 0)\n        i match {\n            case Some(x)\
    \ => return false\n            case None => return true\n        }", "       \
    \ if (n < 2) false\n        else if (n == 2) true\n        else !(2 to (sqrt(n).toInt)).exists(x\
    \ => n % x == 0)", '        return ((n == 2) || ((n != 1) && (n % 2 != 0) && ((3
    to sqrt(n).toInt).find(i => n % i == 0) == None)))', "        var i = 0l\n   \
    \     for (i <- 2l to sqrt(n).toLong) {\n            if (n % i == 0) return false\n\
    \        }\n        return true", "        if (n <= 1) return false\n        if\
    \ (n == 2) return true\n        val max = sqrt(n).toLong\n        (2l to max).forall(n\
    \ % _ != 0)"]
stop_tokens:
- "\n    }\n"
