language: scala
name: HumanEval_67_fruit_distribution
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ write your code here\n        val st = s.split(\" \")\n        return (n - st(0).toLong\
    \ - st(3).toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Here\n        return 0\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk1ecf718.scala:23)\n\tat Problem.main(tmpk1ecf718.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        ???\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpmfzapw41.scala:19)\n\tat Problem$.main(tmpmfzapw41.scala:22)\n\
    \tat Problem.main(tmpmfzapw41.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ This is the proper way to solve this question as there are edge cases that \n\
    \        // if you solve it this way you will not have to think about them.\n\
    \        val fruitList = s.split(\" \")\n        val apple = fruitList(0).toLong\n\
    \        val orange = fruitList(3).toLong\n        val mango = n - (apple + orange)\n\
    \        return mango\n        // this is a simple way to solve this question\
    \ without the risk of edge cases.\n        // val fruitList = s.split(\" \")\n\
    \        // val apple = fruitList(0).toLong\n        // val orange = fruitList(3).toLong\n\
    \        // return (n - (apple + orange))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruit = s.split(\" \")\n        n - fruit(0).toLong - fruit(3).toLong\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ l : List[String] = s.split(\" \").toList\n        val apples : Long = l(0).toLong\n\
    \        val oranges : Long = l(3).toLong\n        return n - apples - oranges\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if\
    \ (s.contains(\"mango\")) {\n        \t(n - (s.count(_ == 'o') + s.count(_ ==\
    \ 'a')))\n        } else {\n        \t-1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0eo41rbu.scala:26)\n\tat Problem.main(tmp0eo41rbu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        null\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8qveh7o1.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[31mnull\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Null\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ a = 0\n        var o = 0\n        var s1 = s.split(\" \")\n        var s2 =\
    \ s1(0).split(\"\")\n        a = s2(0).toInt\n        s2 = s1(2).split(\"\")\n\
    \        o = s2(0).toInt\n        (n - a - o)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"a\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution(tmp8v7t0hbc.scala:25)\n\
    \tat Problem$.main(tmp8v7t0hbc.scala:29)\n\tat Problem.main(tmp8v7t0hbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ splt = s.split(\" and \")\n        val s0 = splt(0).split(\" \")(0).toLong\n\
    \        val s1 = splt(1).split(\" \")(0).toLong\n        n - s0 - s1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ res = (0l, 0l)\n        for(i <- 0 until s.length) {\n            if(s(i) ==\
    \ 'a') {\n                var j = i + 1\n                while(j < s.length &&\
    \ s(j) != ' ') {\n                    j += 1\n                }\n            \
    \    res = (res._1 + s.substring(i + 1, j).toLong, res._2)\n                i\
    \ = j\n            } else if(s(i) == 'o') {\n                var j = i + 1\n \
    \               while(j < s.length && s(j) != ' ') {\n                    j +=\
    \ 1\n                }\n                res = (res._1, res._2 + s.substring(i\
    \ + 1, j).toLong)\n                i = j\n            }\n        }\n        n\
    \ - res._1 - res._2\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmphq6t5emf.scala:27:18 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                i = j\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val i\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmphq6t5emf.scala:34:18 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                i = j\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val i\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n    \tval\
    \ ss = s.split(\"and\")\n    \tvar i = 0\n    \tvar count : Long = 0\n    \tfor\
    \ (i <- 0 to ss.length - 1) {\n    \t\tval temp = ss(i).trim\n    \t\tval index\
    \ = temp.indexOf(\" \")\n    \t\tval temp2 = temp.slice(0, index)\n    \t\tcount\
    \ += temp2.toLong\n    \t}\n    \tn - count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ regex = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\".r\n        val regex(apples,\
    \ oranges) = s\n        return n - (apples.toLong + oranges.toLong)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ r = new Regex(\"\"\"(\\d+) apples and (\\d+) oranges\"\"\")\n        r.findFirstMatchIn(s)\
    \ match {\n            case Some(m) => (n - m.group(1).toLong - m.group(2).toLong)\n\
    \            case None => 0l\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd16jnncc.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = \e[33mnew\e[0m\
    \ \e[35mRegex\e[0m(\e[31m\"\"\"(\\d+) apples and (\\d+) oranges\"\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Not found: type Regex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpd16jnncc.scala:21:33 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            \e[33mcase\e[0m Some(m) => (n - m.group(\e[31m1\e[0m).toLong -\
    \ m.group(\e[31m2\e[0m).toLong)\n\e[31m\e[31m   |\e[0m                       \
    \          ^\e[0m\n\e[31m   |\e[0m                                 Not found:\
    \ m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n    \tval\
    \ pattern = \"\"\"(.*) apples and (.*) oranges\"\"\".r\n        val pattern(first,\
    \ second) = s\n        val l = first.toLong\n        val h = second.toLong\n \
    \       return n - l - h\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpq3dpfwt7.scala:20:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m pattern(first, second) = s\n\e\
    [31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations\
    \ of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent\
    \ : 4 spaces, 1 tab\n\e[31m   |\e[0m   Latest indent   : 8 spaces\n\e[31m\e[31m--\
    \ Error: /tmp/tmpq3dpfwt7.scala:21:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = first.toLong\n\e\
    [31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations\
    \ of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent\
    \ : 4 spaces, 1 tab\n\e[31m   |\e[0m   Latest indent   : 8 spaces\n\e[31m\e[31m--\
    \ Error: /tmp/tmpq3dpfwt7.scala:22:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mh\e[0m = second.toLong\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations\
    \ of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent\
    \ : 4 spaces, 1 tab\n\e[31m   |\e[0m   Latest indent   : 8 spaces\n\e[31m\e[31m--\
    \ Error: /tmp/tmpq3dpfwt7.scala:23:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mreturn\e[0m n - l - h\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations of tabs and spaces\
    \ in indentation prefixes.\n\e[31m   |\e[0m   Previous indent : 4 spaces, 1 tab\n\
    \e[31m   |\e[0m   Latest indent   : 8 spaces\n4 errors found\n"
  stdout: ''
  timestamp: 1659979742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ str = s.split(\" and \")\n        val a = str(0).split(\" \")(0).toLong\n  \
    \      val o = str(1).split(\" \")(0).toLong\n        n - a - o\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Get the number of oranges in the basket.\n        val oranges = s.split(\" \"\
    )(3).toLong\n        // Get the number of apples in the basket.\n        val apples\
    \ = s.split(\" \")(0).toLong\n        // Return the number of mangoes in the basket.\n\
    \        return n - (oranges + apples)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ arr = s.split(\" \")\n        n - arr(0).toLong - arr(3).toLong\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpxjki_6cx.scala:20)\n\tat Problem$.main(tmpxjki_6cx.scala:23)\n\
    \tat Problem.main(tmpxjki_6cx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //YOUR\
    \ CODE HERE\n        var x:Long = 0\n        var y:Long = 0\n        var a: Long\
    \ = 0\n        var b: Long = 0\n        for(i <- 0 to s.length - 1){\n       \
    \ \tif(s(i) == 'a'){\n        \t\tif(a < 1){\n        \t\t\tx = i\n        \t\t\
    \ta += 1\n        \t\t}\n        \t\telse if(a > 1){\n        \t\t\tb = i\n  \
    \      \t\t\tbreak\n        \t\t}\n        \t}\n        }\n        var c: Long\
    \ = 0\n        var d: Long = 0\n        for(i <- 0 to s.length - 1){\n       \
    \ \tif(s(i) == 'o'){\n        \t\tif(c < 1){\n        \t\t\ty = i\n        \t\t\
    \tc += 1\n        \t\t}\n        \t\telse if(c > 1){\n        \t\t\td = i\n  \
    \      \t\t\tbreak\n        \t\t}\n        \t}\n        }\n        var m = s.substring(x,\
    \ b).replaceAll(\"[^\\\\d]\", \"\")\n        var k = s.substring(y, d).replaceAll(\"\
    [^\\\\d]\", \"\")\n        var l = m.toLong\n        var g = k.toLong\n      \
    \  n - (l + g)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm840utg1.scala:32:8 -------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \t\t\tbreak\n\e[31m\e[31m   |\e[0m        \t\t\
    \t^^^^^\e[0m\n\e[31m   |\e[0m        \t\t\tNot found: break\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpm840utg1.scala:46:8 -------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \t\t\tbreak\n\e[31m\e[31m   |\e[0m        \t\t\
    \t^^^^^\e[0m\n\e[31m   |\e[0m        \t\t\tNot found: break\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm840utg1.scala:50:28 --------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mvar\e[0m \e[36mm\e[0m = s.substring(x,\
    \ b).replaceAll(\e[31m\"[^\\\\d]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0m                       \
    \     Found:    (x : Long)\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm840utg1.scala:50:31\
    \ --------------------\e[0m\e[0m\n\e[31m50 |\e[0m        \e[33mvar\e[0m \e[36mm\e\
    [0m = s.substring(x, b).replaceAll(\e[31m\"[^\\\\d]\"\e[0m, \e[31m\"\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \                             Found:    (b : Long)\n\e[31m   |\e[0m          \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpm840utg1.scala:51:28 --------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = s.substring(y, d).replaceAll(\e\
    [31m\"[^\\\\d]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \             ^\e[0m\n\e[31m   |\e[0m                            Found:    (y\
    \ : Long)\n\e[31m   |\e[0m                            Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm840"
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ getApplesAndOranges(s : String) : (Long, Long) = {\n            val pattern\
    \ = \"\"\"^([\\d]+) apples and ([\\d]+) oranges$\"\"\".r\n            s match\
    \ {\n                case pattern(apples, oranges) => (apples.toLong, oranges.toLong)\n\
    \                case _ => throw new IllegalArgumentException(\"You did not enter\
    \ an appropriate apples and oranges pair.\")\n            }\n        }\n     \
    \   def getMangoes(totalApples : Long, totalOranges : Long, totalFruits : Long)\
    \ : Long = {\n            totalFruits - totalApples - totalOranges\n        }\n\
    \        val (totalApples, totalOranges) = getApplesAndOranges(s)\n        getMangoes(totalApples,\
    \ totalOranges, n)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n        null.asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphyo0mmoz.scala:23)\n\tat Problem.main(tmphyo0mmoz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ pattern = \"(\\\\d+) apples and (\\\\d+) oranges\".r\n        val pattern(a,\
    \ b) = s\n        n - a.toLong - b.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ (a, o) = s.split(\"and\").map(_.split(\" \").map(_.trim).filterNot(_.isEmpty).filterNot(_\
    \ == \"apples\").filterNot(_ == \"oranges\").head.toLong) match {\n          \
    \  case Array(i, j) => (i, j)\n        }\n        n - a - o\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ in = s.split(\" \")\n        n - in(0).toLong - in(3).toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979751
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        // It will be a function\n        // Do not print\
    \ anything\n        // Multiple solutions are accepted\n        val Array(a, b)\
    \ = s.split(\" \").map(_.toLong)\n        n - a - b\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpspy3m_g_.scala:23)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpspy3m_g_.scala:23)\n\
    \tat Problem$.main(tmpspy3m_g_.scala:27)\n\tat Problem.main(tmpspy3m_g_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        val str = s.split(\" \")\n        val a = str(0).toLong\n\
    \        val o = str(3).toLong\n        n - a - o\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkjh_0yr3.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// Your\
    \ code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //YOUR\
    \ CODE HERE\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp65aemwef.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m//YOUR\
    \ CODE HERE\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Fill in the implementation of this method\n        val splitString = s.split(\"\
    \ and \")\n        val numberOfApples = splitString(0).dropRight(7).toLong\n \
    \       val numberOfOranges = splitString(1).dropRight(8).toLong\n        n -\
    \ numberOfApples - numberOfOranges\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n        val li = s.split(\" apples and \")\n        return n\
    \ - li(0).toLong - li(1).split(\" oranges\")(0).toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Fill up this function body\n        // `s` represents the string of the number\
    \ of fruits in the basket\n        // `n` represents the total number of fruits\
    \ in the basket\n        var valid = true\n        var app = 0\n        var ora\
    \ = 0\n        val words = s.split(\" \")\n        try {\n            app = words(0).toInt\n\
    \            ora = words(3).toInt\n        } catch {\n            case ex : NumberFormatException\
    \ => valid = false\n        }\n        if (valid) {\n            return n - app\
    \ - ora\n        } else {\n            return -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ stringArr = s.split(\" \")\n        val appleCount = stringArr(0).toLong\n \
    \       val orangeCount = stringArr(3).toLong\n        if (appleCount + orangeCount\
    \ >= n) -1l\n        else n - (appleCount + orangeCount)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ux8w0m0.scala:31)\n\tat Problem.main(tmp4ux8w0m0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        return 0;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8wmpu430.scala:23)\n\tat Problem.main(tmp8wmpu430.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        def s2l(s : String) : Long = s.toLong\n      \
    \  val t = s.split(\" and \")\n        val apples = s2l(t(0).split(\" \")(0))\n\
    \        val oranges = s2l(t(1).split(\" \")(0))\n        n - apples - oranges\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ abc = \"\"\"^([0-9]+) apples and ([0-9]+) oranges\"\"\".r\n        s match {\n\
    \            case abc(a, b) => n - a.toLong - b.toLong\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Here\n        var num = s.split(\" \")\n        return n - num(0).toLong\
    \ - num(2).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpbirprxag.scala:21)\n\
    \tat Problem$.main(tmpbirprxag.scala:24)\n\tat Problem.main(tmpbirprxag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ arr = s.split(\" and \")\n        var sum = 0\n        for (x <- arr) {\n  \
    \          val subarr = x.split(\" \")\n            sum += subarr(0).toInt\n \
    \       }\n        n - sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Here\n        0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzdfgeroa.scala:23)\n\tat Problem.main(tmpzdfgeroa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ getFruit(s : String) : String = {\n            val fruitWords = List(\"oranges\"\
    , \"apples\")\n            val fruitWordsLen = fruitWords.map(word => word.length)\n\
    \            fruitWords(fruitWordsLen.indexOf(s.length))\n        }\n        def\
    \ getNum(s : String) : Long = {\n            s.toLong\n        }\n        val\
    \ split = s.split(\" and \")\n        val oranges = getNum(split(1).split(\" \"\
    )(0))\n        val apples = getNum(split(0).split(\" \")(0))\n        val mango\
    \ = n - oranges - apples\n        mango\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n      return\
    \ n - countFruit(s)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbkaqi25u.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mreturn\e[0m n - countFruit(s)\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not\
    \ found: countFruit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979751
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n      val\
    \ l = s.split(\" \")\n      val v = l(0).toLong + l(2).toLong\n      n - v\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpuom790um.scala:20)\n\
    \tat Problem$.main(tmpuom790um.scala:24)\n\tat Problem.main(tmpuom790um.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n\t\t// Fill\
    \ up this function body\n        // `s`: input string\n        // `n`: input integer\n\
    \        // return the number of the mango fruits.\n        val sArr = s.split(\"\
    \ \")\n        val apple = sArr(0).substring(0, sArr(0).length - 1).toLong\n \
    \       val orange = sArr(2).substring(0, sArr(2).length - 1).toLong\n       \
    \ n - apple - orange\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:721)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpg0tloytn.scala:24)\n\
    \tat Problem$.main(tmpg0tloytn.scala:29)\n\tat Problem.main(tmpg0tloytn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        return 0;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8wmpu430.scala:23)\n\tat Problem.main(tmp8wmpu430.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        def\
    \ extract(s : String) : (Long, Long) = {\n            val reg = \"\"\"(\\d+) apples\
    \ and (\\d+) oranges\"\"\".r\n            val reg(a, o) = s\n            (a.toLong,\
    \ o.toLong)\n        }\n        val (a, o) = extract(s)\n        max(n - a - o,\
    \ 0l)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n    \tval\
    \ l = s.length()\n    \tvar i = 0\n    \tvar a = 0\n    \tvar o = 0\n    \twhile\
    \ (i < l) {\n    \t\tif (s(i) == 'a') {\n    \t\t\tvar j = i + 1\n    \t\t\twhile\
    \ (j < l && (s(j) >= '0' && s(j) <= '9')) {\n    \t\t\t\ta = a * 10 + (s(j) -\
    \ '0')\n    \t\t\t\tj += 1\n    \t\t\t}\n    \t\t\ti = j\n    \t\t} else if (s(i)\
    \ == 'o') {\n    \t\t\tvar j = i + 1\n    \t\t\twhile (j < l && (s(j) >= '0' &&\
    \ s(j) <= '9')) {\n    \t\t\t\to = o * 10 + (s(j) - '0')\n    \t\t\t\tj += 1\n\
    \    \t\t\t}\n    \t\t\ti = j\n    \t\t} else {\n    \t\t\ti += 1\n    \t\t}\n\
    \    \t}\n    \tn - a - o\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_zvo4nlb.scala:45)\n\tat Problem.main(tmp_zvo4nlb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979755
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ m = s.split(\" and \")\n        val a = m(0).split(\" \")(0).toLong\n      \
    \  val o = m(1).split(\" \")(0).toLong\n        n - a - o\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //YOUR\
    \ CODE GOES HERE\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyxrsw3hz.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m//YOUR\
    \ CODE GOES HERE\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979760
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ t = s.split(\" \").map(_.toLong)\n        return n - t(0) - t(2)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprxssib31.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprxssib31.scala:19)\n\
    \tat Problem$.main(tmprxssib31.scala:23)\n\tat Problem.main(tmprxssib31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ array = s.split(\" \")\n        val num = array(0).toLong\n        val denom\
    \ = array(3).toLong\n        n - (num*denom)/(num+denom)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsvcw79by.scala:25)\n\tat Problem.main(tmpsvcw79by.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n    \tval\
    \ pattern = \"([0-9]+) apples and ([0-9]+) oranges\".r\n    \tval pattern(a, o)\
    \ = s\n    \tn - a.toLong - o.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        s.split(\"\
    \ \").map(_.replace(\"s\", \"\").toLong).foldLeft(n)(_ - _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apple\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution$$anonfun$1(tmpl2qdhqxc.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpl2qdhqxc.scala:19)\n\
    \tat Problem$.main(tmpl2qdhqxc.scala:22)\n\tat Problem.main(tmpl2qdhqxc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        val ints = s.split(\" \").map(_.toInt)\n     \
    \   return n - ints(0) - ints(3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpytvnk6m1.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpytvnk6m1.scala:20)\n\
    \tat Problem$.main(tmpytvnk6m1.scala:24)\n\tat Problem.main(tmpytvnk6m1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ nums = s.split(\" \").filter(_.matches(\"\\\\d+\")).map(_.toLong)\n        val\
    \ dist = nums.reduce(_ + _)\n        n - dist\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ strs = s.split(\" \")\n        val a = strs(0).toLong\n        val o = strs(3).toLong\n\
    \        n - a - o\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ str = s.split(\" \")\n        val apples = str(0).toLong\n        val oranges\
    \ = str(3).toLong\n        n - apples - oranges\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ ss = s.split(\" \")\n        val fruitCounts = ss.map(x => (x.split(\" \")(0).toLong)).toList\n\
    \        val appleCount = fruitCounts(0)\n        val orangeCount = fruitCounts(2)\n\
    \        n - appleCount - orangeCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp2wycs_xu.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp2wycs_xu.scala:20)\n\
    \tat Problem$.main(tmp2wycs_xu.scala:26)\n\tat Problem.main(tmp2wycs_xu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ list : List[String] = s.split(\" \").toList\n        var numOfApples : Long\
    \ = list(0).toLong\n        var numOfOranges : Long = list(3).toLong\n       \
    \ return n - numOfApples - numOfOranges\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ a = \"\"\"([0-9]+) apples and ([0-9]+) oranges\"\"\".r\n        val a(x, y)\
    \ = s\n        // println(x)\n        // println(y)\n        (n - x.toLong - y.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ total = n\n        var sArray = s.split(\" \")\n        for (i <- 0 until sArray.length\
    \ - 1 by 2) {\n            if (sArray(i + 1) == \"apples\") total -= sArray(i).toLong\n\
    \            else total -= sArray(i).toLong\n        }\n        total\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution$$anonfun$1(tmpa363dger.scala:23)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.fruitDistribution(tmpa363dger.scala:24)\n\
    \tat Problem$.main(tmpa363dger.scala:28)\n\tat Problem.main(tmpa363dger.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ sum = s.split(\" \").foldLeft(0l)((a, b) => a + b.substring(0, b.length - 2).toLong)\n\
    \        return n - sum\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 1\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.$anonfun$1(tmp0p61e_aq.scala:19)\n\tat Problem$.$anonfun$adapted$1(tmp0p61e_aq.scala:19)\n\
    \tat scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:779)\n\tat Problem$.fruitDistribution(tmp0p61e_aq.scala:19)\n\
    \tat Problem$.main(tmp0p61e_aq.scala:23)\n\tat Problem.main(tmp0p61e_aq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ your code here\n        null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplel1vih7.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[31mnull\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Null\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n        val arr = s.split(\" \")\n        val num_apples = arr(0).toLong\n\
    \        val num_oranges = arr(3).toLong\n        n - num_apples - num_oranges\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ (a, o) = s.substring(0, s.indexOf(\"apples\")).split(\" \").map(_.toLong).zip(s.substring(s.indexOf(\"\
    and\") + 4, s.indexOf(\"oranges\")).split(\" \").map(_.toLong)).unzip\n      \
    \  val (m : Long, r : Long) = (n - a.sum - o.sum, n - a.sum - o.sum % a.size)\n\
    \        if (m > 0) m else r\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnlgijuq_.scala:29)\n\tat Problem.main(tmpnlgijuq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ result = 0l\n        if (s.isEmpty || n == 0) {\n            result = n\n  \
    \      } else {\n            val applePattern = \"([0-9]+) apples\".r\n      \
    \      val orangePattern = \"([0-9]+) oranges\".r\n            val lst = s.split(\"\
    \ and \")\n            var a = 0l\n            var o = 0l\n            for (s\
    \ <- lst) {\n                s match {\n                    case applePattern(a1)\
    \ => {\n                        a = a1.toLong\n                    }\n       \
    \             case orangePattern(o1) => {\n                        o = o1.toLong\n\
    \                    }\n                }\n            }\n            result =\
    \ n - a - o\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        n - s.split(\" \").map{_.toLong}.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution$$anonfun$1(tmpmy3iam0q.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpmy3iam0q.scala:20)\n\
    \tat Problem$.main(tmpmy3iam0q.scala:23)\n\tat Problem.main(tmpmy3iam0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ sum = s.split(\"and\").foldLeft(0l)((sum, s) => sum + s.split(\" \")(0).toLong)\n\
    \        n - sum\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:721)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp0t279kpx.scala:19)\n\
    \tat Problem$.$anonfun$adapted$1(tmp0t279kpx.scala:19)\n\tat scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:779)\n\
    \tat Problem$.fruitDistribution(tmp0t279kpx.scala:19)\n\tat Problem$.main(tmp0t279kpx.scala:23)\n\
    \tat Problem.main(tmp0t279kpx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ arr = s.split(\" \")\n        var apples = arr(0).toLong\n        var oranges\
    \ = arr(3).toLong\n        var mangoes = n - (apples + oranges)\n        mangoes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ split = s.split(\" \")\n        val orange = split(3).toLong\n        val apple\
    \ = split(0).toLong\n        n - orange - apple\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ list = s.split(\" and \")\n        val apple = list(0).split(\" \")(0).toLong\n\
    \        val orange = list(1).split(\" \")(0).toLong\n        n - apple - orange\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ your code here\n        def r(xs : List[String]) : (Long, Long) = xs match {\n\
    \            case List(a, \"apples\", \"and\", b, \"oranges\") => (a.toLong, b.toLong)\n\
    \            case List(a, \"apples\", \"and\", b, \"oranges\", _*) => r(List(a,\
    \ \"apples\", \"and\", b, \"oranges\"))\n            case List(a, \"oranges\"\
    , \"and\", b, \"apples\") => (b.toLong, a.toLong)\n            case List(a, \"\
    oranges\", \"and\", b, \"apples\", _*) => r(List(a, \"oranges\", \"and\", b, \"\
    apples\"))\n            case _ => throw new IllegalArgumentException(\"\")\n \
    \       }\n        n - r(s.split(\" \").toList)._1 - r(s.split(\" \").toList)._2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6489hfuq.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// Write\
    \ your code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979768
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ l = s.split(\" \")\n        val apples = l(0).toLong\n        val oranges =\
    \ l(3).toLong\n        n - apples - oranges\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Here\n        return -1l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpal4_k7xc.scala:23)\n\tat Problem.main(tmpal4_k7xc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ pattern = \"(\\\\d*) apples and (\\\\d*) oranges\".r\n        val pattern(apples,\
    \ oranges) = s\n        n - apples.toLong - oranges.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphshgysdw.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// Your\
    \ Code Here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //your\
    \ code here\n        return 0;\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppvsn279x.scala:23)\n\tat Problem.main(tmppvsn279x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Here\n        val strArr = s.split(\" \")\n        val apples = strArr(0).toLong\n\
    \        val oranges = strArr(3).toLong\n        n - apples - oranges\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruits = s.split(\" \")\n        val fruitsNumbers = new HashMap[String, Int]()\n\
    \        for (i <- 0 until fruits.length by 2) {\n            fruitsNumbers +=\
    \ (fruits(i) -> fruits(i + 1).replace(\"s\", \"\").toInt)\n        }\n       \
    \ n - fruitsNumbers.values.reduceLeft(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apple\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution$$anonfun$1(tmpmz90be1d.scala:22)\n\
    \tat Problem$.fruitDistribution$$anonfun$adapted$1(tmpmz90be1d.scala:23)\n\tat\
    \ scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.fruitDistribution(tmpmz90be1d.scala:23)\n\
    \tat Problem$.main(tmpmz90be1d.scala:27)\n\tat Problem.main(tmpmz90be1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if(n\
    \ == 0) return 0\n        var str = s.split(\" and \")\n        var apple = str(0).split(\"\
    \ \")(0).toLong\n        var orange = str(1).split(\" \")(0).toLong\n        var\
    \ mango = n - (apple + orange)\n        if(mango < 0) 0 else mango\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ tokens = s.split(\" \")\n        val a = tokens(0).toLong\n        val o = tokens(3).toLong\n\
    \        n - a - o\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n\t\tnull\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0bvt76g2.scala:20:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0bvt76g2.scala:19:0\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\t\t\e[31mnull\e[0m\n\e[31m\e\
    [31m   |\e[0m\t\t^^^^\e[0m\n\e[31m   |\e[0m\t\tFound:    Null\n\e[31m   |\e[0m\t\
    \tRequired: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979770
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Here\n        val fruit = s.split(\" \")\n        val apple = fruit(0).toLong\n\
    \        val orange = fruit(2).toLong\n        val fruitSum = apple + orange\n\
    \        return n - fruitSum\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpeut2uut8.scala:22)\n\
    \tat Problem$.main(tmpeut2uut8.scala:27)\n\tat Problem.main(tmpeut2uut8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ p = \"\"\"([0-9]+) apples and ([0-9]+) oranges\"\"\".r\n        val p(x, y)\
    \ = s\n        n - x.toLong - y.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ the number of the fruits can not be greater than the total number of the fruits\n\
    \        if (n < totalNumberOfFruits(s)) -1l\n        else n - totalNumberOfFruits(s)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_4ofvh_.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (n < totalNumberOfFruits(s)) -\e\
    [31m1l\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: totalNumberOfFruits\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_4ofvh_.scala:21:17 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m n - totalNumberOfFruits(s)\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 Not found: totalNumberOfFruits\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ (apple, orange) = s.split(\" and \").map(_.split(\" \")(0).toLong).productIterator.toList.asInstanceOf[List[Long]]\n\
    \        n - apple - orange\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnl83g2up.scala:19:75 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m (apple, orange) = s.split(\e[31m\"\
    \ and \"\e[0m).map(_.split(\e[31m\" \"\e[0m)(\e[31m0\e[0m).toLong).productIterator.toList.asInstanceOf[\e\
    [35mList\e[0m[\e[35mLong\e[0m]]\n\e[31m\e[31m   |\e[0m                       \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    value productIterator is not a member of Array[Long]\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnl83g2up.scala:19:13 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m (apple, orange) = s.split(\e[31m\"\
    \ and \"\e[0m).map(_.split(\e[31m\" \"\e[0m)(\e[31m0\e[0m).toLong).productIterator.toList.asInstanceOf[\e\
    [35mList\e[0m[\e[35mLong\e[0m]]\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e\
    [31m   |\e[0m             Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnl83g2up.scala:19:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ (apple, orange) = s.split(\e[31m\" and \"\e[0m).map(_.split(\e[31m\" \"\e[0m)(\e\
    [31m0\e[0m).toLong).productIterator.toList.asInstanceOf[\e[35mList\e[0m[\e[35mLong\e\
    [0m]]\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m      \
    \              Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ sArr = s.split(\" and \")\n        val o = sArr(1).split(\" \")(0).toLong\n\
    \        val a = sArr(0).split(\" \")(0).toLong\n        n - (o + a)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        val pattern = \"(\\\\d+)\\\\s+(\\\\w+)\\\\s+and\\\
    \\s+(\\\\d+)\\\\s+(\\\\w+)\".r\n        val pattern(a, _, o, _) = s\n        n\
    \ - a.toLong - o.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ ss = s.split(\" \")\n        val (a, o) = (ss(0).toLong, ss(2).toLong)\n   \
    \     val m = n - a - o\n        if (m < 0) throw new IllegalArgumentException\n\
    \        m\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp87_cti7g.scala:20)\n\
    \tat Problem$.main(tmp87_cti7g.scala:26)\n\tat Problem.main(tmp87_cti7g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ r = \"\"\"(\\d*) apples and (\\d*) oranges\"\"\".r\n        s match {\n    \
    \        case r(a, o) => n - (a.toLong + o.toLong)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n        null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xoj53hl.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[31mnull\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Null\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ arr = s.split(\" \")\n        val a = arr(0).toLong\n        val o = arr(3).toLong\n\
    \        val sum = a + o\n        val m = n - sum\n        m\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdobt_7z5.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[31mnull\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Null\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        ???\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpmfzapw41.scala:19)\n\tat Problem$.main(tmpmfzapw41.scala:22)\n\
    \tat Problem.main(tmpmfzapw41.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ l = s.split(\" and \").map(_.split(\" \")(0).toLong)\n        val s = l(0) +\
    \ l(1)\n        n - s\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpeyacz7xj.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = l(\e[31m0\e[0m)\
    \ + l(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e\
    [0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ list = s.split(\"and\")\n        val apple = list(0).split(\" \")(0).toLong\n\
    \        val orange = list(1).split(\" \")(1).toLong\n        n - (apple + orange)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979780
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n        ???\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpjfvt5lgi.scala:20)\n\tat Problem$.main(tmpjfvt5lgi.scala:23)\n\
    \tat Problem.main(tmpjfvt5lgi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979780
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ x = s.split(\" and \")\n        val total = x(0).toLong + x(1).toLong\n    \
    \    n - total\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5 apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpfxz64ifk.scala:20)\n\
    \tat Problem$.main(tmpfxz64ifk.scala:24)\n\tat Problem.main(tmpfxz64ifk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979780
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruit = s.split(\" \")\n        val apple = fruit(0).toLong\n        val orange\
    \ = fruit(2).toLong\n        n - apple - orange\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp0t2n5rsd.scala:21)\n\
    \tat Problem$.main(tmp0t2n5rsd.scala:25)\n\tat Problem.main(tmp0t2n5rsd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979780
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        ???\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpmfzapw41.scala:19)\n\tat Problem$.main(tmpmfzapw41.scala:22)\n\
    \tat Problem.main(tmpmfzapw41.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ write your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkld4djs2.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[31mnull\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Null\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ (apple, orange) = {\n            val x = s.split(\" \")\n            (x(0).toLong,\
    \ x(3).toLong)\n        }\n        n - apple - orange\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ a = \"(\\\\d+) apples and (\\\\d+) oranges\".r\n        val a(aa, bb) = s\n\
    \        n - aa.toLong - bb.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Here\n        val inp = s.split(\" \")\n        n - inp(0).toLong\
    \ - inp(3).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        // This function returns the total number of the\
    \ mango fruits in the basket (Long)\n        val spl = s.split(\" \").map(_.toLong)\n\
    \        n - spl(0) - spl(3)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp5itw125a.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp5itw125a.scala:21)\n\
    \tat Problem$.main(tmp5itw125a.scala:25)\n\tat Problem.main(tmp5itw125a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ distribution = s.split(\" \")\n        val numApples = distribution(0).toLong\n\
    \        val numOranges = distribution(3).toLong\n        n - numApples - numOranges\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ strings = s.split(\" \")\n        val a = strings(0).toLong\n        val o =\
    \ strings(3).toLong\n        n - a - o\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if(s.equals(\"\
    0 apples and 0 oranges\")) \n          return n;\n        val temp = s.split(\"\
    \ \");\n        var numOfApple = 0;\n        var numOfOrange = 0;\n        for(i\
    \ <- 0 until temp.length) {\n          if(temp(i).equals(\"apples\")) \n     \
    \       numOfApple = temp(i - 1).toInt;\n          if(temp(i).equals(\"oranges\"\
    )) \n            numOfOrange = temp(i - 1).toInt;\n        }\n        return n\
    \ - numOfApple - numOfOrange;\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ arr = s.split(\" \")\n        val apple = arr(0).toLong\n        val orange\
    \ = arr(3).toLong\n        val mango = n - apple - orange\n        return mango\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ totals = s.split(\" \").map(x => x.toLong)\n        n - totals.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpj40uzd7u.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpj40uzd7u.scala:19)\n\
    \tat Problem$.main(tmpj40uzd7u.scala:23)\n\tat Problem.main(tmpj40uzd7u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        var num = 0;\n        var num1 = 0;\n        var\
    \ newString = s.split(\" \");\n        for(i <- 0 to newString.length - 1){\n\
    \            var str = newString(i);\n            if(str.matches(\"-?\\\\d+(\\\
    \\.\\\\d+)?\")){\n                if(i == 0){\n                    num = str.toInt;\n\
    \                }\n                else if(i == 2){\n                    num1\
    \ = str.toInt;\n                }\n            }\n        }\n        return n\
    \ - (num + num1);\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6ztycmsj.scala:37)\n\tat Problem.main(tmp6ztycmsj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ input = s.split(\" \")\n        val apple = input(0).toLong\n        val orange\
    \ = input(3).toLong\n        val sum = apple + orange\n        n - sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ write your code here\n        val sum = s.replaceAll(\"[^\\\\d]\", \"\").map(_.asDigit).sum\n\
    \        return n - sum\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpprmvr6va.scala:30)\n\tat Problem.main(tmpprmvr6va.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your implementation goes here\n        // (No cheat! Don't use \"import scala.util.matching._\"\
    \ in your implementation)\n        var a : Long = 0\n        var o : Long = 0\n\
    \        var str1 : String = \"\"\n        var str2 : String = \"\"\n        var\
    \ flag : Int = 0\n        var i : Int = 0\n        for (i <- 0 to s.length() -\
    \ 1) {\n            if (s(i) == ' ') {\n                flag = 1\n           \
    \ } else if (s(i) == 'a') {\n                flag = 0\n            } else if (s(i)\
    \ == 'o') {\n                flag = 2\n            } else if (flag == 0) {\n \
    \               str1 += s(i)\n            } else if (flag == 2) {\n          \
    \      str2 += s(i)\n            }\n        }\n        a = str1.toLong\n     \
    \   o = str2.toLong\n        return n - a - o\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"5pplesndnges\"\n\t\
    at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp6bkikrcw.scala:40)\n\
    \tat Problem$.main(tmp6bkikrcw.scala:45)\n\tat Problem.main(tmp6bkikrcw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ pattern = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\".r\n        s match {\n\
    \            case pattern(apple, orange) => {\n                return n - apple.toLong\
    \ - orange.toLong\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphshgysdw.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// Your\
    \ Code Here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        val split = s.split(\" and \")\n        val numApples\
    \ = split(0).split(\" \")(0).toLong\n        val numOranges = split(1).split(\"\
    \ \")(0).toLong\n        n - numApples - numOranges\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ tokens = s.split(\" \")\n        n - tokens(0).toLong - tokens(3).toLong\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ write your own code here\n        val pat = \"\\\\d+\".r\n        val arr =\
    \ pat.findAllIn(s).toArray\n        val num = n - arr(0).toLong - arr(1).toLong\n\
    \        num\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979786
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ you code\n        val array = s.split(\" \")\n        n - array(0).toLong -\
    \ array(2).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp3nr7svn2.scala:21)\n\
    \tat Problem$.main(tmp3nr7svn2.scala:24)\n\tat Problem.main(tmp3nr7svn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ l = s.split(\" \")\n        var apples = Integer.parseInt(l(0))\n        var\
    \ oranges = Integer.parseInt(l(2))\n        return n - apples - oranges\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem$.fruitDistribution(tmpgvud_f1u.scala:21)\n\tat Problem$.main(tmpgvud_f1u.scala:25)\n\
    \tat Problem.main(tmpgvud_f1u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979786
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n        return 0\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwvn9xiew.scala:23)\n\tat Problem.main(tmpwvn9xiew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ a = s.split(\" \")(0).split(\"and\")(0).toLong\n        val o = s.split(\" \"\
    )(2).toLong\n        n - (a + o)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpqwmgxf12.scala:20)\n\
    \tat Problem$.main(tmpqwmgxf12.scala:24)\n\tat Problem.main(tmpqwmgxf12.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        ???\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpmfzapw41.scala:19)\n\tat Problem$.main(tmpmfzapw41.scala:22)\n\
    \tat Problem.main(tmpmfzapw41.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ write your code here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkuakpsmu.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// write\
    \ your code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        val str = s.split(\"and\").map(x => x.trim.split(\"\
    \ \")(0).toLong)\n        n - str(0) - str(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ total_apples = 0\n        var total_oranges = 0\n        s.split(\" \").foreach(x\
    \ => if (x.trim == \"apples\") {\n            total_apples += 1\n        } else\
    \ if (x.trim == \"oranges\") {\n            total_oranges += 1\n        })\n \
    \       n - total_apples - total_oranges\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqkuu50x7.scala:29)\n\tat Problem.main(tmpqkuu50x7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Here\n        ???\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpqgaqqv1q.scala:20)\n\tat Problem$.main(tmpqgaqqv1q.scala:23)\n\
    \tat Problem.main(tmpqgaqqv1q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Fill in the code here\n        ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpn0zaw1g7.scala:20)\n\tat Problem$.main(tmpn0zaw1g7.scala:23)\n\
    \tat Problem.main(tmpn0zaw1g7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n        val sArray = s.split(\" \")\n        val apple = sArray(0).toLong\n\
    \        val orange = sArray(3).toLong\n        val mango = n - apple - orange\n\
    \        mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979792
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if(s.split(\"\
    \ \").filter(r => r == \"apples\").size > 1) {\n            return n - s.split(\"\
    \ \").filter(r => r == \"apples\").size - s.split(\" \").filter(r => r == \"oranges\"\
    ).size\n        }\n        if(s.split(\" \").filter(r => r == \"oranges\").size\
    \ > 1) {\n            return n - s.split(\" \").filter(r => r == \"apples\").size\
    \ - s.split(\" \").filter(r => r == \"oranges\").size\n        }\n        if(s.split(\"\
    \ \").filter(r => r == \"apples\").size == 1 && s.split(\" \").filter(r => r ==\
    \ \"oranges\").size == 1) {\n            return n - (s.split(\" \").filter(r =>\
    \ r == \"apples\").head.split(\" \").head.toLong + s.split(\" \").filter(r =>\
    \ r == \"oranges\").head.split(\" \").head.toLong)\n        }\n        if(s.split(\"\
    \ \").filter(r => r == \"apples\").size == 1) {\n            return n - s.split(\"\
    \ \").filter(r => r == \"apples\").head.split(\" \").head.toLong - s.split(\"\
    \ \").filter(r => r == \"oranges\").size\n        }\n        if(s.split(\" \"\
    ).filter(r => r == \"oranges\").size == 1) {\n            return n - s.split(\"\
    \ \").filter(r => r == \"apples\").size - s.split(\" \").filter(r => r == \"oranges\"\
    ).head.split(\" \").head.toLong\n        }\n        else return 0\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpse3qf8vi.scala:26)\n\
    \tat Problem$.main(tmpse3qf8vi.scala:37)\n\tat Problem.main(tmpse3qf8vi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979794
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n        0\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcq_faok.scala:23)\n\tat Problem.main(tmpbcq_faok.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n\t    //\
    \ Your answer here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj22_h8k3.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m\t    \e[34m// Your\
    \ answer here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ x = s.split(\" \")\n        n - x(0).toLong - x(2).toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpn1vw9yky.scala:20)\n\
    \tat Problem$.main(tmpn1vw9yky.scala:23)\n\tat Problem.main(tmpn1vw9yky.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n    \tval\
    \ split = s.split(\" \")\n    \tval numApples = split(0).toLong\n    \tval numOranges\
    \ = split(3).toLong\n    \tn - numApples - numOranges\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        if\
    \ (s == null || s.isEmpty) return 0l\n        val l = s.split(\"and\")\n     \
    \   val a = l(0).trim.substring(0, l(0).trim.indexOf(\" \")).toLong\n        val\
    \ o = l(1).trim.substring(0, l(1).trim.indexOf(\" \")).toLong\n        n - a -\
    \ o\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ fruits : List[String] = s.split(\" \").toList.map(x => x.stripSuffix(\"apples\"\
    ).stripSuffix(\"oranges\"))\n        var apples : Long = 0;\n        var oranges\
    \ : Long = 0;\n        for (f <- fruits) {\n            if (f.contains(\"apple\"\
    )) apples = f.stripSuffix(\"and\").toLong\n            else oranges = f.stripSuffix(\"\
    and\").toLong\n        }\n        n - (apples + oranges)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:721)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution$$anonfun$1(tmp67rg2hb3.scala:24)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.fruitDistribution(tmp67rg2hb3.scala:25)\n\
    \tat Problem$.main(tmp67rg2hb3.scala:29)\n\tat Problem.main(tmp67rg2hb3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)"
  stdout: ''
  timestamp: 1659979795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Read from the input string the number of the apples and oranges and save them\
    \ in the result1 and result2\n        val result1 = s.split(\" \")(0).toLong\n\
    \        val result2 = s.split(\" \")(3).toLong\n        // return the result\
    \ of the subtraction between the total number of the fruits and the number of\
    \ the apples and oranges\n        return n - (result1 + result2)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdobt_7z5.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[31mnull\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Null\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ the final result\n        var result : Long = 0\n        // getting the list\
    \ of the values of the fruits in the basket\n        val list1 = s.split(\" \"\
    ).toList\n        // getting the total number of the fruits in the basket\n  \
    \      val list2 = n.toString.split(\"\").toList\n        // getting the number\
    \ of the apples \n        val a = list1(0).toLong\n        // getting the number\
    \ of the oranges\n        val o = list1(3).toLong\n        // getting the total\
    \ number of the fruits\n        val c = list2(0).toLong\n        // calculating\
    \ the number of the mango fruits\n        result = c - a - o\n        // returning\
    \ the result\n        result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4pxli2c2.scala:37)\n\tat Problem.main(tmp4pxli2c2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ (apples, oranges) = parse(s)\n        n - apples - oranges\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplhop8n8j.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m (apples, oranges) = parse(s)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: parse\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmplhop8n8j.scala:19:13 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m (apples, oranges) = parse(s)\n\
    \e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmplhop8n8j.scala:19:21 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m (apples, oranges) = parse(s)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ (s : String, n : Long) : Long\n        val input = s.split(\" \").map(_.toLong)\n\
    \        n - input(0) - input(3)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp3den6p46.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp3den6p46.scala:20)\n\
    \tat Problem$.main(tmp3den6p46.scala:24)\n\tat Problem.main(tmp3den6p46.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ split = s.split(\" and \")\n        val a = split(0).split(\" \")(0).toLong\n\
    \        val o = split(1).split(\" \")(0).toLong\n        n - a - o\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ n = napples + noranges + n mangoes\n        // 3n = 2napples + 3noranges\n \
    \       // n = 2napples + 3noranges\n        // n/3 = napples + noranges\n   \
    \     val fruitDistributionPatt = \"([0-9]+) (apples) and ([0-9]+) (oranges)\"\
    .r\n        s match {\n            case fruitDistributionPatt(apples, applesStr,\
    \ oranges, orangesStr) => n - 2*apples.toLong - 3*oranges.toLong\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7n1jnbxo.scala:29)\n\tat Problem.main(tmp7n1jnbxo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ parts = s.split(\" \")\n        var apples = parts(0).toLong\n        var oranges\
    \ = parts(2).toLong\n        if (apples + oranges > n)\n            return 0\n\
    \        return n - (apples + oranges)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp_aak4ke3.scala:21)\n\
    \tat Problem$.main(tmp_aak4ke3.scala:27)\n\tat Problem.main(tmp_aak4ke3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n    \tval\
    \ apples = s.split(\" \")(0).toLong\n    \tval oranges = s.split(\" \")(3).toLong\n\
    \    \tn - apples - oranges\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        ???\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpmfzapw41.scala:19)\n\tat Problem$.main(tmpmfzapw41.scala:22)\n\
    \tat Problem.main(tmpmfzapw41.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ FILL IN HERE\n        val arr = s.split(\" \")\n        val num = arr(0).toLong\n\
    \        if (arr(1) == \"apples\") {\n            n - num\n        } else {\n\
    \            n - (n - num)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgbd17ajv.scala:29)\n\tat Problem.main(tmpgbd17ajv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code goes here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgwyan159.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// Your\
    \ code goes here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ a = s.takeWhile(_ != ' ').toLong\n        val b = s.takeRight(s.length - s.indexOf(\"\
    and\") - 4).toLong\n        n - a - b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"6 oranges\"\n\tat\
    \ java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp95csi_o6.scala:20)\n\
    \tat Problem$.main(tmp95csi_o6.scala:24)\n\tat Problem.main(tmp95csi_o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ regex = \"\"\"([0-9]+) apples and ([0-9]+) oranges\"\"\".r\n        val regex(apples,\
    \ oranges) = s\n        n - (apples.toLong + oranges.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979802
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        s.split(\" \").map(i => i.toInt).reduceLeft(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution$$anonfun$1(tmptxkpui1b.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmptxkpui1b.scala:20)\n\
    \tat Problem$.main(tmptxkpui1b.scala:23)\n\tat Problem.main(tmptxkpui1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979802
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n      //\
    \ Fill up this function body\n      // `s`: input string\n      // `n`: total\
    \ number of fruits \n      // `return`: number of mango fruits \n      0\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5\
    \ apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpssyw42k3.scala:26)\n\tat Problem.main(tmpssyw42k3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code here\n        val fruits = s.split(\" \")\n        val apples = fruits(0).toLong\n\
    \        val oranges = fruits(2).toLong\n        n - apples - oranges\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp2wpyip_2.scala:22)\n\
    \tat Problem$.main(tmp2wpyip_2.scala:26)\n\tat Problem.main(tmp2wpyip_2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ a = s.substring(0, s.indexOf(\"apples\")).split(\" \")(0).toLong\n        val\
    \ o = s.substring(s.indexOf(\"and\") + 4, s.indexOf(\"oranges\")).split(\" \"\
    )(0).toLong\n        n - a - o\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979802
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ the length of the string that represents the number of the fruit\n        val\
    \ l = s.length\n        // the total number of fruit\n        val totalFruit =\
    \ n\n        // the total number of apples and oranges\n        val sumAppleAndOrange\
    \ = s.filter(c => c.isDigit).toLong\n        // the number of the mango fruit\
    \ = total number of the fruit - number of the apples and oranges\n        totalFruit\
    \ - sumAppleAndOrange\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpogw5jp67.scala:29)\n\tat Problem.main(tmpogw5jp67.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979802
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ lst = s.split(\" \").toList.map(_.toLong)\n        return n - lst(0) - lst(3)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp4cozz743.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.fruitDistribution(tmp4cozz743.scala:19)\n\
    \tat Problem$.main(tmp4cozz743.scala:23)\n\tat Problem.main(tmp4cozz743.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ (a, o) = s.split(\" and \").map(_.takeWhile(_ != ' ').toLong).toList match {\n\
    \            case List(a, o) => (a, o)\n        }\n        val m = n - a - o\n\
    \        if (m >= 0) m else -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ implement here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjjbdjwxk.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// implement\
    \ here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979802
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ (p, q) = s.split(\" \").map(_.toLong).splitAt(2)\n        n - p.sum - q.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpw98som2z.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpw98som2z.scala:19)\n\
    \tat Problem$.main(tmpw98som2z.scala:23)\n\tat Problem.main(tmpw98som2z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your code goes here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgwyan159.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// Your\
    \ code goes here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        def compare(a : String, b : String) : Long = {\n\
    \            if (a(0) == 'a') {\n                n - a(0).toLong - b(0).toLong\n\
    \            } else {\n                n - a(0).toLong - b(0).toLong\n       \
    \     }\n        }\n        val temp = s.split(\" \")\n        compare(temp(0),\
    \ temp(3))\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpijd_cirj.scala:31)\n\tat Problem.main(tmpijd_cirj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6489hfuq.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// Write\
    \ your code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdobt_7z5.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[31mnull\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Null\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ TODO write the code to solve the task!\n        val s1 = s.split(\"and\")\n\
    \        return n - (s1(0).split(\" \")(0).toLong + s1(1).split(\" \")(1).toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ arr = s.split(\" \")\n        return n - (arr(0).toLong + arr(3).toLong)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ reg = \"([0-9]+) (apples|oranges) and ([0-9]+) (apples|oranges)\".r\n      \
    \  var reg(x, _, y, _) = s\n        var xn = x.toLong\n        var yn = y.toLong\n\
    \        var zn = n - xn - yn\n        zn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979806
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        val words = s.split(\" \")\n        val apples\
    \ = words(0).toLong\n        val oranges = words(2).toLong\n        n - apples\
    \ - oranges\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"and\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpr90r8mo_.scala:22)\n\
    \tat Problem$.main(tmpr90r8mo_.scala:26)\n\tat Problem.main(tmpr90r8mo_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Goes Here.\n        n - s.split(\" \").map(_.toLong).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution$$anonfun$1(tmpjv7qz3g4.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpjv7qz3g4.scala:20)\n\
    \tat Problem$.main(tmpjv7qz3g4.scala:23)\n\tat Problem.main(tmpjv7qz3g4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ p = s.split(\" \")\n        return n - p(0).toLong - p(3).toLong\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979806
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        return 0;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8wmpu430.scala:23)\n\tat Problem.main(tmp8wmpu430.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        ???\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpmfzapw41.scala:19)\n\tat Problem$.main(tmpmfzapw41.scala:22)\n\
    \tat Problem.main(tmpmfzapw41.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        ???\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpmfzapw41.scala:19)\n\tat Problem$.main(tmpmfzapw41.scala:22)\n\
    \tat Problem.main(tmpmfzapw41.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //Write\
    \ your code here\n        val splitted = s.split(\" \")\n        val no_apples\
    \ = splitted(0).toLong\n        val no_oranges = splitted(3).toLong\n        val\
    \ no_mangoes = n - no_apples - no_oranges\n        no_mangoes\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n    \tval\
    \ reg = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\".r\n    \tval reg(a, b) =\
    \ s\n    \treturn n - a.toLong - b.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        val nums = s.split(\" \").filter(_ != \"and\"\
    ).map(_.toLong)\n        n - nums.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$2(tmprifp47dd.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprifp47dd.scala:20)\n\
    \tat Problem$.main(tmprifp47dd.scala:24)\n\tat Problem.main(tmprifp47dd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ fruit : Array[Long] = s.split(\" and \").map(x => x.split(\" \")(0).toLong).sorted\n\
    \        var min : Long = -1l\n        var a : Long = fruit(0)\n        var b\
    \ : Long = fruit(1)\n        var num : Long = 0l\n        while(num <= n){\n \
    \           num = a + b\n            if(num > n) min = a\n            else a +=\
    \ 1\n        }\n        min\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn4a9_83i.scala:32)\n\tat Problem.main(tmpn4a9_83i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        ???\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpmfzapw41.scala:19)\n\tat Problem$.main(tmpmfzapw41.scala:22)\n\
    \tat Problem.main(tmpmfzapw41.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ your code here\n        val parts = s.split(\" and \")\n        val apples =\
    \ parts(0).split(\" \")(0).toLong\n        val oranges = parts(1).split(\" \"\
    )(0).toLong\n        n - apples - oranges\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        return n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprakno9al.scala:23)\n\tat Problem.main(tmprakno9al.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6489hfuq.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// Write\
    \ your code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979768
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Given the string and the total number of fruits find the number of mango fruits\n\
    \        // >>> your solution here\n        val list=s.split(\" \")\n        val\
    \ apple=list(0).toLong\n        val orange=list(3).toLong\n        n-(apple+orange)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Here\n        // \u6570\u5B57\u306E\u96C6\u5408\u3092List\u306B\u683C\
    \u7D0D\n        val ss = s.split(\" \")\n        val nums = List(ss(0).toLong,\
    \ ss(3).toLong)\n        val sum = nums.sum\n        n - sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ your code here\n        return s.split(\" \")(0).toLong + s.split(\" \")(3).toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp66zcbszn.scala:23)\n\tat Problem.main(tmp66zcbszn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdobt_7z5.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[31mnull\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Null\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n\t\tval Pattern\
    \ = new Regex(\"(\\\\d+) apples and (\\\\d+) oranges\")\n\t\tval Pattern(a,o)\
    \ = s\n\t\tn - (a.toLong + o.toLong)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpai5g4wm7.scala:22:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpai5g4wm7.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m\t\t\e[33mval\e[0m \e[36mPattern\e\
    [0m = \e[33mnew\e[0m \e[35mRegex\e[0m(\e[31m\"(\\\\d+) apples and (\\\\d+) oranges\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m\t\t                  ^^^^^\e[0m\n\e[31m   |\e[0m\t\
    \t                  Not found: type Regex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpai5g4wm7.scala:21:7 -------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m\t\tn - (a.toLong + o.toLong)\n\e[31m\e[31m   |\e[0m\t\t \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of Any, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        return 0;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8wmpu430.scala:23)\n\tat Problem.main(tmp8wmpu430.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        var\
    \ sum = 0\n        val m = s.split(\" \")\n        for (i <- 0 until m.length\
    \ by 4) sum += m(i).toInt\n        n - sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"oranges\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.fruitDistribution$$anonfun$1(tmpohqcgl0x.scala:21)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.fruitDistribution(tmpohqcgl0x.scala:21)\n\
    \tat Problem$.main(tmpohqcgl0x.scala:25)\n\tat Problem.main(tmpohqcgl0x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6489hfuq.scala:18:57\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mfruitDistribution\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m, \e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \              Found:    Unit\n\e[31m   |\e[0m                               \
    \                          Required: Long\n\e[31m19 |\e[0m        \e[34m// Write\
    \ your code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979768
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //throw\
    \ new NotImplementedError()\n        val Pattern = \"([0-9]+) apples and ([0-9]+)\
    \ oranges\".r\n        var res : Long = 0\n        for (Pattern(a, o) <- Pattern\
    \ findAllIn s) {\n            res = n - a.toLong - o.toLong\n        }\n     \
    \   res\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        ???\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.fruitDistribution(tmpmfzapw41.scala:19)\n\tat Problem$.main(tmpmfzapw41.scala:22)\n\
    \tat Problem.main(tmpmfzapw41.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ nums = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpe85fb9p8.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpe85fb9p8.scala:19)\n\
    \tat Problem$.main(tmpe85fb9p8.scala:23)\n\tat Problem.main(tmpe85fb9p8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Write your code here\n        0l\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9_ke5cbf.scala:23)\n\tat Problem.main(tmp9_ke5cbf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979810
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Put your code here\n        // ...\n        // ...\n        return 0l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp62infslg.scala:25)\n\tat Problem.main(tmp62infslg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your implementation here\n        0l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr9yq811o.scala:23)\n\tat Problem.main(tmpr9yq811o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ the count of the fruit for each type\n        val (a, o) = countFruit(s)\n \
    \       // the total number of the fruit that was mentioned\n        val t = a\
    \ + o\n        // the total count of the fruits that is not mentioned\n      \
    \  n - t\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsr4z_zi9.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m (a, o) = countFruit(s)\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \          Not found: countFruit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpsr4z_zi9.scala:20:13 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m (a, o) = countFruit(s)\n\e[31m\e[31m   |\e[0m \
    \            ^\e[0m\n\e[31m   |\e[0m             Recursive \e[33mvalue\e[0m \e\
    [35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsr4z_zi9.scala:20:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ (a, o) = countFruit(s)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ num = s.split(\" \").map(_.toLong)\n        num(0) + num(2) - n\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp8d8ve5tt.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp8d8ve5tt.scala:19)\n\
    \tat Problem$.main(tmp8d8ve5tt.scala:23)\n\tat Problem.main(tmp8d8ve5tt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ arr = s.split(\" \")\n        val ap = arr(0).toLong\n        val or = arr(3).toLong\n\
    \        n - ap - or\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        //\
    \ Your Code Here\n        return -1;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmbrg6hnf.scala:23)\n\tat Problem.main(tmpmbrg6hnf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    // >>>\
    \ fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    //\
    \ >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n   \
    \ // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n\
    \    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    //\
    \ (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val\
    \ x = s.split(\" \").filter(s => !s.contains(\"and\")).map(s => s.dropRight(1).toLong)\n\
    \        val total = x.sum\n        if (total < n) return n - total\n        else\
    \ return 0\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:721)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$2(tmpbc6sbdc0.scala:19)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpbc6sbdc0.scala:19)\n\
    \tat Problem$.main(tmpbc6sbdc0.scala:25)\n\tat Problem.main(tmpbc6sbdc0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979812
