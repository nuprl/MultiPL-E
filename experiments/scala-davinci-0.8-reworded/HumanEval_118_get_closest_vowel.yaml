name: HumanEval_118_get_closest_vowel
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a word. Your task is to find the closest vowel that stands\
  \ between \n    // two consonants from the right side of the word (case sensitive).\n\
  \    // Vowels in the beginning and ending doesn't count. Return empty string if\
  \ you didn't\n    // find any vowel met the above condition. \n    // You may assume\
  \ that the given string contains English letter only.\n    // Example:\n    // >>>\
  \ getClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> getClosestVowel((\"\
  FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"quick\"))\n    // (\"\"\
  )\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n    def getClosestVowel(word\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
  yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
  u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
  most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\"\
  )));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  Above\")).equals((\"o\")));\n    }\n\n}\n"
completions: ["        def isVowel(c : Char) = c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U'\n        val vowels = word.filter(isVowel).toList\n        if (vowels.length\
    \ == 0) return \"\"\n        var last = vowels.last\n        for (c <- word.reverse)\
    \ {\n            if (isVowel(c)) last = c\n            else if (c != ' ') return\
    \ last.toString\n        }\n        return \"\"", "        // our vowels\n   \
    \     val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        // String\
    \ => String (filters out vowels)\n        def getConsonants(s : String) : String\
    \ = {\n            val c_list = for (c <- s) yield c.toString\n            val\
    \ d_list = for (c <- c_list if !vowels.contains(c)) yield c\n            d_list.mkString\n\
    \        }\n        // String => List[String]\n        def getVowels(s : String)\
    \ : List[String] = {\n            val c_list = for (c <- s) yield c.toString\n\
    \            val d_list = for (c <- c_list if vowels.contains(c)) yield c\n  \
    \          d_list\n        }\n        // Given a consontant and a vowel list,\
    \ return the first vowel\n        // in the list that stands between two consonants.\
    \ If none, \n        // return empty string.\n        def getClosestVowel(c :\
    \ String, v_list : List[String]) : String = {\n            // helper function\
    \ that checks whether there are consonants\n            // on the left and right\
    \ of the given vowel, from the given \n            // list of vowels.\n      \
    \      def helper(c : String, v : String, v_list : List[String]) : Boolean = {\n\
    \                val idx = v_list.indexOf(v)\n                (idx == 0 || !vowels.contains(v_list(idx\
    \ - 1))) && \n                (idx == v_list.length - 1 || !vowels.contains(v_list(idx\
    \ + 1)))\n            }\n            val v_list = getVowels(word)\n          \
    \  for (v <- v_list) {\n                if (helper(c, v, v_list)) return v\n \
    \           }\n            \"\"\n        }\n        val c_list = getConsonants(word)\n\
    \        val v_list = getVowels(word)\n        val c = if (c_list.length == 0)\
    \ \"\" else c_list(c_list.length - 1)\n        getClosest", "        val vowels\
    \ = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var idx = -1\n        for\
    \ (i <- word.length - 1 to 0 by -1) {\n            if (vowels.contains(word(i).toString))\
    \ {\n                idx = i\n                break\n            }\n        }\n\
    \        if (idx < 0) return \"\"\n        var consonant = true\n        for (i\
    \ <- idx + 1 to word.length - 1) {\n            if (vowels.contains(word(i).toString))\
    \ consonant = false\n            else if (!consonant) return word(i).toString\n\
    \        }\n        return \"\"", "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val result = for {\n            (a, b) <- word.reverse.zipWithIndex\n\
    \            if b % 2 == 0\n            if vowels.contains(a)\n        } yield\
    \ a\n        if (result.isEmpty) \"\" else result.head.toString", "        val\
    \ vowels = \"aeiouAEIOU\"\n        var pos = word.length - 1\n        while (pos\
    \ >= 0) {\n            if (vowels.contains(word(pos))) {\n                val\
    \ vowelPos = pos\n                while (pos >= 0 && vowels.contains(word(pos)))\
    \ pos -= 1\n                if (pos < 0) return \"\"\n                val nextPos\
    \ = pos\n                while (pos >= 0 && !vowels.contains(word(pos))) pos -=\
    \ 1\n                if (pos < 0) return word(vowelPos).toString\n           \
    \     return \"\"\n            }\n            pos -= 1\n        }\n        \"\"",
  "        word.toCharArray.zipWithIndex.foldRight(\"\")((x, acc) => if (x._1 == 'a'\
    \ || x._1 == 'e' || x._1 == 'i' || x._1 == 'o' || x._1 == 'u') if (x._2 > 0 &&\
    \ word.charAt(x._2 - 1) != 'a' && word.charAt(x._2 - 1) != 'e' && word.charAt(x._2\
    \ - 1) != 'i' && word.charAt(x._2 - 1) != 'o' && word.charAt(x._2 - 1) != 'u')\
    \ acc + x._1 else acc else acc)", "    \tval vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n    \tfor (i <- word.length - 1 to 0 by -1) {\n    \t\tif (vowels.contains(word(i)))\
    \ {\n    \t\t\tvar prev = ' '\n    \t\t\tif (i > 0) prev = word(i - 1)\n    \t\
    \t\tvar next = ' '\n    \t\t\tif (i < word.length - 1) next = word(i + 1)\n  \
    \  \t\t\tif (!vowels.contains(prev) && !vowels.contains(next)) return word(i).toString\n\
    \    \t\t}\n    \t}\n    \t\"\"", "        val map = Map('a' -> 0, 'e' -> 0, 'i'\
    \ -> 0, 'o' -> 0, 'u' -> 0)\n        var k : Int = 0\n        for (i <- word.length\
    \ - 1 to 0 by -1) {\n            if (map.contains(word(i))) {\n              \
    \  if (k == 0) k = i\n                else return word(i).toString\n         \
    \   }\n        }\n        if (k == 0) \"\" else word(k).toString", "        val\
    \ vowels = \"aeiou\"\n        if (word.length < 3) return \"\"\n        for (i\
    \ <- (word.length - 1).to(0, -1)) {\n            if (vowels.contains(word(i)))\
    \ {\n                if (!vowels.contains(word(i + 1)) && !vowels.contains(word(i\
    \ - 1))) return word(i).toString\n            }\n        }\n        return \"\"",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var distance = 1000\n\
    \        var vowel = \"\"\n        for (i <- word.length - 1 to 0 by -1) {\n \
    \           if (vowels.contains(word(i))) {\n                if (i > 0 && !vowels.contains(word(i\
    \ - 1))) {\n                    return word(i).toString\n                }\n \
    \           }\n        }\n        return \"\"", "        var str : String = \"\
    \"\n        var pos : Int = -1\n        var dist : Int = Int.MaxValue\n      \
    \  val vowels = new ListBuffer[String]\n        vowels += \"a\"\n        vowels\
    \ += \"e\"\n        vowels += \"i\"\n        vowels += \"o\"\n        vowels +=\
    \ \"u\"\n        for (vowel <- vowels) {\n            val (valid, d) = getClosestVowel(word,\
    \ vowel)\n            if (valid && d < dist) {\n                str = vowel\n\
    \                dist = d\n            }\n        }\n        str", "        def\
    \ isVowel(c : Char) = Set('a', 'e', 'i', 'o', 'u').contains(c)\n        def itr(k\
    \ : Int) : String = {\n            if (k == -1) return \"\"\n            if (isVowel(word(k))\
    \ && isVowel(word(k + 1))) return \"\"\n            if (isVowel(word(k))) return\
    \ word(k).toString\n            itr(k - 1)\n        }\n        itr(word.length\
    \ - 2)", "      var distance = -1\n      var target = \"\"\n      for (i <- word.indices)\
    \ {\n        if (Array('a', 'e', 'i', 'o', 'u').contains(word(i))) {\n       \
    \   if (word.drop(i).tail.forall(x => !Array('a', 'e', 'i', 'o', 'u').contains(x)))\
    \ return word(i).toString\n          else {\n            if (distance == -1) {\n\
    \              distance = word.length - i\n              target = word(i).toString\n\
    \            }\n            else if (word.length - i < distance) {\n         \
    \     distance = word.length - i\n              target = word(i).toString\n  \
    \          }\n          }\n        }\n      }\n      target", "\tval vowels =\
    \ Set('a', 'e', 'i', 'o', 'u')\n\tval revWord = word.reverse\n\tvar lastVowel\
    \ = -1\n\tvar firstConsonant = -1\n\tfor (i <- 0 until revWord.length) {\n\t \
    \   if (vowels.contains(revWord(i))) {\n\t\tlastVowel = i\n\t\tif (firstConsonant\
    \ != -1) return revWord(lastVowel).toString\n\t    } else {\n\t\tif (lastVowel\
    \ != -1) {\n\t\t    firstConsonant = i\n\t\t}\n\t    }\n\t}\n\t\"\"", '        //return
    your final string here', "        var conses : List[Int] = List()\n        var\
    \ vowels : List[Int] = List()\n        for (i <- 0 until word.length) {\n    \
    \        if (\"AEIOU\".contains(word(i))) vowels = vowels :+ i\n            else\
    \ conses = conses :+ i\n        }\n        if (conses.length < 2) return \"\"\n\
    \        var found = false\n        var curr : Int = -1\n        var min : Int\
    \ = Int.MaxValue\n        for (v <- vowels) {\n            for (i <- conses.length\
    \ - 1 to 0 by -1) {\n                if (conses(i) < v) {\n                  \
    \  if (min > v - conses(i)) {\n                        min = v - conses(i)\n \
    \                       curr = v\n                        found = true\n     \
    \               }\n                    break\n                }\n            }\n\
    \        }\n        if (found) return word(curr).toString\n        else return\
    \ \"\"", "        var result = \"\"\n        for (i <- word.length - 1 to 0 by\
    \ -1) {\n            if (isVowel(word(i))) {\n                if (i + 1 < word.length\
    \ && isConsonant(word(i + 1))) result = word(i).toString\n                else\
    \ if (i - 1 >= 0 && isConsonant(word(i - 1))) result = word(i).toString\n    \
    \        }\n        }\n        result", "        val vowel = List('a', 'e', 'i',\
    \ 'o', 'u')\n        val consonant = List('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n        def\
    \ getClosestVowelHelper(reverseWord : String, vowel : List[Char], consonant :\
    \ List[Char]) : String = {\n            reverseWord match {\n                case\
    \ \"\" => \"\"\n                case _ => {\n                    val c = reverseWord.head\n\
    \                    if (vowel.contains(c)) {\n                        if (reverseWord.tail\
    \ != \"\") {\n                            if (consonant.contains(reverseWord.tail.head))\
    \ {\n                                return c.toString\n                     \
    \       }\n                        }\n                    }\n                \
    \    getClosestVowelHelper(reverseWord.tail, vowel, consonant)\n             \
    \   }\n            }\n        }\n        getClosestVowelHelper(word.reverse, vowel,\
    \ consonant)", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val vowelsWithIndices = word.zipWithIndex.filter(t => vowels.contains(t._1.toLower))\n\
    \        if (vowelsWithIndices.length == 0) return \"\"\n        var closestVowel\
    \ = vowelsWithIndices.head\n        for (vowel <- vowelsWithIndices) {\n     \
    \       if (closestVowel._2 - vowel._2 < 0) closestVowel = vowel\n        }\n\
    \        val closestVowelIndex = closestVowel._2\n        for (j <- closestVowelIndex\
    \ - 1 to 0 by -1) {\n            if (!vowels.contains(word(j).toLower)) return\
    \ word(closestVowelIndex).toString\n        }\n        return \"\"", "       \
    \ val vowels = \"aeiouAEIOU\"\n        val chars = word.toCharArray\n        for\
    \ (i <- (0 until word.length - 1).reverse) {\n            if (vowels.contains(chars(i))\
    \ && !vowels.contains(chars(i + 1))) {\n                return chars(i).toString\n\
    \            }\n        }\n        return \"\"", "        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        def isVowel(char : Char) = vowels contains\
    \ char.toString\n        val indexList = word.zipWithIndex.filter(t => isVowel(t._1)).map(_._2)\n\
    \        if (indexList.length < 2) return \"\"\n        val distance = (1 to (indexList.length\
    \ - 1)).map(i => indexList(i) - indexList(i - 1)).min\n        for (i <- (1 to\
    \ (indexList.length - 1))) {\n            if (indexList(i) - indexList(i - 1)\
    \ == distance) return word(indexList(i)).toString\n        }\n        \"\"", " \
    \       // your code here\n        \"\"", "      // Fill up this function body\n\
    \      // 'a','e','i','o','u'\n      val vowels = Array('a','e','i','o','u')\n\
    \      val hashmap = HashMap(\n        'a' -> 0,\n        'e' -> 1,\n        'i'\
    \ -> 2,\n        'o' -> 3,\n        'u' -> 4\n      )\n      def isVowel(c : Char)\
    \ : Boolean = {\n        vowels.contains(c)\n      }\n      var closestVowel =\
    \ \"\"\n      var min = -1\n      for (i <- 1 until word.length - 1) {\n     \
    \   val curr = word(i)\n        if (isVowel(curr)) {\n          val prev = word(i\
    \ - 1)\n          val after = word(i + 1)\n          if (!isVowel(prev) && !isVowel(after))\
    \ {\n            val curr_dist = hashmap(curr)\n            if (min == -1 || curr_dist\
    \ < min) {\n              min = curr_dist\n              closestVowel = curr.toString\n\
    \            }\n          }\n        }\n      }\n      closestVowel", "      \
    \  // your code here\n        if (word.length <= 1) \"\"\n        else {\n   \
    \         val map = Map('a' -> 5, 'e' -> 5, 'i' -> 4, 'o' -> 3, 'u' -> 2)\n  \
    \          val list = word.toList\n            var i = word.length - 1\n     \
    \       var map_l = ListMap.empty[Char, Int]\n            while (i >= 0) {\n \
    \               if (map.contains(list(i))) {\n                    map_l += (list(i)\
    \ -> (i + 1))\n                }\n                i -= 1\n            }\n    \
    \        if (map_l.size == 0) \"\"\n            else {\n                var min\
    \ = Int.MaxValue\n                var min_vowel = 'a'\n                var x =\
    \ list.length - 1\n                while (x >= 0) {\n                    if (map.contains(list(x)))\
    \ {\n                        val m = map_l.get(list(x)).get\n                \
    \        if (m < min) {\n                            min = m\n               \
    \             min_vowel = list(x)\n                        }\n               \
    \     }\n                    x -= 1\n                }\n                min_vowel.toString\n\
    \            }\n        }", "        val vowels = \"aeiouAEIOU\"\n        if (word.length\
    \ < 3) return \"\"\n        for (i <- word.length - 2 to 0 by -1) {\n        \
    \    if (vowels.contains(word(i))) {\n                if (!vowels.contains(word(i\
    \ + 1)) && !vowels.contains(word(i - 1))) return word(i).toString\n          \
    \  }\n        }\n        \"\"", "        def isVowel(c : Char) = c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U'\n        def prevIndex(i : Int) = if (i - 1 < 0) 0 else\
    \ i - 1\n        val vowels = word.zipWithIndex.filter(t => isVowel(t._1)).map(t\
    \ => (t._1, t._2, prevIndex(t._2))).filter(t => !isVowel(word(t._3)))\n      \
    \  if (vowels.isEmpty) \"\" else vowels.minBy(t => t._2)._1.toString", "     \
    \   val cn = word.zipWithIndex.filter(v => v._1.isLetter && v._1.isLower && !isVowel(v._1))\n\
    \        if (cn.length == 0) return \"\"\n        val vowels = word.zipWithIndex.filter(v\
    \ => v._1.isLetter && v._1.isLower && isVowel(v._1))\n        val p = cn.minBy(p\
    \ => vowels.map(v => abs(v._2 - p._2)).min)\n        vowels.minBy(v => abs(v._2\
    \ - p._2))._1.toString", "        def isVowel(c : Char) = c match {\n        \
    \    case 'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => true\n\
    \            case _ => false\n        }\n        for (i <- word.length - 1 to\
    \ 0 by -1) {\n            if (isVowel(word(i))) {\n                for (j <- i\
    \ - 1 to 0 by -1) {\n                    if (!isVowel(word(j))) return word(i).toString\n\
    \                }\n            }\n        }\n        \"\"", "        var vowels\
    \ = \"aeiouAEIOU\"\n        var prevIsConso = true\n        var i = word.length\
    \ - 1\n        var res = new StringBuilder\n        while (i >= 0) {\n       \
    \     var curr = word(i)\n            if (vowels.contains(curr)) {\n         \
    \       if (!prevIsConso) res += curr\n            } else {\n                prevIsConso\
    \ = true\n            }\n            i -= 1\n        }\n        res.toString",
  "    \t// Your Implementation Here\n    \treturn \"\";", "        var flag = false\n\
    \        var vowel = \"\"\n        for (i <- word.length - 1 to 0 by -1) {\n \
    \           if (word(i) == 'a' || word(i) == 'e' || word(i) == 'i' || word(i)\
    \ == 'o' || word(i) == 'u' || word(i) == 'A' || word(i) == 'E' || word(i) == 'I'\
    \ || word(i) == 'O' || word(i) == 'U') {\n                vowel = word(i).toString\n\
    \                flag = true\n            }\n            else if (flag == true)\
    \ return vowel\n        }\n        \"\"", "        // Put your code here\n   \
    \     \"\";", "        // Fill-in the code here\n        val vowels = \"aeiou\"\
    \n        var i = word.length - 1\n        while (i >= 0) {\n            if (vowels.contains(word(i))\
    \ && (i == word.length - 1 || !vowels.contains(word(i + 1)))) {\n            \
    \    return word(i).toString\n            }\n            i -= 1\n        }\n \
    \       \"\"", "    \tdef loop(word : String, i : Int) : String = {\n    \t\t\
    if (i < 0) \"\"\n    \t\telse if (word(i).isLetter && word(i).isLower) {\n   \
    \ \t\t\tif (i > 0 && !word(i - 1).isLetter) \"a\"\n    \t\t\telse if (i < word.length\
    \ - 1 && !word(i + 1).isLetter) \"a\"\n    \t\t\telse loop(word, i - 1)\n    \t\
    \t}\n    \t\telse loop(word, i - 1)\n    \t}\n    \tloop(word, word.length - 1)",
  "        // your code here\n        return \"\"", '        ???', "        /**\n\
    \         * Your Code Here\n         */", "        val vowels = List('a', 'e',\
    \ 'i', 'o', 'u')\n        val fwd = word.toCharArray.zipWithIndex.filter(pair\
    \ => vowels.contains(pair._1)).toList\n        val bwd = word.toCharArray.zipWithIndex.filter(pair\
    \ => vowels.contains(pair._1)).toList.reverse\n        val charList = word.toCharArray.toList\n\
    \        val vowelsWithDist = fwd.map(vowel => (charList.slice(vowel._2 + 1, charList.length).indexOf(charList.find(x\
    \ => !vowels.contains(x)).get), vowel._1)).zipWithIndex.filter(pair => pair._1._1\
    \ != -1).sortBy(pair => pair._1._1)\n        if (vowelsWithDist.length == 0) \"\
    \" else vowelsWithDist(0)._1._2.toString", "        val vowels = \"aeiouAEIOU\"\
    \n        for (i <- word.size - 1 to 0 by -1) {\n            if (vowels.contains(word(i)))\
    \ {\n                if (i > 0 && !vowels.contains(word(i - 1))) return word(i).toString\n\
    \                if (i + 1 < word.size && !vowels.contains(word(i + 1))) return\
    \ word(i).toString\n            }\n        }\n        \"\"", "        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val ch = word.reverse.filter(vowels.contains(_)).headOption\n\
    \        if (ch == None) return \"\"\n        else return ch.get.toString", " \
    \       val vowels = \"AEIOU\"\n        var nextVowelIndex = -1\n        val stack\
    \ = new Stack[Char]\n        for (i <- 0 until word.length) {\n            val\
    \ c = word(i)\n            if (nextVowelIndex == -1 && vowels.contains(c)) {\n\
    \                nextVowelIndex = i\n            }\n            if (!vowels.contains(c))\
    \ {\n                stack.push(c)\n            }\n        }\n        var result\
    \ = \"\"\n        if (nextVowelIndex == -1) return result\n        while (!stack.isEmpty)\
    \ {\n            val c = stack.pop\n            if (!vowels.contains(c)) {\n \
    \               result = word(nextVowelIndex).toString\n                nextVowelIndex\
    \ = -1\n            }\n            if (stack.isEmpty) {\n                result\
    \ = word(nextVowelIndex).toString\n            }\n        }\n        result",
  "        // Fill up this function body\n        // 'a', 'e', 'i', 'o', 'u'\n   \
    \     val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val consonants = Set('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z')\n        var last = -1\n        for (i <- word.length -\
    \ 1 to 0 by -1) {\n            if (consonants.contains(word(i)) && last != -1)\
    \ {\n                if (vowels.contains(word(last))) return word(last).toString\n\
    \                else return \"\"\n            }\n            if (vowels.contains(word(i)))\
    \ last = i\n        }\n        \"\"", "        val vowels = \"aeiouyAEIOUY\"\n\
    \        val wordVowels = word.toList.filter(x => vowels.contains(x))\n      \
    \  if (wordVowels.isEmpty) return \"\"\n        for (i <- word.length - 1 to 0\
    \ by -1) {\n            if (vowels.contains(word(i))) {\n                var isLeftConsonant\
    \ = false\n                for (j <- i - 1 to 0 by -1) {\n                   \
    \ if (!vowels.contains(word(j))) {\n                        isLeftConsonant =\
    \ true\n                    }\n                }\n                if (isLeftConsonant)\
    \ {\n                    return word(i).toString\n                }\n        \
    \    }\n        }\n        \"\"", "        // Fill up this function body\n   \
    \     // 'return \"\"' for compilation\n        \"\"", "        // I assume that\
    \ there are no more than 10 vowels in the word\n        val vowels = new Array[String](10)\n\
    \        var vowelPos = 0\n        var vowelRightPos = -1\n        var i = word.length\
    \ - 1\n        while (i >= 0) {\n            val letter = word(i).toString\n \
    \           if (isVowel(letter)) {\n                vowels(vowelPos) = letter\n\
    \                vowelPos += 1\n                vowelRightPos = i\n          \
    \  }\n            i -= 1\n        }\n        if (vowelRightPos == -1) \"\"\n \
    \       else {\n            var j = vowelRightPos - 1\n            while (j >=\
    \ 0) {\n                if (!isVowel(word(j).toString)) return vowels(vowelPos\
    \ - 1)\n                j -= 1\n            }\n            \"\"\n        }", " \
    \       def helper(w : String, l : Int, r : Int) : String = {\n            if\
    \ (r == l) \"\"\n            else if (w(r).isLetter && w(r).isUpper) helper(w,\
    \ l, r - 1)\n            else if (w(r).isLetter && w(r).isLower) helper(w, l,\
    \ r - 1)\n            else if (!w(r).isLetter) helper(w, l, r - 1)\n         \
    \   else if (w(l).isLetter && w(l).isUpper) helper(w, l + 1, r)\n            else\
    \ if (w(l).isLetter && w(l).isLower) helper(w, l + 1, r)\n            else if\
    \ (!w(l).isLetter) helper(w, l + 1, r)\n            else if (w(r) == 'a' || w(r)\
    \ == 'e' || w(r) == 'i' || w(r) == 'o' || w(r) == 'u') w(r).toString\n       \
    \     else if (w(l) == 'a' || w(l) == 'e' || w(l) == 'i' || w(l) == 'o' || w(l)\
    \ == 'u') w(l).toString\n            else helper(w, l + 1, r - 1)\n        }\n\
    \        helper(word, 0, word.length - 1)", "        val vowels = \"AEIOUYaeiouy\"\
    \n        var closest = \"\"\n        var bestIdx = -1\n        for (i <- word.length\
    \ - 1 to 0 by -1) {\n            val c = word(i)\n            if (vowels.contains(c))\
    \ {\n                closest = c.toString\n                bestIdx = i\n     \
    \       } else if (bestIdx != -1) return closest\n        }\n        \"\"", " \
    \       // your code goes here\n        var result = \"\"\n        for (i <- 1\
    \ until word.length) {\n        \tif (word(i) == 'a' || word(i) == 'e' || word(i)\
    \ == 'i' || word(i) == 'o' || word(i) == 'u')\n        \t\tif (word(i - 1) !=\
    \ 'a' && word(i - 1) != 'e' && word(i - 1) != 'i' && word(i - 1) != 'o' && word(i\
    \ - 1) != 'u') result = word(i).toString\n        }\n        result", '        return
    ""', '        word.reverse.find(x => "AEIOUaeiou".contains(x)).getOrElse("").toString',
  "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        var lastConsonant =\
    \ -1\n        var closestVowel = -1\n        var len = word.length\n        while\
    \ (len >= 0) {\n            if (vowels.contains(word(len))) {\n              \
    \  if (lastConsonant != -1) closestVowel = len\n            } else {\n       \
    \         if (closestVowel != -1) return word(closestVowel).toString\n       \
    \         lastConsonant = len\n            }\n            len -= 1\n        }\n\
    \        \"\"", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val\
    \ vowelsSet = vowels.toSet\n        val consonants = List('b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z')\n        val consonantsSet = consonants.toSet\n        var result = \"\"\
    \n        var current = 0\n        while (result == \"\" && current < word.length)\
    \ {\n            val ch = word(current)\n            if (vowelsSet.contains(ch))\
    \ {\n                var pre = current - 1\n                var post = current\
    \ + 1\n                var ispreconsonant = false\n                var ispostconsonant\
    \ = false\n                while (pre >= 0 && !ispreconsonant) {\n           \
    \         if (consonantsSet.contains(word(pre))) ispreconsonant = true\n     \
    \               else pre -= 1\n                }\n                while (post\
    \ < word.length && !ispostconsonant) {\n                    if (consonantsSet.contains(word(post)))\
    \ ispostconsonant = true\n                    else post += 1\n               \
    \ }\n                if (ispreconsonant && ispostconsonant) result = ch.toString\n\
    \            }\n            current += 1\n        }\n        result", "      \
    \  var vowel = List('a', 'e', 'i', 'o', 'u')\n        var pos = word.length -\
    \ 1\n        var result = \"\"\n        var lastChar = word(pos)\n        while\
    \ (pos >= 0) {\n            var currentChar = word(pos)\n            if (vowel.contains(currentChar))\
    \ {\n                if (pos == word.length - 1) {\n                    pos -=\
    \ 1\n                    lastChar = currentChar\n                    continue\n\
    \                }\n                else {\n                    if (!vowel.contains(lastChar))\
    \ {\n                        result = currentChar.toString\n                 \
    \       return result\n                    }\n                }\n            }\n\
    \            pos -= 1\n            lastChar = currentChar\n        }\n       \
    \ result", "    \tif (word.length < 3) return \"\"\n    \tval vowels = \"aeiouAEIOU\"\
    \n    \tfor (i <- word.length - 2 to 0 by -1) {\n    \t\tif (vowels.contains(word(i))\
    \ && vowels.contains(word(i + 1)) == false && vowels.contains(word(i - 1)) ==\
    \ false)\n    \t\t\treturn word(i).toString\n    \t}\n    \t\"\"", "        var\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var minDistance = word.length\n\
    \        var result = \"\"\n        for (i <- 0 until word.length) {\n       \
    \     if (vowels.contains(word(i).toString)) {\n                for (j <- word.length\
    \ - 1 to i by -1) {\n                    if (!vowels.contains(word(j).toString))\
    \ {\n                        if (j - i < minDistance) {\n                    \
    \        minDistance = j - i\n                            result = word(i).toString\n\
    \                        }\n                        break\n                  \
    \  }\n                }\n            }\n        }\n        result", "        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        val result = word.toSeq.reverse.map(x\
    \ => if (vowels.contains(x)) Some(x) else None).sliding(3).takeWhile(_(0).isEmpty).find(x\
    \ => x(1).isDefined && x(2).isEmpty)\n        if (result.isEmpty) \"\" else result.get(1).get.toString",
  "        val vowels = \"aeiou\"\n        def helper(word : String, index : Int)\
    \ : String = {\n            if (index == word.length) \"\"\n            else if\
    \ (vowels.contains(word(index))) {\n                if (index == 0 || index ==\
    \ word.length - 1) helper(word, index + 1)\n                else {\n         \
    \           val s = word(index - 1)\n                    val e = word(index +\
    \ 1)\n                    if (vowels.contains(s) || vowels.contains(e)) helper(word,\
    \ index + 1)\n                    else word(index).toString\n                }\n\
    \            }\n            else helper(word, index + 1)\n        }\n        helper(word,\
    \ 0)", "        val VOWELS = \"AEIOUaeiou\"\n        val CONS = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n        for (i <- 0 until word.length - 1) {\n            if (CONS.contains(word(i))\
    \ && VOWELS.contains(word(i + 1))) {\n                return word(i + 1).toString\n\
    \            }\n        }\n        \"\"", '        return ""', "        val vowels\
    \ = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        val n = word.length\n        var isConsonant = false\n        for (i\
    \ <- Range(n - 1, -1, -1)) {\n            if (consonants.contains(word(i))) {\n\
    \                if (isConsonant) return word(i + 1).toString\n              \
    \  isConsonant = true\n            } else if (vowels.contains(word(i))) isConsonant\
    \ = false\n        }\n        \"\"", "        val vowels = Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        var candidates = List[String]()\n\
    \        for (i <- word.length - 1 to 0 by -1) {\n            if (vowels.contains(word(i).toString)\
    \ && !vowels.contains(word(i + 1).toString)) {\n                candidates = word(i).toString\
    \ :: candidates\n            }\n        }\n        candidates.head", "    \tval\
    \ vowels = Array('a', 'e', 'i', 'o', 'u')\n    \tdef findVowel(s : String) : String\
    \ = {\n    \t\tvar found = false\n    \t\tfor (i <- (s.length - 1) to 0 by -1)\
    \ {\n    \t\t\tif (vowels.contains(s(i))) {\n    \t\t\t\tfound = true\n    \t\t\
    \t\tif (i > 0 && vowels.contains(s(i - 1))) return \"\"\n    \t\t\t\treturn s(i).toString\n\
    \    \t\t\t}\n    \t\t}\n    \t\tif (!found) return \"\"\n    \t\t\"\"\n    \t\
    }\n    \tfindVowel(word.toLowerCase)", "        if (word.length == 0) return \"\
    \"\n        var vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var\
    \ result = \"\"\n        var min = Int.MaxValue\n        for (i <- 0 until word.length\
    \ - 1) {\n            if (vowels.contains(word(i).toString) && vowels.contains(word(i\
    \ + 1).toString) == false) {\n                result = word(i).toString\n    \
    \            min = 1\n            }\n            else if (vowels.contains(word(i).toString)\
    \ == false && vowels.contains(word(i + 1).toString)) {\n                result\
    \ = word(i + 1).toString\n                min = 1\n            }\n           \
    \ else if (vowels.contains(word(i).toString) && vowels.contains(word(i + 1).toString))\
    \ {\n                var j = i + 1\n                while (j < word.length &&\
    \ vowels.contains(word(j).toString)) j += 1\n                if (j < word.length\
    \ && vowels.contains(word(j).toString) == false) {\n                    val dist\
    \ = j - i\n                    if (dist < min) {\n                        min\
    \ = dist\n                        result = word(i).toString\n                \
    \    }\n                }\n            }\n        }\n        result", "      \
    \  val vowels = \"aeiouAEIOU\"\n        val len = word.length - 1\n        for\
    \ (i <- len to 0 by -1) {\n            if (vowels.contains(word(i))) {\n     \
    \           if (i == len) return \"\"\n                if (!vowels.contains(word(i\
    \ + 1))) return word(i).toString\n            }\n        }\n        \"\"", " \
    \       var index = -1\n        var d = word.length\n        for (i <- 1 until\
    \ word.length - 1) {\n            if (!isVowel(word(i)) && isVowel(word(i - 1))\
    \ && isVowel(word(i + 1))) {\n                if (i < d) {\n                 \
    \   d = i\n                    index = i\n                }\n            }\n \
    \       }\n        if (index == -1) return \"\"\n        else return word(index\
    \ - 1).toString", "        var lastVowel = ' '\n        var lastConsonant = '\
    \ '\n        for (i <- word.length - 1 to 0 by -1) {\n            val c = word(i)\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                if (lastConsonant != ' ') return c.toString\n               \
    \ lastVowel = c\n            } else if (lastVowel != ' ') lastConsonant = c\n\
    \        }\n        \"\"", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n\
    \        if (word.isEmpty || word.size == 1) \"\"\n        else {\n          \
    \  val ans = for (i <- word.size - 1 to 0 by -1) yield {\n                if (vowels.contains(word(i)))\
    \ {\n                    var j = i - 1\n                    while (j >= 0 && vowels.contains(word(j)))\
    \ j -= 1\n                    if (j < 0) \"\"\n                    else {\n  \
    \                      var k = i + 1\n                        while (k < word.size\
    \ && vowels.contains(word(k))) k += 1\n                        if (k >= word.size)\
    \ \"\"\n                        else word(i).toString\n                    }\n\
    \                }\n                else \"\"\n            }\n            ans.find(_\
    \ != \"\").getOrElse(\"\")\n        }", "        val vowels = Set(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n        var distance = -1\n        var vowel = \"\"\n\
    \        for (i <- 0 until word.length) {\n            if (vowels.contains(word(i)))\
    \ {\n                val newDistance = word.length - i\n                if (distance\
    \ == -1 || newDistance < distance) {\n                    distance = newDistance\n\
    \                    vowel = word(i).toString\n                }\n           \
    \ }\n        }\n        vowel", "        // Fill up this function body\n     \
    \   // 'a'..'z' or 'A'..'Z'\n        // http://stackoverflow.com/questions/13407516/check-if-character-is-a-vowel-in-scala\n\
    \        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n\
    \        val cons = Set('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H',\
    \ 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z')\n\
    \        val filtered = word.filter(cons)\n        if (filtered.length > 1) {\n\
    \        \tval first = filtered.head\n        \tval last = filtered.last\n   \
    \     \tval sub = filtered.substring(1, filtered.length - 1)\n        \tval closest\
    \ =  if (first != last) {\n        \t\tif (vowels.contains(first)) {\n       \
    \ \t\t\tfirst\n        \t\t} else if (vowels.contains(last)) {\n        \t\t\t\
    last\n        \t\t} else {\n        \t\t\tval closest = sub.zipWithIndex.minBy(_._1)\n\
    \        \t\t\tclosest._1\n        \t\t}\n        \t} else {\n        \t\tval\
    \ closest = sub.zipWithIndex.minBy(_._1)\n        \t\tclosest._1\n        \t}\n\
    \        \tclosest.toString\n        } else {\n        \t\"\"\n        }", " \
    \       // Fill up this function body\n        // 'A' to 'Z' or 'a' to 'z'\n \
    \       val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n \
    \       val idx = (0 until word.length).filter(i => i != 0 && i != word.length\
    \ - 1).reverse.find(i => !vowels.contains(word(i)) && vowels.contains(word(i +\
    \ 1)))\n        idx match {\n            case Some(i) => word(i + 1).toString\n\
    \            case None => \"\"\n        }", "        val vowels = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        def vowelIndices(word : String) : List[Int]\
    \ = {\n            var vowelIndexes = List[Int]()\n            for (i <- 0 until\
    \ word.length) if (vowels.contains(word(i).toString)) vowelIndexes ::= i\n   \
    \         vowelIndexes\n        }\n        if (word.length <= 2) \"\"\n      \
    \  else {\n            val vowelIndexes = vowelIndices(word)\n            for\
    \ (i <- 0 until vowelIndexes.length - 1) {\n                val betweenIndices\
    \ = (vowelIndexes(i) + 1 until vowelIndexes(i + 1))\n                if (betweenIndices.length\
    \ > 0) return word(betweenIndices.min) + \"\"\n            }\n            \"\"\
    \n        }", '        return "";', "        val vowels = \"aeiouAEIOU\"\n   \
    \     for (i <- word.length - 1 to 0 by -1) {\n            val prev = if (i -\
    \ 1 >= 0) word(i - 1) else \"\"\n            val curr = word(i)\n            val\
    \ next = if (i + 1 < word.length) word(i + 1) else \"\"\n            if (vowels.contains(curr)\
    \ && !vowels.contains(prev) && !vowels.contains(next)) return curr.toString\n\
    \        }\n        \"\"", "        val vowels = List(\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n        var result = \"\"\n        for (i <- (0 until word.length).reverse)\
    \ {\n            if (!vowels.contains(word(i).toString.toLowerCase)) {\n     \
    \           for (j <- (i - 1 to 0 by -1)) {\n                    if (vowels.contains(word(j).toString.toLowerCase))\
    \ {\n                        result = word(j).toString\n                     \
    \   return result\n                    }\n                }\n            }\n \
    \       }\n        result", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val words = word.reverse.toList\n        val vowelsInWord = words.filter(vowels.contains(_))\n\
    \        val firstVowelIndex = vowelsInWord.indexOf(vowelsInWord.head)\n     \
    \   val lastVowelIndex = vowelsInWord.indexOf(vowelsInWord.last)\n        if (firstVowelIndex\
    \ == 0 || lastVowelIndex == vowelsInWord.length - 1) \"\"\n        else {\n  \
    \          val vowelsBetweenConsonants = vowelsInWord.zipWithIndex.filter(x =>\
    \ x._2 > firstVowelIndex && x._2 < lastVowelIndex)\n            val results =\
    \ vowelsBetweenConsonants.foldLeft(vowelsBetweenConsonants.head._1, vowelsBetweenConsonants.head._2,\
    \ vowelsBetweenConsonants.head._2)((acc, v) => if (v._2 - acc._2 < acc._3 - acc._2)\
    \ (v._1, v._2, v._2) else acc)\n            results._1.toString\n        }", " \
    \       // fill in here\n        \"\"", "        // split by word into a string\
    \ array\n        var wordArr = word.split(\"\").toList\n        // filter out\
    \ empty string to get the actual word\n        wordArr = wordArr.filter(s => s\
    \ != \"\")\n        // create a new array with the same size as the actual word\
    \ array\n        var resultArr = Array.fill(wordArr.length)(\"\")\n        //\
    \ vowels\n        var vowels = Set('a', 'e', 'i', 'o', 'u')\n        // create\
    \ a var to store the index of vowel in the word\n        var vowelIndex = 0\n\
    \        // create a var to store the index of the vowel from the end of the word\n\
    \        var vowelFromEndIndex = 0\n        // create a var to store the found\
    \ closest vowel\n        var foundClosestVowel = \"\"\n        // loop through\
    \ the word array\n        for (i <- wordArr.indices) {\n            // if we found\
    \ a vowel\n            if (vowels.contains(wordArr(i).head)) {\n             \
    \   // set the vowel index\n                vowelIndex = i\n                //\
    \ set the vowel from end index\n                vowelFromEndIndex = wordArr.length\
    \ - i\n                // loop through the word array\n                for (j\
    \ <- wordArr.indices) {\n                    // if the index of current letter\
    \ is greater than the vowel index and if the next letter is a vowel\n        \
    \            if (j > vowelIndex && vowels.contains(wordArr(j + 1).head)) {\n \
    \                       // set the result of vowel from end index to current letter\n\
    \                        resultArr(vowelFromEndIndex) = wordArr(j)\n         \
    \               // exit the loop\n                        j = wordArr.length\n\
    \                    }\n                }\n            }\n        }\n        //\
    \ set the foundClosestVowel to the first element of the result array\n       \
    \ foundClosestVowel = resultArr(0)\n        // return the found closest vowel\n\
    \        foundClosestVowel", "        // Build up a ArrayBuffer of the distance\
    \ from each vowel to the last consonant\n        val vowelDistance = ArrayBuffer.fill(word.length)(0)\n\
    \        for (vowel <- word.zipWithIndex.filter(_._1.isVowel)) {\n           \
    \ var lastConsonant = word.length - 1\n            while (lastConsonant >= 0 &&\
    \ word(lastConsonant).isVowel) lastConsonant -= 1\n            if (lastConsonant\
    \ < 0) return \"\"\n            val distance = lastConsonant - vowel._2\n    \
    \        vowelDistance(vowel._2) = distance\n        }\n        if (vowelDistance.max\
    \ < 0) return \"\"\n        // Return the nearest vowel\n        var nearestVowelIndex\
    \ = vowelDistance.indexOf(vowelDistance.max)\n        while (nearestVowelIndex\
    \ > 0 && word(nearestVowelIndex - 1).isVowel) nearestVowelIndex -= 1\n       \
    \ return word(nearestVowelIndex).toString", '        return ""', "      val vowel\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n      var first = -1\n      var second\
    \ = -1\n      for (i <- word.length - 1 to 0 by -1) {\n        if (vowel.contains(word(i).toString))\
    \ second = i\n        else {\n          if (second >= 0) return word(second).toString\n\
    \          else first = i\n        }\n      }\n      \"\"", '        ???', " \
    \       val vowels = Set('a', 'e', 'i', 'o', 'u')\n        for (i <- word.length\
    \ - 1 to 0 by -1) {\n            if (vowels contains word(i)) {\n            \
    \    if (i > 0 && !(vowels contains word(i - 1))) return word(i).toString\n  \
    \              if (i < word.length - 1 && !(vowels contains word(i + 1))) return\
    \ word(i).toString\n            }\n        }\n        \"\"", '        // Write
    your own code here', "        // Fill Up this function body\n        // `indexOf`:\
    \ http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.StringOps\n\
    \        def isConsonant(c : Char) = {\n            \"bcdfghjklmnpqrstvwxyz\"\
    .contains(c)\n        }\n        def isVowel(c : Char) = {\n            \"aeiou\"\
    .contains(c)\n        }\n        val i = word.indices.find {\n            case\
    \ i if isConsonant(word(i)) && isConsonant(word(i+1)) => isVowel(word(i+2))\n\
    \            case i if isConsonant(word(i)) && isVowel(word(i+1)) => isConsonant(word(i+2))\n\
    \            case _ => false\n        }\n        i match {\n            case Some(i)\
    \ => word(i+1).toString\n            case None => \"\"\n        }", "        //\
    \ Fill up this function body\n        // `word` is a string that contains only\
    \ English letter\n        // Compute the answer and return it\n        val vowels\
    \ = \"aeiou\"\n        val consonants = word.filter(vowels.contains(_) == false)\n\
    \        val rightMostVowelDistance =\n            (0 to word.length - 1).toList.reverse.find(i\
    \ => vowels.contains(word(i)))\n        rightMostVowelDistance match {\n     \
    \       case Some(i) =>\n                if (i == 0) \"\"\n                else\
    \ {\n                    val leftMostConsonantDistance =\n                   \
    \     (0 to i - 1).toList.find(j => consonants.contains(word(j)))\n          \
    \          leftMostConsonantDistance match {\n                        case Some(j)\
    \ =>\n                            if (j == i - 1) word(i).toString\n         \
    \                   else \"\"\n                        case None => \"\"\n   \
    \                 }\n                }\n            case None => \"\"\n      \
    \  }", "        var vowel = \"\"\n        var mapping = Map[Char, Int]()\n   \
    \     for (i <- 0 until word.length) {\n            val c = word(i)\n        \
    \    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n       \
    \         val j = i - 1\n                if (j >= 0 && j < word.length) {\n  \
    \                  val c1 = word(j)\n                    if (c1 != 'a' && c1 !=\
    \ 'e' && c1 != 'i' && c1 != 'o' && c1 != 'u') {\n                        if (mapping.contains(c))\
    \ {\n                            if (abs(i - j) < abs(mapping(c) - j)) mapping(c)\
    \ = i\n                        } else mapping(c) = i\n                    }\n\
    \                }\n            }\n        }\n        var min = Int.MaxValue\n\
    \        for (key <- mapping.keys) {\n            if (abs(mapping(key) - (word.length\
    \ - 1)) < min) {\n                min = abs(mapping(key) - (word.length - 1))\n\
    \                vowel = key.toString\n            }\n        }\n        vowel",
  "        val con = List('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n        val vow = List('a', 'e',\
    \ 'i', 'o', 'u')\n        val set = HashSet[Char]()\n        con.foreach(x =>\
    \ set += x)\n        var distance = Int.MaxValue\n        var curr = 0\n     \
    \   var prev = 0\n        var res = \"\"\n        for (i <- 0 until word.length)\
    \ {\n            if (set.contains(word(i))) {\n                prev = curr\n \
    \               curr = i\n                if (curr - prev > 1) {\n           \
    \         for (j <- prev + 1 until curr) if (vow.contains(word(j))) {\n      \
    \                  if (curr - j < distance) {\n                            distance\
    \ = curr - j\n                            res = word(j).toString\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n        res", "        // Fill Up this function body\n        // `indexOf`\
    \ will return the starting index of the first instance of that character\n   \
    \     // in the string\n        def vowelIndex(word : String) : List[Int] = {\n\
    \            val v = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n            (for\
    \ (i <- 0 until word.length if v.contains(word(i).toString)) yield i).toList\n\
    \        }\n        def distance(word : String, vowelIndex : Int) : Int = {\n\
    \            val index = word.indexOf(\"a\")\n            val lastIndex = word.length\
    \ - 1\n            lastIndex - vowelIndex - index\n        }\n        if (word.length\
    \ < 3) return \"\"\n        else {\n            val indexList = vowelIndex(word)\n\
    \            if (indexList.length == 0) return \"\"\n            else {\n    \
    \            val closestIndex = indexList.minBy(distance(word, _))\n         \
    \       return word(closestIndex).toString\n            }\n        }", "    \t\
    val vowels = Set('a', 'e', 'i', 'o', 'u')\n    \tval charList = word.toCharArray.toList\n\
    \    \tval b = charList.indexWhere(vowels.contains(_))\n    \tval e = charList.lastIndexWhere(vowels.contains(_))\n\
    \    \tif (b < 0 || e < 0 || b >= e) return \"\"\n    \tvar closest = charList(b)\n\
    \    \tfor (i <- b + 1 to e) if (vowels.contains(charList(i))) {\n    \t    closest\
    \ = charList(i)\n    \t    break\n    \t}\n    \tclosest.toString", "        for\
    \ (i <- (0 until word.length-1).reverse) {\n            if (isVowel(word(i)) &&\
    \ !isVowel(word(i+1))) return word(i).toString\n        }\n        \"\"", "  \
    \      var vowelSet = Set('a', 'e', 'i', 'o', 'u')\n        var result = \"\"\n\
    \        var counter = 0\n        for (i <- (word.length - 1) to 0 by -1) {\n\
    \            if (vowelSet.contains(word(i))) {\n                result = word(i).toString\n\
    \                counter += 1\n            }\n            else if (counter >=\
    \ 2) return result\n            else counter = 0\n        }\n        return \"\
    \"", "      val vowels = Set('a', 'e', 'i', 'o', 'u')\n      var minIndex = word.length\n\
    \      var minChar = \"\"\n      for (i <- word.length - 1 to 0 by -1) {\n   \
    \     if (vowels.contains(word(i))) {\n          val char = word(i).toString\n\
    \          if (i < minIndex) {\n            minIndex = i\n            minChar\
    \ = char\n          }\n        }\n      }\n      minChar", "    \tval vowels =\
    \ Map('a' -> true, 'e' -> true, 'i' -> true, 'o' -> true, 'u' -> true)\n    \t\
    val last = word.last\n    \tif (vowels.contains(last)) return \"\"\n    \tval\
    \ chs = word.toCharArray\n    \tfor (i <- chs.length - 2 to 0 by -1) {\n    \t\
    \tif (vowels.contains(chs(i)) && !vowels.contains(chs(i + 1))) {\n    \t\t\treturn\
    \ chs(i).toString\n    \t\t}\n    \t}\n    \t\"\"", "        var result = \"\"\
    \n        var lastVowel : Char = ' '\n        for (i <- word.length - 1 to 0 by\
    \ -1) {\n            val ch = word(i)\n            if (ch == 'a' || ch == 'e'\
    \ || ch == 'i' || ch == 'o' || ch == 'u') {\n                lastVowel = ch\n\
    \                break\n            }\n        }\n        for (i <- word.length\
    \ - 1 to 0 by -1) {\n            val ch = word(i)\n            if (ch == 'a' ||\
    \ ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                result\
    \ = \"\"\n            } else {\n                if (lastVowel != ' ') result +=\
    \ lastVowel\n            }\n        }\n        result", "        val vowels =\
    \ Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val cons = Set(\"b\", \"c\"\
    , \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val chars =\
    \ word.toLowerCase.toCharArray\n        val cnt = chars.length\n        var res\
    \ = \"\"\n        var dist = cnt\n        for (i <- 0 until cnt) {\n         \
    \   if (vowels.contains(chars(i))) {\n                var left = i - 1\n     \
    \           var right = i + 1\n                while (left >= 0 && !cons.contains(chars(left)))\
    \ left -= 1\n                while (right < cnt && !cons.contains(chars(right)))\
    \ right += 1\n                if (left >= 0 && right < cnt && right - left - 1\
    \ < dist) {\n                    dist = right - left - 1\n                   \
    \ res = chars(i).toString\n                }\n            }\n        }\n     \
    \   res", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var min\
    \ = Int.MaxValue\n        var result = \"\"\n        for (i <- 1 until word.length\
    \ - 1) {\n            if (vowels.contains(word(i))) {\n                val current\
    \ = abs(word(i - 1) - word(i + 1))\n                if (current < min) {\n   \
    \                 min = current\n                    result = word(i).toString\n\
    \                }\n            }\n        }\n        result", "        // Write\
    \ your code here\n        var count = 0\n        for (i <- word.length - 1 to\
    \ 0 by -1) {\n            if (word(i).toLower == 'a' || word(i).toLower == 'e'\
    \ || word(i).toLower == 'i' || word(i).toLower == 'o' || word(i).toLower == 'u')\
    \ count += 1\n            if (count == 2) return word(i).toString\n        }\n\
    \        return \"\"", "        val vowels = \"aeiou\"\n        val index = word.reverse.indexWhere(c\
    \ => vowels.contains(c))\n        if (index == -1) \"\"\n        else {\n    \
    \        val indexOfVowel = word.size - index - 1\n            val consonantRight\
    \ = indexOfVowel - 1\n            val consonantLeft = indexOfVowel + 1\n     \
    \       if (consonantRight < 0 || consonantLeft > word.size - 1) \"\"\n      \
    \      else if (consonantRight >= 0 && consonantLeft <= word.size - 1) word(indexOfVowel).toString\n\
    \            else {\n                val c = if (consonantRight < 0) word(consonantLeft)\
    \ else word(consonantRight)\n                if (!vowels.contains(c)) word(indexOfVowel).toString\
    \ else \"\"\n            }\n        }", "        // using ListBuffer because I\
    \ want to use reverse operation\n        val vowels = new ListBuffer[Char]\n \
    \       word.toList.reverse.foreach(c => {\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                vowels += c\n      \
    \      }\n        })\n        if(vowels.length == 0) return \"\"\n        vowels.reverse.foldLeft(vowels.reverse.last)((x,\
    \ y) => x)", "        var vowels = List[Char]('a', 'e', 'i', 'o', 'u')\n     \
    \   var consonants = List[Char]('q', 'w', 'r', 't', 'p', 's', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm')\n        var index = word.length\
    \ - 1\n        while (index >= 0) {\n            if (consonants.contains(word(index)))\
    \ {\n                if (index > 0 && vowels.contains(word(index - 1))) {\n  \
    \                  return word(index - 1).toString\n                }\n      \
    \          index -= 1\n            }\n            else index -= 1\n        }\n\
    \        return \"\"", "        // Your Code Here\n        return \"\"", "   \
    \     word.foldRight(\"\")((x, y) => if (y == \"\") {\n            if (isVowel(x))\
    \ y else \".\"\n        } else if (y == \".\") {\n            if (isVowel(x))\
    \ x.toString else \".\"\n        } else if (isVowel(x)) {\n            y\n   \
    \     } else \".\")", "    \tval vowels = List('a', 'e', 'i', 'o', 'u')\n    \t\
    val reversed = word.reverse\n    \tval vowelsInReversed = reversed.filter(vowels.contains(_))\n\
    \    \tval consonantsInReversed = reversed.filter(!vowels.contains(_))\n    \t\
    val vowelsIndexes = (0 until reversed.length).filter(i => vowels.contains(reversed(i)))\n\
    \    \tval consonantsIndexes = (0 until reversed.length).filter(i => !vowels.contains(reversed(i)))\n\
    \    \tval firstVowelIndex = vowelsIndexes.head\n    \tval lastVowelIndex = vowelsIndexes.last\n\
    \    \tval firstConsonantIndex = consonantsIndexes.head\n    \tval lastConsonantIndex\
    \ = consonantsIndexes.last\n    \tprintln(firstVowelIndex)\n    \tprintln(lastVowelIndex)\n\
    \    \tprintln(firstConsonantIndex)\n    \tprintln(lastConsonantIndex)\n    \t\
    if (firstVowelIndex < firstConsonantIndex || lastVowelIndex > lastConsonantIndex)\
    \ \"\"\n    \telse {\n    \t\tval list = ListBuffer[Int]()\n    \t\tfor (i <-\
    \ 0 until vowelsIndexes.length) {\n    \t\t\tval vowelsIndex = vowelsIndexes(i)\n\
    \    \t\t\tval consonantsIndex = consonantsIndexes.find(i => vowelsIndex < i)\n\
    \    \t\t\tif (consonantsIndex.isDefined) list += vowelsIndex\n    \t\t}\n   \
    \ \t\tprintln(list)\n    \t\treversed(list.min).toString\n    \t}", "    \tval\
    \ c = word.toCharArray\n    \tvar closestVowel = \"\"\n    \tvar distFromEnd =\
    \ 1\n    \tfor (v <- c.length - 1 to 0 by -1) {\n    \t\tval char = c(v)\n   \
    \ \t\tif (char == 'a' || char == 'e' || char == 'i' || char == 'o' || char ==\
    \ 'u') {\n    \t\t\tclosestVowel = char.toString\n    \t\t\tbreak\n    \t\t}\n\
    \    \t\tdistFromEnd += 1\n    \t}\n    \tval distFromStart = distFromEnd - 1\n\
    \    \tvar isPreviousCharConsonant = false\n    \tvar isNextCharConsonant = false\n\
    \    \tif (distFromStart >= c.length || \n    \t\t\t(c(distFromStart) != 'a' &&\
    \ c(distFromStart) != 'e' && c(distFromStart) != 'i' && \n    \t\t\t\t\tc(distFromStart)\
    \ != 'o' && c(distFromStart) != 'u')) isPreviousCharConsonant = true\n    \tif\
    \ (distFromEnd >= c.length || \n    \t\t\t(c(c.length - distFromEnd) != 'a' &&\
    \ c(c.length - distFromEnd) != 'e' && \n    \t\t\t\t\tc(c.length - distFromEnd)\
    \ != 'i' && c(c.length - distFromEnd) != 'o' && \n    \t\t\t\t\tc(c.length - distFromEnd)\
    \ != 'u')) isNextCharConsonant = true\n    \tif (isPreviousCharConsonant && isNextCharConsonant)\
    \ closestVowel else \"\"", "        // Fill up this function body\n        //\
    \ 'a', 'e', 'i', 'o', 'u'\n        if (word.size < 3) \"\"\n        else {\n \
    \           var result = \"\"\n            var lIdx = word.size - 1\n        \
    \    var rIdx = lIdx - 1\n            var lOk = false\n            var rOk = false\n\
    \            for (i <- 0 until word.size) {\n                if (!lOk && word(lIdx)\
    \ == 'a' || word(lIdx) == 'e' || word(lIdx) == 'i' || word(lIdx) == 'o' || word(lIdx)\
    \ == 'u') {\n                    lOk = true\n                }\n             \
    \   if (!rOk && word(rIdx) == 'a' || word(rIdx) == 'e' || word(rIdx) == 'i' ||\
    \ word(rIdx) == 'o' || word(rIdx) == 'u') {\n                    rOk = true\n\
    \                }\n                if (lOk && rOk) {\n                    result\
    \ = word(lIdx).toString\n                    break\n                }\n      \
    \          lIdx -= 1\n                rIdx -= 1\n            }\n            result\n\
    \        }", "        // 1st find the farthest consonant\n        // 2nd find\
    \ the closest vowel to the right of the farthest consonant\n        var res =\
    \ \"\"\n        val vowels = \"AEIOUaeiou\"\n        var farthestConsonantIndex\
    \ = -1\n        for (i <- word.length - 1 to 0 by -1) {\n            if (!vowels.contains(word(i)))\
    \ {\n                farthestConsonantIndex = i\n                break\n     \
    \       }\n        }\n        if (farthestConsonantIndex != -1) {\n          \
    \  var closestVowelIndex = -1\n            for (i <- farthestConsonantIndex +\
    \ 1 to word.length - 1) {\n                if (vowels.contains(word(i))) {\n \
    \                   closestVowelIndex = i\n                    break\n       \
    \         }\n            }\n            if (closestVowelIndex != -1) res = word(closestVowelIndex).toString\n\
    \        }\n        res", "        if (word.length < 3) return \"\"\n        var\
    \ result = \"\"\n        for (i <- (0 until word.length).reverse) {\n        \
    \    if (word(i).isVowel) {\n                if (i > 0 && word(i - 1).isConsonant)\
    \ {\n                    if (i < word.length - 1 && word(i + 1).isConsonant) {\n\
    \                        result = word(i).toString\n                        break\n\
    \                    }\n                }\n            }\n        }\n        result",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val wordReverse = word.reverse\n\
    \        val left = wordReverse.dropWhile(!vowels.contains(_))\n        val leftReverse\
    \ = left.reverse\n        if (leftReverse.size < 2) {\n            \"\"\n    \
    \    } else {\n            leftReverse.drop(1).head.toString\n        }", "  \
    \      val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val chars = word.toCharArray\n\
    \        val size = chars.size\n        var i = 0\n        while (i < size - 1)\
    \ {\n            if (vowels.contains(chars(i)) && !vowels.contains(chars(i + 1)))\
    \ return chars(i).toString\n            i += 1\n        }\n        \"\"", "  \
    \      var vowelPosition = -1\n        for (i <- word.length - 1 to 0 by -1) {\n\
    \            if (isVowel(word(i))) {\n                vowelPosition = i\n    \
    \            break\n            }\n        }\n        for (i <- vowelPosition\
    \ - 1 to 0 by -1) {\n            if (!isVowel(word(i))) {\n                return\
    \ word(vowelPosition).toString\n            }\n        }\n        \"\"", "   \
    \     val index = word.indices.filter(i => isVowel(word(i)) && isConsonant(word(i\
    \ - 1)) && isConsonant(word(i + 1))).lastOption\n        if (index.isDefined)\
    \ word(index.get).toString else \"\"", "        var vowel = Array(\"a\", \"e\"\
    , \"i\", \"o\", \"u\")\n        var index = -1\n        for (i <- word.length\
    \ - 1 to 0 by -1) {\n            if (vowel.contains(word(i).toString)) {\n   \
    \             index = i\n                break\n            }\n        }\n   \
    \     if (index == -1) return \"\"\n        for (i <- index - 1 to 0 by -1) {\n\
    \            if (!vowel.contains(word(i).toString)) return word(index).toString\n\
    \        }\n        return \"\"", "    \tif (word.isEmpty) return \"\"\n    \t\
    val str = word.toLowerCase\n    \tfor (i <- str.length - 1 to 0 by -1) {\n   \
    \ \t\tif (str(i) == 'a' || str(i) == 'e' || str(i) == 'i' || str(i) == 'o' ||\
    \ str(i) == 'u') {\n    \t\t\tif (i == str.length - 1) return \"\"\n    \t\t\t\
    if (str(i + 1) != 'a' && str(i + 1) != 'e' && str(i + 1) != 'i' && str(i + 1)\
    \ != 'o' && str(i + 1) != 'u') return str(i).toString\n    \t\t}\n    \t}\n  \
    \  \t\"\"", "        // find the index of the last vowel from the right side\n\
    \        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\")\n        for (i <- word.length - 1 to 0 by -1) {\n        \
    \    val n = word(i)\n            if (vowels.contains(n.toString)) {\n       \
    \         // find the closest consonant from the right side\n                for\
    \ (j <- i to word.length - 1) {\n                    val m = word(j)\n       \
    \             if (!vowels.contains(m.toString)) {\n                        //\
    \ find the closest consonant from the left side\n                        for (k\
    \ <- i to 0 by -1) {\n                            val p = word(k)\n          \
    \                  if (!vowels.contains(p.toString)) return n.toString\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n        \"\"", "        // Fill-in\n        \"\"", '        return
    ""', "        var position = -1\n        for (i <- 0 until word.length) {\n  \
    \          if (isVowel(word(i))) {\n                position = i\n           \
    \     break\n            }\n        }\n        for (i <- (position + 1) until\
    \ word.length) {\n            if (isVowel(word(i))) return \"\"\n            if\
    \ (!isVowel(word(i))) return word(i - 1).toString\n        }\n        \"\"", " \
    \       // Fill up this function body\n        // 'a' to 'z' is 97 to 122\n  \
    \      // 'A' to 'Z' is 65 to 90\n        var result = \"\"\n        if(word.length\
    \ < 2) return result\n        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U')\n        val consonants = Set('b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C',\
    \ 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W',\
    \ 'X', 'Y', 'Z')\n        for(i <- word.length - 1 to 1 by -1) {\n           \
    \ if(vowels.contains(word(i)) && consonants.contains(word(i - 1))) return word(i).toString\n\
    \        }\n        result", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        word.zipWithIndex.reverse.find(x => vowels.contains(x._1) && \n     \
    \       word.indexOf(x._1) > 0 && !vowels.contains(word(word.indexOf(x._1) - 1)))\
    \ match {\n            case Some(x) => x._1.toString\n            case None =>\
    \ \"\"\n        }", "        // Fill up this function body\n        // 'a' to\
    \ 'z'\n        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val positionVowels = new ArrayBuffer[(Int, Char)]\n        val positionConsonants\
    \ = new ArrayBuffer[(Int, Char)]\n        for (i <- 0 until word.length) {\n \
    \           val c = word(i)\n            if (vowels.contains(c)) {\n         \
    \       positionVowels += ((i, c))\n            } else if (consonants.contains(c))\
    \ {\n                positionConsonants += ((i, c))\n            }\n        }\n\
    \        if (positionVowels.length == 0 || positionConsonants.length == 0) return\
    \ \"\"\n        var result = \"\"\n        var currentDist = Int.MaxValue\n  \
    \      for (i <- 0 until positionVowels.length) {\n            for (j <- 0 until\
    \ positionConsonants.length) {\n                val curVowel = positionVowels(i)\n\
    \                val curConsonant = positionConsonants(j)\n                if\
    \ (curVowel._1 < curConsonant._1) {\n                    val curDist = curConsonant._1\
    \ - curVowel._1\n                    if (curDist < currentDist) {\n          \
    \              currentDist = curDist\n                        result = curVowel._2.toString\n\
    \                    }\n                }\n            }\n        }\n        result",
  "        var result = \"\"\n        val vowels = Array('a', 'e', 'i', 'o', 'u')\n\
    \        for (i <- word.length - 1 to 0 by -1) {\n            if (vowels.contains(word(i)))\
    \ {\n                if (i + 1 < word.length) {\n                    if (!vowels.contains(word(i\
    \ + 1))) result = word(i).toString\n                }\n                else result\
    \ = word(i).toString\n            }\n            else {\n                if (result.length\
    \ == 0) {\n                    if (i - 1 >= 0) {\n                        if (vowels.contains(word(i\
    \ - 1))) result = word(i - 1).toString\n                    }\n              \
    \  }\n            }\n        }\n        result", "        var vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        for (i <- word.length - 1 to 0 by -1) {\n     \
    \       val currentChar = word(i)\n            val nextChar = if (i == word.length\
    \ - 1) null else word(i + 1)\n            if (vowels.contains(currentChar) &&\
    \ nextChar != null && !vowels.contains(nextChar)) return currentChar.toString\n\
    \        }\n        \"\"", "        if (word.isEmpty) return \"\"\n        val\
    \ vowels = \"aeiou\"\n        def isVowel(c : Char) = { vowels.contains(c) }\n\
    \        def isConsonant(c : Char) = { !isVowel(c) }\n        val newWord = word.reverse\n\
    \        var prev = false\n        var next = false\n        var r = \"\"\n  \
    \      for (i <- 0 until newWord.length) {\n            val c = newWord(i)\n \
    \           if (isVowel(c)) {\n                next = true\n                if\
    \ (prev) {\n                    r = c.toString\n                    break\n  \
    \              }\n            }\n            else if (isConsonant(c)) {\n    \
    \            prev = next\n                next = false\n            }\n      \
    \  }\n        r", "        // See the vowels.\n        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        // See the vowels that are after the first consonant\
    \ from the right.\n        val v1 = word.toList.reverse.dropWhile(vowels.contains).dropWhile(!vowels.contains).reverse\n\
    \        // See the vowels that are before the first consonant from the right.\n\
    \        val v2 = word.toList.reverse.dropWhile(!vowels.contains).dropWhile(vowels.contains).reverse\n\
    \        // If v1 is not empty, then it means that there exists a consonant before\
    \ the first vowel from the right.\n        // Same goes for v2, the second case.\n\
    \        // If both v1 and v2 are empty, then return the empty string.\n     \
    \   if (v1.isEmpty && v2.isEmpty) \"\"\n        else if (v1.isEmpty) v2.head.toString\n\
    \        else if (v2.isEmpty) v1.head.toString\n        else if (v1.length <=\
    \ v2.length) v1.head.toString\n        else v2.head.toString", "        var a\
    \ : Char = 0\n        var cv = \"\"\n        val vowels = \"AEIOUaeiou\"\n   \
    \     val r = word.reverse\n        for (i <- 0 until r.length - 1) {\n      \
    \      if (vowels.contains(r(i))) {\n                if (vowels.contains(r(i +\
    \ 1))) {\n                    a = r(i)\n                    for (j <- (i + 1)\
    \ until r.length) {\n                        if (!vowels.contains(r(j))) {\n \
    \                           cv = a.toString\n                            return\
    \ cv\n                        }\n                    }\n                }\n  \
    \          }\n        }\n        cv", "        if (word.length < 3) \"\"\n   \
    \     else {\n            val vowels = \"aeiouAEIOU\"\n            val cons =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n            val idx = word.indexWhere(vowels.contains(_))\n\
    \            if (idx <= 0 || idx >= word.length - 1) \"\"\n            else if\
    \ (cons.contains(word(idx - 1)) && cons.contains(word(idx + 1))) word(idx).toString\n\
    \            else getClosestVowel(word.drop(idx + 1))\n        }", "        /**\n\
    \         * Returns the index of the first vowel that stands between two consonants\n\
    \         * from the right side of the word (case sensitive).\n         * Vowels\
    \ in the beginning and ending doesn't count.\n         * returns -1 if no vowel\
    \ met the condition.\n         */\n        def getVowelIndex(word : String) :\
    \ Int = {\n            val vowels = \"aeiou\"\n            for (i <- word.length\
    \ - 1 to 0 by -1) {\n                val c = word(i)\n                if (vowels.contains(c))\
    \ {\n                    if (i < word.length - 1 && vowels.contains(word(i + 1)))\
    \ return -1\n                    if (i > 0 && vowels.contains(word(i - 1))) return\
    \ -1\n                    return i\n                }\n            }\n       \
    \     return -1\n        }\n        if (getVowelIndex(word) == -1) \"\" else word(getVowelIndex(word)).toString",
  '        ???', '        return ""', "        val vowel = List('a', 'e', 'i', 'o',\
    \ 'u')\n        val consonant = List('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n        val wordList\
    \ = word.toLowerCase.toList\n        var left = 0\n        var right = wordList.length\
    \ - 1\n        var result = \"\"\n        var found = false\n        while (right\
    \ >= 0 && !found) {\n            val leftChar = wordList(left)\n            val\
    \ rightChar = wordList(right)\n            if (consonant.contains(leftChar) &&\
    \ consonant.contains(rightChar)) {\n                found = true\n           \
    \     for (i <- (left + 1) to (right - 1)) {\n                    if (vowel.contains(wordList(i)))\
    \ {\n                        result = wordList(i).toString\n                 \
    \       return result\n                    }\n                }\n            }\n\
    \            left += 1\n            right -= 1\n        }\n        result", " \
    \       var charArray = word.toCharArray\n        var index = charArray.length\
    \ - 1\n        while (index >= 0) {\n            if (!isVowel(charArray(index)))\
    \ {\n                var vowelIndex = index - 1\n                while (vowelIndex\
    \ >= 0) {\n                    if (isVowel(charArray(vowelIndex))) {\n       \
    \                 return charArray(vowelIndex).toString\n                    }\n\
    \                    vowelIndex -= 1\n                }\n            }\n     \
    \       index -= 1\n        }\n        return \"\"", "        var stack = new\
    \ Stack[Char]\n        for (c <- word) {\n            stack.push(c)\n        }\n\
    \        val vowels = \"AEIOUaeiou\"\n        val consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n        var index = -1\n        while (!stack.isEmpty) {\n            val c\
    \ = stack.pop\n            if (vowels.contains(c)) {\n                if (index\
    \ >= 0 && consonants.contains(word(index))) {\n                    return c.toString\n\
    \                }\n            } else if (consonants.contains(c)) {\n       \
    \         index = word.indexOf(c)\n            }\n        }\n        \"\"", " \
    \     val vowels = \"AEIOU\"\n      val buff = Buffer[Int]()\n      for (i <-\
    \ word.length - 1 to 0 by -1) if (vowels.contains(word(i))) buff += i\n      val\
    \ index = buff.takeWhile(x => !vowels.contains(word(x - 1))).dropWhile(x => !vowels.contains(word(x\
    \ + 1))).headOption\n      if (index.isEmpty) \"\" else word(index.get).toString",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        def letterFilter(word\
    \ : String) : Seq[(Char, Int)] = {\n            def helper(word : String, result\
    \ : List[(Char, Int)], index : Int) : List[(Char, Int)] = {\n                if\
    \ (word.isEmpty) result\n                else if (vowels.contains(word.head))\
    \ helper(word.tail, (word.head, index) :: result, index + 1)\n               \
    \ else helper(word.tail, result, index + 1)\n            }\n            helper(word,\
    \ List(), 0)\n        }\n        def check(first : Char, last : Char) : Boolean\
    \ = {\n            if (first == last) true\n            else if (vowels.contains(first))\
    \ false\n            else check(first + 1, last)\n        }\n        def get(word\
    \ : String, index : Int) : String = {\n            if (check(word(index - 1),\
    \ word(index + 1))) word(index).toString\n            else get(word, index - 1)\n\
    \        }\n        val result = letterFilter(word)\n        if (result.isEmpty)\
    \ \"\"\n        else get(word, result.last._2)", "        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = List(\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val chars =\
    \ word.toLowerCase.toList\n        var closest = \"\"\n        for (i <- 0 until\
    \ chars.length - 1) {\n            if (consonants.contains(chars(i)) && vowels.contains(chars(i\
    \ + 1))) {\n                closest = chars(i + 1).toString\n                return\
    \ closest\n            }\n        }\n        closest", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        var min = word.length\n        var ans = \"\"\n\
    \        for (i <- 0 until word.length) {\n            if (vowels.contains(word(i))\
    \ && word.drop(i).indexWhere(!vowels.contains(_)) < min) {\n                min\
    \ = word.drop(i).indexWhere(!vowels.contains(_))\n                ans = word(i).toString\n\
    \            }\n        }\n        ans", "        // http://stackoverflow.com/questions/6247855/how-to-return-a-substring-from-a-string-in-scala\n\
    \        var ans = \"\"\n        if (word.length >= 2) {\n            var pos\
    \ = word.length - 2\n            while (pos >= 0) {\n                if (isVowel(word(pos))\
    \ && !isVowel(word(pos + 1))) {\n                    ans = word.substring(pos,\
    \ pos + 1)\n                    return ans\n                }\n              \
    \  pos -= 1\n            }\n        }\n        ans", "        def solve(word :\
    \ String, pos : Int) : String = {\n            if (pos < word.length) {\n    \
    \            if (pos == 0 && \"aeiou\".contains(word(pos))) {\n              \
    \      solve(word, pos + 1)\n                } else if (pos == word.length - 1\
    \ && \"aeiou\".contains(word(pos))) {\n                    solve(word, pos + 1)\n\
    \                } else if (pos + 1 < word.length && \"aeiou\".contains(word(pos))\
    \ && !(\"aeiou\".contains(word(pos - 1))) && !(\"aeiou\".contains(word(pos + 1))))\
    \ {\n                    word(pos).toString\n                } else {\n      \
    \              solve(word, pos + 1)\n                }\n            } else {\n\
    \                \"\"\n            }\n        }\n        solve(word, 0)", "  \
    \      val vowels = \"aeiouAEIOU\"\n        for (i <- word.length - 1 to 0 by\
    \ -1) {\n            if (vowels.contains(word(i))) {\n                if (i ==\
    \ word.length - 1) return \"\"\n                else if (vowels.contains(word(i\
    \ + 1))) return \"\"\n                else return word(i).toString\n         \
    \   }\n        }\n        return \"\"", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        var left = -1\n        for (i <- word.length - 1 to 0 by\
    \ -1) {\n            if (vowels contains word(i)) {\n                left = i\n\
    \                break\n            }\n        }\n        if (left < 1) return\
    \ \"\"\n        var right = -1\n        for (i <- left - 1 to 0 by -1) {\n   \
    \         if (!(vowels contains word(i))) {\n                right = i\n     \
    \           break\n            }\n        }\n        if (right < 0) return \"\"\
    \n        word(left).toString", "        val vowels = List(\"a\", \"e\", \"i\"\
    , \"o\", \"u\")\n        for (i <- word.length - 1 to 0 by -1) {\n           \
    \ val c = word(i).toString\n            if (vowels.contains(c)) {\n          \
    \      for (j <- i - 1 to 0 by -1) {\n                    val d = word(j).toString\n\
    \                    if (!vowels.contains(d)) return c\n                }\n  \
    \          }\n        }\n        \"\"", "        word.reverse.foreach(c => if\
    \ (isVowel(c)) return c.toString);\n        \"\"", "        val pattern = \"([^aeiouAEIOU])([aeiouAEIOU])([^aeiouAEIOU])\"\
    .r\n        val result = pattern.findAllIn(word)\n        if (result.length ==\
    \ 0) return \"\"\n        return result.group(2)", "        // check if word starts\
    \ with vowel, like \"apple\"\n        if (word.head.isVowel) \"\"\n        else\
    \ {\n            // check if word ends with consonant, like \"bit\"\n        \
    \    if (word.last.isConsonant) {\n                // check if contains only one\
    \ consonant, like \"b\"\n                if (word.tail.head.isVowel) \"\"\n  \
    \              else {\n                    // tail of word except last consonant\n\
    \                    var s = word.tail.tail\n                    // find the closest\
    \ vowel index from the right\n                    var i = s.lastIndexOfSlice(\"\
    aeiouAEIOU\")\n                    // return the vowel\n                    if\
    \ (i == -1) \"\" else s(i).toString\n                }\n            }\n      \
    \      else {\n                // if word ends with vowel, like \"cat\"\n    \
    \            var s = word.tail\n                var i = s.lastIndexOfSlice(\"\
    aeiouAEIOU\")\n                if (i == -1) \"\" else s(i).toString\n        \
    \    }\n        }", "        if (word.isEmpty || word.size == 1) return \"\"\n\
    \        var isPreviousConsonant = false\n        var i = word.size - 1\n    \
    \    while (i >= 0) {\n            if (word(i).isLetter) {\n                if\
    \ (word(i).isVowel) {\n                    if (isPreviousConsonant) return word(i).toString\n\
    \                } else {\n                    isPreviousConsonant = true\n  \
    \              }\n            }\n            i -= 1\n        }\n        \"\"",
  "        var vowel = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var l = List[String]()\n\
    \        word.toList.zipWithIndex.map { case (ch, index) =>\n            if (vowel.contains(ch.toString))\
    \ {\n                l = l :+ ch.toString\n            }\n        }\n        return\
    \ l.mkString", "        // get the last letter of the word\n        // if it is\
    \ vowel, check the pre-last letter\n        // if it is vowel, return empty string\n\
    \        // if it is not vowel, check the next right vowel until\n        // there\
    \ is one, and return it.\n        val lastLetter = word.takeRight(1)\n       \
    \ val secondLastLetter = word.takeRight(2).take(1)\n        if (List(\"a\", \"\
    e\", \"i\", \"o\", \"u\").contains(lastLetter)) {\n            if (List(\"a\"\
    , \"e\", \"i\", \"o\", \"u\").contains(secondLastLetter)) return \"\"\n      \
    \      else return lastLetter\n        }\n        else {\n            for (i <-\
    \ (word.length - 1) to 0 by -1) {\n                if (List(\"a\", \"e\", \"i\"\
    , \"o\", \"u\").contains(word(i).toString)) return word(i).toString\n        \
    \    }\n            return \"\"\n        }", "    \tif (word.length < 3) return\
    \ \"\"\n    \tval data = word.toList\n    \tfor (i <- (data.length - 1).to(0,\
    \ -1)) {\n    \t\tval tmp = data(i)\n    \t\tif (tmp == 'A' || tmp == 'E' || tmp\
    \ == 'I' || tmp == 'O' || tmp == 'U') {\n    \t\t\tif (i + 1 < data.length) {\n\
    \    \t\t\t\tif (data(i + 1) != 'A' && data(i + 1) != 'E' && data(i + 1) != 'I'\
    \ && data(i + 1) != 'O' && data(i + 1) != 'U') {\n    \t\t\t\t\tif (i - 1 >= 0)\
    \ {\n    \t\t\t\t\t\tif (data(i - 1) != 'A' && data(i - 1) != 'E' && data(i -\
    \ 1) != 'I' && data(i - 1) != 'O' && data(i - 1) != 'U') return \"\" + tmp\n \
    \   \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n    \t\"\"",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        for (i <- word.length\
    \ - 1 to 0 by -1) {\n            if (vowels.contains(word(i))) {\n           \
    \     var vowelFlag = true\n                for (j <- i + 1 to word.length - 1)\
    \ {\n                    if (vowels.contains(word(j))) vowelFlag = false\n   \
    \             }\n                if (vowelFlag) return word(i).toString\n    \
    \        }\n        }\n        \"\"", "        // loop through each letter in\
    \ the string\n        var matchedVowel = \"\"\n        var mostRecentVowel = \"\
    \"\n        var prevWasConsonant = false\n        var prevWasVowel = false\n \
    \       for (i <- 0 until word.length) {\n            val letter = word(i)\n \
    \           if (\"AEIOUaeiou\".contains(letter)) {\n                mostRecentVowel\
    \ = letter.toString\n                if (prevWasConsonant) {\n               \
    \     matchedVowel = mostRecentVowel\n                    return matchedVowel\n\
    \                }\n                prevWasVowel = true\n            } else {\n\
    \                if (prevWasVowel) {\n                    matchedVowel = mostRecentVowel\n\
    \                }\n                prevWasConsonant = true\n            }\n \
    \       }\n        return matchedVowel", "        // Write your code here\n  \
    \      if (word.length() < 2) return \"\"\n        val vowels = \"aeiouAEIOU\"\
    \n        var closest : String = \"\"\n        var distance : Int = word.length()\n\
    \        for (i <- word.length() - 2 to 0 by -1) {\n            if (vowels.contains(word(i))\
    \ && vowels.contains(word(i + 1)) == false) {\n                if (word.length()\
    \ - i < distance) {\n                    distance = word.length() - i\n      \
    \              closest = word(i).toString()\n                }\n            }\n\
    \        }\n        return closest", "        def isConsonant(c : Char) = !isVowel(c)\n\
    \        def isVowel(c : Char) = List('a', 'e', 'i', 'o', 'u').contains(c)\n \
    \       val wordList = word.toList\n        val wordListReversed = wordList.reverse\n\
    \        val vowelIndices = (for (i <- 0 until wordListReversed.length) yield\
    \ i).filter(i => isVowel(wordListReversed(i)))\n        val consonantIndices =\
    \ (for (i <- 0 until wordListReversed.length) yield i).filter(i => isConsonant(wordListReversed(i)))\n\
    \        val validIndices = for (v <- vowelIndices; c <- consonantIndices) yield\
    \ (v, c)\n        val validVowelIndices = validIndices.filter(t => t._1 < t._2).map(_._1)\n\
    \        if (validVowelIndices.length == 0) \"\" else {\n        \tval minDist\
    \ = validVowelIndices.map(i => i - (wordListReversed.length - 1)).min\n      \
    \  \tval minDistIndices = validVowelIndices.filter(i => i - (wordListReversed.length\
    \ - 1) == minDist)\n        \tval bestIndex = minDistIndices.min\n        \twordListReversed(bestIndex).toString\n\
    \        }", "        // Solution starts here...\n        \n        val vowels\
    \ = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val split = word.split(\"\
    \")\n        var pos = word.length - 1\n        val result = new StringBuilder\n\
    \        while (pos > 0) {\n            val c = split(pos)\n            if (vowels.contains(c))\
    \ {\n                if (vowels.contains(split(pos - 1))) pos -= 1\n         \
    \       else return c\n            }\n            pos -= 1\n        }\n      \
    \  \"\"", "        var vowel = \"\"\n        var stack = Stack[Char]()\n     \
    \   for (ch <- word) {\n            if (stack.isEmpty) {\n                if (isVowel(ch))\
    \ {\n                    vowel = ch.toString\n                } else {\n     \
    \               stack.push(ch)\n                }\n            } else {\n    \
    \            val last = stack.pop\n                if (isVowel(ch)) {\n      \
    \              vowel = ch.toString\n                } else {\n               \
    \     stack.push(last)\n                    stack.push(ch)\n                }\n\
    \            }\n        }\n        vowel", "        // Fill-in here\n        \"\
    YOUR CODE HERE\"", "        var isVowel = false\n        var isConsonant = false\n\
    \        var vowelCount = 0\n        var vowel = 0\n        var consonant = 0\n\
    \        val length = word.length\n        for (i <- word.length - 1 to 0 by -1)\
    \ {\n            if (\"aeiouAEIOU\".contains(word(i))) {\n                isVowel\
    \ = true\n                vowel = i\n                vowelCount += 1\n       \
    \     } else {\n                isConsonant = true\n                consonant\
    \ = i\n            }\n            if (isVowel && isConsonant) return word(vowel).toString\n\
    \        }\n        \"\"", "        val vowels = Array(\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n        if (word.length == 0) \"\"\n        else {\n            val\
    \ sc = new java.util.Scanner(word)\n            val possibleVowels = new ArrayBuffer[String]\n\
    \            var previous : String = \"\"\n            while (sc.hasNext) {\n\
    \                val current = sc.next\n                if (vowels.contains(current))\
    \ {\n                    if (previous != \"\") possibleVowels += current\n   \
    \             }\n                else previous = current\n            }\n    \
    \        if (possibleVowels.length == 0) \"\"\n            else possibleVowels.minBy(vowel\
    \ => (word.lastIndexOf(vowel) - word.indexOf(vowel)))\n        }", "        val\
    \ vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants =\
    \ Array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val x = word.split(\"\").filter(vowels.contains(_))\n        x.filter(y\
    \ => consonants.contains(word.split(\"\").filter(consonants.contains(_)).filter(z\
    \ => z.length == word.split(\"\").filter(consonants.contains(_)).length - x.indexOf(y)\
    \ - 1)(0)) &&\n        consonants.contains(word.split(\"\").filter(consonants.contains(_)).filter(z\
    \ => z.length == word.split(\"\").filter(consonants.contains(_)).length - x.indexOf(y)\
    \ - 2)(0))) match {\n            case Array() => \"\"\n            case y => y(0)\n\
    \        }", "        var vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n  \
    \      var position = -1\n        for (i <- 0 until word.length) {\n         \
    \   if (!vowels.contains(word(i).toString) && vowels.contains(word(i - 1).toString))\
    \ {\n                position = i - 1\n                break\n            }\n\
    \        }\n        if (position == -1) \"\" else word(position).toString", " \
    \     val vowels = List('a', 'e', 'i', 'o', 'u')\n      val consonants = word.filter(ch\
    \ => !vowels.contains(ch))\n      if (consonants.length == word.length || word.length\
    \ == 1) \"\"\n      else {\n        val rightSide = consonants.reverse\n     \
    \   val rightConsonants = rightSide.takeWhile(ch => !vowels.contains(ch))\n  \
    \      val rightVowels = rightSide.dropWhile(ch => !vowels.contains(ch))\n   \
    \     if (rightConsonants.length < 1 || rightVowels.length < 1) \"\"\n       \
    \ else rightVowels.head.toString\n      }", "        val vowels = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        if (word.length < 3) return \"\"\n        for\
    \ (i <- word.length - 2 to 0 by -1) {\n            if (vowels.contains(word(i).toString)\
    \ && !vowels.contains(word(i - 1).toString) && !vowels.contains(word(i + 1).toString))\
    \ return word(i).toString\n        }\n        return \"\"", "        // Note:\
    \ We have to find the closest vowel to the right that stands between two consonants.\n\
    \        // The closeness here is measured by distance from the end of the string.\
    \ The end of the\n        // string is 1 unit away, the second character from\
    \ the end is 2 units away, and so on.\n        // The idea here is to use a hashmap\
    \ to keep track of the vowels and the distances of each\n        // vowel from\
    \ the end of the string.\n        val vowels = Set('a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U')\n        val map = new HashMap[Char, Int]\n        for (i\
    \ <- (word.length - 1).to(0, -1)) {\n            val c = word(i)\n           \
    \ if (vowels.contains(c)) {\n                if (!map.contains(c)) map += c ->\
    \ (word.length - i)\n            } else {\n                // If the current character\
    \ is a consonant, we have to check if we have a vowel before\n               \
    \ // that consonant. If so, then we know we have a vowel in between two consonants,\
    \ and\n                // we can return that vowel.\n                if (map.size\
    \ > 0) return map.minBy(_._2)._1.toString\n            }\n        }\n        \"\
    \"", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var closest =\
    \ \"\"\n        var isStart = true\n        for (i <- word.length - 1 to 0 by\
    \ -1) {\n            if (vowels contains word(i)) {\n                if (!isStart)\
    \ closest = word(i).toString\n                isStart = false\n            } else\
    \ {\n                if (!isStart) return closest\n            }\n        }\n\
    \        return closest", "        // check all vowels\n        // if it's a vowel\
    \ then check if there is another vowel next to it, if not then keep it\n     \
    \   var prevConsonant = false\n        var temp = \"\"\n        for (char <- word)\
    \ {\n            if (char == 'a' || char == 'e' || char == 'i' || char == 'o'\
    \ || char == 'u') {\n                if (prevConsonant) {\n                  \
    \  temp = char.toString\n                    break\n                }\n      \
    \      } else prevConsonant = true\n        }\n        temp", "        var vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        var min = word.length + 1\n        var\
    \ vowel = \"\"\n        for (i <- word.length - 1 to 0 by -1) {\n            if\
    \ (vowels.contains(word(i))) {\n                if (i > 0 && !vowels.contains(word(i\
    \ - 1))) {\n                    if (min > i) {\n                        min =\
    \ i\n                        vowel = word(i).toString\n                    }\n\
    \                }\n                if (i < word.length - 1 && !vowels.contains(word(i\
    \ + 1))) {\n                    if (min > (word.length - i - 1)) {\n         \
    \               min = word.length - i - 1\n                        vowel = word(i).toString\n\
    \                    }\n                }\n            }\n        }\n        vowel",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        for (i <-\
    \ word.length - 1 to 0 by -1) if (vowels contains word(i)) return word(i).toString\n\
    \        \"\"", "    \tvar vowels = List('a', 'e', 'i', 'o', 'u')\n    \tval chars\
    \ = word.toLowerCase.toCharArray\n    \tif (chars.length < 3) return \"\"\n  \
    \  \tif (vowels.contains(chars(chars.length - 1))) return \"\"\n    \tfor (i <-\
    \ 1 until chars.length) {\n    \t\tif (vowels.contains(chars(i)) && !vowels.contains(chars(i\
    \ - 1))) {\n    \t\t\tval prev = chars(i - 1)\n    \t\t\tvar j = i + 1\n    \t\
    \t\twhile (j < chars.length && !vowels.contains(chars(j))) j += 1\n    \t\t\t\
    if (j == chars.length) return chars(i).toString\n    \t\t\tval next = chars(j)\n\
    \    \t\t\tval (ch, k) = if (abs(chars(i) - prev) < abs(chars(i) - next)) (chars(i),\
    \ i) else (chars(j), j)\n    \t\t\treturn ch.toString\n    \t\t}\n    \t}\n  \
    \  \t\"\"", "        def getClosestVowelHelper(word : String, index : Int) : String\
    \ = {\n            if (index < 0) return \"\"\n            if (word(index).isVowel)\
    \ {\n                if (index == word.length - 1) return \"\"\n             \
    \   else if (word(index + 1).isConsonant) return word(index).toString\n      \
    \      }\n            getClosestVowelHelper(word, index - 1)\n        }\n    \
    \    getClosestVowelHelper(word, word.length - 1)", "        def isVowel(c : Char)\
    \ = c match {\n            case 'a' => true\n            case 'e' => true\n  \
    \          case 'i' => true\n            case 'o' => true\n            case 'u'\
    \ => true\n            case 'A' => true\n            case 'E' => true\n      \
    \      case 'I' => true\n            case 'O' => true\n            case 'U' =>\
    \ true\n            case _ => false\n        }\n        def isConsonant(c : Char)\
    \ = !isVowel(c)\n        val str : Array[Char] = word.toCharArray\n        val\
    \ last = str.length - 1\n        for (i <- last - 1 to 0 by -1) {\n          \
    \  if (isConsonant(str(i)) && isVowel(str(i + 1)) && isConsonant(str(i + 2)))\
    \ return \"\" + str(i + 1)\n        }\n        \"\"", "        val vowels = \"\
    aeiouyAEIOUY\"\n        val consonants = \"bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ\"\
    \n        val s = word.filter(vowels.contains(_))\n        val x = s.filter(consonants.contains(_))\n\
    \        if (x.length == 0) \"\" else s(x.length - 1).toString", "        if (word.length\
    \ < 2) return \"\"\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        for (i <- word.length - 2 to 0 by -1) {\n            if (vowels.contains(word(i).toString.toLowerCase)\
    \ && !vowels.contains(word(i + 1).toString.toLowerCase)) return word(i).toString\n\
    \        }\n        \"\"", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        var bestvowel : String = \"\"\n        var distance = Int.MaxValue\n\
    \        for (i <- 0 until word.length) {\n            val c = word(i)\n     \
    \       if (vowels contains c) {\n                var c1_index = i + 1\n     \
    \           if (c1_index < word.length) {\n                    var c1 = word(c1_index)\n\
    \                    while (c1_index < word.length) {\n                      \
    \  if (!(vowels contains c1)) {\n                            if (distance > c1_index\
    \ - i) {\n                                distance = c1_index - i\n          \
    \                      bestvowel = c.toString\n                            }\n\
    \                            break\n                        }\n              \
    \          c1_index += 1\n                        if (c1_index < word.length)\
    \ c1 = word(c1_index)\n                    }\n                }\n            }\n\
    \        }\n        bestvowel", "    \tval vowels = \"aeiou\"\n    \tval len =\
    \ word.length - 1\n    \tfor (i <- 0 to len) {\n    \t\tif (vowels.contains(word(i)))\
    \ {\n    \t\t\tval a = i - 1\n    \t\t\tval b = i + 1\n    \t\t\tif (a >= 0 &&\
    \ b <= len) {\n    \t\t\t\tif (!vowels.contains(word(a)) && !vowels.contains(word(b)))\
    \ return word(i).toString\n    \t\t\t}\n    \t\t}\n    \t}\n    \t\"\"", "   \
    \     var index = word.length - 1\n        while (index >= 0) {\n            if\
    \ (\"BCDFGHJKLMNPQRSTVWXYZ\".contains(word(index))) {\n                if (index\
    \ + 1 < word.length) {\n                    var count = 0\n                  \
    \  for (i <- index + 1 until word.length) {\n                        if (\"AEIOU\"\
    .contains(word(i))) {\n                            return word(i).toString\n \
    \                       }\n                        else if (\"BCDFGHJKLMNPQRSTVWXYZ\"\
    .contains(word(i))) {\n                            count += 1\n              \
    \          }\n                    }\n                    if (count == word.length\
    \ - index - 1) return \"\"\n                }\n                else return \"\"\
    \n            }\n            index -= 1\n        }\n        return \"\"", "  \
    \      /**\n          * \u60F3\u6CD5\uFF1A\u5C07\u7D50\u679C\u653E\u5165\u4E00\
    \u500BMap\uFF0C\u7E3D\u4E4B\u5617\u8A66\u6240\u6709\u53EF\u80FD\u6027\n      \
    \    */\n        def splitWord(word : String) : List[String] = {\n           \
    \ if (word.length == 1) List(word.substring(0, 1))\n            else List(word.substring(0,\
    \ 1)) ::: splitWord(word.substring(1))\n        }\n        def isVowel(letter\
    \ : String) : Boolean = {\n            if (letter == \"a\" || letter == \"e\"\
    \ || letter == \"i\" || letter == \"o\" || letter == \"u\") true\n           \
    \ else false\n        }\n        def getCharMap(list : List[String]) : HashMap[Int,\
    \ String] = {\n            val charMap = new HashMap[Int, String]\n          \
    \  for (i <- list.indices) {\n                charMap += (i -> list(i))\n    \
    \        }\n            charMap\n        }\n        def getResultMap(charMap :\
    \ HashMap[Int, String]) : HashMap[Int, String] = {\n            val resultMap\
    \ = new HashMap[Int, String]\n            for (i <- 0 until charMap.size - 2)\
    \ {\n                if (!isVowel(charMap(i)) && isVowel(charMap(i + 1)) && !isVowel(charMap(i\
    \ + 2))) resultMap += (i + 1 -> charMap(i + 1))\n            }\n            resultMap\n\
    \        }\n        def getClosestChar(resultMap : HashMap[Int, String]) : String\
    \ = {\n            val letter = resultMap.maxBy(_._1)._2\n            letter\n\
    \        }\n        val splitedWord = splitWord(word)\n        val charMap = getCharMap(splitedWord)\n\
    \        val resultMap = getResultMap(charMap)\n        if (resultMap.size ==\
    \ 0) \"\"\n        else getClosestChar(resultMap)", "        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val result = new StringBuilder\n   \
    \     val buffer = new StringBuilder\n        var found = false\n        for (i\
    \ <- word.length - 1 to 0 by -1) {\n            if (vowels.contains(word(i).toString))\
    \ {\n                buffer.append(word(i))\n                if (found) {\n  \
    \                  break\n                }\n            } else {\n          \
    \      found = true\n            }\n        }\n        if (buffer.length == 0)\
    \ return \"\"\n        for (i <- 0 until buffer.length) {\n            result.append(buffer(buffer.length\
    \ - 1 - i))\n        }\n        result.toString", "        val vowels = \"aeiouAEIOU\"\
    .toSet\n        for (i <- word.length - 1 to 0 by -1) if (vowels.contains(word(i)))\
    \ {\n            if (i == word.length - 1) return \"\"\n            else if (vowels.contains(word(i\
    \ + 1))) return \"\"\n            else return word(i).toString\n        }\n  \
    \      \"\"", "        val vowels = \"aeiouAEIOU\"\n        if (word.length <\
    \ 3) return \"\"\n        val found = word.split(\"[^aeiouAEIOU]\").filter(x =>\
    \ x.length > 0).sortBy(x => x.length).last\n        val vowel = vowels.find(v\
    \ => found.contains(v))\n        return vowel.getOrElse(\"\")", "        var vowels\
    \ = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var wordC = word.toCharArray.toList\n\
    \        var finalVowel = \"\"\n        while (wordC.length > 0) {\n         \
    \   var first = wordC.head\n            var last = wordC.last\n            var\
    \ firstIsVowel = false\n            var lastIsVowel = false\n            for (vowel\
    \ <- vowels) {\n                if (first.toString == vowel) firstIsVowel = true\n\
    \                if (last.toString == vowel) lastIsVowel = true\n            }\n\
    \            if (firstIsVowel && lastIsVowel) {\n                wordC = wordC.init.tail\n\
    \            } else if (firstIsVowel) {\n                wordC = wordC.tail\n\
    \            } else if (lastIsVowel) {\n                wordC = wordC.init\n \
    \           } else {\n                finalVowel = last.toString\n           \
    \     break\n            }\n        }\n        finalVowel", "        // Fill in\
    \ the code\n        var index = 0\n        var i = 1\n        var right = false\n\
    \        var vowel = \"\"\n        for (i <- 1 to word.length()-1) {\n       \
    \     if (isVowel(word(i)) && isConsonant(word(i-1))) {\n                if (!right)\
    \ {\n                    right = true\n                    index = i\n       \
    \         }\n                else if (right && (word.length() - i) < (word.length()\
    \ - index)) {\n                    index = i\n                }\n            }\n\
    \        }\n        if (right) {\n            vowel = word(index).toString()\n\
    \        }\n        return vowel", "    \tval vowels = List('a', 'e', 'i', 'o',\
    \ 'u')\n    \tval index = (0 to word.length - 1).reverse.find(i => vowels.contains(word(i))\
    \ && (i == word.length - 1 || !vowels.contains(word(i + 1))))\n    \tindex match\
    \ {\n    \t\tcase Some(i) => word(i).toString\n    \t\tcase None => \"\"\n   \
    \ \t}", "        val vowel = \"AEIOU\"\n        val vowel_index = vowel.zipWithIndex.toMap\n\
    \        val consonant = \"BCDFGHJKLMNPQRSTVWXYZ\"\n        val char_list = word.toCharArray.toList\n\
    \        val char_consonant_index = char_list.zipWithIndex.filter(x => consonant.contains(x._1)).map(x\
    \ => x._2)\n        val char_vowel_index = char_list.zipWithIndex.filter(x =>\
    \ vowel.contains(x._1)).map(x => x._2)\n        val max_consonant_index = char_consonant_index.max\n\
    \        val min_consonant_index = char_consonant_index.min\n        val vowel_diff\
    \ = char_vowel_index.map(x => abs(x - max_consonant_index))\n        if (vowel_diff.isEmpty)\
    \ \"\"\n        else vowel(vowel_index(char_list(char_vowel_index(vowel_diff.indexOf(vowel_diff.min)))))\
    \ + \"\"", '        ???', "        val vowels = \"aeiou\"\n        val wordArray\
    \ = word.toCharArray\n        for (i <- wordArray.length - 1 to 0 by -1) {\n \
    \           if (wordArray(i) != ' ') {\n                for (j <- vowels.length\
    \ - 1 to 0 by -1) {\n                    if (vowels(j) == wordArray(i)) {\n  \
    \                      return wordArray(i).toString\n                    }\n \
    \               }\n            }\n        }\n        return \"\"", "        //\
    \ Fill up this function body\n        // 'a' - 'z'\n        // 'A' - 'Z'\n   \
    \     // '0' - '9'\n        val a = 'a'\n        val z = 'z'\n        val A =\
    \ 'A'\n        val Z = 'Z'\n        val zero = '0'\n        val nine = '9'\n \
    \       val vowel = List('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n \
    \       var index = -1\n        for (i <- word.length - 1 to 0 by -1) {\n    \
    \        if (vowel.contains(word(i))) {\n                if (i != word.length\
    \ - 1 && vowel.contains(word(i + 1))) {\n                    index = i + 1\n \
    \               } else if (i != 0 && vowel.contains(word(i - 1))) {\n        \
    \            index = i - 1\n                } else {\n                    index\
    \ = i\n                }\n                break\n            }\n        }\n  \
    \      if (index == -1) \"\" else word(index).toString", "        word.toUpperCase.reverse.foldLeft(\"\
    \")((result, c) => if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ result + c else if (result.isEmpty) \"\" else if (result.head != ' ') c + result\
    \ else result)", '        // Fill-in here', "        // TC: O(n), SC: O(1)\n \
    \       // You can use either an array or a hashset to represent the vowels set.\n\
    \        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var vowelC = -1\n\
    \        val leftC = Stack[Char]()\n        val rightC = Stack[Char]()\n     \
    \   for (i <- word.length - 1 to 0 by -1) {\n            if (vowels.contains(word(i)))\
    \ {\n                vowelC = i\n                break\n            }\n      \
    \      else rightC.push(word(i))\n        }\n        for (i <- 0 until word.length)\
    \ {\n            if (vowels.contains(word(i))) {\n                if (leftC.isEmpty\
    \ && rightC.isEmpty) return \"\"\n                else if (leftC.isEmpty) return\
    \ word(vowelC).toString\n                else if (rightC.isEmpty) return \"\"\n\
    \                else {\n                    if (vowelC - i < i - leftC.length)\
    \ return word(vowelC).toString\n                    else return \"\"\n       \
    \         }\n            }\n            else leftC.push(word(i))\n        }\n\
    \        return \"\"", "        var c1, c2 = 0\n        for (i <- word.length\
    \ - 1 to 0 by -1) {\n            if (Set('a', 'e', 'i', 'o', 'u').contains(word(i)))\
    \ c1 = i\n            else if (c1 != 0) return word(c1).toString\n        }\n\
    \        \"\"", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ consonants = Set('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n        if (vowels.contains(word.last))\
    \ {\n            var count = 0\n            for (i <- word.length - 1 to 0 by\
    \ -1) {\n                if (consonants.contains(word(i))) count += 1\n      \
    \          else if (vowels.contains(word(i))) {\n                    if (count\
    \ >= 2) return word(i).toString\n                    else count = 0\n        \
    \        }\n            }\n        }\n        return \"\"", "        //return\
    \ \"\"\n        if (word.length < 3) return \"\"\n        for (i <- word.length\
    \ - 2 to 0 by -1) {\n            val ch = word(i)\n            if (isVowel(ch))\
    \ {\n                if (isConsonant(word(i + 1))) return String.valueOf(ch)\n\
    \            }\n        }\n        return \"\"", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val wordWithoutVowelsAtEnd = word.reverse.dropWhile(vowels.contains(_)).reverse\n\
    \        val beforeLastVowel = wordWithoutVowelsAtEnd.reverse.dropWhile(!vowels.contains(_)).reverse\n\
    \        val lastConsonant = beforeLastVowel.reverse.dropWhile(vowels.contains(_)).reverse\n\
    \        val closestVowel = beforeLastVowel.drop(lastConsonant.length).drop(1).take(1)\n\
    \        closestVowel", "        // Fill in the code\n        return \"\";", '        ???',
  "        var chars = word.toCharArray\n        if (chars.length <= 1) return \"\"\
    \n        var lastVowel = ' '\n        var lastConsonant = ' '\n        for (i\
    \ <- chars.length - 1 to 0 by -1) {\n            if (isVowel(chars(i))) {\n  \
    \              lastVowel = chars(i)\n                if (lastConsonant != ' ')\
    \ {\n                    return lastVowel.toString\n                }\n      \
    \      } else {\n                lastConsonant = chars(i)\n                if\
    \ (lastVowel != ' ') {\n                    return lastVowel.toString\n      \
    \          }\n            }\n        }\n        return \"\"", "        if (word.length\
    \ == 0) return \"\"\n        val vowels = \"aeiouAEIOU\"\n        val cons = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        val letters = word.toCharArray\n\
    \        var index = -1\n        var vowel = \"\"\n        for (i <- 0 until letters.length\
    \ - 1) {\n            if (cons.contains(letters(i)) && cons.contains(letters(i\
    \ + 1)) && vowels.contains(letters(i + 1))) {\n                if (vowel.length\
    \ == 0) {\n                    vowel = letters(i + 1).toString\n             \
    \       index = i + 1\n                } else {\n                    if (index\
    \ > i + 1) {\n                        vowel = letters(i + 1).toString\n      \
    \                  index = i + 1\n                    }\n                }\n \
    \           }\n        }\n        return vowel", "        /**\n         * Your\
    \ Code Here\n         */\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        val chars = word.toCharArray\n        for (i <- 1 until chars.length\
    \ - 1) {\n            if (vowels.contains(chars(i).toString) && !vowels.contains(chars(i\
    \ - 1).toString) && !vowels.contains(chars(i + 1).toString)) return chars(i).toString\n\
    \        }\n        \"\"", "        var vowelSet = Set('a', 'e', 'i', 'o', 'u')\n\
    \        var nonVowelSet = Set('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n        var vowels =\
    \ word.toCharArray.filter(vowelSet.contains(_))\n        var nonVowels = word.toCharArray.filter(nonVowelSet.contains(_))\n\
    \        var vowelCount = 0\n        var nonVowelCount = 0\n        var distance\
    \ = 0\n        var closestVowel = \"\"\n        if (vowels.length == 0 || nonVowels.length\
    \ == 0) {\n            return \"\"\n        }\n        while (vowelCount < vowels.length\
    \ && nonVowelCount < nonVowels.length) {\n            var currentDistance = nonVowels(nonVowelCount)\
    \ - vowels(vowelCount)\n            if (currentDistance > 0) {\n             \
    \   if (distance == 0 || currentDistance < distance) {\n                    distance\
    \ = currentDistance\n                    closestVowel = vowels(vowelCount).toString\n\
    \                }\n                vowelCount += 1\n            } else {\n  \
    \              nonVowelCount += 1\n            }\n        }\n        return closestVowel",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val a = (1 to word.length).toList.map(i\
    \ => i -> (word(i - 1), i - 1)).filter(p => vowels.contains(p._1._1))\n      \
    \  val b = a.map(p => p._2 -> p._1._2).foldLeft((List[Int](), List[Int]()))((acc,\
    \ cur) => (cur._1 :: acc._1, cur._2 :: acc._2))._1\n        val c = b.map(i =>\
    \ i -> (i - b.head))\n        val d = c.filter(p => p._2 != 0).map(p => p._1 ->\
    \ (p._2 - (if (b.last == p._1) 0 else b(b.indexOf(p._1) + 1) - p._1)))\n     \
    \   d.filter(p => p._2 > 0).sortBy(p => p._2).headOption.map(p => word(p._1)).getOrElse(\"\
    \")", "        // Split the word into characters\n        val charArray = word.toCharArray()\n\
    \        val n = charArray.length\n        val vowelList = List('a', 'e', 'i',\
    \ 'o', 'u')\n        // Find the first letter\n        var i = n - 1\n       \
    \ while (i >= 0 && !vowelList.contains(charArray(i))) {\n            i -= 1\n\
    \        }\n        // If there is no vowels in the word\n        if (i == -1)\
    \ {\n            return \"\"\n        }\n        // Find the last letter\n   \
    \     var j = i - 1\n        while (j >= 0 && vowelList.contains(charArray(j)))\
    \ {\n            j -= 1\n        }\n        // If there is no consonants between\
    \ vowels in the word\n        if (j == -1) {\n            return \"\"\n      \
    \  }\n        // Find the closest vowel that stands between two consonants\n \
    \       val m = j + 1\n        var k = m + 1\n        while (k < n && vowelList.contains(charArray(k)))\
    \ {\n            k += 1\n        }\n        if (k == n) {\n            return\
    \ \"\"\n        }\n        if (abs(k - m) > abs(i - m)) {\n            return\
    \ charArray(i).toString\n        } else {\n            return charArray(k).toString\n\
    \        }"]
stop_tokens:
- "\n    }\n"
