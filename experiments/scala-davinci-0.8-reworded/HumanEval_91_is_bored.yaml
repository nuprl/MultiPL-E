name: HumanEval_91_is_bored
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You'll be given a string of words, and your task is to count the number\n\
  \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
  \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    //\
  \ >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is\
  \ blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
  \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n  \
  \  assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) ==\
  \ (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill\
  \ It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        var n = 0l\n        for (i <- 0 until S.length - 1) {\n   \
    \         if (S(i) == 'I' && (S(i+1) == ' ' || S(i+1) == '.' || S(i+1) == '?'\
    \ || S(i+1) == '!')) {\n                n += 1\n            }\n        }\n   \
    \     return n", "\t\tvar boredoms = 0l\n\t\tfor (sentence <- S.split(\"\"\"[.?!]\"\
    \"\")) {\n\t\t\tif (sentence.trim.startsWith(\"I\")) boredoms += 1\n\t\t}\n\t\t\
    boredoms", "        val boredoms = S.split(\"[\\\\.\\\\?!]\").filter(_.startsWith(\"\
    I\")).size\n        boredoms", "        val words = S.split(\"[.?!]\")\n     \
    \   words.filter { x => x.split(\" \")(0) == \"I\" }.size", "        def iter(arr\
    \ : Array[String], i : Int, acc : Long) : Long = {\n            if (i >= arr.length)\
    \ acc\n            else {\n                if (arr(i).startsWith(\"I\")) iter(arr,\
    \ i + 1, acc + 1)\n                else iter(arr, i + 1, acc)\n            }\n\
    \        }\n        val arr = S.split(\"\\\\.\")\n        iter(arr, 0, 0)", " \
    \       val tokens = S.split(\"[\\\\.!?]\")\n        tokens.count(_.startsWith(\"\
    I\"))", "        val s = S.split(\"\"\"[.?!]\"\"\").toList\n        s.filter(i\
    \ => i.matches(\"\"\"\\s*I.*\"\"\")).size", "    \tval sentences = S.split(\"\\\
    \\.\")\n    \tsentences.filter(x => x.trim().startsWith(\"I\")).size", '        S.split("[.!?]").map(_.split("
    ")).filter(_.length > 0).map(_(0)).count(_ == "I")', '        S.split("\\.|\\?|\\!").filter(s
    => s.matches("^\\s*I.*")).size', "        S.count(_ == 'I')", '        S.split("[.?!]").filter(s
    => s.trim().startsWith("I")).size', "        var boredoms = 0\n        var sentences\
    \ = S.split(\"\\\\.|\\\\?|\\\\!\")\n        for (sentence <- sentences) {\n  \
    \          if (sentence.trim().startsWith(\"I\")) boredoms += 1\n        }\n \
    \       boredoms", "        val end_chars = Set('.', '?', '!')\n        val start_words\
    \ = Set(\"I\")\n        val result = new ListBuffer[Long]\n        var counter\
    \ = 0l\n        for (c <- S) {\n            c match {\n                case 'I'\
    \ => {\n                    counter += 1\n                }\n                case\
    \ s if end_chars.contains(s) => {\n                    result += counter\n   \
    \                 counter = 0\n                }\n                case _ => {\n\
    \                }\n            }\n        }\n        result.foldLeft(0l)(_ +\
    \ _)", "        val sentences = S.split(\"\"\"[.!?]\"\"\").filter(x => x.trim.length\
    \ > 0)\n        sentences.filter(x => x.trim.split(\"\"\"\\s+\"\"\")(0) == \"\
    I\").length", "        // Write your code here\n        var boredoms = 0\n   \
    \     for (substr <- S.split(\"\\\\.|\\\\?|\\\\!\")) {\n            if (substr.split(\"\
    \ \")(0) == \"I\") {\n                boredoms += 1\n            }\n        }\n\
    \        boredoms", "        val lines = S.split(\"[.?!]\")\n        var result\
    \ = 0l\n        for (line <- lines) {\n            val splitLine = line.split(\"\
    \ \")\n            if (splitLine.length > 0 && splitLine(0) == \"I\") result +=\
    \ 1\n        }\n        result", '        // Your code here', '        S.split("[.?!]").filter(s
    => s.trim.startsWith("I")).size', "        val a = S.split(\"[.?!]\")\n      \
    \  a.filter(s => s.trim.startsWith(\"I\")).size", "        val arr = S.split(\"\
    [.?!]\")\n        var boredoms = 0l\n        for (a <- arr) {\n            if\
    \ (a.startsWith(\"I\")) {\n                boredoms += 1\n            }\n    \
    \    }\n        boredoms", "      val allSentences = S.split(\"\\\\.|\\\\?|\\\\\
    !\")\n      val firstWords = allSentences.map(s => if (s == \"\") \"?\" else s.split(\"\
    \ \")(0))\n      firstWords.filter(w => w == \"I\").length", '        // Write
    code here', "        var t = 0l\n        var i = 0\n        var k = false\n  \
    \      for (c <- S) {\n            if (c == 'I') {\n                k = true\n\
    \            } else if (c == '.' || c == '?' || c == '!') {\n                if\
    \ (k) {\n                    t += 1\n                    k = false\n         \
    \       }\n            }\n        }\n        return t", '        return S.split("[.?!]").filter(_.startsWith("I")).length',
  "        var count = 0\n        for (i <- 0 until S.length) {\n            if (S(i)\
    \ == 'I') {\n                count += 1\n            }\n        }\n        count",
  "        // Split on \".\" \"?\" \"!\"\n        val sentences = S.split(\"\"\"[.?!]\"\
    \"\")\n        // Filter out empty strings\n        val v = sentences.filter(_.length\
    \ > 0)\n        // Count the sentences that start with \"I\"\n        v.filter(_.startsWith(\"\
    I\")).length", "        val lines = S.split('.', '?', '!')\n        lines.count(x\
    \ => x.trim.startsWith(\"I\"))", "        val s = S.split('.')\n        var b\
    \ = 0\n        for (st <- s) {\n            val t = st.split('?')\n          \
    \  for (st <- t) {\n                val u = st.split('!')\n                for\
    \ (st <- u) {\n                    val v = st.split(' ')\n                   \
    \ for (i <- 0 until v.length) {\n                        if (v(i) == \"I\") {\n\
    \                            b += 1\n                            i += v.length\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        b", "      var count = 0\n      val words = S.split(\"\
    \\\\.|\\\\?|\\\\!\")\n      for (w <- words) {\n        if (w.split(\" \")(0)\
    \ == \"I\") count += 1\n      }\n      count", '        return S.split("\\.|\\?|\\!").map(a
    => if (a.startsWith("I")) 1 else 0).reduce(_ + _)', "        val s = S.split(\"\
    [.?!]\")\n        s.filter(x => x.split(\" \")(0) == \"I\").length", "       \
    \ var bored = 0l\n        for (i <- 0 until S.length) {\n            if (S(i)\
    \ == 'I') {\n                bored += 1\n            }\n        }\n        bored",
  "        var boredom = 0l\n        var previousChar = ' '\n        for (c <- S)\
    \ {\n            if (previousChar == 'I' && c == ' ') {\n                boredom\
    \ += 1\n            }\n            previousChar = c\n        }\n        return\
    \ boredom", "        // S.toCharArray.foreach { c => println(c) }\n        var\
    \ boredoms = 0\n        var open = 0\n        S.toCharArray.foreach {\n      \
    \      c => {\n                if (c == 'I') {\n                    open += 1\n\
    \                } else if (c == '.' || c == '?' || c == '!') {\n            \
    \        boredoms += open\n                    open = 0\n                }\n \
    \           }\n        }\n        boredoms", "        var sum = 0\n        for\
    \ (c <- S.split('.', '?', '!')) {\n            if (c.trim.startsWith(\"I\")) sum\
    \ += 1\n        }\n        sum", "        var count = 0l\n        var isI = false\n\
    \        S.foreach(c => if(isI) {count += 1; isI = false} else if(c == 'I') isI\
    \ = true)\n        count", '        S.split("""[\.\?\!]""").filter(_.split("""[\s]+""")(0)
    == "I").length', "        var n = 0\n        for (s <- S.split(\"[!?.]\")) {\n\
    \            if (s.length > 0 && s(0) == 'I') n += 1\n        }\n        n", " \
    \       val words = S.split(\"\\\\s+\")\n        var i = 0\n        var boredoms\
    \ = 0\n        while (i < words.length) {\n            if (words(i) == \"I\")\
    \ {\n                boredoms += 1\n            }\n            i += 1\n      \
    \  }\n        boredoms", "        val sentences = S.split(\"[.?!]\")\n       \
    \ val l = sentences.filter(_.trim.startsWith(\"I\"))\n        return l.length.toLong",
  "        val s = S.split(\"\"\"\\?|!|\\.\"\"\")\n        var c = 0l\n        for\
    \ (i <- 0 until s.length) if (s(i).trim().startsWith(\"I\")) c += 1\n        c",
  '        return S.split("[.?!]").count(_.split("\\s+")(0) == "I")', "        val\
    \ count = S.split(\"\\\\.|\\\\?|\\\\!\").filter { x => x.startsWith(\"I\") }.size\n\
    \        return count", "        var words = S.split(\" |\\\\.|\\\\?|!\")\n  \
    \      var i = 0;\n        for (i <- 0 until words.length) {\n            if (words(i)\
    \ == \"I\") {\n                return 1;\n            }\n        }\n        return\
    \ 0;", "        val splits = S.split('.').flatMap(_.split('?')).flatMap(_.split('!'))\n\
    \        val words = splits.map(_.split(' ').toList)\n        var count = 0\n\
    \        for (w <- words) {\n            if (w.head == \"I\") {\n            \
    \    count += 1\n            }\n        }\n        count", "        (S + \" \"\
    ).split(\"[?!.]\")\n                 .map(_.trim.split(\" \"))\n             \
    \    .filter(_.length > 0)\n                 .filter(_(0) == \"I\")\n        \
    \         .length", "        var count = 0l\n        for (s <- S.split(\"\\\\\
    .|\\\\?|\\\\!\")) {\n            val trimmed = s.trim\n            if (trimmed.length\
    \ > 0 && trimmed.charAt(0) == 'I') count += 1\n        }\n        count", '        S.split("\\.|\\?|\\!").map(_.trim).filter(_.startsWith("I")).size',
  "        val sentences = S.split(\"[.?!]\")\n        var boredoms = 0l\n       \
    \ for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                boredoms += 1\n            }\n        }\n        boredoms",
  "        val str = S.split(\"[.?!]\")\n        var bored = 0\n        for (s <-\
    \ str) {\n            if (s.startsWith(\"I\")) {\n                bored += 1\n\
    \            }\n        }\n        bored", "        val s_array = S.split(\"(\\\
    \\?|\\\\.|!)\")\n        var ret : Long = 0\n        s_array.foreach(s => if (s.startsWith(\"\
    I \")) ret += 1)\n        ret", "        val sentences = S.split(\"[.?!]\")\n\
    \        var counter = 0\n        for (sentence <- sentences) {\n            val\
    \ words = sentence.split(\"\\\\s+\")\n            if (words.head == \"I\") counter\
    \ += 1\n        }\n        counter", "        val str = S.toLowerCase.replaceAll(\"\
    [\\\\.\\\\?\\\\!]\", \" \")\n        str.split(\" \").filter(_ == \"i\").length",
  '        return S.split("[!.?]").map(_.trim).filter(_.length != 0).filter(_.substring(0,1)
    == "I").length.toLong', "        val s = S.split(\"[!?.]\")\n        val ret =\
    \ s.map(x => x.trim.startsWith(\"I\")).filter(x => x).size\n        return ret",
  "        val words = S.split(\" \").filter(x => x.length > 0)\n        var count\
    \ = 0l\n        var i = 0\n        while (i < words.length) {\n            if\
    \ (words(i) == \"I\") {\n                count += 1\n                while (i\
    \ < words.length && words(i) != \".\" && words(i) != \"?\" && words(i) != \"!\"\
    ) i += 1\n            }\n            i += 1\n        }\n        count", "    \
    \    // Split string into sentences\n        val sentences = S.split(\"[?!.]\"\
    )\n        // Map each sentence to a boolean where true indicates that the sentence\n\
    \        // has the word 'I'\n        val sentencesWithI = sentences.map(s =>\
    \ s.trim.startsWith(\"I\"))\n        // Count the number of sentences that have\
    \ the word 'I'\n        sentencesWithI.count(b => b)", "        val splitted =\
    \ S.split(\"[!.?]\")\n        var count = 0\n        for (s <- splitted) {\n \
    \           if (s.startsWith(\"I\")) {\n                count += 1\n         \
    \   }\n        }\n        count", "    \tval sentences = (S + \" \").split(\"\
    [.?!]\")\n    \tsentences.map {_.trim}.filter {_.startsWith(\"I\")}.size", " \
    \       val sentences = S.split(\"[.?!]\")\n        var boredoms = 0\n       \
    \ for (sentence <- sentences) {\n            if (sentence.startsWith(\"I\")) boredoms\
    \ += 1\n        }\n        boredoms", "        val S2 = S.replaceAll(\"\"\"[\\\
    ?\\!\\.]\"\"\", \" \")\n        val S3 = S2.split(\" \")\n        var count =\
    \ 0l\n        for (word <- S3) if (word == \"I\") count += 1\n        count",
  "      val r = S.split(\"[?!.]\").map( _.trim() ).filter(_.startsWith(\"I\"))\n\
    \      println(r.mkString(\" \"))\n      return r.length.toLong", "        var\
    \ count = 0l\n        for (i <- 0 until S.length) {\n            if (S(i) == 'I')\
    \ {\n                for (j <- (i+1) until S.length) {\n                    if\
    \ (S(j) == '.' || S(j) == '?' || S(j) == '!') {\n                        count\
    \ += 1\n                        i = j\n                        break\n       \
    \             }\n                }\n            }\n        }\n        return count",
  "        val sentencePattern = \"[.?!]\".r\n        val capitalIPattern = \"\\\\\
    bI \".r\n        val sentences = sentencePattern.split(S)\n        val boredoms\
    \ = sentences.map(sentence => {\n            val capitalIs = capitalIPattern.findAllIn(sentence)\n\
    \            capitalIs.length\n        })\n        boredoms.sum", "        val\
    \ words = S.split(\"\\\\s+\").filter(_.length > 0)\n        var boredoms = 0\n\
    \        for (i <- 0 until words.length) {\n            if (words(i).equals(\"\
    I\")) {\n                var j = i + 1\n                while (j < words.length\
    \ && !words(j).endsWith(\".\") && !words(j).endsWith(\"?\") && !words(j).endsWith(\"\
    !\")) {\n                    j += 1\n                }\n                if (j\
    \ < words.length) {\n                    boredoms += 1\n                }\n  \
    \          }\n        }\n        boredoms", "        val arr = S.split(\"\\\\\
    .|\\\\?|\\\\!\")\n        return arr.filter(x => x.startsWith(\"I\")).length",
  '        return S.split("[.?!]").filter(x => x.startsWith("I")).length.toLong',
  "        val ss = S.split(\"[.?!]\")\n        var boredoms = 0l\n        for (s\
    \ <- ss) {\n            if (s.startsWith(\"I\")) {\n                boredoms +=\
    \ 1\n            }\n        }\n        boredoms", "        var start_with_i =\
    \ false\n        for (i <- S) {\n            if (i == 'I') {\n               \
    \ start_with_i = true\n            }\n            if (i == '.' || i == '?' ||\
    \ i == '!') {\n                start_with_i = false\n            }\n        }\n\
    \        if (start_with_i) 1 else 0", '        S.split("\\.|\\?|\\!").map(_.trim()).filter(_.split("
    ")(0) == "I").size', "        var sentences = S.split(\"[\\\\!\\\\.\\\\?]+\")\n\
    \        var count = 0\n        for (sentence <- sentences) {\n            val\
    \ words = sentence.split(\" \")\n            if (words.size > 0 && words(0) ==\
    \ \"I\") count += 1\n        }\n        count", "        var b = 0l\n        var\
    \ q = 0\n        for (c <- S) {\n            if (c == '.' || c == '?' || c ==\
    \ '!') {\n                if (q == 1) {\n                    b += 1\n        \
    \        }\n                q = 0\n            } else if (c == 'I') {\n      \
    \          q = 1\n            }\n        }\n        return b", "      var i =\
    \ 0\n      var count = 0\n      var flag = false\n      while (i < S.length) {\n\
    \        if (S(i) == 'I') flag = true\n        if (S(i) == '.' || S(i) == '?'\
    \ || S(i) == '!') {\n          if (flag) count += 1\n          flag = false\n\
    \        }\n        i += 1\n      }\n      return count", "      var count = 0\n\
    \      S.split(\"\\\\.\").filter(_ != \"\").map(_.trim).foreach(x => {\n     \
    \     val words = x.split(\" \")\n          if (words(0) == \"I\") count += 1\n\
    \      })\n      count", "        var c = 0l\n        var a = true\n        var\
    \ b = false\n        for (i <- 0 until S.length) {\n            if (S(i) == 'I')\
    \ {\n                a = false\n                b = true\n            }\n    \
    \        if (b && (S(i) == '.' || S(i) == '?' || S(i) == '!')) {\n           \
    \     a = true\n                b = false\n            }\n            if (a &&\
    \ (S(i) == '.' || S(i) == '?' || S(i) == '!')) {\n                c += 1\n   \
    \             a = true\n                b = false\n            }\n        }\n\
    \        c", "        return S.split(\"\\\\.|\\\\?|\\\\!\").filter(s => s.length\
    \ > 0 && s.charAt(0) == 'I').length.toLong", '        S.split("\\?|\\.|\\!").count(_.startsWith("I"))',
  "        var boredoms = 0\n        for (i <- 0 until S.length) {\n            if\
    \ (S(i) == 'I') {\n                var next = S(i + 1)\n                if (!(next\
    \ == ' ' || next == '\\n' || next == '.' || next == '?' || next == '!'))\n   \
    \                 return 0\n                boredoms += 1\n            }\n   \
    \     }\n        boredoms", '        S.split("[\\.\\?!]").filter(_.startsWith("I")).size',
  "        val head = \"I \"\n        val tail = \"[.?!]\"\n        val regex = \"\
    (\" + head + \"[^\" + tail + \"]*)\" + tail\n        val pattern = regex.r\n \
    \       val matches = pattern.findAllIn(S)\n        matches.size", "        var\
    \ count = 0l\n        for (i <- S.indices) {\n            if (S(i) == 'I') {\n\
    \                val k = S.indexWhere(x => {x == '.' || x == '?' || x == '!'},\
    \ i)\n                if (k != -1) count += 1\n            }\n        }\n    \
    \    count", '        S.split("[!.?]").filter(x => x.trim().startsWith("I")).size',
  "        val count = ArrayBuffer[String]()\n        var index = 0\n        while\
    \ (index < S.length()) {\n            var prev = index\n            while (index\
    \ < S.length() && S(index) != '.' && S(index) != '?' && S(index) != '!') index\
    \ += 1\n            val s = S.substring(prev, index)\n            if (s.split(\"\
    \ \")(0) == \"I\") count += s\n            if (index < S.length()) index += 1\n\
    \        }\n        count.length.toLong", "        var i = 0\n        var boring\
    \ = 0\n        var done = false\n        while (!done) {\n            if (S(i)\
    \ == 'I') boring += 1\n            if (S(i) == '.' || S(i) == '?' || S(i) == '!')\
    \ done = true\n            i += 1\n        }\n        boring", "        var count\
    \ = 0l\n        for (i <- 0 until S.length) {\n            if (S(i) == 'I') {\n\
    \                count += 1\n            }\n        }\n        return count",
  '        S.split("[.?!]").filter(s => s.trim.startsWith("I")).size', '        S.split("""[\.\?\!]""").map(_.trim).map(_.toUpperCase).filter(_.startsWith("I")).size',
  "        var ret = 0l\n        var i = 0\n        while (i < S.length) {\n     \
    \       if (S(i) == 'I') {\n                var j = i\n                while (j\
    \ < S.length && S(j) != '.' && S(j) != '?' && S(j) != '!') {\n               \
    \     j += 1\n                }\n                ret += 1\n                i =\
    \ j\n            }\n            i += 1\n        }\n        return ret", "    \
    \    val sentence = S.split(\"[.?!]\")\n        var boredom = 0\n        for (s\
    \ <- sentence) {\n            if (s.trim.split(\" \")(0) == \"I\") {\n       \
    \         boredom += 1\n            }\n        }\n        return boredom", " \
    \     val boreds = S.split(\"[.?!]\").filter(_.startsWith(\"I\"))\n      boreds.length",
  "        val words = S.split(\"\\\\.|\\\\?|\\\\!\")\n        words.filter(_.startsWith(\"\
    I\")).size", '        return S.split("[!?.]").filter(s => s.startsWith("I")).length.toLong',
  "    \tvar i = 0\n    \tvar boredoms = 0\n    \twhile (i < S.length()) {\n    \t\
    \tif (S(i) == 'I') {\n    \t\t\tboredoms += 1\n    \t\t\twhile (i < S.length()\
    \ && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n    \t\t}\n    \t\telse\
    \ i += 1\n    \t}\n    \treturn boredoms", '        S.split("[.!?]").filter(_.trim.startsWith("I")).size',
  "        var boredoms = 0l\n        var sentence = new ArrayBuffer[String]\n   \
    \     for (i <- 0 until S.length) {\n            val c = S(i)\n            if\
    \ (c == '.' || c == '?' || c == '!') {\n                if (sentence.length >\
    \ 0 && sentence(0) == \"I\") boredoms += 1\n                sentence.clear\n \
    \           } else if (c == ' ') {\n                if (sentence.length > 0) sentence\
    \ += \" \"\n            } else {\n                sentence += c.toString\n   \
    \         }\n        }\n        boredoms", '        S.toLowerCase.split("[.?!]").filter(word
    => word.matches("^[\\s]*i.*")).length', "        val pattern = \"I\".r\n     \
    \   val pattern2 = \"[a-zA-Z]*\".r\n        pattern.findAllIn(S).length", '        S.split("\\.|\\?|\\!").map(_.split("
    ")).filter(_.head == "I").size', "        val delim = List('.', '?', '!')\n  \
    \      val sentences = S.split(delim.mkString(\"\\\\|\")).filter(x => x.length\
    \ > 0)\n        return sentences.filter(x => x.startsWith(\"I\")).length.toLong",
  "        var bored = 0\n        for (s <- S.split(\"\\\\.|\\\\?|\\\\!\")) {\n  \
    \          if (s.startsWith(\"I\")) bored += 1\n        }\n        bored", '        S.split("[!?.]").map(_.trim).filter(_.startsWith("I")).size',
  "        val sentence = S.split('.').flatMap(_.split('?')).flatMap(_.split('!'))\n\
    \        sentence.count(_.startsWith(\"I\"))", "    \tval sentences = S.split(\"\
    [.?!]\")\n    \tvar boredomCount = 0l\n    \tsentences.foreach(s => if (s.startsWith(\"\
    I\")) boredomCount += 1)\n    \tboredomCount", '        S.split("\\.|\\?|\\!").filter(_.trim.startsWith("I")).size',
  '        S.split("[?!.]").filter(_.startsWith("I")).size', "        var c : Long\
    \ = 0\n        for (s <- S.split(\"[!?.]\")) {\n            if (s.startsWith(\"\
    I\")) c += 1\n        }\n        return c", "        // Fill in your code here\n\
    \        0l", "        // Fill in your code here\n        -1l", "        var result\
    \ = 0L\n        var count = 0\n        for (c <- S) {\n            if (c == 'I')\
    \ {\n                count += 1\n            } else if (c == '.' || c == '?' ||\
    \ c == '!') {\n                result += count\n                count = 0\n  \
    \          }\n        }\n        result", "      val words = S.split(\" \")\n\
    \      var count = 0l\n      var index = 0\n      while (index < words.length)\
    \ {\n        val word = words(index)\n        if (word == \"I\") {\n         \
    \ val i = index\n          var count1 = 0\n          while (index < words.length\
    \ && words(index) != \".\") {\n            count1 += 1\n            index += 1\n\
    \          }\n          if (count1 == 1) count += 1\n        }\n        else {\n\
    \          index += 1\n        }\n      }\n      count", '        return S.split("[.!?]").filter(s
    => s.trim().startsWith("I")).length.toLong', "        val split = S.split(\"[.?!]\"\
    )\n        var result = 0l\n        for (s <- split) {\n            if (s.startsWith(\"\
    I\")) result += 1\n        }\n        result", "        var count = 0\n      \
    \  for (w <- S.split(\" |\\\\.|\\\\?|\\\\!\")) {\n            if (w.equals(\"\
    I\")) {\n                count += 1\n            }\n        }\n        return\
    \ count", '        S.split("[.?!]").filter(_.startsWith("I")).size', '        S.split("\\.|\\?|\\!").map(_.trim).filter(_.startsWith("I")).size',
  "        val r = \"\"\"(?m)^\\s*(I).*\"\"\".r\n        val count = S.split(\"[.!?]\"\
    ).count(s => r.findFirstIn(s).isDefined)\n        count.toLong", "        val\
    \ sentence = S.split(\"\"\"[.!?]\"\"\").dropRight(1)\n        sentence.filter(x\
    \ => x.charAt(0) == 'I').length", '        S.split("[.?!]").count(_.trim.startsWith("I"))',
  "        var T = S\n        val r = \"\\\\.|\\\\?|\\\\!\".r\n        var count =\
    \ 0\n        var matchIndex = 0\n        for (m <- r.findAllMatchIn(T)) {\n  \
    \          if (T.substring(matchIndex, m.start).trim.split(\" \")(0) == \"I\"\
    ) {\n                count += 1\n            }\n            matchIndex = m.end\n\
    \        }\n        count", "        val strArray = S.split(\"[.?!]\")\n     \
    \   var count = 0\n        for (str <- strArray) {\n            if (str.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val array = S.split(\"[!.?]\"\
    )\n        var result = 0\n        for (i <- 0 until array.length) {\n       \
    \     if (array(i).startsWith(\"I\")) {\n                result += 1\n       \
    \     }\n        }\n        result", "    \tS.split(\"\"\"\\!|\\?|\\.\"\"\").filter(_.startsWith(\"\
    I\")).size", "        // *** YOUR CODE HERE ***\n        val startWithI = S.split(\"\
    [.?!]\").filter(_.startsWith(\"I\")).size\n        startWithI.toLong", '        (S.indexOf("
    I ") != -1).toInt.toLong', "        // Split your string into sentences\n    \
    \    // Filter for sentences that start with \"I\"\n        // Count the number\
    \ of sentences that return true\n        S.split(\"\"\"[.?!]\"\"\").toList.filter(_.indexOf(\"\
    I\") == 0).length", "        var boredoms = 0\n        var previous_word = \"\"\
    \n        for (word <- S.split(\" \")) {\n            if (previous_word == \"\
    I\") boredoms += 1\n            previous_word = word\n        }\n        return\
    \ boredoms", '        return S.split("[.!?]").filter(x => x.split(" ")(0) == "I").length',
  '        S.split("\\.|\\?|\\!").filter(s => s.startsWith("I")).size', "        val\
    \ reg = \"I\".r\n        reg.findAllIn(S).length", "        val ws = S.split(\"\
    [\\\\.\\\\?!]\").filter(x => x.length() > 0)\n        ws.filter(x => x.trim().startsWith(\"\
    I\")).length.toLong", "        // A utility function to split a sentence by .,\
    \ ? or !\n        def splitSentence(s : String) : List[String] = {\n         \
    \   val r = new scala.util.matching.Regex(\"\"\"[!?.]\"\"\")\n            r.split(s).toList\n\
    \        }\n        // The boring function. Counts sentences starting with \"\
    I\"\n        def boring(sentences : List[String]) : Long = {\n            val\
    \ r = new scala.util.matching.Regex(\"\"\"^\\s*I\\s+\"\"\")\n            sentences.filter(s\
    \ => r.findFirstIn(s) != None).size\n        }\n        boring(splitSentence(S))",
  "        if (S.length == 0) return 0\n        val parts = S.split(\"[.?!]\")\n \
    \       var count = 0\n        for (part <- parts) {\n            if (part.length\
    \ == 0) continue\n            if (part.trim().startsWith(\"I\")) count += 1\n\
    \        }\n        return count", "        val regex = \"[A-Za-z ]+\\\\.\".r\n\
    \        val sentences = regex.findAllIn(S)\n        var count = 0l\n        for\
    \ (sentence <- sentences) {\n            if (sentence.charAt(0) == 'I') {\n  \
    \              count += 1\n            }\n        }\n        count", '        S.split("""[\!\.\?]""").count(_.startsWith("I"))',
  "        val words = S.split(\"[.?!]\")\n        //val words = S.split('.')\n  \
    \      var result = 0l\n        for (word <- words) {\n            // ' '* or\
    \ split(' ')\n            if (word.startsWith(\"I\")) result += 1\n        }\n\
    \        result", "        var num = 0\n        var p = 0\n        while (p <\
    \ S.length) {\n            if (S(p) == 'I') {\n                while (p < S.length\
    \ && S(p) != '.' && S(p) != '?' && S(p) != '!') {\n                    p += 1\n\
    \                }\n                num += 1\n            }\n            else\
    \ p += 1\n        }\n        num", "        var n = 0l\n        for (c <- S.toCharArray)\
    \ {\n            if (c == '.' || c == '?' || c == '!') {\n                n +=\
    \ 1\n            }\n        }\n        return n", "        var i = 0\n       \
    \ var boredoms = 0\n        var sentence = \"\"\n        for (c <- S) {\n    \
    \        if (c == '.' || c == '?' || c == '!') {\n                sentence = sentence.trim()\n\
    \                if (sentence.length > 1 && sentence.substring(0, 2) == \"I \"\
    ) {\n                    boredoms += 1\n                }\n                sentence\
    \ = \"\"\n            } else {\n                sentence += c\n            }\n\
    \        }\n        return boredoms", '        return S.split("\\.|\\?|\\!").map(_.split("
    ")).count(x => x.head == "I")', "        val words = S.split(\"[.?!]\")\n    \
    \    return words.filter(x => x.startsWith(\"I\")).length", '        S.split("\\.").map(x
    => if (x.startsWith("I")) 1 else 0).reduceLeft(_ + _)', "        val words = S.split(\"\
    \"\"[\\.\\?\\!]\"\"\")\n        var boredoms = 0l\n        for (word <- words)\
    \ {\n            if (word.length() > 0 && word.charAt(0) == 'I') boredoms += 1\n\
    \        }\n        boredoms", "        var res = 0l\n        val split = S.split(\"\
    \\\\.|\\\\?|\\\\!\")\n        for (x <- split) {\n            val t = x.trim()\n\
    \            if (t.length() > 0 && t.charAt(0) == 'I') {\n                res\
    \ += 1\n            }\n        }\n        res", '        S.split("[?!.]").map(x
    => x.trim.split(" ")).filter(x => x.length > 0 && x(0) == "I").length', "    \
    \    var count = 0l\n        var i = 0\n        while (i < S.length) {\n     \
    \       if (S(i) == 'I') {\n                if (i == 0 || \"?!.\".contains(S(i\
    \ - 1))) {\n                    count += 1\n                }\n            }\n\
    \            i += 1\n        }\n        count", "        val s = S.split(\"[.?!]\"\
    )\n        val v = for (i <- s if i.startsWith(\"I\")) yield i\n        v.length",
  "        var res = 0l\n        for (i <- 0 until S.length) {\n            if (S(i)\
    \ == 'I') {\n                res += 1\n            }\n        }\n        return\
    \ res", "        val lines = S.split(\"[.?!]\")\n        // lines.map(println)\n\
    \        val bored = lines.filter(x => x.trim.startsWith(\"I\"))\n        // bored.map(println)\n\
    \        bored.length.toLong", "        val s = S.toUpperCase\n        val regex\
    \ = \"[!.?]\".r\n        val sentences = regex.split(s)\n        sentences.map(x\
    \ => {\n          val words = x.split(\" \")\n          if (words.length > 0 &&\
    \ words(0) == \"I\") 1 else 0\n        }).sum", "        var boredoms = 0\n  \
    \      var isSentenceStart = true\n        for (c <- S) {\n            if (isSentenceStart\
    \ && c == 'I') boredoms += 1\n            isSentenceStart = c == '.' || c == '?'\
    \ || c == '!'\n        }\n        boredoms", '        S.split("[?!.]").filter(_.trim().startsWith("I")).size',
  '        return S.replaceAll("[^I.]", "").replaceAll("[^I].*", "").size;', "   \
    \     val words = S.split(\" \")\n        var b = 0\n        for (word <- words)\
    \ {\n            if (word == \"I\") b += 1\n        }\n        b", "        return\
    \ S.split(\"[.?!]\").filter(s => s.length() > 0 && s.charAt(0) == 'I').length.toLong",
  "        def isBoredHelper(s : List[Char], acc : Long) : Long = {\n            if\
    \ (s.isEmpty) acc\n            else if (s.head == 'I') isBoredHelper(s.tail, acc\
    \ + 1)\n            else isBoredHelper(s.tail, acc)\n        }\n        isBoredHelper(S.toList,\
    \ 0)", "        // IMPLEMENT ME\n        return -1;", "        def f(acc : Long,\
    \ ls : List[String]) : Long = {\n            ls match {\n                case\
    \ Nil => acc\n                case h :: t => if (h.startsWith(\"I\")) f(acc +\
    \ 1, t) else f(acc, t)\n            }\n        }\n        f(0, S.split(\"[.!?]\"\
    ).toList)", "\t\tval str = S.replaceAll(\"  \",\" \").split(\"[.?!]\")\n\t\tval\
    \ boredoms = str.filter(x => x.startsWith(\" I \"))\n\t\tboredoms.length", " \
    \       var k = 0\n        for (i <- 0 until S.length) {\n            if (S(i)\
    \ == 'I') {\n                var j = i + 1\n                while (j < S.length\
    \ && S(j) != '.' && S(j) != '?' && S(j) != '!') j += 1\n                if (j\
    \ == S.length || S(j) == '.') k += 1\n            }\n        }\n        k", '        return
    S.split("[.?!]").map(_.trim()).filter(_.startsWith("I")).length', "        val\
    \ words = S.split(\" \")\n        var boredoms = 0l\n        for (i <- 0 until\
    \ words.length) {\n            if (words(i) == \"I\") boredoms += 1\n        }\n\
    \        boredoms", '      S.split("[.?!]").filter(_.trim.startsWith("I")).size',
  "        // Your code here\n        var counter = 0l\n        var arr = S.split(\"\
    \\\\.\")\n        var arr1 = S.split(\"\\\\?\")\n        var arr2 = S.split(\"\
    \\\\!\")\n        arr = arr.concat(arr1)\n        arr = arr.concat(arr2)\n   \
    \     for (i <- 0 until arr.length) {\n            if (arr(i).startsWith(\"I \"\
    )) counter += 1\n        }\n        return counter", '      S.split("""[.!?]""").filter(s
    => s.indexOf("I") == 0).length', '        (S.split("\\.|\\?|\\!").map(s => s.trim)).filter(s
    => s != "").filter(s => s.startsWith("I")).size', "        var boredoms = 0l\n\
    \        for (sentence <- S.split(\"[.?!]\")) {\n            if (sentence.trim.startsWith(\"\
    I\")) {\n                boredoms += 1\n            }\n        }\n        boredoms",
  "        var boredoms = 0l\n        val array = S.split(\"[.?!]\")\n        for\
    \ (a <- array) {\n            if (a.startsWith(\"I\")) boredoms += 1\n       \
    \ }\n        boredoms", '        return S.split("(?<=[.?!])").count(x => x.trim().startsWith("I"))',
  '        S.split("[.?!]").count { _.startsWith("I") }', '        S.split("""[\.\?!]""").filter(s
    => s.trim().startsWith("I")).size', "        val count = S.split(\"\\\\.\").count(x\
    \ => x.charAt(0) == 'I')\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.count(s => s.trim.startsWith(\"I\"))", "        //\
    \ Fill in the code here.\n        val list : Array[String] = S.split(\"[.!?]\"\
    )\n        val list2 : Array[String] = list.filter(element => element != \"\"\
    )\n        val list3 : Array[String] = list2.filter(element => element.startsWith(\"\
    I\"))\n        list3.length.toLong", "        val sentences = S.split(\"[.?!]\"\
    )\n        sentences.map(sentence => sentence.trim.split(\" \")).filter(x => x.length\
    \ > 0 && x(0) == \"I\").length", '      S.split("[.?!]").count(_.startsWith("I"))',
  "        var boredoms = 0l\n        var isFirst = true\n        for (sentence <-\
    \ S.split(\"[.?!]\")) {\n            if (isFirst) {\n                if (sentence.trim().startsWith(\"\
    I\")) boredoms += 1\n                isFirst = false\n            } else {\n \
    \               if (sentence.trim().startsWith(\"I\")) boredoms += 1\n       \
    \     }\n        }\n        boredoms", "        val sentences = S.split(\"\\\\\
    .\")\n        val bored = sentences.filter(sen => sen.charAt(0) == 'I')\n    \
    \    return bored.length.toLong", "        // Fill in the code here\n        //\
    \ Hint: Use the split method of the String class\n        return 0;", "      \
    \  var count = 0\n        for (i <- 0 until S.length) {\n            if (S(i)\
    \ == 'I') {\n                count += 1\n            }\n        }\n        return\
    \ count", "        // Fill in your code here\n        return 0", "        val\
    \ words = S.split(\"\\\\.|\\\\?|\\\\!\")\n        words.map(w => if (w.trim.startsWith(\"\
    I\")) 1 else 0).sum", "        val words = S.split(\"[.!?]\").map(_.trim).filter(_.length\
    \ > 0)\n        return words.filter(_.startsWith(\"I\")).length", "        val\
    \ tokens = S.split(\"\\\\.|\\\\?|\\\\!\")\n        tokens.filter(x => x.startsWith(\"\
    I\")).length", "        var i = 0\n        var boredoms = 0\n        while (i\
    \ < S.length) {\n            if (S(i) == 'I') {\n                boredoms += 1\n\
    \                i += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            else i += 1\n\
    \        }\n        boredoms", '        return S.split("\\.|\\?|\\!").filter(s
    => s.trim().startsWith("I")).size', "        var (d, b) = (0, 0)\n        for\
    \ (c <- S) {\n            if (c == '.' || c == '?' || c == '!') d += 1\n     \
    \       if (c == 'I') b += 1\n        }\n        if (d > 0) b - 1 else b", " \
    \       val s = S.split(\"[.?!]\")\n        val m = s.filter(x => x.contains(\"\
    I\"))\n        m.size.toLong", "    \tval Sentences = S.split(\"[.!?]\")\n   \
    \ \tvar Boredoms = 0\n    \tfor (i <- 0 until Sentences.length) {\n    \t\tif\
    \ (Sentences(i).startsWith(\"I\")) Boredoms += 1\n    \t}\n    \treturn Boredoms",
  '        S.split("[.?!]").count(x => x.startsWith("I"))', "        var boredoms\
    \ = 0l\n        val chars = S.toCharArray\n        var inSentence = false\n  \
    \      var startIndex = 0\n        var i = 0\n        while (i < chars.length)\
    \ {\n            if (chars(i) == '.' || chars(i) == '?' || chars(i) == '!') {\n\
    \                if (inSentence) {\n                    if (i + 1 < chars.length\
    \ && chars(i + 1) == ' ') {\n                        if (startIndex + 1 < chars.length\
    \ && chars(startIndex) == 'I' && chars(startIndex + 1) == ' ') {\n           \
    \                 boredoms += 1\n                        }\n                 \
    \       inSentence = false\n                    }\n                }\n       \
    \     } else if (chars(i) == ' ') {\n                if (!inSentence) {\n    \
    \                inSentence = true\n                    startIndex = i + 1\n \
    \               }\n            }\n            i += 1\n        }\n        return\
    \ boredoms", "        val (V,I) = (0 until S.length()).foldLeft((0, false)) {\n\
    \            case ((v,i), j) => S(j) match {\n                case '.' => (v,\
    \ false)\n                case '?' => (v, false)\n                case '!' =>\
    \ (v, false)\n                case 'I' => (v + (if (i) 0 else 1), true)\n    \
    \            case _ => (v, i)\n            }\n        }\n        V", "       \
    \ val sentences = S.split(\"[.?!]\").map(_.trim())\n        var count = 0l\n \
    \       for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [?!\\\\.]\")\n        sentences.map(x => if (x.startsWith(\"I\")) 1 else 0).sum",
  "        // Fill in your code here\n        0", '        S.split("\\.|\\?|\\!").count(p
    => p.trim.startsWith("I"))', "        val bor = S.filter(x => (x == '.' || x ==\
    \ '?' || x == '!')).split(\"[.!?]\")\n        val ans = bor.filter(x => (x.length\
    \ > 0 && x.charAt(0) == 'I'))\n        ans.length.toLong", '        S.split("[.?!]").count(_.startsWith("I"))',
  "        var bored = 0\n        val words = S.split(\"[.!?]\")\n        for (word\
    \ <- words) {\n            if (word.trim().charAt(0) == 'I') {\n             \
    \   bored += 1\n            }\n        }\n        bored", "        val sentences\
    \ = S.split(\"\\\\.\").map(s => {\n            if (s.trim().split(\" \")(0) ==\
    \ \"I\") 1 else 0\n        })\n        return sentences.sum"]
stop_tokens:
- "\n    }\n"
