name: HumanEval_67_fruit_distribution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this task, you will be given a string that represents a number of apples\
  \ and oranges \n    // that are distributed in a basket of fruit this basket contains\
  \ \n    // apples, oranges, and mango fruits. Given the string that represents the\
  \ total number of \n    // the oranges and apples and an integer that represent\
  \ the total number of the fruits \n    // in the basket return the number of the\
  \ mango fruits in the basket.\n    // for examble:\n    // >>> fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l))\n    // (8l)\n    // >>> fruitDistribution((\"\
  0 apples and 1 oranges\"), (3l))\n    // (2l)\n    // >>> fruitDistribution((\"\
  2 apples and 3 oranges\"), (100l))\n    // (95l)\n    // >>> fruitDistribution((\"\
  100 apples and 1 oranges\"), (120l))\n    // (19l)\n    def fruitDistribution(s\
  \ : String, n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
  \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
  \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
  \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100\
  \ oranges\"), (120l)) == (19l));\n    }\n\n}\n"
completions: ["        // write your code here\n        val st = s.split(\" \")\n\
    \        return (n - st(0).toLong - st(3).toLong)", "        // Your Code Here\n\
    \        return 0", '        ???', "        // This is the proper way to solve\
    \ this question as there are edge cases that \n        // if you solve it this\
    \ way you will not have to think about them.\n        val fruitList = s.split(\"\
    \ \")\n        val apple = fruitList(0).toLong\n        val orange = fruitList(3).toLong\n\
    \        val mango = n - (apple + orange)\n        return mango\n        // this\
    \ is a simple way to solve this question without the risk of edge cases.\n   \
    \     // val fruitList = s.split(\" \")\n        // val apple = fruitList(0).toLong\n\
    \        // val orange = fruitList(3).toLong\n        // return (n - (apple +\
    \ orange))", "        val fruit = s.split(\" \")\n        n - fruit(0).toLong\
    \ - fruit(3).toLong", "        val l : List[String] = s.split(\" \").toList\n\
    \        val apples : Long = l(0).toLong\n        val oranges : Long = l(3).toLong\n\
    \        return n - apples - oranges", "        if (s.contains(\"mango\")) {\n\
    \        \t(n - (s.count(_ == 'o') + s.count(_ == 'a')))\n        } else {\n \
    \       \t-1\n        }", '        null', "        var a = 0\n        var o =\
    \ 0\n        var s1 = s.split(\" \")\n        var s2 = s1(0).split(\"\")\n   \
    \     a = s2(0).toInt\n        s2 = s1(2).split(\"\")\n        o = s2(0).toInt\n\
    \        (n - a - o)", "        val splt = s.split(\" and \")\n        val s0\
    \ = splt(0).split(\" \")(0).toLong\n        val s1 = splt(1).split(\" \")(0).toLong\n\
    \        n - s0 - s1", "        var res = (0l, 0l)\n        for(i <- 0 until s.length)\
    \ {\n            if(s(i) == 'a') {\n                var j = i + 1\n          \
    \      while(j < s.length && s(j) != ' ') {\n                    j += 1\n    \
    \            }\n                res = (res._1 + s.substring(i + 1, j).toLong,\
    \ res._2)\n                i = j\n            } else if(s(i) == 'o') {\n     \
    \           var j = i + 1\n                while(j < s.length && s(j) != ' ')\
    \ {\n                    j += 1\n                }\n                res = (res._1,\
    \ res._2 + s.substring(i + 1, j).toLong)\n                i = j\n            }\n\
    \        }\n        n - res._1 - res._2", "    \tval ss = s.split(\"and\")\n \
    \   \tvar i = 0\n    \tvar count : Long = 0\n    \tfor (i <- 0 to ss.length -\
    \ 1) {\n    \t\tval temp = ss(i).trim\n    \t\tval index = temp.indexOf(\" \"\
    )\n    \t\tval temp2 = temp.slice(0, index)\n    \t\tcount += temp2.toLong\n \
    \   \t}\n    \tn - count", "        val regex = \"\"\"(\\d+) apples and (\\d+)\
    \ oranges\"\"\".r\n        val regex(apples, oranges) = s\n        return n -\
    \ (apples.toLong + oranges.toLong)", "        val r = new Regex(\"\"\"(\\d+) apples\
    \ and (\\d+) oranges\"\"\")\n        r.findFirstMatchIn(s) match {\n         \
    \   case Some(m) => (n - m.group(1).toLong - m.group(2).toLong)\n            case\
    \ None => 0l\n        }", "    \tval pattern = \"\"\"(.*) apples and (.*) oranges\"\
    \"\".r\n        val pattern(first, second) = s\n        val l = first.toLong\n\
    \        val h = second.toLong\n        return n - l - h", "        val str =\
    \ s.split(\" and \")\n        val a = str(0).split(\" \")(0).toLong\n        val\
    \ o = str(1).split(\" \")(0).toLong\n        n - a - o", "        // Get the number\
    \ of oranges in the basket.\n        val oranges = s.split(\" \")(3).toLong\n\
    \        // Get the number of apples in the basket.\n        val apples = s.split(\"\
    \ \")(0).toLong\n        // Return the number of mangoes in the basket.\n    \
    \    return n - (oranges + apples)", "        val arr = s.split(\" \")\n     \
    \   n - arr(0).toLong - arr(3).toLong", "        // Write your code here\n   \
    \     ???", "        //YOUR CODE HERE\n        var x:Long = 0\n        var y:Long\
    \ = 0\n        var a: Long = 0\n        var b: Long = 0\n        for(i <- 0 to\
    \ s.length - 1){\n        \tif(s(i) == 'a'){\n        \t\tif(a < 1){\n       \
    \ \t\t\tx = i\n        \t\t\ta += 1\n        \t\t}\n        \t\telse if(a > 1){\n\
    \        \t\t\tb = i\n        \t\t\tbreak\n        \t\t}\n        \t}\n      \
    \  }\n        var c: Long = 0\n        var d: Long = 0\n        for(i <- 0 to\
    \ s.length - 1){\n        \tif(s(i) == 'o'){\n        \t\tif(c < 1){\n       \
    \ \t\t\ty = i\n        \t\t\tc += 1\n        \t\t}\n        \t\telse if(c > 1){\n\
    \        \t\t\td = i\n        \t\t\tbreak\n        \t\t}\n        \t}\n      \
    \  }\n        var m = s.substring(x, b).replaceAll(\"[^\\\\d]\", \"\")\n     \
    \   var k = s.substring(y, d).replaceAll(\"[^\\\\d]\", \"\")\n        var l =\
    \ m.toLong\n        var g = k.toLong\n        n - (l + g)", "        def getApplesAndOranges(s\
    \ : String) : (Long, Long) = {\n            val pattern = \"\"\"^([\\d]+) apples\
    \ and ([\\d]+) oranges$\"\"\".r\n            s match {\n                case pattern(apples,\
    \ oranges) => (apples.toLong, oranges.toLong)\n                case _ => throw\
    \ new IllegalArgumentException(\"You did not enter an appropriate apples and oranges\
    \ pair.\")\n            }\n        }\n        def getMangoes(totalApples : Long,\
    \ totalOranges : Long, totalFruits : Long) : Long = {\n            totalFruits\
    \ - totalApples - totalOranges\n        }\n        val (totalApples, totalOranges)\
    \ = getApplesAndOranges(s)\n        getMangoes(totalApples, totalOranges, n)",
  "        // Your code here\n        null.asInstanceOf[Long]", "        val pattern\
    \ = \"(\\\\d+) apples and (\\\\d+) oranges\".r\n        val pattern(a, b) = s\n\
    \        n - a.toLong - b.toLong", "        var (a, o) = s.split(\"and\").map(_.split(\"\
    \ \").map(_.trim).filterNot(_.isEmpty).filterNot(_ == \"apples\").filterNot(_\
    \ == \"oranges\").head.toLong) match {\n            case Array(i, j) => (i, j)\n\
    \        }\n        n - a - o", "        val in = s.split(\" \")\n        n -\
    \ in(0).toLong - in(3).toLong", "        // Write your code here\n        // It\
    \ will be a function\n        // Do not print anything\n        // Multiple solutions\
    \ are accepted\n        val Array(a, b) = s.split(\" \").map(_.toLong)\n     \
    \   n - a - b", "        // Write your code here\n        val str = s.split(\"\
    \ \")\n        val a = str(0).toLong\n        val o = str(3).toLong\n        n\
    \ - a - o", '        // Your code here', '        //YOUR CODE HERE', "       \
    \ // Fill in the implementation of this method\n        val splitString = s.split(\"\
    \ and \")\n        val numberOfApples = splitString(0).dropRight(7).toLong\n \
    \       val numberOfOranges = splitString(1).dropRight(8).toLong\n        n -\
    \ numberOfApples - numberOfOranges", "        // Your code here\n        val li\
    \ = s.split(\" apples and \")\n        return n - li(0).toLong - li(1).split(\"\
    \ oranges\")(0).toLong", "        // Fill up this function body\n        // `s`\
    \ represents the string of the number of fruits in the basket\n        // `n`\
    \ represents the total number of fruits in the basket\n        var valid = true\n\
    \        var app = 0\n        var ora = 0\n        val words = s.split(\" \")\n\
    \        try {\n            app = words(0).toInt\n            ora = words(3).toInt\n\
    \        } catch {\n            case ex : NumberFormatException => valid = false\n\
    \        }\n        if (valid) {\n            return n - app - ora\n        }\
    \ else {\n            return -1\n        }", "        val stringArr = s.split(\"\
    \ \")\n        val appleCount = stringArr(0).toLong\n        val orangeCount =\
    \ stringArr(3).toLong\n        if (appleCount + orangeCount >= n) -1l\n      \
    \  else n - (appleCount + orangeCount)", "        // Write your code here\n  \
    \      return 0;", "        // Write your code here\n        def s2l(s : String)\
    \ : Long = s.toLong\n        val t = s.split(\" and \")\n        val apples =\
    \ s2l(t(0).split(\" \")(0))\n        val oranges = s2l(t(1).split(\" \")(0))\n\
    \        n - apples - oranges", "        val abc = \"\"\"^([0-9]+) apples and\
    \ ([0-9]+) oranges\"\"\".r\n        s match {\n            case abc(a, b) => n\
    \ - a.toLong - b.toLong\n        }", "        // Your Code Here\n        var num\
    \ = s.split(\" \")\n        return n - num(0).toLong - num(2).toLong", "     \
    \   val arr = s.split(\" and \")\n        var sum = 0\n        for (x <- arr)\
    \ {\n            val subarr = x.split(\" \")\n            sum += subarr(0).toInt\n\
    \        }\n        n - sum", "        // Your Code Here\n        0", "      \
    \  def getFruit(s : String) : String = {\n            val fruitWords = List(\"\
    oranges\", \"apples\")\n            val fruitWordsLen = fruitWords.map(word =>\
    \ word.length)\n            fruitWords(fruitWordsLen.indexOf(s.length))\n    \
    \    }\n        def getNum(s : String) : Long = {\n            s.toLong\n    \
    \    }\n        val split = s.split(\" and \")\n        val oranges = getNum(split(1).split(\"\
    \ \")(0))\n        val apples = getNum(split(0).split(\" \")(0))\n        val\
    \ mango = n - oranges - apples\n        mango", '      return n - countFruit(s)',
  "      val l = s.split(\" \")\n      val v = l(0).toLong + l(2).toLong\n      n\
    \ - v", "\t\t// Fill up this function body\n        // `s`: input string\n   \
    \     // `n`: input integer\n        // return the number of the mango fruits.\n\
    \        val sArr = s.split(\" \")\n        val apple = sArr(0).substring(0, sArr(0).length\
    \ - 1).toLong\n        val orange = sArr(2).substring(0, sArr(2).length - 1).toLong\n\
    \        n - apple - orange", "        // Write your code here\n        return\
    \ 0;", "        def extract(s : String) : (Long, Long) = {\n            val reg\
    \ = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\".r\n            val reg(a, o)\
    \ = s\n            (a.toLong, o.toLong)\n        }\n        val (a, o) = extract(s)\n\
    \        max(n - a - o, 0l)", "    \tval l = s.length()\n    \tvar i = 0\n   \
    \ \tvar a = 0\n    \tvar o = 0\n    \twhile (i < l) {\n    \t\tif (s(i) == 'a')\
    \ {\n    \t\t\tvar j = i + 1\n    \t\t\twhile (j < l && (s(j) >= '0' && s(j) <=\
    \ '9')) {\n    \t\t\t\ta = a * 10 + (s(j) - '0')\n    \t\t\t\tj += 1\n    \t\t\
    \t}\n    \t\t\ti = j\n    \t\t} else if (s(i) == 'o') {\n    \t\t\tvar j = i +\
    \ 1\n    \t\t\twhile (j < l && (s(j) >= '0' && s(j) <= '9')) {\n    \t\t\t\to\
    \ = o * 10 + (s(j) - '0')\n    \t\t\t\tj += 1\n    \t\t\t}\n    \t\t\ti = j\n\
    \    \t\t} else {\n    \t\t\ti += 1\n    \t\t}\n    \t}\n    \tn - a - o", " \
    \       val m = s.split(\" and \")\n        val a = m(0).split(\" \")(0).toLong\n\
    \        val o = m(1).split(\" \")(0).toLong\n        n - a - o", '        //YOUR
    CODE GOES HERE', "        val t = s.split(\" \").map(_.toLong)\n        return\
    \ n - t(0) - t(2)", "        val array = s.split(\" \")\n        val num = array(0).toLong\n\
    \        val denom = array(3).toLong\n        n - (num*denom)/(num+denom)", " \
    \   \tval pattern = \"([0-9]+) apples and ([0-9]+) oranges\".r\n    \tval pattern(a,\
    \ o) = s\n    \tn - a.toLong - o.toLong", '        s.split(" ").map(_.replace("s",
    "").toLong).foldLeft(n)(_ - _)', "        // Write your code here\n        val\
    \ ints = s.split(\" \").map(_.toInt)\n        return n - ints(0) - ints(3)", " \
    \       val nums = s.split(\" \").filter(_.matches(\"\\\\d+\")).map(_.toLong)\n\
    \        val dist = nums.reduce(_ + _)\n        n - dist", "        val strs =\
    \ s.split(\" \")\n        val a = strs(0).toLong\n        val o = strs(3).toLong\n\
    \        n - a - o", "        val str = s.split(\" \")\n        val apples = str(0).toLong\n\
    \        val oranges = str(3).toLong\n        n - apples - oranges", "       \
    \ val ss = s.split(\" \")\n        val fruitCounts = ss.map(x => (x.split(\" \"\
    )(0).toLong)).toList\n        val appleCount = fruitCounts(0)\n        val orangeCount\
    \ = fruitCounts(2)\n        n - appleCount - orangeCount", "        var list :\
    \ List[String] = s.split(\" \").toList\n        var numOfApples : Long = list(0).toLong\n\
    \        var numOfOranges : Long = list(3).toLong\n        return n - numOfApples\
    \ - numOfOranges", "        val a = \"\"\"([0-9]+) apples and ([0-9]+) oranges\"\
    \"\".r\n        val a(x, y) = s\n        // println(x)\n        // println(y)\n\
    \        (n - x.toLong - y.toLong)", "        var total = n\n        var sArray\
    \ = s.split(\" \")\n        for (i <- 0 until sArray.length - 1 by 2) {\n    \
    \        if (sArray(i + 1) == \"apples\") total -= sArray(i).toLong\n        \
    \    else total -= sArray(i).toLong\n        }\n        total", "        val sum\
    \ = s.split(\" \").foldLeft(0l)((a, b) => a + b.substring(0, b.length - 2).toLong)\n\
    \        return n - sum", "        // your code here\n        null", "       \
    \ // Your code here\n        val arr = s.split(\" \")\n        val num_apples\
    \ = arr(0).toLong\n        val num_oranges = arr(3).toLong\n        n - num_apples\
    \ - num_oranges", "        val (a, o) = s.substring(0, s.indexOf(\"apples\")).split(\"\
    \ \").map(_.toLong).zip(s.substring(s.indexOf(\"and\") + 4, s.indexOf(\"oranges\"\
    )).split(\" \").map(_.toLong)).unzip\n        val (m : Long, r : Long) = (n -\
    \ a.sum - o.sum, n - a.sum - o.sum % a.size)\n        if (m > 0) m else r", " \
    \       var result = 0l\n        if (s.isEmpty || n == 0) {\n            result\
    \ = n\n        } else {\n            val applePattern = \"([0-9]+) apples\".r\n\
    \            val orangePattern = \"([0-9]+) oranges\".r\n            val lst =\
    \ s.split(\" and \")\n            var a = 0l\n            var o = 0l\n       \
    \     for (s <- lst) {\n                s match {\n                    case applePattern(a1)\
    \ => {\n                        a = a1.toLong\n                    }\n       \
    \             case orangePattern(o1) => {\n                        o = o1.toLong\n\
    \                    }\n                }\n            }\n            result =\
    \ n - a - o\n        }\n        result", "        // Write your code here\n  \
    \      n - s.split(\" \").map{_.toLong}.sum", "        val sum = s.split(\"and\"\
    ).foldLeft(0l)((sum, s) => sum + s.split(\" \")(0).toLong)\n        n - sum",
  "        var arr = s.split(\" \")\n        var apples = arr(0).toLong\n        var\
    \ oranges = arr(3).toLong\n        var mangoes = n - (apples + oranges)\n    \
    \    mangoes", "        val split = s.split(\" \")\n        val orange = split(3).toLong\n\
    \        val apple = split(0).toLong\n        n - orange - apple", "        val\
    \ list = s.split(\" and \")\n        val apple = list(0).split(\" \")(0).toLong\n\
    \        val orange = list(1).split(\" \")(0).toLong\n        n - apple - orange",
  "        // your code here\n        def r(xs : List[String]) : (Long, Long) = xs\
    \ match {\n            case List(a, \"apples\", \"and\", b, \"oranges\") => (a.toLong,\
    \ b.toLong)\n            case List(a, \"apples\", \"and\", b, \"oranges\", _*)\
    \ => r(List(a, \"apples\", \"and\", b, \"oranges\"))\n            case List(a,\
    \ \"oranges\", \"and\", b, \"apples\") => (b.toLong, a.toLong)\n            case\
    \ List(a, \"oranges\", \"and\", b, \"apples\", _*) => r(List(a, \"oranges\", \"\
    and\", b, \"apples\"))\n            case _ => throw new IllegalArgumentException(\"\
    \")\n        }\n        n - r(s.split(\" \").toList)._1 - r(s.split(\" \").toList)._2",
  '        // Write your code here', "        val l = s.split(\" \")\n        val\
    \ apples = l(0).toLong\n        val oranges = l(3).toLong\n        n - apples\
    \ - oranges", "        // Your Code Here\n        return -1l", "        val pattern\
    \ = \"(\\\\d*) apples and (\\\\d*) oranges\".r\n        val pattern(apples, oranges)\
    \ = s\n        n - apples.toLong - oranges.toLong", '        // Your Code Here',
  "        //your code here\n        return 0;", "        // Your Code Here\n    \
    \    val strArr = s.split(\" \")\n        val apples = strArr(0).toLong\n    \
    \    val oranges = strArr(3).toLong\n        n - apples - oranges", "        val\
    \ fruits = s.split(\" \")\n        val fruitsNumbers = new HashMap[String, Int]()\n\
    \        for (i <- 0 until fruits.length by 2) {\n            fruitsNumbers +=\
    \ (fruits(i) -> fruits(i + 1).replace(\"s\", \"\").toInt)\n        }\n       \
    \ n - fruitsNumbers.values.reduceLeft(_ + _)", "        if(n == 0) return 0\n\
    \        var str = s.split(\" and \")\n        var apple = str(0).split(\" \"\
    )(0).toLong\n        var orange = str(1).split(\" \")(0).toLong\n        var mango\
    \ = n - (apple + orange)\n        if(mango < 0) 0 else mango", "        val tokens\
    \ = s.split(\" \")\n        val a = tokens(0).toLong\n        val o = tokens(3).toLong\n\
    \        n - a - o", "\t\tnull", "        // Your Code Here\n        val fruit\
    \ = s.split(\" \")\n        val apple = fruit(0).toLong\n        val orange =\
    \ fruit(2).toLong\n        val fruitSum = apple + orange\n        return n - fruitSum",
  "        val p = \"\"\"([0-9]+) apples and ([0-9]+) oranges\"\"\".r\n        val\
    \ p(x, y) = s\n        n - x.toLong - y.toLong", "        // the number of the\
    \ fruits can not be greater than the total number of the fruits\n        if (n\
    \ < totalNumberOfFruits(s)) -1l\n        else n - totalNumberOfFruits(s)", " \
    \       val (apple, orange) = s.split(\" and \").map(_.split(\" \")(0).toLong).productIterator.toList.asInstanceOf[List[Long]]\n\
    \        n - apple - orange", "        val sArr = s.split(\" and \")\n       \
    \ val o = sArr(1).split(\" \")(0).toLong\n        val a = sArr(0).split(\" \"\
    )(0).toLong\n        n - (o + a)", "        // Write your code here\n        val\
    \ pattern = \"(\\\\d+)\\\\s+(\\\\w+)\\\\s+and\\\\s+(\\\\d+)\\\\s+(\\\\w+)\".r\n\
    \        val pattern(a, _, o, _) = s\n        n - a.toLong - o.toLong", "    \
    \    val ss = s.split(\" \")\n        val (a, o) = (ss(0).toLong, ss(2).toLong)\n\
    \        val m = n - a - o\n        if (m < 0) throw new IllegalArgumentException\n\
    \        m", "        val r = \"\"\"(\\d*) apples and (\\d*) oranges\"\"\".r\n\
    \        s match {\n            case r(a, o) => n - (a.toLong + o.toLong)\n  \
    \      }", "        // Your code here\n        null", "        val arr = s.split(\"\
    \ \")\n        val a = arr(0).toLong\n        val o = arr(3).toLong\n        val\
    \ sum = a + o\n        val m = n - sum\n        m", "        // Write your code\
    \ here\n        null", '        ???', "        val l = s.split(\" and \").map(_.split(\"\
    \ \")(0).toLong)\n        val s = l(0) + l(1)\n        n - s", "        val list\
    \ = s.split(\"and\")\n        val apple = list(0).split(\" \")(0).toLong\n   \
    \     val orange = list(1).split(\" \")(1).toLong\n        n - (apple + orange)",
  "        // Your code here\n        ???", "        val x = s.split(\" and \")\n\
    \        val total = x(0).toLong + x(1).toLong\n        n - total", "        val\
    \ fruit = s.split(\" \")\n        val apple = fruit(0).toLong\n        val orange\
    \ = fruit(2).toLong\n        n - apple - orange", '        ???', "        // write\
    \ your code here\n        null", "        val (apple, orange) = {\n          \
    \  val x = s.split(\" \")\n            (x(0).toLong, x(3).toLong)\n        }\n\
    \        n - apple - orange", "        val a = \"(\\\\d+) apples and (\\\\d+)\
    \ oranges\".r\n        val a(aa, bb) = s\n        n - aa.toLong - bb.toLong",
  "        // Your Code Here\n        val inp = s.split(\" \")\n        n - inp(0).toLong\
    \ - inp(3).toLong", "        // Write your code here\n        // This function\
    \ returns the total number of the mango fruits in the basket (Long)\n        val\
    \ spl = s.split(\" \").map(_.toLong)\n        n - spl(0) - spl(3)", "        val\
    \ distribution = s.split(\" \")\n        val numApples = distribution(0).toLong\n\
    \        val numOranges = distribution(3).toLong\n        n - numApples - numOranges",
  "        val strings = s.split(\" \")\n        val a = strings(0).toLong\n     \
    \   val o = strings(3).toLong\n        n - a - o", "        if(s.equals(\"0 apples\
    \ and 0 oranges\")) \n          return n;\n        val temp = s.split(\" \");\n\
    \        var numOfApple = 0;\n        var numOfOrange = 0;\n        for(i <- 0\
    \ until temp.length) {\n          if(temp(i).equals(\"apples\")) \n          \
    \  numOfApple = temp(i - 1).toInt;\n          if(temp(i).equals(\"oranges\"))\
    \ \n            numOfOrange = temp(i - 1).toInt;\n        }\n        return n\
    \ - numOfApple - numOfOrange;", "        val arr = s.split(\" \")\n        val\
    \ apple = arr(0).toLong\n        val orange = arr(3).toLong\n        val mango\
    \ = n - apple - orange\n        return mango", "        val totals = s.split(\"\
    \ \").map(x => x.toLong)\n        n - totals.sum", "        // Write your code\
    \ here\n        var num = 0;\n        var num1 = 0;\n        var newString = s.split(\"\
    \ \");\n        for(i <- 0 to newString.length - 1){\n            var str = newString(i);\n\
    \            if(str.matches(\"-?\\\\d+(\\\\.\\\\d+)?\")){\n                if(i\
    \ == 0){\n                    num = str.toInt;\n                }\n          \
    \      else if(i == 2){\n                    num1 = str.toInt;\n             \
    \   }\n            }\n        }\n        return n - (num + num1);", "        val\
    \ input = s.split(\" \")\n        val apple = input(0).toLong\n        val orange\
    \ = input(3).toLong\n        val sum = apple + orange\n        n - sum", "   \
    \     // write your code here\n        val sum = s.replaceAll(\"[^\\\\d]\", \"\
    \").map(_.asDigit).sum\n        return n - sum", "        // Your implementation\
    \ goes here\n        // (No cheat! Don't use \"import scala.util.matching._\"\
    \ in your implementation)\n        var a : Long = 0\n        var o : Long = 0\n\
    \        var str1 : String = \"\"\n        var str2 : String = \"\"\n        var\
    \ flag : Int = 0\n        var i : Int = 0\n        for (i <- 0 to s.length() -\
    \ 1) {\n            if (s(i) == ' ') {\n                flag = 1\n           \
    \ } else if (s(i) == 'a') {\n                flag = 0\n            } else if (s(i)\
    \ == 'o') {\n                flag = 2\n            } else if (flag == 0) {\n \
    \               str1 += s(i)\n            } else if (flag == 2) {\n          \
    \      str2 += s(i)\n            }\n        }\n        a = str1.toLong\n     \
    \   o = str2.toLong\n        return n - a - o", "        val pattern = \"\"\"\
    (\\d+) apples and (\\d+) oranges\"\"\".r\n        s match {\n            case\
    \ pattern(apple, orange) => {\n                return n - apple.toLong - orange.toLong\n\
    \            }\n        }", '        // Your Code Here', "        // Write your\
    \ code here\n        val split = s.split(\" and \")\n        val numApples = split(0).split(\"\
    \ \")(0).toLong\n        val numOranges = split(1).split(\" \")(0).toLong\n  \
    \      n - numApples - numOranges", "        val tokens = s.split(\" \")\n   \
    \     n - tokens(0).toLong - tokens(3).toLong", "        // write your own code\
    \ here\n        val pat = \"\\\\d+\".r\n        val arr = pat.findAllIn(s).toArray\n\
    \        val num = n - arr(0).toLong - arr(1).toLong\n        num", "        //\
    \ you code\n        val array = s.split(\" \")\n        n - array(0).toLong -\
    \ array(2).toLong", "        val l = s.split(\" \")\n        var apples = Integer.parseInt(l(0))\n\
    \        var oranges = Integer.parseInt(l(2))\n        return n - apples - oranges",
  "        // Your code here\n        return 0", "        val a = s.split(\" \")(0).split(\"\
    and\")(0).toLong\n        val o = s.split(\" \")(2).toLong\n        n - (a + o)",
  '        ???', '        // write your code here', "        // Write your code here\n\
    \        val str = s.split(\"and\").map(x => x.trim.split(\" \")(0).toLong)\n\
    \        n - str(0) - str(1)", "        var total_apples = 0\n        var total_oranges\
    \ = 0\n        s.split(\" \").foreach(x => if (x.trim == \"apples\") {\n     \
    \       total_apples += 1\n        } else if (x.trim == \"oranges\") {\n     \
    \       total_oranges += 1\n        })\n        n - total_apples - total_oranges",
  "        // Your Code Here\n        ???", "        // Fill in the code here\n  \
    \      ???", "        // Your code here\n        val sArray = s.split(\" \")\n\
    \        val apple = sArray(0).toLong\n        val orange = sArray(3).toLong\n\
    \        val mango = n - apple - orange\n        mango", "        if(s.split(\"\
    \ \").filter(r => r == \"apples\").size > 1) {\n            return n - s.split(\"\
    \ \").filter(r => r == \"apples\").size - s.split(\" \").filter(r => r == \"oranges\"\
    ).size\n        }\n        if(s.split(\" \").filter(r => r == \"oranges\").size\
    \ > 1) {\n            return n - s.split(\" \").filter(r => r == \"apples\").size\
    \ - s.split(\" \").filter(r => r == \"oranges\").size\n        }\n        if(s.split(\"\
    \ \").filter(r => r == \"apples\").size == 1 && s.split(\" \").filter(r => r ==\
    \ \"oranges\").size == 1) {\n            return n - (s.split(\" \").filter(r =>\
    \ r == \"apples\").head.split(\" \").head.toLong + s.split(\" \").filter(r =>\
    \ r == \"oranges\").head.split(\" \").head.toLong)\n        }\n        if(s.split(\"\
    \ \").filter(r => r == \"apples\").size == 1) {\n            return n - s.split(\"\
    \ \").filter(r => r == \"apples\").head.split(\" \").head.toLong - s.split(\"\
    \ \").filter(r => r == \"oranges\").size\n        }\n        if(s.split(\" \"\
    ).filter(r => r == \"oranges\").size == 1) {\n            return n - s.split(\"\
    \ \").filter(r => r == \"apples\").size - s.split(\" \").filter(r => r == \"oranges\"\
    ).head.split(\" \").head.toLong\n        }\n        else return 0", "        //\
    \ Your code here\n        0", "\t    // Your answer here", "        val x = s.split(\"\
    \ \")\n        n - x(0).toLong - x(2).toLong", "    \tval split = s.split(\" \"\
    )\n    \tval numApples = split(0).toLong\n    \tval numOranges = split(3).toLong\n\
    \    \tn - numApples - numOranges", "        if (s == null || s.isEmpty) return\
    \ 0l\n        val l = s.split(\"and\")\n        val a = l(0).trim.substring(0,\
    \ l(0).trim.indexOf(\" \")).toLong\n        val o = l(1).trim.substring(0, l(1).trim.indexOf(\"\
    \ \")).toLong\n        n - a - o", "        val fruits : List[String] = s.split(\"\
    \ \").toList.map(x => x.stripSuffix(\"apples\").stripSuffix(\"oranges\"))\n  \
    \      var apples : Long = 0;\n        var oranges : Long = 0;\n        for (f\
    \ <- fruits) {\n            if (f.contains(\"apple\")) apples = f.stripSuffix(\"\
    and\").toLong\n            else oranges = f.stripSuffix(\"and\").toLong\n    \
    \    }\n        n - (apples + oranges)", "        // Read from the input string\
    \ the number of the apples and oranges and save them in the result1 and result2\n\
    \        val result1 = s.split(\" \")(0).toLong\n        val result2 = s.split(\"\
    \ \")(3).toLong\n        // return the result of the subtraction between the total\
    \ number of the fruits and the number of the apples and oranges\n        return\
    \ n - (result1 + result2)", "        // Write your code here\n        null", " \
    \       // the final result\n        var result : Long = 0\n        // getting\
    \ the list of the values of the fruits in the basket\n        val list1 = s.split(\"\
    \ \").toList\n        // getting the total number of the fruits in the basket\n\
    \        val list2 = n.toString.split(\"\").toList\n        // getting the number\
    \ of the apples \n        val a = list1(0).toLong\n        // getting the number\
    \ of the oranges\n        val o = list1(3).toLong\n        // getting the total\
    \ number of the fruits\n        val c = list2(0).toLong\n        // calculating\
    \ the number of the mango fruits\n        result = c - a - o\n        // returning\
    \ the result\n        result", "        val (apples, oranges) = parse(s)\n   \
    \     n - apples - oranges", "        // (s : String, n : Long) : Long\n     \
    \   val input = s.split(\" \").map(_.toLong)\n        n - input(0) - input(3)",
  "        val split = s.split(\" and \")\n        val a = split(0).split(\" \")(0).toLong\n\
    \        val o = split(1).split(\" \")(0).toLong\n        n - a - o", "      \
    \  // n = napples + noranges + n mangoes\n        // 3n = 2napples + 3noranges\n\
    \        // n = 2napples + 3noranges\n        // n/3 = napples + noranges\n  \
    \      val fruitDistributionPatt = \"([0-9]+) (apples) and ([0-9]+) (oranges)\"\
    .r\n        s match {\n            case fruitDistributionPatt(apples, applesStr,\
    \ oranges, orangesStr) => n - 2*apples.toLong - 3*oranges.toLong\n        }",
  "        val parts = s.split(\" \")\n        var apples = parts(0).toLong\n    \
    \    var oranges = parts(2).toLong\n        if (apples + oranges > n)\n      \
    \      return 0\n        return n - (apples + oranges)", "    \tval apples = s.split(\"\
    \ \")(0).toLong\n    \tval oranges = s.split(\" \")(3).toLong\n    \tn - apples\
    \ - oranges", '        ???', "        // FILL IN HERE\n        val arr = s.split(\"\
    \ \")\n        val num = arr(0).toLong\n        if (arr(1) == \"apples\") {\n\
    \            n - num\n        } else {\n            n - (n - num)\n        }",
  '        // Your code goes here', "        val a = s.takeWhile(_ != ' ').toLong\n\
    \        val b = s.takeRight(s.length - s.indexOf(\"and\") - 4).toLong\n     \
    \   n - a - b", "        val regex = \"\"\"([0-9]+) apples and ([0-9]+) oranges\"\
    \"\".r\n        val regex(apples, oranges) = s\n        n - (apples.toLong + oranges.toLong)",
  "        // Write your code here\n        s.split(\" \").map(i => i.toInt).reduceLeft(_\
    \ + _)", "      // Fill up this function body\n      // `s`: input string\n  \
    \    // `n`: total number of fruits \n      // `return`: number of mango fruits\
    \ \n      0", "        // Your code here\n        val fruits = s.split(\" \")\n\
    \        val apples = fruits(0).toLong\n        val oranges = fruits(2).toLong\n\
    \        n - apples - oranges", "        val a = s.substring(0, s.indexOf(\"apples\"\
    )).split(\" \")(0).toLong\n        val o = s.substring(s.indexOf(\"and\") + 4,\
    \ s.indexOf(\"oranges\")).split(\" \")(0).toLong\n        n - a - o", "      \
    \  // the length of the string that represents the number of the fruit\n     \
    \   val l = s.length\n        // the total number of fruit\n        val totalFruit\
    \ = n\n        // the total number of apples and oranges\n        val sumAppleAndOrange\
    \ = s.filter(c => c.isDigit).toLong\n        // the number of the mango fruit\
    \ = total number of the fruit - number of the apples and oranges\n        totalFruit\
    \ - sumAppleAndOrange", "        val lst = s.split(\" \").toList.map(_.toLong)\n\
    \        return n - lst(0) - lst(3)", "        val (a, o) = s.split(\" and \"\
    ).map(_.takeWhile(_ != ' ').toLong).toList match {\n            case List(a, o)\
    \ => (a, o)\n        }\n        val m = n - a - o\n        if (m >= 0) m else\
    \ -1", '        // implement here', "        val (p, q) = s.split(\" \").map(_.toLong).splitAt(2)\n\
    \        n - p.sum - q.sum", '        // Your code goes here', "        // Write\
    \ your code here\n        def compare(a : String, b : String) : Long = {\n   \
    \         if (a(0) == 'a') {\n                n - a(0).toLong - b(0).toLong\n\
    \            } else {\n                n - a(0).toLong - b(0).toLong\n       \
    \     }\n        }\n        val temp = s.split(\" \")\n        compare(temp(0),\
    \ temp(3))", '        // Write your code here', "        // Write your code here\n\
    \        null", "        // TODO write the code to solve the task!\n        val\
    \ s1 = s.split(\"and\")\n        return n - (s1(0).split(\" \")(0).toLong + s1(1).split(\"\
    \ \")(1).toLong)", "        val arr = s.split(\" \")\n        return n - (arr(0).toLong\
    \ + arr(3).toLong)", "        var reg = \"([0-9]+) (apples|oranges) and ([0-9]+)\
    \ (apples|oranges)\".r\n        var reg(x, _, y, _) = s\n        var xn = x.toLong\n\
    \        var yn = y.toLong\n        var zn = n - xn - yn\n        zn", "     \
    \   // Write your code here\n        val words = s.split(\" \")\n        val apples\
    \ = words(0).toLong\n        val oranges = words(2).toLong\n        n - apples\
    \ - oranges", "        // Your Code Goes Here.\n        n - s.split(\" \").map(_.toLong).sum",
  "        val p = s.split(\" \")\n        return n - p(0).toLong - p(3).toLong",
  "        // Write your code here\n        return 0;", '        ???', '        ???',
  "        //Write your code here\n        val splitted = s.split(\" \")\n       \
    \ val no_apples = splitted(0).toLong\n        val no_oranges = splitted(3).toLong\n\
    \        val no_mangoes = n - no_apples - no_oranges\n        no_mangoes", " \
    \   \tval reg = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\".r\n    \tval reg(a,\
    \ b) = s\n    \treturn n - a.toLong - b.toLong", "        // Write your code here\n\
    \        val nums = s.split(\" \").filter(_ != \"and\").map(_.toLong)\n      \
    \  n - nums.sum", "        var fruit : Array[Long] = s.split(\" and \").map(x\
    \ => x.split(\" \")(0).toLong).sorted\n        var min : Long = -1l\n        var\
    \ a : Long = fruit(0)\n        var b : Long = fruit(1)\n        var num : Long\
    \ = 0l\n        while(num <= n){\n            num = a + b\n            if(num\
    \ > n) min = a\n            else a += 1\n        }\n        min", '        ???',
  "        // your code here\n        val parts = s.split(\" and \")\n        val\
    \ apples = parts(0).split(\" \")(0).toLong\n        val oranges = parts(1).split(\"\
    \ \")(0).toLong\n        n - apples - oranges", "        // Write your code here\n\
    \        return n", '        // Write your code here', "        // Given the string\
    \ and the total number of fruits find the number of mango fruits\n        // >>>\
    \ your solution here\n        val list=s.split(\" \")\n        val apple=list(0).toLong\n\
    \        val orange=list(3).toLong\n        n-(apple+orange)", "        // Your\
    \ Code Here\n        // \u6570\u5B57\u306E\u96C6\u5408\u3092List\u306B\u683C\u7D0D\
    \n        val ss = s.split(\" \")\n        val nums = List(ss(0).toLong, ss(3).toLong)\n\
    \        val sum = nums.sum\n        n - sum", "        // your code here\n  \
    \      return s.split(\" \")(0).toLong + s.split(\" \")(3).toLong", "        //\
    \ Write your code here\n        null", "\t\tval Pattern = new Regex(\"(\\\\d+)\
    \ apples and (\\\\d+) oranges\")\n\t\tval Pattern(a,o) = s\n\t\tn - (a.toLong\
    \ + o.toLong)", "        // Write your code here\n        return 0;", "      \
    \  var sum = 0\n        val m = s.split(\" \")\n        for (i <- 0 until m.length\
    \ by 4) sum += m(i).toInt\n        n - sum", '        // Write your code here',
  "        //throw new NotImplementedError()\n        val Pattern = \"([0-9]+) apples\
    \ and ([0-9]+) oranges\".r\n        var res : Long = 0\n        for (Pattern(a,\
    \ o) <- Pattern findAllIn s) {\n            res = n - a.toLong - o.toLong\n  \
    \      }\n        res", '        ???', "        val nums = s.split(\" \").map(_.toLong)\n\
    \        n - nums(0) - nums(2)", "        // Write your code here\n        0l",
  "        // Put your code here\n        // ...\n        // ...\n        return 0l",
  "        // Your implementation here\n        0l", "        // the count of the\
    \ fruit for each type\n        val (a, o) = countFruit(s)\n        // the total\
    \ number of the fruit that was mentioned\n        val t = a + o\n        // the\
    \ total count of the fruits that is not mentioned\n        n - t", "        val\
    \ num = s.split(\" \").map(_.toLong)\n        num(0) + num(2) - n", "        val\
    \ arr = s.split(\" \")\n        val ap = arr(0).toLong\n        val or = arr(3).toLong\n\
    \        n - ap - or", "        // Your Code Here\n        return -1;", "    \
    \    val x = s.split(\" \").filter(s => !s.contains(\"and\")).map(s => s.dropRight(1).toLong)\n\
    \        val total = x.sum\n        if (total < n) return n - total\n        else\
    \ return 0"]
stop_tokens:
- "\n    }\n"
