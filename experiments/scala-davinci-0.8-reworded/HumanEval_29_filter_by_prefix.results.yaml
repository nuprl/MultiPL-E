language: scala
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(str\
    \ => str.length >= prefix.length && str.substring(0, prefix.length) == prefix)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        (strings.filter((s)\
    \ => s.startsWith(prefix)))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(p\
    \ => p.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        def filterByPrefix0(strings\
    \ : List[String], prefix : String, result : List[String]) : List[String] = {\n\
    \            if (strings.isEmpty) result\n            else if (strings.head.startsWith(prefix))\
    \ filterByPrefix0(strings.tail, prefix, result :+ strings.head)\n            else\
    \ filterByPrefix0(strings.tail, prefix, result)\n        }\n        filterByPrefix0(strings,\
    \ prefix, List[String]())\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // We will use\
    \ the library method filter to process the list.\n        // https://www.scala-lang.org/api/current/scala/collection/immutable/List.html#filter(p:A=>Boolean):List[A]\n\
    \        // We have to supply the function that determines whether an item is\
    \ filtered in or out.\n        //\n        // We will use the library method startsWith\
    \ to determine whether a string has the correct prefix.\n        // https://www.scala-lang.org/api/current/scala/collection/immutable/StringOps.html#startsWith(that:String):Boolean\n\
    \        //\n        // Note that the method filter also has an alternative syntax.\n\
    \        // https://www.scala-lang.org/api/current/scala/collection/immutable/List.html#withFilter(p:A=>Boolean):List[A]\n\
    \        //\n        // Note that the method startsWith also has an alternative\
    \ syntax.\n        // https://www.scala-lang.org/api/current/scala/collection/immutable/StringOps.html#startsWith(that:T):Boolean\n\
    \        ???\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.filterByPrefix(tmplvxcck3a.scala:22)\n\tat Problem$.main(tmplvxcck3a.scala:25)\n\
    \tat Problem.main(tmplvxcck3a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        ???\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.filterByPrefix(tmpbqo6nxca.scala:10)\n\tat Problem$.main(tmpbqo6nxca.scala:13)\n\
    \tat Problem.main(tmpbqo6nxca.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result : List[String]\
    \ = List[String]()\n        for (word <- strings) {\n            if (word.startsWith(prefix))\
    \ {\n                result = result :+ word\n            }\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((s)\
    \ => (s.take(prefix.length) == prefix))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.isEmpty)\
    \ strings\n        else {\n            if (strings.head.startsWith(prefix)) strings.head\
    \ :: filterByPrefix(strings.tail, prefix)\n            else filterByPrefix(strings.tail,\
    \ prefix)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(((s\
    \ : String) => (s.startsWith(prefix))))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var r : List[String]\
    \ = List()\n        for (string <- strings) {\n            if (string.startsWith(prefix))\
    \ r = r :+ string\n        }\n        return r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val result = ListBuffer[String]()\n\
    \        for (str <- strings) {\n            if (str.startsWith(prefix)) result\
    \ += str\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((str)\
    \ => str.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        require(prefix.length\
    \ > 0)\n        strings.filter(str => str.startsWith(prefix))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"\
    john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(e\
    \ => e.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ == 0) List[String]()\n        else if (strings.head.startsWith(prefix)) strings.head\
    \ :: filterByPrefix(strings.tail, prefix)\n        else filterByPrefix(strings.tail,\
    \ prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (string <- strings) {\n            if (string.startsWith(prefix))\
    \ result = string :: result\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"\
    john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter((s\
    \ : String) => s.startsWith(prefix))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var filteredList\
    \ = List[String]()\n        for (str <- strings) {\n            if (str.startsWith(prefix))\
    \ {\n                filteredList = str :: filteredList\n            }\n     \
    \   }\n        filteredList.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var filtered :\
    \ List[String] = (List[String]())\n        var first = true\n        for (s <-\
    \ strings) {\n            if (s.startsWith(prefix)) {\n                if (first)\
    \ {\n                    filtered = (s :: filtered)\n                    first\
    \ = false\n                } else {\n                    filtered = filtered :+\
    \ s\n                }\n            }\n        }\n        return filtered\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result : List[String]\
    \ = List()\n        for (s <- strings) {\n            if (s.startsWith(prefix))\
    \ {\n                result = s :: result\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var ret : List[String]\
    \ = List()\n        for (str <- strings) if (str.startsWith(prefix)) ret = str\
    \ :: ret\n        return ret\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((s\
    \ : String) => {s.startsWith(prefix)})\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val prefixLength\
    \ = prefix.length\n        strings.filter((s) => (s.startsWith(prefix)))\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        for {\n       \
    \     s <- strings\n            if s.startsWith(prefix)\n        } yield s\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Print the inputs\
    \ to help debugging.\n        // print(strings)\n        // print(prefix)\n  \
    \      // Retrieve a list of strings which starts with the given prefix.\n   \
    \     strings.filter(str => str.startsWith(prefix))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n      strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((word\
    \ : String) => word.startsWith(prefix))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // ERROR:\n   \
    \     val filter = for (string <- strings if string.startsWith(prefix)) yield\
    \ string\n        filter\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings match {\n\
    \            case (List()) => List()\n            case (x :: xs) =>\n        \
    \        if (x.startsWith(prefix)) x :: filterByPrefix(xs, prefix)\n         \
    \       else filterByPrefix(xs, prefix)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        (for (x <- strings;\
    \ if x.startsWith(prefix)) yield x).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // @todo implement\
    \ this\n        return strings\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3y3yb32.scala:15)\n\tat Problem.main(tmpk3y3yb32.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(string\
    \ => string.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter((x\
    \ : String) => (x.startsWith(prefix)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return List();\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb46_171t.scala:14)\n\tat Problem.main(tmpb46_171t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var stringsAfterFilter\
    \ = List[String]()\n        for (string <- strings) {\n            if (string.startsWith(prefix))\
    \ {\n                stringsAfterFilter = string :: stringsAfterFilter\n     \
    \       }\n        }\n        stringsAfterFilter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val f = (str :\
    \ String) => str.startsWith(prefix)\n        val filtered = strings.filter(f)\n\
    \        return filtered\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val n = prefix.length\n\
    \        strings.filter(x => x.length >= n && x.substring(0, n) == prefix)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // We know the\
    \ prefix we want to match.\n        // Any string in the list that does not start\
    \ with that prefix should be filtered out.\n        // There are two cases for\
    \ each string\n        // 1. Starts with the prefix\n        // 2. Doesn't start\
    \ with the prefix\n        // It would be ideal if there was a built-in function\
    \ that did this\n        // Luckily there is.\n        return strings.filter((s\
    \ : String) => s.startsWith(prefix))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.isEmpty)\
    \ List[String]()\n        else if (strings.head.startsWith(prefix)) strings.head\
    \ :: filterByPrefix(strings.tail, prefix)\n        else filterByPrefix(strings.tail,\
    \ prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // YOUR CODE HERE\n\
    \        strings.filter(s => s.startsWith(prefix))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(word\
    \ => word.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter((_\
    \ : String).startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return (strings.filter((s\
    \ : String) => s.startsWith(prefix)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ == 0) {\n            List[String]()\n        } else {\n            if (strings.head.startsWith(prefix))\
    \ {\n                strings.head :: filterByPrefix(strings.tail, prefix)\n  \
    \          } else {\n                filterByPrefix(strings.tail, prefix)\n  \
    \          }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        (for (s <- strings\
    \ if s.startsWith(prefix)) yield s).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val prefixedStrings\
    \ = ListBuffer[String]()\n        for (string <- strings) {\n            if (string.startsWith(prefix))\
    \ prefixedStrings += string\n        }\n        prefixedStrings.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((s\
    \ : String) => s.startsWith(prefix))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.indexOf(prefix) == 0)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(str\
    \ => str.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(word\
    \ => word.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        ???\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.filterByPrefix(tmpbqo6nxca.scala:10)\n\tat Problem$.main(tmpbqo6nxca.scala:13)\n\
    \tat Problem.main(tmpbqo6nxca.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((s)\
    \ => {s.startsWith(prefix)})\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.indexOf(prefix) == 0)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.isEmpty)\
    \ return List[String]()\n        if (strings.head.startsWith(prefix)) return strings.head\
    \ :: filterByPrefix(strings.tail, prefix)\n        return filterByPrefix(strings.tail,\
    \ prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        require(strings\
    \ != null && prefix != null)\n        strings.filter(string => string.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var output = List[String]()\n\
    \        for (s <- strings) {\n            if (s.substring(0, min(s.length, prefix.length))\
    \ == prefix) {\n                output = s :: output\n            }\n        }\n\
    \        return output\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(\
    \ s => s.startsWith(prefix) )\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(\n\
    \          s => s.startsWith(prefix)\n        )\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var copy : List[String]\
    \ = List[String]()\n        for (s <- strings) {\n            if (s.startsWith(prefix))\
    \ copy ::= s\n        }\n        return copy.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings match {\n\
    \            case Nil => Nil\n            case s :: ss => {\n                if\
    \ (s.startsWith(prefix)) s :: filterByPrefix(ss, prefix)\n                else\
    \ filterByPrefix(ss, prefix)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(e\
    \ => e.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(str\
    \ => str.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(prefix.r.findFirstIn(_).isDefined)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // TODO: Fill in.\n\
    \        strings.filter(x => x.startsWith(prefix))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // <<< Complete\n\
    \        return List[String]()\n        // >>> Complete\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpriry6wp2.scala:16)\n\tat Problem.main(tmpriry6wp2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var output : List[String]\
    \ = List()\n        var found : Boolean = false\n        for (s <- strings) {\n\
    \            if (s.startsWith(prefix)) {\n                output = output :+ s\n\
    \                found = true\n            }\n        }\n        if (found) {\n\
    \            return output\n        } else {\n            return List()\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ == 0) return List[String]()\n        if (strings.head.startsWith(prefix)) return\
    \ List(strings.head) ::: filterByPrefix(strings.tail, prefix)\n        return\
    \ filterByPrefix(strings.tail, prefix)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var buf = ListBuffer[String]()\n\
    \        for (str <- strings) {\n            if (str.startsWith(prefix)) buf +=\
    \ str\n        }\n        buf.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (str <- strings) {\n            if (str.startsWith(prefix)) {\n \
    \               result = str :: result\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(string\
    \ => string.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ <= 0) {\n            return strings\n        }\n        val h = strings.head\n\
    \        if (h.startsWith(prefix)) {\n            return List(h) ++ filterByPrefix(strings.tail,\
    \ prefix)\n        }\n        return filterByPrefix(strings.tail, prefix)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(string\
    \ => string.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(string\
    \ => string.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ <= 0) {\n            return List[String]()\n        }\n        if (strings.head.startsWith(prefix))\
    \ {\n            return strings.head :: filterByPrefix(strings.tail, prefix)\n\
    \        }\n        return filterByPrefix(strings.tail, prefix)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"\
    john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((s\
    \ : String) => s.startsWith(prefix))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // TODO: Define\
    \ the body of this function.\n        return strings.filter(x => x.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(w\
    \ => w.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(string\
    \ => string.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(str\
    \ => str.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        ???\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.filterByPrefix(tmpbqo6nxca.scala:10)\n\tat Problem$.main(tmpbqo6nxca.scala:13)\n\
    \tat Problem.main(tmpbqo6nxca.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // YOUR CODE HERE\n\
    \        var list: List[String] = List()\n        for (string <- strings) {\n\
    \            if (string.startsWith(prefix)) {\n                list = string ::\
    \ list\n            }\n        }\n        list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.isEmpty)\
    \ {\n            List[String]()\n        } else {\n            val head = strings.head\n\
    \            val tail = strings.tail\n            if (head.startsWith(prefix))\
    \ {\n                head :: filterByPrefix(tail, prefix)\n            } else\
    \ {\n                filterByPrefix(tail, prefix)\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((x\
    \ : String) => (x.startsWith(prefix)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val prefixSet =\
    \ strings.filter(_.startsWith(prefix))\n        prefixSet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        def recur(strings\
    \ : List[String], prefix : String, l : List[String]) : List[String] = {\n    \
    \        if (strings.isEmpty) return l else if (strings.head.startsWith(prefix))\
    \ l :+ strings.head else l\n        }\n        recur(strings, prefix, List[String]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_otg_85p.scala:17)\n\tat Problem.main(tmp_otg_85p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Create a new\
    \ list for strings that start with prefix.\n        var filtered : List[String]\
    \ = Nil\n        // For each string in strings, if it starts with prefix, add\
    \ it to the\n        // filtered list.\n        for (str <- strings) {\n     \
    \       if (str.startsWith(prefix)) {\n                filtered = str :: filtered\n\
    \            }\n        }\n        // Return the filtered list.\n        return\
    \ filtered\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(name\
    \ => name.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((s\
    \ : String) => s.startsWith(prefix))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (str <- strings) {\n            if (str.indexOf(prefix) == 0) {\n\
    \                result = str :: result\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(word\
    \ => word.indexOf(prefix) == 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (string <- strings) if (string.startsWith(prefix)) result = string\
    \ :: result\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var matches = new\
    \ ListBuffer[String]()\n        for (string <- strings) {\n            if (string.startsWith(prefix))\
    \ {\n                matches += string\n            }\n        }\n        return\
    \ matches.toList\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n      strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        def loop(s : List[String],\
    \ prefix : String, acc : List[String]) : List[String] = {\n            if (s.length\
    \ == 0) acc\n            else if (s.head.substring(0, prefix.length) == prefix)\
    \ loop(s.tail, prefix, acc :+ s.head)\n            else loop(s.tail, prefix, acc)\n\
    \        }\n        loop(strings, prefix, List[String]())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var prefixList\
    \ = new ListBuffer[String]\n        for (s <- strings) {\n            if (s.startsWith(prefix))\
    \ prefixList += s\n        }\n        return prefixList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"\
    john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // write your code\
    \ here\n        // return strings\n        if (strings.isEmpty) List[String]()\n\
    \        else if (strings.head.startsWith(prefix)) List(strings.head) ::: filterByPrefix(strings.tail,\
    \ prefix)\n        else filterByPrefix(strings.tail, prefix)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var results = List[String]()\n\
    \        for (s <- strings) {\n            if (s.length > 0 && s(0) == prefix(0))\
    \ {\n                results = s :: results\n            }\n        }\n      \
    \  return results\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1grqav4.scala:20)\n\tat Problem.main(tmpo1grqav4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(word\
    \ => word.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(string\
    \ => string.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((s)\
    \ => (s.length >= prefix.length && (s.substring(0, prefix.length) == prefix)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(str\
    \ => str.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var filtered =\
    \ List[String]()\n        for (s <- strings) {\n            if (s.startsWith(prefix))\
    \ {\n                filtered = s :: filtered\n            }\n        }\n    \
    \    filtered\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter((str\
    \ : String) => str.startsWith(prefix))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        def recurse(currentList\
    \ : List[String], resultList : List[String]) : List[String] = {\n            currentList\
    \ match {\n                case Nil => resultList\n                case x :: xs\
    \ => if (x.startsWith(prefix)) recurse(xs, resultList :+ x) else recurse(xs, resultList)\n\
    \            }\n        }\n        recurse(strings, List[String]())\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (string <- strings) {\n            if (string.length() > 0 && string.substring(0,\
    \ 1) == prefix) {\n                result = string :: result\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbnqgxtkw.scala:20)\n\tat Problem.main(tmpbnqgxtkw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // TODO: Return\
    \ a version of strings where only those starting with prefix are retained.\n \
    \       // Hint: Use the filter method of Lists and the startsWith method of Strings.\n\
    \        // Hint: Returns strings.filter(string => string.startsWith(prefix))\n\
    \        strings.filter(_.startsWith(prefix))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var output : List[String]\
    \ = List[String]()\n        for (string <- strings) {\n            if (string.startsWith(prefix))\
    \ {\n                output = output :+ string\n            }\n        }\n   \
    \     return output\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter((x\
    \ : String) => x.startsWith(prefix))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var ret : List[String]\
    \ = List[String]()\n        for (string <- strings) {\n            if (string.startsWith(prefix))\
    \ {\n                ret = ret :+ string\n            }\n        }\n        return\
    \ ret\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(str\
    \ => str.indexOf(prefix) == 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        val start = 0\n\
    \        val end = prefix.length\n        return strings.filter(s => s.substring(start,\
    \ end) == prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n      if (strings.isEmpty)\n\
    \        return List[String]()\n      if (strings.head.startsWith(prefix))\n \
    \       return strings.head :: filterByPrefix(strings.tail, prefix)\n      return\
    \ filterByPrefix(strings.tail, prefix)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result : List[String]\
    \ = List()\n        for (str <- strings) {\n            if (str.startsWith(prefix))\
    \ {\n                result = result :+ str\n            }\n        }\n      \
    \  return result\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(str\
    \ => { str.startsWith(prefix) })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // YOUR CODE HERE\n\
    \        def helper(strings : List[String], prefix : String, output : List[String])\
    \ : List[String] = {\n            strings match {\n                case Nil =>\
    \ output\n                case head :: tail => {\n                    if (head.startsWith(prefix))\
    \ {\n                        helper(tail, prefix, output :+ head)\n          \
    \          } else {\n                        helper(tail, prefix, output)\n  \
    \                  }\n                }\n            }\n        }\n        helper(strings,\
    \ prefix, List[String]())\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.isEmpty)\
    \ {\n            return strings\n        }\n        if (strings.head.startsWith(prefix))\
    \ {\n            return strings.head :: filterByPrefix(strings.tail, prefix)\n\
    \        }\n        return filterByPrefix(strings.tail, prefix)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"\
    john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // TODO: Provide\
    \ definition here.\n        def startWith(s: String, prefix: String): Boolean\
    \ = {\n            if (s.length < prefix.length) false\n            else if (s.substring(0,\
    \ prefix.length) == prefix) true\n            else false\n        }\n        var\
    \ lst = List[String]()\n        for (i <- strings) {\n            if (startWith(i,\
    \ prefix)) lst = lst :+ i\n        }\n        lst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n      def helper(strings\
    \ : List[String], prefix : String, result : List[String]) : List[String] = {\n\
    \        if (strings.isEmpty) result\n        else {\n          val head = strings.head\n\
    \          if (head.startsWith(prefix)) helper(strings.tail, prefix, result :+\
    \ head)\n          else helper(strings.tail, prefix, result)\n        }\n    \
    \  }\n      helper(strings, prefix, List[String]())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.isEmpty)\
    \ {\n            List[String]()\n        } else {\n            val head : String\
    \ = strings.head\n            val rest : List[String] = strings.tail\n       \
    \     if (head.startsWith(prefix)) {\n                (head :: filterByPrefix(rest,\
    \ prefix))\n            } else {\n                filterByPrefix(rest, prefix)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // TODO: implement\
    \ this method\n        return null\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.filterByPrefix(scala.collection.immutable.List,\
    \ String)\" is null\n\tat Problem$.main(tmpxt_v3_wc.scala:14)\n\tat Problem.main(tmpxt_v3_wc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result : List[String]\
    \ = List[String]()\n        for (str <- strings) {\n            if (str.length\
    \ >= prefix.length && str.substring(0, prefix.length) == prefix) {\n         \
    \       result = result :+ str\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // TODO: Change\
    \ to your implementation.\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.filterByPrefix(scala.collection.immutable.List,\
    \ String)\" is null\n\tat Problem$.main(tmprtcikh7i.scala:14)\n\tat Problem.main(tmprtcikh7i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        ???\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.filterByPrefix(tmpbqo6nxca.scala:10)\n\tat Problem$.main(tmpbqo6nxca.scala:13)\n\
    \tat Problem.main(tmpbqo6nxca.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        if (strings.length\
    \ == 0)\n            return strings\n        val head = strings.head\n       \
    \ val tail = strings.tail\n        if (head.startsWith(prefix))\n            List(head)\
    \ ::: filterByPrefix(tail, prefix)\n        else\n            filterByPrefix(tail,\
    \ prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(e\
    \ => e.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        // Write your solution\
    \ here.\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdcfr5fe7.scala:9:81\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mfilterByPrefix\e\
    [0m(\e[36mstrings\e[0m : \e[35mList\e[0m[\e[35mString\e[0m], \e[36mprefix\e[0m\
    \ : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \           Found:    Unit\n\e[31m   |\e[0m                                  \
    \                Required: List[String]\n\e[31m10 |\e[0m        \e[34m// Write\
    \ your solution here.\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter((str)\
    \ => str.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result : List[String]\
    \ = List[String]()\n        for (string <- strings) {\n            if (string.startsWith(prefix))\
    \ {\n                result = result :+ string\n            }\n        }\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        return strings.filter(x\
    \ => x.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var res : List[String]\
    \ = List[String]()\n        for (s <- strings) {\n            if (s.startsWith(prefix))\
    \ res = s :: res\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        def compare(s :\
    \ String) : Boolean = s.startsWith(prefix)\n        strings.filter(compare)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(str\
    \ => str.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (string <- strings) {\n            if (string.startsWith(prefix))\
    \ {\n                result = result :+ string\n            }\n        }\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(x\
    \ => x.indexOf(prefix) == 0)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(st\
    \ => st.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(string\
    \ => string.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(_.startsWith(prefix))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        var newList = List[String]()\n\
    \        for (str <- strings) {\n            if (str.startsWith(prefix)) newList\
    \ ::= str\n        }\n        newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        for {s <- strings\
    \ if s.startsWith(prefix)} yield s\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
    \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\"\
    )), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
    \ : List[String], prefix : String) : List[String] = {\n        strings.filter(s\
    \ => s.startsWith(prefix))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterByPrefix((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterByPrefix((List[String](\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\",\
    \ \"xxx\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
