name: HumanEval_14_all_prefixes
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of all prefixes from shortest to longest of the input string\n\
  \    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\", \"abc\"\
  ))\n    def allPrefixes(string : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
  )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
  a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
  WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
completions: ['        (0 to string.length).map(string.substring(0, _)).toList', " \
    \       if (string.isEmpty) return List(\"\")\n        (0 to string.length - 1).map(x\
    \ => string.substring(0, x + 1)).toList", "        // Prefix is the current prefix\
    \ we are constructing\n        // >>> prefix\n        // (\"a\")\n        // >>>\
    \ prefix = prefix + string(i)\n        // prefix = \"ab\"\n        // >>> prefix\n\
    \        // (\"ab\")\n        // >>> prefix = prefix + string(i)\n        // prefix\
    \ = \"abc\"\n        // >>> prefix\n        // (\"abc\")\n        var prefix =\
    \ \"\"\n        // prefixes is the list of all prefixes\n        // >>> prefixes\n\
    \        // (List[String](\"a\", \"ab\", \"abc\"))\n        var prefixes = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            prefix = prefix + string(i)\n\
    \            prefixes = prefix :: prefixes\n        }\n        return prefixes",
  '        (for (index <- 0 to string.length - 1) yield string.substring(0, index
    + 1)).toList', "        val charlist = string.toList\n        var prefixlist =\
    \ List[String]()\n        var prefix = \"\"\n        for (char <- charlist) {\n\
    \            prefix += char\n            prefixlist = prefixlist :+ prefix\n \
    \       }\n        return prefixlist", "        def helper(s : String, result\
    \ : List[String]) : List[String] = {\n            if (s.isEmpty) result\n    \
    \        else {\n                val prefix = s.substring(0, s.length - 1)\n \
    \               helper(prefix, prefix :: result)\n            }\n        }\n \
    \       helper(string, List(string))", "        // The list of all prefixes\n\
    \        val prefixes = new ListBuffer[String]\n        // A prefix array for\
    \ string with length N would have N+1 elements\n        for (i <- 0 to string.length)\
    \ {\n            prefixes += string.substring(0, i)\n        }\n        return\
    \ prefixes.toList", "        var results = List[String]()\n        for (i <- 0\
    \ to string.length - 1) {\n            results = results :+ string.substring(0,\
    \ i + 1)\n        }\n        return results", '        (for (len <- 1 to string.length)
    yield string.substring(0, len)).toList', "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            val prefix = string.substring(0,\
    \ i)\n            result = prefix :: result\n        }\n        return result",
  "        val len = string.length\n        var result = List[String]()\n        for\
    \ (i <- 0 until len) result = result ++ List(string.substring(0, i + 1))\n   \
    \     result", "        var result = List[String]()\n        for (i <- 0 to string.length\
    \ - 1) result ::= string.substring(0, i + 1)\n        result.reverse", "     \
    \   var result = List[String]()\n        for (i <- 1 to string.length) result\
    \ = string.substring(0, i) :: result\n        result", "        if (string.length\
    \ == 0) List()\n        else {\n            var lst = List[String]()\n       \
    \     var prefix = \"\"\n            for (c <- string) {\n                prefix\
    \ += c\n                lst = prefix :: lst\n            }\n            lst.reverse\n\
    \        }", "        if (string.length == 0)\n            return List()\n   \
    \     if (string.length == 1)\n            return List(string)\n        val all\
    \ = allPrefixes(string.substring(0, string.length - 1))\n        all ++ List(string)",
  "        def allPrefixesHelper(string : String, i : Int) : List[String] = {\n  \
    \          if (i == string.length) List()\n            else {\n              \
    \  string.substring(0, i + 1) :: allPrefixesHelper(string, i + 1)\n          \
    \  }\n        }\n        allPrefixesHelper(string, 0)", '        return string.inits.toList.map((str
    : String) => str.mkString)', "        if (string.isEmpty) Nil\n        else string\
    \ :: allPrefixes(string.substring(0, string.length - 1))", "        if (string.length\
    \ == 0) List[String]()\n        else if (string.length == 1) List[String](string)\n\
    \        else List[String](string) ++ allPrefixes(string.slice(0, string.length\
    \ - 1))", "        val prefixes = new ListBuffer[String]\n        for (i <- (0\
    \ to string.length)) {\n            prefixes += string.substring(0, i)\n     \
    \   }\n        prefixes.toList", "        if (string.length() == 0)\n        \
    \    List()\n        else\n            List(string.substring(0, 1)) ++ allPrefixes(string.substring(1))",
  "        def helper(index : Int, string : String) : List[String] = {\n         \
    \   if (index == string.length) Nil\n            else string.substring(0, index)\
    \ :: helper(index + 1, string)\n        }\n        helper(1, string)", "     \
    \   var answer = List[String]()\n        for (i <- 0 to string.length - 1) {\n\
    \            answer = answer :+ string.substring(0, i + 1)\n        }\n      \
    \  return answer", "        var result = List[String]()\n        for (i <- 1 to\
    \ string.length) {\n            result = result :+ string.substring(0, i)\n  \
    \      }\n        return result", '        string.indices.toList.map(x => string.take(x
    + 1))', "        val length = string.length\n        var prefixes = List[String]()\n\
    \        for (i <- 1 to length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        prefixes", '        (1 to string.length).map(string.substring(0,
    _)).toList', "        var list = List[String]()\n        for (i <- 1 to string.length)\
    \ {\n            list = list ++ List(string.substring(0, i))\n        }\n    \
    \    return list", "        if (string.length == 0) return List[String]()\n  \
    \      (for (i <- 1 to string.length) yield string.substring(0, i)).toList", " \
    \       if (string.length <= 1) List(string)\n        else string.take(1) :: allPrefixes(string.drop(1))",
  "        def allPrefixesHelp(str : String, accum : List[String]) : List[String]\
    \ = {\n            if (str.isEmpty) accum\n            else allPrefixesHelp(str.init,\
    \ accum :+ str)\n        }\n        allPrefixesHelp(string, List())", "      \
    \  if (string.length == 0) List()\n        else if (string.length == 1) List(string)\n\
    \        else string :: allPrefixes(string.substring(0, string.length - 1))",
  "        val prefixes = new ListBuffer[String]\n        for (i <- 1 to string.length)\
    \ {\n            prefixes += string.substring(0, i)\n        }\n        prefixes.toList",
  "        if (string.length == 0) List()\n        else string :: allPrefixes(string.slice(0,\
    \ string.length - 1))", '        return Range(1, string.length() + 1).map(string.take(_)).toList',
  '        return (string.indices.map(i => string.substring(0, i + 1))).toList', '        (for
    (i <- 0 to string.length - 1) yield string.substring(0, i + 1)).toList', "   \
    \     val allSuffixes = string.indices.map(string.take(_)).toList\n        return\
    \ allSuffixes.reverse", "        def allPrefixesAcc(string : String, acc : List[String])\
    \ : List[String] = {\n            if (string.length == 0) acc.reverse\n      \
    \      else allPrefixesAcc(string.tail, string.head.toString :: acc)\n       \
    \ }\n        allPrefixesAcc(string, List())", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        prefixes.toList", "        var str = string\n   \
    \     var prefixes = List[String]()\n        while (str.length > 0) {\n      \
    \      prefixes ::= str\n            str = str.substring(0, str.length - 1)\n\
    \        }\n        prefixes", "      val n = string.length\n      (0 to n).map(string.take(_)).toList",
  '        return (0 to string.length - 1).map(string.substring(0, _ + 1)).toList',
  "        var res = List[String]()\n        for (i <- 0 to string.length - 1) {\n\
    \            res = res :+ string.substring(0, i + 1)\n        }\n        res",
  "        def prefixes(length : Int) : List[String] = {\n            if (length ==\
    \ 0) List()\n            else string.substring(0, length) :: prefixes(length -\
    \ 1)\n        }\n        prefixes(string.length)", "        val maxLength = string.length\n\
    \        (0 to maxLength).map(i => string.substring(0, i)).toList", "        val\
    \ length = string.length\n        var prefixes = List[String]()\n        for (i\
    \ <- 1 to length) {\n            prefixes = prefixes :+ string.substring(0, i)\n\
    \        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length-1) {\n            prefixes ::= string.substring(0,\
    \ i+1)\n        }\n        prefixes.reverse", '        return Range(1, string.length
    + 1).map(string.substring(0, _)).toList', "        val prefixes = new ArrayBuffer[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) result = string.substring(0, i) :: result\n\
    \        result", "        var result = List[String]()\n        for (i <- 0 to\
    \ string.length - 1) {\n            result = result :+ string.substring(0, i +\
    \ 1)\n        }\n        return result", "      var prefixes = List[String]()\n\
    \      for (i <- 0 to string.length - 1) {\n        prefixes = prefixes :+ string.substring(0,\
    \ i + 1)\n      }\n      return prefixes", "        var list : List[String] =\
    \ List()\n        for (i <- (0 to string.length)) {\n            list = list :+\
    \ string.substring(0, i)\n        }\n        return list", "        var prefs\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            prefs\
    \ = string.substring(0, i) :: prefs\n        }\n        prefs", "        val length\
    \ = string.length\n        var result = List[String]()\n        for (i <- 0 until\
    \ length) {\n            result = result :+ string.substring(0, i + 1)\n     \
    \   }\n        return result", '        (1 to string.length).map(string.substring(0,
    _)).toList', "        val substr = string.split(\"\");\n        val result = (for\
    \ (i <- 1 to substr.length) yield (substr.slice(0, i).mkString(\"\"))).toList\n\
    \        return result", "        val length = string.length\n        (for (index\
    \ <- 0 until length) yield string.substring(0, index + 1)).toList", "        def\
    \ loop(start : Int, end : Int) : List[String] = {\n            if (start > end)\
    \ Nil\n            else (string.substring(0, start) :: loop(start + 1, end))\n\
    \        }\n        loop(1, string.length)", "        // I don't think there's\
    \ a good way to do this without using iterators, which is ugly.\n        val prefixList\
    \ = Buffer[String]()\n        for (i <- 0 to string.length - 1) {\n          \
    \  prefixList += string.slice(0, i + 1)\n        }\n        prefixList.toList",
  "        // Find all prefixes of the input string\n        // >>> List(\"a\", \"\
    ab\", \"abc\")\n        (0 to string.length).map(i => string.substring(0, i)).toList",
  '        (0 to string.length).toList.map(i => string.substring(0, i))', "      \
    \  val l = string.length\n        (for (i <- 1 to l) yield string.substring(0,\
    \ i)).toList", "        var prefixes = List[String]()\n        for (i <- 0 to\
    \ string.length) {\n            prefixes = prefixes :+ string.substring(0, i)\n\
    \        }\n        return prefixes", "        var ret = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            ret += string.substring(0,\
    \ i + 1)\n        }\n        return ret.toList", "        def rec(i : Int) : List[String]\
    \ = {\n            if (i == string.length) Nil\n            else string.substring(0,\
    \ i) :: rec(i + 1)\n        }\n        rec(1)", "        def getPrefixes(string\
    \ : String, list : List[String]) : List[String] = string match {\n           \
    \ case \"\" => list\n            case str : String => getPrefixes(str.tail, list\
    \ :+ str)\n        }\n        return getPrefixes(string, List[String]())", " \
    \       var prefixes = List[String]()\n        for (i <- 0 to string.length) prefixes\
    \ ::= string.substring(0, i)\n        prefixes.reverse", "        val n = string.length\n\
    \        (for (i <- 0 until n) yield string.substring(0, i + 1)).toList", "  \
    \      var result = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            result = result :+ string.substring(0, i)\n        }\n        return\
    \ result", "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = result :+ string.slice(0, i)\n        }\n        return\
    \ result", "        def prefixes(string : String, charsLeft : Int) : List[String]\
    \ = {\n            if (charsLeft == 0) List[String]()\n            else string.take(charsLeft)\
    \ :: prefixes(string, charsLeft - 1)\n        }\n        prefixes(string, string.length)",
  "        var xs = new ListBuffer[String]\n        for (i <- 0 to string.length -\
    \ 1) xs += string.substring(0, i + 1)\n        xs.toList", "        if (string.length\
    \ == 0) return List[String]()\n        if (string.length == 1) return List[String](string)\n\
    \        var prefixes = List[String]()\n        for (i <- 0 to string.length -\
    \ 1) {\n            prefixes = string.substring(0, i + 1) :: prefixes\n      \
    \  }\n        return prefixes", "        var list = List[String]()\n        var\
    \ subString = \"\"\n        for (letter <- string) {\n            subString +=\
    \ letter\n            list = list :+ subString\n        }\n        return list",
  "        var lst = List[String]()\n        for (i <- (0 to string.length - 1)) {\n\
    \            lst = lst ++ List(string.substring(0, i + 1))\n        }\n      \
    \  return lst", "        var prefixes = List[String]()\n        for (i <- 0 to\
    \ string.length) {\n            prefixes = string.substring(0, i) :: prefixes\n\
    \        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) prefixes ::= string.substring(0, i\
    \ + 1)\n        prefixes.reverse", '        (1 to string.length).toList.map(string.substring(0,
    _))', '        (for (i <- 0 to string.length) yield string.substring(0, i)).toList',
  "        if (string.length() == 0)\n            return List[String]()\n        val\
    \ prefix = string.take(string.length() - 1)\n        prefix :: allPrefixes(prefix)",
  "        val numPrefixes = string.length\n        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 1 to numPrefixes) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        var list : List[String] =\
    \ List()\n        for (i <- 0 to string.length) {\n            list = list :+\
    \ string.substring(0, i)\n        }\n        return list", '        (0 to string.length).map(string.substring(0,
    _)).toList', "        var prefixes = new ListBuffer[String]\n        for (i <-\
    \ 0 to string.length - 1) {\n            prefixes += string.substring(0, i + 1)\n\
    \        }\n        return prefixes.toList", "        if (string.length() == 0)\
    \ List()\n        else if (string.length() == 1) List(string)\n        else string\
    \ :: allPrefixes(string.substring(0, string.length() - 1))", '        (1 to string.length).map(string.substring(0,
    _)).toList', '        (for (i <- 0 to string.length) yield string.substring(0,
    i)).toList', '        return List(string).flatMap(s => (0 to s.length).map(s.substring(0,
    _)))', "        var prefs = List[String]()\n        for (i <- 0 to string.length\
    \ - 1) {\n            prefs = prefs :+ string.substring(0, i + 1)\n        }\n\
    \        prefs", "        val all = new ArrayBuffer[String]()\n        var prefix\
    \ = new StringBuilder()\n        string.foreach(ch => {\n            prefix.append(ch)\n\
    \            all += prefix.toString\n        })\n        all.toList", "      \
    \  val prefixes = new ListBuffer[String]()\n        (0 to string.length).foreach(i\
    \ => prefixes += string.substring(0, i))\n        prefixes.toList", "        val\
    \ list = ListBuffer[String]()\n        val characters = string.toList\n      \
    \  for (i <- 0 to characters.length - 1) {\n            val prefix = characters.slice(0,\
    \ i + 1).mkString\n            list += prefix\n        }\n        list.toList",
  "        def loop(prefix : String, suffix : String, prefixes : List[String]) : List[String]\
    \ = {\n            if (suffix.length() == 0) prefixes\n            else loop(prefix\
    \ + suffix.head, suffix.tail, prefixes :+ (prefix + suffix.head))\n        }\n\
    \        loop(\"\", string, List[String]())", "        val res = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) {\n            res += string.substring(0,\
    \ i)\n        }\n        res.toList", "        var list = List[String]()\n   \
    \     for (i <- 1 to string.length) list = string.substring(0, i) :: list\n  \
    \      list", "        var prefixes = List[String]()\n        for (i <- 1 to string.length)\
    \ {\n            prefixes = prefixes :+ string.substring(0, i)\n        }\n  \
    \      return prefixes", "        val l = ListBuffer[String]()\n        for (i\
    \ <- 0 to string.length - 1) {\n            l += string.substring(0, i + 1)\n\
    \        }\n        l.toList", "        val n = string.length\n        var prefixes\
    \ = List[String]()\n        for (i <- 0 until n) prefixes ::= string.slice(0,\
    \ i + 1)\n        prefixes.reverse", "        val prefixes = ListBuffer[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        prefixes.toList", "        val length = string.length\n\
    \        (0 to length).toList.map(i => string.substring(0, i))", "        var\
    \ result = List[String]()\n        for (i <- 0 to string.length - 1) {\n     \
    \       result = result :+ string.substring(0, i + 1)\n        }\n        return\
    \ result", "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = string.substring(0, i) :: result\n        }\n      \
    \  return result", '        string.inits.toList.reverse.init', "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length - 1) result = result\
    \ :+ string.substring(0, i + 1)\n        result", "        def allPrefixes(string\
    \ : String, current : List[String]) : List[String] = {\n            if (string.length\
    \ == 0) current\n            else allPrefixes(string.substring(1), string.substring(0,\
    \ 1) :: current)\n        }\n        allPrefixes(string, List()).reverse", '        (for
    (i <- 1 to string.length) yield string.substring(0, i)).toList', "        if (string.length\
    \ == 0) List(\"\")\n        else {\n            val pre = allPrefixes(string.substring(0,\
    \ string.length - 1))\n            pre ++ pre.map(_ + string.last)\n        }",
  "        val length = string.length()\n        val list = new ListBuffer[String]()\n\
    \        for (i <- 0 until length) list += string.substring(0, i + 1)\n      \
    \  list.toList", "        val result = new ListBuffer[String]()\n        for (i\
    \ <- 0 to string.length) {\n            result += string.slice(0, i)\n       \
    \ }\n        result.toList", "        return (string.length match {\n        \
    \    case 0 => List[String]()\n            case _ => string.indices.map(i => string.substring(0,\
    \ i + 1)).toList\n        })", "      val result = new ListBuffer[String]\n  \
    \    val len = string.length\n      for (i <- 0 until len) {\n        result +=\
    \ string.substring(0, i + 1)\n      }\n      result.toList", "        val n =\
    \ string.length\n        val output = new ListBuffer[String]\n        for (i <-\
    \ 1 to n) {\n            output += string.substring(0, i)\n        }\n       \
    \ output.toList", "        if (string.length == 0) List()\n        else allPrefixes(string.substring(0,\
    \ string.length - 1)) :+ string", "        var prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        return prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 1 to string.length) result = result :+ string.substring(0,\
    \ i)\n        result", '        (0 to string.length).map(string.substring(0, _)).toList',
  "        val list = new ListBuffer[String]\n        for (i <- 0 to string.length)\
    \ {\n            list += string.substring(0, i)\n        }\n        list.toList",
  "        if (string.length == 0) return List[String]()\n        if (string.length\
    \ == 1) return List[String](string(0).toString)\n        return List[String](string(0).toString)\
    \ ::: allPrefixes(string.substring(1))", "        if (string.length() == 0) {\n\
    \            return Nil\n        }\n        val output = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length() - 1) {\n            output += string.substring(0,\
    \ i + 1)\n        }\n        return output.toList", "      var result = List[String]()\n\
    \      for (i <- 1 to string.length) {\n        result = result :+ string.substring(0,\
    \ i)\n      }\n      return result", '        (for (i <- 0 to string.length) yield
    string.substring(0, i)).toList', "        val max_length = string.length - 1\n\
    \        def helper(string : String, pos : Int) : List[String] = {\n         \
    \   if (pos == max_length) {\n                List(string.substring(0, pos + 1))\n\
    \            } else {\n                List(string.substring(0, pos + 1)) :::\
    \ helper(string, pos + 1)\n            }\n        }\n        helper(string, 0)",
  '        (for (i <- (0 to string.length)) yield string.slice(0, i)).toList', '        string.indices.toList.map(i
    => string.substring(0, i + 1))', "        val length = string.length()\n     \
    \   def allPrefixesWithLength(length : Int) : List[String] = {\n            if\
    \ (length == 0) List[String]()\n            else allPrefixesWithLength(length\
    \ - 1) :+ string.substring(0, length)\n        }\n        allPrefixesWithLength(length)",
  "        var prefixes = List[String]()\n        for (i <- 0 to string.length) prefixes\
    \ = string.substring(0, i) :: prefixes\n        return prefixes", "        //\
    \ Helper function that returns true if the input string is nonempty\n        def\
    \ nonEmpty(x : String) = {\n            return x.length() > 0\n        }\n   \
    \     // We don't care about the input, only the length\n        val list : List[Int]\
    \ = (1 to string.length()).toList\n        // Use the list of prefix lengths to\
    \ generate the list of prefixes\n        val prefixes : List[String] = list.map(x\
    \ => string.substring(0, x))\n        // Filter out empty strings\n        return\
    \ prefixes.filter(nonEmpty)", '        (1 to string.length).map(string.substring(0,
    _)).toList', "        val prefixes = new ListBuffer[String]()\n        for (i\
    \ <- 0 to string.length) {\n            prefixes += string.substring(0, i)\n \
    \       }\n        prefixes.toList", '        (0 to string.length).map(index =>
    string.substring(0, index)).toList', "        val n = string.length\n        List.range(1,\
    \ n + 1).map(string.substring(0, _)).toList", "        def allPrefixesHelper(leftOver\
    \ : String, length : Int, prefixes : List[String]) : List[String] = {\n      \
    \      if (length <= 0) prefixes\n            else allPrefixesHelper(leftOver.tail,\
    \ length - 1, (prefixes :+ leftOver.take(length)))\n        }\n        allPrefixesHelper(string,\
    \ string.length, List())", "        val len = string.length\n        var list\
    \ = List[String]()\n        for (i <- (0 to len)) list = list :+ string.slice(0,\
    \ i)\n        list", '        return (0 to string.length).map(x => string.substring(0,
    x)).toList', "        if (string.length == 0)\n            List(\"\")\n      \
    \  else {\n            val allPrefixes = new ListBuffer[String]\n            (0\
    \ until string.length).foreach(i => allPrefixes += string.substring(0, i + 1))\n\
    \            allPrefixes.toList\n        }", "        val l = string.length\n\
    \        return string.indices.map(i => string.substring(0, l - i)).toList", '        (0
    to string.length).map(i => string.substring(0, i)).toList', "        val temp\
    \ = new ArrayBuffer[String]()\n        var prefix = \"\"\n        for (ch <- string)\
    \ {\n            prefix += ch\n            temp += prefix\n        }\n       \
    \ temp.toList", "        val L = new ArrayBuffer[String]\n        for (i <- 1\
    \ to string.length) {\n            L += string.substring(0, i)\n        }\n  \
    \      L.toList", "        var list : List[String] = List()\n        for (i <-\
    \ 0 to string.length) {\n            list = list :+ string.substring(0, i)\n \
    \       }\n        return list", "        var result = List[String]()\n      \
    \  for (prefixLength <- 1 to string.length) {\n            result = result :+\
    \ string.substring(0, prefixLength)\n        }\n        return result", "    \
    \    var toReturn = List[String]()\n        val length = string.length\n     \
    \   if (length == 0) {\n            return toReturn\n        }\n        for (i\
    \ <- 0 until length) {\n            toReturn = toReturn :+ string.substring(0,\
    \ i + 1)\n        }\n        return toReturn", "        var prefixes = new ListBuffer[String]()\n\
    \        for (i <- 1 to string.length) {\n            prefixes += string.slice(0,\
    \ i)\n        }\n        return prefixes.toList", "        var prefixes = new\
    \ ListBuffer[String]\n        for (i <- 0 to string.length - 1) {\n          \
    \  prefixes += string.substring(0, i + 1)\n        }\n        return prefixes.toList",
  "        var list = List[String]()\n        for (i <- 0 to string.length-1) list\
    \ = list :+ string.substring(0, i+1)\n        list", "        val len = string.length\n\
    \        val prefixes = ListBuffer[String]()\n        for (i <- 0 until len) {\n\
    \            prefixes += string.substring(0, i + 1)\n        }\n        prefixes.toList",
  "        val len = string.length\n        (for (i <- 0 until len) yield string.substring(0,\
    \ i + 1)).toList", "        val result = new ListBuffer[String]()\n        for\
    \ (i <- 0 to string.length - 1) {\n            result += string.substring(0, i\
    \ + 1)\n        }\n        result.toList", '        string.inits.toList.reverse.init',
  "        var result = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            result = result :+ string.substring(0, i)\n        }\n        return\
    \ result", "        def rec(i : Int) : List[String] = {\n            if (i >=\
    \ string.length) List()\n            else string.substring(0, i + 1) :: rec(i\
    \ + 1)\n        }\n        rec(0)", "        val array = new Array[String](string.length)\n\
    \        for (i <- 1 to string.length) array(i - 1) = string.substring(0, i)\n\
    \        array.toList", "        if (string.isEmpty) {\n            return List[String]()\n\
    \        }\n        val prefixes = new ListBuffer[String]\n        for (index\
    \ <- 0 to string.length - 1) {\n            prefixes += string.substring(0, index\
    \ + 1)\n        }\n        return prefixes.toList", '        (1 to string.length).toList.map(string.take(_))',
  "        if (string.length == 0) return List[String]()\n        return List[String](string.take(1))\
    \ ++ allPrefixes(string.drop(1))", '        (1 to string.length).map(x => string.substring(0,
    x)).toList', "        val l = string.length\n        (0 to l).map(i => string.substring(0,\
    \ i)).toList", "        val list = string.split(\"\").toList\n        list.indices.map(i\
    \ => list.slice(0, i+1).mkString(\"\")).toList", "        var result = new ListBuffer[String]()\n\
    \        for (i <- 0 to string.length - 1) result += string.substring(0, i + 1)\n\
    \        return result.toList", "        var lst = List[String]()\n        for\
    \ (i <- 0 to string.length - 1) {\n            lst = lst :+ string.substring(0,\
    \ i + 1)\n        }\n        return lst", '        (for(i <- 0 to string.length)
    yield string.substring(0, i)).toList', "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result ::= string.substring(0,\
    \ i)\n        }\n        result.reverse", "        var list : List[String] = List()\n\
    \        for (i <- 0 to string.length) {\n            list = list :+ string.substring(0,\
    \ i)\n        }\n        return list", "        def helper(string : String, prefixes\
    \ : List[String]) : List[String] = {\n            if (string.length() == 0) prefixes\
    \ else helper(string.substring(0, string.length() - 1), prefixes :+ string)\n\
    \        }\n        helper(string, List[String]())", "        if (string.length\
    \ == 0) {\n            return List[String]()\n        }\n        else {\n    \
    \        val prefix = string.substring(0, string.length - 1)\n            val\
    \ result = allPrefixes(prefix)\n            if (result == List[String]()) {\n\
    \                return List[String](prefix)\n            }\n            else\
    \ {\n                return result :+ prefix\n            }\n        }", '        (1
    to string.length).map(string.substring(0, _)).toList', "        val result = ListBuffer[String]()\n\
    \        (0 to string.length - 1).foreach(i => result += string.substring(0, i\
    \ + 1))\n        result.toList", "        val n = string.length\n        val res\
    \ = ListBuffer[String]()\n        for (len <- 1 to n) {\n            res += string.substring(0,\
    \ len)\n        }\n        res.toList", "        val prefixes = new ListBuffer[String]()\n\
    \        for (i <- 0 to string.length()) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        val res = ListBuffer[String]()\n\
    \        for (i <- 1 to string.length) {\n            res += string.substring(0,\
    \ i)\n        }\n        res.toList", '        (1 to string.length).map(i => string.substring(0,
    i)).toList', "        if (string.length == 0) List[String]()\n        else {\n\
    \            var result = List[String]()\n            for (i <- 0 to string.length\
    \ - 1) result = string.substring(0, i + 1) :: result\n            result\n   \
    \     }", '        return string.map(ch => string.take(string.indexOf(ch) + 1)).toList',
  "        if (string.length == 0) List()\n        else {\n            val list :\
    \ List[String] = allPrefixes(string.substring(0, string.length - 1))\n       \
    \     list :+ string\n        }", "        var result = List[String]()\n     \
    \   for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        if (string.length == 0) return\
    \ List()\n        (1 to string.length).map(string.substring(0, _)).toList", " \
    \     var out : List[String] = List()\n      for (i <- 0 to string.length) out\
    \ = out :+ string.slice(0, i)\n      out", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = string.substring(0,\
    \ i + 1) :: prefixes\n        }\n        return prefixes", "        val output\
    \ = new ListBuffer[String]\n        for (i <- 0 to string.length) {\n        \
    \    output += string.substring(0, i)\n        }\n        output.toList", "  \
    \      if (string.length == 0) return List()\n        List(string) ++ allPrefixes(string.substring(0,\
    \ string.length - 1))", "        if (string.isEmpty) List()\n        else {\n\
    \            val allPrefixes = allPrefixes(string.substring(0, string.length -\
    \ 1))\n            allPrefixes :+ string.substring(0, string.length)\n       \
    \ }", '        return (for (i <- 0 to string.length) yield string.substring(0,
    i)).toList', "        // Standardize how many characters there will be in each\
    \ prefix\n        var prefixChars = List[Int]()\n        for (i <- 1 to string.length)\
    \ {\n            prefixChars = i :: prefixChars\n        }\n        // Generate\
    \ all the prefixes\n        var prefixes = List[String]()\n        for (chars\
    \ <- prefixChars) {\n            val prefix = string.substring(0, chars)\n   \
    \         prefixes = prefix :: prefixes\n        }\n        return prefixes",
  "        // Takes the input string, and returns the list of all prefixes\n     \
    \   // from the shortest to the longest prefix\n        def allPrefixesHelper(string\
    \ : String, list : List[String]) : List[String] = {\n            // Base case,\
    \ input string is empty, then return the list of prefixes\n            if (string.length\
    \ == 0) list\n            // Otherwise add the string to the list and call the\
    \ helper function\n            // on the remaining part of the string\n      \
    \      else allPrefixesHelper(string.substring(1), list :+ string)\n        }\n\
    \        // Call the helper function with an empty list\n        allPrefixesHelper(string,\
    \ List())", "        if (string.length == 0) {\n            List()\n        }\
    \ else {\n            List(string) ::: allPrefixes(string.substring(0, string.length\
    \ - 1))\n        }", '        string.zipWithIndex.flatMap(pair => string.substring(0,
    pair._2 + 1)).toList', "        def f(string : String, chars : List[Char]) : List[String]\
    \ = {\n            if (chars.isEmpty) List(string)\n            else string ::\
    \ f(string + chars.head, chars.tail)\n        }\n        f(string.substring(0,\
    \ 1), string.substring(1).toList)", '        (1 to string.length).toList.map(i
    => string.substring(0, i))', '        (for (i <- 0 to string.length - 1) yield
    string.slice(0, i + 1)).toList', "        val result = new ListBuffer[String]\n\
    \        for (i <- 1 to string.length) {\n            result += string.substring(0,\
    \ i)\n        }\n        result.toList", "        if (string.length == 0)\n  \
    \          return List[String]()\n        var result = List[String]()\n      \
    \  for (n <- 1 to string.length) {\n            result = result :+ string.slice(0,\
    \ n)\n        }\n        return result", "        val numPrefixes = string.length\n\
    \        val prefixes = new ListBuffer[String]\n        for (i <- 0 until numPrefixes)\
    \ {\n            prefixes += string.substring(0, i + 1)\n        }\n        prefixes.toList",
  "        var result = List[String]()\n        for (len <- 1 to string.length) {\n\
    \            result = result :+ string.substring(0, len)\n        }\n        return\
    \ result", "        // Convert list to list of lists where inner list is length\
    \ of the original list\n        def convert(list : List[String]) : List[List[String]]\
    \ = {\n            if (list.isEmpty) List[List[String]]()\n            else {\n\
    \                val first = List(list.head)\n                val rest = convert(list.tail)\n\
    \                first :: rest\n            }\n        }\n        convert(string.permutations.toList).foldLeft(List[String]())((x,\
    \ y) => x ::: y)", "        val m = string.length\n        (0 to m).map(string.substring(0,\
    \ _)).toList", "        def allPrefixesAcc(string : String, acc : List[String])\
    \ : List[String] = {\n            if (string.length == 0) acc\n            else\
    \ allPrefixesAcc(string.substring(0, string.length - 1), acc :+ string)\n    \
    \    }\n        allPrefixesAcc(string, List())", '        (0 to string.length).map(string.substring(0,
    _)).toList', "        val prefixList = ListBuffer[String]()\n        for (i <-\
    \ 1 to string.length) {\n            prefixList += string.substring(0, i)\n  \
    \      }\n        prefixList.toList"]
stop_tokens:
- "\n    }\n"
