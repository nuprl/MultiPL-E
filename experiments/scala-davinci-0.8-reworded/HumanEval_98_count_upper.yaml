name: HumanEval_98_count_upper
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s, count the number of uppercase vowels in even indices.\n\
  \    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    // >>>\
  \ countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"))\n  \
  \  // (0l)\n    def countUpper(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
  )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
  dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
  U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
  EEEE\")) == (2l));\n    }\n\n}\n"
completions: ['        return s.zipWithIndex.filter(t => t._2 % 2 == 0 && t._1.isUpper).length',
  "        // This function will be implemented by you\n        return 0l", "    \
    \    // Write your code here\n        0", "        var count : Long = 0\n    \
    \    // Write your code here\n        return count", "        // This is the main\
    \ function that runs your code\n        // Replace the ??? with your code\n  \
    \      ???", "        // Implement your code here\n        return 0l", '        ???',
  "        // Fill in the code here\n        val vowels = Set('A', 'E', 'I', 'O',\
    \ 'U')\n        s.zipWithIndex.count(x => vowels.contains(x._1) && x._2 % 2 ==\
    \ 0)", "        var count : Long = 0\n        for (i <- 1 until s.length by 2)\
    \ if (s(i).isUpper) count += 1\n        count", "        // Your code here\n \
    \       var count:Long = 0\n        s.foreach(ch => if (ch == 'A' || ch == 'E'\
    \ || ch == 'I' || ch == 'O' || ch == 'U') count += 1)\n        count", '        s.toList.zipWithIndex.foldLeft(0l)((n,
    c) => if (c._2 % 2 == 0 && "AEIOU".contains(c._1)) n + 1 else n)', '        0l',
  "        // Fill in the missing code!\n        var cnt = 0\n        for (i <- 0\
    \ until s.length if i % 2 == 0)\n            if (s(i).isUpper) cnt += 1\n    \
    \    cnt", '        return 0l', "        val sf = s.toArray.filter((x : Char)\
    \ => x.isUpper).filter((x : Char) => s.indexOf(x) % 2 == 0)\n        sf.length",
  "        // Fill in code here\n        ???", "        // START SOLUTION\n      \
    \  val vowels = Set('A', 'E', 'I', 'O', 'U')\n        (0 until s.length by 2).foldLeft(0l)((count,\
    \ i) => {\n            if (vowels.contains(s(i))) count + 1 else count\n     \
    \   })\n        // END SOLUTION", "        val vowels = Array(\"A\", \"E\", \"\
    I\", \"O\", \"U\")\n        val vowels_lower = Array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        val vowels_hash = new HashSet[String]\n        vowels_hash ++=\
    \ vowels\n        val vowels_lower_hash = new HashSet[String]\n        vowels_lower_hash\
    \ ++= vowels_lower\n        var count = 0l\n        for (index <- 0 until s.length)\
    \ {\n            if (index % 2 == 0) {\n                if (vowels_hash.contains(s(index).toString))\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n        count", "        // This is not a good solution since it scans the\
    \ string twice.\n        // Note that there may be much better solutions.\n  \
    \      // Note that there may be much better solutions.\n        var set = Set[Char]()\n\
    \        val vowels = Set('A', 'E', 'I', 'O', 'U')\n        for (i <- 0 until\
    \ s.length by 2) if (vowels.contains(s(i))) set += s(i)\n        return set.size",
  "        // Fill in the code here\n        var r = 0l\n        for (i <- 0 until\
    \ s.length) {\n            if (i % 2 == 0 && List('A', 'E', 'I', 'O', 'U').contains(s(i)))\
    \ r += 1\n        }\n        r", '        s.zipWithIndex.map(x => if (x._2 % 2
    == 0 && x._1.isUpper) 1 else 0).sum', '        ???', '        return 0l', "  \
    \      // >>> YOUR CODE HERE\n        (for (i <- 0 until s.length if i % 2 ==\
    \ 0) yield s(i)).filter(c => c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U').length\n        // <<< END YOUR CODE", "        // this is a hodgepodge\
    \ of new syntax\n        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).map(x\
    \ => 1).sum", '        // Fill in the implementation here.', "        var f =\
    \ 0\n        var count = 0\n        for (i <- 0 until s.length) {\n          \
    \  if (s(i).isUpper) {\n                if (f == 0) count += 1\n             \
    \   f = 1 - f\n            }\n        }\n        return count", "        var count\
    \ = 0l\n        for (i <- 0 until s.length by 2) {\n            if (s(i).isUpper)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       // Replace this comment with the actual solution.\n        // This can\
    \ be a very expensive operation, and performance is important for some tests.\n\
    \        0l", "        // Vowels\n        val vowels = Set('A', 'E', 'I', 'O',\
    \ 'U')\n        // Return Value\n        var count = 0l\n        // Iterate over\
    \ string and check if elements in even positions are in the vowels set.\n    \
    \    s.zipWithIndex.foreach(x => if (vowels.contains(x._1) && x._2 % 2 == 0) count\
    \ += 1)\n        count", "        // Your code here.\n        var count = 0l\n\
    \        for (i <- s.indices) {\n            if (i % 2 == 0 && \"AEIOU\".contains(s(i)))\
    \ count += 1\n        }\n        count", "        // Fill up this function body\n\
    \        // `s.charAt(0)` will give you the first character\n        // of the\
    \ string `s`.\n        // `'A' <= s.charAt(0) && s.charAt(0) <= 'Z'` will be `true`\n\
    \        // if the first character is uppercase\n        // and `false` otherwise.\n\
    \        // ***Please do not remove this function definition***\n        var count\
    \ = 0\n        for (i <- 0 until s.length) {\n          if (i % 2 == 0 && 'A'\
    \ <= s.charAt(i) && s.charAt(i) <= 'Z') count += 1\n        }\n        count",
  "        var c = s.filter(c => c.isUpper).filter(c => \"AEIOU\".contains(c)).size\n\
    \        return c.toLong", "        val vowels = Array('A', 'E', 'I', 'O', 'U')\n\
    \        val vowelsSet = vowels.toSet\n        val evenIndices = s.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        evenIndices.foldLeft(0l)((acc, x) => if (vowelsSet.contains(x))\
    \ acc + 1 else acc)", "        // your code here\n        if (s.length == 0) 0\n\
    \        else if (s.length == 1) {\n            if (s(0).isUpper && \"AEIOU\"\
    .contains(s(0))) 1 else 0\n        }\n        else {\n            if (s(1).isUpper\
    \ && \"AEIOU\".contains(s(1))) countUpper(s.drop(2)) + 1 else countUpper(s.drop(2))\n\
    \        }", "        val vowels = Set('A', 'E', 'I', 'O', 'U')\n        (0l /:\
    \ s.zipWithIndex) {\n            case (r, (char, index)) => {\n              \
    \  if (vowels.contains(char) && index % 2 == 0) r + 1\n                else r\n\
    \            }\n        }", "        //if (s.forall(c => c.isLower)) {\n     \
    \   //  0l\n        //} else {\n          s.filter(c => c.isUpper && c.isLetter).size.toLong\n\
    \        //}", "        var count : Long = 0\n        for (i <- 0 until s.length\
    \ by 2) {\n            val c = s(i)\n            if (c >= 'A' && c <= 'Z') {\n\
    \                count += 1\n            }\n        }\n        return count",
  "      // Fill in the code below.\n      var count = 0\n      for (i <- 0 until\
    \ s.length() if i % 2 == 0) {\n        if (s(i).isUpper) {\n          count +=\
    \ 1\n        }\n      }\n      count", "        // Imperative\n        // var\
    \ c = 0l\n        // for (i <- s.indices by 2) {\n        //     if (s(i).isUpper)\
    \ {\n        //         c += 1l\n        //     }\n        // }\n        // return\
    \ c\n        // Functional\n        // return s.indices.filter(i => i % 2 == 0).map(i\
    \ => s(i)).filter(s => s.isUpper).length.toLong\n        // Imperative + Functional\n\
    \        return s.indices.foldLeft(0l) {\n            (c, i) =>\n            \
    \    if (i % 2 == 0 && s(i).isUpper) {\n                    c + 1l\n         \
    \       } else {\n                    c\n                }\n        }", '        s.zipWithIndex.filter(t
    => t._2 % 2 == 0 && t._1.isUpper).length', "        var uppers = 0l\n        for\
    \ (i <- 0 until s.length) {\n            if (i % 2 == 0 && List('A', 'E', 'I',\
    \ 'O', 'U').contains(s(i))) uppers += 1\n        }\n        uppers", "       \
    \ // Your code here\n        s.toList.zipWithIndex.foldLeft(0l)((accumulator,\
    \ t) => if(List('A', 'E', 'I', 'O', 'U').contains(t._1) && t._2 % 2 == 0) accumulator\
    \ + 1 else accumulator)", '        s.zipWithIndex.foldLeft(0l)((count, c) => if
    (isEven(c._2) && isUpper(c._1)) count + 1 else count)', '        s.zipWithIndex.filter(_._2
    % 2 == 0).filter(_._1.isUpper).size', "        return s.zipWithIndex.foldLeft(0l)((acc,\
    \ curr) => if (curr._2 % 2 == 0 && 'A' <= curr._1 && curr._1 <= 'Z') acc + 1 else\
    \ acc)", "        // Your code here\n        return 0l", "        // your code\
    \ here\n        return 0l", '        return s.toCharArray.zipWithIndex.filter((tuple)
    => {tuple._2 % 2 == 0 && tuple._1 == tuple._1.toUpperCase}).size', "        var\
    \ c : Char = ' '\n        var count : Long = 0\n        var i : Int = 0\n    \
    \    while (i < s.length) {\n            c = s.charAt(i)\n            if (i %\
    \ 2 == 0 && c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') count +=\
    \ 1\n            i += 1\n        }\n        return count", "        var n = 0l\n\
    \        for (i <- 0 until s.length) {\n            val c = s(i)\n           \
    \ if (i % 2 == 0 && c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ n += 1\n        }\n        n", '        // Fill in the code', "        // Fill\
    \ in the ??? below.\n        ???", "      var count = 0\n      for (i <- 0 until\
    \ s.length if i % 2 == 0) {\n        if (s(i).isUpper) {\n          count += 1\n\
    \        }\n      }\n      count", "        if (s.isEmpty) 0l\n        else if\
    \ (s.head.isUpper && (s.length % 2 == 0)) 1l + countUpper(s.tail)\n        else\
    \ countUpper(s.tail)", "        val x = s.toUpperCase.zipWithIndex.filter{case\
    \ (c, i) => (i % 2 == 0) && \"AEIOU\".contains(c)}.size\n        x", "       \
    \ // This time we're going to use a pattern matching block (match/case/default)\n\
    \        // It will call the method with the index and the character.\n      \
    \  s.zipWithIndex.foreach {\n            case (c, i) => {\n                //\
    \ c will be the character at that index, and i will be the index.\n          \
    \      // The following will just check if the character is an uppercase\n   \
    \             // vowel and if the index is even, and it will increment a counter\n\
    \                // if both of those conditions are true.\n                if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n             \
    \       if (i % 2 == 0) {\n                        counter += 1\n            \
    \        }\n                }\n            }\n        }\n        // finally, it\
    \ will return the value of the counter.\n        counter", "        // IMPLEMENT\
    \ ME\n        return 0", "        // We may partition the string into two parts:\n\
    \        // 1. Odd indices.\n        // 2. Even indices.\n        // We can easily\
    \ count vowels in odd indices using s.grouped(2).\n        // For vowels in even\
    \ indices, we need to filter out the first character.\n        // To do so, we\
    \ can use the string.tail to remove the first character.\n        val even = s.tail.grouped(2).flatten.filter(ch\
    \ => ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U').length\n \
    \       val odd = s.grouped(2).flatten.filter(ch => ch == 'A' || ch == 'E' ||\
    \ ch == 'I' || ch == 'O' || ch == 'U').length\n        even + odd", "        val\
    \ evens = s.toCharArray.zipWithIndex.filter{case (c, i) => i % 2 == 0}\n     \
    \   val uppercase = evens.filter{case (c, i) => c.isUpper}\n        val vowels\
    \ = uppercase.filter{case (c, i) => c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U'}\n        vowels.size.toLong", "        /////////\n        // YOUR\
    \ CODE HERE\n        /////////", '        return s.zipWithIndex.count(x => x._1.isUpper
    && x._2 % 2 == 0)', "\t    // Fill-in", "        val vowels = s.filter(c => Set('A',\
    \ 'E', 'I', 'O', 'U').contains(c))\n        vowels.toList.filter(v => vowels.indexOf(v)\
    \ % 2 == 0).length", "        var vowels = List('A', 'E', 'I', 'O', 'U')\n   \
    \     var count = 0\n        for (i <- s.indices) {\n            if (vowels.contains(s(i))\
    \ && (i + 1) % 2 == 0) {\n                count += 1\n            }\n        }\n\
    \        count", "        var count : Long = 0\n        for (i <- 0 until s.length\
    \ if i % 2 == 0 && \"AEIOU\".contains(s(i))) count += 1\n        count", "   \
    \     val ans = s.toCharArray().zipWithIndex.filter(t => {\n            val (c,\
    \ i) = t\n            c.isUpper && i % 2 == 0\n        }).length\n        ans",
  "        // This is your job. :)\n        1l", "        val vowels = Set('A', 'E',\
    \ 'I', 'O', 'U')\n        (0 until s.length).map(i => if (i % 2 == 0 && vowels.contains(s(i)))\
    \ 1 else 0).sum", '        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 ==
    x._1.toUpper).count(x => x._1.matches("[AEIOU]")).toLong', "        // Write your\
    \ solution here.\n        // You can call any of the functions defined in Problem.scala\n\
    \        return s.filter(x => \"AEIOU\".contains(x)).filter(x => s.indexOf(x)\
    \ % 2 == 0).length", "        val vowels = Set('A', 'E', 'I', 'O', 'U')\n    \
    \    s.zipWithIndex.filter{case (ch, index) =>\n            vowels.contains(ch)\
    \ && index % 2 == 0\n        }.length", "        var total = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (i % 2 == 0 && s(i).isUpper) total +=\
    \ 1\n        }\n        total", '      s.toList.zipWithIndex.filter(x => x._2
    % 2 == 0 && x._1.isUpper).length', '        // YOUR CODE HERE', "        // *****\
    \ BEGIN YOUR CODE *****\n        var even = true\n        var count = 0\n    \
    \    for (ch <- s) {\n            if (even && ch.isUpper) {\n                count\
    \ += 1\n            }\n            even = !even\n        }\n        count\n  \
    \      // ***** END YOUR CODE *****", "        val vowels = Set('A', 'E', 'I',\
    \ 'O', 'U')\n        val evens = (0 to s.length - 1).filter(_ % 2 == 0)\n    \
    \    evens.map(s(_)).filter(vowels.contains(_)).length", '        ???', "    \
    \    s.zipWithIndex.filter(x => x._2 % 2 == 0 && (x._1 == 'A' || x._1 == 'E' ||\
    \ x._1 == 'I' || x._1 == 'O' || x._1 == 'U')).size", "        var sum : Long =\
    \ 0\n        for (i <- 0 until s.length) {\n            if (i % 2 == 0 && s(i).isUpper)\
    \ {\n                sum += 1\n            }\n        }\n        return sum",
  "        // Write your code here.\n        val vowels = Set('A', 'E', 'I', 'O',\
    \ 'U')\n        (0 until s.length by 2).foldLeft(0)((acc, i) => if (vowels(s(i)))\
    \ acc + 1 else acc)", "        //The solution will have to be able to identify\
    \ whether or not an index is even\n        //After this we need to make sure it\
    \ is also a vowel, then it will need to be checked to see if it is a capital letter\n\
    \        var vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        var count\
    \ = 0l\n        for (i <- 0 until s.length) {\n            if (i % 2 == 0 && vowels.contains(s(i).toString.toUpperCase))\
    \ {\n                count += 1\n            }\n        }\n        count", '        return
    s.zipWithIndex.map(x => (x._1.isUpper, x._2)).filter(x => x._1 && x._2 % 2 ==
    0).map(x => 1l).sum', "        // None\n        -1", "        // My original solution\n\
    \        s.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1.isUpper).map(x => 1l).sum\n\
    \        // Another solution\n        s.zipWithIndex.map(x => (x._1.isUpper, x._2)).filter(x\
    \ => x._2 % 2 == 0 && x._1).map(x => 1l).sum", "        val vowels = \"AEIOU\"\
    .toArray\n        val inds = s.zipWithIndex.filter{case (c, i) => (i % 2 == 0)\
    \ && vowels.contains(c)}.map{case (c, i) => 1}\n        inds.sum", "        if\
    \ (s.length() == 0) 0 else {\n            val sb = s.substring(0, 1)\n       \
    \     val tb = s.substring(1)\n            if (sb == sb.toUpperCase() && sb.contains(\"\
    A\") && (s.length() % 2 == 0)) 1 + countUpper(tb) else countUpper(tb)\n      \
    \  }", "        // Given a string s, return a list of the indices of the uppercase\
    \ vowels.\n        // For example:\n        // >>> upperVowelIndices((\"aBCdEf\"\
    ))\n        // (List(1, 3, 5))\n        // >>> upperVowelIndices((\"abcdefg\"\
    ))\n        // (List())\n        // >>> upperVowelIndices((\"dBBE\"))\n      \
    \  // (List(0, 1, 3))\n        def upperVowelIndices(s : String) : List[Int] =\
    \ {\n            val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n       \
    \     s.indices.toList.filter(i => vowels.contains(s(i).toString.toUpperCase)\
    \ && s(i).isUpper)\n        }\n        upperVowelIndices(s).filter(i => i % 2\
    \ == 0).length", "      // Start your code here.\n      val vowels = Set(\"A\"\
    , \"E\", \"I\", \"O\", \"U\")\n      val bs = s.toCharArray.zipWithIndex.foldLeft(List[Char]())((z,\
    \ y) => if (y._2 % 2 == 0) y._1 :: z else z).filter(vowels.contains)\n      bs.length",
  '        ???', "        var v = 0l\n        s.foreach(ch => if (ch == 'A' || ch\
    \ == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n            v += 1\n     \
    \   })\n        v", "        // Your Code Here\n        return 0l", "\t\t// Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var num = 0\n        for ( i <- 0 until s.length by 2) {\n          \
    \  if (s(i).isUpper) {\n                num += 1\n            }\n        }\n \
    \       num", "        // your code here\n        val vowels = Array('A', 'E',\
    \ 'I', 'O', 'U')\n        var count = 0\n        for (i <- 0 until s.length if\
    \ i % 2 == 0) {\n            if (vowels.contains(s(i))) {\n                count\
    \ += 1\n            }\n        }\n        count", "        // Define all your\
    \ variables here\n        0", "        // Your code here.\n        return 0l",
  "        return s.view.zipWithIndex.filter({case (ch, i) => i % 2 == 0 && Set('A',\
    \ 'E', 'I', 'O', 'U').contains(ch)}).size", "        var count = 0l\n        var\
    \ i = 0\n        while (i < s.length) {\n            if (s(i).isUpper && i % 2\
    \ == 0) count += 1\n            i += 1\n        }\n        count", "        val\
    \ upperVowels = \"AEIOU\"\n        s.zipWithIndex.foldLeft(0l)((count, pair) =>\
    \ {\n            if (pair._2 % 2 == 0 && upperVowels.contains(pair._1)) count\
    \ + 1\n            else count\n        })", "        // Fill in the code here\n\
    \        // Try printing each letter of the string s and seeing the result.\n\
    \        // You can use the predefined function println(s: String).\n        //\
    \ For example:\n        // println(\"Hello World!\")\n        // Try printing\
    \ each even indexed letter of the string s, and see the result.\n        // println(s(0))\n\
    \        // println(s(2))\n        // println(s(4))\n        // You can use the\
    \ predefined function isUpper(ch: Char) to check if a letter is an uppercase letter.\n\
    \        // For example:\n        // println(isUpper('A'))\n        // println(isUpper('a'))\n\
    \        // You can use the predefined function toString(x: Long) to convert your\
    \ result to a string.\n        // For example:\n        // println(toString(1l))\n\
    \        1l", "        // Fill in the code here.\n        val vowels = List('A',\
    \ 'E', 'I', 'O', 'U')\n        s.zipWithIndex.foldLeft(0l)((b,i) =>\n        \
    \    if(i._2 % 2 == 0 && vowels.contains(i._1)) b + 1 else b)", "        // ZipWithIndex()\
    \ returns a list of tuples (char, index)\n        // We filter out all chars that\
    \ are not vowels and indices that are odd\n        // Then we filter out the lowercase\
    \ vowels.\n        // Then we count the chars in the resulting list\n        s.zipWithIndex.filter(x\
    \ => \"aeiou\".contains(x._1) && x._2 % 2 == 0).map(x => x._1.toLower).count(x\
    \ => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u')", '        return
    s.zipWithIndex.filter(a => a._2 % 2 == 0 && a._1.isUpper).map(b => 1l).sum', " \
    \       s.zipWithIndex.foldLeft(0l)((acc, x) => x._2 % 2 match {\n           \
    \ case 0 => if(x._1.isUpper) acc + 1 else acc\n            case _ => acc\n   \
    \     })", "        def countOdd(count : Long, index : Int) : Long = {\n     \
    \       if (index == s.length) return count\n            if (index % 2 == 0) {\n\
    \                val c = s(index)\n                if (c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U') {\n                    countOdd(count + 1,\
    \ index + 1)\n                } else {\n                    countOdd(count, index\
    \ + 1)\n                }\n            } else {\n                countOdd(count,\
    \ index + 1)\n            }\n        }\n        countOdd(0, 0)", "        // Your\
    \ Code Here\n        val vowels = \"AEIOU\"\n        s.zipWithIndex.filter{case\
    \ (c, i) => i % 2 == 0 && vowels.contains(c)}.size", "        var a = 0l\n   \
    \     for (i <- 0 until s.length) {\n            if (i % 2 == 0 && \"AEIOU\".contains(s(i)))\
    \ a += 1\n        }\n        a", "        // 1)\n        // s.filter((x: Char)\
    \ => x.isUpper).filter((x: Char) => (s.indexOf(x)%2 == 0)).size.toLong\n     \
    \   // 2)\n        // s.filter((x: Char) => x.isUpper && (s.indexOf(x)%2 == 0)).size.toLong\n\
    \        // 3)\n        s.filter((x: Char) => x.isUpper && (s.indexOf(x)%2 ==\
    \ 0)).count(_ => true)", "        // Fill in the body of this function\n     \
    \   return -1", "        val vowels = List(\"A\", \"E\", \"I\", \"O\", \"U\")\n\
    \        var vowelsInEvenIndices = 0\n        for (i <- 0 until s.length) {\n\
    \            if (i % 2 == 0 && vowels.contains(s(i).toString.toUpperCase)) {\n\
    \                vowelsInEvenIndices += 1\n            }\n        }\n        vowelsInEvenIndices",
  '        s.zipWithIndex.filter(v => v._2 % 2 == 0 && v._1.isUpper).size', "    \
    \    // Implemented in Java\n        0l", "        val vowels = Array('A', 'E',\
    \ 'I', 'O', 'U')\n        var result = 0\n        for (x <- s.indices) {\n   \
    \         if (vowels.contains(s(x)) && x % 2 == 0) {\n                result +=\
    \ 1\n            }\n        }\n        result", '      s.toList.zipWithIndex.foldLeft(0l)((x,
    y) => if (y._2 % 2 == 0 && y._1.isUpper) x + 1 else x)', "        // your solution\
    \ to Problem 1 here\n        return 0l", "        def findUpper(s : String, start\
    \ : Int, num : Long) : Long = {\n            if (start >= s.length) num\n    \
    \        else if (start % 2 == 0 && (s(start) == 'A' || s(start) == 'E' || s(start)\
    \ == 'I' || s(start) == 'O' || s(start) == 'U')) findUpper(s, start + 1, num +\
    \ 1)\n            else findUpper(s, start + 1, num)\n        }\n        findUpper(s,\
    \ 0, 0)", "        // TODO - finish implementation\n        (0l)", "      // your\
    \ answer here\n      val vowels = Set('A', 'E', 'I', 'O', 'U')\n      val sSize\
    \ = s.size\n      s.zipWithIndex.filter(e => e._2 % 2 == 0 && vowels.contains(e._1)).size",
  '        s.filter(v => "AEIOU".contains(v)).filter(x => s.indexOf(x) % 2 == 0).size',
  '        s.zipWithIndex.filter(t => t._2 % 2 == 0 && t._1.isUpper).map(t => 1l).sum',
  "        // The general idea is to iterate through the string, check if the current\
    \ character is an even index and an uppercase vowel.\n        // If so, increment\
    \ a counter.\n        // The complexity of this algorithm is O(n) where n is the\
    \ length of the string.\n        var counter = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (i % 2 == 0 && s(i).isUpper && isVowel(s(i))) {\n        \
    \        counter += 1\n            }\n        }\n        return counter", "  \
    \      // This is your job.\n        0l", "        var count = 0l\n        for\
    \ ( i <- 0 until s.length if (i % 2 == 0) && (s(i).isUpper)) count += 1\n    \
    \    count", '        s.zipWithIndex.filter{case (c, i) => i % 2 == 0 && c.isUpper}.size',
  "        val even = (0 until s.length by 2).toSet\n        val vowels = Set('A',\
    \ 'E', 'I', 'O', 'U')\n        s.foldLeft(0) { (acc, c) => if (even(acc) && vowels(c))\
    \ acc + 1 else acc + 1 }", "        // Fill in the body of this function\n   \
    \     s.zipWithIndex.foldLeft(0l) {\n            case (c, (v, i)) => c + (if (i\
    \ % 2 == 0 && v.isUpper) 1 else 0)\n        }", '      ???', "        // This\
    \ is a stub, please implement the function\n        0l", "        // >>> YOUR\
    \ CODE HERE\n        return 0l", '        (s.zipWithIndex.filter(c => c._2 % 2
    == 0 && c._1.isUpper)).length', '        ???', "        // Fill in the code!\n\
    \        return 0l", '        // Your Code Here', '        0', "        // This\
    \ can be easily done with a couple of calls to the built-in library:\n       \
    \ // return s.zipWithIndex.map{case (v, i) => if (i % 2 == 0 && v.isUpper) 1 else\
    \ 0}.sum.toLong\n        // Instead I'm going to try to implement it myself as\
    \ a way to learn Scala.\n        var count = 0l\n        for (ch <- s) {\n   \
    \         if (ch.isUpper && (s.indexOf(ch) % 2 == 0)) count += 1\n        }\n\
    \        return count", "        // Your answer here.\n        return 0l", " \
    \       val total = s.size\n        var i = 1\n        var count = 0\n       \
    \ while (i < total) {\n            if (s(i).isUpper) count += 1\n            i\
    \ += 2\n        }\n        count", "        var c = 0\n        for (i <- s.indices)\
    \ {\n            if (i % 2 == 0 && s(i).isUpper) c += 1\n        }\n        c",
  '        // *** YOU CODE HERE ***', '        s.zipWithIndex.map(e => e._1).filter(e
    => e.isUpper && e.isLetter && e._2 % 2 == 0).length', "        //String.apply(s.toCharArray.zipWithIndex.filter(x\
    \ => (x._2 % 2 == 0 && Set('A', 'E', 'I', 'O', 'U').contains(x._1))).map(x =>\
    \ x._1).toArray)\n        s.toCharArray.zipWithIndex.filter(x => (x._2 % 2 ==\
    \ 0 && Set('A', 'E', 'I', 'O', 'U').contains(x._1))).map(x => x._1).length", " \
    \       // Given a string s, count the number of uppercase vowels in even indices.\n\
    \        // For example:\n        // >>> countUpper((\"aBCdEf\"))\n        //\
    \ (1l)\n        // >>> countUpper((\"abcdefg\"))\n        // (0l)\n        //\
    \ >>> countUpper((\"dBBE\"))\n        // (0l)\n        // >>> countUpper((\"iEoA\"\
    ))\n        // (1l)\n        // >>> countUpper((\"aba\"))\n        // (0l)\n \
    \       // >>> countUpper((\"aAA\"))\n        // (2l)\n        // >>> countUpper((\"\
    Aab\"))\n        // (1l)\n        // >>> countUpper((\"A\"))\n        // (0l)\n\
    \        val len = s.length\n        val len2 = s.length % 2\n        val part1\
    \ = s.substring(0, len - len2)\n        val part2 = s.substring(len - len2, len)\n\
    \        var r = 0l\n        //val part1Len = part1.length\n        var i = 1\n\
    \        while (i < part1.length) {\n            if (part1(i).isUpper) {\n   \
    \             r += 1l\n            }\n            i += 2\n        }\n        var\
    \ j = 0\n        while (j < part2.length) {\n            if (part2(j).isUpper)\
    \ {\n                r += 1l\n            }\n            j += 2\n        }\n \
    \       r", "        val vowels = \"AEIOU\"\n        val evenIndices = (0 until\
    \ s.length by 2)\n        s.zipWithIndex.filter(pair => evenIndices.contains(pair._2)).count(pair\
    \ => vowels.contains(pair._1))", "        var res = 0l\n        for (c <- s) if\
    \ (c.isUpper && s.indexOf(c) % 2 == 0) res += 1\n        res", '        s.view.zipWithIndex.filter(_._2
    % 2 == 0).map(v => v._1).count(_.isUpper)', "        var result : Long = 0\n \
    \       for (i <- 0 until s.length by 2) {\n            result += if (s(i).isUpper)\
    \ 1 else 0\n        }\n        return result", "        val vowels = List('A',\
    \ 'E', 'I', 'O', 'U')\n        var count = 0l\n        s.toCharArray.foreach(c\
    \ => if (vowels.contains(c) && vowels.indexOf(c) % 2 == 0) count += 1)\n     \
    \   count", "        var count = 0l\n        s.zipWithIndex.foreach {\n      \
    \      case (c, i) =>\n                if (i % 2 == 0 && c.isUpper) {\n      \
    \              count += 1\n                }\n        }\n        count", '        //
    Your Code Here', "        var count : Long = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (i % 2 == 0 && s(i).isUpper) count += 1\n        }\n     \
    \   count", "        // your solution to Problem 1 here\n        //simple example:\
    \ s=\"aBCdEf\"\n        var count = 0L\n        for(i <- 1 to s.length by 2){\n\
    \            if(s(i).isUpper) count += 1\n        }\n        count", "       \
    \ if (s.length == 0) return 0\n        s.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0 && x._1.isUpper).length", "      s.zipWithIndex.filter(e => e._2 % 2 == 0\
    \ && e._1.isUpper).count(e => e._1.toLower == 'a' || e._1.toLower == 'e' || e._1.toLower\
    \ == 'i' || e._1.toLower == 'o' || e._1.toLower == 'u')", "        val vowels\
    \ = Set('A', 'E', 'I', 'O', 'U')\n        s.toList.indices.count(i => vowels.contains(s(i))\
    \ && i % 2 == 0)", '        s.zipWithIndex.filter {case (c, i) => c.isUpper &&
    i % 2 == 0}.map {case (c, i) => 1}.sum', "        val vowels = Set('A', 'E', 'I',\
    \ 'O', 'U')\n        (0 until s.length by 2).map(i => s(i)).filter(c => vowels(c)).count(c\
    \ => c.isUpper)", "        // For example:\n        // >>> countUpper(\"aBCdEf\"\
    )\n        // 1\n        // >>> countUpper(\"abcdefg\")\n        // 0\n      \
    \  // >>> countUpper(\"dBBE\")\n        // 0\n        s.zipWithIndex.filter((t)\
    \ => t._2 % 2 == 0 && t._1.isUpper).length", "        val a:Array[Char] = s.toCharArray\n\
    \        var cnt:Long = 0\n        for (i <- 0 until a.length by 2) {\n      \
    \      if (List('A', 'E', 'I', 'O', 'U').contains(a(i))) cnt += 1\n        }\n\
    \        cnt", '        return 0', "        var count : Long = 0\n        for\
    \ (i <- 0 until s.length if (i + 1) % 2 == 0) {\n            if (s(i).isUpper)\
    \ count += 1\n        }\n        count", "        var count = 0l\n        for\
    \ (i <- 0 until s.length) {\n            if (i % 2 == 0 && s(i).isUpper) {\n \
    \               count += 1\n            }\n        }\n        count", '        s.toUpperCase.zipWithIndex.filter(_._2
    % 2 == 0).filter("AEIOU".contains(_)).map(_._1).size', '        return 0l', " \
    \       return s.toUpperCase.toCharArray.zipWithIndex.filter(t => (t._2 % 2 ==\
    \ 0 && t._1 == 'A') || (t._2 % 2 == 0 && t._1 == 'E') || (t._2 % 2 == 0 && t._1\
    \ == 'I') || (t._2 % 2 == 0 && t._1 == 'O') || (t._2 % 2 == 0 && t._1 == 'U')).length",
  "        val l = s.length\n        if (l == 0) return 0\n        var upperCount\
    \ = 0\n        for (i <- 0 until l by 2) {\n            val char = s(i)\n    \
    \        if (char == 'A' || char == 'E' || char == 'I' || char == 'O' || char\
    \ == 'U') {\n                upperCount += 1\n            }\n        }\n     \
    \   upperCount", "        // your code here\n        return -1", '        ???',
  "        var count : Long = 0\n        for (i <- s.indices) {\n            if (i\
    \ % 2 == 0 && s(i).isUpper) count += 1\n        }\n        count", "        //\
    \ your code goes here\n        return 0l", "        val vowels = Array(\"A\",\
    \ \"E\", \"I\", \"O\", \"U\")\n        var count = 0l\n        for (i <- 0 until\
    \ s.length by 2) {\n            if (vowels.contains(s(i).toString())) {\n    \
    \            count += 1\n            }\n        }\n        count", "        //\
    \ Handle special cases\n        // ...\n        // ...\n        // ...\n     \
    \   return 0", "        var count : Long = 0\n        val vowels = Set(\"A\",\
    \ \"E\", \"I\", \"O\", \"U\")\n        val chars = s.toList\n        var i = 0\n\
    \        while (i < chars.length) {\n            if (i % 2 == 0 && vowels.contains(chars(i).toString.toUpperCase))\
    \ {\n                count += 1\n            }\n            i += 1\n        }\n\
    \        count", "        // Implement This Function\n        // Do not edit anything\
    \ above this line\n        (s.indices.toList.filter(s.indices.toList.indexOf(_)\
    \ % 2 == 0).map(s.indices.toList.indexOf(_)).map(s.charAt(_)).filter(_.isUpper).size.toLong)\n\
    \        // Do not edit anything below this line", "        val vowels = Set('A',\
    \ 'E', 'I', 'O', 'U')\n        s.zipWithIndex.filter(p => vowels.contains(p._1)\
    \ && p._2 % 2 == 0).length", '        s.zipWithIndex.filter{case (c, i) => i %
    2 == 0 && c.isUpper && "AEIOU".contains(c)}.size', "        // TODO: solve it!\n\
    \        return 0", "        // This is the most efficient solution because s.length()\
    \ uses O(1) time.\n        // Thus, this method is O(n).\n        var count =\
    \ 0l\n        for (i <- 0 until s.length by 2) {\n            if (s(i).isUpper)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       // your solution to Problem 1 here\n        var count = 0\n        for\
    \ (i <- 0 until s.length) {\n            if (i % 2 == 0 && s(i).isUpper) {\n \
    \               count += 1\n            }\n        }\n        count", '        s.zipWithIndex.count(i
    => i._1.isUpper && i._2 % 2 == 0)', "        s.zipWithIndex.filter(p => (p._2\
    \ % 2 == 0 && (p._1 == 'A' || p._1 == 'E' || p._1 == 'I' || p._1 == 'O' || p._1\
    \ == 'U'))).map(p => p._1).length", "        // TODO: complete the body of this\
    \ function.\n        // Add any auxiliary functions you may want to define here.\n\
    \        val even = s.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1)\n\
    \        val vowel = even.filter(x => x == 'A' || x == 'E' || x == 'I' || x ==\
    \ 'O' || x == 'U')\n        val upper = vowel.filter(x => x == x.toUpper)\n  \
    \      upper.length", "        def upperCount(s : String, i : Int) : Long = {\n\
    \            if (i >= s.length) 0\n            else if (s(i).isUpper && i % 2\
    \ == 0) 1 + upperCount(s, i + 1)\n            else upperCount(s, i + 1)\n    \
    \    }\n        upperCount(s, 0)", '        ???', "        // Fill in the body\
    \ of this function.\n        val result = for (i <- 0 until s.length if i % 2\
    \ == 0) yield {\n            if (s(i).isUpper) 1 else 0\n        }\n        result.sum",
  "        // Fill up this function body\n        // `s.charAt(i)` returns the ith\
    \ character of s\n        // You may find the following functions useful:\n  \
    \      // - `isUpper`\n        // - `isVowel`\n        // - `toLong`\n       \
    \ // - `toList`\n        // - `map`\n        // - `filter`\n        // - `sum`\n\
    \        // - `forall`\n        0l", "        // START SOLUTION\n        // Do\
    \ the basic filter and length of filtered string.\n        s.zipWithIndex.filter(t\
    \ => t._2 % 2 == 0 && t._1.isUpper).length\n        //END SOLUTION", "       \
    \ val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        s.zipWithIndex.filter(x\
    \ => (x._2 % 2 == 0) && vowels.contains(x._1.toString.toUpperCase)).size", '        s.zipWithIndex.filter
    { case (c, i) => c == c.toUpper && i % 2 == 0 }.size', "        val d2 = s.zipWithIndex.filter(x\
    \ => (x._2%2 == 0) && x._1.isUpper).size\n        d2", "        val chars = s.toCharArray\n\
    \        var count = 0\n        for (i <- 0 until chars.length) {\n          \
    \  if (i % 2 == 0 && isUpper(chars(i))) count += 1\n        }\n        count",
  "        val upperVowels = \"AEIOU\"\n        s.zipWithIndex.map { case (ch, i)\
    \ => if (i % 2 == 0 && upperVowels.contains(ch)) 1 else 0 }.sum", "        return\
    \ s.split(\"\").zipWithIndex.count({\n            case (x, y) => x.toUpperCase\
    \ == x && y % 2 == 0\n        })", "        val vowelList = List('A', 'E', 'I',\
    \ 'O', 'U')\n        s.zipWithIndex.foldLeft(0l) { (accum, x) =>\n           \
    \ if (x._2 % 2 == 0 && vowelList.contains(x._1)) accum + 1\n            else accum\n\
    \        }", "        val vowels = Set('A', 'E', 'I', 'O', 'U')\n        val uppercaseVowels\
    \ = for (i <- 0 until s.length if i % 2 == 0 && vowels.contains(s(i))) yield 1\n\
    \        uppercaseVowels.sum", "      val vowels = List('A', 'E', 'I', 'O', 'U')\n\
    \      val indexed = s.zipWithIndex\n      val evenIndices = indexed.filter(char\
    \ => char._2 % 2 == 0)\n      val uppercase = evenIndices.filter(char => char._1.isUpper)\n\
    \      val vowelsUppercase = uppercase.filter(char => vowels.contains(char._1))\n\
    \      vowelsUppercase.length", "        def count(s : String, i : Int) : Long\
    \ = {\n            if (i == s.length) 0l\n            else if (i % 2 == 0 && s(i).isUpper)\
    \ 1l + count(s, i + 1)\n            else count(s, i + 1)\n        }\n        count(s,\
    \ 0)", "        val set = Set('A', 'E', 'I', 'O', 'U')\n        s.zipWithIndex.filter(c\
    \ => set.contains(c._1)).filter(c => c._2 % 2 == 0).map(c => 1l).sum", "     \
    \   // s(0) has even index\n        // s(1) has odd index\n        // s(2) has\
    \ even index\n        // s(3) has odd index\n        // ...\n        // Use string.filterIndexed\
    \ and string.count\n        return -1", "        // your code here\n        s.toCharArray.map(x\
    \ => if (x.isUpper && (s.indexOf(x) % 2 == 0)) 1l else 0l).sum", '        ???']
stop_tokens:
- "\n    }\n"
