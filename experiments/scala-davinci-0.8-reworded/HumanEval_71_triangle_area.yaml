name: HumanEval_71_triangle_area
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return the area of\n\
  \    // the triangle rounded to 2 decimal points if the three sides form a valid\
  \ triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n    // than the third side.\n    //\
  \ Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>>\
  \ triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a : Long, b\
  \ : Long, c : Long) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
  \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
  \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
  \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
  \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
  \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
  \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
completions: ["        def isValidTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n            val cond = a + b > c && a + c > b && b + c > a\n          \
    \  cond\n        }\n        if (isValidTriangle(a, b, c)) {\n            val s\
    \ = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n\
    \        } else -1", "        val s = (a + b + c) / 2.0\n        if (s > a &&\
    \ s > b && s > c) sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        else\
    \ -1", "        // Fill Up this function body\n        // `a`, `b`, `c` are side\
    \ lengths.\n        if (a + b <= c || a + c <= b || b + c <= a) -1f\n        else\
    \ {\n            val s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s\
    \ - b) * (s - c)).toFloat\n        }", "        // Your code here\n        0",
  "        if (a <= 0 || b <= 0 || c <= 0) -1f\n        else if (a + b <= c || a +\
    \ c <= b || b + c <= a) -1f\n        else {\n            // Heron's formula\n\
    \            val s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b)\
    \ * (s - c)).toFloat\n        }", "      var result = -1f\n      if (a + b > c\
    \ && a + c > b && b + c > a) {\n        val s = (a + b + c) / 2.0\n        result\
    \ = sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n      }\n      result", " \
    \       //x, y, z is the three sides of the triangle\n        var sides = Array(a,\
    \ b, c)\n        //sort the sides in ascending order, x is the shortest side,\
    \ z is the longest side\n        var longest = sides.max\n        var shortest\
    \ = sides.min\n        var middle = sides.filter(s => s != longest && s != shortest)(0)\n\
    \        if (shortest + middle > longest) {\n            //Heron's formula for\
    \ the area of a triangle\n            var s = (shortest + middle + longest) /\
    \ 2\n            sqrt(s * (s - shortest) * (s - middle) * (s - longest)).toFloat\n\
    \        } else {\n            -1f\n        }", "        // Fill Up this function\
    \ body\n        // `res0` is an expression of type Float\n        val s = (a +\
    \ b + c) / 2.0\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n   \
    \     if (area > 0) area.toFloat else -1.0f", "        val s = (a + b + c) / 2f\n\
    \        val delta = s * (s - a) * (s - b) * (s - c)\n        if (delta > 0) sqrt(delta).toFloat\
    \ else -1", "        // >>> triangleArea((3l), (4l), (5l))\n        // (6.0f)\n\
    \        // >>> triangleArea((1l), (2l), (10l))\n        // -1l\n        // a,\
    \ b, c are lengths of triangle side\n        // \u5982\u679C\u4E09\u8FB9\u7684\
    \u957F\u5EA6\u4E3Ax, y, z, \u5219\u9762\u79EF\u4E3As = \u221A(p * (p - x) * (p\
    \ - y) * (p - z))\n        // \u5176\u4E2Dp\u4E3A\u534A\u5468\u957F\n        val\
    \ x = a.toFloat\n        val y = b.toFloat\n        val z = c.toFloat\n      \
    \  if (x + y > z && x + z > y && y + z > x) {\n            val p = (x + y + z)\
    \ / 2.0f\n            sqrt(p * (p - x) * (p - y) * (p - z)).formatted(\"%.2f\"\
    ).toFloat\n        } else {\n            -1f\n        }", "        // Your code\
    \ goes here\n        if (a + b > c && a + c > b && b + c > a) {\n            val\
    \ s = (a + b + c) / 2.0f\n            val area = sqrt(s * (s - a) * (s - b) *\
    \ (s - c))\n            area.toFloat\n        } else {\n            -1.0f\n  \
    \      }", "        // Fill Up this function body\n        // `a`, `b`, `c` represents\
    \ the three sides of a triangle\n        if (a + b <= c || a + c <= b || b + c\
    \ <= a) -1\n        else {\n            val s = (a + b + c) / 2.0\n          \
    \  sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        }", "        val sides\
    \ = List(a, b, c).sorted\n        if (sides(0) + sides(1) > sides(2)) {\n    \
    \        val s = (a + b + c).toFloat / 2.0f\n            sqrt(s * (s - a) * (s\
    \ - b) * (s - c)).toFloat\n        } else -1.0f", "        // Fill Up this function\
    \ body\n        // `0` is the function return value\n        // you can change\
    \ it according to your need\n        var s: Double = 0.0\n        if (a + b >\
    \ c && a + c > b && b + c > a) {\n            s = (a + b + c) / 2.0\n        \
    \    val sf = s * (s - a) * (s - b) * (s - c)\n            return sqrt(sf).toFloat\n\
    \        }\n        return -1", "        // Your code here\n        -1f", "  \
    \      if (a + b > c && a + c > b && b + c > a) {\n            val p = (a + b\
    \ + c) / 2.0\n            sqrt(p * (p - a) * (p - b) * (p - c)).toFloat\n    \
    \    } else -1", "        val list = List(a, b, c).sorted\n        if (list(0)\
    \ + list(1) > list(2)) {\n            val s = (a + b + c).toFloat / 2\n      \
    \      sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        } else -1.0f", " \
    \       if (a + b > c && a + c > b && b + c > a) {\n            val s = (a + b\
    \ + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n    \
    \    } else -1.0f", "        if (a + b > c && a + c > b && b + c > a) {\n    \
    \        val p = (a + b + c) / 2f\n            sqrt(p * (p - a) * (p - b) * (p\
    \ - c)).toFloat\n        } else -1f", "        val x = (a + b + c) / 2f\n    \
    \    sqrt(x * (x - a) * (x - b) * (x - c)).toFloat", "        // Check if valid\
    \ triangle\n        if (a+b>c && a+c>b && b+c>a) {\n            // Calculate area\n\
    \            val s = (a+b+c)/2.0\n            sqrt(s*(s-a)*(s-b)*(s-c)).toFloat\n\
    \        } else {\n            -1.0f\n        }", "        // if a triangle with\
    \ sides of length a, b, and c does not satisfy the \n        // triangle inequality\
    \ theorem, return -1\n        // else, return the area of the triangle using Heron's\
    \ formula\n        if (a + b < c || a + c < b || b + c < a) -1f\n        else\
    \ {\n            val s = (a + b + c) / 2f\n            sqrt(s * (s - a) * (s -\
    \ b) * (s - c)).toFloat\n        }", "        // Your code here\n        var triangle:\
    \ Float = -1\n        if (a + b > c && a + c > b && b + c > a) {\n           \
    \ val s = (a + b + c) / 2.0f\n            triangle = sqrt(s * (s - a) * (s - b)\
    \ * (s - c)).toFloat\n        }\n        triangle", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` is the side of the triangle\n        if (a +\
    \ b > c && a + c > b && b + c > a) {\n            val s = (a + b + c).toFloat\
    \ / 2\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        } else\
    \ -1", "        // your code here\n        var s = (a + b + c) / 2.0\n       \
    \ var area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area <= 0) -1f\
    \ else area.toFloat", "        if (a + b > c && a + c > b && b + c > a) {\n  \
    \          var s = (a + b + c) / 2\n            sqrt(s * (s - a) * (s - b) * (s\
    \ - c)).toFloat\n        } else -1", "        // Your code goes here\n       \
    \ if(a+b>c && a+c>b && b+c>a) (a*b*c).toFloat\n        else -1", "        var\
    \ s : Float = ((a + b + c).toFloat / 2f)\n        var area : Float = ((s * (s\
    \ - a) * (s - b) * (s - c)).toFloat).toFloat\n        if (area > 0) sqrt(area)\
    \ else -1", "        var p = (a + b + c) / 2.0f\n        var s = p * (p - a) *\
    \ (p - b) * (p - c)\n        if (s < 0) -1\n        else sqrt(s).toFloat", " \
    \       if (a + b > c && a + c > b && b + c > a) {\n            val s = (a + b\
    \ + c) / 2\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n      \
    \  } else -1", "        // your solution here\n        if (a + b > c && a + c\
    \ > b && b + c > a)\n            (a * b * sin(c.toDouble * Pi / 180.0).toFloat).toFloat\
    \ / 2\n        else\n            -1", "        // IMPLEMENT\n        -1.0f", " \
    \       // Your code goes here\n        if(a+b<=c || a+c<=b || b+c<=a)\n     \
    \       return -1.0f\n        val s = 0.5f*(a+b+c)\n        sqrt(s*(s-a)*(s-b)*(s-c)).toFloat",
  "        if (a + b > c && a + c > b && b + c > a) return sqrt(pow(a, 2) + pow(b,\
    \ 2) - pow(c, 2)).toFloat\n        return -1", "        if (a + b > c && a + c\
    \ > b && b + c > a) {\n            val s = (a + b + c).toFloat / 2\n         \
    \   sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        } else -1", "     \
    \   if (a + b > c && a + c > b && b + c > a)\n            (sqrt(pow(a, 2) + pow(b,\
    \ 2) - pow(c, 2)) * sqrt(pow(b, 2) + pow(c, 2) - pow(a, 2)) * sqrt(pow(c, 2) +\
    \ pow(a, 2) - pow(b, 2)) / 4).toFloat\n        else -1", '        if ((a + b >
    c) && (a + c > b) && (b + c > a)) sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2)).toFloat
    else -1', "        // Define a type alias to make the syntax easier.\n       \
    \ type Side = Long\n        // Make a list of the three sides\n        val sides\
    \ = List(a, b, c)\n        // Verify that the three sides form a valid triangle.\n\
    \        if (sides.min >= (sides.sum - sides.min)) {\n            -1\n       \
    \ } else {\n            // Calculate the semi-perimeter\n            val s = (sides.sum)\
    \ / 2\n            // Calculate the area\n            (sqrt(s * (s - a) * (s -\
    \ b) * (s - c))).toFloat\n        }", "        if (a + b > c && a + c > b && b\
    \ + c > a) return ((a * b * sin(toRadians(c))) / 2).toFloat\n        return -1",
  "        def triangleArea0(a : Long, b : Long, c : Long) : Double = {\n        \
    \    val s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\n        }\n        if (a + b > c && a + c > b && b + c > a) round(triangleArea0(a,\
    \ b, c) * 100) / 100.0f else -1l", "        // Fill Up this function body\n  \
    \      // `a`, `b`, `c` are the lengths of the three sides of a triangle.\n  \
    \      if (a + b > c && a + c > b && b + c > a)\n            ((a * b * sin(acos((a\
    \ * a + b * b - c * c) / (2 * a * b)).toFloat)) / 2).toFloat\n        else\n \
    \           -1f", "        if (a + b <= c || a + c <= b || b + c <= a) -1f\n \
    \       else {\n            val halfperimeter = (a + b + c) / 2.0\n          \
    \  sqrt(halfperimeter * (halfperimeter - a) * (halfperimeter - b) * (halfperimeter\
    \ - c)).toFloat\n        }", "        var (x, y, z) = (a, b, c)\n        if ((x\
    \ + y > z) && (x + z > y) && (y + z > x)) \n            sqrt(pow(x, 2) + pow(y,\
    \ 2) - pow(z, 2)).toFloat\n        else -1", "        if (a + b > c && a + c >\
    \ b && b + c > a)\n            ((a + b + c) * (a + b - c) * (a - b + c) * (-a\
    \ + b + c)).toFloat / 4\n        else\n            -1", "        // Your code\
    \ here\n        -1f", "        //println(\"a, b, c:\" + a + \",\" + b + \",\"\
    \ + c)\n        if (a > 0 && b > 0 && c > 0 && (a + b > c) && (a + c > b) && (b\
    \ + c > a)) {\n            val p = (a + b + c) / 2f\n            //println(\"\
    p:\" + p)\n            val s = sqrt(p * (p - a) * (p - b) * (p - c))\n       \
    \     //println(\"s:\" + s)\n            s\n        } else -1", "        if (a\
    \ + b > c && a + c > b && b + c > a) {\n            val s = (a + b + c).toFloat\
    \ / 2\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        } else\
    \ -1", "        // Fill Up this function body\n        // `p` is the perimeter\
    \ of the triangle\n        val p = a + b + c\n        val s = p / 2\n        sqrt(s\
    \ * (s - a) * (s - b) * (s - c)).toFloat", "        def isTriangle = a + b > c\
    \ && a + c > b && b + c > a\n        if (!isTriangle) -1 else {\n            val\
    \ s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n\
    \        }", "        // YOUR CODE HERE\n        if (a + b > c && a + c > b &&\
    \ b + c > a) {\n            val s = (a + b + c) / 2.0\n            sqrt(s * (s\
    \ - a) * (s - b) * (s - c)).toFloat\n        } else {\n            -1\n      \
    \  }", "        if (a + b > c && a + c > b && b + c > a) {\n            val s\
    \ = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n\
    \        } else -1f", "        val p = (a + b + c) / 2f\n        if (a + b > c\
    \ && a + c > b && b + c > a) sqrt(p * (p - a) * (p - b) * (p - c)).toFloat\n \
    \       else -1f", "        val sides = Array(a, b, c)\n        val max = sides.max\n\
    \        if (max >= (sides(0) + sides(1) + sides(2) - max)) {\n            -1.0f\n\
    \        } else {\n            val p = (a + b + c) / 2.0\n            sqrt(p *\
    \ (p - a) * (p - b) * (p - c)).toFloat\n        }", "        val sideArray = Array(a,\
    \ b, c)\n        sideArray.sortWith(_ > _)\n        if (sideArray(0) < sideArray(1)\
    \ + sideArray(2)) {\n            val s = 0.5 * (sideArray(0) + sideArray(1) +\
    \ sideArray(2))\n            (sqrt(s * (s - sideArray(0)) * (s - sideArray(1))\
    \ * (s - sideArray(2)))).toFloat\n        } else -1", "        // Fill in the\
    \ code here\n        val sides = List(a, b, c)\n        val (x, y, z) = (sides.max,\
    \ sides.min, sides.filter(x => x != sides.max && x != sides.min).head)\n     \
    \   if (x + y < z) -1 else {\n            val s = (x + y + z) / 2.0\n        \
    \    val area = sqrt(s * (s - x) * (s - y) * (s - z))\n            area.toFloat\n\
    \        }", "        if (a + b <= c || a + c <= b || b + c <= a) -1f\n      \
    \  else {\n            val s = (a + b + c) / 2.0\n            sqrt(s * (s - a)\
    \ * (s - b) * (s - c)).toFloat\n        }", "        if (a + b <= c || a + c <=\
    \ b || b + c <= a) -1\n        else sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2)).toFloat\
    \ / 4", "        val temp = a + b + c\n        if (temp == 0) {\n            return\
    \ -1\n        }\n        val p = temp.toFloat / 2\n        sqrt(p * (p - a) *\
    \ (p - b) * (p - c)).toFloat", "        // Fill up this function body\n      \
    \  // `a`, `b` and `c` are the side lengths of the triangle\n        val side1\
    \ = (a + b)\n        val side2 = (b + c)\n        val side3 = (c + a)\n      \
    \  if(side1 > c && side2 > a && side3 > b)\n            return sqrt(pow(a, 2)\
    \ + pow(b, 2) - 2 * a * b * cos(toRadians(c))).toFloat\n        else\n       \
    \     return -1f", "        def helper(a : Long, b : Long, c : Long) : Float =\
    \ {\n            val p = (a + b + c).toFloat / 2.0f\n            sqrt(p * (p -\
    \ a) * (p - b) * (p - c)).toFloat\n        }\n        if (a + b <= c || a + c\
    \ <= b || b + c <= a) return -1\n        else helper(a, b, c)", "        if (a\
    \ + b > c && a + c > b && b + c > a) {\n            val s = (a + b + c) / 2.0\n\
    \            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        } else {\n\
    \            -1\n        }", "      if (a > 0 && b > 0 && c > 0 && a + b > c &&\
    \ a + c > b && b + c > a)\n        (a.toFloat * b.toFloat * c.toFloat) / 2\n \
    \     else\n        -1", "        // your code here\n        return -1.0f", " \
    \       // Fill up this function body\n        // `a`, `b` and `c` correspond\
    \ to the lengths of the sides of a triangle\n        // Do not modify the function\
    \ parameters\n        if (a + b > c && a + c > b && b + c > a) return sqrt(a *\
    \ a + b * b - 2 * a * b * c * c * c * c * c * c * c * c * c * c).toFloat\n   \
    \     else return -1.0f", "      // If a triangle doesn't form, return -1\n  \
    \    if (a + b < c || a + c < b || b + c < a) -1f\n      // Calculate Area\n \
    \     else (a + b + c).toFloat / 2", "    \t// your code here\n        var ret\
    \ = -1f\n        val sides = Array(a, b, c)\n        sides.sortWith(_ < _)\n \
    \       if (sides(0) + sides(1) > sides(2)) {\n            ret = sqrt(sides(0)\
    \ * sides(0) + sides(1) * sides(1) - sides(2) * sides(2)).toFloat / 4\n      \
    \  }\n        ret", "        val s = (a + b + c) / 2.0\n        val i = s * (s\
    \ - a) * (s - b) * (s - c)\n        if (i > 0) {\n            sqrt(i).toFloat\n\
    \        } else {\n            -1\n        }", "        // Your code here\n  \
    \      return 0.0f", "        if (a + b > c && a + c > b && b + c > a) return\
    \ (sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2)) * b / 2).toFloat\n        return -1f",
  "        if (a + b > c && a + c > b && b + c > a) {\n            val s = (a + b\
    \ + c) / 2.0f\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n   \
    \     } else -1f", '        return if ((a + b) > c && (a + c) > b && (b + c) >
    a) (0.5f * a * b).toFloat else -1f', "        // Your Code Here\n        if (a+b>c\
    \ && a+c>b && b+c>a) {\n        \tval p = (a+b+c)/2.0f\n        \tsqrt(p*(p-a)*(p-b)*(p-c)).toFloat\n\
    \        } else -1.0f", "        if (a + b > c && a + c > b && b + c > a)\n  \
    \          sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2)).toFloat / 4\n        else -1.0f",
  "        // Fill Up this function body\n        // `0.0f` denotes the floating zero\n\
    \        0.0f", "        // Your Code Here\n        0f", "        //YOUR CODE\
    \ HERE\n        return 0f", "        // Your Code Here\n        return -1f", " \
    \       val s = (a + b + c) / 2.0f\n        val area = sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n        if (area.isNaN) -1.0f else area", "        var c1 = (a\
    \ + b > c)\n        var c2 = (a + c > b)\n        var c3 = (b + c > a)\n     \
    \   var p = (a + b + c) / 2.0\n        if (c1 && c2 && c3) sqrt(p * (p - a) *\
    \ (p - b) * (p - c)).toFloat\n        else -1", "      // Type your code here\n\
    \      var p = (a+b+c)/2.0\n      if (p > (a max b max c)) {\n        sqrt(p*(p-a)*(p-b)*(p-c)).toFloat\n\
    \      } else {\n        -1\n      }", "        if(a + b > c && a + c > b && b\
    \ + c > a)\n            sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2)).toFloat / 4\n\
    \        else\n            -1", "        val sides = List(a, b, c).sorted\n  \
    \      if (sides(0) + sides(1) > sides(2)) {\n            sqrt(sides(0).toFloat\
    \ * sides(1).toFloat * sides(2).toFloat * (sides(0).toFloat + sides(1).toFloat\
    \ + sides(2).toFloat) / 4.0f).toFloat\n        } else {\n            -1\n    \
    \    }", "        // TODO: Write your code here.\n        var area = -1f\n   \
    \     if (a + b > c && a + c > b && b + c > a) area = (a * b * sin(c)).toFloat\n\
    \        return area", "        if (a <= 0 || b <= 0 || c <= 0) {\n          \
    \  return -1\n        }\n        if (a + b <= c || a + c <= b || b + c <= a) {\n\
    \            return -1\n        }\n        val s = (a + b + c) / 2.0\n       \
    \ sqrt(s * (s - a) * (s - b) * (s - c)).toFloat", "        // hint 1: you may\
    \ want to use scala.util.Sorting\n        // hint 2: The triangle inequality theorem\
    \ states that the sum of any two sides\n        // of a triangle is greater than\
    \ the third side.\n        var x = List[Long](a, b, c)\n        x = x.sorted\n\
    \        if (x(0) + x(1) > x(2))\n            0.5f * x(0) * x(1)\n        else\n\
    \            -1f", "        // Fill Up this function body\n        // `0.0f` denotes\
    \ the floating point 0\n        val s = (a + b + c) / 2.0\n        if (s == 0)\
    \ 0.0f\n        else sqrt(s * (s - a) * (s - b) * (s - c)).toFloat", '        //
    YOUR CODE GOES HERE', "        val s = (a + b + c) / 2.0f\n        if (s - a >\
    \ 0 && s - b > 0 && s - c > 0) {\n            sqrt(s * (s - a) * (s - b) * (s\
    \ - c)).toFloat\n        } else {\n            -1f\n        }", "        if (a\
    \ + b > c && a + c > b && b + c > a) {\n            // semiperimeter\n       \
    \     val s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s -\
    \ c)).toFloat\n        } else -1.0f", "        val sides = Array(a, b, c)\n  \
    \      sides.sort\n        return if(sides(0) + sides(1) > sides(2)) {\n     \
    \       val p = (a + b + c) / 2.0\n            sqrt(p * (p - a) * (p - b) * (p\
    \ - c)).toFloat\n        } else -1", "        // Fill Up this function body\n\
    \        // `0.0f` represents the default value to return \n        var s:Float=(a+b+c)/2\n\
    \        var area:Float=sqrt(s*(s-a)*(s-b)*(s-c)).toFloat\n        if(area>0){\n\
    \            return area\n        }\n        else{\n            return -1\n  \
    \      }", "        val s = (a + b + c) / 2.0f\n        val result = sqrt(s *\
    \ (s - a) * (s - b) * (s - c))\n        if (result > 0.0f) result.toFloat else\
    \ -1.0f", "    \tval s = (a + b + c) / 2\n    \tif (s > a && s > b && s > c) sqrt(s\
    \ * (s - a) * (s - b) * (s - c)).toFloat\n    \telse -1", "        if (a + b <=\
    \ c || a + c <= b || b + c <= a) {\n            -1.0f\n        } else {\n    \
    \        val s = (a + b + c) / 2\n            sqrt(s * (s - a) * (s - b) * (s\
    \ - c)).toFloat\n        }", "        // Write your code here\n        -1", " \
    \       // Your Code Here\n        if (a + b > c && a + c > b && b + c > a) {\n\
    \            // Heron's formula\n            val s = (a + b + c) / 2.0\n     \
    \       sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        } else -1.0f",
  "        val s = 0.5f * (a + b + c)\n        val area = sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n        if (area > 0) {\n            return area.toFloat\n  \
    \      }\n        return -1.0f", "        // Your Code Here\n        val retVal\
    \ : Float = -1\n        retVal", "        val s = (a + b + c) / 2.0\n        val\
    \ ans = s * (s - a) * (s - b) * (s - c)\n        if (ans < 0) -1.0f else sqrt(ans).toFloat",
  "        // a^2 + b^2 = c^2\n        if (a + b > c && b + c > a && a + c > b) (a\
    \ * b * sin(acos((pow(a, 2) + pow(b, 2) - pow(c, 2)) / (2 * a * b))) / 2).toFloat\n\
    \        else -1.0f", "        val x = a.toFloat\n        val y = b.toFloat\n\
    \        val z = c.toFloat\n        // A = sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \        // s = (a + b + c) / 2\n        if (x + y <= z || x + z <= y || y + z\
    \ <= x) -1f\n        else {\n            val s = (x + y + z) / 2\n           \
    \ sqrt(s * (s - x) * (s - y) * (s - z)).toFloat\n        }", "        if (a +\
    \ b > c && a + c > b && b + c > a) return sqrt(pow(a, 2) + pow(b, 2) - pow(c,\
    \ 2)).toFloat\n        else return -1f", "        val s = (a.toFloat + b.toFloat\
    \ + c.toFloat) / 2\n        if (s <= a || s <= b || s <= c) -1f\n        else\
    \ sqrt(s * (s - a) * (s - b) * (s - c)).toFloat", "        // TODO: Write your\
    \ code here\n        return -1", "        val res = (a + b + c) / 2.0\n      \
    \  if (res - a <= 0 || res - b <= 0 || res - c <= 0) {\n            -1\n     \
    \   } else {\n            sqrt(res * (res - a) * (res - b) * (res - c)).toFloat\n\
    \        }", "        // YOUR CODE HERE\n        return 0", "        // Your code\
    \ goes here\n        -1f", "        if (a + b > c && a + c > b && b + c > a) \n\
    \            (0.5f * (a * b + b * c + a * c)).toFloat\n        else -1", "   \
    \     if (a + b > c && a + c > b && b + c > a) {\n            val s = (a + b +\
    \ c) / 2\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        }\
    \ else -1", "        if (a + b > c && a + c > b && b + c > a) {\n            val\
    \ s = (a + b + c) / 2.0f\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n\
    \        } else -1", "        if (a + b > c && a + c > b && b + c > a) return\
    \ a * b * c;\n        -1;", "        // Your code here\n        val longArray\
    \ = Array(a, b, c)\n        val s = longArray.sum / 2.0\n        sqrt(s * (s -\
    \ a) * (s - b) * (s - c)).toFloat", "    \t// Fill up this function body\n   \
    \     // `0.0f` is just a placeholder for compilation\n        if(a > 0 && b >\
    \ 0 && c > 0 && (a + b > c) && (a + c > b) && (b + c > a)) {\n            val\
    \ s = (a + b + c) / 2.0\n            return sqrt(s * (s - a) * (s - b) * (s -\
    \ c)).toFloat\n        }\n        return -1.0f", "        //if (a + b > c && a\
    \ + c > b && b + c > a) {\n        \tval s = (a + b + c) / 2.0\n        \tsqrt(s\
    \ * (s - a) * (s - b) * (s - c)).toFloat\n        //} else -1.0f", "        if\
    \ (a + b <= c || a + c <= b || b + c <= a) -1\n        else {\n          val s\
    \ = (a + b + c) / 2\n          sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n\
    \        }", "        var s : Float = ((a + b + c) / 2).toFloat\n        var area\
    \ : Float = sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        if (a + b >\
    \ c && a + c > b && b + c > a) return area\n        else return -1", "       \
    \ if (a + b > c && a + c > b && b + c > a) (a * b * c).toFloat / (4 * sqrt(a +\
    \ b + c).toFloat * sqrt(a + b - c).toFloat * sqrt(a + c - b).toFloat * sqrt(b\
    \ + c - a).toFloat)\n        else -1", "        var s = (a + b + c) / 2.0f\n \
    \       var ret = sqrt(s * (s - a) * (s - b) * (s - c))\n        ret = ret * 100.0f;\n\
    \        ret = Math.round(ret);\n        ret = ret / 100.0f;\n        return ret;",
  "        // Your code here\n        0", "        // Your code goes here\n      \
    \  if ((a + b > c) && (a + c > b) && (b + c > a))\n            return ((sqrt(pow(a,\
    \ 2) + pow(b, 2) - pow(c, 2))) / 4) * sqrt(4 * pow(a, 2) * pow(b, 2) - pow(pow(a,\
    \ 2) + pow(b, 2) - pow(c, 2), 2))\n        else\n            return -1", "   \
    \     // Fill up this function body\n        // `a`, `b` and `c` are the side\
    \ lengths\n        if (a < 1 || b < 1 || c < 1) -1\n        else if (a + b <=\
    \ c || a + c <= b || b + c <= a) -1\n        else (1f / 4) * sqrt(4 * a * a *\
    \ b * b - pow(a * a + b * b - c * c, 2).toFloat).toFloat", "        // Your Code\
    \ Here\n        if (a + b <= c || a + c <= b || b + c <= a) -1f\n        else\
    \ sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2)).toFloat", "        // Fill Up this function\
    \ body\n        // `0.0f` represents the default value to return\n        0.0f",
  "        if (a + b <= c || a + c <= b || b + c <= a) -1\n        else {\n      \
    \      val p = (a + b + c) / 2.0\n            sqrt(p * (p - a) * (p - b) * (p\
    \ - c)).toFloat\n        }", "        // YOUR CODE HERE\n        if (a + b > c\
    \ && a + c > b && b + c > a) {\n            // Heron's formula\n            val\
    \ s = (a + b + c) / 2.0\n            val area = sqrt(s * (s - a) * (s - b) * (s\
    \ - c))\n            return area.toFloat\n        }\n        -1.0f", "       \
    \ // Fill Up this function body\n        // `0.0f` is just a default return value\
    \ and is not the actual solution\n        var t = new Array[Long](3)\n       \
    \ t(0) = a\n        t(1) = b\n        t(2) = c\n        t = t.sorted\n       \
    \ if (t(0) + t(1) > t(2)) {\n            val s = (t(0) + t(1) + t(2)) / 2.0\n\
    \            ((sqrt(s * (s - t(0)) * (s - t(1)) * (s - t(2))) * 100).round) /\
    \ 100.0f\n        } else -1", "        // Fill Up this function body\n       \
    \ // `a` is side 1, `b` is side 2, `c` is side 3\n        if ((a+b) > c && (a+c)\
    \ > b && (b+c) > a) (sqrt(pow(a,2) + pow(b,2) - 2*a*b*cos(Pi - (acos((pow(a,2)\
    \ + pow(b,2) - pow(c,2))/(2*a*b)))))*b/2).toFloat\n        else -1.0f", "    \
    \    if (a + b > c && a + c > b && b + c > a) \n            sqrt(pow(a, 2) + pow(b,\
    \ 2) - pow(c, 2)).toFloat / 4\n        else\n            -1", "        // FILL\
    \ ME IN\n        val s = (a + b + c) / 2f\n        if (s - a < 0 || s - b < 0\
    \ || s - c < 0) -1f\n        else sqrt(s * (s - a) * (s - b) * (s - c)).toFloat",
  "        var l = Array(a, b, c)\n        l = l.sorted\n        if (l(0) + l(1) >\
    \ l(2)) {\n            val p = (a + b + c) / 2f\n            sqrt(p * (p - a)\
    \ * (p - b) * (p - c)).toFloat\n        } else -1f", "      // YOUR CODE HERE\n\
    \      def isTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val\
    \ ab = a + b;\n        val bc = b + c;\n        val ac = a + c;\n        if (ab\
    \ <= c || bc <= a || ac <= b) false else true\n      }\n      if (isTriangle(a,\
    \ b, c)) {\n        val p = (a + b + c) / 2.0\n        sqrt(p * (p - a) * (p -\
    \ b) * (p - c)).toFloat\n      } else -1f", "        if (a < b + c && b < a +\
    \ c && c < a + b) {\n            val s = (a + b + c).toFloat / 2\n           \
    \ sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        } else -1", "       \
    \ // TODO\n        -1.0f", "        // Must satisfy the triangle inequality\n\
    \        if (a + b > c && a + c > b && b + c > a) {\n            val s = (a +\
    \ b + c).toFloat / 2\n            val res = sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\n            res.formatted(\"%.2f\").toFloat\n        } else {\n       \
    \     -1\n        }", "        // Your code here\n        if (a + b > c && a +\
    \ c > b && b + c > a) {\n            val s = (a + b + c).toFloat / 2\n       \
    \     sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        } else -1f", "  \
    \      // Fill Up this function body\n        // `0.0f` denotes the float 0\n\
    \        if (a + b > c && a + c > b && b + c > a) sqrt(pow(a, 2) + pow(b, 2) -\
    \ pow(c, 2)).toFloat\n        else -1f", "        def dblToFlt(d : Double) : Float\
    \ = {\n            return d.toFloat\n        }\n        if (a + b > c && a + c\
    \ > b && b + c > a) {\n            val p = (a + b + c).toFloat / 2\n         \
    \   val s = sqrt(p * (p - a) * (p - b) * (p - c))\n            return dblToFlt(s)\n\
    \        }\n        else return -1", "        if (a <= 0 || b <= 0 || c <= 0)\
    \ return -1f\n        val p = (a + b + c) / 2f\n        sqrt(p * (p - a) * (p\
    \ - b) * (p - c)).toFloat", "        //YOUR CODE HERE\n        (a + b > c) &&\
    \ (a + c > b) && (b + c > a) match {\n          case true => {\n            val\
    \ p = (a + b + c) / 2f\n            sqrt(p * (p - a) * (p - b) * (p - c)).toFloat\n\
    \          }\n          case false => -1f\n        }", "        // Your code here\n\
    \        return -1", "        // Fill Up this function body\n        // `a`, `b`,\
    \ `c` are the lengths of the three sides of a triangle\n        if (a + b > c\
    \ && a + c > b && b + c > a) {\n            val s = (a + b + c) / 2.0\n      \
    \      return sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        }\n     \
    \   return -1", "        // This can be solved in a single line, but I wanted\
    \ to use a more\n        // functional style in this one.\n        val sortedSides\
    \ = Array(a, b, c).sorted\n        val ret =\n            if (sortedSides(0) +\
    \ sortedSides(1) > sortedSides(2)) {\n                val p = (a + b + c) / 2\n\
    \                sqrt(p * (p - a) * (p - b) * (p - c)).toFloat\n            }\
    \ else -1\n        ret", "        // TODO: implement this using Heron's formula\
    \ (see the slides or\n        // Google it)\n        var s : Double = (a+b+c)/2\n\
    \        var p = (s*(s-a)*(s-b)*(s-c))\n        val x : Double = pow(p,0.5)\n\
    \        x.toFloat", "        // The Heron's formula\n        if (a + b > c &&\
    \ a + c > b && b + c > a)\n            sqrt(a * b * c * (a + b + c) / 4).toFloat\n\
    \        else -1f", "        val s = (a + b + c) / 2.0f\n        if (s <= a ||\
    \ s <= b || s <= c) -1 else sqrt(s * (s - a) * (s - b) * (s - c)).toFloat", " \
    \       var s = (a + b + c) / 2f\n        return -1f;", "        if (a + b > c\
    \ && a + c > b && b + c > a) (sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2)) * sqrt(pow(a,\
    \ 2) + pow(c, 2) - pow(b, 2)) * sqrt(pow(b, 2) + pow(c, 2) - pow(a, 2)) / 4).toFloat\n\
    \        else -1", "        var s = (a + b + c) / 2\n        if (s <= a || s <=\
    \ b || s <= c) {\n            return -1\n        }\n        return sqrt(s * (s\
    \ - a) * (s - b) * (s - c)).toFloat", "        // Fill Up this function body\n\
    \        // `a`, `b`, `c` are the three sides of the triangle\n        // Do not\
    \ change the function `name`\n        a * b * c / 2", "    \tval sides = Array(a,\
    \ b, c)\n    \tval sortedSides = sides.sorted\n    \tif (sortedSides(0) + sortedSides(1)\
    \ > sortedSides(2)) {\n    \t\tval p = (a + b + c) / 2.0\n    \t\tsqrt(p * (p\
    \ - a) * (p - b) * (p - c)).toFloat\n    \t} else {\n    \t\t-1f\n    \t}", " \
    \       // Your Code Here\n        return -1.0f", "        // Your Code Here\n\
    \        def calArea(a : Double, b : Double, c : Double) : Double = {\n      \
    \      val s = (a + b + c) / 2\n            sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\n        }\n        if (a + b > c && a + c > b && b + c > a)\n         \
    \   round(calArea(a, b, c) * 100).toFloat / 100\n        else -1", "        if\
    \ (a + b <= c || a + c <= b || b + c <= a) return -1\n        val s = (a + b +\
    \ c) / 2\n        sqrt(s * (s - a) * (s - b) * (s - c)).toFloat", "        if\
    \ (a + b > c && a + c > b && b + c > a) (a * b * c).toFloat / 2 / (a + b + c)\n\
    \        else -1.0f", "        val max = List(a, b, c).max\n        val otherSides\
    \ = List(a, b, c).filter((n : Long) => n != max)\n        if (otherSides.sum <=\
    \ max) -1f\n        else {\n            val p = (a + b + c) / 2f\n           \
    \ sqrt(p * (p - a) * (p - b) * (p - c)).toFloat\n        }", "        var sides\
    \ = List(a, b, c)\n        if (sides.filter((x) => x >= sides.max).size >= 2)\
    \ {\n            var s = sides.sum / 2f\n            return sqrt(s * (s - a) *\
    \ (s - b) * (s - c)).toFloat\n        }\n        return -1f", "        val s =\
    \ (a + b + c) / 2.0\n        sqrt(s * (s - a) * (s - b) * (s - c)).toFloat", " \
    \       if (a + b > c && a + c > b && b + c > a) {\n            val s = (a + b\
    \ + c).toFloat / 2\n            val temp = s * (s - a) * (s - b) * (s - c)\n \
    \           if (temp > 0) return sqrt(temp).toFloat\n        }\n        return\
    \ -1.0f", "        val s = (a + b + c) / 2.0f\n        val area = sqrt(s * (s\
    \ - a) * (s - b) * (s - c))\n        if (area.isNaN) -1l\n        else area.toFloat",
  "        // Fill Up this function body\n        // `a`, `b`, `c` are valid inputs\n\
    \        val (x, y, z) = (a.toFloat, b.toFloat, c.toFloat)\n        if (x + y\
    \ > z && x + z > y && y + z > x) {\n            val s = (x + y + z) / 2\n    \
    \        val area = sqrt(s * (s - x) * (s - y) * (s - z))\n            area.toFloat\n\
    \        } else {\n            -1\n        }", "        val l = List(a, b, c)\n\
    \        l.sorted.take(2).sum match {\n            case s if s > l.max => s *\
    \ (s - l.max) / 2.0f\n            case _ => -1\n        }", "        // Your code\
    \ goes here\n        0f", "        // YOUR CODE HERE\n        (1f)", "       \
    \ val list = Array(a, b, c).sorted\n        val s = (list(0) + list(1) + list(2))\
    \ / 2.0\n        val area = sqrt(s * (s - list(0)) * (s - list(1)) * (s - list(2)))\n\
    \        if (area > 0) area.toFloat else -1", "        // Your code goes here\n\
    \        // Return -1 if the triangle is invalid\n        if (a + b > c && a +\
    \ c > b && b + c > a) {\n            sqrt(pow(a, 2).toFloat + pow(b, 2).toFloat\
    \ - 2 * a * b * cos(acos(a / c).toFloat).toFloat).toFloat\n        } else {\n\
    \            -1\n        }", "    \tif (a + b <= c || a + c <= b || b + c <= a)\
    \ -1l else {\n    \t\tval p = (a + b + c) / 2.0\n    \t\tsqrt(p * (p - a) * (p\
    \ - b) * (p - c)).toFloat\n    \t}", "        if (a + b > c && a + c > b && b\
    \ + c > a) {\n            // Using Heron's formula to calculate area of triangle\n\
    \            val s = (a + b + c) / 2.0f\n            sqrt(s * (s - a) * (s - b)\
    \ * (s - c)).toFloat\n        } else -1.0f", "        if (a + b > c && a + c >\
    \ b && b + c > a) \n            return (sqrt(a.toFloat * a.toFloat + b.toFloat\
    \ * b.toFloat - c.toFloat * c.toFloat).toFloat / 4).toFloat\n        else \n \
    \           return -1", "        def isValidTriangle(a : Long, b : Long, c : Long)\
    \ : Boolean = {\n            a + b > c && a + c > b && b + c > a\n        }\n\
    \        if (isValidTriangle(a, b, c)) {\n            // (1/2) * a * b * sin(C)\n\
    \            val s = (a + b + c) / 2.0\n            val area = sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n            area.toFloat\n        } else {\n         \
    \   -1\n        }", "        var ret : Float = -1f\n        if (a + b > c && a\
    \ + c > b && b + c > a) {\n            val p = (a + b + c) / 2\n            ret\
    \ = sqrt(p * (p - a) * (p - b) * (p - c)).toFloat\n        }\n        ret", " \
    \       // 3 sides form a valid triangle when the sum of any two sides is greater\
    \ \n        // than the third side.\n        if (a < b + c && b < a + c && c <\
    \ a + b) {\n            // p is the half-perimeter of the triangle\n         \
    \   val p = (a + b + c) / 2\n            // Heron's formula\n            val area\
    \ = sqrt(p * (p - a) * (p - b) * (p - c)).toFloat\n            // Rounding to\
    \ 2 decimal points\n            return BigDecimal(area).setScale(2, BigDecimal.RoundingMode.HALF_UP).toFloat\n\
    \        }\n        -1", "        var l = List(a, b, c)\n        l = l.sorted\n\
    \        if (l(0) + l(1) <= l(2)) return -1f\n        val p = (a + b + c).toFloat\
    \ / 2\n        var result = p * (p - a) * (p - b) * (p - c)\n        if (result\
    \ < 0) return -1f\n        sqrt(result).toFloat", '        // Your code goes here',
  "    \t// Fill Up this function body\n        // `0.0f` for Scala fucntion is equivalent\
    \ to `0.0` in Java\n    \tif (a + b > c && a + c > b && b + c > a) return a *\
    \ b * c * 0.5f\n    \treturn -1.0f", "      if (a + b > c && a + c > b && b +\
    \ c > a) sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2)).toFloat * 0.5f\n      else -1",
  "        if (a + b <= c || a + c <= b || b + c <= a) -1\n        else {\n      \
    \      val s = (a + b + c) / 2\n            sqrt(s * (s - a) * (s - b) * (s -\
    \ c)).toFloat\n        }", "        // the three sides are a, b, c\n        //\
    \ 1. if a+b<=c, return -1\n        // 2. if a+c<=b, return -1\n        // 3. if\
    \ b+c<=a, return -1\n        // 4. if a==0 && b==0 && c==0, return -1\n      \
    \  // 5. else return s*(s-a)*(s-b)*(s-c)\n        if (a + b <= c || a + c <= b\
    \ || b + c <= a || a == 0 || b == 0 || c == 0) {\n            -1f\n        } else\
    \ {\n            val s = (a + b + c) / 2f\n            val area = sqrt(s * (s\
    \ - a) * (s - b) * (s - c))\n            area\n        }", "        //throw new\
    \ Exception()\n        val s = (a + b + c) / 2.0f\n        if (s <= a || s <=\
    \ b || s <= c) -1f\n        else sqrt(s * (s - a) * (s - b) * (s - c)).toFloat",
  "        if (a < 0 || b < 0 || c < 0) -1\n        else if ((a + b > c) && (a + c\
    \ > b) && (b + c > a)) {\n            val s = (a + b + c) / 2.0\n            sqrt(s\
    \ * (s - a) * (s - b) * (s - c)).toFloat\n        }\n        else -1", "    \t\
    // Form a triangle\n    \tif (a + b > c && a + c > b && b + c > a) {\n    \t\t\
    // Heron's formula\n    \t\tval s = (a + b + c).toFloat / 2\n    \t\tsqrt(s *\
    \ (s - a) * (s - b) * (s - c)).toFloat\n    \t} else {\n    \t\t-1\n    \t}",
  '        -1', "        // Fill Up this function body\n        // `0.0f` denotes\
    \ the floating point number 0\n        0.0f", "        val d = Array(a, b, c).sorted\n\
    \        if (d(0) + d(1) <= d(2)) -1 else {\n            val p = (a + b + c) /\
    \ 2.0\n            sqrt(p * (p - a) * (p - b) * (p - c)).toFloat\n        }",
  "        var sides = List(a, b, c)\n        val m = sides.max\n        sides = sides.filter(x\
    \ => x != m)\n        if (sides.sum > m) {\n            sqrt(sides.map(x => x\
    \ * x).sum.toFloat - m * m).toFloat\n        } else {\n            -1\n      \
    \  }", "        if (a + b > c && a + c > b && b + c > a)\n            (a * b *\
    \ c) / (2 * sqrt(a * a + b * b + c * c - a * b - a * c - b * c)).toFloat\n   \
    \     else\n            -1.0f", "      if (a + b <= c || a + c <= b || b + c <=\
    \ a) {\n        -1\n      } else {\n        val s = (a + b + c) / 2.0\n      \
    \  sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n      }", "        // Fill Up\
    \ this function body\n        // `a`, `b`, `c` are given\n        if(!(a + b >\
    \ c && a + c > b && b + c > a)) -1\n        else (a + b + c) / 2.0f", "      \
    \  if (a <= 0 || b <= 0 || c <= 0) -1f\n        else if (a + b <= c || a + c <=\
    \ b || b + c <= a) -1f\n        else {\n            val s = (a + b + c) / 2.0\n\
    \            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        }", "    \
    \    // Fill in the code here\n        if (a + b > c && a + c > b && b + c > a)\
    \ {\n            val s = (a + b + c).toFloat / 2.0f\n            sqrt(s * (s -\
    \ a) * (s - b) * (s - c)).toFloat\n        } else -1", "        var s : Long =\
    \ (a + b + c) / 2\n        if (s < a || s < b || s < c) {\n            return\
    \ -1f\n        }\n        var temp : Float = s * (s - a) * (s - b) * (s - c)\n\
    \        temp = sqrt(temp).toFloat\n        return temp", "        // Fill Up\
    \ this function body\n        // `a` `b` `c` are the length of a triangle\n  \
    \      // return the area of the triangle or -1 if the triangle is not valid\n\
    \        if (a > 0 && b > 0 && c > 0 && (a + b > c) && (a + c > b) && (b + c >\
    \ a)) {\n            val s = (a + b + c) / 2.0\n            sqrt(s * (s - a) *\
    \ (s - b) * (s - c)).toFloat\n        } else -1", "        if (a < 1 || b < 1\
    \ || c < 1) return -1\n        if (a + b <= c || a + c <= b || b + c <= a) return\
    \ -1\n        val s = (a + b + c) / 2.0\n        sqrt(s * (s - a) * (s - b) *\
    \ (s - c)).toFloat", "        // Your Code Here\n        if (a + b <= c || a +\
    \ c <= b || b + c <= a) -1\n        else (sqrt(pow(a, 2) + pow(b, 2) - pow(c,\
    \ 2)) * sqrt(pow(b, 2) + pow(c, 2) - pow(a, 2)) * sqrt(pow(c, 2) + pow(a, 2) -\
    \ pow(b, 2)))/4", '        -1f', "        // Good luck!\n        ???", "     \
    \   //Implement this function.\n        -1.0f", "        // This gets a little\
    \ tricky when we're dealing with floats.\n        // I'm sure there is a way to\
    \ use a more precise type, but I'm not sure\n        // what that would be.\n\
    \        if (a + b > c && a + c > b && b + c > a) {\n            val s = (a +\
    \ b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n  \
    \      } else {\n            -1\n        }", "        // Your code goes here\n\
    \        return 0.0f", "        if (a + b > c && a + c > b && b + c > a) return\
    \ ((sqrt(pow(a, 2) + pow(b, 2) - pow(c, 2)) * b * c) / 4).toFloat\n        return\
    \ -1", "        // YOUR CODE HERE\n        if (a + b > c && a + c > b && b + c\
    \ > a)\n            a.toFloat * b.toFloat * c.toFloat\n        else\n        \
    \    -1.0f"]
stop_tokens:
- "\n    }\n"
