name: HumanEval_162_string_to_md5
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string 'text', return its md5 hash equivalent string.\n    // If\
  \ 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"\
  ))\n    // \"3e25960a79dbc69b674cd4ec67a72c62\"\n    def stringToMd5(text : String)\
  \ : Option[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello\
  \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
  \")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
  ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
  ));\n    }\n\n}\n"
completions: ["        if (text.length == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes)\n        val byteData = md.digest()\n\
    \        return Some(byteData.map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length() == 0) {\n            return None\n  \
    \      }\n        Some(md5(text))", "        val md5 = MessageDigest.getInstance(\"\
    MD5\")\n        md5.update(text.getBytes, 0, text.length)\n        val hashedText\
    \ = new BigInteger(1, md5.digest).toString(16)\n        if (hashedText.length\
    \ == 31) Some(\"0\" + hashedText) else Some(hashedText)", "        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        if (text == \"\") return None\n        Some(md.digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        import java.security.MessageDigest\n\
    \        if (text == \"\") None\n        else {\n            val md = MessageDigest.getInstance(\"\
    MD5\")\n            md.update(text.getBytes)\n            Some(md.digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.length == 0) None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            Some(digest.map(\"\
    %02x\".format(_)).mkString)\n        }", "        if (text.isEmpty) None\n   \
    \     else {\n            val m = java.security.MessageDigest.getInstance(\"MD5\"\
    )\n            val b = text.getBytes(\"UTF-8\")\n            m.update(b, 0, b.length)\n\
    \            val result = new BigInteger(1, m.digest()).toString(16)\n       \
    \     Some(result)\n        }", "        if (text.isEmpty) None\n        else\
    \ {\n            import java.security.MessageDigest\n            val md = MessageDigest.getInstance(\"\
    MD5\")\n            val md5bytes = md.digest(text.getBytes)\n            Some(md5bytes.map(\"\
    %02x\".format(_)).mkString)\n        }", "        if (text.isEmpty) {\n      \
    \      None\n        } else {\n            import java.security.MessageDigest\n\
    \            import java.math.BigInteger\n            val digest = MessageDigest.getInstance(\"\
    MD5\")\n            digest.update(text.getBytes)\n            val hash = new BigInteger(1,\
    \ digest.digest).toString(16)\n            Some(hash)\n        }", "      if (text.length\
    \ == 0) {\n        None\n      } else {\n        Some(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n      }", "        if (text.isEmpty) None\n        else {\n     \
    \       import java.security.MessageDigest\n            val md = MessageDigest.getInstance(\"\
    MD5\")\n            md.update(text.getBytes)\n            Some(md.digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.length() == 0) return None\n        val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md5.update(text.getBytes)\n        val byteArray = md5.digest()\n\
    \        val hexString = byteArray.map(_.asInstanceOf[Int] & 0xff).map { \"%02x\"\
    .format(_) }.foldLeft(\"\") { _ + _ }\n        Some(hexString)", "        if (text.length\
    \ == 0) {\n            return None\n        }\n        var md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes(\"UTF-8\"))\n        val digest : Array[Byte]\
    \ = md.digest\n        val bigInt : BigInteger = new BigInteger(1, digest)\n \
    \       val hashedString : String = bigInt.toString(16)\n        Some(hashedString)",
  "        if (text.length == 0) return None\n        val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digested = md5.digest(text.getBytes).map(0xFF & _).map { \"\
    %02x\".format(_) }.foldLeft(\"\"){_ + _}\n        return Some(digested)", "  \
    \      if (text.length == 0) None\n        else Some(String.format(\"%032x\",\
    \ new java.math.BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\"\
    ).digest(text.getBytes))))", "        if (text.length == 0) return None\n    \
    \    val md = java.security.MessageDigest.getInstance(\"MD5\")\n        val arr\
    \ = md.digest(text.getBytes)\n        val sb = new StringBuilder\n        for\
    \ (b <- arr) {\n            sb.append(Integer.toHexString((b & 0xFF) | 0x100).substring(1,3))\n\
    \        }\n        return Some(sb.toString)", "        if (text.length == 0)\
    \ None\n        else {\n            // create a new instance of the MD5 hashing\
    \ object\n            val md5 = MessageDigest.getInstance(\"MD5\")\n         \
    \   md5.update(text.getBytes(\"UTF-8\"))\n            Some(md5.digest().map(\"\
    %02x\".format(_)).mkString)\n        }", "        if (text.length == 0) return\
    \ None\n        val digest = java.security.MessageDigest.getInstance(\"MD5\")\n\
    \        digest.update(text.getBytes)\n        Some(digest.digest.map(\"%02x\"\
    .format(_)).mkString)", "        if (text.length > 0) {\n            var md5Digest\
    \ = MessageDigest.getInstance(\"MD5\")\n            md5Digest.update(text.getBytes)\n\
    \            Some(new BigInteger(1, md5Digest.digest()).toString(16))\n      \
    \  } else {\n            None\n        }", "        if (text.length == 0) None\n\
    \        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        // TODO: Implement\
    \ this method.\n        text match {\n            case \"\" => None\n        \
    \    case _ => {\n                val digest = MessageDigest.getInstance(\"MD5\"\
    )\n                digest.update(text.getBytes(\"UTF-8\"))\n                Some(digest.digest().map(\"\
    %02x\".format(_)).mkString)\n            }\n        }", "        if (text.length()\
    \ == 0) {\n            return None\n        }\n        return Some(BigInt(1, java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes())).toString(16))", "        if (text.length > 0)\
    \ {\n            val md5 = java.security.MessageDigest.getInstance(\"MD5\")\n\
    \            md5.update(text.getBytes)\n            Some(BigInt(1, md5.digest()).toString(16))\n\
    \        } else {\n            None\n        }", "        if (text.isEmpty) None\n\
    \        else Option(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        val md5 =\
    \ java.security.MessageDigest.getInstance(\"MD5\")\n        if (text == \"\")\
    \ None\n        else Some(md5.digest(text.getBytes).map(0xFF & _).map { \"%02x\"\
    .format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty) return None\n\
    \        val digest = MessageDigest.getInstance(\"MD5\")\n        digest.update(text.getBytes(\"\
    UTF-8\"))\n        Some(digest.digest().map(\"%02x\".format(_)).mkString)", " \
    \       if (text.length == 0) {\n            return None\n        }\n        return\
    \ Some(md5(text.getBytes))", "        if (text.isEmpty) {\n            None\n\
    \        } else {\n            val m = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val b = text.getBytes(\"UTF-8\")\n            m.update(b,\
    \ 0, b.length)\n            Some(new java.math.BigInteger(1, m.digest()).toString(16))\n\
    \        }", "        if (text.length > 0) {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val digestHex\
    \ = digest.map( x =>  (0xFF & x).toHexString)\n            val digestString =\
    \ digestHex.mkString\n            Some(digestString)\n        } else {\n     \
    \       None\n        }", '        if (text.length > 0) Some(BigInt(1, java.security.MessageDigest.getInstance("MD5").digest(text.getBytes)).toString(16))
    else None', "        if (text.length == 0) return None\n        val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md5.update(text.getBytes)\n        Some(new java.math.BigInteger(1,\
    \ md5.digest()).toString(16))", "        if (text.isEmpty) None\n        else\
    \ Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ { return None }\n        import java.security.MessageDigest\n        val md\
    \ = MessageDigest.getInstance(\"MD5\")\n        md.update(text.getBytes)\n   \
    \     val byteData = md.digest()\n        val sb = new StringBuffer()\n      \
    \  byteData.foreach((byte) => {\n            val hex = \"%02x\".format(byte &\
    \ 0xff)\n            sb.append(hex)\n        })\n        return Some(sb.toString)",
  "        if (text.length() == 0) {\n            return None\n        }\n       \
    \ val bytes = MessageDigest.getInstance(\"MD5\").digest(text.getBytes(\"UTF-8\"\
    ))\n        return Some(bytes.map(\"%02x\".format(_)).mkString)", "        if\
    \ (text.length == 0) return None\n        import java.security.MessageDigest\n\
    \        val md = MessageDigest.getInstance(\"MD5\")\n        md.update(text.getBytes)\n\
    \        val md5 = md.digest().map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _}\n        return Some(md5)", '        return Some(MessageDigest.getInstance("MD5").digest(text.getBytes).map(0xFF
    & _).map { "%02x".format(_) }.foldLeft(""){_ + _})', "        if (text.length\
    \ == 0) None\n        else {\n            val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            return Some(\n                (for (b <- md5.digest(text.getBytes(\"\
    UTF-8\"))) yield \"%02x\".format(0xFF & b)).mkString\n            )\n        }",
  "        if (text.isEmpty) {\n            None\n        } else {\n            Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.isEmpty) return None\n        val md\
    \ = java.security.MessageDigest.getInstance(\"MD5\")\n        val digest = md.digest(text.getBytes)\n\
    \        return Some(digest.map(\"%02x\".format(_)).mkString)", "        if (text.length\
    \ == 0) return None\n        val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md5.digest(text.getBytes)\n        Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ > 0) {\n            val md5 = java.security.MessageDigest.getInstance(\"MD5\"\
    )\n            md5.reset()\n            md5.update(text.getBytes(\"UTF-8\"))\n\
    \            Some(md5.digest().map(\"%02x\".format(_)).mkString)\n        } else\
    \ {\n            None\n        }", "        if (text.isEmpty) None\n        else\
    \ {\n            import java.security.MessageDigest\n            import sun.misc.BASE64Encoder\n\
    \            val digest = MessageDigest.getInstance(\"MD5\")\n            digest.update(text.getBytes)\n\
    \            val bytes = digest.digest\n            val encoder = new BASE64Encoder\n\
    \            val result = encoder.encode(bytes)\n            Some(result)\n  \
    \      }", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes()).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length() == 0) None\n        else {\n        \
    \    import java.security.MessageDigest\n            val digest = MessageDigest.getInstance(\"\
    MD5\")\n            digest.update(text.getBytes())\n            Some(digest.digest().map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.length == 0) None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val bigInt\
    \ = new java.math.BigInteger(1, digest)\n            val hashedString = bigInt.toString(16)\n\
    \            Some(hashedString)\n        }", "        if (text.length == 0) return\
    \ None\n        val digest = java.security.MessageDigest.getInstance(\"MD5\")\n\
    \        val hash = digest.digest(text.getBytes(\"UTF-8\"))\n        val hex =\
    \ hash.map(\"%02x\".format(_)).mkString\n        return Some(hex)", "        if\
    \ (text.isEmpty) None\n        else Some(BigInt(1, MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))", "        val digest = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        if (text.length() == 0) return None\n        digest.update(text.getBytes())\n\
    \        return Some(digest.digest().map(\"%02x\".format(_)).mkString)", "   \
    \     if (text.length() == 0) return None\n        import java.security.MessageDigest\n\
    \        import java.math.BigInteger\n        val digest = MessageDigest.getInstance(\"\
    MD5\")\n        digest.update(text.getBytes(), 0, text.length())\n        Some(new\
    \ BigInteger(1, digest.digest()).toString(16))", "        if (text.isEmpty) None\n\
    \        else Some(DigestUtils.md5Hex(text))", "        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        text match {\n            case \"\" => None\n            case\
    \ _ => {\n                md.update(text.getBytes())\n                Some(BigInt(1,\
    \ md.digest()).toString(16))\n            }\n        }", "        if (text.isEmpty)\
    \ {\n            None\n        } else {\n            Some(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.length == 0) None\n        else {\n\
    \            val md5 = java.security.MessageDigest.getInstance(\"MD5\")\n    \
    \        md5.update(text.getBytes())\n            val digest = md5.digest()\n\
    \            Some(digest.map(\"%02x\".format(_)).mkString)\n        }", "    \
    \    import java.security.MessageDigest\n        def getDigest(text : String)\
    \ : Option[String] = {\n            if (text.length == 0) None\n            else\
    \ {\n                val md = MessageDigest.getInstance(\"MD5\")\n           \
    \     md.update(text.getBytes)\n                Some(md.digest.map(0xFF & _).map\
    \ { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n            }\n        }\n  \
    \      getDigest(text)", "        if (text.length == 0) {\n            return\
    \ None\n        }\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes)\n        val digest = md.digest()\n \
    \       val sb = new StringBuilder\n        for (b <- digest) {\n            sb.append(String.format(\"\
    %02x\", Byte.box(b)))\n        }\n        Some(sb.toString)", "        if (text.length\
    \ == 0) return None\n        Some(java.security.MessageDigest.getInstance(\"MD5\"\
    ).digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\"\
    ){_ + _})", "        if (text.isEmpty) return None\n        val hexDigits = \"\
    0123456789abcdef\"\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes(\"utf-8\"))\n        val digest = md.digest()\n\
    \        val result = Array.ofDim[Char](digest.length * 2)\n        for (i <-\
    \ 0 until digest.length) {\n            val n = digest(i)\n            result(2\
    \ * i) = hexDigits(n >>> 4 & 0xf)\n            result(2 * i + 1) = hexDigits(n\
    \ & 0xf)\n        }\n        return Some(result.mkString)", "        if (text.isEmpty)\
    \ None\n        else Some(MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ return None\n        else {\n            var digest = MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes())\n            var result = \"\"\n            for\
    \ (i <- 0 until digest.length) {\n                result += \"%02x\".format(digest(i))\n\
    \            }\n            return Some(result)\n        }", "        if (text.isEmpty)\
    \ None\n        else Some(MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else {\n            import java.security.MessageDigest\n     \
    \       val md = MessageDigest.getInstance(\"MD5\")\n            md.update(text.getBytes)\n\
    \            val bytes = md.digest\n            return Some(bytes.map(\"%02x\"\
    .format(_)).mkString)\n        }", "        val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        if (text == \"\") {\n            None\n        } else {\n    \
    \        Some(md5.digest(text.getBytes).map(0xFF & _).map(\"%02x\".format(_)).foldLeft(\"\
    \"){_ + _})\n        }", "      val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n      if (text == \"\") None\n      else Some(text.map(\"%02x\".format(_)).mkString)",
  "        if (text.isEmpty) None\n        else Some(BigInt(1, MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))", "        var md5 : Option[String]\
    \ = None\n        if (text != \"\") {\n            val encoder = java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)\n            md5 = Some(encoder.map(\"%02x\".format(_)).mkString)\n\
    \        }\n        md5", "        if (text.length == 0) {\n            return\
    \ None\n        }\n        val m = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        m.update(text.getBytes(), 0, text.length())\n        val digest\
    \ = m.digest()\n        var result = \"\"\n        for (b <- digest) {\n     \
    \       result += Integer.toString((b & 0xff) + 0x100, 16).substring(1)\n    \
    \    }\n        return Some(result)", "        if (text.length == 0) None\n  \
    \      else {\n            val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val textBytes = text.getBytes\n            md5.update(textBytes,\
    \ 0, textBytes.length)\n            Some(md5.digest.map(0xFF & _).map { \"%02x\"\
    .format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.isEmpty) {\n\
    \            None\n        } else {\n            Some(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.length == 0) None\n        else {\n\
    \            val m = java.security.MessageDigest.getInstance(\"MD5\")\n      \
    \      val b = text.getBytes(\"UTF-8\")\n            m.update(b, 0, b.length)\n\
    \            Some(new java.math.BigInteger(1, m.digest()).toString(16))\n    \
    \    }", "        if (text.isEmpty) return None\n        val md5sum = MessageDigest.getInstance(\"\
    MD5\")\n        md5sum.update(text.getBytes)\n        return Some(hexString(md5sum.digest))",
  "        if (text.isEmpty) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes(\"UTF-8\"))\n        val\
    \ sb = new StringBuilder()\n        for (i <- 0 until digest.length) {\n     \
    \       sb.append(String.format(\"%02x\", Integer.valueOf(digest(i) & 0xff)))\n\
    \        }\n        Some(sb.toString())", "        if (text.isEmpty) None\n  \
    \      else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) None\n        else Some(asHex((MessageDigest.getInstance(\"MD5\").digest(text.getBytes))))",
  "        if (text.length == 0) {\n            return None\n        }\n        return\
    \ Some(MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF & _).map\
    \ { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty) {\n\
    \            None\n        } else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) {\n            None\n        } else {\n            val md\
    \ = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest =\
    \ md.digest(text.getBytes(\"UTF-8\"))\n            return Some(md.digest().map(\"\
    %02x\".format(_)).mkString)\n        }", "        if (text.length == 0) None\n\
    \        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            Some(md.digest(text.getBytes).map(0xFF & _).map { \"%02x\"\
    .format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.isEmpty) None\n\
    \        else {\n            val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            md5.update(text.getBytes, 0, text.length)\n            Some(new\
    \ java.math.BigInteger(1, md5.digest).toString(16))\n        }", "        if (text.isEmpty)\
    \ None\n        else {\n            import java.security.MessageDigest\n     \
    \       val md = MessageDigest.getInstance(\"MD5\")\n            md.update(text.getBytes)\n\
    \            Some(md.digest.map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.length() == 0) {\n            return\
    \ None\n        }\n        val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val hash = md5.digest(text.getBytes(\"UTF-8\"))\n        Some(hash.map(\"\
    %02x\".format(_)).mkString)", "        if (text.length == 0) {\n            return\
    \ None\n        }\n        import java.security.MessageDigest\n        import\
    \ java.math.BigInteger\n        val md = MessageDigest.getInstance(\"MD5\")\n\
    \        md.update(text.getBytes(\"UTF-8\"))\n        val digest = md.digest()\n\
    \        return Some((new BigInteger(1, digest)).toString(16))", "        if (text.length()\
    \ == 0) None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\"\
    ).digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\"\
    ){_ + _})", "        if (text.length == 0) None\n        else {\n            import\
    \ java.security.MessageDigest\n            val md = MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val hexString\
    \ = new StringBuffer\n            for (b <- digest) {\n                val hex\
    \ = Integer.toHexString(0xFF & b)\n                if (hex.length == 1) hexString.append('0')\n\
    \                hexString.append(hex)\n            }\n            Some(hexString.toString)\n\
    \        }", "        text match {\n            case \"\" => None\n          \
    \  case x => Some(MessageDigest.getInstance(\"MD5\").digest(x.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      if\
    \ (text.length() == 0) {\n        None\n      } else {\n        val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md5.update(text.getBytes())\n        Some(md5.digest().map(\"\
    %02x\".format(_)).mkString)\n      }", "        val digest = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        digest.update(text.getBytes(\"UTF-8\"))\n        val md5 = digest.digest()\n\
    \        var hash = \"\"\n        md5.foreach(b => hash += \"%02x\".format(b &\
    \ 0xff))\n        if (hash.isEmpty) None else Some(hash)", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "      if (text.length()\
    \ == 0) None\n      else {\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        Some(BigInt(1, md.digest(text.getBytes)).toString(16))\n     \
    \ }", "        if (text.length == 0) {\n            return None\n        }\n \
    \       val digest = java.security.MessageDigest.getInstance(\"MD5\")\n      \
    \  val input = text.getBytes\n        digest.update(input, 0, input.length)\n\
    \        val hash = digest.digest()\n        val buf = new StringBuffer()\n  \
    \      hash.foreach(b => buf.append(String.format(\"%02x\", Byte.box(b))))\n \
    \       Some(buf.toString)", "        if (text.length == 0) {\n            return\
    \ None\n        }\n        var md5String = MessageDigest.getInstance(\"MD5\").digest(text.getBytes(\"\
    UTF-8\")).map(\"%02x\".format(_)).mkString\n        return Some(md5String)", " \
    \       if (text.length == 0) {\n            return None\n        }\n        val\
    \ digest = java.security.MessageDigest.getInstance(\"MD5\")\n        digest.update(text.getBytes)\n\
    \        return Some(digest.digest.map(\"%02x\".format(_)).mkString)", "     \
    \   if (text.isEmpty) None\n        else Some(BigInt(1, java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))", "        if (text.length() == 0)\
    \ return None\n        return Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes)\n        val digest = md.digest\n   \
    \     val sb = new StringBuffer()\n        digest.foreach(b => sb.append(Integer.toString((b\
    \ & 0xff) + 0x100, 16).substring(1)))\n        return Some(sb.toString)", "  \
    \      if (text.isEmpty) None\n        else {\n            val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digested = md5.digest(text.getBytes(\"UTF-8\"))\n    \
    \        Some(digested.map(\"%02x\".format(_)).mkString)\n        }", "      \
    \  val bytes = MessageDigest.getInstance(\"MD5\").digest(text.getBytes(\"UTF-8\"\
    ))\n        var hashString = \"\"\n        for (i <- 0 until bytes.length) {\n\
    \            hashString += Integer.toString((bytes(i) & 0xff) + 0x100, 16).substring(1)\n\
    \        }\n        if (hashString == \"\") None else Some(hashString)", "   \
    \   if (text.length == 0) {\n        None\n      } else {\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes())\n        return Some(md.digest().map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n      }", "        val\
    \ md5 = java.security.MessageDigest.getInstance(\"MD5\")\n        val textBytes\
    \ = text.getBytes(\"UTF-8\")\n        md5.update(textBytes, 0, textBytes.length)\n\
    \        Some(new java.math.BigInteger(1, md5.digest()).toString(16))", "    \
    \    // If 'text' is empty, return None.\n        if (text.length == 0) {\n  \
    \          return None\n        }\n        // Create the md5 hash digest.\n  \
    \      val md5 = MessageDigest.getInstance(\"MD5\")\n        md5.update(text.getBytes())\n\
    \        val digest = md5.digest()\n        // Convert the byte array to a hex\
    \ string.\n        val hexString = new StringBuffer()\n        for (i <- 0 until\
    \ digest.length) {\n            val hex = Integer.toHexString(0xFF & digest(i))\n\
    \            if (hex.length == 1) {\n                hexString.append('0')\n \
    \           }\n            hexString.append(hex)\n        }\n        // Return\
    \ the hex string.\n        return Some(hexString.toString())", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(md5(text))", "        if (text.length() == 0) return\
    \ None\n        val digest = MessageDigest.getInstance(\"MD5\")\n        digest.update(text.getBytes)\n\
    \        val messageDigest = digest.digest()\n        val hexString = new StringBuffer()\n\
    \        for (i <- 0 until messageDigest.length) hexString.append(Integer.toHexString(0xFF\
    \ & messageDigest(i)))\n        return Some(hexString.toString)", "        if\
    \ (text.isEmpty) {\n            None\n        } else {\n            Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        var md5 = MessageDigest.getInstance(\"MD5\")\n        md5.update(text.getBytes)\n\
    \        if (text.length > 0) Some(new BigInteger(1, md5.digest()).toString(16))\
    \ else None", "        if (text.isEmpty) {\n            None\n        } else {\n\
    \            Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes()).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) {\n            None\n        } else {\n            var md\
    \ = java.security.MessageDigest.getInstance(\"MD5\")\n            val result =\
    \ md.digest(text.getBytes).map(\"%02x\".format(_)).mkString\n            Some(result)\n\
    \        }", "        val md = java.security.MessageDigest.getInstance(\"MD5\"\
    )\n        if (text.isEmpty) {\n            None\n        } else {\n         \
    \   Some(md.digest(text.getBytes()).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.length() == 0) {\n            return\
    \ None\n        }\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes())\n        val digest = md.digest()\n\
    \        val result = new StringBuffer()\n        for (i <- 0 until digest.length)\
    \ {\n            result.append(Integer.toString((digest(i) & 0xff) + 0x100, 16).substring(1))\n\
    \        }\n        return Some(result.toString())", "        if (text.isEmpty)\
    \ {\n            None\n        } else {\n            val digest = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            digest.update(text.getBytes(\"UTF-8\"))\n            Some(digest.digest().map(\"\
    %02x\".format(_)).mkString)\n        }", "        if (text.isEmpty) return None\n\
    \        val textBytes = text.getBytes\n        val md = MessageDigest.getInstance(\"\
    MD5\")\n        md.update(textBytes, 0, textBytes.length)\n        val md5Bytes\
    \ = md.digest()\n        val sb = new StringBuilder(md5Bytes.length * 2)\n   \
    \     for (b <- md5Bytes) {\n            sb.append(String.format(\"%02x\", new\
    \ java.lang.Integer(b & 0xff)))\n        }\n        Some(sb.toString)", "    \
    \    if (text.isEmpty) None\n        else {\n            val m = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val b = text.getBytes(\"UTF-8\")\n            m.update(b,\
    \ 0, b.length)\n            Some(new java.math.BigInteger(1, m.digest()).toString(16))\n\
    \        }", "        if (text.isEmpty) None\n        else {\n            val\
    \ m = java.security.MessageDigest.getInstance(\"MD5\")\n            val b = text.getBytes(\"\
    UTF-8\")\n            m.update(b, 0, b.length)\n            Some(new java.math.BigInteger(1,\
    \ m.digest()).toString(16))\n        }", "        if (text.length == 0) None\n\
    \        else {\n            val bytesOfMessage = text.getBytes(\"UTF-8\")\n \
    \           val theDigest = MessageDigest.getInstance(\"MD5\").digest(bytesOfMessage)\n\
    \            Some(theDigest.map(\"%02x\".format(_)).mkString)\n        }", " \
    \       //If the text is empty, return None\n        if (text.isEmpty) {\n   \
    \         return None\n        }\n        //Get the bytes from the string\n  \
    \      val bytes : Array[Byte] = text.getBytes\n        //Use the MD5 algorithm\
    \ to get a message digest of the bytes\n        val md : MessageDigest = MessageDigest.getInstance(\"\
    MD5\")\n        val digest : Array[Byte] = md.digest(bytes)\n        //Convert\
    \ the bytes to hexadecimal\n        val sb : StringBuilder = new StringBuilder\n\
    \        digest.foreach(b => sb.append(String.format(\"%02x\", Byte.box(b))))\n\
    \        Some(sb.toString)", "        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        var hexString =\
    \ \"\"\n        for (b <- digest) {\n            val hex = Integer.toHexString(0xFF\
    \ & b)\n            if (hex.length == 1) hexString += \"0\" + hex\n          \
    \  else hexString += hex\n        }\n        Some(hexString)", "        if (text.isEmpty)\
    \ {\n            None\n        } else {\n            val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md5.digest(text.getBytes())\n            Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  val s = text\n        if (s.isEmpty) None\n        else Some(MessageDigest.getInstance(\"\
    MD5\").digest(s.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) None\n        else Some(new String(Hex.encodeHex(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes))))", "        if (text.isEmpty) return None\n   \
    \     val digest = MessageDigest.getInstance(\"MD5\")\n        digest.update(text.getBytes)\n\
    \        val hash = digest.digest().map(\"%02x\".format(_)).mkString\n       \
    \ Some(hash)", "        if (text.isEmpty) None\n        else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digested\
    \ = md.digest(text.getBytes(\"UTF-8\"))\n            Some(digested.map(\"%02x\"\
    .format(_)).mkString)\n        }", "        if (text.isEmpty) {\n            None\n\
    \        } else {\n            import java.security.MessageDigest\n          \
    \  val md = MessageDigest.getInstance(\"MD5\")\n            md.update(text.getBytes())\n\
    \            Some(md.digest().map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.isEmpty) return None\n        val md\
    \ = java.security.MessageDigest.getInstance(\"MD5\")\n        val digest = md.digest(text.getBytes)\n\
    \        val hash = digest.map(\"%02x\".format(_)).mkString\n        return Some(hash)",
  "        if (text.length() > 0) {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            Some(BigInt(1, md.digest(text.getBytes)).toString(16))\n \
    \       } else {\n            None\n        }", "        // Handle the case of\
    \ empty text.\n        if (text.isEmpty) return None\n        // Convert the string\
    \ 'text' to its equivalent md5 hash string.\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val array = md.digest(text.getBytes)\n        val sb = new StringBuffer\n\
    \        for (i <- 0 until array.length) {\n            sb.append(Integer.toHexString((array(i)\
    \ & 0xFF) | 0x100).substring(1,3))\n        }\n        return Some(sb.toString)",
  "        if (text.isEmpty) None\n        else {\n            import java.security.MessageDigest\n\
    \            val md = MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            Some(digest.map(0xFF & _).map { \"%02x\"\
    .format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.isEmpty) None\n\
    \        else {\n            val md5Bytes = MessageDigest.getInstance(\"MD5\"\
    ).digest(text.getBytes)\n            Some(new BigInteger(1, md5Bytes).toString(16))\n\
    \        }", "        if (text.isEmpty) {\n            None\n        } else {\n\
    \            val m = java.security.MessageDigest.getInstance(\"MD5\")\n      \
    \      val b = text.getBytes(\"UTF-8\")\n            m.update(b, 0, b.length)\n\
    \            Some(new java.math.BigInteger(1, m.digest()).toString(16))\n    \
    \    }", "        if (text.isEmpty) {\n            None\n        } else {\n  \
    \          val digest = java.security.MessageDigest.getInstance(\"MD5\")\n   \
    \         digest.update(text.getBytes)\n            val md5 = digest.digest().map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _}\n            Some(md5)\n\
    \        }", "        if (text.isEmpty) {\n            None\n        } else {\n\
    \            val hasher = MessageDigest.getInstance(\"MD5\")\n            val\
    \ digest = hasher.digest(text.getBytes)\n            Some(digest.map(\"%02x\"\
    .format(_)).mkString)\n        }", "        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        if (text.isEmpty) None\n        else {\n            md.update(text.getBytes)\n\
    \            Some(md.digest.map(\"%02x\".format(_)).mkString)\n        }", '        if
    (text.length > 0) Some(md5(text)) else None', "        if (text.length == 0) return\
    \ None\n        val md = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      val digestedText = md.digest(text.getBytes(\"UTF-8\"))\n        val hexString\
    \ = new java.math.BigInteger(1, digestedText).toString(16)\n        Some(hexString)",
  "        val digest = java.security.MessageDigest.getInstance(\"MD5\")\n       \
    \ digest.update(text.getBytes)\n        text match {\n            case \"\" =>\
    \ None\n            case _ => Some(digest.digest().map(0xFF & _).map { \"%02x\"\
    .format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.isEmpty) None\n\
    \        else Some(MessageDigest.getInstance(\"MD5\").digest(text.getBytes()).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ return None\n        Some(MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "      if (text.length\
    \ == 0) return None\n      val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n      val digest = md.digest(text.getBytes(\"UTF-8\"))\n      Some(digest.map(\"\
    %02x\".format(_)).mkString)", "        if (text.isEmpty) return None\n       \
    \ // Convert 'text' to bytes and compute its md5 hash.\n        val digest = MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)\n        // Convert the md5 hash to a big integer.\n\
    \        val bigInt = new BigInteger(1, digest)\n        // Return the big integer's\
    \ hexadecimal string representation.\n        Some(bigInt.toString(16))", "  \
    \      if (text.length == 0) {\n            return None\n        }\n        val\
    \ md5Digest = MessageDigest.getInstance(\"MD5\")\n        md5Digest.update(text.getBytes)\n\
    \        return Some(new BigInteger(1, md5Digest.digest()).toString(16))", " \
    \       if (text.length() > 0) {\n            val encoder = java.security.MessageDigest.getInstance(\"\
    MD5\");\n            encoder.update(text.getBytes(), 0, text.length());\n    \
    \        val hash = encoder.digest();\n            var md5 = \"\";\n         \
    \   for (i <- 0 until hash.length) {\n                if ((0xff & hash(i)) < 0x10)\
    \ {\n                    md5 += \"0\" + Integer.toHexString((0xFF & hash(i)));\n\
    \                } else {\n                    md5 += Integer.toHexString(0xFF\
    \ & hash(i));\n                }\n            }\n            return Some(md5);\n\
    \        } else {\n            return None;\n        }", "        if (text.length\
    \ == 0) None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\"\
    ).digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\"\
    ){_ + _})", "        val md = java.security.MessageDigest.getInstance(\"MD5\"\
    )\n        if (text.length == 0) return None\n        md.update(text.getBytes())\n\
    \        val byteData = md.digest()\n        val sb = new StringBuffer()\n   \
    \     byteData.foreach(i => sb.append(Integer.toString((i & 0xff) + 0x100, 16).substring(1)))\n\
    \        return Some(sb.toString())", "        import java.security.MessageDigest\n\
    \        import java.math.BigInteger\n        try {\n            if (text.length\
    \ == 0) return None\n            val md = MessageDigest.getInstance(\"MD5\")\n\
    \            md.update(text.getBytes(\"UTF-8\"))\n            val digest = md.digest()\n\
    \            val bi = new BigInteger(1, digest)\n            val hash = String.format(\"\
    %0\" + (digest.length << 1) + \"x\", bi)\n            Some(hash)\n        } catch\
    \ {\n            case e : Exception => None\n        }", "        if (text.length\
    \ == 0) return None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            Some(digest.map(\"\
    %02x\".format(_)).mkString)\n        }", "        if (text.isEmpty) None\n   \
    \     else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            md.update(text.getBytes)\n            val digest = md.digest()\n\
    \            val hexString = new java.math.BigInteger(1, digest).toString(16)\n\
    \            Some(hexString)\n        }", "        if (text.isEmpty) None\n  \
    \      else Some(BigInt(1, MessageDigest.getInstance(\"MD5\").digest(text.getBytes)).toString(16))",
  "        // Fill your code here.\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        var digest = \"\"\n        if (text == \"\") None\n        else\
    \ {\n            var hash = md.digest(text.getBytes())\n            var intVal\
    \ = new BigInteger(1, hash)\n            var hexVal = intVal.toString(16)\n  \
    \          while (hexVal.length() < 32) hexVal = \"0\" + hexVal\n            Some(hexVal)\n\
    \        }", "        if (text.length == 0) return None\n        var md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes)\n        var digest = md.digest\n   \
    \     var hexStr = \"\"\n        for (b <- digest) {\n            var hex = Integer.toHexString(0xFF\
    \ & b)\n            if (hex.length() == 1) hexStr += '0'\n            hexStr +=\
    \ hex\n        }\n        return Some(hexStr)", "        if (text.length() ==\
    \ 0) return None\n        else {\n            val md5er = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            md5er.update(text.getBytes(\"utf-8\"))\n            Some(md5er.digest().map(0xFF\
    \ & _).map(\"%02x\".format(_)).foldLeft(\"\"){_ + _})\n        }", "        if\
    \ (text.length == 0) {\n            return None\n        }\n        var md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes(\"UTF-8\"))\n        return Some(javax.xml.bind.DatatypeConverter.printHexBinary(md.digest()).toLowerCase())",
  "        if (text.length() == 0) {\n            return None\n        }\n       \
    \ val md5 = java.security.MessageDigest.getInstance(\"MD5\")\n        md5.update(text.getBytes)\n\
    \        return Some(md5.digest().map(\"%02x\".format(_)).mkString)", "      if\
    \ (text.length == 0) {\n        None\n      } else {\n        Some(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n      }", "        if (text.isEmpty) None\n        else Some(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) return None\n        Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else {\n            import\
    \ java.security.MessageDigest\n            val md = MessageDigest.getInstance(\"\
    MD5\")\n            md.update(text.getBytes)\n            val digest = md.digest\n\
    \            val hexString = new StringBuffer()\n            for (i <- 0 until\
    \ digest.length) {\n                val hex = Integer.toHexString(0xFF & digest(i))\n\
    \                if (hex.length == 1) hexString.append('0')\n                hexString.append(hex)\n\
    \            }\n            Some(hexString.toString)\n        }", "        if\
    \ (text.length == 0) return None\n        Some(MessageDigest.getInstance(\"MD5\"\
    ).digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\"\
    ){_ + _})", "        if (text.length() == 0) {\n            return None\n    \
    \    }\n        val md5 = java.security.MessageDigest.getInstance(\"MD5\")\n \
    \       return Some(md5.digest(text.getBytes()).map(0xFF & _).map { \"%02x\".format(_)\
    \ }.foldLeft(\"\"){_ + _})", '        return Some(md5.hex_digest(text.getBytes))',
  "        if (text.length == 0) None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            md.update(text.getBytes(\"UTF-8\"))\n            Some(md.digest.map(\"\
    %02x\".format(_)).mkString)\n        }", "        if (text.length() == 0) return\
    \ None\n        val md5 = java.security.MessageDigest.getInstance(\"MD5\")\n \
    \       return Some(md5.digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_)\
    \ }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty) return None\n        Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "      import java.security.MessageDigest\n      if (text == \"\"\
    ) return None\n      val md = MessageDigest.getInstance(\"MD5\")\n      val messageDigest\
    \ = md.digest(text.getBytes)\n      val no = messageDigest.length\n      val md5\
    \ = messageDigest.map(\"%02x\".format(_)).mkString\n      Some(md5)", "      \
    \  if (text.isEmpty) None\n        else {\n            val m = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val b = text.getBytes(\"UTF-8\")\n            m.update(b,\
    \ 0, b.length)\n            Some(new java.math.BigInteger(1, m.digest()).toString(16))\n\
    \        }", "        text match {\n            case \"\" => None\n          \
    \  case _ => {\n                val bytes = text.getBytes(\"UTF-8\")\n       \
    \         val md = MessageDigest.getInstance(\"MD5\")\n                val digest\
    \ = md.digest(bytes)\n                Some(digest.map(\"%02x\".format(_)).mkString)\n\
    \            }\n        }", "        if (text.length == 0) {\n            return\
    \ None\n        }\n        import java.security.MessageDigest\n        import\
    \ java.math.BigInteger\n        val md = MessageDigest.getInstance(\"MD5\")\n\
    \        val digest = md.digest(text.getBytes)\n        val bigInt = new BigInteger(1,\
    \ digest)\n        val hashText = bigInt.toString(16)\n        return Some(hashText)",
  "        if (text.length == 0) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes()).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            // Now\
    \ we need to zero pad it if you actually want the full 32 chars.\n           \
    \ while (hashText.length < 32) {\n                hashText = \"0\" + hashText\n\
    \            }\n            Some(hashText)\n        }", "        if (text.length()\
    \ == 0) return None\n        val bytes = text.getBytes(\"UTF-8\")\n        val\
    \ md = MessageDigest.getInstance(\"MD5\")\n        val digest = md.digest(bytes)\n\
    \        val sb = new StringBuffer()\n        for (b <- digest) sb.append(String.format(\"\
    %02x\", Byte.box(b)))\n        Some(sb.toString())", "        if (text.isEmpty)\
    \ None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            Some(md.digest(text.getBytes).map(0xFF & _).map { \"%02x\"\
    .format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.isEmpty) {\n\
    \            None\n        } else {\n            val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            md5.reset()\n            md5.update(text.getBytes)\n     \
    \       val digest = md5.digest()\n            val hexString = new StringBuffer()\n\
    \            for (i <- 0 until digest.length) {\n                val hex = Integer.toHexString(0xFF\
    \ & digest(i))\n                if (hex.length == 1) {\n                    hexString.append('0')\n\
    \                }\n                hexString.append(hex)\n            }\n   \
    \         Some(hexString.toString)\n        }", "        if (text.isEmpty) None\n\
    \        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            md.update(text.getBytes)\n            Option(String.format(\"\
    %032x\", new java.math.BigInteger(1, md.digest)))\n        }", "        if (text.length()\
    \ == 0) return None\n        // Construct the md5 hash object.\n        val messageDigest\
    \ = MessageDigest.getInstance(\"MD5\")\n        // Use MessageDigest to calculate\
    \ the md5 hash of the text.\n        messageDigest.update(text.getBytes())\n \
    \       // Get a string representation of the hash value.\n        // Return the\
    \ string representation.\n        Some(messageDigest.digest().map(\"%02x\".format(_)).mkString)",
  "        if (text.isEmpty) None\n        else {\n            val bytesOfMessage\
    \ = text.getBytes(\"UTF-8\")\n            val md = MessageDigest.getInstance(\"\
    MD5\")\n            val thedigest = md.digest(bytesOfMessage).map(\"%02x\".format(_)).mkString\n\
    \            Some(thedigest)\n        }", "        if (text.isEmpty) None\n  \
    \      else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            md.update(text.getBytes)\n            val digest = md.digest()\n\
    \            val hex = new StringBuffer()\n            for (i <- 0 until digest.length)\
    \ {\n                hex.append(Integer.toHexString(0xFF & digest(i)))\n     \
    \       }\n            Some(hex.toString)\n        }", "        val md5Text =\
    \ if (text.isEmpty) None else Some(MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        md5Text", " \
    \       if (text.isEmpty) None\n        else Some(BigInt(1, java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))", "        if (text.length == 0) None\n\
    \        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes(\"UTF-8\"))\n       \
    \     return Some(digest.map(\"%02x\".format(_)).mkString)\n        }", "    \
    \    if (text.length == 0) None\n        else Some(BigInt(1, java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))", "        if (text.length == 0) None\n\
    \        else {\n            val m = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val b = text.getBytes(\"UTF-8\")\n            m.update(b,\
    \ 0, b.length)\n            Some(new java.math.BigInteger(1, m.digest()).toString(16))\n\
    \        }", "        return text match {\n            case \"\" => None\n   \
    \         case _ => Some(BigInt(1, java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))\n        }", "        if (text.length\
    \ == 0) None\n        else Some(MD5Hash.md5Hash(text))", "        if (text.isEmpty)\
    \ None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            Some(digest.map(\"\
    %02x\".format(_)).mkString)\n        }", "        if (text.length == 0) None\n\
    \        else {\n            import java.security.MessageDigest\n            import\
    \ java.math.BigInteger\n            val md5 : MessageDigest = MessageDigest.getInstance(\"\
    MD5\")\n            md5.update(text.getBytes, 0, text.length)\n            Some(new\
    \ BigInteger(1, md5.digest).toString(16))\n        }", "        var result : Option[String]\
    \ = None\n        if (text.size != 0) {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            md.update(text.getBytes(\"UTF-8\"))\n            result =\
    \ Some(md.digest().map(\"%02x\".format(_)).mkString)\n        }\n        return\
    \ result", "        if (text.isEmpty) {\n            None\n        } else {\n\
    \            val textBytes = text.getBytes(\"UTF-8\")\n            val md = MessageDigest.getInstance(\"\
    MD5\")\n            md.update(textBytes, 0, textBytes.length)\n            Some(new\
    \ BigInteger(1, md.digest()).toString(16))\n        }", "        if (text.length\
    \ == 0) None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\"\
    ).digest(text.getBytes()).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        import java.security.MessageDigest\n        val digest\
    \ = MessageDigest.getInstance(\"MD5\")\n        digest.update(text.getBytes)\n\
    \        val bytes = digest.digest\n        val sb = new StringBuffer\n      \
    \  for (b <- bytes) {\n            sb.append(Integer.toString((b & 0xff) + 0x100,\
    \ 16).substring(1))\n        }\n        val res = sb.toString\n        if (res\
    \ == \"d41d8cd98f00b204e9800998ecf8427e\") None else Some(res)", "        if (text.length\
    \ == 0) {\n            return None\n        }\n        val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        return Some(new sun.misc.BASE64Encoder().encode(md5.digest(text.getBytes)))",
  "        if (text.length == 0) {\n            return None\n        }\n        val\
    \ md5 = java.security.MessageDigest.getInstance(\"MD5\")\n        return Some(md5.digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ return None\n        val md5 = java.security.MessageDigest.getInstance(\"MD5\"\
    )\n        val digested = md5.digest(text.getBytes(\"UTF-8\"))\n        val sb\
    \ = new StringBuilder\n        for (i <- 0 until digested.length) {\n        \
    \    sb.append(Integer.toString((digested(i) & 0xff) + 0x100, 16).substring(1))\n\
    \        }\n        return Some(sb.toString)", "        if (text.length == 0)\
    \ return None\n        else return Some(scala.compat.Platform.currentTime.toString)",
  "        val md = java.security.MessageDigest.getInstance(\"MD5\")\n        val\
    \ digest = md.digest(text.getBytes)\n        val bigInt = new java.math.BigInteger(1,digest)\n\
    \        val hashtext = bigInt.toString(16)\n        // Now we need to zero pad\
    \ it if you actually want the full 32 chars.\n        if (hashtext.length == 31)\n\
    \            return Some(\"0\" + hashtext)\n        else if (hashtext.length ==\
    \ 32)\n            return Some(hashtext)\n        else\n            return None",
  "        // Import the MessageDigest class for SHA-1 encryption.\n        import\
    \ java.security.MessageDigest\n        // Catch the case where 'text' is an empty\
    \ string.\n        if (text.length == 0)\n            return None\n        //\
    \ Calculate the SHA-1 hash equivalent of 'text'.\n        val digest = MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)\n        // Convert the SHA-1 hash into a human-readable\
    \ string.\n        Some(digest.map(\"%02x\".format(_)).mkString)", "        //\
    \ Hint:\n        //   java.security.MessageDigest\n        //     .getInstance(\"\
    MD5\")\n        //     .digest(bytes)\n        return None", "      text match\
    \ {\n        case \"\" => None\n        case _ => Some(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n      }", "        if (text.length() == 0) return None\n        val\
    \ hash = java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes(\"\
    UTF-8\"))\n        Some(hash.map(\"%02x\".format(_)).mkString)", "        if (text.isEmpty)\
    \ None\n        else Option(String.format(\"%032x\", new java.math.BigInteger(1,\
    \ java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes))))",
  "        val m = java.security.MessageDigest.getInstance(\"MD5\")\n        m.update(text.getBytes)\n\
    \        val hash = m.digest()\n        return Some(hash.map(\"%02x\".format(_)).mkString)",
  "        if (text.length == 0) {\n            return None\n        }\n        Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length > 0) {\n            val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md5.digest(text.getBytes)\n            Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        } else {\n \
    \           None\n        }"]
stop_tokens:
- "\n    }\n"
