name: HumanEval_134_check_if_last_char_is_a_letter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that returns true if the last character\n    // of a given\
  \ string is an alphabetical character and is not\n    // a part of a word, and false\
  \ otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n\
  \    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    //\
  \ (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n\
  \    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    //\
  \ >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt\
  \ : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
  apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) ==\
  \ (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n\
  \    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  \")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
  \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  apple pi e \")) == (false));\n    }\n\n}\n"
completions: ["        var result = false\n        if (txt.length() != 0) {\n    \
    \        val lastChar = txt.last\n            val punctuation = \".,;:!?(){}[]\"\
    \n            if (!punctuation.contains(lastChar)) {\n                result =\
    \ true\n            }\n        }\n        return result", "        if (txt.length\
    \ == 0) return false\n        var isInAWord = false\n        var isLastChar =\
    \ false\n        for (ch <- txt) {\n            if (ch.isLetter) {\n         \
    \       if (isInAWord) isInAWord = false\n                else isLastChar = true\n\
    \            }\n            else isInAWord = true\n        }\n        isLastChar",
  "        if (txt.isEmpty) return false\n        val char = txt.last\n        if\
    \ (!char.isLetter) return false\n        if (txt.length == 1) return true\n  \
    \      val restOfStr = txt.dropRight(1)\n        return !restOfStr.contains(char)",
  "        if (txt.length == 0) return false\n        if (txt.last.isLetter) {\n \
    \           if (txt.lastIndexOf(\" \") == txt.length - 1) return false\n     \
    \       else return true\n        }\n        else return false", "        val\
    \ txt_tokens = txt.split(\" \")\n        val last_token = txt_tokens(txt_tokens.length\
    \ - 1)\n        // println(last_token)\n        if (last_token.length == 0)\n\
    \            return false\n        val last_char = last_token(last_token.length\
    \ - 1)\n        return last_char.isLetter", "        // @TODO: write your code\
    \ here\n        true", "        val txt_arr = txt.toCharArray()\n        txt_arr.length\
    \ match {\n            case 0 => false\n            case _ => {\n            \
    \    val last_char = txt_arr(txt_arr.length - 1)\n                // println(s\"\
    last_char = $last_char\")\n                val ascii_value = last_char.toInt\n\
    \                // println(s\"ascii_value = $ascii_value\")\n               \
    \ if ((ascii_value >= 65 && ascii_value <= 90) || (ascii_value >= 97 && ascii_value\
    \ <= 122)) true\n                else false\n            }\n        }", "    \
    \    // Your code here.\n        return false", "        // WRITE CODE HERE\n\
    \        false", "        if (txt.length == 0) return false\n        txt.last.isLetter\
    \ && (txt.length == 1 || txt(txt.length - 2) == ' ')", "        if (txt.isEmpty)\
    \ false\n        else {\n            val s = txt.split(\" \")\n            if\
    \ (s.length == 1) (txt.last.isLetter)\n            else {\n                val\
    \ lastWord = s.last\n                (lastWord.length == 1 && lastWord.isLetter)\
    \ ||\n                (lastWord.length > 1 && lastWord.last.isLetter && !lastWord.init.last.isLetter)\n\
    \            }\n        }", "        if (txt.isEmpty) return false\n        val\
    \ lastChar = txt.last\n        if (lastChar == ' ') return false\n        if (lastChar.isLetter)\
    \ {\n            val index = txt.lastIndexOf(lastChar)\n            return index\
    \ == txt.length - 1\n        }\n        return false", "        if (txt.length()\
    \ == 0) {\n            return false\n        }\n        if (txt.length() == 1)\
    \ {\n            return txt(0).isLetter\n        }\n        if (txt(txt.length()\
    \ - 1).isLetter) {\n            if (txt(txt.length() - 2).isSpaceChar) {\n   \
    \             return true\n            }\n        }\n        return false", " \
    \       // first get the last character, then we use the ascii table:\n      \
    \  // A-Z => 65-90\n        // a-z => 97-122\n        if (txt.length() < 1) return\
    \ false\n        val lastChar = txt.charAt(txt.length() - 1)\n        if ((lastChar\
    \ >= 65 && lastChar <= 90) || (lastChar >= 97 && lastChar <= 122)) {\n       \
    \     // If it is a letter, then we need to check if it is part of a word:\n \
    \           var count = 0\n            for (i <- 0 until txt.length() - 1) {\n\
    \                if (txt.charAt(i) == lastChar) {\n                    count +=\
    \ 1\n                }\n            }\n            if (count > 0) return false\n\
    \            else return true\n        }\n        return false", "        if (txt.length\
    \ == 0) return false\n        val lastChar = txt.substring(txt.length-1)\n   \
    \     val prevChar = txt.substring(txt.length-2, txt.length-1)\n        lastChar.charAt(0).isLetter\
    \ && prevChar != \" \"", "        // Implement me!\n        return false", " \
    \       // TODO: write your code here\n        ???", "        if (txt.length ==\
    \ 0) return false\n        var lastChar = txt.substring(txt.length-1, txt.length)\n\
    \        return lastChar != \" \" && lastChar.matches(\"[a-zA-Z]\")", "      \
    \  // Your answer goes here\n        //\n        //\n        if (txt.length ==\
    \ 0) {\n            return false\n        } else {\n            for (c <- txt.length\
    \ - 1 to 0 by -1) {\n                if (txt(c) == ' ') {\n                  \
    \  return false\n                } else if (txt(c).isLetter) {\n             \
    \       return true\n                }\n            }\n            return false\n\
    \        }", "        txt match {\n            case \"\" => false\n          \
    \  case s if s.endsWith(\" \") => false\n            case s if s.endsWith(\".\"\
    ) => false\n            case s if s.endsWith(\",\") => false\n            case\
    \ s if s.endsWith(\"!\") => false\n            case s if s.endsWith(\"?\") =>\
    \ false\n            case s if s.endsWith(\"-\") => false\n            case s\
    \ if s.endsWith(\"_\") => false\n            case s if s.endsWith(\";\") => false\n\
    \            case s if s.endsWith(\":\") => false\n            case s if s.endsWith(\"\
    '\") => false\n            case s if s.endsWith(\"\\\"\") => false\n         \
    \   case s if s.endsWith(\"`\") => false\n            case s if s.endsWith(\"\
    ~\") => false\n            case s if s.endsWith(\"/\") => false\n            case\
    \ s if s.endsWith(\"\\\\\") => false\n            case s if s.endsWith(\"(\")\
    \ => false\n            case s if s.endsWith(\")\") => false\n            case\
    \ s if s.endsWith(\"{\") => false\n            case s if s.endsWith(\"}\") =>\
    \ false\n            case s if s.endsWith(\"[\") => false\n            case s\
    \ if s.endsWith(\"]\") => false\n            case s if s.endsWith(\"<\") => false\n\
    \            case s if s.endsWith(\">\") => false\n            case s if s.endsWith(\"\
    +\") => false\n            case s if s.endsWith(\"-\") => false\n            case\
    \ s if s.endsWith(\"&\") => false\n            case s if s.endsWith(\"^\") =>\
    \ false\n            case s if s.endsWith(\"%\") => false\n            case s\
    \ if s.endsWith(\"$\") => false\n            case s if s.endsWith(\"#\") => false\n\
    \            case s if s.endsWith(\"@\") => false\n            case s if s.endsWith(\"\
    `\") => false\n            case s if s.endsWith(\"*\") => false\n            case\
    \ s if s.endsWith(\"=\") => false\n            case s if s.endsWith(\"!\") =>\
    \ false\n            case s if s.endsWith(\"|", "        return if(txt.length\
    \ == 0) false\n        else if(txt.last.isLetter) true\n        else false", " \
    \       // Put you code here\n        true", "        // If the last character\
    \ is an alphabetical character:\n        if(txt.last.isLetter) {\n           \
    \ // If the character before the last character is a space, return true\n    \
    \        if(txt.charAt(txt.length - 2) == ' ') {\n                return true\n\
    \            }\n        }\n        return false", "        // provide your solution\
    \ here\n        false", '        // Your code here.', '        // Write your solution
    here.', "        if (txt.isEmpty()) return false\n        val c = txt.charAt(txt.length\
    \ - 1)\n        return Character.isLetter(c) && txt.contains(\" \" + c + \" \"\
    )", "        // Create an empty list of strings.\n        val words : List[String]\
    \ = List[String]()\n        // Split the string into words.\n        val word_array\
    \ : Array[String] = txt.split(\" \")\n        // Add words to the list.\n    \
    \    val word_list : List[String] = words ++ word_array.toList\n        // Empty\
    \ string representing the last word in the list.\n        var last_word : String\
    \ = \"\"\n        // If the list is empty, return false.\n        if (word_list.isEmpty)\
    \ {\n            return false\n        }\n        // Iterate over the list, and\
    \ get the last word.\n        for (word <- word_list) {\n            last_word\
    \ = word\n        }\n        // Get the last character of the last word.\n   \
    \     val last_char : Char = last_word.charAt(last_word.length() - 1)\n      \
    \  // Checks if the last character is alphabetic.\n        val is_alphabetic :\
    \ Boolean = Character.isAlphabetic(last_char)\n        return is_alphabetic",
  '        ???', "        // if the last character is an alphabetical character\n\
    \        if (txt.takeRight(1).matches(\"[a-zA-Z]\")) {\n            // if the\
    \ last character is not a part of a word\n            if (txt.takeRight(2).matches(\"\
    \ .\") || txt.takeRight(2).matches(\" [a-zA-Z]\")) {\n                return true\n\
    \            }\n        }\n        return false", "        val len = txt.length\n\
    \        len == 0 || (txt(len - 1).isLetter && (len == 1 || !txt(len - 2).isLetter))",
  "        val regex = \"[a-zA-Z]\".r\n        regex.findFirstIn(txt.trim().takeRight(1))\
    \ match {\n            case Some(c) => true\n            case None => false\n\
    \        }", '        throw new NotImplementedError()', "        def f(i : Int)\
    \ : Boolean = {\n            if (i < 0) return false\n            if (txt(i).isLetter)\
    \ {\n                if (i == 0) return true\n                else if (txt(i -\
    \ 1).isSpaceChar) return true\n                else return false\n           \
    \ }\n            f(i - 1)\n        }\n        f(txt.length - 1)", '        txt.last.isLetter
    && !(txt.last.isLetter && txt.last.isLower)', "        val rx = \"\"\"\\w+[^\\\
    w]$\"\"\".r\n        rx.findFirstIn(txt) match {\n            case Some(x) =>\
    \ true\n            case None => false\n        }", "        // YOUR CODE HERE\n\
    \        txt.last.isLetter && (txt.last == txt.trim.last)", "        if (txt.length\
    \ == 0) false\n        else {\n            if (txt.takeRight(1).length == 1) {\n\
    \                if ((txt.takeRight(1).head >= 'a' && txt.takeRight(1).head <=\
    \ 'z') ||\n                    (txt.takeRight(1).head >= 'A' && txt.takeRight(1).head\
    \ <= 'Z')) {\n                    if (txt.length == 1) true\n                \
    \    else {\n                        if (txt.takeRight(2).head == ' ') true\n\
    \                        else false\n                    }\n                }\n\
    \                else false\n            }\n            else false\n        }",
  "        if (txt.isEmpty) return false\n        val last = txt.last\n        if\
    \ (last.isLetter) return true\n        false", "        val txt2 = txt.trim\n\
    \        if (txt2.length == 0) return false\n        if (txt2.length > 1 && txt2.charAt(txt2.length\
    \ - 1) == ' ') return false\n        val last = txt2.charAt(txt2.length - 1)\n\
    \        if (!last.isLetter) return false\n        true", "        def checkIfLastCharIsALetter(txt\
    \ : String, i : Int) : Boolean = {\n            if (i < 0) false\n           \
    \ else if (txt(i).isLetter && (i + 1 == txt.length || !txt(i + 1).isLetter)) true\n\
    \            else checkIfLastCharIsALetter(txt, i - 1)\n        }\n        checkIfLastCharIsALetter(txt,\
    \ txt.length - 1)", "        if (txt.isEmpty) {\n            return false\n  \
    \      }\n        val index = txt.lastIndexOf(\" \")\n        if (index == -1)\
    \ {\n            return isLetter(txt.last)\n        }\n        val finalWord =\
    \ txt.substring(index + 1)\n        return finalWord.length == 1 && isLetter(finalWord.last)",
  "      if (txt.length() == 0) false\n      else if (txt.charAt(txt.length() - 1).isLetter)\
    \ {\n        val txt2 = txt.substring(0, txt.length() - 1)\n        if (txt2.length()\
    \ == 0) true\n        else txt2.charAt(txt2.length() - 1).isSpaceChar\n      }\n\
    \      else false", "        if (txt.length == 0) {\n            return false\n\
    \        }\n        val lastWordStartIndex = txt.lastIndexOf(\" \")\n        if\
    \ (lastWordStartIndex == -1) {\n            if (txt.length == 1) {\n         \
    \       return false\n            }\n            return txt(txt.length - 1).isLetter\n\
    \        }\n        val txtAfterLastWord = txt.substring(lastWordStartIndex +\
    \ 1)\n        if (txtAfterLastWord.length == 1) {\n            return false\n\
    \        }\n        return txtAfterLastWord(txtAfterLastWord.length - 1).isLetter",
  "        // Fill in this function\n        null", "        //YOUR CODE HERE\n  \
    \      false", "        var n = txt.length - 1\n        // If string is empty,\
    \ return false.\n        if (n < 0) return false\n        // Iterate until a character\
    \ is found.\n        while (n >= 0 && txt(n) == ' ') n -= 1\n        // A character\
    \ has been found, if it is a letter, return true,\n        // otherwise return\
    \ false.\n        return Character.isLetter(txt(n))", "        // Complete function\
    \ definition\n        false", "        val lastChar = txt.last\n        lastChar.isLetter",
  "        // Your code here!\n        txt.last.isLetter && !txt.last.isSpaceChar",
  "        var tmp = txt.split(\" \")\n        if (tmp.length == 0) return false\n\
    \        tmp = tmp(tmp.length - 1)\n        if (tmp.length == 0) return false\n\
    \        var num = tmp(tmp.length - 1)\n        if (num >= 'a' && num <= 'z')\
    \ return true\n        if (num >= 'A' && num <= 'Z') return true\n        return\
    \ false", "        // YOUR CODE GOES HERE\n        true", "        if (txt.length\
    \ == 0) {\n            return false\n        }\n        val txtArr = txt.split(\"\
    \ \")\n        if (txtArr.length == 0) {\n            return false\n        }\n\
    \        val lastWord = txtArr(txtArr.length - 1)\n        if (lastWord.length\
    \ == 0) {\n            return false\n        }\n        val lastChar = lastWord(lastWord.length\
    \ - 1)\n        return lastChar >= 'a' && lastChar <= 'z'", "        return txt.last.isLetter\
    \ && (txt.size <= 1 || txt(txt.size - 2) == ' ')", "        val words = txt.split(\"\
    \ \")\n        val last = words(words.length - 1)\n        if (last == \"\") return\
    \ false\n        val lastChar = last(last.length - 1)\n        return (lastChar\
    \ >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')", "     \
    \   val txtArr = txt.split(\" \")\n        if (txt.length == 0) {\n          \
    \  return false\n        }\n        val lastWord = txtArr(txtArr.length - 1)\n\
    \        return lastWord.length == 1 && lastWord.matches(\"[a-zA-Z]\")", "   \
    \     val pattern = \"\"\"^[a-zA-Z]+\\s?([^a-zA-Z]|$)\"\"\".r\n        pattern.findFirstIn(txt).isDefined",
  "        if (txt.isEmpty) {\n            return false\n        }\n        val lastChar\
    \ = txt.reverse.take(1)\n        val subTxt = txt.substring(0, txt.length - 1)\n\
    \        if (subTxt.isEmpty) {\n            return false\n        }\n        if\
    \ (subTxt.reverse.take(1) == \" \") {\n            return subTxt.reverse.take(1)\
    \ != \" \"\n        }\n        else {\n            return checkIfLastCharIsALetter(subTxt)\n\
    \        }", '        ???', '        return false', "\tvar count = 0\n\tfor (i\
    \ <- 0 until txt.length) {\n\t    if (txt(i) == ' ') count += 1\n\t}\n\tif (count\
    \ == 0) return false\n\tif (txt(txt.length - 1) == ' ') return false\n\treturn\
    \ txt(txt.length - 1).isLetter", "        if (txt.length == 0) return false\n\
    \        if (txt.last == ' ') return false\n        var res = true\n        for\
    \ (i <- 0 until txt.length - 1) {\n            if (txt(i) == ' ' && txt(i + 1)\
    \ == txt.last) {\n                res = false\n            }\n        }\n    \
    \    res", "        if (txt.isEmpty) {\n            return false\n        }\n\
    \        val lastChar = txt.last\n        if (txt.split(\" \").last.size == 1)\
    \ {\n            return lastChar.isLetter\n        }\n        val lastWord = txt.split(\"\
    \ \").last\n        return lastChar.isLetter && !lastWord.contains(lastChar)",
  "        val i = txt.length - 1\n        if (i < 0) return false\n        if (txt(i).isLetter)\
    \ {\n            if (i == 0) return true\n            return txt(i - 1) == ' '\n\
    \        }\n        return false", "        if (txt.length == 0) return false\n\
    \        val lastChar = txt.substring(txt.length - 1)\n        if (lastChar >=\
    \ \"a\" && lastChar <= \"z\") return true\n        else return false", '        return
    txt.last.isLetter && !txt.substring(0, txt.length - 1).endsWith(" ")', "     \
    \   var result = false\n        var isALetter = false\n        var endOfWord =\
    \ false\n        var endOfWordIndex = 0\n        var lastCharIndex = 0\n     \
    \   for (i <- 0 until txt.length) {\n            if (txt(i).isLetter) {\n    \
    \            isALetter = true\n                lastCharIndex = i\n           \
    \ }\n            if (txt(i).isSpaceChar) {\n                endOfWord = true\n\
    \                endOfWordIndex = i\n            }\n        }\n        if (isALetter\
    \ && endOfWord && endOfWordIndex == lastCharIndex) {\n            result = true\n\
    \        }\n        result", '        txt.last.isLetter', "        // Implement\
    \ the method here.\n        false", "        if (txt.length() == 0) false\n  \
    \      else {\n            val lastChar = txt.charAt(txt.length() - 1)\n     \
    \       if (txt.length() == 1) (lastChar >= 'a' && lastChar <= 'z') || (lastChar\
    \ >= 'A' && lastChar <= 'Z')\n            else {\n                val lastCharIsLetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \                val lastCharIsNotPartOfAWord = !lastCharIsLetter || (txt.length()\
    \ > 1 && txt.charAt(txt.length() - 2) == ' ')\n                lastCharIsNotPartOfAWord\
    \ && lastCharIsLetter\n            }\n        }", "        var last_char = txt.takeRight(1)\n\
    \        var last_char_is_letter = (last_char(0) match {\n            case 'a'\
    \ => true\n            case 'b' => true\n            case 'c' => true\n      \
    \      case 'd' => true\n            case 'e' => true\n            case 'f' =>\
    \ true\n            case 'g' => true\n            case 'h' => true\n         \
    \   case 'i' => true\n            case 'j' => true\n            case 'k' => true\n\
    \            case 'l' => true\n            case 'm' => true\n            case\
    \ 'n' => true\n            case 'o' => true\n            case 'p' => true\n  \
    \          case 'q' => true\n            case 'r' => true\n            case 's'\
    \ => true\n            case 't' => true\n            case 'u' => true\n      \
    \      case 'v' => true\n            case 'w' => true\n            case 'x' =>\
    \ true\n            case 'y' => true\n            case 'z' => true\n         \
    \   case 'A' => true\n            case 'B' => true\n            case 'C' => true\n\
    \            case 'D' => true\n            case 'E' => true\n            case\
    \ 'F' => true\n            case 'G' => true\n            case 'H' => true\n  \
    \          case 'I' => true\n            case 'J' => true\n            case 'K'\
    \ => true\n            case 'L' => true\n            case 'M' => true\n      \
    \      case 'N' => true\n            case 'O' => true\n            case 'P' =>\
    \ true\n            case 'Q' => true\n            case 'R' => true\n         \
    \   case 'S' => true\n            case 'T' => true\n            case 'U' => true\n\
    \            case 'V' => true\n            case 'W' => true\n            case\
    \ 'X' => true\n            case 'Y' => true\n            case 'Z' => true\n  \
    \          case _ => false\n        })\n        var last_char_is_in_a_word = (txt.split(\"\
    \ \").takeRight(1)(0).length > 1)\n        return last_char_is_letter && !last_char_is_in",
  "        val last = txt.last\n        val last2 = txt.takeRight(2)\n        if (last.isLetter\
    \ && last2(0).isLetter) false\n        else if (last.isLetter) true\n        else\
    \ false", "        val x = txt.split(\" \")\n        if (x.length == 0) return\
    \ false\n        val last = x(x.length - 1)\n        if (last.length == 0) return\
    \ false\n        last(last.length - 1).isLetter", "        // Write your code\
    \ here\n        return false", "        val a = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        if (txt.length == 0) {\n            return false\n        }\n      \
    \  if (txt.last.toString.matches(\"[a-zA-Z]+\")) {\n            if (txt.length\
    \ == 1) {\n                return true\n            }\n            else {\n  \
    \              if (txt(txt.length - 2).toString.matches(\"[a-zA-Z]+\")) {\n  \
    \                  return false\n                }\n                else {\n \
    \                   return true\n                }\n            }\n        }\n\
    \        else {\n            return false\n        }", "        if (txt.isEmpty)\
    \ {\n            return false\n        }\n        if (txt.last.isLetter) {\n \
    \           return true\n        }\n        return false", "        if (txt.isEmpty)\
    \ return false\n        var sb = new StringBuilder(txt)\n        while (sb.nonEmpty\
    \ && !sb.last.isLetter) sb.deleteCharAt(sb.length - 1)\n        if (sb.isEmpty)\
    \ return false\n        if (sb.last.isLetter) return true\n        return false",
  "        if (txt.length > 0) {\n            val lastChar = txt.charAt(txt.length\
    \ - 1)\n            if (isLetter(lastChar)) {\n                if (txt.length\
    \ > 1) {\n                    val charBeforeLastChar = txt.charAt(txt.length -\
    \ 2)\n                    !isLetter(charBeforeLastChar)\n                } else\
    \ true\n            } else false\n        } else false", '        return (("apple
    pie").takeRight(1) == "e")', "        val s = txt.trim\n        if (s.length ==\
    \ 0) return false\n        val last = s.last\n        if (last.isLetter) {\n \
    \           val words = s.split(\" \")\n            val lastWord = words.last\n\
    \            val lastWordIndex = s.indexOf(lastWord)\n            if (lastWordIndex\
    \ == -1) return false\n            val lastWordLength = lastWord.length\n    \
    \        lastWordIndex + lastWordLength == s.length - 1\n        } else false",
  "        if (txt.size == 0) return false\n        if (txt.charAt(txt.size - 1).isLetter)\
    \ {\n            if (txt.charAt(txt.size - 2).isLetter) return false\n       \
    \     else return true\n        }\n        else return false", "        // Write\
    \ your code here\n        txt.substring(txt.length - 1, txt.length).matches(\"\
    [a-zA-Z]\") && !txt.substring(txt.length - 2, txt.length - 1).matches(\"[a-zA-Z]\"\
    )", "        if (txt.length == 0) false\n        else {\n            val trimmed\
    \ = txt.trim\n            val lastChar = trimmed.last\n            val word =\
    \ trimmed.take(trimmed.length - 1)\n            val filteredLast = word.filter(_\
    \ == lastChar)\n            val filteredTotal = trimmed.filter(_ == lastChar)\n\
    \            if (filteredLast.length == filteredTotal.length - 1) true\n     \
    \       else false\n        }", "        var lastCharIsALetter = false\n     \
    \   val charArr = txt.toCharArray()\n        val len = charArr.length\n      \
    \  if (len > 0) {\n            val lastChar = charArr(len - 1)\n            if\
    \ (Character.isLetter(lastChar)) {\n                if (len > 1) {\n         \
    \           val prevToLastChar = charArr(len - 2)\n                    if (!Character.isLetter(prevToLastChar))\
    \ {\n                        lastCharIsALetter = true\n                    }\n\
    \                } else {\n                    lastCharIsALetter = true\n    \
    \            }\n            }\n        }\n        lastCharIsALetter", '        //
    Write your code here', "        val ltxt = txt.split(\" \")\n        ltxt.last.matches(\"\
    [a-zA-Z]+\")", "        val s = txt.trim\n        if (s.length == 0) return false\n\
    \        if (s.last == ' ') return false\n        if (s.indexOf(' ') == -1) return\
    \ true\n        val l = s.lastIndexOf(' ')\n        s.indexOf(' ', l + 1) == -1",
  "        val last : Char = txt.last\n        val others : String = txt.substring(0,\
    \ txt.length - 1)\n        if (others.contains(last)) false\n        else last.isLetter",
  "        val ch = txt.takeRight(1)\n        if (ch == \" \") {\n            false\n\
    \        } else {\n            val word = txt.split(\" \").last\n            word.takeRight(1)\
    \ == ch\n        }", "        if (txt.length == 0) {\n            return false\n\
    \        }\n        val lastChar = txt.substring(txt.length - 1, txt.length)\n\
    \        if (lastChar == \" \") {\n            return false\n        }\n     \
    \   val lastWord = txt.substring(txt.lastIndexOf(\" \") + 1, txt.length)\n   \
    \     if (lastWord.length > 1) {\n            return false\n        }\n      \
    \  lastChar.matches(\"[a-zA-Z]\")", "        txt.last match {\n            case\
    \ _ : Char if txt.length == 1 => true\n            case _ : Char if txt.last.isLetter\
    \ => false\n            case _ : Char if txt.last.isLetter == false => false\n\
    \            case _ => false\n        }", "        // Write your code here\n \
    \       return false", "        // your code goes here\n        return true",
  "        txt.last match {\n            case l if (l.isLetter && l.isUpper) => {\n\
    \                txt.length >= 2 && txt(txt.length - 2) == ' '\n            }\n\
    \            case l if (l.isLetter && l.isLower) => {\n                txt.length\
    \ >= 2 && txt(txt.length - 2) == ' '\n            }\n            case _ => false\n\
    \        }", "        if (txt.length == 0) false\n        else {\n           \
    \ if (txt.last.isLetter)\n                if (txt.contains(\" \")) {\n       \
    \             txt.reverse.indexOf(\" \") == 0\n                } else {\n    \
    \                true\n                }\n            else false\n        }",
  '      // Write your code here', "        //@\n        if (txt.isEmpty) {\n    \
    \        return false\n        }\n        var ls = txt.split(\" \")\n        var\
    \ l = ls(ls.length - 1)\n        if (l.length > 1) {\n            return false\n\
    \        }\n        if (l.charAt(0).isLetter) {\n            return true\n   \
    \     }\n        return false\n        //@", "        txt match {\n          \
    \  case _ if txt.length == 0 => false\n            case _ if txt.length == 1 =>\
    \ txt.matches(\"[a-zA-Z]\")\n            case _ if txt.last.matches(\"[a-zA-Z]\"\
    ) => {\n                val ix = txt.length - 2\n                val beforeLast\
    \ = txt.charAt(ix)\n                if (beforeLast.matches(\"[a-zA-Z]\")) false\n\
    \                else true\n            }\n            case _ => false\n     \
    \   }", "        // Fill in the code here\n        ???", "        if (txt.length\
    \ == 0) {\n            return false\n        }\n        for (i <- 1 to txt.length)\
    \ {\n            if (i == txt.length) {\n                return txt(i - 1).isLetter\n\
    \            }\n            if (txt(i) == ' ' && txt(i - 1).isLetter) {\n    \
    \            return false\n            }\n        }\n        return false", " \
    \       if (txt.isEmpty) {\n            return false\n        }\n        val txtArr\
    \ = txt.split(\" \")\n        val lastArr : Array[Char] = txtArr(txtArr.length\
    \ - 1).toCharArray\n        val last : Char = lastArr(lastArr.length - 1)\n  \
    \      last.isLetter && txt.lastIndexOf(last) == txt.length - 1", "        if\
    \ (txt.length == 0) return false\n        val s = txt.split(\" \")\n        if\
    \ (s.length == 0) return false\n        val lastWord = s(s.length - 1)\n     \
    \   if (lastWord.length == 0) return false\n        if (lastWord.length == 1)\
    \ return true\n        return (lastWord(lastWord.length - 1).isLetter && !lastWord(lastWord.length\
    \ - 2).isLetter)", "        if (txt.length == 0) return false\n        var c =\
    \ txt.charAt(txt.length - 1)\n        if (c.isLetter) {\n            val txt2\
    \ = txt.substring(0, txt.length - 1)\n            if (txt2.length == 0) return\
    \ true\n            var c2 = txt2.charAt(txt2.length - 1)\n            if (c2.isLetter)\
    \ return false\n            return true\n        }\n        return false", '        txt.length()
    > 0 && (txt.charAt(txt.length() - 1).isLetter() && (txt.lastIndexOf(" ") == txt.length()
    - 1))', "        val x = txt.trim()\n        if (x.length == 0) return false\n\
    \        if (x.last.isLetter) {\n            if (x.contains(\" \")) {\n      \
    \          if (x.indexOf(\" \") == x.length - 1) return false\n              \
    \  val t = x.split(\" \")\n                val lastword = t(t.length - 1)\n  \
    \              return lastword.last == x.last\n            }\n            return\
    \ true\n        }\n        return false", "        val alphaNumericRegex = \"\"\
    \"[A-Za-z]*\"\"\".r\n        if (txt.isEmpty) return false\n        val txts =\
    \ txt.split(\" \")\n        txts.last.endsWith(\".\") || txts.last.endsWith(\"\
    ,\") || alphaNumericRegex.findFirstIn(txts.last).isEmpty", "        if (txt.last.isLetter\
    \ && txt.last.isUpper) true\n        else if (txt.last.isLetter && txt.last.isLower)\
    \ true\n        else false", "        var x = txt.trim.split(\" \")\n        var\
    \ y = x(x.length - 1)\n        var z = y(y.length - 1)\n        var m = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n        if (m.contains(z)) {\n            return true\n        }\n        else\
    \ {\n            return false\n        }", '        return (txt.isEmpty || (txt.last.isLetter
    && txt.takeRight(2).split(" ").length == 2))', "        if (txt.length == 0) {\n\
    \            return false\n        }\n        val lastCharacter = txt.charAt(txt.length-1)\n\
    \        if (lastCharacter.isLetter) {\n            val lastWord = txt.split(\"\
    \ \").last\n            if (lastWord.charAt(lastWord.length-1) == lastCharacter)\
    \ {\n                return false\n            }\n            return true\n  \
    \      }\n        return false", "        val txtls = txt.split(\" \")\n     \
    \   val lasttxt = txtls(txtls.length - 1)\n        if (lasttxt.length() != 0)\n\
    \            if (lasttxt.takeRight(1).matches(\"[a-zA-Z]\"))\n               \
    \ if (lasttxt.length() != 1)\n                    false\n                else\n\
    \                    true\n            else\n                false\n        else\n\
    \            false", '      return false;', "        val t = txt.trim\n      \
    \  if (t.isEmpty) return false\n        val last = t.last\n        if (!last.isLetter)\
    \ return false\n        if (t.length > 1) {\n            val preLast = t(t.length\
    \ - 2)\n            if (preLast.isLetter) return false\n        }\n        return\
    \ true", "        if (txt.length() == 0)\n            return false\n        val\
    \ x = txt.lastIndexOf(\" \")\n        if (x == -1)\n            return txt.matches(\"\
    [a-zA-Z]+\")\n        if (x == txt.length() - 1)\n            return false\n \
    \       val y = txt.length() - 1\n        txt.charAt(y).isLetter", "        //\
    \ read the string backwards and once we see a letter if the next\n        // char\
    \ is not a space or a letter then return true\n        val txtLen = txt.length\n\
    \        if (txtLen == 0) return false\n        for (i <- txtLen-1 to 0 by -1)\
    \ {\n            if (txt(i).isLetter) {\n                if (i == txtLen-1) return\
    \ true\n                else if (txt(i+1) == ' ') return true\n              \
    \  else return false\n            }\n        }\n        false", "        val lastChar\
    \ = txt.last\n        if (lastChar.isLetter) {\n            val lastCharIndex\
    \ = txt.length - 1\n            if (lastCharIndex == 0) true\n            else\
    \ if (txt(lastCharIndex - 1) == ' ') true\n            else false\n        }\n\
    \        else false", "        //\n        // Write your code here\n        //\n\
    \        if (txt.length == 0) return false\n        val temp = txt.replaceAll(\"\
    \ \", \"\")\n        if (temp.length == 0) return false\n        val lastChar\
    \ = temp.last\n        if (temp.length > 1 && temp(temp.length - 2) == ' ') true\n\
    \        else if (temp.length == 1) true\n        else false", '        return
    false', "        // txt.endsWith(s.matches(\"[a-zA-Z]\")\n        if (txt.length\
    \ > 0) txt.last.isLetter\n        else false", "        if (txt.length == 0) return\
    \ false\n        txt.length match {\n            case 1 => true\n            case\
    \ _ =>\n                if (txt.takeRight(1).equals(\" \")) return false\n   \
    \             val last = txt.takeRight(1)\n                if (last.charAt(0).isLetter)\
    \ return true\n                return false\n        }", "        var ret : Boolean\
    \ = false\n        if (txt.length > 0) {\n            var lastChar = txt.last\n\
    \            ret = lastChar.isLetter && !lastChar.isSpaceChar\n        }\n   \
    \     ret", "        if (txt.last == ' ') return false\n        val pattern =\
    \ \"\"\"([a-zA-Z]+)\"\"\".r\n        var flag = false\n        for (m <- pattern.findAllIn(txt))\
    \ {\n            if (m.endsWith(txt.last.toString)) flag = true\n        }\n \
    \       return flag", "        var rv = false\n        var lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            if (txt.length == 1) {\n      \
    \          rv = true\n            } else {\n                var penultimateChar\
    \ = txt.takeRight(2).head\n                if (!penultimateChar.isLetter) {\n\
    \                    rv = true\n                }\n            }\n        }\n\
    \        rv", "        // need to remove all whitespace\n        // then get the\
    \ last character\n        // then see if it is a letter or not\n        var txt2\
    \ = txt.replaceAll(\" \", \"\")\n        var last_char = txt2.substring(txt2.length()\
    \ - 1)\n        last_char.matches(\"[a-zA-Z]\")", "      if (txt.isEmpty) false\n\
    \      else if (txt.last.isLetter) {\n        if (txt.last == ' ') false\n   \
    \     else true\n      }\n      else false", "        // Return true or false.\n\
    \        val regexp = \"[a-zA-Z]\".r\n        var res = regexp.findAllIn(txt)\n\
    \        if (res.length > 0) {\n            return true\n        }\n        return\
    \ false", '        return false', "        if (txt.length == 0) {\n          \
    \  return false\n        }\n        // Do not use split as it will separate by\
    \ space.\n        // val str = txt.split(\" \")\n        val str = txt.toList\n\
    \        val last = str.last\n        if (last.isLetter) {\n            if (str.length\
    \ == 1) {\n                true\n            } else {\n                val secondLast\
    \ = str(str.length - 2)\n                // println(last + \" \" + secondLast)\n\
    \                secondLast.isSpaceChar\n            }\n        } else {\n   \
    \         false\n        }", "        var flag = false\n        for (c <- txt.reverse.trim)\n\
    \            if (c.isLetter && !c.isSpaceChar) flag = true\n            else return\
    \ false\n        return flag", "        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar.isLetter\n        val lastCharIsLastCharOfWord = (!txt.contains(\"\
    \ \")) || (txt.lastIndexOf(\" \") < txt.length - 1)\n        lastCharIsLetter\
    \ && lastCharIsLastCharOfWord", "        txt.reverse.head match {\n          \
    \  case c if c >= 'a' && c <= 'z' => false\n            case c if c >= 'A' &&\
    \ c <= 'Z' => false\n            case _ => true\n        }", "        if (txt.length\
    \ == 0) return false\n        if (txt.endsWith(\" \")) return false\n        val\
    \ lastChar = txt.split(\" \").last.last\n        val c = lastChar(0)\n       \
    \ if (c.isLetter) return true\n        return false", '        ???', "       \
    \ // TODO\n        if (txt.isEmpty) false\n        else {\n            val arr\
    \ = txt.split(\" \")\n            val last = arr(arr.length - 1)\n           \
    \ if (last.length == 1) last.charAt(0).isLetter\n            else !last.charAt(last.length\
    \ - 1).isLetter\n        }", "      if (txt.length == 0) false\n      else {\n\
    \        if (txt.last == ' ') false\n        else {\n          if (txt.last.isLetter)\
    \ true\n          else false\n        }\n      }", '        ???', '        return
    false', "        if (txt.length == 0) return false\n        val lastChar = txt.last\n\
    \        if (!lastChar.isLetter) return false\n        val lastIndex = txt.length\
    \ - 1\n        for (i <- 0 until lastIndex) {\n            if (txt(i) == ' ' &&\
    \ txt(i + 1) == lastChar) return false\n        }\n        return true", "   \
    \     if (txt.isEmpty) false\n        else {\n            val size = txt.size\n\
    \            if (size == 1) txt(0).isLetter\n            else {\n            \
    \    val last = txt(size - 1)\n                if (last.isLetter) {\n        \
    \            val lastButOne = txt(size - 2)\n                    if (lastButOne.isLetter)\
    \ false\n                    else true\n                }\n                else\
    \ false\n            }\n        }", "        if (txt.isEmpty) return false\n \
    \       var count = 0\n        val arr = txt.toCharArray\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) == ' ') {\n                count\
    \ = 0\n            } else {\n                count += 1\n            }\n     \
    \   }\n        count == 1", '        ???', '        return false', '        ???',
  "        val arr = txt.split(\" \")\n        val word = arr(arr.length - 1)\n  \
    \      if (word.isEmpty) return false\n        else return word.takeRight(1).forall(_.isLetter)",
  "        if (txt.trim == \"\") return false\n        val lastChar = txt.trim.last\n\
    \        if (lastChar.isLetter) {\n            val lastCharIndex = txt.trim.lastIndexOf(lastChar)\n\
    \            if (lastCharIndex == txt.trim.length - 1) return true\n         \
    \   else {\n                if (txt.trim(lastCharIndex) == ' ') return true\n\
    \                else return false\n            }\n        }\n        else return\
    \ false", "        if (txt.length == 0) false\n        else txt.split(\" \").filter(str\
    \ => str.last.isLetter).length > 0", '        return (txt.last.isLetter && !txt.last.isSpaceChar)',
  "        val revTxt = txt.reverse\n        val revTxtLength = revTxt.length\n  \
    \      val lastChar = revTxt(0)\n        val nextToLastChar = revTxt(1)\n    \
    \    val isLastCharAnAlphabet = lastChar.isLetter\n        val isNextToLastCharAWhitespace\
    \ = nextToLastChar.isWhitespace\n        isLastCharAnAlphabet && isNextToLastCharAWhitespace",
  "        if (txt.length == 0) return false\n        var lastIndex = txt.length -\
    \ 1\n        for (i <- 0 until txt.length) {\n            if (txt(i) == ' ') lastIndex\
    \ = i - 1\n        }\n        return !txt(lastIndex).isLetter", "        if (txt.length\
    \ == 0) return false\n        val lastChar = txt.last\n        return lastChar.isLetter\
    \ && lastChar != ' '", '        txt.last.isLetter', "        var i = txt.length\
    \ - 1\n        while (i >= 0 && !txt(i).isLetter) i -= 1\n        if (i == -1)\
    \ return false\n        i -= 1\n        while (i >= 0 && txt(i).isLetter) i -=\
    \ 1\n        return i == -1", "        val words = txt.split(\" \")\n        //\
    \ The last character might be either a non-word character\n        // or a part\
    \ of the last word.\n        if (words.length == 0)\n            false\n     \
    \   else {\n            val lastWord = words(words.length - 1)\n            if\
    \ (lastWord.length == 0)\n                false\n            else {\n        \
    \        val lastChar = lastWord(lastWord.length - 1)\n                if (lastChar.isLetter)\n\
    \                    true\n                else\n                    false\n \
    \           }\n        }", "        var txt_trimmed = txt.trim\n        if (txt_trimmed.length()\
    \ == 0) {\n            return false\n        }\n        var last_char = txt_trimmed.charAt(txt_trimmed.length()\
    \ - 1)\n        if (last_char >= 'a' && last_char <= 'z') {\n            return\
    \ true\n        }\n        if (last_char >= 'A' && last_char <= 'Z') {\n     \
    \       return true\n        }\n        return false", "        // Try to figure\
    \ out if there's a space before the last letter.\n        // If there is, then\
    \ the space is the last character of the string.\n        // Otherwise, the last\
    \ character is a letter, and it's the last character of the string.\n        //\
    \ Note: we can't use java.lang.String.lastIndexOf because it's\n        // not\
    \ implemented for Scala yet.\n        val spaceIndex = txt.lastIndexOf(' ')\n\
    \        // If the space index is not -1, then the space is the last character\n\
    \        if (spaceIndex != -1) {\n            return false\n        }\n      \
    \  // If it's -1, then it's not the last character, so let's check\n        //\
    \ if the last character is a letter.\n        // We can't convert the last character\
    \ to lowercase with toLowerCase because\n        // it's not implemented for Scala\
    \ yet, so we'll use isUpperCase, isLowerCase, etc.\n        // instead.\n    \
    \    val lastChar = txt.charAt(txt.length - 1)\n        // Check if the last character\
    \ is lowercase or uppercase.\n        val isLowerCase = lastChar.isLower\n   \
    \     val isUpperCase = lastChar.isUpper\n        // If the last character is\
    \ lowercase or uppercase, then return true.\n        // Otherwise, return false.\n\
    \        isLowerCase || isUpperCase", "        if (txt.isEmpty) false\n      \
    \  else {\n            val txts = txt.split(\" \")\n            val len = txts.length\n\
    \            if (len == 0) false\n            else {\n                val l =\
    \ txts(len - 1)\n                l.length >= 1 && l.last.isLetter\n          \
    \  }\n        }", "        txt.last.isLetter &&\n        (txt.length == 1 ||\n\
    \        !(txt.charAt(txt.length - 2).isLetter))", "        val len = txt.length\n\
    \        if (len == 0) false\n        else {\n            val alpha = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n            if (alpha.contains(txt(len - 1).toString)) true\n            else\
    \ false\n        }", "        if (txt.length() == 0)\n            return false\n\
    \        if (txt.charAt(txt.length() - 1).isLetter == false)\n            return\
    \ false\n        if (txt.charAt(txt.length() - 2).isLetter == true)\n        \
    \    return false\n        return true", "        if (txt.length == 0) return\
    \ false\n        var j = 0\n        while (j < txt.length) {\n            if (txt(j)\
    \ == ' ') return false\n            j += 1\n        }\n        return true", " \
    \       if (txt.length == 0) return false\n        val lastChar = txt.last\n \
    \       if (lastChar.isLetter) {\n            val lastWord = txt.split(\" \").last\n\
    \            if (lastWord.last != lastChar) return true\n        }\n        return\
    \ false", '        // Write your code here', "        if (txt.length == 0) { return\
    \ false }\n        val lastChar = txt.last.toLower\n        val alphabets = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        if (alphabets.contains(lastChar)) {\n  \
    \          if (txt.length == 1) { return true }\n            if (txt(txt.length\
    \ - 2) == ' ') { return true }\n        }\n        return false", "        if\
    \ (txt.length == 0) return false\n        var last = txt.length - 1\n        while\
    \ (last >= 0 && txt(last) == ' ') last -= 1\n        last >= 0 && txt(last).isLetter\
    \ && (last == txt.length - 1 || txt(last + 1) == ' ')", "        val len = txt.length\n\
    \        if (len == 0) {\n            return false\n        }\n        val lastChar\
    \ = txt(len - 1)\n        val isLetter = lastChar.isLetter\n        if (!isLetter)\
    \ {\n            return false\n        }\n        val isWhitespace = lastChar.isWhitespaceChar\n\
    \        return !isWhitespace", "        val txtSplit = txt.split(\" \")\n   \
    \     if (txtSplit.length == 0) return false\n        else if (txtSplit.last.matches(\"\
    [a-zA-Z]\") && txtSplit.last.length == 1) return true\n        else false", " \
    \       if (txt.length() == 0) return false\n        return txt.last.isLetter\
    \ && (txt.lastIndexOf(\" \") == txt.length() - 1)", "        if (txt.isEmpty())\
    \ return false\n        if (txt.substring(txt.length - 1).matches(\"[A-Za-z]+\"\
    )) {\n            if (txt.substring(txt.length - 2, txt.length - 1).matches(\"\
    [A-Za-z]+\")) return false\n            else return true\n        }\n        else\
    \ return false", "        if (txt.length == 0) return false\n        else if (txt.last.isLetter\
    \ && txt.trim.last == txt.last) return true\n        else return false", '        throw
    new NotImplementedError', '        return false', "        if (txt.isEmpty) return\
    \ false\n        var lastChar = txt.last\n        if (lastChar.isLetter && !lastChar.isWhitespace)\
    \ return true\n        return false", "        val lastChar = txt.last\n     \
    \   lastChar.isLetter && !txt.endsWith(\" \")", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val wordBoundary =\
    \ txt.lastIndexOf(' ') == txt.length - 1\n        val lastWordIndex = txt.lastIndexOf('\
    \ ') + 1\n        if(lastCharIsLetter) {\n            val lastWord = txt.substring(lastWordIndex)\n\
    \            val lastWordIsEmpty = lastWord.isEmpty\n            if(!lastWordIsEmpty)\
    \ {\n                val wordWithoutLastChar = lastWord.substring(0, lastWord.length\
    \ - 1)\n                val lastWordBoundary = lastWord == wordWithoutLastChar\
    \ + lastWord.last\n                return lastWordBoundary && !wordBoundary\n\
    \            }\n        }\n        return false", "        if (txt.isEmpty) {\n\
    \            return false\n        }\n        val txtList = txt.split(\" \")\n\
    \        val last = txtList(txtList.length - 1)\n        if (last.last.isLetter)\
    \ {\n            true\n        } else {\n            false\n        }", "    \
    \    if (txt.length == 0) false\n        else {\n            val lastChar = txt.last\n\
    \            if (lastChar.isLetter) {\n                if (txt.length == 1) true\n\
    \                else {\n                    val nextToLastChar = txt(txt.length\
    \ - 2)\n                    if (nextToLastChar == ' ') true\n                \
    \    else false\n                }\n            }\n            else false\n  \
    \      }", "        var isLastCharALetter = false\n        var i = txt.length\
    \ - 1\n        while (i >= 0 && !txt(i).isLetter) i -= 1\n        if (i >= 0 &&\
    \ i == txt.length - 1) isLastCharALetter = true\n        isLastCharALetter", '        return
    false', "        // Insert code here.\n        return false", "        if (txt.length\
    \ == 0) { return false }\n        if (txt.last.isLetter) {\n            if (txt.length\
    \ == 1) {\n                return true\n            }\n            if (txt(txt.length\
    \ - 2) == ' ') {\n                return true\n            }\n        }\n    \
    \    return false", "        val last_char : Char = txt.last\n        if (last_char.isLetter)\
    \ {\n            var index : Int = txt.lastIndexOf(\" \")\n            if (index\
    \ == -1) {\n                return true\n            }\n            index += 1\n\
    \            if (index == txt.length - 1) {\n                return true\n   \
    \         }\n        }\n        return false", "        val n = txt.length()\n\
    \        if (n == 0) return false\n        if (n == 1) return txt(0).isLetter\n\
    \        if (txt(n - 1).isLetter && !txt(n - 2).isLetter) return true\n      \
    \  false", "        val lastChar = txt.trim.last\n        val lastIsLetter = lastChar.isLetter\n\
    \        val lastIsLastInWord = txt.trim.lastIndexOf(\" \") == txt.trim.length\
    \ - 1\n        lastIsLetter && lastIsLastInWord", "        val last = txt.split(\"\
    \ \").last\n        last.toUpperCase() == last.toLowerCase()", "        val lastChar\
    \ = txt.trim.last\n        if (lastChar == ' ') false\n        else if (txt.trim.lastIndexOf(lastChar)\
    \ == txt.trim.length - 1) {\n            if (Character.isLetter(lastChar)) true\n\
    \            else false\n        }\n        else false", "        if (txt.length\
    \ == 0) {\n            return false\n        }\n        var i = txt.length - 1\n\
    \        while (i >= 0 && txt(i) == ' ') {\n            i -= 1\n        }\n  \
    \      if (i < 0) {\n            return false\n        }\n        var c = txt(i)\n\
    \        if (c >= 'a' && c <= 'z') {\n            return true\n        }\n   \
    \     if (c >= 'A' && c <= 'Z') {\n            return true\n        }\n      \
    \  return false", "        if (txt.length == 0) {\n            return false\n\
    \        }\n        if (txt.length == 1) {\n            return true\n        }\n\
    \        if (txt.charAt(txt.length - 1) == ' ') {\n            return false\n\
    \        }\n        if (txt.charAt(txt.length - 2) == ' ') {\n            return\
    \ true\n        }\n        return false", "        def checkIfLastCharIsALetterRecur(txt\
    \ : String, spaceCount : Int) : Boolean = {\n            if (txt.isEmpty) false\n\
    \            else if (txt.last == ' ') {\n                if (spaceCount > 0)\
    \ false\n                else checkIfLastCharIsALetterRecur(txt.init, 1)\n   \
    \         }\n            else if (txt.last.isLetter) true\n            else checkIfLastCharIsALetterRecur(txt.init,\
    \ 0)\n        }\n        checkIfLastCharIsALetterRecur(txt, 0)", "        // Your\
    \ code here...\n        if (txt.size == 0) return false\n        var flag = true\n\
    \        var reversed_txt = txt.reverse\n        var index = 0\n        while\
    \ (flag) {\n            var c = reversed_txt(index)\n            if (c == ' ')\
    \ return false\n            if (c >= 'a' && c <= 'z') return true\n          \
    \  if (c >= 'A' && c <= 'Z') return true\n            index += 1\n        }\n\
    \        return false", "        if (txt.length == 0) return false\n        var\
    \ last = txt.last\n        var prev = \"\"\n        if (txt.length > 1) prev =\
    \ txt(txt.length - 2).toString\n        if (last.isLetter && !prev.isLetter) true\
    \ else false", '        false', "        var word : String = \"\"\n        var\
    \ cnt : Int = 0\n        for (i <- 0 until txt.length) {\n            if (cnt\
    \ == 0) {\n                if (txt(i) != ' ') word += txt(i)\n               \
    \ else cnt += 1\n            }\n            else {\n                if (txt(i)\
    \ != ' ') word = \"\"\n                else cnt += 1\n            }\n        }\n\
    \        word.length > 0 && word(word.length - 1).isLetter", '        return false;',
  "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val l = txt.length\n\
    \        if (l == 0) return false\n        val last = txt(l - 1)\n        if (last\
    \ == ' ') return false\n        if (alphabet.contains(last)) return true\n   \
    \     return false", "        var last = txt.last\n        if (txt.size == 0)\
    \ {\n            return false\n        }\n        if (!last.isLetter) {\n    \
    \        return false\n        }\n        if (txt.size > 1) {\n            var\
    \ oneBeforeLast = txt(txt.size - 2)\n            if (oneBeforeLast.isLetter ||\
    \ oneBeforeLast == ' ') {\n                return false\n            }\n     \
    \   }\n        return true", "        if (txt.length == 0) return false\n    \
    \    val splits = txt.split(\" \")\n        val lastSplit = splits(splits.length\
    \ - 1)\n        if (lastSplit.length == 0) return false\n        lastSplit(lastSplit.length\
    \ - 1).isLetter", "        return txt.length() == 0 || txt.last != ' ' && !txt.last.isWhitespace\
    \ && txt.last.isLetter", "        val txtLen = txt.length\n        if (txtLen\
    \ < 1) return false\n        val lastChar = txt(txtLen - 1)\n        val lastCharIsALetter\
    \ = lastChar.isLetter\n        val lastCharIsFollowedBySpace = txt.indexOf(\"\
    \ \" + lastChar) != -1\n        val lastCharIsPrecededBySpace = txt.indexOf(lastChar\
    \ + \" \") != -1\n        lastCharIsALetter && !lastCharIsFollowedBySpace && !lastCharIsPrecededBySpace",
  "        txt.trim.isEmpty() match {\n            case true => false\n          \
    \  case false => {\n                val t = txt.trim()\n                if (t.last.isLetter)\
    \ {\n                    val t1 = t.substring(0, t.length() - 1)\n           \
    \         val t2 = t1.trim()\n                    if (t2.isEmpty() || t2.last\
    \ == ' ') true else false\n                } else false\n            }\n     \
    \   }", "        if (txt.length() == 0)\n            return false\n        if\
    \ (txt.last.isLetter) {\n            val words = txt.split(\" \")\n          \
    \  var lastword = words(words.length - 1)\n            return (lastword.length()\
    \ == 1)\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
