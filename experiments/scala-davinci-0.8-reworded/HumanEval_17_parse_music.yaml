name: HumanEval_17_parse_music
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n    // Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n    // not last.\n    // Here is a\
  \ legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts\
  \ two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"\
  o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n\
  \    def parseMusic(music_string : String) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
  )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o\
  \ o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o|\
  \ o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
completions: ["        val music_string_no_space = music_string.replaceAll(\" \",\
    \ \"\")\n        var music_list = List[Long]()\n        var temp = \"\"\n    \
    \    for (i <- 0 until music_string_no_space.length()) {\n            if (music_string_no_space(i)\
    \ == 'o') {\n                if (temp.length() == 0) temp += music_string_no_space(i)\n\
    \                else {\n                    music_list ::= temp.length()\n  \
    \                  temp = \"\"\n                    temp += music_string_no_space(i)\n\
    \                }\n            }\n            else {\n                temp +=\
    \ music_string_no_space(i)\n            }\n        }\n        music_list ::= temp.length()\n\
    \        music_list = music_list.reverse\n        for (i <- 0 until music_list.length)\
    \ {\n            if (music_list(i) == 1) music_list(i) = 4\n            else if\
    \ (music_list(i) == 2) music_list(i) = 2\n            else if (music_list(i) ==\
    \ 3) music_list(i) = 1\n        }\n        music_list", "        return music_string.split(\"\
    \ \").map(s => s match {\n            case \"o\" => 4l\n            case \"o|\"\
    \ => 2l\n            case \".|\" => 1l\n        }).toList", "        var result\
    \ = List[Long]()\n        for (i <- 0 until music_string.length) {\n         \
    \   if (music_string(i) == 'o') {\n                if (i + 1 == music_string.length\
    \ || music_string(i + 1) == ' ') {\n                    result = result :+ 4\n\
    \                } else {\n                    result = result :+ 2\n        \
    \            i += 1\n                }\n            } else if (music_string(i)\
    \ == '.') {\n                result = result :+ 1\n                i += 1\n  \
    \          }\n        }\n        return result", '        List(0L)', "       \
    \ var list = new ListBuffer[Long]()\n        var array = music_string.split(\"\
    \ \")\n        for (i <- 0 until array.length) {\n            if (array(i) ==\
    \ \"o\") list += 4\n            else if (array(i) == \"o|\") list += 2\n     \
    \       else if (array(i) == \".|\") list += 1\n        }\n        list.toList",
  "      if (music_string.length == 0)\n        return List()\n      val head = music_string.take(1)\n\
    \      val tail = music_string.drop(1)\n      val beats = head match {\n     \
    \   case \"o\" => 4\n        case \"o|\" => 2\n        case \".|\" => 1\n    \
    \    case _ => 0\n      }\n      val next = music_string.drop(head.length)\n \
    \     beats :: parseMusic(next)", "        // write your code here\n        var\
    \ seq:List[Long] = List()\n        var a = 0\n        while(a < music_string.length)\
    \ {\n            if(music_string(a) == 'o') {\n                if(a + 1 < music_string.length\
    \ && music_string(a + 1) == '|') {\n                    seq = seq :+ 2\n     \
    \               a += 2\n                } else {\n                    seq = seq\
    \ :+ 4\n                    a += 1\n                }\n            } else {\n\
    \                seq = seq :+ 1\n                a += 2\n            }\n     \
    \   }\n        seq", '        null', "        val list_of_lists = music_string.split(\"\
    \ \").map(s => {\n            val list = ListBuffer[Long]()\n            var counter\
    \ = 0\n            while (counter < s.length) {\n                val current =\
    \ s(counter)\n                if (current == 'o') {\n                    if (counter\
    \ == s.length - 1) {\n                        list += 4\n                    }\
    \ else {\n                        if (s(counter + 1) == '|') {\n             \
    \               list += 2\n                            counter += 1\n        \
    \                } else {\n                            list += 4\n           \
    \             }\n                    }\n                } else if (current ==\
    \ '.') {\n                    list += 1\n                }\n                counter\
    \ += 1\n            }\n            list.toList\n        }).toList\n        list_of_lists.flatten",
  "        val notes = \"o|.\"\n        return music_string.split(\" \").map(note\
    \ => {\n            val index = notes.indexOf(note(0))\n            val isDotted\
    \ = note.contains(\".\")\n            (index + 1) * (if (isDotted) 3 else 1)\n\
    \        }).toList", "        // IMPLEMENT THIS\n        List[Long]()", "\t\t\
    var result = new ListBuffer[Long]\n\t\tfor (note <- music_string.split(\" \"))\
    \ {\n\t\t\tif (note.endsWith(\"|\")) result += note.substring(0, 1) match {\n\t\
    \t\t\tcase \"o\" => 2l\n\t\t\t\tcase \".\" => 1l\n\t\t\t}\n\t\t\telse result +=\
    \ note match {\n\t\t\t\tcase \"o\" => 4l\n\t\t\t\tcase \".\" => 0l\n\t\t\t}\n\t\
    \t}\n\t\tresult.toList", "        var cnt = 0\n        var list = ListBuffer[Long]()\n\
    \        while (cnt < music_string.length) {\n            if (music_string(cnt)\
    \ == 'o') {\n                if (cnt + 1 < music_string.length && music_string(cnt\
    \ + 1) == '|') {\n                    list += 2\n                    cnt += 2\n\
    \                } else {\n                    list += 4\n                   \
    \ cnt += 1\n                }\n            } else {\n                list += 1\n\
    \                cnt += 2\n            }\n        }\n        list.toList", " \
    \       var beats = List[Long]()\n        for (char <- music_string.toCharArray())\
    \ {\n            beats = char match {\n                case 'o' => 4l :: beats\n\
    \                case '|' => beats\n                case '.' => 1l :: beats\n\
    \                case _ => beats\n            }\n        }\n        beats", " \
    \     music_string.split(\" \").toList.map(x => x match {\n        case \"o\"\
    \ => 4l\n        case \"o|\" => 2l\n        case \".|\" => 1l\n      })", "  \
    \      val notes = music_string.split(\"\\\\s+\")\n        notes.map {\n     \
    \       case \"o\" => 4l\n            case \"o|\" => 2l\n            case \".|\"\
    \ => 1l\n        }.toList", "        music_string.split(\" \").map {\n       \
    \     case \"o\" => 4l\n            case \"o|\" => 2l\n            case \".|\"\
    \ => 1l\n        }.toList", "        music_string.split(\" \").map(_ match {\n\
    \            case \"o\" => 4l\n            case \"o|\" => 2l\n            case\
    \ \".|\" => 1l\n        }).toList", "        var result : List[Long] = List()\n\
    \        music_string.split(\" \").foreach {\n            case \"o\" => result\
    \ = result :+ 4\n            case \"o|\" => result = result :+ 2\n           \
    \ case \".|\" => result = result :+ 1\n        }\n        return result", "  \
    \      def helper(chars : List[Char], acc : List[Long]) : List[Long] = {\n   \
    \         if (chars.length == 0) acc\n            else {\n                if (chars.head\
    \ == 'o') helper(chars.tail, acc :+ 4)\n                else if (chars.head ==\
    \ '.') helper(chars.tail, acc :+ 1)\n                else helper(chars.tail, acc)\n\
    \            }\n        }\n        helper(music_string.toList, List())", '        music_string.split("
    ").map(x => if (x == "o") 4 else 1).toList', "        music_string.trim.split(\"\
    \ \").map(x => x match {\n            case \"o\" => 4\n            case \"o|\"\
    \ => 2\n            case \".|\" => 1\n        }).toList", "      val noteToBeat\
    \ = Map(\"o\" -> 4, \"o|\" -> 2, \".|\" -> 1)\n      music_string.split(\" \"\
    ).map(noteToBeat(_)).toList", '        return music_string.split("\\s+").toList.map
    { x => if (x == "o") 4 else if (x == "o|") 2 else 1 }', "        music_string.split(\"\
    \\\\s+\").map(\n            str => str match {\n                case \"o\" =>\
    \ 4\n                case \"o|\" => 2\n                case \".|\" => 1\n    \
    \        }\n        ).toList", "        val beat_value = Map[Char, Long]('o' ->\
    \ 4, '|' -> 1)\n        var beats = List[Long]()\n        var current_beat = 0l\n\
    \        for (note <- music_string) {\n            if (note != ' ') {\n      \
    \          beats = beats :+ current_beat\n                current_beat = beat_value(note)\n\
    \            } else {\n                current_beat += beat_value(note)\n    \
    \        }\n        }\n        beats", "        val splitted = music_string.split(\"\
    \ \")\n        val output = new ListBuffer[Long]()\n        for (s <- splitted)\
    \ {\n            if (s.charAt(0) == 'o') output += 4\n            else if (s.charAt(0)\
    \ == '.') output += 1\n        }\n        output.toList", "        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note.length == 1) {\n                beats\
    \ += 4\n            } else if (note.length == 2) {\n                beats += 2\n\
    \            } else if (note.length == 3) {\n                beats += 1\n    \
    \        }\n        }\n        beats.toList", "        val parts = music_string.split(\"\
    \ \")\n        parts.map(part => part.charAt(0) match {\n            case 'o'\
    \ => if (part.length == 1) 4 else 2\n            case '.' => 1\n        }).toList",
  "        val whole = 'o'\n        val half = 'o'\n        val quarter = '.'\n  \
    \      var res : List[Long] = List()\n        for (c <- music_string) {\n    \
    \        c match {\n                case 'o' => res = res :+ 4\n             \
    \   case 'o' => res = res :+ 2\n                case '.' => res = res :+ 1\n \
    \           }\n        }\n        res", "        val characters = music_string.split(\"\
    \ \")\n        val mapper = Map(\"o\" -> 4l, \"o|\" -> 2l, \".|\" -> 1l)\n   \
    \     characters.map(mapper(_)).toList", "        // TODO: Implement parsing routine.\n\
    \        var counter = 0\n        val result : ListBuffer[Long] = new ListBuffer()\n\
    \        music_string.foreach {\n            x => {\n                if (x ==\
    \ 'o') {\n                    result += 4\n                } else if (x == '|')\
    \ {\n                    counter += 1\n                } else if (x == '.') {\n\
    \                    if (counter == 0) {\n                        result += 1\n\
    \                    } else {\n                        result += 2\n         \
    \               counter = 0\n                    }\n                } else if\
    \ (x == ' ') {\n                    if (counter != 0) {\n                    \
    \    result += 2\n                        counter = 0\n                    }\n\
    \                }\n            }\n        }\n        result.toList", '        return
    List()', "        var ret = new ListBuffer[Long]\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                ret += 4\n   \
    \             if (i + 1 < music_string.length && music_string(i + 1) == '|') i\
    \ += 1\n            }\n            else if (music_string(i) == '.') {\n      \
    \          ret += 1\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') i += 1\n            }\n        }\n        ret.toList", "      \
    \  (for (c <- music_string) yield c match {\n            case 'o' => 4\n     \
    \       case 'o' | '|' => 2\n            case '.' | '|' => 1\n        }).toList",
  '        music_string.split(" ").map(x => if (x == "o") 4l else if (x == "o|") 2l
    else 1l).toList', "        var parsed = music_string.split(\" \")\n        var\
    \ beats = new ListBuffer[Long]()\n        for (i <- 0 until parsed.length) {\n\
    \            if (parsed(i).charAt(0) == 'o') {\n                if (parsed(i).charAt(1)\
    \ == '|') {\n                    beats += 2l\n                } else {\n     \
    \               beats += 4l\n                }\n            } else {\n       \
    \         beats += 1l\n            }\n        }\n        return beats.toList",
  "      var res = List[Long]()\n      music_string.split(\" \").foreach(note => {\n\
    \        if (note.length == 1) res = 4 :: res\n        else res = 2 :: res\n \
    \     })\n      res.reverse", "      music_string.split(\" \").map(_ match {\n\
    \          case \"o\" => 4l\n          case \"o|\" => 2l\n          case \".|\"\
    \ => 1l\n          case _ => 0l\n      }).toList", '        return Nil', "   \
    \     val wholeNote = 4\n        val halfNote = 2\n        val quarterNote = 1\n\
    \        val noteValues = Map(\"o\" -> wholeNote, \"o|\" -> halfNote, \".|\" ->\
    \ quarterNote)\n        val notes = music_string.split(\" \")\n        for (note\
    \ <- notes) yield noteValues(note)", '        music_string.split(" ").map(x =>
    if (x == "o") 4 else if (x == "o|") 2 else 1).toList', "        val beats = music_string.split(\"\
    \\\\s+\").map(_.length.toLong)\n        beats.toList", "        val mapping =\
    \ Map('o' -> 4, '.' -> 1)\n        music_string.split(\"\\\\s+\").toList.map(x\
    \ => mapping(x(0)) * (if (x.length == 1) 1 else 2))", "        val beats = ListBuffer[Long]()\n\
    \        for (token <- music_string.split(\" \")) {\n            if (token ==\
    \ \"o\") beats += 4\n            else if (token == \"o|\") beats += 2\n      \
    \      else if (token == \".|\") beats += 1\n        }\n        beats.toList",
  "        // BEGIN_SOLUTION\n        val notes = music_string.toCharArray.map(c =>\n\
    \            c match {\n                case 'o' => 4\n                case '|'\
    \ => 0\n                case '.' => 1\n                case _ => 0\n         \
    \   }\n        )\n        val result = new ListBuffer[Long]\n        var prev\
    \ = 0\n        for (n <- notes) {\n            if (n != 0) {\n               \
    \ result += n - prev\n                prev = n\n            }\n        }\n   \
    \     result.toList\n        // END_SOLUTION", "        val beats = new ArrayBuffer[Long]\n\
    \        for (note <- music_string.split(\" \")) beats += note match {\n     \
    \       case \"o\" => 4\n            case \"o|\" => 2\n            case \".|\"\
    \ => 1\n        }\n        beats.toList", "      val notes = music_string.split(\"\
    \ \").toList.map(note => note match {\n        case \"o\" => 4\n        case \"\
    o|\" => 2\n        case \".|\" => 1\n      })\n      notes", "\t\tmusic_string.split(\"\
    \ \").map(x => if (x == \"o\") 4l else if (x == \"o|\") 2l else 1l).toList", '        music_string.split("
    ").map(x => if (x == "o") 4l else if (x == "o|") 2l else 1l).toList', "      \
    \  val list_of_notes = List((\"o\", 4), (\"o|\", 2), (\".|\", 1))\n        val\
    \ whole_length = music_string.length\n        val list_of_chars = music_string.toList\n\
    \        var index = 0\n        var result = List[Long]()\n        while (index\
    \ < whole_length) {\n            for (i <- 0 to list_of_notes.length - 1) {\n\
    \                val note = list_of_notes(i)\n                val note_chars =\
    \ note._1.toList\n                val note_length = note_chars.length\n      \
    \          if (note_length <= whole_length - index) {\n                    var\
    \ valid = true\n                    for (j <- 0 to note_length - 1) {\n      \
    \                  if (note_chars(j) != list_of_chars(index + j)) {\n        \
    \                    valid = false\n                        }\n              \
    \      }\n                    if (valid) {\n                        result = result\
    \ :+ note._2\n                        index += note_length\n                 \
    \   }\n                }\n            }\n        }\n        result", "       \
    \ return ((for (i <- music_string.split(\" \")) yield \n            i match {\n\
    \                case \"o\" => 4l\n                case \"o|\" => 2l\n       \
    \         case \".|\" => 1l\n            }).toList)", "        music_string.toList.map(x\
    \ => x match {\n\t\t\tcase 'o' => 4\n\t\t\tcase 'o' => 2\n\t\t\tcase '.' => 1\n\
    \t\t}).toList", "        // Write your code here.\n        return List[Long]()",
  "        var notes = new scala.collection.mutable.ListBuffer[Long]()\n        var\
    \ note_value = 0l\n        var last_note = 0l\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i > 0 && music_string(i\
    \ - 1) == ' ') {\n                    note_value = 4l\n                } else\
    \ {\n                    if (note_value == 4l) {\n                        notes\
    \ += note_value\n                        note_value = 0l\n                   \
    \ }\n                    note_value += 4l\n                }\n            } else\
    \ if (music_string(i) == '|') {\n                if (note_value == 0l) {\n   \
    \                 note_value = 2l\n                } else {\n                \
    \    notes += note_value\n                    note_value = 0l\n              \
    \  }\n            } else if (music_string(i) == '.') {\n                if (note_value\
    \ == 0l) {\n                    note_value = 1l\n                } else {\n  \
    \                  notes += note_value\n                    note_value = 0l\n\
    \                }\n            }\n        }\n        if (note_value != 0l) {\n\
    \            notes += note_value\n        }\n        notes.toList", "        val\
    \ beat_map = Map(\"o\" -> 4, \"o|\" -> 2, \".|\" -> 1)\n        music_string.split(\"\
    \ \").toList.map(beat_map(_))", "        val notes = \"o|.|\"\n        return\
    \ music_string.replaceAll(\"\\\\s\", \"\").zipWithIndex.map {\n            case\
    \ (x, i) =>\n                val beats = if (x == 'o') 4 else 1\n            \
    \    notes.indexOf(x) match {\n                    case -1 => beats\n        \
    \            case _ => beats / (pow(2, notes.indexOf(x)).toInt)\n            \
    \    }\n        }.toList", "    \tvar result = List[Long]()\n    \tvar index =\
    \ 0\n    \twhile (index < music_string.length) {\n    \t\tvar c = music_string(index)\n\
    \    \t\tvar beat = 1l\n    \t\tif (c == 'o') {\n    \t\t\tbeat = 4l\n    \t\t\
    \tindex += 1\n    \t\t} else if (c == '.') {\n    \t\t\tbeat = 1l\n    \t\t\t\
    index += 2\n    \t\t}\n    \t\tresult = result :+ beat\n    \t}\n    \tresult",
  '        return null', "        // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o\
    \ o\"))\n        // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n       \
    \ val music = music_string.split(\" \")\n        var output = new ListBuffer[Long]()\n\
    \        for (i <- 0 until music.length) {\n            if (music(i) == \"o\"\
    ) {\n                output += 4\n            } else if (music(i) == \"o|\") {\n\
    \                output += 2\n            } else if (music(i) == \".|\") {\n \
    \               output += 1\n            }\n        }\n        return output.toList",
  "        val conversion_map = Map(\"o\" -> 4, \"o|\" -> 2, \".|\" -> 1)\n      \
    \  music_string.split(\" \").toList.map(x => conversion_map(x))", "        var\
    \ result : List[Long] = List()\n        var notes : Array[String] = music_string.split(\"\
    \ \")\n        for (i <- 0 until notes.length) {\n            if (notes(i).startsWith(\"\
    o\")) result = result :+ 4l\n            else if (notes(i).startsWith(\"o|\"))\
    \ result = result :+ 2l\n            else if (notes(i).startsWith(\".|\")) result\
    \ = result :+ 1l\n        }\n        return result", "        // This code will\
    \ be very similar to what you did in the previous problem set except you will\
    \ have to\n        // call functions from previous problem set to help you out.\
    \ Your task is to fill this in.\n        return (null)", "      // TODO: implement\
    \ this function\n      return List(0L)", "        // This is a stub, so that it\
    \ compiles.\n        // Change this to return your results.\n        return List()",
  "        // Write your solution here\n        var output = List[Long]()\n      \
    \  for (i <- music_string.split(\" \")) {\n            i match {\n           \
    \     case \"o\" => output = output :+ 4\n                case \"o|\" => output\
    \ = output :+ 2\n                case \".|\" => output = output :+ 1\n       \
    \     }\n        }\n        output", "        val music_arr = music_string.split(\"\
    \ \").toList\n        var beat_list = new ListBuffer[Long]()\n        for (item\
    \ <- music_arr) {\n            beat_list += item.count(_ == '|') + 1\n       \
    \ }\n        beat_list.toList", "        val str_list = music_string.split(\"\
    \ \")\n        var output = List[Long]()\n        str_list.foreach(str => {\n\
    \            val beats = str match {\n                case \"o\" => 4\n      \
    \          case \"o|\" => 2\n                case \".|\" => 1\n            }\n\
    \            output ::= beats\n        })\n        output.reverse", "        //\
    \ Fill in your code here to return the correct answer\n        // Replace the\
    \ following code\n        var flag = 0\n        var temp = 0\n        var m :\
    \ List[Long] = Nil\n        for (i <- 0 to music_string.length() - 1) {\n    \
    \        if (music_string.charAt(i) == 'o') {\n                if (music_string.charAt(i\
    \ + 1) == '|') {\n                    if (music_string.charAt(i + 2) == ' ') {\n\
    \                        m ::= 2\n                        flag = 1\n         \
    \           }\n                    else {\n                        m ::= 4\n \
    \                       flag = 1\n                    }\n                }\n \
    \               else {\n                    m ::= 4\n                    flag\
    \ = 1\n                }\n            }\n            else if (music_string.charAt(i)\
    \ == '.') {\n                if (music_string.charAt(i + 1) == '|') {\n      \
    \              if (music_string.charAt(i + 2) == ' ') {\n                    \
    \    m ::= 1\n                        flag = 1\n                    }\n      \
    \              else {\n                        m ::= 4\n                     \
    \   flag = 1\n                    }\n                }\n                else {\n\
    \                    m ::= 4\n                    flag = 1\n                }\n\
    \            }\n            else if (music_string.charAt(i) == ' ') {\n      \
    \          if (flag == 1) {\n                    flag = 0\n                }\n\
    \                else {\n                    temp += 1\n                }\n  \
    \          }\n        }\n        m.reverse", "        // Write your code here\n\
    \        music_string.split(\" \").map(_ match {\n            case \"o\" => 4\n\
    \            case \"o|\" => 2\n            case \".|\" => 1\n        }).toList",
  "        // IMPLEMENT ME\n        return List()", "        val beats = ListBuffer[Long]()\n\
    \        val music_notes = music_string.split(\" \")\n        for (note <- music_notes)\
    \ {\n            if (note.equals(\"o\")) beats += 4\n            else if (note.equals(\"\
    o|\")) beats += 2\n            else if (note.equals(\".|\")) beats += 1\n    \
    \    }\n        beats.toList", "        var result = List[Long]()\n        for\
    \ (s <- music_string.split(\" \")) {\n            s match {\n                case\
    \ \"o\" => result :+= 4\n                case \"o|\" => result :+= 2\n       \
    \         case \".|\" => result :+= 1\n            }\n        }\n        return\
    \ result", "        val notes : List[Char] = music_string.toList\n        notes.filter(note\
    \ => note != ' ').map(note => {\n            if (note == 'o') {\n            \
    \    4\n            } else if (note == '|') {\n                2\n           \
    \ } else {\n                1\n            }\n        }).toList", "        var\
    \ list : List[Long] = List()\n        music_string.split(\" \").foreach(note =>\
    \ {\n            note match {\n                case \"o\" => list = list :+ 4\n\
    \                case \"o|\" => list = list :+ 2\n                case \".|\"\
    \ => list = list :+ 1\n            }\n        })\n        list", "        var\
    \ notes : List[Long] = List()\n        for (i <- 0 until music_string.length -\
    \ 1) {\n            if (music_string(i) == 'o') {\n                if (music_string(i\
    \ + 1) == ' ') {\n                    notes = notes :+ 4\n                } else\
    \ {\n                    notes = notes :+ 1\n                }\n            }\
    \ else if (music_string(i) == '.') {\n                notes = notes :+ 1\n   \
    \         }\n        }\n        return notes", "        val parsed = music_string.split(\"\
    \ \").map(_.replaceAll(\"o|\", \"\")).map(_.replaceAll(\"\\\\.\", \"\")).map(_.replaceAll(\"\
    o\", \"4\")).map(_.toLong)\n        return parsed.toList", '      music_string.replaceAll("\\s+",
    "").replaceAll("o", "4").replaceAll("o|", "2").replaceAll("\\.|", "1").split("").filter(!_.isEmpty).map(x
    => x.toLong).toList', "        // use regex match to do this.\n        import\
    \ scala.util.matching.Regex\n        val Note = new Regex(\"\\\\w[|]?\")\n   \
    \     // .group(0) is the matched string\n        val note_list = Note.findAllIn(music_string).toList.map(x\
    \ => x.group(0))\n        // get the corresponding notes.\n        val beats_list\
    \ = note_list.map(note => {\n            if (note == \"o\") 4\n            else\
    \ if (note == \"o|\") 2\n            else if (note == \".|\") 1\n            else\
    \ -1\n        })\n        // return the beats.\n        beats_list", "      music_string.split(\"\
    \\\\s+\").map(x => x match {\n        case \"o\" => 4l\n        case \"o|\" =>\
    \ 2l\n        case \".|\" => 1l\n      }).toList", "        val pattern = \"[o.|]+\"\
    .r\n        var t = List[Long]()\n        for (s <- pattern.findAllIn(music_string))\
    \ {\n            if (s == \"o\") t = 4 :: t\n            else if (s == \"o|\"\
    ) t = 2 :: t\n            else if (s == \".|\") t = 1 :: t\n            else {\n\
    \                var b : Long = 0\n                for (c <- s) {\n          \
    \          if (c == 'o') b += 4\n                    else if (c == 'o' || c ==\
    \ '|') b += 2\n                    else if (c == '.' || c == '|') b += 1\n   \
    \             }\n                t = b :: t\n            }\n        }\n      \
    \  t.reverse", "\t\tval notes = (music_string zip music_string.tail).filter(x\
    \ => x._1 != ' ' && x._2 != ' ').map(_._1).mkString\n\t\tnotes.map(n => n match\
    \ {\n\t\t\tcase 'o' => 4\n\t\t\tcase 'o' => 2\n\t\t\tcase '.' => 1\n\t\t}).toList",
  "        var list = ArrayBuffer[Long]()\n        for (s <- music_string.split(\"\
    \ \")) {\n            s match {\n                case \"o\" => list += 4l\n  \
    \              case \"o|\" => list += 2l\n                case \".|\" => list\
    \ += 1l\n            }\n        }\n        list.toList", "    \tval Tuple2(head,\
    \ tail) = music_string.span(_ != ' ')\n    \tif (head.length == 0) {\n    \t\t\
    List()\n    \t} else {\n    \t\thead match {\n    \t\t\tcase \"o\" => 4l.toLong\
    \ :: parseMusic(tail.trim)\n    \t\t\tcase \"o|\" => 2l.toLong :: parseMusic(tail.trim)\n\
    \    \t\t\tcase \".|\" => 1l.toLong :: parseMusic(tail.trim)\n    \t\t}\n    \t\
    }", '        // Your code here', "        // >>> parseMusic((\"o o| .| o| o| .|\
    \ .| .| .| o o\"))\n        // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n\
    \        music_string.split(\" \").map(_ match {\n            case \"o\" => 4l\n\
    \            case \"o|\" => 2l\n            case \".|\" => 1l\n        }).toList",
  "        var note_time_list = List[Long]()\n        for (note <- music_string.split(\"\
    \ \")) {\n            if (note == \"o\") {\n                note_time_list = note_time_list\
    \ :+ 4l\n            } else if (note == \"o|\") {\n                note_time_list\
    \ = note_time_list :+ 2l\n            } else if (note == \".|\") {\n         \
    \       note_time_list = note_time_list :+ 1l\n            }\n        }\n    \
    \    return note_time_list", "    \t// Your code here\n    \tval whole = 4\n \
    \   \tval half = 2\n    \tval quarter = 1\n    \tval list = ListBuffer[Long]()\n\
    \    \tfor (char <- music_string) {\n    \t\tlist += char match {\n    \t\t\t\
    case 'o' => whole\n    \t\t\tcase '|' => quarter\n    \t\t\tcase _ => half\n \
    \   \t\t}\n    \t}\n    \tlist.toList", "        // for (count <- 0 to music_string.length-1)\n\
    \        //     print(music_string(count))\n        var notes = music_string.split(\"\
    \ \")\n        var array = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note == \"o\")\n                array += 4\n            else\
    \ if (note == \"o|\")\n                array += 2\n            else if (note ==\
    \ \".|\")\n                array += 1\n        }\n        return array.toList",
  "\t\tvar arr = new ArrayBuffer[Long]()\n\t\tfor (i <- 0 until music_string.length)\
    \ {\n\t\t\tif (music_string(i) == 'o') {\n\t\t\t\tarr += 4\n\t\t\t} else if (music_string(i)\
    \ == '|') {\n\t\t\t\tarr += 1\n\t\t\t}\n\t\t}\n\t\treturn arr.toList", "     \
    \   val l = music_string.split(\" \").toList\n        val beats = ListBuffer[Long]()\n\
    \        for (i <- l) {\n            if (i == \"o\") beats += 4\n            else\
    \ if (i == \"o|\") beats += 2\n            else if (i == \".|\") beats += 1\n\
    \        }\n        beats.toList", "        val str = music_string.trim\n    \
    \    var beats = new ListBuffer[Long]\n        var beat = 0l\n        var last_beat\
    \ = -1l\n        while (beat < str.length) {\n            if (str(beat) == 'o')\
    \ {\n                beats += (beat - last_beat)\n                last_beat =\
    \ beat\n                beat += 4\n            } else if (str(beat) == '.') {\n\
    \                beats += (beat - last_beat)\n                last_beat = beat\n\
    \                beat += 2\n            } else if (str(beat) == '|') {\n     \
    \           beat += 1\n            } else if (str(beat) == ' ') {\n          \
    \      beat += 1\n            } else {\n                throw new Exception(\"\
    Invalid character \" + str(beat))\n            }\n        }\n        beats.toList",
  "    \t// fill in implementation here\n    \tnull", "    def f(music_string : String,\
    \ acc : List[Long]) : List[Long] = music_string match {\n            case \"\"\
    \ => acc\n            case _ =>\n                val (note, rest) = music_string.splitAt(music_string.indexOf('\
    \ '))\n                f(rest.tail, acc ++ List(note.length match {\n        \
    \            case 1 => 1\n                    case 2 => note.charAt(1) match {\n\
    \                        case '|' => 2\n                        case _ => 4\n\
    \                    }\n                    case 3 => note.charAt(2) match {\n\
    \                        case '|' => 1\n                        case _ => 4\n\
    \                    }\n                }))\n        }\n        f(music_string,\
    \ List[Long]())", "        // Implement your code here\n        List(1)", "  \
    \      val obj = music_string.split(\"\\\\s\").map(x => x match {\n          \
    \  case \"o\" => 4\n            case \"o|\" => 2\n            case \".|\" => 1\n\
    \        }).toList\n        obj", "        val notes = music_string.split(\" \"\
    ).map(_.stripSuffix(\"|\"))\n        var music = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note == \"o\") {\n                music +=\
    \ 4\n            } else if (note == \"o\") {\n                music += 2\n   \
    \         } else {\n                music += 1\n            }\n        }\n   \
    \     music.toList", '        return null;', "        val music_list = music_string.split(\"\
    \ \").toList\n        for (i <- 0 until music_list.length) {\n            if (music_list(i)\
    \ == \"o\") {\n                music_list(i) = \"4\"\n            } else if (music_list(i)\
    \ == \"o|\") {\n                music_list(i) = \"2\"\n            } else if (music_list(i)\
    \ == \".|\") {\n                music_list(i) = \"1\"\n            }\n       \
    \ }\n        return music_list.map(s => s.toLong)", "\t\tList(4l,2l,1l,2l,2l,1l,1l,1l,1l,4l,4l)",
  "        val result = ListBuffer[Long]()\n        var current_string = \"\"\n  \
    \      for (c <- music_string) {\n            if (c == ' ') {\n              \
    \  if (current_string == \"o\") result += 4\n                else if (current_string\
    \ == \"o|\") result += 2\n                else if (current_string == \".|\") result\
    \ += 1\n                current_string = \"\"\n            } else current_string\
    \ += c\n        }\n        if (current_string == \"o\") result += 4\n        else\
    \ if (current_string == \"o|\") result += 2\n        else if (current_string ==\
    \ \".|\") result += 1\n        result.toList", '    ???', '        music_string.split("
    ").map(s => if (s == "o") 4 else if (s == "o|") 2 else 1).toList', "        var\
    \ result = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = result :+ 2l\n\
    \                    i += 2\n                } else {\n                    result\
    \ = result :+ 4l\n                    i += 1\n                }\n            }\
    \ else {\n                result = result :+ 1l\n                i += 2\n    \
    \        }\n        }\n        result", "        // Fill in the code here\n  \
    \      return List()", "        val length = music_string.length\n        var\
    \ music_list : List[Long] = List()\n        var j = 0\n        while (j < length)\
    \ {\n            var i = j\n            while (i < length && music_string(i) !=\
    \ ' ') {\n                i += 1\n            }\n            val note = music_string.substring(j,\
    \ i)\n            if (note == \"o\") {\n                music_list = music_list\
    \ :+ 4\n            } else if (note == \"o|\") {\n                music_list =\
    \ music_list :+ 2\n            } else if (note == \".|\") {\n                music_list\
    \ = music_list :+ 1\n            }\n            j = i + 1\n        }\n       \
    \ music_list", "    \tval ar = new ArrayBuffer[Long]\n    \tvar isEighth = false\n\
    \    \tfor (ch <- music_string) {\n    \t\tif (ch == ' ') continue\n    \t\telse\
    \ if (ch == 'o') {\n    \t\t\tif (isEighth) ar += (1l.toLong)\n    \t\t\telse\
    \ ar += (4l.toLong)\n    \t\t}\n    \t\telse if (ch == '.') {\n    \t\t\tif (isEighth)\
    \ ar += (1l.toLong)\n    \t\t\telse {\n    \t\t\t\tar += (1l.toLong)\n    \t\t\
    \t\tisEighth = true\n    \t\t\t}\n    \t\t}\n    \t\telse if (ch == '|') {\n \
    \   \t\t\tif (isEighth) {\n    \t\t\t\tar += (1l.toLong)\n    \t\t\t\tisEighth\
    \ = false\n    \t\t\t}\n    \t\t\telse ar += (2l.toLong)\n    \t\t}\n    \t}\n\
    \    \tar.toList", "        val notes = music_string.split(\" \").toList\n   \
    \     notes.map(note => {\n            if (note == \"o\") { 4 }\n            else\
    \ if (note == \"o|\") { 2 }\n            else if (note == \".|\") { 1 }\n    \
    \        else { 0 }\n        })", "        val whole = 'o'\n        val half =\
    \ 'o' | '|'\n        val quarter = '.' | '|'\n        val beats = 4\n        val\
    \ halfbeats = 2\n        val quarterbeats = 1\n        val notes = List(whole,\
    \ half, quarter)\n        val music = music_string.toList\n        val notes_list\
    \ = music.zipWithIndex.filter(e => notes.contains(e._1)).map(e => e._2)\n    \
    \    // Calculate the length of each block of notes\n        var count = 0\n \
    \       val lengths = notes_list.zipWithIndex.map(e => {\n            if (e._2\
    \ == 0) {\n                count = 1\n                count\n            } else\
    \ {\n                count = e._1 - notes_list(e._2 - 1)\n                count\n\
    \            }\n        })\n        val lengths_list = ListBuffer[Long]()\n  \
    \      var remainder = 0l\n        for (i <- 0 until lengths.length) {\n     \
    \       if (i == 0) {\n                lengths_list += lengths(i) + remainder\n\
    \                if (lengths(i) == 2) {\n                    remainder = halfbeats\n\
    \                } else if (lengths(i) == 3) {\n                    remainder\
    \ = quarterbeats\n                } else {\n                    remainder = 0\n\
    \                }\n            } else {\n                lengths_list += lengths(i)\
    \ + remainder\n                if (lengths(i) == 2) {\n                    remainder\
    \ = halfbeats\n                } else if (lengths(i) == 3) {\n               \
    \     remainder = quarterbeats\n                } else {\n                   \
    \ remainder = 0\n                }\n            }\n        }\n        val beats_list\
    \ = lengths_list.map(e => {\n            if (e == 1) {\n                quarterbeats\n\
    \            } else if (e == 2) {\n                halfbeats\n            } else\
    \ {\n                beats\n            }\n        })\n        beats_list.toList",
  '        List()', '        return List[Long]()', "        val notes = music_string.split(\"\
    \\\\s+\")\n        val res = new ListBuffer[Long]()\n        for (note <- notes)\
    \ {\n            res += note match {\n                case \"o\" => 4\n      \
    \          case \"o|\" => 2\n                case \".|\" => 1\n            }\n\
    \        }\n        res.toList", "        music_string.split(\" \").map(_ match\
    \ {\n            case \"o\" => 4\n            case \"o|\" => 2\n            case\
    \ \".|\" => 1\n        }).toList", "        var beats = List[Long]()\n       \
    \ var i = 0\n        while (i < music_string.length) {\n            music_string(i)\
    \ match {\n                case 'o' => beats = 4l.toLong :: beats\n          \
    \      case '.' => beats = 1l.toLong :: beats\n                case '|' =>\n \
    \               case ' ' => \n                case _ => return List(-1l.toLong)\n\
    \            }\n            i += 1\n        }\n        beats.reverse", '      //
    TODO: implement this function', "        var beats = List[Long]()\n        var\
    \ note_name = \"\"\n        for (char <- music_string) {\n            if (char\
    \ == 'o') {\n                note_name += \"o\"\n            } else if (char ==\
    \ '|') {\n                note_name += \"|\"\n            } else if (char == '.')\
    \ {\n                note_name += \".\"\n            } else if (char == ' ') {\n\
    \                if (note_name == \"o|\") {\n                    beats = beats\
    \ :+ 2\n                } else if (note_name == \"o\") {\n                   \
    \ beats = beats :+ 4\n                } else if (note_name == \".|\") {\n    \
    \                beats = beats :+ 1\n                }\n                note_name\
    \ = \"\"\n            }\n        }\n        beats", "        var result = new\
    \ ListBuffer[Long]()\n        var note_lengths = Map('o' -> 4, '.' -> 1)\n   \
    \     for (c <- music_string) {\n            if (c == '|') result(result.length\
    \ - 1) += 1\n            else if (c == ' ') result += 0\n            else result\
    \ += note_lengths(c)\n        }\n        result.toList", "        var tmp1 = music_string.replaceAll(\"\
    o o\", \"0 0\")\n        var tmp2 = tmp1.replaceAll(\"o|\", \"1\")\n        var\
    \ tmp3 = tmp2.replaceAll(\"\\\\.\\\\|\", \"2\")\n        var tmp4 = tmp3.replaceAll(\"\
    \ \", \"\")\n        var tmp5 = tmp4.replaceAll(\"\\\\|\", \"\")\n        tmp5.map(_.asDigit).toList",
  "        var result = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            var j = i\n            while (j < music_string.length && music_string(j)\
    \ != ' ') {\n                j += 1\n            }\n            val note = music_string.substring(i,\
    \ j)\n            val beats = parseNote(note)\n            result = result :+\
    \ beats\n            i = j + 1\n        }\n        result", "      var g = music_string.split(\"\
    \ \")\n      var list_of_beats = List[Long]()\n      for (i <- 0 to g.length -\
    \ 1) {\n        g(i) match {\n          case \"o\" => list_of_beats = list_of_beats\
    \ :+ 4l\n          case \"o|\" => list_of_beats = list_of_beats :+ 2l\n      \
    \    case \".|\" => list_of_beats = list_of_beats :+ 1l\n        }\n      }\n\
    \      list_of_beats", "        val beats = new ArrayBuffer[Long]()\n        for\
    \ (c <- music_string) {\n            c match {\n                case 'o' => beats\
    \ += 4\n                case '|' => beats += 2\n                case '.' => beats\
    \ += 1\n                case ' ' => \n            }\n        }\n        beats.toList",
  "        // Write your solution here.\n        return null", "        // Add implementation\
    \ here\n        return null", "        var ret : List[Long] = List()\n       \
    \ var curr_note = 0\n        while (curr_note < music_string.length) {\n     \
    \       if (music_string(curr_note) == 'o') {\n                if (curr_note +\
    \ 1 == music_string.length || music_string(curr_note + 1) == ' ') {\n        \
    \            ret = ret :+ 4\n                    curr_note += 1\n            \
    \    } else {\n                    ret = ret :+ 2\n                    curr_note\
    \ += 2\n                }\n            } else {\n                ret = ret :+\
    \ 1\n                curr_note += 2\n            }\n        }\n        return\
    \ ret", "        // Implememt your solution here\n        List()", "        val\
    \ notes = music_string.split(\" \")\n        notes.map(note => note match {\n\
    \            case \"o\" => 4l\n            case \"o|\" => 2l\n            case\
    \ \".|\" => 1l\n        }).toList", "        val whole_note = \"o\"\n        val\
    \ half_note = \"o|\"\n        val quarter_note = \".|\"\n        val pattern =\
    \ \"[o|\\\\.]\".r\n        val matches = pattern.findAllIn(music_string)\n   \
    \     val result = ListBuffer[Long]()\n        while (matches.hasNext) {\n   \
    \         val ch = matches.next\n            ch match {\n                case\
    \ `whole_note` => result += 4\n                case `half_note` => result += 2\n\
    \                case `quarter_note` => result += 1\n            }\n        }\n\
    \        result.toList", "        // Because of the nature of the problem you\
    \ can use any method / function available in scala.\n        val m = \".o|\"\n\
    \        val lst = music_string.split(\" \").toList\n        val res = ListBuffer[Long]()\n\
    \        for (i <- lst) {\n            if (i == \"o\") res += 4\n            else\
    \ res += 1\n        }\n        res.toList", "        val input_list = music_string.split(\"\
    \ \").toList\n        val answer = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (elem <- input_list) {\n            elem match {\n              \
    \  case \"o\" => answer += 4\n                case \"o|\" => answer += 2\n   \
    \             case \".|\" => answer += 1\n            }\n        }\n        answer.toList",
  "        var ret = List[Long]()\n        var charList = music_string.toList\n  \
    \      while (charList.length > 0) {\n            var currentChar = charList.head\n\
    \            if (currentChar == 'o') {\n                ret = ret :+ 4l\n    \
    \            charList = charList.tail\n            } else if (currentChar == '.')\
    \ {\n                ret = ret :+ 1l\n                charList = charList.tail\n\
    \            } else if (currentChar == 'o' && charList(1) == '|') {\n        \
    \        ret = ret :+ 2l\n                charList = charList.drop(2)\n      \
    \      } else if (currentChar == '.' && charList(1) == '|') {\n              \
    \  ret = ret :+ 1l\n                charList = charList.drop(2)\n            }\n\
    \        }\n        ret", "        var results : List[Long] = List[Long]()\n \
    \       var buffer : String = \"\"\n        for (x <- music_string) {\n      \
    \      if (x == ' ') {\n                if (buffer.length > 0) {\n           \
    \         results = results :+ (buffer.length)\n                    buffer = \"\
    \"\n                }\n            } else {\n                buffer = buffer +\
    \ x\n            }\n        }\n        results = results :+ (buffer.length)\n\
    \        return results", "        def getNextString(music_string : String) :\
    \ String = {\n            if (music_string.length == 0) return \"\"\n        \
    \    else if (music_string.charAt(0) == 'o') return \"o\"\n            else if\
    \ (music_string.charAt(0) == '.') return \".|\"\n            else {\n        \
    \        if (music_string.charAt(1) == '|') return \"o|\"\n                else\
    \ if (music_string.charAt(1) == ' ') return \".|\"\n                else return\
    \ \"\"\n            }\n        }\n        var result = List[Long]()\n        var\
    \ note = getNextString(music_string)\n        while (note != \"\") {\n       \
    \     if (note == \"o\") result = result :+ 4\n            else if (note == \"\
    o|\") result = result :+ 2\n            else if (note == \".|\") result = result\
    \ :+ 1\n            music_string = music_string.substring(note.length + 1)\n \
    \           note = getNextString(music_string)\n        }\n        return result",
  "        val splits = music_string.split(\" \")\n        val res = new ArrayBuffer[Long]()\n\
    \        for (i <- 0 until splits.length) {\n            splits(i) match {\n \
    \               case \"o\" => res += 4l\n                case \"o|\" => res +=\
    \ 2l\n                case \".|\" => res += 1l\n            }\n        }\n   \
    \     res.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beat_count = ListBuffer[Long]()\n        for (note <- notes) {\n           \
    \ val length = note.length()\n            val beats = note(length - 1) match {\n\
    \                case 'o' => 4\n                case '|' => 2\n              \
    \  case '.' => 1\n            }\n            beat_count += beats\n        }\n\
    \        beat_count.toList", "        var list = new ListBuffer[Long]()\n    \
    \    for (c <- music_string.split(\" \")) {\n            if (c.length == 1) list\
    \ += 4\n            else if (c.length == 2) list += 2\n            else list +=\
    \ 1\n        }\n        list.toList", "      // For each character in the string,\n\
    \      // return the corresponding number\n      music_string.toList.map(x =>\
    \ x match {\n        case 'o' => 4\n        case 'o' => 2\n        case '.' =>\
    \ 1\n        case _ => 0\n      })", "        // You need to implement this function.\n\
    \        ???", "        def mysplit(s : String) : List[String] = {\n         \
    \   val head = s.takeWhile(c => c != '|')\n            val tail = s.dropWhile(c\
    \ => c != '|')\n            if (tail.length < 1) return List(head)\n         \
    \   return List(head) ++ mysplit(tail.tail)\n        }\n        val strs = mysplit(music_string)\n\
    \        var res = List[Long]()\n        for (str <- strs) {\n            if (str.length\
    \ == 0) res = res :+ 1\n            else if (str.length == 1) res = res :+ 4\n\
    \            else res = res :+ 2\n        }\n        return res", "        val\
    \ s = music_string.split(\"[\\\\s]\").toList\n        return s.map(x => if (x\
    \ == \"o\") 4 else if (x == \"o|\") 2 else 1)", "        // Implement parseMusic\
    \ function here\n        // Use provided code in comments as a starting point\
    \ for your solution.\n        // You should not modify code below if you need\
    \ to.\n        // >>> var music_string = \"o o| .| o| o| .| .| .| .| o o\"\n \
    \       // >>> music_string.length\n        // 20\n        // >>> music_string.charAt(0)\n\
    \        // \"o\"\n        // >>> music_string.charAt(2)\n        // \"o\"\n \
    \       // >>> music_string.charAt(3)\n        // \"|\"\n        // >>> music_string.charAt(4)\n\
    \        // \" \"\n        // >>> music_string.charAt(5)\n        // \".\"\n \
    \       // >>> music_string.charAt(6)\n        // \"|\"\n        // >>> music_string.charAt(19)\n\
    \        // \"o\"\n        var beats : List[Long] = List()\n        var i = 0\n\
    \        while (i < music_string.length()) {\n            if (music_string.charAt(i)\
    \ == 'o') {\n                if (i+1 < music_string.length() && music_string.charAt(i+1)\
    \ == '|') {\n                    beats = beats :+ 2\n                    i = i\
    \ + 2\n                } else {\n                    beats = beats :+ 4\n    \
    \                i = i + 1\n                }\n            } else {\n        \
    \        beats = beats :+ 1\n                i = i + 2\n            }\n      \
    \  }\n        return beats", "        music_string.split(\" \").map(_ match {\n\
    \            case \"o\" => 4l\n            case \"o|\" => 2l\n            case\
    \ \".|\" => 1l\n        }).toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = notes.map(note => {\n            if (note == \"o\"\
    )\n                4l\n            else if (note == \"o|\")\n                2l\n\
    \            else\n                1l\n        })\n        beats.toList", "  \
    \      var l : List[Long] = List[Long]()\n        for (s <- music_string.split(\"\
    \ \")) {\n            s match {\n                case \"o\" => l = l :+ 4l\n \
    \               case \"o|\" => l = l :+ 2l\n                case \".|\" => l =\
    \ l :+ 1l\n            }\n        }\n        return l", "        // Implementation\
    \ goes here...\n\t    def helper(ms : String, result : List[Long]) : List[Long]\
    \ = {\n\t        if (ms.length() == 0) result\n\t        else if (ms.substring(0,\
    \ 2) == \"o|\") helper(ms.substring(2), result :+ 2)\n\t        else if (ms.substring(0,\
    \ 2) == \".|\") helper(ms.substring(2), result :+ 1)\n\t        else if (ms.substring(0,\
    \ 1) == \"o\") helper(ms.substring(1), result :+ 4)\n\t        else helper(ms.substring(1),\
    \ result)\n\t    }\n\t    helper(music_string, List())", "        val notes =\
    \ music_string.split(\" \")\n        notes.toList.map(s => {\n            if (s\
    \ == \"o\") 4\n            else if (s == \"o|\") 2\n            else 1\n     \
    \   })", "        // Your code here.\n        return List()", "        var beats\
    \ = List[Long]()\n        val notes = music_string.split(\" \")\n        for (note\
    \ <- notes) {\n            if (note == \"o\") beats = beats :+ 4\n           \
    \ else if (note == \"o|\") beats = beats :+ 2\n            else if (note == \"\
    .|\") beats = beats :+ 1\n        }\n        beats", "        val sequences =\
    \ music_string.split(\" \")\n        for (sequence <- sequences) yield {\n   \
    \         val beats = sequence.replace(\"|\", \"\")\n            beats match {\n\
    \                case \"o\" => 4l\n                case \".|\" => 1l\n       \
    \         case \"o|\" => 2l\n            }\n        }", '        music_string.split("
    ").toList.map {_.length}', "        // Fill this in, you can call methods from\
    \ scala.math package\n        val beats = List[Long](4l, 2l, 1l)\n        return\
    \ music_string.split(\" \").map(note => if (note.indexOf(\"|\") > 0) beats(note.indexOf(\"\
    |\")) else beats(0)).toList", "        // Your code goes here.\n        val musicArray\
    \ = music_string.split(\" \")\n        for (i <- 0 until musicArray.length) {\n\
    \            if (musicArray(i) == \"o\") {\n                musicArray(i) = \"\
    4\"\n            } else if (musicArray(i) == \"o|\") {\n                musicArray(i)\
    \ = \"2\"\n            } else if (musicArray(i) == \".|\") {\n               \
    \ musicArray(i) = \"1\"\n            }\n        }\n        val music_int = musicArray.map(_.toLong)\n\
    \        music_int.toList", "        val beats = HashMap[Char, Long]('o' -> 4,\
    \ '|' -> 2, '.' -> 1)\n        var result = List[Long]()\n        var i = 0\n\
    \        while (i < music_string.length) {\n            result ::= beats(music_string(i))\n\
    \            i += 1\n        }\n        result.reverse", "      var list = music_string.split(\"\
    \ \").toList\n      var output_list = List[Long]()\n      for (s <- list) {\n\
    \        s match {\n          case \"o\" => output_list = output_list :+ 4\n \
    \         case \"o|\" => output_list = output_list :+ 2\n          case \".|\"\
    \ => output_list = output_list :+ 1\n        }\n      }\n      return output_list",
  '        return Nil;', '        ???', "        val sequence = music_string.split(\"\
    \\\\s+\").toList\n        // Complete with your code here\n        sequence.map(\n\
    \            {\n                case \"o\" => 4\n                case \"o|\" =>\
    \ 2\n                case \".|\" => 1\n            }\n        )", "        val\
    \ beat_regex = \"\"\"(o|o\\||\\.\\|)\"\"\".r\n        for (m <- beat_regex.findAllIn(music_string))\
    \ yield {\n            m match {\n                case \"o\" => 4\n          \
    \      case \"o|\" => 2\n                case \".|\" => 1\n            }\n   \
    \     }", "        def parseNote(s : String) : Long = {\n            if (s.equals(\"\
    o\")) 4l\n            else if (s.equals(\"o|\")) 2l\n            else if (s.equals(\"\
    .|\")) 1l\n            else -1l\n        }\n        val music_list = music_string.split(\"\
    \ \").toList\n        music_list.map(parseNote)", "        val map = new HashMap[Char,\
    \ Long]()\n        map.put('o', 4)\n        map.put('|', 2)\n        map.put('.',\
    \ 1)\n        val result = new ArrayBuffer[Long]()\n        var n = music_string.length()\n\
    \        var i = 0\n        while (i < n) {\n            if (music_string(i) ==\
    \ ' ') {\n                i += 1\n            } else {\n                var j\
    \ = i\n                while (j < n && music_string(j) != ' ') {\n           \
    \         j += 1\n                }\n                result += map(music_string(i))\n\
    \                i = j\n            }\n        }\n        result.toList", "  \
    \      val xs = new ListBuffer[Long]\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i < music_string.length\
    \ - 1 && music_string(i + 1) == '|') xs += 2\n                else xs += 4\n \
    \           }\n            else if (music_string(i) == '.') {\n              \
    \  if (i < music_string.length - 1 && music_string(i + 1) == '|') xs += 1\n  \
    \          }\n        }\n        xs.toList", "        val spaces = music_string.split(\"\
    \ \")\n        var result = List[Long]()\n        for (note <- spaces) {\n   \
    \         if (note.equals(\"o\")) {\n                result = result :+ 4l\n \
    \           } else if (note.equals(\"o|\")) {\n                result = result\
    \ :+ 2l\n            } else if (note.equals(\".|\")) {\n                result\
    \ = result :+ 1l\n            }\n        }\n        return result", "        val\
    \ v = ListBuffer[Long]()\n        for (i <- music_string.split(\" \")) {\n   \
    \         v += (i match {\n                case \"o\" => 4\n                case\
    \ \"o|\" => 2\n                case \".|\" => 1\n            })\n        }\n \
    \       v.toList", "        music_string.split(\" \").map {x =>\n            if\
    \ (x == \"o\")\n                4\n            else if (x == \"o|\")\n       \
    \         2\n            else\n                1\n        }.toList", "       \
    \ music_string.split(\" \").map(n => {\n            n match {\n              \
    \  case \"o\" => 4\n                case \"o|\" => 2\n                case \"\
    .|\" => 1\n            }\n        }).toList", "        music_string.split(\" \"\
    ).toList.map(x => x match {\n          case \"o\" => 4\n          case \"o|\"\
    \ => 2\n          case \".|\" => 1\n        })", "\t\t// Recursive\n\t\tdef f(i\
    \ : Int, str : String, acc : List[Long]) : List[Long] = {\n\t\t\tif (i >= str.length)\
    \ acc\n\t\t\telse {\n\t\t\t\tif (str(i) == 'o') {\n\t\t\t\t\tif (i + 1 < str.length\
    \ && str(i + 1) == '|') f(i + 2, str, 4l :: acc)\n\t\t\t\t\telse f(i + 1, str,\
    \ 4l :: acc)\n\t\t\t\t}\n\t\t\t\telse if (str(i) == '.') {\n\t\t\t\t\tif (i +\
    \ 1 < str.length && str(i + 1) == '|') f(i + 2, str, 1l :: acc)\n\t\t\t\t\telse\
    \ f(i + 1, str, 1l :: acc)\n\t\t\t\t}\n\t\t\t\telse f(i + 1, str, acc)\n\t\t\t\
    }\n\t\t}\n\t\t// Length of the string is n.\n\t\t// Time complexity is O(n).\n\
    \t\t// Space complexity is O(n).\n\t\tf(0, music_string, Nil).reverse", "    \
    \    return music_string.split(\" \").map(_ match {\n            case \"o\" =>\
    \ 4\n            case \"o|\" => 2\n            case \".|\" => 1\n        }).toList",
  "        var res : List[Long] = List()\n        for (ch <- music_string) {\n   \
    \         if (ch == '.') res = res :+ 1\n            else if (ch == 'o') res =\
    \ res :+ 4\n            else if (ch == '|') res = res :+ 2\n        }\n      \
    \  return res", "        // Should be returning something like this:\n       \
    \ // List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong)\n        return null",
  '        music_string.replaceAll("o", "4").replaceAll("o|", "2").replaceAll(".|",
    "1").split(" ").map(x => x.toLong).toList', "        // Your code here!\n    \
    \    music_string.split(\" \").map(value => value match {\n            case \"\
    o\" => 4\n            case \"o|\" => 2\n            case \".|\" => 1\n       \
    \ }).toList", "        var s = music_string.replaceAll(\"[A-Za-z]\", \"\")\n \
    \       var arr = s.split(\" \")\n        var res = new ListBuffer[Long]()\n \
    \       for (t <- arr) {\n            if (t.length == 2) res += 2\n          \
    \  else if (t.length == 3) res += 4\n            else res += 1\n        }\n  \
    \      res.toList", '        // Implement your solution here', "        val notes\
    \ = Array('o', 'o', '|', '.', '|', 'o', '|', 'o', '|', '.', '|', '.', '|', '.',\
    \ '|', '.', '|', 'o', 'o')\n        // My note string is: o o| .| o| o| .| .|\
    \ .| .| o o\n        // I need to parse it and make a list of how many beats each\
    \ note lasts\n        // .| is 1 beat\n        // o| is 2 beats\n        // o\
    \ is 4 beats\n        // I need to put a 4 on the whole note, 2 on the half note,\
    \ and 1 on the quater note\n        // This should get a list of (4, 2, 1, 2,\
    \ 2, 1, 1, 1, 1, 4, 4)\n        // You can use the legend array above\n      \
    \  var temp_list : List[Long] = List()\n        var counter = 0\n        var myList\
    \ : List[Long] = List()\n        while (counter < notes.length) {\n          \
    \  if (notes(counter) == 'o') {\n                if (notes(counter + 1) == ' ')\
    \ {\n                    myList = myList :+ 4\n                    counter +=\
    \ 1\n                }\n                else {\n                    myList = myList\
    \ :+ 2\n                    counter += 2\n                }\n            }\n \
    \           else {\n                myList = myList :+ 1\n                counter\
    \ += 2\n            }\n        }\n        myList", "        var list = List[Long]()\n\
    \        var remain = music_string\n        while(remain.length > 0) {\n     \
    \       if(remain.startsWith(\"o o\")) {\n                list = list :+ 4l\n\
    \                remain = remain.substring(3)\n            } else if(remain.startsWith(\"\
    o|\")) {\n                list = list :+ 2l\n                remain = remain.substring(2)\n\
    \            } else if(remain.startsWith(\".|\")) {\n                list = list\
    \ :+ 1l\n                remain = remain.substring(2)\n            } else {\n\
    \                throw new Exception(\"invalid string\")\n            }\n    \
    \    }\n        list", "        var beats = List[Long]()\n        var measure\
    \ = 0.0\n        for (char <- music_string) {\n            measure += char match\
    \ {\n                case 'o' => 4.0\n                case 'o' | '|' => 2.0\n\
    \                case '.' | '|' => 1.0\n                case ' ' => {\n      \
    \              beats = (measure + 0.0).toLong :: beats\n                    0.0\n\
    \                }\n            }\n        }\n        return beats.reverse", '        music_string.split("
    ").map(s => if (s == "o") 4l else if (s == "o|") 2l else 1l).toList', "    \t\
    // Your answer here", "        return music_string.split(\" \").map {note => note\
    \ match {\n            case \"o\" => 4l\n            case \"o|\" => 2l\n     \
    \       case \".|\" => 1l\n        }}.toList", '        List[Long]()', "     \
    \   var result = List[Long]()\n        val tokens = music_string.split(\" \")\n\
    \        for (token <- tokens) {\n            token match {\n                case\
    \ \"o\" => result = result :+ 4l\n                case \"o|\" => result = result\
    \ :+ 2l\n                case \".|\" => result = result :+ 1l\n            }\n\
    \        }\n        return result", "        // Write your code here\n       \
    \ var notes = music_string.split(\" \").toList\n        var res = List[Long]()\n\
    \        for (n <- notes) {\n          n match {\n            case \"o\" => res\
    \ = res :+ 4l\n            case \"o|\" => res = res :+ 2l\n            case \"\
    .|\" => res = res :+ 1l\n          }\n        }\n        res", "        val beats\
    \ = new ListBuffer[Long]()\n        val arr = music_string.toCharArray.map(x =>\
    \ x.toString)\n        var i = 0\n        while (i < arr.length) {\n         \
    \   if (arr(i) == \"o\") {\n                if (i + 1 < arr.length && arr(i +\
    \ 1) == \"|\") {\n                    beats += 2\n                    i += 2\n\
    \                } else {\n                    beats += 4\n                  \
    \  i += 1\n                }\n            } else {\n                beats += 1\n\
    \                i += 2\n            }\n        }\n        beats.toList", "  \
    \      var res : List[Long] = List()\n        val l = music_string.length\n  \
    \      var i = 0\n        while (i < l) {\n            if (music_string(i) ==\
    \ 'o') {\n                if (i + 1 < l && music_string(i + 1) == '|') {\n   \
    \                 res = res :+ 2\n                    i += 2\n               \
    \ } else {\n                    res = res :+ 4\n                    i += 1\n \
    \               }\n            } else {\n                res = res :+ 1\n    \
    \            i += 2\n            }\n        }\n        res", "        val beats_by_symbol\
    \ = Map[Char, Long]('o' -> 4, '|' -> 1, '.' -> 0)\n        val beat_lists = music_string.split(\"\
    \\\\s+\").toList.map(x => x.toList.map(c => beats_by_symbol(c)))\n        beat_lists.map(x\
    \ => x.reduceLeft(_ + _))", "        music_string.split(\" \").toList.map {\n\
    \            case \"o\" => 4l\n            case \"o|\" => 2l\n            case\
    \ \".|\" => 1l\n        }", "        var result = new ListBuffer[Long]()\n   \
    \     var data = music_string.replaceAll(\"\\\\s\", \"\")\n        for (c <- data)\
    \ {\n            if (c == 'o') result += 4\n            else if (c == '|') result(result.length\
    \ - 1) -= 1\n        }\n        result.toList", "        var beats = List[Long]()\n\
    \        val notes = music_string.split(\" \")\n        for (note <- notes) {\n\
    \            beats = beats :+ note.split(\"\\\\|\").length\n        }\n      \
    \  beats", "        val string_tokens = music_string.split(\" \").toList\n   \
    \     val note_lengths = new ListBuffer[Long]\n        for (token <- string_tokens)\
    \ {\n            token match {\n                case \"o\" => note_lengths +=\
    \ 4l\n                case \"o|\" => note_lengths += 2l\n                case\
    \ \".|\" => note_lengths += 1l\n            }\n        }\n        note_lengths.toList",
  "        music_string.toList.grouped(2).toList.map(x => x match {\n            case\
    \ List('o') => 4\n            case List('o', '|') => 2\n            case List('.',\
    \ '|') => 1\n            case _ => 0\n        })", '        null', '        return
    null', '        ???', "        music_string.split(\" \").map { x =>\n        \
    \    x match {\n                case \"o\" => 4\n                case \"o|\" =>\
    \ 2\n                case \".|\" => 1\n            }\n        }.toList", "   \
    \   val result = new ArrayBuffer[Long]()\n      var current_note = 0\n      for\
    \ (line <- music_string.split(\" \")) {\n        if (line.charAt(0) == 'o') {\n\
    \          if (line.length() == 1) {\n            result += 4\n          } else\
    \ {\n            result += 2\n          }\n        } else {\n          result\
    \ += 1\n        }\n      }\n      result.toList", "      music_string.split(\"\
    \ \").map(x => x match {\n        case \"o\" => 4\n        case \"o|\" => 2\n\
    \        case \".|\" => 1\n      }).toList", "        var result = List[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') result :+= 4\n            else if (music_string(i) == '|') result :+=\
    \ result.last\n            else if (music_string(i) == '.') result :+= 1\n   \
    \     }\n        return result", "        // Split string into words and convert\
    \ to list\n        val list : List[String] = music_string.split(\" \").toList\n\
    \        var new_list : List[Long] = Nil\n        for (word <- list) {\n     \
    \       if (word.endsWith(\"|\")) {\n                if (word.startsWith(\"o\"\
    )) {\n                    new_list = new_list :+ 2\n                } else {\n\
    \                    new_list = new_list :+ 1\n                }\n           \
    \ } else {\n                new_list = new_list :+ 4\n            }\n        }\n\
    \        new_list", "        val notes = music_string.split(\" \").map(note =>\
    \ {\n            if (note == \"o\") 4\n            else if (note == \"o|\") 2\n\
    \            else 1\n        }).toList\n        notes", "    \tvar beat_list =\
    \ List[Long]()\n    \tvar current_index = 0\n    \twhile (current_index < music_string.length)\
    \ {\n    \t\tif (music_string(current_index) == 'o') {\n    \t\t\tif (current_index\
    \ + 1 < music_string.length && music_string(current_index + 1) == '|') {\n   \
    \ \t\t\t\tbeat_list = beat_list :+ 2\n    \t\t\t\tcurrent_index += 2\n    \t\t\
    \t} else {\n    \t\t\t\tbeat_list = beat_list :+ 4\n    \t\t\t\tcurrent_index\
    \ += 1\n    \t\t\t}\n    \t\t} else {\n    \t\t\tbeat_list = beat_list :+ 1\n\
    \    \t\t\tcurrent_index += 2\n    \t\t}\n    \t}\n    \tbeat_list"]
stop_tokens:
- "\n    }\n"
