language: scala
name: HumanEval_97_multiply
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n      val x = abs(a) % 10\n      val y = abs(b)\
    \ % 10\n      x * y\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10 * b % 10)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu8p30f0m.scala:20)\n\tat Problem.main(tmpu8p30f0m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n      // Write your code here\n      def solve(a\
    \ : Long, b : Long) : Long = {\n        if (a < 10 || b < 10) a * b\n        else\
    \ {\n          val a_unit = a % 10\n          val b_unit = b % 10\n          solve(a_unit,\
    \ b_unit)\n        }\n      }\n      if (a < 0 && b < 0) solve(-a, -b)\n     \
    \ else if (a > 0 && b > 0) solve(a, b)\n      else if (a < 0 && b > 0) solve(-a,\
    \ b)\n      else solve(a, -b)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val al = a.toString.length\n        val\
    \ bl = b.toString.length\n        //println(al, bl)\n        val x = a.toString.slice(al\
    \ - 1, al).toLong\n        val y = b.toString.slice(bl - 1, bl).toLong\n     \
    \   return x * y\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val last_digits_of_a = a % 10\n      \
    \  val last_digits_of_b = b % 10\n        return last_digits_of_a * last_digits_of_b\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptijbtuh5.scala:25)\n\tat Problem.main(tmptijbtuh5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        def product(x : Long, y : Long) : Long\
    \ = (x * y) % 10\n        product(abs(a), abs(b))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz_b8pzoe.scala:21)\n\tat Problem.main(tmpz_b8pzoe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val aUnit = a % 10\n        val bUnit\
    \ = b % 10\n        return aUnit * bUnit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp055snqhe.scala:25)\n\tat Problem.main(tmp055snqhe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val aa = if (a > 0) a % 10 else abs(a)\
    \ % 10\n        val bb = if (b > 0) b % 10 else abs(b) % 10\n        aa * bb\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val a2 = a.abs\n        val b2 = b.abs\n\
    \        (a2 % 10) * (b2 % 10)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // Write your code here\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpennqecxn.scala:16:46\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mmultiply\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    Unit\n\
    \e[31m   |\e[0m                                              Required: Long\n\e\
    [31m17 |\e[0m        \e[34m// Write your code here\e[0m\n\e[31m18 |\e[0m    }\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        ((abs(a) % 10) * (abs(b) % 10)) % 10\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp959uu9ol.scala:20)\n\tat Problem.main(tmp959uu9ol.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val x = a.abs % 10\n        val y = b.abs\
    \ % 10\n        x * y\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (abs(a) % 10) * (abs(b) % 10)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        ((a % 10) * (b % 10))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphcoeznjk.scala:23)\n\tat Problem.main(tmphcoeznjk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var aDigit = a % 10\n        var bDigit\
    \ = b % 10\n        return aDigit * bDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaot25_du.scala:25)\n\tat Problem.main(tmpaot25_du.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (abs(a) % 10) * (abs(b) % 10)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // Write your code here\n        a % 10\
    \ * b % 10\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzxp_v03c.scala:21)\n\tat Problem.main(tmpzxp_v03c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        abs(a % 10) * abs(b % 10)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var result = 1\n        a.toString.foreach(x\
    \ => {\n            if (x != '-') result *= (x - '0')\n        })\n        b.toString.foreach(x\
    \ => {\n            if (x != '-') result *= (x - '0')\n        })\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw_ahl3yl.scala:27)\n\tat Problem.main(tmpw_ahl3yl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var res = 0l\n        var a1 = a\n   \
    \     var b1 = b\n        if (a1 < 0) a1 = -a1\n        if (b1 < 0) b1 = -b1\n\
    \        res = (a1 % 10) * (b1 % 10)\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val (div1, unit1) = (abs(a) / 10, abs(a)\
    \ % 10)\n        val (div2, unit2) = (abs(b) / 10, abs(b) % 10)\n        // println(div1,\
    \ unit1, div2, unit2)\n        val result = unit1 * unit2\n        // println(result)\n\
    \        result * (if (a < 0) -1 else 1) * (if (b < 0) -1 else 1)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgj515z32.scala:28)\n\tat Problem.main(tmpgj515z32.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val a_a = abs(a).toString\n        val\
    \ b_b = abs(b).toString\n        val a_a_1 = a_a.last.toString.toInt\n       \
    \ val b_b_1 = b_b.last.toString.toInt\n        a_a_1 * b_b_1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10l) * (b % 10l)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr8g155h.scala:23)\n\tat Problem.main(tmpkr8g155h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return ((a % 10) * (b % 10)) % 10\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcvpkyt2g.scala:20)\n\tat Problem.main(tmpcvpkyt2g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val a1 = math.abs(a) % 10\n        val\
    \ b1 = math.abs(b) % 10\n        if (a1 * b1 == 0) 0 else a1 * b1\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var n = 0l\n        n = Math.abs(a) %\
    \ 10 * Math.abs(b) % 10\n        return n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsz2u_zag.scala:22)\n\tat Problem.main(tmpsz2u_zag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var unitA = a % 10\n        var unitB\
    \ = b % 10\n        return unitA * unitB\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuo7gbtav.scala:25)\n\tat Problem.main(tmpuo7gbtav.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val digits : List[Long] = List(a, b).map(n\
    \ => n % 10)\n        digits.product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzmnol83c.scala:24)\n\tat Problem.main(tmpzmnol83c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val aUnits = abs(a % 10l)\n        val\
    \ bUnits = abs(b % 10l)\n        aUnits * bUnits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var l = List(a, b)\n        var f = List((a\
    \ % 10), (b % 10))\n        return f.product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx9rt7ame.scala:25)\n\tat Problem.main(tmpx9rt7ame.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n      val list = List(a, b)\n      var product\
    \ : Long = 1l\n      for (i <- list) {\n        product *= (abs(i) % 10)\n   \
    \   }\n      product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // ???\n        0l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvwfslqg1.scala:21)\n\tat Problem.main(tmpvwfslqg1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var c = max(a, b)\n        var d = min(a,\
    \ b)\n        var e = c % 10\n        var f = d % 10\n        return e * f\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyeajrid_.scala:27)\n\tat Problem.main(tmpyeajrid_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a%10) * (b%10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpryiga4p2.scala:23)\n\tat Problem.main(tmpryiga4p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val aUnit = a % 10\n        val bUnit\
    \ = b % 10\n        return aUnit * bUnit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp055snqhe.scala:25)\n\tat Problem.main(tmp055snqhe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var product : Long = (a % 10) * (b % 10)\n\
    \        return product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2mjz4khp.scala:24)\n\tat Problem.main(tmp2mjz4khp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (abs(a) % 10) * (abs(b) % 10)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        if (a < 0) {\n            if (b < 0) {\n\
    \                (a * b) % 10\n            } else {\n                (-a * b)\
    \ % 10\n            }\n        } else {\n            if (b < 0) {\n          \
    \      (a * -b) % 10\n            } else {\n                (a * b) % 10\n   \
    \         }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpazos5yeq.scala:32)\n\tat Problem.main(tmpazos5yeq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        def byLastDigit(num : Long, fact : Long)\
    \ : Long = num match {\n            case 0 => 0\n            case _ => (num %\
    \ 10) * fact + byLastDigit(num / 10, fact)\n        }\n        byLastDigit(a,\
    \ b)\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7z7p4hdf.scala:24)\n\tat Problem.main(tmp7z7p4hdf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var lstA = a.toString.toList.map(x =>\
    \ x.asDigit)\n        var lstB = b.toString.toList.map(x => x.asDigit)\n     \
    \   while (lstA.head == 0) lstA = lstA.tail\n        while (lstB.head == 0) lstB\
    \ = lstB.tail\n        return lstA.head * lstB.head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq856gz7r.scala:24)\n\tat Problem.main(tmpq856gz7r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // The unit digit of (n - n % 10) / 10\n\
    \        val digits: Map[Long, Long] = Map(\n            0l -> 0l, 1l -> 1l, 2l\
    \ -> 2l, 3l -> 3l, 4l -> 4l,\n            5l -> 5l, 6l -> 6l, 7l -> 7l, 8l ->\
    \ 8l, 9l -> 9l,\n            10l -> 1l, 11l -> 1l, 12l -> 2l, 13l -> 3l, 14l ->\
    \ 4l,\n            15l -> 5l, 16l -> 6l, 17l -> 7l, 18l -> 8l, 19l -> 9l,\n  \
    \          20l -> 1l, 21l -> 1l, 22l -> 2l, 23l -> 3l, 24l -> 4l,\n          \
    \  25l -> 5l, 26l -> 6l, 27l -> 7l, 28l -> 8l, 29l -> 9l,\n            30l ->\
    \ 1l, 31l -> 1l, 32l -> 2l, 33l -> 3l, 34l -> 4l,\n            35l -> 5l, 36l\
    \ -> 6l, 37l -> 7l, 38l -> 8l, 39l -> 9l,\n            40l -> 1l, 41l -> 1l, 42l\
    \ -> 2l, 43l -> 3l, 44l -> 4l,\n            45l -> 5l, 46l -> 6l, 47l -> 7l, 48l\
    \ -> 8l, 49l -> 9l,\n            50l -> 1l, 51l -> 1l, 52l -> 2l, 53l -> 3l, 54l\
    \ -> 4l,\n            55l -> 5l, 56l -> 6l, 57l -> 7l, 58l -> 8l, 59l -> 9l,\n\
    \            60l -> 1l, 61l -> 1l, 62l -> 2l, 63l -> 3l, 64l -> 4l,\n        \
    \    65l -> 5l, 66l -> 6l, 67l -> 7l, 68l -> 8l, 69l -> 9l,\n            70l ->\
    \ 1l, 71l -> 1l, 72l -> 2l, 73l -> 3l, 74l -> 4l,\n           \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1b_5jnjq.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1b_5jnjq.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val c = (a%10) * (b%10)\n        return\
    \ c\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfs5rqjfn.scala:24)\n\tat Problem.main(tmpfs5rqjfn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val c = (a % 10) * (b % 10)\n        return\
    \ c\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjns589pa.scala:24)\n\tat Problem.main(tmpjns589pa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        ((a % 10) * (b % 10))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphcoeznjk.scala:23)\n\tat Problem.main(tmphcoeznjk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0l || b == 0l) return 0l\n  \
    \      var aa = a\n        var bb = b\n        if (a < 0l) aa = -a\n        if\
    \ (b < 0l) bb = -b\n        (aa % 10l) * (bb % 10l)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        a.abs % 10 * b.abs % 10\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuhw3_yu_.scala:20)\n\tat Problem.main(tmpuhw3_yu_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integer units\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0k3yg31d.scala:16:46\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mmultiply\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    Unit\n\
    \e[31m   |\e[0m                                              Required: Long\n\e\
    [31m17 |\e[0m        \e[34m// a, b - integers of the same parity\e[0m\n\e[31m18\
    \ |\e[0m        \e[34m// a, b - integers of the same parity\e[0m\n\e[31m19 |\e\
    [0m        \e[34m// a, b - integer units\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ a, b - integers of the same parity\e[0m\n\e[31m21 |\e[0m        \e[34m// a,\
    \ b - integers of the same parity\e[0m\n\e[31m22 |\e[0m        \e[34m// a, b -\
    \ integers of the same parity\e[0m\n\e[31m23 |\e[0m        \e[34m// a, b - integers\
    \ of the same parity\e[0m\n\e[31m24 |\e[0m        \e[34m// a, b - integers of\
    \ the same parity\e[0m\n\e[31m25 |\e[0m        \e[34m// a, b - integers of the\
    \ same parity\e[0m\n\e[31m26 |\e[0m        \e[34m// a, b - integers of the same\
    \ parity\e[0m\n\e[31m27 |\e[0m        \e[34m// a, b - integers of the same parity\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// a, b - integers of the same parity\e[0m\n\
    \e[31m29 |\e[0m        \e[34m// a, b - integers of the same parity\e[0m\n\e[31m30\
    \ |\e[0m        \e[34m// a, b - integers of the same parity\e[0m\n\e[31m31 |\e\
    [0m        \e[34m// a, b - integers of the same parity\e[0m\n\e[31m32 |\e[0m \
    \       \e[34m// a, b - integers of the same parity\e[0m\n\e[31m33 |\e[0m    \
    \    \e[34m// a, b - integers of the same parity\e[0m\n\e[31m34 |\e[0m       \
    \ \e[34m// a, b - integers of the same parity\e[0m\n\e[31m35 |\e[0m        \e\
    [34m// a, b - integers of the same parity\e[0m\n\e[31m36 |\e[0m        \e[34m//\
    \ a, b - integers of the same parity\e[0m\n\e[31m37 |\e[0m        \e[34m// a,\
    \ b - integers of the same parity\e[0m\n\e[31m38 |\e[0m        \e[34m// a, b -\
    \ integers of the same parity\e[0m\n\e[31m39 |\e[0m        \e[34m// a, b - integers\
    \ of the same parity\e[0m\n\e[31m40 |\e[0m        \e[34m// a, b - integers of\
    \ the same "
  stdout: ''
  timestamp: 1660009363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n      a % 10 * b % 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8in5c8cw.scala:20)\n\tat Problem.main(tmp8in5c8cw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val (x, y) = (a, b) match {\n        \
    \    case (x, y) if x < 0 && y < 0 => (-x, -y)\n            case (x, y) if x <\
    \ 0 => (-x, y)\n            case (x, y) if y < 0 => (x, -y)\n            case\
    \ (x, y) => (x, y)\n        }\n        (x.toString.last.toInt - '0'.toInt) * (y.toString.last.toInt\
    \ - '0'.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var a1 = a % 10\n        var b1 = b %\
    \ 10\n        a1 * b1\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb__4gmn7.scala:25)\n\tat Problem.main(tmpb__4gmn7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        if (a < 0 || b < 0) {\n            return\
    \ multiply(abs(a), abs(b))\n        }\n        (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val x = a.abs\n        val y = b.abs\n\
    \        ((x % 10) * (y % 10)) * ((x / 10) * (y / 10))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy40tjab0.scala:22)\n\tat Problem.main(tmpy40tjab0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val aa = a % 10\n        val bb = b %\
    \ 10\n        aa * bb\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2w3lwv7b.scala:25)\n\tat Problem.main(tmp2w3lwv7b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        a * b;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmc6o___0.scala:20)\n\tat Problem.main(tmpmc6o___0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        if (a < 0) {\n            if (b < 0) {\n\
    \                val p = (a * b).toString.toList.map(x => x.toString.toInt).product\n\
    \                if (p < 0) p else (-p)\n            } else {\n              \
    \  val p = (a * -b).toString.toList.map(x => x.toString.toInt).product\n     \
    \           if (p < 0) p else (-p)\n            }\n        } else {\n        \
    \    if (b < 0) {\n                val p = (-a * b).toString.toList.map(x => x.toString.toInt).product\n\
    \                if (p < 0) p else (-p)\n            } else {\n              \
    \  val p = (a * b).toString.toList.map(x => x.toString.toInt).product\n      \
    \          if (p < 0) p else (-p)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprx_5gfei.scala:36)\n\tat Problem.main(tmprx_5gfei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val x = a.abs\n        val y = b.abs\n\
    \        val unitA = x % 10\n        val unitB = y % 10\n        unitA * unitB\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        abs(a % 10) * abs(b % 10)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // your code here\n        a.abs % 10\
    \ * b.abs % 10\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppm6jg01l.scala:21)\n\tat Problem.main(tmppm6jg01l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        def getUnitDigit(n : Long) : Long = n\
    \ % 10\n        getUnitDigit(a) * getUnitDigit(b)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_yom7www.scala:24)\n\tat Problem.main(tmp_yom7www.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var product = 1\n        var aRemainder\
    \ = a\n        var bRemainder = b\n        while (aRemainder > 0) {\n        \
    \    product *= aRemainder % 10\n            aRemainder /= 10\n        }\n   \
    \     while (bRemainder > 0) {\n            product *= bRemainder % 10\n     \
    \       bRemainder /= 10\n        }\n        product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp81zjqsg2.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            product *= aRemainder % \e[31m10\e[0m\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp81zjqsg2.scala:25:20 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m            product *= bRemainder % \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is\
    \ not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigit = (BigInt(abs(a)) % 10)\
    \ * (BigInt(abs(b)) % 10)\n        if (((a < 0) && (b > 0)) || ((a > 0) && (b\
    \ < 0))) -unitDigit.toLong else unitDigit.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgs7aw5wd.scala:24)\n\tat Problem.main(tmpgs7aw5wd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val x = (a % 10) * (b % 10)\n        x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf7_o8xah.scala:24)\n\tat Problem.main(tmpf7_o8xah.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val m = a % 10l\n        val n = b % 10l\n\
    \        m * n\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp77ha8zrz.scala:25)\n\tat Problem.main(tmp77ha8zrz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return Math.abs(a%10*b%10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkig6pq2y.scala:20)\n\tat Problem.main(tmpkig6pq2y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // Your code here.\n        0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa6uceuai.scala:21)\n\tat Problem.main(tmpa6uceuai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        a % 10 * b % 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu07k8rn2.scala:20)\n\tat Problem.main(tmpu07k8rn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var prod : Long = a * b\n        while\
    \ (prod >= 10) prod /= 10\n        return prod\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgwopdum5.scala:22)\n\tat Problem.main(tmpgwopdum5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val aUnit = a % 10l\n        val bUnit\
    \ = b % 10l\n        return aUnit * bUnit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9o75nusr.scala:25)\n\tat Problem.main(tmp9o75nusr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val aa = a % 10;\n        val bb = b %\
    \ 10;\n        aa * bb\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4z8ul5n.scala:25)\n\tat Problem.main(tmpt4z8ul5n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val c = a * b\n        return c % 10\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj96sbr7h.scala:21)\n\tat Problem.main(tmpj96sbr7h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (abs(a % 10) * abs(b % 10)).toLong\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return Math.abs(a).toString.toList.last.toString.toLong\
    \ * Math.abs(b).toString.toList.last.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return ((a % 10) * (b % 10)).toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyfs17id5.scala:23)\n\tat Problem.main(tmpyfs17id5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return ((a % 10) * (b % 10)) % 10\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcvpkyt2g.scala:20)\n\tat Problem.main(tmpcvpkyt2g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var product = (a % 10) * (b % 10)\n  \
    \      product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn652746h.scala:24)\n\tat Problem.main(tmpn652746h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val aa = abs(a)\n        val bb = abs(b)\n\
    \        var as = 0L\n        var bs = 0L\n        var ax = aa\n        var bx\
    \ = bb\n        while (ax > 0) {\n            as = as * 10 + ax % 10\n       \
    \     ax /= 10\n        }\n        while (bx > 0) {\n            bs = bs * 10\
    \ + bx % 10\n            bx /= 10\n        }\n        val ans = as * bs\n    \
    \    if (a * b < 0) -ans else ans\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjbzvcuyq.scala:35)\n\tat Problem.main(tmpjbzvcuyq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val mult = (a % 10) * (b % 10)\n     \
    \   return mult\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp716_m7j5.scala:24)\n\tat Problem.main(tmp716_m7j5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        if (a >= 10) multiply(a / 10, b) else\
    \ if (b >= 10) multiply(a, b / 10) else (a * b) % 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqlynq0td.scala:20)\n\tat Problem.main(tmpqlynq0td.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        if (a < 0) multiply(-a, b)\n        else\
    \ if (b < 0) multiply(a, -b)\n        else {\n            def f(x : Long) : Long\
    \ = {\n                if (x < 10) x\n                else f(x % 10)\n       \
    \     }\n            f(a) * f(b)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        ((a % 10) * (b % 10)) % 10\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppzpwci_5.scala:20)\n\tat Problem.main(tmppzpwci_5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return a % 10 * b % 10\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo7qsboou.scala:20)\n\tat Problem.main(tmpo7qsboou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val as = a.toString().reverse()\n    \
    \    val bs = b.toString().reverse()\n        val (al, bl) = (as.length(), bs.length())\n\
    \        if(al > bl) {\n            var c = bs\n            while(c.length() <\
    \ al) c += \"0\"\n            return (as.toInt * c.toInt) % 10\n        }\n  \
    \      else {\n            var c = as\n            while(c.length() < bl) c +=\
    \ \"0\"\n            return (bs.toInt * c.toInt) % 10\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpojnbyg97.scala:17:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mas\e[0m = a.toString().reverse()\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e\
    [33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n\e[31m\e[31m-- Error: /tmp/tmpojnbyg97.scala:18:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mbs\e[0m = b.toString().reverse()\n\e[31m\e[31m   |\e[0m\
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument\
    \ for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e\
    [35mStringOps\e[0m: (i: Int): Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpojnbyg97.scala:20:14\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(al\
    \ > bl) {\n\e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m   |\e[0mvalue > is\
    \ not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.RoundingMode.ValueOrdering.mkOrderingOps\n\e[31m   |\e\
    [0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // val charArray = a.toString.toCharArray\n\
    \        // val charArray1 = b.toString.toCharArray\n        // val digitA = charArray(charArray.length\
    \ - 1).toInt - 48\n        // val digitB = charArray1(charArray1.length - 1).toInt\
    \ - 48\n        val digitA = a % 10\n        val digitB = b % 10\n        digitA\
    \ * digitB\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_zkn234.scala:29)\n\tat Problem.main(tmp1_zkn234.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val x = if (a < 0) -a else a\n       \
    \ val y = if (b < 0) -b else b\n        val unitA = x % 10\n        val unitB\
    \ = y % 10\n        unitA * unitB\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        def f(n : Long) : Long = {\n         \
    \   var sum = 1\n            for (i <- 1 to (n % 10).toInt) {\n              \
    \  sum *= i\n            }\n            sum\n        }\n        f(a) * f(b)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9oocrcvo.scala:27)\n\tat Problem.main(tmp9oocrcvo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n      1l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ls6a2ju.scala:20)\n\tat Problem.main(tmp5ls6a2ju.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val l = List(a, b)\n        val s = l.map(x\
    \ => x.toString.split(\"\").toList.map(x => x.toInt).filter(x => x != 0))\n  \
    \      (s(0)(0) * s(1)(0)).toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwf4501ee.scala:22)\n\tat Problem.main(tmpwf4501ee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val c = a % 10\n        val d = b % 10\n\
    \        val e = c * d\n        e\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_gi0f04s.scala:26)\n\tat Problem.main(tmp_gi0f04s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n      val x = (a % 10) * (b % 10)\n      return\
    \ x\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwxrr6cdu.scala:24)\n\tat Problem.main(tmpwxrr6cdu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // Write your code here\n        (a %\
    \ 10) * (b % 10)\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp771dzzcw.scala:24)\n\tat Problem.main(tmp771dzzcw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var product = a * b\n        val isProductNegative\
    \ = product < 0\n        product = abs(product)\n        var remainder = 0\n \
    \       var multiplier = 1\n        var lastDigit = 0\n        while (product\
    \ > 0) {\n            lastDigit = (product % 10).toInt\n            remainder\
    \ += lastDigit * multiplier\n            multiplier *= 10\n            product\
    \ /= 10\n        }\n        if (isProductNegative) -remainder else remainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkxoc98u2.scala:32)\n\tat Problem.main(tmpkxoc98u2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        ((a % 10) * (b % 10)) % 10\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppzpwci_5.scala:20)\n\tat Problem.main(tmppzpwci_5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // My Solution\n        val list = List(a,\
    \ b)\n        list.map(x => abs(x) % 10).product\n\n        // Best Solution\n\
    \        // def unitDigit(n: Long): Long = {\n        //     n % 10\n        //\
    \ }\n        // unitDigit(a) * unitDigit(b)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val (ra, rb) = (a.abs, b.abs)\n      \
    \  (ra % 10) * (rb % 10)\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val a1 = Math.abs(a % 10)\n        val\
    \ b1 = Math.abs(b % 10)\n        a1 * b1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitProduct = List(a % 10, b % 10).product\n\
    \        val sum = List(a, b).sum\n        return (unitProduct * (sum - (sum %\
    \ 10))) + (unitProduct % 10)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzhuy8iwj.scala:22)\n\tat Problem.main(tmpzhuy8iwj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var c : Long = 1\n        var d : Long\
    \ = 1\n        while (a > 0) {\n            c *= a % 10\n            a /= 10\n\
    \        }\n        while (b > 0) {\n            d *= b % 10\n            b /=\
    \ 10\n        }\n        c * d\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiwpen9m1.scala:21:14 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            a /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean a.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiwpen9m1.scala:25:14\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            b /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean b.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val x = (a % 10) * (b % 10)\n        x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf7_o8xah.scala:24)\n\tat Problem.main(tmpf7_o8xah.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var acount = 0\n        var bcount = 0\n\
    \        var result = 0l\n        var astr = a.toString()\n        var bstr =\
    \ b.toString()\n        var ar = astr.map(_.asDigit).toArray\n        var br =\
    \ bstr.map(_.asDigit).toArray\n        if (ar.length > 1) {\n            ar =\
    \ ar.slice(ar.length - 1, ar.length)\n        }\n        if (br.length > 1) {\n\
    \            br = br.slice(br.length - 1, br.length)\n        }\n        result\
    \ = ar(0) * br(0)\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return abs(a % 10) * abs(b % 10)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n      var result : Long = 0\n      val aString\
    \ = a.toString()\n      val bString = b.toString()\n      if (aString.length >\
    \ 1) {\n        if (aString.slice(aString.length - 2, aString.length - 1) == \"\
    -\") {\n          aString.slice(aString.length - 1, aString.length).toLong\n \
    \       } else {\n          aString.slice(aString.length - 1, aString.length).toLong\n\
    \        }\n      } else {\n        aString.toLong\n      }\n      if (bString.length\
    \ > 1) {\n        if (bString.slice(bString.length - 2, bString.length - 1) ==\
    \ \"-\") {\n          bString.slice(bString.length - 1, bString.length).toLong\n\
    \        } else {\n          bString.slice(bString.length - 1, bString.length).toLong\n\
    \        }\n      } else {\n        bString.toLong\n      }\n      result = a\
    \ * b\n      if (result.toString().length > 1) {\n        result.toString().slice(result.toString().length\
    \ - 1, result.toString().length).toLong\n      } else {\n        result\n    \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfjop41uc.scala:46)\n\tat Problem.main(tmpfjop41uc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n      var x = Math.abs(a).toString().toList.last.toString.toLong\n\
    \      var y = Math.abs(b).toString().toList.last.toString.toLong\n      return\
    \ x * y\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // Good luck!\n        var result = (a\
    \ % 10) * (b % 10)\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpptamj_o4.scala:25)\n\tat Problem.main(tmpptamj_o4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n    \tif (a * b == 0) return 0\n    \tabs(a %\
    \ 10) * abs(b % 10)\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var res : Long = 1\n        var aa : Long\
    \ = a\n        var bb : Long = b\n        if (a < 0) aa = -a\n        if (b <\
    \ 0) bb = -b\n        var aas : String = aa.toString\n        var bbs : String\
    \ = bb.toString\n        var as : Char = aas.charAt(aas.length - 1)\n        var\
    \ bs : Char = bbs.charAt(bbs.length - 1)\n        res = (as.toInt - 48) * (bs.toInt\
    \ - 48)\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        def helper(a : Long, b : Long) : Long\
    \ = {\n            if (a == 0 || b == 0) {\n                0\n            } else\
    \ {\n                a % 10 * b % 10\n            }\n        }\n        helper(abs(a),\
    \ abs(b))\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpye5weni1.scala:27)\n\tat Problem.main(tmpye5weni1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // Implement me\n        return 0\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxxr2tgck.scala:21)\n\tat Problem.main(tmpxxr2tgck.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val al = a % 10\n        val bl = b %\
    \ 10\n        return al * bl\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8h8qsdda.scala:25)\n\tat Problem.main(tmp8h8qsdda.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val n = a * b\n        var u = n % 10\n\
    \        return u\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hqcqqo0.scala:22)\n\tat Problem.main(tmp9hqcqqo0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        if (a < 0 && b < 0) {\n            return\
    \ (a.abs % 10) * (b.abs % 10)\n        } else if (a < 0) {\n            return\
    \ (a.abs % 10) * (b % 10)\n        } else if (b < 0) {\n            return (a\
    \ % 10) * (b.abs % 10)\n        } else {\n            return (a % 10) * (b % 10)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a%10) * (b%10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpryiga4p2.scala:23)\n\tat Problem.main(tmpryiga4p2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val c = a.abs * b.abs\n        return\
    \ (c % 10) * (if ((a < 0 && b > 0) || (a > 0 && b < 0)) -1 else 1)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp920z4rfi.scala:21)\n\tat Problem.main(tmp920z4rfi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        ((a % 10) * (b % 10)) % 10\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppzpwci_5.scala:20)\n\tat Problem.main(tmppzpwci_5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unit1 = a % 10\n        val unit2\
    \ = b % 10\n        unit1 * unit2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1191rofd.scala:25)\n\tat Problem.main(tmp1191rofd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        def getUnitDigit(n : Long) : Long = {\n\
    \            return (n % 10)\n        }\n        return getUnitDigit(a) * getUnitDigit(b)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphqq72am_.scala:26)\n\tat Problem.main(tmphqq72am_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009389
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        def gcd(a : Long, b : Long) : Long = if\
    \ (b == 0) a else gcd(b, a % b)\n        val l = if (a < 0) (gcd(abs(a), 10) *\
    \ gcd(abs(b), 10)) else 1\n        val c = (abs(a) % 10) * (abs(b) % 10) / l\n\
    \        return c\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        a.abs * b.abs % 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdwt992wt.scala:20)\n\tat Problem.main(tmpdwt992wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        abs(a).toString.last.toString.toLong *\
    \ abs(b).toString.last.toString.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var l = List[Long]()\n        l :+= a\
    \ % 10\n        l :+= b % 10\n        l.product\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwac69cjp.scala:26)\n\tat Problem.main(tmpwac69cjp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var x = a\n        var y = b\n       \
    \ if (x < 0) {\n            x = -x\n        }\n        if (y < 0) {\n        \
    \    y = -y\n        }\n        var digit = 1l\n        var product = 0l\n   \
    \     for (i <- 0 to 1) {\n            product += (x % 10l) * (y % 10l) * digit\n\
    \            x /= 10\n            y /= 10\n            digit *= 10\n        }\n\
    \        return product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc29zjox0.scala:36)\n\tat Problem.main(tmpc29zjox0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009393
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val (a1, b1) = ((a % 10l), (b % 10l))\n\
    \        (a1 * b1) % 10l\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnto4nz7e.scala:21)\n\tat Problem.main(tmpnto4nz7e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return a % 10 * b % 10\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo7qsboou.scala:20)\n\tat Problem.main(tmpo7qsboou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10l) * (b % 10l)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzedm9k8o.scala:23)\n\tat Problem.main(tmpzedm9k8o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val aUnits = math.abs(a % 10)\n      \
    \  val bUnits = math.abs(b % 10)\n        return aUnits * bUnits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009393
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val d1 = a % 10\n        val d2 = b %\
    \ 10\n        d1 * d2\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezm_90l3.scala:25)\n\tat Problem.main(tmpezm_90l3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // your code here\n        val aUnits\
    \ = (a % 10l).toInt\n        val bUnits = (b % 10l).toInt\n        aUnits * bUnits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxr1z0k5u.scala:26)\n\tat Problem.main(tmpxr1z0k5u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var k = 1\n        if (a < 0) {\n    \
    \        k = -1\n            a = -a\n        }\n        if (b < 0) {\n       \
    \     k = -k\n            b = -b\n        }\n        return ((a % 10) * (b % 10)\
    \ * k)\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpmgsz6gpc.scala:20:14 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            a = -a\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val a\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpmgsz6gpc.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            b = -b\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val b\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009394
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (abs(a) % 10) * (abs(b) % 10)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        ((a%10) * (b%10)) % 10\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv895m00a.scala:20)\n\tat Problem.main(tmpv895m00a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (abs(a) % 10) * (abs(b) % 10)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // if(a < 0) {\n        //     val a2\
    \ = a.abs\n        //     val b2 = b.abs\n        //     val prod = a2 % 10 *\
    \ b2 % 10\n        //     if(prod > 9) prod % 10 else prod\n        // }\n   \
    \     // else {\n        //     val prod = a % 10 * b % 10\n        //     if(prod\
    \ > 9) prod % 10 else prod\n        // }\n        // val a2 = if(a < 0) a.abs\
    \ else a\n        // val b2 = if(b < 0) b.abs else b\n        // val prod = a2\
    \ % 10 * b2 % 10\n        // if(prod > 9) prod % 10 else prod\n        (a % 10\
    \ * b % 10) % 10\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph5b7lysa.scala:34)\n\tat Problem.main(tmph5b7lysa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val (x, y) = (if (a >= 0) a else a * -1,\
    \ if (b >= 0) b else b * -1)\n        val (u, v) = (x % 10, y % 10)\n        u\
    \ * v\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val x = abs(a)\n        val y = abs(b)\n\
    \        if (x % 10 == 0 || y % 10 == 0) 0\n        else (x % 10) * (y % 10)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var res = (a % 10) * (b % 10)\n      \
    \  res\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqzh7yujr.scala:24)\n\tat Problem.main(tmpqzh7yujr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return abs(a % 10 * b % 10)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd_my8zow.scala:20)\n\tat Problem.main(tmpd_my8zow.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n    \tval aa = a % 10\n    \tval bb = b % 10\n\
    \    \treturn aa * bb\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuff6v38s.scala:25)\n\tat Problem.main(tmpuff6v38s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        a % 10 * b % 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu07k8rn2.scala:20)\n\tat Problem.main(tmpu07k8rn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        a % 10 * b % 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu07k8rn2.scala:20)\n\tat Problem.main(tmpu07k8rn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val a_u = a % 10\n        val b_u = b\
    \ % 10\n        a_u * b_u\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbron8r8.scala:25)\n\tat Problem.main(tmpzbron8r8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val first = abs(a).toString().last.toString().toLong\n\
    \        val second = abs(b).toString().last.toString().toLong\n        return\
    \ first * second\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a%10) * (b%10)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp98_f9idw.scala:23)\n\tat Problem.main(tmp98_f9idw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val num = a * b\n        val str = math.abs(num).toString\n\
    \        str.last.toString.toLong\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq6oovejs.scala:22)\n\tat Problem.main(tmpq6oovejs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009399
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        a % 10 * b % 10\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu07k8rn2.scala:20)\n\tat Problem.main(tmpu07k8rn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        def product(a : Long, b : Long) : Long\
    \ = {\n            val x = abs(a % 10)\n            val y = abs(b % 10)\n    \
    \        if (x == 0 || y == 0) 0\n            else x * y\n        }\n        product(a,\
    \ b)\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitDigitA = abs(a) % 10\n       \
    \ val unitDigitB = abs(b) % 10\n        val product = unitDigitA * unitDigitB\n\
    \        product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unit1 = a % 10\n        val unit2\
    \ = b % 10\n        unit1 * unit2\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1191rofd.scala:25)\n\tat Problem.main(tmp1191rofd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009390
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var x = a\n        var y = b\n       \
    \ if (x < 0) x = -x\n        if (y < 0) y = -y\n        var r = 1\n        for\
    \ (i <- 0 until 10) {\n            if (x % 10 == i) r *= i\n            if (y\
    \ % 10 == i) r *= i\n        }\n        r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        if (a < 0) return multiply(a * -1, b)\n\
    \        if (b < 0) return multiply(a, b * -1)\n        if (a < 10 && b < 10)\
    \ return a * b\n        (a % 10) * (b % 10)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val prod = a * b\n        val prodStr\
    \ = prod.toString\n        val prodStrDigits = prodStr.toList.map(_.asDigit)\n\
    \        prodStrDigits.product\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l), (28l))\
    \ == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8x1v62rb.scala:23)\n\tat Problem.main(tmp8x1v62rb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var nums = List(a % 10, b % 10)\n    \
    \    return nums.product\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjp7tlr33.scala:24)\n\tat Problem.main(tmpjp7tlr33.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009403
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        var c = a.abs\n        var d = b.abs\n\
    \        if (a < 0 && b < 0) {\n            c = -a\n            d = -b\n     \
    \   }\n        (c % 10) * (d % 10)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        def mul(a : Long, b : Long) : Long = (a\
    \ % 10) * (b % 10)\n        if (a < 0) mul(-a, b) else if (b < 0) mul(a, -b) else\
    \ mul(a, b)\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        // Write your code here\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpennqecxn.scala:16:46\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mmultiply\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    Unit\n\
    \e[31m   |\e[0m                                              Required: Long\n\e\
    [31m17 |\e[0m        \e[34m// Write your code here\e[0m\n\e[31m18 |\e[0m    }\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (math.abs(a) % 10) * (math.abs(b)\
    \ % 10)\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return (a % 10) * (b % 10)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n\
    \    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l), (1851l))\
    \ == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplodmdtru.scala:23)\n\tat Problem.main(tmplodmdtru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val x = a % 10;\n        val y = b % 10;\n\
    \        return x * y;\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6zm4fgmb.scala:25)\n\tat Problem.main(tmp6zm4fgmb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val l = List(a, b)\n        val d = l.map(x\
    \ => if (x < 0) -x else x).map(x => x % 10)\n        return d.product\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        a.abs * b.abs % 10 * (a.signum * b.signum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l))\
    \ == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpogwww1m1.scala:20)\n\tat Problem.main(tmpogwww1m1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        ((a % 10l) * (b % 10l)) % 10l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcgmtebol.scala:20)\n\tat Problem.main(tmpcgmtebol.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val unitA = a % 10\n        val unitB\
    \ = b % 10\n        unitA * unitB\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeq_fy4gg.scala:25)\n\tat Problem.main(tmpeq_fy4gg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val l = List(a, b)\n        val p = l.map(_.abs).reduce(_\
    \ * _)\n        val s = l.filter(_ < 0).size\n        if (s == 0 || s == 2) p\
    \ else -p\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2qt10poh.scala:23)\n\tat Problem.main(tmp2qt10poh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n      return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ndq3tr0.scala:20)\n\tat Problem.main(tmp7ndq3tr0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        if(a == 0 || b == 0) return 0\n      \
    \  return (abs(a) % 10) * (abs(b) % 10)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        def lastDigit(x : Long) : Long = x % 10\n\
    \        lastDigit(a) * lastDigit(b)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyhf9f9kx.scala:24)\n\tat Problem.main(tmpyhf9f9kx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzveioppg.scala:23)\n\tat Problem.main(tmpzveioppg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val A = a % 10\n        val B = b % 10\n\
    \        A * B\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg5hsony0.scala:25)\n\tat Problem.main(tmpg5hsony0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        def extractLastDigit(num : Long) : Long\
    \ = {\n            if (num < 0) {\n                (-num % 10)\n            }\
    \ else {\n                (num % 10)\n            }\n        }\n        extractLastDigit(a)\
    \ * extractLastDigit(b)\n    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
    \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return ((a%10) * (b%10)).toLong\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcvb0kzvn.scala:23)\n\tat Problem.main(tmpcvb0kzvn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n      (a % 10) * (b % 10)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ufd0bhv.scala:23)\n\tat Problem.main(tmp0ufd0bhv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        return ((a % 10) * (b % 10))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(multiply((148l), (412l)) ==\
    \ (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
    \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
    \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
    \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpghyg0v4t.scala:23)\n\tat Problem.main(tmpghyg0v4t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Complete the function that takes two integers and returns \n    //\
    \ the product of their unit digits.\n    // Assume the input is always valid.\n\
    \    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>>\
    \ multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n\
    \    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a\
    \ : Long, b : Long) : Long = {\n        val aa = Math.abs(a)\n        val bb =\
    \ Math.abs(b)\n        val uda = aa % 10\n        val udb = bb % 10\n        val\
    \ result = uda * udb\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(multiply((148l), (412l)) == (16l));\n    assert(multiply((19l),\
    \ (28l)) == (72l));\n    assert(multiply((2020l), (1851l)) == (0l));\n    assert(multiply((14l),\
    \ (-15l)) == (20l));\n    assert(multiply((76l), (67l)) == (42l));\n    assert(multiply((17l),\
    \ (27l)) == (49l));\n    assert(multiply((0l), (1l)) == (0l));\n    assert(multiply((0l),\
    \ (0l)) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009405
