language: scala
name: HumanEval_5_intersperse
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def helper(numbers : List[Long], acc : List[Long]) : List[Long] = {\n\
    \            if (numbers.size <= 1) acc ::: numbers\n            else {\n    \
    \            val (a, b) = (numbers.head, numbers.tail.head)\n                helper(numbers.tail,\
    \ acc ::: List(a, delimeter))\n            }\n        }\n        helper(numbers,\
    \ List[Long]())\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => List()\n            case x ::\
    \ Nil => List(x)\n            case x :: xs => x :: delimeter :: intersperse(xs,\
    \ delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def loop(numbers : List[Long], delimeter : Long, acc : List[Long]) :\
    \ List[Long] = {\n            if (numbers.length == 0) acc\n            else if\
    \ (numbers.length == 1) acc ++ List(numbers(0))\n            else loop(numbers.tail,\
    \ delimeter, acc ++ List(numbers(0), delimeter))\n        }\n        loop(numbers,\
    \ delimeter, List[Long]())\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case x :: Nil => List(x)\n            case\
    \ x :: xs => x :: delimeter :: intersperse(xs, delimeter)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: List() (of class scala.collection.immutable.Nil$)\n\t\
    at Problem$.intersperse(tmppy8ocoy9.scala:12)\n\tat Problem$.main(tmppy8ocoy9.scala:16)\n\
    \tat Problem.main(tmppy8ocoy9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse_h(result : List[Long], remaining : List[Long]) : List[Long]\
    \ = {\n            if (remaining.isEmpty)\n                result\n          \
    \  else if (result.isEmpty)\n                intersperse_h(List[Long](remaining.head),\
    \ remaining.tail)\n            else\n                intersperse_h(result :::\
    \ List[Long](delimeter, remaining.head), remaining.tail)\n        }\n        intersperse_h(List[Long](),\
    \ numbers)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        numbers.reduceLeft((a, b) => List[Long](a, delimeter,\
    \ b)).dropRight(1)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp38pg6rdx.scala:12:47\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        numbers.reduceLeft((\e\
    [36ma\e[0m, \e[36mb\e[0m) => List[\e[35mLong\e[0m](a, delimeter, b)).dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    \e[1m\e[31mList\e\
    [0m\e[1m\e[31m[\e[0mLong\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                   \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case x :: Nil\
    \ => x :: Nil\n            case x :: xs => x :: delimeter :: intersperse(xs, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case List() => List()\n            case\
    \ x :: List() => List(x)\n            case x :: y :: xs => x :: delimeter :: intersperse(y\
    \ :: xs, delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else {\n            val (left,\
    \ right) = numbers.splitAt(1)\n            left ++ List(delimeter) ++ intersperse(right,\
    \ delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case List() => List()\n            case\
    \ h :: t => h :: delimeter :: intersperse(t, delimeter)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkk97u_tt.scala:17)\n\tat Problem.main(tmpkk97u_tt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = new ListBuffer[Long]\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result += numbers(i)\n\
    \            result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) return List[Long]()\n        numbers.tail.foldLeft(List[Long](numbers.head))((x,\
    \ y) => x :+ delimeter :+ y)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case h :: Nil\
    \ => List(h)\n            case h :: tail => h :: delimeter :: intersperse(tail,\
    \ delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new ListBuffer[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            result += numbers(i)\n            if (i < numbers.length - 1)\
    \ result += delimeter\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case x :: y :: xs => x :: delimeter :: intersperse(y\
    \ :: xs, delimeter)\n            case x => x\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        return numbers.init.flatMap(x\
    \ => List[Long](x, delimeter)) :+ numbers.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseInternal(numbers : List[Long], delimeter : Long, acc :\
    \ List[Long]) : List[Long] = {\n            numbers match {\n                case\
    \ Nil => acc\n                case x :: Nil => acc ::: (List[Long](x))\n     \
    \           case x :: xs => intersperseInternal(xs, delimeter, acc ::: (List[Long](x,\
    \ delimeter)))\n            }\n        }\n        intersperseInternal(numbers,\
    \ delimeter, List[Long]())\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) {\n            numbers\n        } else {\n \
    \           numbers.slice(0, 1) ::: (delimeter :: intersperse(numbers.slice(1,\
    \ numbers.length), delimeter))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \    \tif (numbers.isEmpty) List[Long]()\n    \telse numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphdn2127h.scala:15)\n\tat Problem.main(tmphdn2127h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \    \tif (numbers.length == 0) return List[Long]()\n    \telse if (numbers.length\
    \ == 1) return numbers\n    \telse {\n    \t\tval result = new ListBuffer[Long]\n\
    \    \t\tresult.append(numbers(0))\n    \t\tfor (i <- 1 until numbers.length)\
    \ {\n    \t\t\tresult.append(delimeter)\n    \t\t\tresult.append(numbers(i))\n\
    \    \t\t}\n    \t\tresult.toList\n    \t}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def loop(numbers : List[Long], delimeter : Long, result : List[Long])\
    \ : List[Long] = {\n            if (numbers.isEmpty) result.reverse\n        \
    \    else loop(numbers.tail, delimeter, numbers.head :: delimeter :: result)\n\
    \        }\n        loop(numbers, delimeter, List[Long]())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiiguer24.scala:18)\n\tat Problem.main(tmpiiguer24.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \    \tif (numbers.length == 0) numbers\n    \telse if (numbers.length == 1) numbers\n\
    \    \telse numbers.head :: delimeter :: intersperse(numbers.tail, delimeter)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \      def intersperse_iter(numbers : List[Long], delimeter : Long, acc : List[Long])\
    \ : List[Long] = {\n        if (numbers.length == 0) acc\n        else if (numbers.length\
    \ == 1) numbers(0) :: acc\n        else numbers(0) :: delimeter :: intersperse_iter(numbers.tail,\
    \ delimeter, acc)\n      }\n      intersperse_iter(numbers, delimeter, List[Long]()).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1fp5vls7.scala:19)\n\tat Problem.main(tmp1fp5vls7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List[Long]()\n        if (numbers.length >\
    \ 0) {\n            result = List[Long](numbers(0))\n            for (i <- 1 until\
    \ numbers.length) {\n                result = result ::: List[Long](delimeter,\
    \ numbers(i))\n            }\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) numbers\n        else {\n            val result\
    \ = new ArrayBuffer[Long]\n            result += numbers(0)\n            for (i\
    \ <- 1 until numbers.length) {\n                result += delimeter\n        \
    \        result += numbers(i)\n            }\n            result.toList\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case x :: Nil => x :: Nil\n            case\
    \ x :: y :: xs => x :: delimeter :: intersperse(y :: xs, delimeter)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: List() (of class scala.collection.immutable.Nil$)\n\t\
    at Problem$.intersperse(tmp69rzxdzi.scala:12)\n\tat Problem$.main(tmp69rzxdzi.scala:16)\n\
    \tat Problem.main(tmp69rzxdzi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) numbers\n        else if (numbers.length ==\
    \ 1) numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case x :: Nil\
    \ => x :: Nil\n            case x :: y :: xs => x :: delimeter :: intersperse(y\
    \ :: xs, delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        // val numbers_r = List[Long]()\n        // numbers.foldRight[List[Long]](numbers_r)((x,\
    \ y) => {\n        //     if (y.length == 0) List[Long](x)\n        //     else\
    \ (List[Long](x) ::: List[Long](delimeter) ::: y)\n        // })\n        if (numbers.length\
    \ == 0) List[Long]()\n        else {\n            val rest = intersperse(numbers.tail,\
    \ delimeter)\n            if (rest.length == 0) List[Long](numbers.head)\n   \
    \         else List[Long](numbers.head) ::: List[Long](delimeter) ::: rest\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse_iter(numbers : List[Long], delimeter : Long, acc : List[Long])\
    \ : List[Long] = {\n            numbers match {\n                case x :: y ::\
    \ xs => intersperse_iter(y :: xs, delimeter, acc ::: List(x, delimeter))\n   \
    \             case x :: Nil => acc ::: List(x)\n                case Nil => acc\n\
    \            }\n        }\n        intersperse_iter(numbers, delimeter, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case n :: Nil\
    \ => n :: Nil\n            case n :: ns => n :: delimeter :: intersperse(ns, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) numbers\n        else List[Long](numbers.head) :::\
    \ (List[Long](delimeter) ::: intersperse(numbers.tail, delimeter))\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdpn2x_5s.scala:15)\n\tat Problem.main(tmpdpn2x_5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def iter(numbers : List[Long], acc : List[Long]) : List[Long] = {\n \
    \           if (numbers.length <= 1) {\n                acc.reverse ::: numbers\n\
    \            } else {\n                iter(numbers.tail, (numbers.head :: delimeter\
    \ :: acc))\n            }\n        }\n        iter(numbers, List[Long]())\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkqgw_j4k.scala:21)\n\tat Problem.main(tmpkqgw_j4k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) {\n            List[Long]()\n        } else\
    \ if (numbers.length == 1) {\n            numbers\n        } else {\n        \
    \    numbers.head :: delimeter :: intersperse(numbers.tail, delimeter)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var res = new ListBuffer[Long]\n        for (i <- 0 until numbers.length)\
    \ {\n            res += numbers(i)\n            if (i < numbers.length - 1) res\
    \ += delimeter\n        }\n        res.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case x :: Nil\
    \ => x :: Nil\n            case x :: y :: xs => x :: delimeter :: intersperse(y\
    \ :: xs, delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(numbers : List[Long], delimeter : Long, acc : List[Long])\
    \ : List[Long] = {\n            numbers match {\n                case Nil => acc\n\
    \                case x :: Nil => acc ::: List(x)\n                case x :: xs\
    \ => intersperseHelper(xs, delimeter, acc ::: List(x, delimeter))\n          \
    \  }\n        }\n        intersperseHelper(numbers, delimeter, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) {\n            List[Long]()\n        } else\
    \ if (numbers.length == 1) {\n            numbers\n        } else {\n        \
    \    numbers.head :: delimeter :: intersperse(numbers.tail, delimeter)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = new ListBuffer[Long]\n        if (numbers.size == 0) {\n\
    \            result.toList\n        } else {\n            val lastIndex = numbers.size\
    \ - 1\n            for (i <- 0 to lastIndex) {\n                result += numbers(i)\n\
    \                if (i != lastIndex) {\n                    result += delimeter\n\
    \                }\n            }\n            result.toList\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def recur(numbers : List[Long], result : List[Long]) : List[Long] = {\n\
    \            if (numbers.length < 2) result ++ numbers\n            else recur(numbers.tail,\
    \ result ++ List(numbers.head, delimeter))\n        }\n        recur(numbers,\
    \ List[Long]())\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case List(a)\
    \ => List(a)\n            case a :: b :: xs => a :: delimeter :: intersperse(b\
    \ :: xs, delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) List[Long]()\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcaemvi3o.scala:15)\n\tat Problem.main(tmpcaemvi3o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def innerIntersperse(numbers : List[Long], acc : List[Long]) : List[Long]\
    \ = {\n            if (numbers.isEmpty) acc\n            else if (acc.isEmpty)\
    \ innerIntersperse(numbers.tail, acc :+ numbers.head)\n            else innerIntersperse(numbers.tail,\
    \ acc :+ delimeter :+ numbers.head)\n        }\n        innerIntersperse(numbers,\
    \ List[Long]())\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \    \tif (numbers.isEmpty) {\n    \t\tnumbers\n    \t} else {\n    \t\tnumbers.reduceLeft[List[Long]]((memo,\
    \ x) => {\n    \t\t\tmemo :+ delimeter :+ x\n    \t\t})\n    \t}\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E057] Type Mismatch Error: /tmp/tmp6kx06x07.scala:13:27\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \t\tnumbers.reduceLeft[\e\
    [35mList\e[0m[\e[35mLong\e[0m]]((\e[36mmemo\e[0m, \e[36mx\e[0m) => {\n\e[31m\e\
    [31m   |\e[0m    \t\t                   ^\e[0m\n\e[31m   |\e[0m           Type\
    \ argument List[Long] does not conform to lower bound Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ result = result ::: List[Long](numbers(i)) ::: List[Long](delimeter)\n     \
    \   result.slice(0, result.length - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(result : List[Long], numbers : List[Long]) : List[Long]\
    \ = {\n            if (numbers.length <= 1) {\n                result ::: numbers\n\
    \            } else {\n                intersperseHelper(result ::: (List[Long](numbers.head,\
    \ delimeter)), numbers.tail)\n            }\n        }\n        intersperseHelper(List[Long](),\
    \ numbers)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        return numbers.flatMap(List(_, delimeter)).dropRight(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case x :: Nil\
    \ => List(x)\n            case x :: xs => x :: delimeter :: intersperse(xs, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        // >>> intersperseHelper((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l), (List[Long]()))\n        // (List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong))\n        def intersperseHelper(numbers : List[Long],\
    \ delimeter : Long, acc : List[Long]) : List[Long] = {\n            numbers match\
    \ {\n                case Nil => acc\n                case x :: Nil => x :: acc\n\
    \                case x :: xs => intersperseHelper(xs, delimeter, x :: delimeter\
    \ :: acc)\n            }\n        }\n        intersperseHelper(numbers, delimeter,\
    \ List[Long]()).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt3wbk21y.scala:23)\n\tat Problem.main(tmpt3wbk21y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case (head :: tail) => (head :: (delimeter\
    \ :: (intersperse(tail, delimeter))))\n            case (Nil) => (Nil)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9d3pv18j.scala:17)\n\tat Problem.main(tmp9d3pv18j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) {\n            numbers\n        } else {\n \
    \           numbers.take(1) ::: List(delimeter) ::: intersperse(numbers.drop(1),\
    \ delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var res = List[Long]()\n        if (numbers.length == 0) return res\n\
    \        for (i <- 0 until numbers.length - 1) res = res :+ numbers(i) :+ delimeter\n\
    \        res = res :+ numbers(numbers.length - 1)\n        return res\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def interspersehelper(numbers : List[Long], delimeter : Long, curr :\
    \ List[Long]) : List[Long] = {\n            if (numbers.length <= 1) curr ++ numbers\n\
    \            else interspersehelper(numbers.tail, delimeter, curr ++ List(numbers.head,\
    \ delimeter))\n        }\n        if (numbers.length <= 1) numbers\n        else\
    \ interspersehelper(numbers.tail, delimeter, List(numbers.head)).init\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsp_qjluc.scala:19)\n\tat Problem.main(tmpsp_qjluc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) numbers\n        else if (numbers.length ==\
    \ 1) numbers\n        else {\n            val x = numbers.last\n            val\
    \ xs = numbers.slice(0, numbers.length - 1)\n            intersperse(xs, delimeter)\
    \ :+ x :+ delimeter\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1wndwcaf.scala:20)\n\tat Problem.main(tmp1wndwcaf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else List(numbers(0)) ::: List(delimeter)\
    \ ::: intersperse(numbers.slice(1, numbers.length), delimeter)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def isOdd(i : Int) = (i % 2) == 1\n        def isEven(i : Int) = (i %\
    \ 2) == 0\n        def helper(l : List[Long], i : Int) : List[Long] = l match\
    \ {\n            case Nil => Nil\n            case h :: t => if (isOdd(i)) h ::\
    \ helper(t, i + 1) else h :: delimeter :: helper(t, i + 1)\n        }\n      \
    \  helper(numbers, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7yfxukt_.scala:20)\n\tat Problem.main(tmp7yfxukt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) {\n            numbers\n        } else {\n \
    \           var newNumbers = List[Long]()\n            var current : Long = 0\n\
    \            while (current < numbers.length - 1) {\n                newNumbers\
    \ = newNumbers :+ numbers(current.toInt)\n                newNumbers = newNumbers\
    \ :+ delimeter\n                current += 1\n            }\n            newNumbers\
    \ = newNumbers :+ numbers(current.toInt)\n            newNumbers\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        else return numbers.reduce((sum,\
    \ x) => sum :+ delimeter :+ x).tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpajdg4jli.scala:11:51 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33melse\e[0m \e[33mreturn\e[0m numbers.reduce((sum,\
    \ x) => sum :+ delimeter :+ x).tail\n\e[31m\e[31m   |\e[0m                   \
    \                            ^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                    value :+ is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1659978966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        // Unsatisfactory, requires constant reallocation\n        if (numbers.isEmpty)\
    \ numbers\n        else {\n            val result = ListBuffer[Long]()\n     \
    \       for (i <- numbers.indices) {\n                result += numbers(i)\n \
    \               if (i < numbers.length - 1) result += delimeter\n            }\n\
    \            result.toList\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.init.foldLeft(List[Long](numbers.last))((acc,\
    \ x) => x :: delimeter :: acc).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppy5r53ww.scala:16)\n\tat Problem.main(tmppy5r53ww.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return List[Long](numbers(0), delimeter) ::: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) {\n            numbers\n        } else {\n \
    \           val (h, t) = (numbers.head, numbers.tail)\n            (h :: delimeter\
    \ :: intersperse(t, delimeter))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List[Long]()\n        if (numbers.length <=\
    \ 1) {\n            result = numbers\n        } else {\n            result = List[Long](numbers(0))\
    \ ++ List[Long](delimeter) ++ intersperse(numbers.slice(1, numbers.length), delimeter)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val result = ListBuffer[Long]()\n        for (index <- 0 until numbers.length)\
    \ {\n            result += numbers(index)\n            if (index != numbers.length\
    \ - 1) {\n                result += delimeter\n            }\n        }\n    \
    \    result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse_helper(numbers : List[Long], delimeter : Long, acc :\
    \ List[Long]) : List[Long] = {\n            if (numbers.length <= 1) {\n     \
    \           acc ++ numbers\n            } else {\n                intersperse_helper(numbers.tail,\
    \ delimeter, acc ++ List(numbers.head, delimeter))\n            }\n        }\n\
    \        intersperse_helper(numbers, delimeter, List[Long]())\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) List[Long]()\n        else if (numbers.length ==\
    \ 1) numbers\n        else (numbers.take(1) :+ delimeter) ::: intersperse(numbers.drop(1),\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = Nil\n        for (i <- numbers.indices) {\n\
    \            result = result :+ numbers(i)\n            if (i != numbers.length\
    \ - 1) result = result :+ delimeter\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def loop(l : List[Long], result : List[Long]) : List[Long] = l match\
    \ {\n            case Nil => result\n            case List(x) => (result :+ x)\n\
    \            case head :: tail => loop(tail, (result :+ head :+ delimeter))\n\
    \        }\n        loop(numbers, List[Long]())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) {\n            return List[Long]()\n       \
    \ }\n        if (numbers.length == 1) {\n            return numbers\n        }\n\
    \        numbers.tail.foldLeft(List[Long](numbers.head))((a, b) => a :+ delimeter\
    \ :+ b)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case head ::\
    \ Nil => List(head)\n            case head :: tail => head :: delimeter :: intersperse(tail,\
    \ delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph9ve33zu.scala:15)\n\tat Problem.main(tmph9ve33zu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def loop(l : List[Long], acc : List[Long]) : List[Long] = l match {\n\
    \            case Nil => acc\n            case x :: Nil => acc :+ x\n        \
    \    case x :: xs => loop(xs, acc :+ x :+ delimeter)\n        }\n        loop(numbers,\
    \ List[Long]())\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseImpl(numbers : List[Long], delimeter : Long, acc : List[Long])\
    \ : List[Long] = {\n            numbers match {\n                case Nil => acc\n\
    \                case x :: Nil => x :: acc\n                case x :: y :: xs\
    \ => intersperseImpl(y :: xs, delimeter, x :: delimeter :: acc)\n            }\n\
    \        }\n        intersperseImpl(numbers, delimeter, List[Long]()).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphodjwrrg.scala:21)\n\tat Problem.main(tmphodjwrrg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) numbers\n        else {\n            val head =\
    \ numbers.head\n            val tail = numbers.tail\n            if (tail.isEmpty)\
    \ numbers\n            else head :: delimeter :: intersperse(tail, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \      val length = numbers.length\n      if (length <= 1) numbers\n      else\
    \ {\n        val delimeters = List.fill(length - 1)(delimeter)\n        (numbers\
    \ zip delimeters).flatMap(pair => List(pair._1, pair._2))\n      }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo6hzp7eh.scala:19)\n\tat Problem.main(tmpo6hzp7eh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def f(list : List[Long], delimeter : Long) : List[Long] = list match\
    \ {\n            case Nil => Nil\n            case x :: Nil => List(x)\n     \
    \       case x :: xs => x :: delimeter :: f(xs, delimeter)\n        }\n      \
    \  return f(numbers, delimeter)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseRec(numbers : List[Long], delimeter : Long, sofar : List[Long])\
    \ : List[Long] = numbers match {\n            case Nil => sofar\n            case\
    \ x :: Nil => x :: sofar\n            case x :: xs => intersperseRec(xs, delimeter,\
    \ x :: delimeter :: sofar)\n        }\n        intersperseRec(numbers, delimeter,\
    \ List[Long]()).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp35cry222.scala:19)\n\tat Problem.main(tmp35cry222.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \      if (numbers.length == 0) return numbers\n      var result = new ListBuffer[Long]\n\
    \      result += numbers(0)\n      for (i <- 1 until numbers.length) {\n     \
    \   result += delimeter\n        result += numbers(i)\n      }\n      return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph9ve33zu.scala:15)\n\tat Problem.main(tmph9ve33zu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        numbers.sliding(2, 1).toList.map(x\
    \ => x.toList).map(x => x :+ delimeter).flatten.init\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_n64ppm.scala:15)\n\tat Problem.main(tmpx_n64ppm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \    \tif (numbers.length <= 1) return numbers\n    \telse {\n    \t\tList(numbers.head)\
    \ ::: List(delimeter) ::: intersperse(numbers.tail, delimeter)\n    \t}\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        (numbers match {\n            case (x1::x2::xs) => x1::delimeter::intersperse((x2::xs),\
    \ (delimeter))\n            case (x1::Nil) => x1::Nil\n            case (Nil)\
    \ => Nil\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = numbers;\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            result = result.slice(0, (i * 2) + 1) ::: List(delimeter)\
    \ ::: result.slice((i * 2) + 1, result.length)\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case n :: Nil\
    \ => n :: Nil\n            case n :: ns => n :: delimeter :: intersperse(ns, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        val result = new ListBuffer[Long]\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            result += numbers(i)\n    \
    \        result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(numbers : List[Long], delimeter : Long, result\
    \ : List[Long]) : List[Long] = {\n            if (numbers.length == 0) result\n\
    \            else if (numbers.length == 1) result ::: List(numbers(0))\n     \
    \       else intersperseHelper(numbers.tail, delimeter, result ::: List(numbers(0),\
    \ delimeter))\n        }\n        intersperseHelper(numbers, delimeter, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        (numbers, delimeter) match {\n            case (List(), _) => List()\n\
    \            case (List(n), _) => List(n)\n            case (n :: ns, d) => n\
    \ :: d :: intersperse(ns, d)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \      if (numbers.isEmpty) List()\n      else List(numbers.head) ++ List(delimeter)\
    \ ++ intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9cf9txzh.scala:15)\n\tat Problem.main(tmp9cf9txzh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List[Long]()\n        numbers.foreach(x =>\
    \ {\n            result = result :+ x\n            result = result :+ delimeter\n\
    \        })\n        result.dropRight(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            result = result :+ numbers(i)\n            if (i != numbers.length\
    \ - 1) {\n                result = result :+ delimeter\n            }\n      \
    \  }\n        return result\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List[Long]()\n        var even : Boolean =\
    \ true\n        for (i <- numbers) {\n            if (even) result = result :+\
    \ i\n            else result = result :+ delimeter :+ i\n            even = !even\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp30o9l135.scala:21)\n\tat Problem.main(tmp30o9l135.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) {\n            numbers\n        } else {\n \
    \           numbers.slice(0, (numbers.length - 1)) ::: (delimeter :: numbers.slice((numbers.length\
    \ - 1), numbers.length))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpalks4dxn.scala:18)\n\tat Problem.main(tmpalks4dxn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else {\n            val (head\
    \ :: tail) = numbers\n            val newTail = intersperse(tail, delimeter)\n\
    \            if (newTail.length == 0) List(head)\n            else head :: delimeter\
    \ :: newTail\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case x :: Nil\
    \ => x :: Nil\n            case x :: y :: xs => x :: delimeter :: intersperse(y\
    \ :: xs, delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) List[Long]()\n        else if (numbers.length\
    \ == 1) numbers\n        else List[Long](numbers(0), delimeter) ::: intersperse(numbers.slice(1,\
    \ numbers.length), delimeter)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case first :: second :: rest => first ::\
    \ delimeter :: intersperse(second :: rest, delimeter)\n            case _ => numbers\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case x::Nil\
    \ => x::Nil\n            case x::xs => x::delimeter::intersperse(xs, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) {\n            numbers\n        } else {\n \
    \           val head = numbers.head\n            val tail = numbers.tail\n   \
    \         if (tail.length == 1) {\n                List(head, tail.head)\n   \
    \         } else {\n                head :: delimeter :: intersperse(tail, delimeter)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1hgw9nic.scala:24)\n\tat Problem.main(tmp1hgw9nic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) numbers\n        else List[Long](numbers(0))\
    \ ++ List[Long](delimeter) ++ intersperse(numbers.slice(1, numbers.length), delimeter)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptjoanjnh.scala:15)\n\tat Problem.main(tmptjoanjnh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def loop(numbers : List[Long], delimeter : Long, acc : List[Long]) :\
    \ List[Long] = {\n            if (numbers.isEmpty) acc.reverse\n            else\
    \ if (numbers.length == 1) acc.reverse ::: List(numbers.head)\n            else\
    \ loop(numbers.tail, delimeter, numbers.head :: delimeter :: acc)\n        }\n\
    \        loop(numbers, delimeter, List[Long]())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpffn2wg4k.scala:19)\n\tat Problem.main(tmpffn2wg4k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse(numbers : List[Long], delimeter : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (numbers.isEmpty) acc.reverse\n           \
    \ else if (numbers.tail.isEmpty) acc.reverse ++ List(numbers.head)\n         \
    \   else intersperse(numbers.tail, delimeter, delimeter :: numbers.head :: acc)\n\
    \        }\n        intersperse(numbers, delimeter, List[Long]())\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else if (numbers.length ==\
    \ 2) List(numbers(0), delimeter, numbers(1))\n        else List(numbers(0), delimeter)\
    \ ::: intersperse(numbers.slice(1, numbers.length), delimeter)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) numbers\n        else if (numbers.length ==\
    \ 1) numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def go(list : List[Long], remainder : List[Long]) : List[Long] = {\n\
    \            if (remainder.isEmpty) list\n            else go(list :+ remainder.head\
    \ :+ delimeter, remainder.tail)\n        }\n        go(List[Long](), numbers).dropRight(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) return (List[Long]())\n        if (numbers.length\
    \ == 1) return (numbers)\n        return (numbers.head :: (delimeter :: intersperse(numbers.tail,\
    \ delimeter)))\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse0(numbers : List[Long], result : List[Long]) : List[Long]\
    \ = {\n            if (numbers.isEmpty) result\n            else {\n         \
    \       intersperse0(numbers.tail, result :+ numbers.head :+ delimeter)\n    \
    \        }\n        }\n        intersperse0(numbers, List())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp8ljr6ei.scala:20)\n\tat Problem.main(tmpp8ljr6ei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) {\n            List[Long]()\n        } else\
    \ if (numbers.length == 1) {\n            numbers\n        } else {\n        \
    \    val first = numbers.head\n            val rest = numbers.tail\n         \
    \   val interspersed = intersperse(rest, delimeter)\n            first :: delimeter\
    \ :: interspersed\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \      if (numbers.length == 0) return List[Long]()\n      if (numbers.length\
    \ == 1) return numbers\n      numbers.tail.foldLeft(List[Long](numbers.head))((result,\
    \ elem) => result :+ delimeter :+ elem)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) {\n            return numbers\n        }\n \
    \       var result = ListBuffer[Long]()\n        result += numbers(0)\n      \
    \  for (i <- 1 until numbers.length) {\n            result += delimeter\n    \
    \        result += numbers(i)\n        }\n        return result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse(numbers : List[Long], delimeter : Long, result : List[Long])\
    \ : List[Long] = {\n            if (numbers.length < 2) result ++ numbers\n  \
    \          else {\n                intersperse(numbers.tail, delimeter, result\
    \ ++ List(numbers.head, delimeter))\n            }\n        }\n        intersperse(numbers,\
    \ delimeter, List[Long]())\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else {\n            val (first\
    \ :: second :: rest) = numbers\n            (first :: delimeter :: intersperse((second\
    \ :: rest), delimeter))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \    \t// TODO: Implement this function.\n    \tdef intersperse_help(numbers :\
    \ List[Long], acc: List[Long], delimeter : Long) : List[Long] = {\n    \t\tif\
    \ (numbers.length == 0) acc\n    \t\telse intersperse_help(numbers.tail, acc :+\
    \ numbers.head :+ delimeter, delimeter)\n    \t}\n    \tintersperse_help(numbers,\
    \ List(), delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpegb_hbzf.scala:19)\n\tat Problem.main(tmpegb_hbzf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty)\n            numbers\n        else\n           \
    \ numbers.head :: delimeter :: intersperse(numbers.tail, delimeter)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8n3b7ccw.scala:17)\n\tat Problem.main(tmp8n3b7ccw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val ret = new ListBuffer[Long]\n        ret += numbers(0)\n\
    \        for (i <- 1 until numbers.length) {\n            ret += delimeter\n \
    \           ret += numbers(i)\n        }\n        return ret.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) numbers\n        else if (numbers.length ==\
    \ 1) numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) return numbers\n        var result = new ListBuffer[Long]\n\
    \        result.append(numbers.head)\n        for (i <- numbers.tail) {\n    \
    \        result.append(delimeter)\n            result.append(i)\n        }\n \
    \       return result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(numbers : List[Long], acc : List[Long]) : List[Long]\
    \ = {\n            numbers match {\n                case Nil => acc\n        \
    \        case h :: Nil => acc :+ h\n                case h :: t => intersperseHelper(t,\
    \ acc :+ h :+ delimeter)\n            }\n        }\n        intersperseHelper(numbers,\
    \ List[Long]())\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = new ListBuffer[Long]\n\
    \        var i = 0\n        for (number <- numbers) {\n            if (i > 0)\
    \ result += delimeter\n            result += number\n            i += 1\n    \
    \    }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) {\n            return numbers\n        }\n     \
    \   val head = numbers.head\n        val tail = numbers.tail\n        if (tail.isEmpty)\
    \ {\n            return (List[Long](head))\n        }\n        return (List[Long](head,\
    \ delimeter)) ::: intersperse(tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        // Use pattern matching to define this function.\n        numbers match\
    \ {\n          case Nil => Nil\n          case x :: Nil => x :: Nil\n        \
    \  case x :: xs => x :: delimeter :: intersperse(xs, delimeter)\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978988
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) return numbers\n        val last = numbers.last\n\
    \        var result = List[Long]()\n        for (number <- numbers) {\n      \
    \      result = result :+ number\n            if (number != last) result = result\
    \ :+ delimeter\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgs06ohod.scala:22)\n\tat Problem.main(tmpgs06ohod.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List[Long]()\n        numbers.foreach(x =>\
    \ {\n            result = x :: delimeter :: result\n        })\n        result.drop(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_qjxkh7.scala:18)\n\tat Problem.main(tmp1_qjxkh7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) {\n            List[Long]()\n        } else\
    \ if (numbers.length == 1) {\n            numbers\n        } else {\n        \
    \    numbers.head :: delimeter :: intersperse(numbers.tail, delimeter)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List()\n        for (n <- numbers) {\n    \
    \        result = result :+ n\n            if (n != numbers.last) result = result\
    \ :+ delimeter\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxms_9g91.scala:20)\n\tat Problem.main(tmpxms_9g91.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) {\n            List[Long]()\n        } else {\n\
    \            val (head, tail) = (numbers.head, numbers.tail)\n            tail\
    \ match {\n                case Nil => List[Long](head)\n                case\
    \ _ => List[Long](head, delimeter) ::: intersperse(tail, delimeter)\n        \
    \    }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else {\n            numbers.take(1)\
    \ ::: List(delimeter) ::: intersperse(numbers.tail, delimeter)\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \      if (numbers.length <= 1) numbers\n      else {\n        val (init, last)\
    \ = numbers.splitAt(numbers.length - 1)\n        init.flatMap(n => List(n, delimeter))\
    \ :+ last.head\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) numbers\n        else {\n            if (numbers.tail.isEmpty)\
    \ numbers\n            else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case x :: Nil\
    \ => List(x)\n            case x :: xs => x :: delimeter :: intersperse(xs, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse0(numbers : List[Long], delimeter : Long, acc : List[Long])\
    \ : List[Long] = {\n            numbers match {\n                case Nil => acc\n\
    \                case x :: Nil => acc ::: List(x)\n                case x :: y\
    \ :: xs => intersperse0(y :: xs, delimeter, acc ::: List(x, delimeter))\n    \
    \        }\n        }\n        intersperse0(numbers, delimeter, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) numbers\n        else {\n            val (first,\
    \ rest) = (numbers.head, numbers.tail)\n            if (rest.length == 0) List(first)\n\
    \            else List(first, delimeter) ::: intersperse(rest, delimeter)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseInner(numbers : List[Long], delimeter : Long, result :\
    \ List[Long]) : List[Long] = {\n            if (numbers.length < 2) result ++\
    \ numbers\n            else intersperseInner(numbers.tail, delimeter, result ++\
    \ List(numbers.head, delimeter))\n        }\n        intersperseInner(numbers,\
    \ delimeter, List[Long]())\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseRec(numbers : List[Long], delimeter : Long, result : List[Long])\
    \ : List[Long] = {\n            if (numbers.length == 0) {\n                result\n\
    \            } else if (numbers.length == 1) {\n                numbers.head ::\
    \ result\n            } else {\n                intersperseRec(numbers.tail, delimeter,\
    \ numbers.head :: delimeter :: result)\n            }\n        }\n        intersperseRec(numbers,\
    \ delimeter, List[Long]()).reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk8suldk9.scala:23)\n\tat Problem.main(tmpk8suldk9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case head ::\
    \ Nil => List(head)\n            case head :: tail => head :: delimeter :: intersperse(tail,\
    \ delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) {\n            numbers\n        } else {\n     \
    \       numbers.dropRight(1).map(x => List(x, delimeter)).flatten ++ List(numbers.last)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \      var result : List[Long] = List[Long]()\n      for (i <- 0 until numbers.length)\
    \ {\n        result = result :+ numbers(i)\n        if (i != numbers.length -\
    \ 1) result = result :+ delimeter\n      }\n      result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) return numbers\n        val result = new ListBuffer[Long]\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result += numbers(i)\n\
    \            result += delimeter\n        }\n        result += numbers.last\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        val listBuffer = new ListBuffer[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            listBuffer += numbers(i)\n            if (i < numbers.length\
    \ - 1) listBuffer += delimeter\n        }\n        listBuffer.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List[Long]()\n        if (numbers.length ==\
    \ 0) {\n            result\n        } else {\n            var old : Long = numbers(0)\n\
    \            result = result :+ old\n            for (old <- numbers.tail) {\n\
    \                result = result :+ delimeter\n                result = result\
    \ :+ old\n            }\n            result\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) {\n            return List[Long]()\n       \
    \ }\n        return List[Long](numbers(0)) ++ List[Long](delimeter) ++ intersperse(numbers.slice(1,\
    \ numbers.length), delimeter)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbs_105n1.scala:17)\n\tat Problem.main(tmpbs_105n1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case head ::\
    \ Nil => head :: Nil\n            case head :: second :: tail => head :: delimeter\
    \ :: intersperse(second :: tail, delimeter)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) List[Long]()\n        else if (numbers.length\
    \ == 1) numbers\n        else {\n            numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \      if (numbers.length <= 1) numbers\n      else {\n        val head = numbers.head\n\
    \        val tail = numbers.tail\n        val rest = intersperse(tail, delimeter)\n\
    \        head :: delimeter :: rest\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List();\n        if (numbers.length == 0) {\n\
    \            return result;\n        }\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            result = numbers(i) :: delimeter :: result;\n        }\n\
    \        result = numbers(numbers.length - 1) :: result;\n        return result.reverse;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy6p06ggv.scala:22)\n\tat Problem.main(tmpy6p06ggv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case List() => numbers\n            case\
    \ _ => {\n                val result = ListBuffer[Long]()\n                for\
    \ (i <- 1 until numbers.length) {\n                    result += numbers(i - 1)\n\
    \                    result += delimeter\n                }\n                result\
    \ += numbers(numbers.length - 1)\n                result.toList\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        var i = 0\n\
    \        while (i < numbers.length - 1) {\n            result = result :+ numbers(i)\n\
    \            result = result :+ delimeter\n            i += 1\n        }\n   \
    \     result = result :+ numbers(numbers.length - 1)\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty)\n            return List()\n        if (numbers.tail.isEmpty)\n\
    \            return numbers\n        val interspersed : ListBuffer[Long] = new\
    \ ListBuffer()\n        for (number <- numbers) {\n            interspersed +=\
    \ number\n            interspersed += delimeter\n        }\n        interspersed.dropRight(1).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        val result = new ListBuffer[Long]\n\
    \        result += numbers(0)\n        for (i <- 1 until numbers.length) {\n \
    \           result += delimeter\n            result += numbers(i)\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        // Base case\n        if (numbers.length == 0) {\n            return\
    \ List[Long]()\n        }\n        // Recursive case\n        val res = numbers.tail.map(e\
    \ => List[Long](delimeter, e)).reduce((x, y) => x ::: y)\n        return List[Long](numbers.head)\
    \ ::: res\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse0(numbers : List[Long], result : List[Long]) : List[Long]\
    \ = {\n            if (numbers.length == 0) result\n            else if (numbers.length\
    \ == 1) result :+ numbers(0)\n            else intersperse0(numbers.tail, result\
    \ :+ numbers(0) :+ delimeter)\n        }\n        intersperse0(numbers, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseRecur(numbers : List[Long], delimeter : Long, result :\
    \ List[Long]) : List[Long] = {\n            if (numbers.length == 0) result.reverse\n\
    \            else if (numbers.length == 1) intersperseRecur(numbers.tail, delimeter,\
    \ numbers.head :: result)\n            else intersperseRecur(numbers.tail, delimeter,\
    \ numbers.head :: delimeter :: result)\n        }\n        intersperseRecur(numbers,\
    \ delimeter, List[Long]())\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv27fkxel.scala:19)\n\tat Problem.main(tmpv27fkxel.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def process(numbers : List[Long], delimeter : Long, result : List[Long])\
    \ : List[Long] = {\n            if (numbers.length <= 1) result.reverse ++ numbers\n\
    \            else process(numbers.tail, delimeter, numbers.head :: delimeter ::\
    \ result)\n        }\n        process(numbers, delimeter, List[Long]())\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1lbxwy6p.scala:18)\n\tat Problem.main(tmp1lbxwy6p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(numbers : List[Long], delimeter : Long, result\
    \ : List[Long]) : List[Long] = {\n            if (numbers.length == 0) {\n   \
    \             result\n            } else if (numbers.length == 1) {\n        \
    \        result :+ numbers(0)\n            } else {\n                intersperseHelper(numbers.tail,\
    \ delimeter, result :+ numbers(0) :+ delimeter)\n            }\n        }\n  \
    \      intersperseHelper(numbers, delimeter, List[Long]())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) {\n            List[Long]()\n        } else {\n\
    \            (List[Long](numbers.head)).concat(\n                intersperse(numbers.tail,\
    \ delimeter).flatMap((x) => List[Long](delimeter, x)))\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkifcaie8.scala:19)\n\tat Problem.main(tmpkifcaie8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \      numbers match {\n        case Nil => Nil\n        case n::Nil => List(n)\n\
    \        case n::ns => n::delimeter::intersperse(ns, delimeter)\n      }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) numbers\n        else if (numbers.tail.isEmpty)\
    \ numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseRec(numbers : List[Long], delimeter : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (numbers.length == 0) acc\n            else\
    \ if (numbers.length == 1) acc ::: numbers\n            else intersperseRec(numbers.tail,\
    \ delimeter, acc ::: List(numbers.head, delimeter))\n        }\n        intersperseRec(numbers,\
    \ delimeter, List[Long]())\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        // append delimeter at the tail of input list, and generate new list\
    \ with delimeter replaced by\n        // the pair of delimeter and current list\
    \ item. Don't forget to drop the last item in the list,\n        // which is the\
    \ original delimeter appended to the tail of the list.\n        (numbers :+ delimeter).sliding(2).map(x\
    \ => x.head :: x.last :: Nil).flatten.dropRight(1).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpioeuentw.scala:13:84 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        (numbers :+ delimeter).sliding(\e[31m2\e[0m).map(\e\
    [36mx\e[0m => x.head :: x.last :: Nil).flatten.dropRight(\e[31m1\e[0m).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value dropRight is not a member of Iterator[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \    \tif (numbers.isEmpty) return numbers\n    \telse return numbers.head ::\
    \ delimeter :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpif3s8u0t.scala:15)\n\tat Problem.main(tmpif3s8u0t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case a :: Nil\
    \ => a :: Nil\n            case a :: b :: Nil => a :: delimeter :: b :: Nil\n\
    \            case a :: b :: rest => a :: delimeter :: intersperse(b :: rest, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(numbers : List[Long], delimeter : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (numbers.length == 0) acc\n            else\
    \ if (numbers.length == 1) numbers(0) :: acc\n            else intersperseHelper(numbers.drop(1),\
    \ delimeter, numbers(0) :: delimeter :: acc)\n        }\n        intersperseHelper(numbers,\
    \ delimeter, List[Long]()).reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu7eo327j.scala:19)\n\tat Problem.main(tmpu7eo327j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case x :: Nil\
    \ => x :: Nil\n            case x :: xs => x :: delimeter :: intersperse(xs, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        // >>> assert(numbers != List[Long]())\n        val a : Long = numbers.last\n\
    \        // >>> assert(numbers != List[Long](a))\n        // >>> assert(!numbers.tail.isEmpty)\n\
    \        val b : Long = numbers.tail.last\n        numbers.init.map(x => List(x,\
    \ delimeter)).flatten.appended(b).appended(a)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty list\n\tat scala.collection.immutable.Nil$.last(List.scala:665)\n\
    \tat scala.collection.immutable.Nil$.last(List.scala:661)\n\tat Problem$.intersperse(tmp_q20k9ab.scala:11)\n\
    \tat Problem$.main(tmp_q20k9ab.scala:18)\n\tat Problem.main(tmp_q20k9ab.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def _iter(numbers : List[Long], acc : List[Long]) : List[Long] = {\n\
    \            if (numbers.length == 0) acc\n            else if (numbers.length\
    \ == 1) numbers.head :: acc\n            else numbers.head :: delimeter :: _iter(numbers.tail,\
    \ acc)\n        }\n        _iter(numbers, List[Long]()).reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp949q09l7.scala:19)\n\tat Problem.main(tmp949q09l7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case a :: Nil\
    \ => a :: Nil\n            case a :: rest => a :: delimeter :: intersperse(rest,\
    \ delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List[Long]()\n        for (i <- numbers.indices)\
    \ {\n            if (i == 0) {\n                result = result :+ numbers(i)\n\
    \            } else {\n                result = result :+ delimeter :+ numbers(i)\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.take(1) ::: (delimeter\
    \ :: intersperse(numbers.drop(1), delimeter))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case x :: Nil\
    \ => List(x)\n            case x :: xs => List(x, delimeter) ::: intersperse(xs,\
    \ delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse0(numbers : List[Long], delimeter : Long, result : List[Long])\
    \ : List[Long] = {\n            numbers match {\n                case Nil => result\n\
    \                case x::xs => intersperse0(xs, delimeter, result :+ x :+ delimeter)\n\
    \            }\n        }\n        intersperse0(numbers, delimeter, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7k0yr2i6.scala:20)\n\tat Problem.main(tmp7k0yr2i6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def aux(numbers : List[Long], delimeter : Long, result : List[Long])\
    \ : List[Long] = {\n            if (numbers.isEmpty) result.reverse\n        \
    \    else aux(numbers.tail, delimeter, numbers.head :: delimeter :: result)\n\
    \        }\n        aux(numbers, delimeter, List[Long]())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpof0dzi83.scala:18)\n\tat Problem.main(tmpof0dzi83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse(numbers : List[Long], delimeter : Long, acc : List[Long])\
    \ : List[Long] = {\n            numbers match {\n                case Nil => acc\n\
    \                case x :: Nil => x :: acc\n                case x :: y :: xs\
    \ => intersperse(y :: xs, delimeter, x :: delimeter :: acc)\n            }\n \
    \       }\n        intersperse(numbers, delimeter, Nil).reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgw1r6tkb.scala:21)\n\tat Problem.main(tmpgw1r6tkb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \    \t\tval result = new ListBuffer[Long]\n    \t\tfor (i <- 0 until numbers.length)\
    \ {\n    \t\t  result += numbers(i)\n    \t\t  if (i != numbers.length - 1) result\
    \ += delimeter\n    \t\t}\n    \t\tresult.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        return numbers.foldRight(List[Long]())({\n                (element, result)\
    \ => {\n                    delimeter :: element :: result\n                }\n\
    \            }).init\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: init of empty list\n\tat scala.collection.immutable.Nil$.init(List.scala:666)\n\
    \tat scala.collection.immutable.Nil$.init(List.scala:661)\n\tat Problem$.intersperse(tmpxkwfx7ly.scala:13)\n\
    \tat Problem$.main(tmpxkwfx7ly.scala:17)\n\tat Problem.main(tmpxkwfx7ly.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = ListBuffer[Long]()\n        var i\
    \ = 0\n        while (i < numbers.length - 1) {\n            result += numbers(i)\n\
    \            result += delimeter\n            i += 1\n        }\n        result\
    \ += numbers(numbers.length - 1)\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \      numbers match {\n        case List() => List()\n        case List(x) =>\
    \ List(x)\n        case x :: xs => x :: delimeter :: intersperse(xs, delimeter)\n\
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = Nil\n        for (number <- numbers) {\n  \
    \          result = result ::: List(number)\n            if (number != numbers.last)\
    \ result = result ::: List(delimeter)\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptpdwou0v.scala:20)\n\tat Problem.main(tmptpdwou0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        return (numbers.zip(List.concat(List[Long](delimeter), numbers))).map(x\
    \ => x._1 + x._2).slice(0, numbers.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkcyarlza.scala:14)\n\tat Problem.main(tmpkcyarlza.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \      var result : List[Long] = List[Long]()\n      if (numbers.length == 0)\
    \ return result\n      var result = List[Long](numbers(0))\n      for (i <- 1\
    \ until numbers.length) {\n        result = result ::: List[Long](delimeter) :::\
    \ List[Long](numbers(i))\n      }\n      return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy4x3pfxv.scala:12:10 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m      \e[33mvar\e[0m \e[36mresult\e[0m = List[\e[35mLong\e\
    [0m](numbers(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvariable\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659979015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = numbers\n        for (index <- 0 until numbers.length\
    \ - 1) {\n            result = result.patch(2 * index + 1, List(delimeter), 0)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaorx7xsd.scala:15)\n\tat Problem.main(tmpaorx7xsd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) {\n            return List[Long]()\n       \
    \ }\n        var result : List[Long] = List[Long]()\n        for (i <- (1 until\
    \ numbers.length)) {\n            result = result :+ numbers(i - 1)\n        \
    \    result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) return numbers\n        def intersperseHelper(numbers\
    \ : List[Long], acc : List[Long]) : List[Long] = {\n            if (numbers.length\
    \ == 1) return acc :+ numbers.head\n            intersperseHelper(numbers.tail,\
    \ acc :+ numbers.head :+ delimeter)\n        }\n        intersperseHelper(numbers,\
    \ List[Long]())\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case head ::\
    \ Nil => List(head)\n            case head :: tail => List(head, delimeter) :::\
    \ intersperse(tail, delimeter)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \      if (numbers.length == 0) return List[Long]()\n      if (numbers.length\
    \ == 1) return numbers\n      var result = List[Long]()\n      for (i <- 0 until\
    \ numbers.length - 1) {\n        result ::= numbers(i)\n        result ::= delimeter\n\
    \      }\n      result ::= numbers(numbers.length - 1)\n      result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case List() => List()\n            case\
    \ h :: Nil => List(h)\n            case h :: tail => h :: delimeter :: intersperse(tail,\
    \ delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case List() => List()\n            case\
    \ List(x) => List(x)\n            case x :: y :: rest => x :: delimeter :: intersperse(y\
    \ :: rest, delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 1 until numbers.length) {\n            result = result :+ numbers(i\
    \ - 1)\n            result = result :+ delimeter\n        }\n        result =\
    \ result :+ numbers(numbers.length - 1)\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List();\n        if (numbers.length < 2) {\n\
    \            result = numbers;\n        } else {\n            for (i <- Range(0,\
    \ numbers.length - 1)) {\n                result = result :+ numbers(i) :+ delimeter;\n\
    \            }\n            result = result :+ numbers(numbers.length - 1);\n\
    \        }\n        return result;\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n \
    \   assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def appendDelimeter(list : List[Long], next : Long) : List[Long] = {\n\
    \            if (list.isEmpty) List(next)\n            else list ::: List(delimeter)\
    \ ::: List(next)\n        }\n        numbers.foldLeft(List[Long]())(appendDelimeter)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979018
