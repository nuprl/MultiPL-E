name: HumanEval_138_is_equal_to_sum_even
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Evaluate whether the given number n can be written as the sum of exactly\
  \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n \
  \   // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>> isEqualToSumEven((8l))\n\
  \    // (true)\n    def isEqualToSumEven(n : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
  \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
  \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
  \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
  \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
completions: ["        val a = Stream.from(1).map(i => n - 2 * i)\n        val b =\
    \ a.takeWhile(_ >= 0)\n        //val c = b.dropWhile(_ / 2 * (b.length - 1) >\
    \ n)\n        val c = b.dropWhile(p => p * b.length > n * 2)\n        c.headOption\
    \ match {\n            case Some(x) => x % 2 == 0\n            case None => false\n\
    \        }", "        var max = (n - (4l * 2l)) / 2l\n        for (i <- (2l to\
    \ max).par) {\n            for (j <- (2l to max).par) {\n                for (k\
    \ <- (2l to max).par) {\n                    for (l <- (2l to max).par) {\n  \
    \                      if (i + j + k + l == n) return true\n                 \
    \   }\n                }\n            }\n        }\n        return false", " \
    \       if (n % 2 == 1) false\n        else {\n            val x = (1 to (n /\
    \ 2)).find(x => isEqualToSumEven(n - x))\n            x.isDefined\n        }",
  "        val s = sqrt(n).toLong\n        for (i <- 2l to s) {\n            val j\
    \ = n - i * i\n            if (j % 2 == 0) {\n                val k = sqrt(j /\
    \ 2).toLong\n                if (k * k * 2 == j) return true\n            }\n\
    \        }\n        return false", "        val nums = Buffer[Long]()\n      \
    \  for (i <- 1l to (sqrt(n.toDouble) / 2.0).toLong) {\n            val x = sqrt(n\
    \ - 4l * i * i).toLong\n            if (x * x == n - 4l * i * i) {\n         \
    \       nums += i\n                nums += x\n            }\n        }\n     \
    \   if (nums.size > 3) {\n            nums.distinct.permutations.exists {x =>\
    \ x.slice(0, 4).sum == n}\n        } else false", "        // Returns whether\
    \ the given number can be written as the sum of exactly 4 positive even numbers\n\
    \        def isEqualToSumEven_rec(n : Long, sum : Long, k : Int) : Boolean = {\n\
    \            if (n <= 0) {\n                // If the number can't be written\
    \ as the sum of exactly 4 positive even numbers\n                if (sum != n)\
    \ false\n                // If the number can be written as the sum of exactly\
    \ 4 positive even numbers\n                else k == 4\n            }\n      \
    \      else {\n                // Try excluding 2 from the sum\n             \
    \   val sum_exc = sum + 2\n                // Try including 2 in the sum\n   \
    \             val sum_inc = sum - 2\n                // Stop if the number becomes\
    \ negative\n                if (sum_inc < 0) false\n                // Try including\
    \ 2 in the sum\n                else isEqualToSumEven_rec(n, sum_inc, k + 1) ||\
    \ isEqualToSumEven_rec(n, sum_exc, k)\n            }\n        }\n        // Call\
    \ the recursive function\n        isEqualToSumEven_rec(n, n, 0)", "        //\
    \ Write your code here\n        return false", "        val limit = n / 4\n  \
    \      // For each i and j, determine whether (n - i - j) can be written as the\
    \ sum of two even numbers\n        for (i <- 0 to limit) {\n            for (j\
    \ <- 0 to limit) {\n                if (i % 2 == 0 && j % 2 == 0 && (n - i - j)\
    \ % 2 == 0) return true\n            }\n        }\n        return false", "  \
    \      val list = getListPrimesUnder(n)\n        list.length > 3", '        (n-4l)%2l==0l',
  "        val set = new HashSet[Long]\n        def f(n : Long) : Boolean = {\n  \
    \          if (n % 2 == 1) {\n                false\n            } else if (n\
    \ == 0) {\n                true\n            } else if (set.contains(n)) {\n \
    \               false\n            } else {\n                set.add(n)\n    \
    \            for (i <- (1 to (n / 2).toInt).reverse) {\n                    if\
    \ (f(n - i * 2)) {\n                        return true\n                    }\n\
    \                }\n                false\n            }\n        }\n        f(n)",
  "        // Your code here\n        false", "        val m = n/2\n        for (k\
    \ <- 1 to m.toInt) {\n            for (l <- 1 to m.toInt) {\n                for\
    \ (p <- 1 to m.toInt) {\n                    for (q <- 1 to m.toInt) {\n     \
    \                   if (k + l + p + q == m && k % 2 == 0 && l % 2 == 0 && p %\
    \ 2 == 0 && q % 2 == 0) {\n                            return true\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n        return false", "        // Implement the solution here\n  \
    \      false", "        if(n < 0) {\n            false\n        } else if(n %\
    \ 2 == 1) {\n            false\n        } else {\n            if(n == 0) {\n \
    \               true\n            } else {\n                var count = 0;\n \
    \               var i = n\n                while(i >= 2) {\n                 \
    \   if(isEqualToSumEven(n - i)) {\n                        return true\n     \
    \               }\n                    i -= 2\n                }\n           \
    \     return false\n            }\n        }", "        // TODO: implement your\
    \ solution here\n        false", "        val n2 = n / 2\n        val sqrt = math.sqrt(n2).toLong\n\
    \        for (x <- 0l to sqrt) {\n            for (y <- x to sqrt) {\n       \
    \         for (z <- y to sqrt) {\n                    for (w <- z to sqrt) {\n\
    \                        if (x + y + z + w == n2) {\n                        \
    \    return true\n                        }\n                    }\n         \
    \       }\n            }\n        }\n        return false", "        val evens\
    \ = generateEvens(n / 4)\n        val matches = evens.filter(x => (n - x) % 2\
    \ == 0)\n        return matches.nonEmpty", "        val f = (n - 1) % 3\n    \
    \    if (f == 0) {\n            if (n == 3) false\n            else true\n   \
    \     }\n        else if (f == 1) false\n        else true", "        if (n %\
    \ 2 == 1) return false\n        for (x <- (1l to (n / 4l))) {\n            for\
    \ (y <- (x to (n / 3l))) {\n                for (z <- (y to (n / 2l))) {\n   \
    \                 if (n == x + y + z + z) return true\n                }\n   \
    \         }\n        }\n        return false", "        if (n % 2 == 1) {\n  \
    \          return false\n        }\n        for (i <- 1l to n / 4) {\n       \
    \     if (isEqualToSumEvenHelper(n, i)) {\n                return true\n     \
    \       }\n        }\n        return false", "        // Write your code here\n\
    \        return false", '        false', '        return false', "        val\
    \ threshold = n / 4\n        var evenList = new ArrayBuffer[Long]()\n        var\
    \ oddList = new ArrayBuffer[Long]()\n        var sumEven = 0l\n        var sumOdd\
    \ = 0l\n        for (i <- 1 to threshold.toInt) {\n            if (i % 2 == 0)\
    \ {\n                evenList += i\n                sumEven += i\n           \
    \ } else {\n                oddList += i\n                sumOdd += i\n      \
    \      }\n        }\n        for (i <- 1 to threshold.toInt) {\n            if\
    \ (i % 2 == 0) {\n                val newSumEven = sumEven - i + (n - sumOdd -\
    \ i)\n                if (newSumEven == n) return true\n            } else {\n\
    \                val newSumOdd = sumOdd - i + (n - sumEven - i)\n            \
    \    if (newSumOdd == n) return true\n            }\n        }\n        false",
  "        val n4 = n / 4\n        val d4 = n4 % 2\n        n4 + d4 == n", "     \
    \   var res : Boolean = false\n        var i : Long = n / 4\n        var j : Long\
    \ = 0\n        while (i >= 0 && res == false) {\n            j = n - 2 * i\n \
    \           res = (j % 2 == 0) && (j / 2 <= i)\n            i -= 1\n        }\n\
    \        res", "        var dp = Array.fill(n.toInt + 1)(false)\n        dp(0)\
    \ = true\n        (2 to n.toInt by 2).foreach(i => for (j <- n.toInt to 0 by -1)\
    \ dp(j) = if (j >= i) dp(j) || dp(j - i) else dp(j))\n        dp(n.toInt)", " \
    \       val even = (2l to n).filter(x => x % 2 == 0)\n        var map = (0l to\
    \ (n / 2)).map(x => (x, 1)).toMap[Long, Int]\n        for (i <- even) {\n    \
    \        for (j <- even) {\n                for (k <- even) {\n              \
    \      for (l <- even) {\n                        if (i + j + k + l == n) {\n\
    \                            map(i) = map(i) + 1\n                           \
    \ map(j) = map(j) + 1\n                            map(k) = map(k) + 1\n     \
    \                       map(l) = map(l) + 1\n                        }\n     \
    \               }\n                }\n            }\n        }\n        var result\
    \ = map.filter(x => x._2 > 1)\n        result.size != 0", '        return isEqualToSumEven(n,
    2)', '        return false', "        def equalToSum(n : Long, sum : Long, count\
    \ : Int) : Boolean = {\n            if (n == sum && count == 4) true\n       \
    \     else if (n < sum || count > 4) false\n            else equalToSum(n, sum\
    \ + 2, count + 1) || equalToSum(n, sum, count)\n        }\n        equalToSum(n,\
    \ 0, 0)", "        if (n % 2 == 1) return false\n        val evenNumbers = Set(2,\
    \ 4, 6, 8)\n        val isEqual = new Memoize[Int, Boolean]({\n            k =>\
    \ {\n                if (k == 0) return true\n                if (k == 1) return\
    \ false\n                val evenSum = evenNumbers.map(i => {\n              \
    \      if (i <= k) isEqual(k - i) else false\n                }).reduce(_ || _)\n\
    \                evenSum\n            }\n        })\n        isEqual(n.toInt)",
  "        if (n < 8) return false\n        for (a <- 0l to n/4) {\n            for\
    \ (b <- a to n/3) {\n                for (c <- b to n/2) {\n                 \
    \   for (d <- c to n) {\n                        if (a + b + c + d == n) return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false", "        // Uncomment the line below and fill in the blanks\n\
    \        // n == _\n        false", "        var cache = Map[Long, Boolean]()\n\
    \        def findSolution(m : Long) : Boolean = {\n            // If a solution\
    \ is already cached, return it\n            if (cache.contains(m)) return cache(m)\n\
    \            // If m is even, check whether it can be written as 2^2 + 2^2 + 2^2\
    \ + 2^2\n            if (m % 2 == 0) {\n                if (m % 4 == 0) {\n  \
    \                  cache += (m -> true)\n                    return true\n   \
    \             }\n                // Check whether it can be written as sum of\
    \ four evens\n                if (findSolution(m / 2) == true) {\n           \
    \         cache += (m -> true)\n                    return true\n            \
    \    }\n            }\n            // It cannot be written as sum of four evens\n\
    \            cache += (m -> false)\n            return false\n        }\n    \
    \    findSolution(n)", "        if (n % 2 == 1) false\n        else {\n      \
    \      var count = 0\n            for (k <- 2 to n - 1) {\n                var\
    \ evenCount = 0\n                var sum = 0\n                var i = k\n    \
    \            while (i > 0) {\n                    if (i % 2 == 0) {\n        \
    \                evenCount += 1\n                        sum += i\n          \
    \          }\n                    i -= 1\n                }\n                if\
    \ (evenCount >= 4 && sum == n) {\n                    count += 1\n           \
    \     }\n            }\n            if (count > 0) true\n            else false\n\
    \        }", "        // Length of the row\n        val len = n - 1\n        //\
    \ Create the row\n        val row = Array.tabulate(len)(x => x + 2)\n        //\
    \ Create a cache\n        val cache = Array.tabulate(len)(x => 0l)\n        //\
    \ Create the function that will do the calculation\n        def f(n : Long, pos\
    \ : Int) : Long = {\n            // See if the value is in the cache\n       \
    \     if (cache(pos) != 0) return cache(pos)\n            // Get the row value\n\
    \            val value = row(pos)\n            // Calculate the result\n     \
    \       if (value == n) return 1\n            else if (value > n) return 0\n \
    \           else {\n                // Calculate the number of ways to make this\
    \ number\n                val ways = f(n - value, pos) + f(n, pos + 1)\n     \
    \           // Add it to the cache\n                cache(pos) = ways\n      \
    \          // Return the result\n                ways\n            }\n       \
    \ }\n        // Return the results\n        if (n % 2 == 0) f(n, 0) == 1 else\
    \ false", "        val set = Set[Long]()\n        set.isEmpty", "        var x\
    \ = n\n        val (a, b, c, d) = (1l, 2l, 4l, 8l)\n        while (x >= a && x\
    \ >= b && x >= c && x >= d) {\n            if (x == a + b + c + d) return true\n\
    \            x -= 2\n        }\n        false", "        if (n == 2) return false\n\
    \        if (n % 2 == 1) return false\n        // n > 2\n        for (i <- 2 to\
    \ n / 2) {\n            for (j <- i to n / 2) {\n                for (k <- j to\
    \ n / 2) {\n                    for (l <- k to n / 2) {\n                    \
    \    if (i + j + k + l == n) return true\n                    }\n            \
    \    }\n            }\n        }\n        return false", "        // 1. Define\
    \ the number of positive even numbers to add\n        val k = 4\n        // 2.\
    \ Evaluate all the possible combinations for the partitions of the numbers\n \
    \       val partitions = genAllPartitions(n, k)\n        // 3. Evaluate the result\n\
    \        if (partitions.size == 0) false\n        else (partitions.map(x => (x,\
    \ isValidPartition(x))).filter(x => x._2).size > 0)", "\tval nEven = (n % 2 ==\
    \ 0)\n\tval nGreaterThan4 = (n > 4)\n\tnEven && nGreaterThan4", "        def sumEven(n\
    \ : Long, k : Int, s : Long) : Boolean = k match {\n            case 1 => n ==\
    \ s\n            case _ => \n                var found = false\n             \
    \   var i = 2\n                while (i <= n && !found) {\n                  \
    \  if (n - s >= i && (n - s - i) % 2 == 0) found = sumEven(n, k - 1, s + i)\n\
    \                    i += 2\n                }\n                found\n      \
    \  }\n        sumEven(n, 4, 0)", "        // Let's recursively define a function\n\
    \        // isEqualToSumEvenRecurse(n, 4)\n        // to be true if and only if\
    \ n can be written as the sum of 4 positive even numbers\n        def isEqualToSumEvenRecurse(n\
    \ : Long, count : Int) : Boolean = {\n            if (n < 0) {\n             \
    \   false\n            } else if (n == 0 && count == 0) {\n                true\n\
    \            } else if (count == 0) {\n                false\n            } else\
    \ {\n                isEqualToSumEvenRecurse(n - 2, count - 1) || isEqualToSumEvenRecurse(n\
    \ - 4, count - 1) || isEqualToSumEvenRecurse(n - 6, count - 1) || isEqualToSumEvenRecurse(n\
    \ - 8, count - 1)\n            }\n        }\n        // Now isEqualToSumEven(n)\
    \ holds if and only if isEqualToSumEvenRecurse(n, 4) holds\n        isEqualToSumEvenRecurse(n,\
    \ 4)", "        var cnt = 0\n        var sum = 0l\n        for (i <- 0 to n.toInt\
    \ / 2 by 2) {\n            if (sum + i <= n) {\n                sum += i\n   \
    \             cnt += 1\n            }\n        }\n        return (cnt == 4 &&\
    \ sum == n)", "        var result = false\n        // Fill in your implementation\n\
    \        val div = n % 4\n        //println(div)\n        if(div == 0) result\
    \ = true\n        result", "        var res : Boolean = false\n        for (i\
    \ <- 2l to n / 4l) {\n            for (j <- i to n / 3l) {\n                for\
    \ (k <- j to n / 2l) {\n                    for (m <- k to n) {\n            \
    \            if (i + j + k + m == n) {\n                            res = true\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return res", "        val r = n % 4\n        r ==\
    \ 0", "        val set = new HashSet[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            set += i\n        }\n        val count = set.count(x => x % 2\
    \ == 0)\n        count > 0", "        var b = false\n        for (i <- (1l) to\
    \ (n / 4l); j <- (i) to (n / 3l); k <- (j) to (n / 2l); l <- (k) to (n)) {\n \
    \           if (i + j + k + l == n && i % 2 == 0 && j % 2 == 0 && k % 2 == 0 &&\
    \ l % 2 == 0) {\n                b = true\n            }\n        }\n        return\
    \ b", "        // Fill in your code here\n        var sum = 0L\n        val seq\
    \ = Range(2,n)\n        var result = false\n        for (x <- seq if x % 2 ==\
    \ 0 && sum < n) {\n            sum += x\n            if (sum == n) {\n       \
    \         result = true\n            }\n        }\n        result", '        n%2
    == 0 && n%4 != 0', "        val upperBound = n/4\n        for (i <- 1l to upperBound)\
    \ {\n            val result = (2*i) + (2*(n - i))\n            if (result == n)\
    \ return true\n        }\n        return false", "        var total = n\n    \
    \    for (i <- 1 to 2) {\n            total = total - 2\n            if (total\
    \ == 0) {\n                return true\n            }\n            else if (total\
    \ < 0) {\n                return false\n            }\n        }\n        return\
    \ false", "        // My solution\n        var found = false\n        (1l to (n\
    \ / 4l)).foreach(x => {\n            if (found) return true\n            (1l to\
    \ (n / 4l)).foreach(y => {\n                if (found) return true\n         \
    \       (1l to (n / 4l)).foreach(z => {\n                    if (found) return\
    \ true\n                    (1l to (n / 4l)).foreach(w => {\n                \
    \        if (x * 2l + y * 2l + z * 2l + w * 2l == n) found = true\n          \
    \          })\n                })\n            })\n        })\n        false",
  "        if (n % 2 == 1) false\n        else {\n            val sqrtn = sqrt(n.toDouble).toLong\n\
    \            for (x <- 2l to sqrtn by 2) {\n                val y = n - x\n  \
    \              if (y % 2 == 0) {\n                    val sqrty = sqrt(y.toDouble).toLong\n\
    \                    for (a <- 2l to sqrty by 2) {\n                        val\
    \ b = y - a\n                        if (b % 2 == 0) {\n                     \
    \       val sqrtb = sqrt(b.toDouble).toLong\n                            for (c\
    \ <- 2l to sqrtb by 2) {\n                                val d = b - c\n    \
    \                            if (d % 2 == 0) return true\n                   \
    \         }\n                        }\n                    }\n              \
    \  }\n            }\n            false\n        }", "        for (i <- 2 to (n\
    \ / 4).toInt) {\n            for (j <- i + 2 to (n / 3).toInt) {\n           \
    \     for (k <- j + 2 to (n / 2).toInt) {\n                    val l = n - i -\
    \ j - k\n                    if (i % 2 == 0 && j % 2 == 0 && k % 2 == 0 && l %\
    \ 2 == 0) return true\n                }\n            }\n        }\n        return\
    \ false", "        var odd = (n - 2) / 2\n        while (odd >= 0) {\n       \
    \     if (isEqualToSumOdd(odd)) {\n                return true\n            }\n\
    \            odd -= 2\n        }\n        return false", "        for (a <- 2l\
    \ to n by 2)\n        for (b <- 2l to n by 2)\n        for (c <- 2l to n by 2)\n\
    \        for (d <- 2l to n by 2)\n        if (a + b + c + d == n) return true\n\
    \        return false", "        val b = false\n        val e = 2\n        val\
    \ r = 4\n        for (i1 <- (1 to e)) {\n            val j1 = i1 * 2\n       \
    \     for (i2 <- (1 to e)) {\n                val j2 = i2 * 2\n              \
    \  for (i3 <- (1 to e)) {\n                    val j3 = i3 * 2\n             \
    \       for (i4 <- (1 to e)) {\n                        val j4 = i4 * 2\n    \
    \                    if (j1 + j2 + j3 + j4 == n) return true\n               \
    \     }\n                }\n            }\n        }\n        false", "      \
    \  // Compute the result using the given formula\n        // After simplification,\
    \ you should get:\n        // sqrt(8*n - 7) % 1 == 0.0\n        // sqrt(8*n -\
    \ 7) % 1 == 0\n        // sqrt(8*n - 7) % 1\n        // For example, for 4, this\
    \ would give sqrt(28) = 5.291502622129181, which is not equal to 0\n        //\
    \ For 6, this would give sqrt(38) = 6.164414002968976, which is not equal to 0\n\
    \        // For 8, this would give sqrt(54) = 7.3484692283495345, which is not\
    \ equal to 0\n        // For 10, this would give sqrt(70) = 8.366600265340756,\
    \ which is not equal to 0\n        // However, for 12, this would give sqrt(86)\
    \ = 9.273618495495704, which is equal to 0\n        val root = sqrt(8*n - 7)\n\
    \        // println(root)\n        // Although Scala allows = and == to be used\
    \ interchangably, it is best to be explicit about it\n        root % 1 == 0",
  "        val d = n / 2\n        return ((d + 1) * d % 2 == 0)", '        (1 to 4).map(i
    => pow(2, i).toLong).combinations(4).map(i => i.sum).exists(i => i == n)', " \
    \       // A number can be written as the sum of 4 positive even numbers iff n\
    \ is divisible by 4\n        n % 4 == 0", "        if (n % 2 == 1) return false\n\
    \        for (i <- 1 to sqrt(n).toInt) {\n            for (j <- i to sqrt(n).toInt)\
    \ {\n                for (k <- j to sqrt(n).toInt) {\n                    for\
    \ (l <- k to sqrt(n).toInt) {\n                        if (i + j + k + l == n)\
    \ return true\n                    }\n                }\n            }\n     \
    \   }\n        return false", "        def isEqualToSumEven_(n : Long, numEvens\
    \ : Int) : Boolean = {\n            if (n < 0) false\n            else if (n ==\
    \ 0 && numEvens == 4) true\n            else if (n > 0 && numEvens == 4) false\n\
    \            else isEqualToSumEven_(n - 2, numEvens + 1) || isEqualToSumEven_(n,\
    \ numEvens)\n        }\n        isEqualToSumEven_(n, 0)", "        if (n % 2 ==\
    \ 1) return false\n        var start = 4l\n        var end = n / 2\n        while\
    \ (start <= end) {\n            var sum = 0l\n            var tmp = start\n  \
    \          while (tmp <= end) {\n                sum += tmp\n                tmp\
    \ += 2\n            }\n            if (sum == n) return true\n            start\
    \ += 2\n            end -= 2\n        }\n        return false", "        // Declare\
    \ a sum variable\n        var sum : Long = 0\n        // Declare a count variable\n\
    \        var count : Long = 0\n        // Declare a last used variable\n     \
    \   var last : Long = 2\n        // Iterate until count is greater than or equal\
    \ to 4 or sum is greater than or equal to n\n        while(count < 4 && sum <\
    \ n) {\n            // Add last to sum\n            sum += last\n            //\
    \ Add 1 to count\n            count += 1\n            // Add 2 to last\n     \
    \       last += 2\n        }\n        // Evaluate whether sum is equal to n\n\
    \        sum == n", "        def search(n : Long, m : Long) : Boolean = {\n  \
    \          if (n < m) {\n                false\n            } else if (n == m)\
    \ {\n                true\n            } else {\n                search(n - m,\
    \ m + 2) || search(n, m + 2)\n            }\n        }\n        if (n % 2 == 0)\
    \ {\n            search(n, 2)\n        } else {\n            false\n        }",
  "        // This is only a stub method\n        false", "        if (n == 0) return\
    \ false\n        val iterator = Iterator.iterate(n)(m => m - 2).takeWhile(_ >=\
    \ 0)\n        val odd = iterator.next\n        return ((n - odd) % 2 == 0)", " \
    \       n match {\n            case n if n < 4 => false\n            case n if\
    \ n % 2 == 0 => true\n            case n => false\n        }", "        val limit\
    \ = (n / 4l).toInt\n        val answer = (for (a <- 1 to limit; b <- 1 to limit;\
    \ c <- 1 to limit; d <- 1 to limit) yield {\n            if (a + b + c + d ==\
    \ n) true else false\n        }).contains(true)\n        answer", "        if\
    \ (n % 2 == 1) return false\n        val mm = n / 2\n        var m = mm\n    \
    \    while (m >= 0) {\n            var k = mm - m\n            while (k >= 0)\
    \ {\n                val q = m - k\n                if (q % 2 == 0) {\n      \
    \              val p = q / 2\n                    if (2 * (m + k + p) == n) return\
    \ true\n                }\n                k -= 1\n            }\n           \
    \ m -= 1\n        }\n        return false", "        val positiveEvenNumbers =\
    \ new MutableList[Long]\n        var i = 2\n        while (i <= n) {\n       \
    \     if (i % 2 == 0) positiveEvenNumbers += i\n            i += 1\n        }\n\
    \        positiveEvenNumbers.exists(a => positiveEvenNumbers.exists(b => positiveEvenNumbers.exists(c\
    \ => positiveEvenNumbers.exists(d => a + b + c + d == n))))", '        return
    false', "        // This is your job. ;)\n        false", "        var f = false\n\
    \        var i = 2l\n        while(i <= n / 4 && !f) {\n            if (2 * i\
    \ < n) {\n                f = isEqualToSumEven((n - 2 * i))\n            }\n \
    \           i += 2\n        }\n        return f || n % 4 == 0", '        false',
  "        val sqrtOfN = sqrt(n).toLong\n        val nums = (2l to sqrtOfN by 2).toArray\n\
    \        val sums = new Array[Boolean](nums.length * nums.length)\n        for\
    \ (i <- 0 until nums.length) {\n            for (j <- 0 until nums.length) {\n\
    \                sums(i * nums.length + j) = nums(i) + nums(j) <= n\n        \
    \    }\n        }\n        // Check whether nums(i) + nums(j) + nums(k)\n    \
    \    // + nums(l) = n for some i, j, k, l\n        for (i <- 0 until nums.length)\
    \ {\n            if (sums(i * nums.length + i)) {\n                for (j <- 0\
    \ until nums.length) {\n                    if (sums(i * nums.length + j) && sums(j\
    \ * nums.length + j)) {\n                        for (k <- 0 until nums.length)\
    \ {\n                            if (sums(i * nums.length + k) && sums(j * nums.length\
    \ + k) && sums(k * nums.length + k)) {\n                                for (l\
    \ <- 0 until nums.length) {\n                                    if (sums(i *\
    \ nums.length + l) && sums(j * nums.length + l) && sums(k * nums.length + l) &&\
    \ sums(l * nums.length + l)) {\n                                        val sum\
    \ = nums(i) + nums(j) + nums(k) + nums(l)\n                                  \
    \      if (sum == n) return true\n                                    }\n    \
    \                            }\n                            }\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n        return false", '        false', "        val list = ListBuffer[Long]()\n\
    \        var nums = n\n        var i = 2l\n        while (nums > 0) {\n      \
    \      if (nums - i >= 0) {\n                nums -= i\n                list +=\
    \ i\n            }\n            i += 2\n        }\n        list.length == 4",
  "        // your code here\n        (1 to 10).map(e => n == n/4 + n/4 + n/4 + n/4\
    \ + n%4).contains(true)", '        ???', "        for (a <- 2l to n/4l) {\n  \
    \          for (b <- a to n/3l) {\n                for (c <- b to n/2l) {\n  \
    \                  for (d <- c to n) {\n                        if (a + b + c\
    \ + d == n) return true\n                    }\n                }\n          \
    \  }\n        }\n        return false", '        // your code here', "       \
    \ if (n % 2 == 1) false\n        else {\n            val m = sqrt(n).toLong\n\
    \            val p = new Prime(m)\n            var result = false\n          \
    \  var i = m\n            while (i >= 2 && !result) {\n                if (p.isPrime(i))\
    \ {\n                    var j = 1\n                    while (j <= m && !result)\
    \ {\n                        val k = n - 2 * i - 2 * j\n                     \
    \   if (k > 0 && p.isPrime(j) && p.isPrime(k)) {\n                           \
    \ result = true\n                        }\n                        j += 1\n \
    \                   }\n                }\n                i -= 1\n           \
    \ }\n            result\n        }", "        if (n % 2 == 1) false else {\n \
    \           val max = (n / 2).toInt\n            for (i <- 1 to max) {\n     \
    \           for (j <- 1 to max) {\n                    for (k <- 1 to max) {\n\
    \                        for (l <- 1 to max) {\n                            if\
    \ (i + j + k + l == n / 2) return true\n                        }\n          \
    \          }\n                }\n            }\n            false\n        }",
  "        if (n % 2 == 1) {\n            return false\n        }\n        val limit\
    \ = sqrt(n / 2).toLong + 1\n        // odd even odd even\n        for (i <- (3L\
    \ to limit by 2); j <- (2L to limit by 2)) {\n            val k = n - i - j\n\
    \            if (k % 2 == 0) {\n                return true\n            }\n \
    \       }\n        return false", "        val evens = ArrayBuffer[Long]()\n \
    \       evens += 2\n        while (evens.sum < n) evens += (evens.last + 2)\n\
    \        if (evens.sum == n) return true\n        false", "        if (n % 2 ==\
    \ 1) return false\n        val num = n / 2\n        var cnt : Long = 0\n     \
    \   var a : Long = 1\n        var b : Long = 3\n        while (a < num) {\n  \
    \          var p = a * b\n            while (p < num) {\n                if (p\
    \ == num) cnt += 1\n                b += 2\n                p = a * b\n      \
    \      }\n            a += 1\n            b = a + 2\n        }\n        if (cnt\
    \ >= 4) return true\n        return false", "        if (n % 2 == 1) return false\n\
    \        var flag = false\n        for (a <- (0 to (n/4).toInt).reverse) {\n \
    \           for (b <- (0 to (n/4).toInt).reverse) {\n                if (a*2 +\
    \ b*2 == n) flag = true\n            }\n        }\n        return flag", "   \
    \     val factors = factorCount(n)\n        if (factors.size < 4) false\n    \
    \    else {\n            val comb = factors.combinations(4)\n            val prods\
    \ = comb.map(_.product)\n            val sums = prods.map(sumFactorCount(_))\n\
    \            val evens = sums.filter(_ == 2)\n            evens.nonEmpty\n   \
    \     }", '        return n % 2 == 0 && n % 4 != 0', '        (1l to (n / 2) by
    2).forall(x => !(n % x == 0l && isPrime(x)))', "        val upperBound = n / 4\n\
    \        val sums = Array.fill(n + 1)(false)\n        sums(0) = true\n       \
    \ for (i <- 2 to upperBound) {\n            for (j <- n to i by -2) {\n      \
    \          sums(j) = sums(j) || sums(j - i)\n            }\n        }\n      \
    \  return sums(n)", "        for (i <- 0 to 2) {\n          for (j <- 0 to 2)\
    \ {\n            for (k <- 0 to 2) {\n              for (l <- 0 to 2) {\n    \
    \            if (n == 4*i + 6*j + 8*k + 10*l) return true\n              }\n \
    \           }\n          }\n        }\n        return false", "      val a = (1\
    \ to floor(sqrt(n)).toInt)\n      val b = a.map(x => (x, n - x))\n      b.exists(x\
    \ => x._1 % 2 == 0 && x._2 % 2 == 0)", "      val primes = Prime.decompose(n)\n\
    \      if (primes.filter(Prime.isEven(_)).length == 4) {\n        val lst = primes.filter(Prime.isEven(_)).map(p\
    \ => pow(p, primes.count(_ == p) / 2).toLong)\n        lst.combinations(4).toList.exists(_.reduceLeft(_\
    \ * _) == n)\n      } else {\n        false\n      }", "        val m = n / 2\n\
    \        var cnt = 0\n        var flag = false\n        var l = new ListBuffer[Long]\n\
    \        for (i <- 0 to m.toInt) {\n            l += (i * 2).toLong\n        }\n\
    \        for (i <- 0 to l.length - 1) {\n            for (j <- i + 1 to l.length\
    \ - 1) {\n                for (k <- j + 1 to l.length - 1) {\n               \
    \     for (h <- k + 1 to l.length - 1) {\n                        if (l(i) + l(j)\
    \ + l(k) + l(h) == n) flag = true\n                    }\n                }\n\
    \            }\n        }\n        flag", "        val list = primeFactorize(n)\n\
    \        val add = list.reduce((p1, p2) => p1 + p2)\n        if (add % 4 == 0)\
    \ {\n            true\n        } else {\n            false\n        }", '        return
    (n % 2 == 0) && Array(n / 2, n / 2, n / 2, n / 2).permutations.exists((x) => x.sum
    == n)', "        var result = false\n        if(n % 2 == 0) {\n            for(a\
    \ <- 2l to n / 4)\n                for(b <- a to n / 2)\n                    for(c\
    \ <- b to n / 2)\n                        for(d <- c to n / 2)\n             \
    \               if(a + b + c + d == n)\n                                result\
    \ = true\n        }\n        result", "        var (i, j, k, l) = (2l, 2l, 2l,\
    \ 2l)\n        while (i <= n / 4) {\n            j = 2\n            while (j <=\
    \ n / 3) {\n                k = 2\n                while (k <= n / 2) {\n    \
    \                l = 2\n                    while (l <= n) {\n               \
    \         if (i + j + k + l == n) {\n                            return true\n\
    \                        }\n                        l += 2\n                 \
    \   }\n                    k += 2\n                }\n                j += 2\n\
    \            }\n            i += 2\n        }\n        return false", "      \
    \  var j = 1\n        for (j <- 1 to n / 2) {\n            if (n % j == 0 && j\
    \ % 2 == 0) {\n                var k = 1\n                for (k <- 1 to n / 2)\
    \ {\n                    if (n % k == 0 && k % 2 == 0 && j != k) {\n         \
    \               var l = 1\n                        for (l <- 1 to n / 2) {\n \
    \                           if (n % l == 0 && l % 2 == 0 && j != l && k != l)\
    \ {\n                                var m = 1\n                             \
    \   for (m <- 1 to n / 2) {\n                                    if (n % m ==\
    \ 0 && m % 2 == 0 && j != m && k != m && l != m) {\n                         \
    \               if (j + k + l + m == n) {\n                                  \
    \          return true\n                                        }\n          \
    \                          }\n                                }\n            \
    \                }\n                        }\n                    }\n       \
    \         }\n            }\n        }\n        return false", "        // This\
    \ set will store the solutions to the even number sum problem. It will be used\
    \ to\n        // filter out solutions that are not unique by computing the sum\
    \ of the values in the set.\n        val solutions = SortedSet[Long]()\n     \
    \   // This set will store all of the unique prime numbers that have been used\
    \ in the\n        // solutions.\n        val primes = SortedSet[Long]()\n    \
    \    // This function will generate solutions by combining prime numbers and solutions\
    \ to\n        // make new solutions.\n        def generate(prime : Long, solution\
    \ : Long) : Unit = {\n            // Combine the prime number and the solution.\n\
    \            val sum = prime + solution\n            // If the sum is less than\
    \ the number we're trying to generate, then add the solution to\n            //\
    \ the set of solutions and generate more solutions.\n            if (sum < n)\
    \ {\n                solutions += sum\n                generate(prime, sum)\n\
    \            }\n        }\n        // Iterate through the prime numbers.\n   \
    \     for (prime <- Prime.primes) {\n            // If the prime number is already\
    \ in the primes set then continue\n            if (primes.contains(prime)) continue\n\
    \            // Otherwise add the prime number to the primes set and generate\
    \ solutions\n            primes += prime\n            generate(prime, prime)\n\
    \        }\n        // Return whether the number n can be written as the sum of\
    \ exactly 4 positive even numbers\n        solutions.sum == n", "        val b\
    \ = new Array[Boolean](n.toInt + 1)\n        for (i <- 0 to n.toInt) b(i) = (i\
    \ % 2 == 0)\n        for (i <- 4 to n.toInt) {\n            for (j <- 0 to i -\
    \ 4) b(i) = b(i) || (b(j) && b(i - j - 2))\n        }\n        b(n.toInt)", " \
    \       if (n % 2 == 1) return false\n        val sqrtn = sqrt(n).toLong\n   \
    \     for (a <- (2l to sqrtn by 2)) {\n            for (b <- (2l to sqrtn by 2))\
    \ {\n                for (c <- (2l to sqrtn by 2)) {\n                    for\
    \ (d <- (2l to sqrtn by 2)) {\n                        if (a + b + c + d == n)\
    \ return true\n                    }\n                }\n            }\n     \
    \   }\n        return false", "        var nn = n.toInt\n        var s = 0\n \
    \       while (nn > 0) {\n            nn -= (nn & -nn) * 2\n            s += 1\n\
    \        }\n        s == 4", "        val l = n / 2\n        var r = n - l\n \
    \       while (l >= 0) {\n            if (isEqualToSumEven2(r, l)) {\n       \
    \         return true\n            }\n            l -= 2\n            r += 2\n\
    \        }\n        return false", "        // Write the body of this function\n\
    \        var result = false\n        for (i <- 2l to n / 4l; j <- i to n / 3l;\
    \ k <- j to n / 2l)\n            if (2l * i + 2l * j + 2l * k == n) result = true\n\
    \        result", "        val k = n / 2\n        val limit = (ceil(sqrt(k.toDouble))).toLong\n\
    \        for (a <- 2l to limit) {\n            val b = k / a\n            if (a\
    \ * b == k && b % 2 == 0) {\n                return true\n            }\n    \
    \    }\n        return false", "        val half = (n + 1) / 2\n        val range\
    \ = Range(2, half)\n        var res = false\n        range.foreach(i => {\n  \
    \          val temp = n - i\n            if(temp % 2 == 0) res = true\n      \
    \  })\n        res", "        val evens = ArrayBuffer[Long]()\n        var x =\
    \ 0l\n        var y = n / 2\n        for (i <- 1l to n / 2) {\n            val\
    \ z = n - i - i\n            if (z % 2 == 0) {\n                evens += z\n \
    \           }\n        }\n        evens.length == 4", "      val m = n / 2\n \
    \     val result = new Array[Long](m.toInt + 1)\n      var sum = 0\n      for\
    \ (i <- 0 to m.toInt) {\n        result(i) = (n - 2 * i) / 2\n        sum += result(i)\n\
    \      }\n      sum == n / 2", "      def isEqualToSumEvenHelper(n : Long, sum\
    \ : Long, count : Int) : Boolean = {\n        if (count == 0) sum == n\n     \
    \   else if (n - sum < 2) false\n        else {\n          val e = n - sum\n \
    \         isEqualToSumEvenHelper(n, sum + e - (e & 1), count - 1)\n        }\n\
    \      }\n      if (n == 2) false\n      else isEqualToSumEvenHelper(n, 2, 3)",
  "        def isEven(x : Long) = x % 2 == 0\n        def isEqualToSumEven2(x : Long,\
    \ y : Long, z : Long, w : Long) : Boolean = {\n            val s = x + y + z +\
    \ w\n            if (s > n) false\n            else if (s == n) true\n       \
    \     else {\n                val (x1, y1, z1, w1) = \n                    if\
    \ (isEven(x)) if (isEven(y)) if (isEven(z)) (x, y, z, w + 2) else (x, y, z + 2,\
    \ 2) else (x, y + 2, 2, 2) else (x + 2, 2, 2, 2)\n                isEqualToSumEven2(x1,\
    \ y1, z1, w1)\n            }\n        }\n        isEqualToSumEven2(2, 2, 2, 2)",
  "        if (n == 4) return false\n        if (n == 6) return false\n        if\
    \ (n == 8) return true\n        for (i <- n / 2 - 1 to n / 2 + 1) {\n        \
    \    if (i == 2) return false\n            if (i % 2 == 0) {\n               \
    \ val r = n - i\n                if (r == 4) return false\n                if\
    \ (r == 6) return false\n                if (r == 8) return true\n           \
    \     for (j <- r / 2 - 1 to r / 2 + 1) {\n                    if (j == 2) return\
    \ false\n                    if (j % 2 == 0) {\n                        val s\
    \ = r - j\n                        if (s == 4) return false\n                \
    \        if (s == 6) return false\n                        if (s == 8) return\
    \ true\n                        for (k <- s / 2 - 1 to s / 2 + 1) {\n        \
    \                    if (k == 2) return false\n                            if\
    \ (k % 2 == 0) {\n                                val t = s - k\n            \
    \                    if (t == 4) return false\n                              \
    \  if (t == 6) return false\n                                if (t == 8) return\
    \ true\n                            }\n                        }\n           \
    \         }\n                }\n            }\n        }\n        false", "  \
    \      if (n % 2 == 1) return false\n        val ceil = n / 4\n        val floor\
    \ = n / 2\n        for (a <- ceil until floor by 2)\n            for (b <- a +\
    \ 2 until floor by 2)\n                for (c <- b + 2 until floor by 2)\n   \
    \                 for (d <- c + 2 until floor by 2)\n                        if\
    \ (a + b + c + d == n) return true\n        return false", "        def subprob(n\
    \ : Long, s : Long, t : Long) : Boolean = {\n            if (n == 0) true\n  \
    \          else if (n < s) false\n            else subprob(n - s, s + 2, t + 1)\
    \ || subprob(n, s + 2, t)\n        }\n        subprob(n, 2, 0)", "        def\
    \ isEqualToSumEvenHelper(n : Long, ev : Long) : Boolean = {\n            if (n\
    \ == 0) {\n                true\n            } else if (n < 0) {\n           \
    \     false\n            } else {\n                isEqualToSumEvenHelper(n -\
    \ ev, ev + 2) || isEqualToSumEvenHelper(n, ev + 2)\n            }\n        }\n\
    \        isEqualToSumEvenHelper(n, 2)", "        val e = (2l until n - 8l by 2l).toArray.reverse\n\
    \        val a = (0 until e.length).toArray\n        val c = (1 until 5).toArray\n\
    \        a.permutations.filter(i => c.zip(i).map(x => e(x._2) * x._1).sum == n).length\
    \ > 0", "        val sqrt = sqrt(n).toLong\n        for (i <- 0 to sqrt.toInt)\
    \ {\n            val diff = n - i * i\n            val sqrt = sqrt(diff).toLong\n\
    \            for (j <- 0 to sqrt.toInt) {\n                val diff2 = diff -\
    \ j * j\n                val sqrt = sqrt(diff2).toLong\n                for (k\
    \ <- 0 to sqrt.toInt) {\n                    val diff3 = diff2 - k * k\n     \
    \               val sqrt = sqrt(diff3).toLong\n                    for (l <- 0\
    \ to sqrt.toInt) {\n                        if (diff3 == l * l) return true\n\
    \                    }\n                }\n            }\n        }\n        false",
  '        // Fill here!', "        for (i <- 0 to n.toInt / 2) {\n            for\
    \ (j <- 0 to (n - 2 * i).toInt / 2) {\n                for (k <- 0 to (n - 2 *\
    \ i - 2 * j).toInt / 2) {\n                    val l = n - 2 * i - 2 * j - 2 *\
    \ k\n                    if (i + j + k + l == n / 2) return true\n           \
    \     }\n            }\n        }\n        return false", "\tdef helper(n : Long,\
    \ k : Int) : Boolean = k match {\n\t    case 0 => n == 0\n\t    case _ => (1 to\
    \ (n / 2)).exists(x => helper(n - x * 2, k - 1))\n\t}\n\thelper(n, 4)", '        //
    Fill in the code here', "        var table = HashMap[Long, Boolean]()\n      \
    \  def isEqualToSumEven(n : Long, available : List[Long]) : Boolean = {\n    \
    \        if (n == 0) return true\n            if (n < 0) return false\n      \
    \      if (available.isEmpty) return false\n            val x = available.head\n\
    \            if (table.contains(n - x)) {\n                table(n - x)\n    \
    \        } else {\n                val ret = isEqualToSumEven(n - x, List(2, 4,\
    \ 6, 8).map(x => x - x % 2)) || isEqualToSumEven(n, available.tail)\n        \
    \        table(n - x) = ret\n                ret\n            }\n        }\n \
    \       isEqualToSumEven(n, List(2, 4, 6, 8).map(x => x - x % 2))", "        //\
    \ Quick check\n        if (n % 2 != 0) return false\n        // Brute force\n\
    \        for (i <- 0 to n.toInt by 2) {\n            for (j <- 0 to n.toInt by\
    \ 2) {\n                for (k <- 0 to n.toInt by 2) {\n                    for\
    \ (l <- 0 to n.toInt by 2) {\n                        if (i + j + k + l == n)\
    \ return true\n                    }\n                }\n            }\n     \
    \   }\n        return false", "      var i = 1\n      while (i * i <= n) {\n \
    \       var j = 1\n        while (j <= i) {\n          var k = 1\n          while\
    \ (k <= j) {\n            var l = 1\n            while (l <= k) {\n          \
    \    if (2 * i + 2 * j + 2 * k + 2 * l == n) return true\n              l += 1\n\
    \            }\n            k += 1\n          }\n          j += 1\n        }\n\
    \        i += 1\n      }\n      return false", "        // how to divide long\
    \ into evens, get 4 sum and compare\n        val half = n / 2\n        def makeEvens(sum\
    \ : Long, count : Int, value : Long) : List[Long] = {\n            if (count ==\
    \ 0) Nil\n            else if (value % 2 == 0) (sum + value) :: makeEvens(sum,\
    \ count - 1, value - 2)\n            else makeEvens(sum, count, value - 1)\n \
    \       }\n        val evens = makeEvens(0, 4, half)\n        if (evens.length\
    \ == 4) evens.contains(n)\n        else false", "        val evens = ArrayBuffer[Long]()\n\
    \        for (x <- 1l to n / 2) {\n            val num = x * 2\n            evens\
    \ += num\n        }\n        evens.combinations(4).exists(x => (x.sum == n))",
  '        // your code here!', "        var sum : Long = 0\n        val listEven\
    \ = List.range(2, n, 2)\n        for (i <- listEven) {\n            sum += i\n\
    \            if (sum == n) return true\n        }\n        return false", "  \
    \      //println(n)\n        var sum = 0l\n        for (i <- 0 to (n - 2) / 2)\
    \ {\n            for (j <- 0 to (n - 2 - 2 * i) / 2) {\n                for (k\
    \ <- 0 to (n - 2 - 2 * i - 2 * j) / 2) {\n                    if (n == 2 * i +\
    \ 2 * j + 2 * k) {\n                        sum += 1\n                    }\n\
    \                }\n            }\n        }\n        sum == 1", "        if(n\
    \ % 2 == 1) false\n        else {\n            val m = n / 2\n            val\
    \ upper = m / 2\n            val lower = (m % 2) / 2\n            ((2 to upper)\
    \ exists (x => (2 to (m - x) / 2) exists (y => (2 to (m - x - y) / 2) exists (z\
    \ => (m - x - y - z) % 2 == 0))))\n        }", '      (1 to (n / 2)).map(x =>
    n - x * 2).filter(x => x % 2 == 0).size == 1', "        val m = n / 2\n      \
    \  for (a <- Range(1, m + 1)) {\n            for (b <- Range(a, m + 1)) {\n  \
    \              for (c <- Range(b, m + 1)) {\n                    for (d <- Range(c,\
    \ m + 1)) {\n                        if (a + b + c + d == m) return true\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ false", "        val ll = new ArrayBuffer[Long]\n        val b = new ArrayBuffer[Long]\n\
    \        def recurse(k : Long) : Unit = {\n            if (k % 2 == 0) b += k\n\
    \            else ll += k\n            if (k != 0) recurse(k - 1)\n        }\n\
    \        recurse(n)\n        val set = b.permutations.filter(p => p.head + p.tail.head\
    \ == n).toSet\n        set.size > 0", "        def f(k : Long) : Boolean = {\n\
    \            if (k <= 0) false\n            else if (k % 2 == 0) g(n - k, 4)\n\
    \            else f(k - 1)\n        }\n        def g(n : Long, c : Int) : Boolean\
    \ = {\n            if (c == 0) n == 0\n            else f(n) || g(n - 2, c - 1)\n\
    \        }\n        f(n)", "        if (n == 2l) return false\n        // Start\
    \ with the smallest possible sum.\n        // There are (n - 2) even numbers below\
    \ n.\n        // The two even numbers that must be summed to equal n are the two\
    \ largest such numbers.\n        // The sum of any 4 even numbers below n cannot\
    \ equal n.\n        for (a <- n - 2 to n by 2) {\n            for (b <- a - 2\
    \ to n - a by 2) {\n                val c = (n - a - b) / 2\n                if\
    \ (c < 2) return false\n                val d = n - a - b - c\n              \
    \  if (c % 2 == 0 && d % 2 == 0) return true\n            }\n        }\n     \
    \   return false", "        // your code here\n        return false", "      \
    \  if (n % 2 == 1) return false\n        val m = n / 2\n        for (a <- 2l to\
    \ m) {\n            for (b <- 2l to m - a) {\n                for (c <- 2l to\
    \ m - a - b) {\n                    val d = m - a - b - c\n                  \
    \  if (d < 2l) return false\n                    if (a + b + c + d == n) return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       if (n % 2 == 1) return false\n        for (i <- 1 to n / 2) {\n      \
    \      val ni = n - 2 * i\n            if (ni % 2 == 1) return false\n       \
    \     val ni2 = ni / 2\n            val max = min(i, ni2)\n            for (j\
    \ <- 1 to max) {\n                val nj = ni2 - j\n                if (nj % 2\
    \ == 1) return false\n                val nj2 = nj / 2\n                val max2\
    \ = min(i, nj2)\n                for (k <- 1 to max2) {\n                    val\
    \ nk = nj2 - k\n                    if (nk % 2 == 1) return false\n          \
    \          val nk2 = nk / 2\n                    val max3 = min(i, nk2)\n    \
    \                for (l <- 1 to max3) {\n                        val nl = nk2\
    \ - l\n                        if (nl % 2 == 1) return false\n               \
    \         val nl2 = nl / 2\n                        if (i + j + k + l + nl2 ==\
    \ n / 2) return true\n                    }\n                }\n            }\n\
    \        }\n        return false", "        if (n % 2 == 1) return false\n   \
    \     val MAXN = n / 2\n        var base = 8l\n        var cnt = 0\n        while\
    \ (base <= MAXN) {\n            val m = (n - base) / 2\n            if (m % 2\
    \ == 0) cnt += 1\n            base += 2\n        }\n        cnt == 4", "     \
    \   var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n     \
    \   var sum = 0\n        while (sum < n) {\n            i += 2\n            while\
    \ (sum < n) {\n                j += 2\n                while (sum < n) {\n   \
    \                 k += 2\n                    while (sum < n) {\n            \
    \            l += 2\n                        sum = i + j + k + l\n           \
    \             if (sum == n) return true\n                    }\n             \
    \       l = 0\n                }\n                k = 0\n            }\n     \
    \       j = 0\n        }\n        return false", "        var digits = new ArrayBuffer[Long]()\n\
    \        // find the factor of 2 in n, turn them into digits\n        var m =\
    \ n\n        while (m % 2 == 0) {\n            digits += 2\n            m /= 2\n\
    \        }\n        // find the factor of 3 in n, turn them into digits\n    \
    \    while (m % 3 == 0) {\n            digits += 3\n            m /= 3\n     \
    \   }\n        var i = 1\n        while (i * (i + 1) <= m) {\n            if (m\
    \ % i == 0) {\n                digits += i\n                digits += m / i\n\
    \            }\n            i += 1\n        }\n        // find the combination\
    \ of digits that sums up to n\n        var result = false\n        var range =\
    \ pow(2, digits.length).toInt\n        for (j <- 1 until range) {\n          \
    \  var sum = 0l\n            for (k <- 0 until digits.length) {\n            \
    \    if ((j & (1 << k)) != 0) {\n                    sum += digits(k)\n      \
    \          }\n            }\n            if (sum == n) {\n                result\
    \ = true\n                break\n            }\n        }\n        result", " \
    \       val (big, small) = n.toString.splitAt(n.toString.length / 2)\n       \
    \ if (big.length == small.length) {\n            small.zip(big).forall({case (a,\
    \ b) => a == b})\n        } else {\n            false\n        }", "        def\
    \ helper(n : Long, acc : Long) : Boolean = {\n            if (n == 0) {\n    \
    \            if (acc == 0) {\n                    true\n                } else\
    \ {\n                    false\n                }\n            } else {\n    \
    \            val x = n % 100\n                if (x == 0) {\n                \
    \    helper(n / 100, acc + n % 100)\n                } else {\n              \
    \      false\n                }\n            }\n        }\n        helper(n, 0)",
  "        // Generate all the possible combinations of 4 positive even numbers\n\
    \        val positiveEvenNumbers = (2 to (n / 4).toInt by 2).map(BigInt(_))\n\
    \        val positiveEvenNumbers4Combination = positiveEvenNumbers.combinations(4).toList\n\
    \        // Filter the combinations that are equal to n\n        val l = positiveEvenNumbers4Combination.filter(x\
    \ => x.sum == n)\n        if (l.length == 0) false else true", "        for (k\
    \ <- 0 to n.toInt by 2 if n - k > 0) {\n            for (j <- 0 to (n - k).toInt\
    \ by 2 if n - k - j > 0) {\n                for (i <- 0 to (n - k - j).toInt by\
    \ 2 if n - k - j - i > 0) {\n                    val l = n - k - j - i\n     \
    \               if (l >= 0 && l % 2 == 0) return true\n                }\n   \
    \         }\n        }\n        return false", "        if (n == 0l) true\n  \
    \      else if (n < 0l) false\n        else {\n            val x = (n - 2) / 2\n\
    \            val y = (n - 2) % 2\n            if (y == 0) {\n                isEqualToSumEven(x)\n\
    \            } else {\n                false\n            }\n        }", '        //
    Fill in your code here', "        for (i <- 2l to n by 2) {\n            for (j\
    \ <- 2l to n by 2) {\n                for (k <- 2l to n by 2) {\n            \
    \        for (l <- 2l to n by 2) {\n                        if (i + j + k + l\
    \ == n) return true\n                    }\n                }\n            }\n\
    \        }\n        return false", "        // This is how you evaluate whether\
    \ a number is even or not\n        def isEven(i : Long) : Boolean = i % 2 == 0\n\
    \        // This is how you loop through two numbers\n        for (i <- 1l to\
    \ n) {\n            for (j <- 1l to n) {\n                // This is how you evaluate\
    \ whether a number is the sum of two other numbers\n                if (i + j\
    \ == n) {\n                    if (isEven(i) && isEven(j)) {\n               \
    \         // This is how you return a value from a function\n                \
    \        return true\n                    }\n                }\n            }\n\
    \        }\n        // This is how you return a value from a function (if you\
    \ don't return early)\n        return false", "        var map = Map.empty[Long,\
    \ Set[Tuple4[Long, Long, Long, Long]]]\n        for (c <- 1l to (n/2)) {\n   \
    \         for (a <- 1l to c - 1) {\n                for (b <- a + 1l to c - a)\
    \ {\n                    for (d <- b + 1l to c - a - b) {\n                  \
    \      if (a + b + c + d == n) {\n                            if (map.contains(n))\
    \ {\n                                map(n) += Tuple4(a, b, c, d)\n          \
    \                  } else {\n                                map(n) = Set.empty[Tuple4[Long,\
    \ Long, Long, Long]]\n                                map(n) += Tuple4(a, b, c,\
    \ d)\n                            }\n                        }\n             \
    \       }\n                }\n            }\n        }\n        for (x <- map.keys)\
    \ {\n            for (y <- map(x)) {\n                if (y._1 % 2 == 0 && y._2\
    \ % 2 == 0 && y._3 % 2 == 0 && y._4 % 2 == 0) {\n                    return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ var s = 0\n        var i = 2\n        while (s < n) {\n            if (s ==\
    \ n) return true\n            s += i\n            i += 2\n        }\n        false",
  "        if (n < 8) return false\n        // Even number greater than 8, the sum\
    \ of its digits would be even\n        // So we only consider even numbers here\n\
    \        // If the number of even number can be decomposed by 4, we can find the\
    \ same number\n        // of odd numbers summing up to the same number\n     \
    \   // 8 + 2 + 2 + 2 + 2 = 16\n        // 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 = 16\n\
    \        // This symmetric property reduces the search space by half\n       \
    \ val sqrtn = sqrt(n).toLong\n        val halfn = n / 2\n        val set = HashSet[Long]()\n\
    \        for (i <- 0l to halfn if n % i == 0) {\n            set += (i, n / i)\n\
    \        }\n        //println(set)\n        var sum = 0l\n        val it = set.iterator\n\
    \        while (it.hasNext) {\n            val el = it.next\n            if (el\
    \ <= sqrtn) {\n                for (j <- 0l to el) {\n                    if (j\
    \ % 2 == 0) {\n                        sum += j\n                        if (sum\
    \ > n) {\n                            sum = 0\n                            break\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            if (sum == n) return true\n            else sum = 0\n   \
    \     }\n        false", "        var evens = ArrayBuffer[Long]()\n        var\
    \ i = 2l\n        while (i <= n && evens.size < 4) {\n            if (n % i ==\
    \ 0) {\n                evens += i\n                if (evens.size == 3) evens\
    \ += (n / evens.reduce(_ * _))\n            }\n            i += 2\n        }\n\
    \        if (evens.size == 4) true else false", "        // given n = 8\n    \
    \    // 8 = 2 + 2 + 2 + 2\n        // given n = 12\n        // 12 = 4 + 4 + 2\
    \ + 2\n        // given n = 14\n        // 14 = 4 + 4 + 4 + 2\n        // given\
    \ n = 16\n        // 16 = 4 + 4 + 4 + 4\n        n % 2 == 0 && n != 0", "    \
    \    // Your Implementation Here\n        var result = false\n        for (i <-\
    \ 2 to n.toInt/4+1 by 2) {\n            for (j <- 2 to n.toInt/3+1 by 2) {\n \
    \               for (k <- 2 to n.toInt/2+1 by 2) {\n                    for (l\
    \ <- 2 to n.toInt by 2) {\n                        if (i + j + k + l == n)\n \
    \                           result = true\n                    }\n           \
    \     }\n            }\n        }\n        result", '        return false', " \
    \       val ones = n % 2\n        if (ones != 0) {\n            false\n      \
    \  } else {\n            val pairwise = n / 2\n            val pairs = pairwise\
    \ % 2\n            if (pairs != 0) {\n                false\n            } else\
    \ {\n                val quartwise = pairwise / 2\n                val quarts\
    \ = quartwise % 2\n                if (quarts != 0) {\n                    false\n\
    \                } else {\n                    true\n                }\n     \
    \       }\n        }", "        if (n % 2 == 1) return false\n        for (i <-\
    \ 1l to n / 4) {\n            for (j <- i to n / 3) {\n                for (k\
    \ <- j to n / 2) {\n                    for (l <- k to n - 1) {\n            \
    \            if (i + j + k + l == n) return true\n                    }\n    \
    \            }\n            }\n        }\n        return false", "        if (n\
    \ % 2 == 1) false\n        else if (n < 8) false\n        else {\n           \
    \ val m = n/2\n            for (a <- 0 to m) {\n                for (b <- 0 to\
    \ m) {\n                    for (c <- 0 to m) {\n                        for (d\
    \ <- 0 to m) {\n                            if (a + b + c + d == m) {\n      \
    \                          return true\n                            }\n      \
    \                  }\n                    }\n                }\n            }\n\
    \            false\n        }", '        return false', "        for (a <- 1 to\
    \ sqrt(n).toInt) {\n            for (b <- 1 to sqrt(n).toInt) {\n            \
    \    for (c <- 1 to sqrt(n).toInt) {\n                    for (d <- 1 to sqrt(n).toInt)\
    \ {\n                        if (n == a * a + b * b + c * c + d * d) {\n     \
    \                       if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0 && d % 2 ==\
    \ 0) {\n                                return true\n                        \
    \    }\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return false", "        def isEqualToSumEven(n\
    \ : Long, a : Int, count : Int) : Boolean = {\n            if (count > 3) return\
    \ false\n            if (a == 0) return count == 3\n            if (n - a >= 0\
    \ && isEqualToSumEven(n - a, a - 2, count + 1)) return true\n            isEqualToSumEven(n,\
    \ a - 2, count)\n        }\n        isEqualToSumEven(n, n, 0)", "        val s\
    \ = 2l\n        val e = (n / 4l) + 1l\n        return (2l to e).exists(i => ((i\
    \ + s) to e).exists(j => ((j + s) to e).exists(k => (n == (i + j + k + s)))))",
  "      if (n % 2 == 1) return false\n      def isEqualToSumEvenHelper(n : Long,\
    \ k : Int, acc : List[Long]) : Boolean = {\n        if (k == 0) return acc.sum\
    \ == n\n        if (n - k * 2 < 0) return false\n        val min = if (acc.length\
    \ == 0) 0 else acc.min\n        return (min to n / k by 2).exists(m => isEqualToSumEvenHelper(n\
    \ - m, k - 1, m :: acc))\n      }\n      return isEqualToSumEvenHelper(n, 4, Nil)",
  "        if (n % 2 == 1) return false\n        val r = sqrt(n.toDouble)\n      \
    \  var total = 0\n        val isSum = new Array[Boolean](n.toInt)\n        for\
    \ (i <- 1 to r.toInt) {\n            val x = n - i * i\n            if (x % i\
    \ == 0) {\n                val y = x / i\n                if (y % 2 == 0) {\n\
    \                    total += 1\n                    val s = y / 2\n         \
    \           for (j <- 1 to s.toInt) isSum(s - j) = true\n                }\n \
    \           }\n        }\n        total == 4 && isSum.forall(x => x)", "     \
    \ val evens = Buffer(2l, 4l, 6l, 8l)\n      (0 to 3).map(i => \n        if (evens.indexOf(n)\
    \ != -1) true\n        else evens.map(even => \n          if (n - even == evens(i))\
    \ true\n          else false\n        ).contains(true)\n      ).contains(true)",
  "        val half = n / 2;\n        val fourHalf = half - 2;\n        if (half %\
    \ 2 == 0 && half >= 2 && fourHalf % 2 == 0 && fourHalf >= 2) {\n            val\
    \ a = fourHalf / 2;\n            val b = half - a;\n            val c = a + 1;\n\
    \            val d = b - 1;\n            if (a != b && c != d) {\n           \
    \     return true;\n            }\n        }\n        return false;", "      \
    \  val max = n / 4\n        (2 to max.toInt by 2).exists(i => (i + 2 to max.toInt\
    \ by 2).exists(j => (j + 2 to max.toInt by 2).exists(k => n == i + j + k + (n\
    \ - i - j - k))))", "        // Imperative Code\n        // >>> val results =\
    \ ArrayBuffer[Long]()\n        // >>> for (a <- (1l to n - 1).filter(i => i %\
    \ 2 == 0); b <- (1l to n - a).filter(i => i % 2 == 0); c <- (1l to n - a - b).filter(i\
    \ => i % 2 == 0); d <- (1l to n - a - b - c).filter(i => i % 2 == 0)) {\n    \
    \    // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . .", '        ???', "        // Take a\
    \ number n, and check if its even or odd. If it is even, we can simply divide\
    \ it by two and add it to\n        // our list. If it is odd, we must subtract\
    \ one, and then divide by two.\n\n        // We know that n is even, so we can\
    \ divide n by two and add it to the list\n        var listOfEvenNums = new ArrayBuffer[Long]()\n\
    \        listOfEvenNums += (n / 2)\n        // We know that n is odd, so we subtract\
    \ one from n\n        var n2 = n - 1\n        var count = 1\n        // We keep\
    \ subtracting two from n until it reaches zero, and each time we do, we add the\
    \ result to the list.\n        while (n2 != 0) {\n            listOfEvenNums +=\
    \ (n2 / 2)\n            n2 -= 2\n            count += 1\n        }\n        //\
    \ After we reach 0, if the count is 4, we return true, else we return false\n\
    \        if (count == 4) {\n            return true\n        }\n        else {\n\
    \            return false\n        }", '        return isEqualToSum(n, (x : Long)
    => (x % 2 == 0))', "        //Let's put the number in the form of 2k, and let's\
    \ try to find 3 other numbers\n        // which is equal to the n - 2k\n     \
    \   if (n % 2 == 0) {\n            //Let's start by finding a number k that is\
    \ as close as possible to n / 4\n            val k = (floor(n / 4.0) - 1).toLong\n\
    \            for (i <- (0l to k).toList) {\n                val k = n / 2 - i\n\
    \                val a = k / 2\n                val b = sqrt(2 * k - a * a).toLong\n\
    \                val c = k - a - b\n                if (a > 0 && b > 0 && c >\
    \ 0 && 2 * (a + b + c) == n) return true\n            }\n        }\n        false",
  '        ???', "        val half = n / 2\n        val b = half % 2 == 0\n      \
    \  if (!b) false\n        else {\n            val sqrt = sqrt(4 * half)\n    \
    \        val x = sqrt - sqrt.toInt\n            x == 0\n        }", "        val\
    \ sqrtN = sqrt(n).toLong\n        for (a <- 1l to sqrtN) {\n            val b\
    \ = n - a * a\n            if (b % 2 == 0) {\n                val b2 = b / 2\n\
    \                val c = sqrt(b2).toLong\n                if (b2 == c * c) {\n\
    \                    return true\n                }\n            }\n        }\n\
    \        return false", "        if (n % 2 == 1) return false\n        for (x\
    \ <- 1l to n / 4) if (isPerfectSquare(n - 4 * x)) return true\n        return\
    \ false", "        def f(n : Long, k : Int) : Boolean = {\n            if (n ==\
    \ 0) k == 4\n            else if (n < 2 || k > 4) false\n            else f(n\
    \ - 2, k + 1) || f(n, k)\n        }\n        f(n, 0)", "        // Let a = n -\
    \ 4\n        // The total number of even numbers less than or equal to a is (a\
    \ / 2) + 1\n        // We can prove this by listing out all even numbers between\
    \ 0 and a and counting them\n        // The total number of even numbers less\
    \ than or equal to a is (a / 2) + 1\n        // We can prove this by listing out\
    \ all even numbers between 0 and a and counting them\n        // Because we are\
    \ summing 4 numbers, we know there are (a / 2) + 1 - 4 permutations of these numbers\n\
    \        // If a is not divisible by 4, the parity of each permutation of these\
    \ 4 numbers is the same\n        // If a is divisible by 4, we have to account\
    \ for the 4 permutations of (a / 4, a / 4, a / 4, a / 4)\n        // If a is even,\
    \ we know the parity of the sum of 4 numbers is even\n        // If a is odd,\
    \ we know the parity of the sum of 4 numbers is odd\n        // If we choose the\
    \ parity of the sum to be even when a is odd, we are guaranteed to be able to\
    \ find a nonnegative sum \n        // If we choose the parity of the sum to be\
    \ odd when a is even, we are guaranteed to be able to find a nonnegative sum\n\
    \        // We can then perform a binary search on the possible sums\n       \
    \ // Returns the first number with parity equal to the parity of n\n        def\
    \ firstNumberWithParity(n : Long) : Long = {\n            val parity : Int = ((n\
    \ % 2) + 2) % 2\n            if (parity == 0) n else n + 1\n        }\n      \
    \  val a : Long = n - 4\n        if (a <= 0) return false\n        val evenNumbersToConsider\
    \ : Long = (a / 2) + 1\n        val totalNumberOfPermutations : Long = evenNumbersToConsider\
    \ - 4\n        if (totalNumberOfPermutations < 0) return false\n        val parityOfSum\
    \ : Int = ((a % 2) + 2) % 2\n        val lowerBound : Long = firstNumberWithParity(a\
    \ / 2)\n        val upperBound : Long = lowerBound + totalNumberOfPermutations\n\
    \        var lowerLimit : Long = lowerBound\n        var upperLimit : Long =",
  "        val v = n % 4l\n        val v2 = n / 4l\n        v == 0l && v2 % 2l ==\
    \ 0l", "        if (n % 2 == 1) return false\n        val limit = (n / 2 - 1)\n\
    \        var result = false\n        for (e1 <- 1 to limit) {\n            for\
    \ (e2 <- 1 to limit) {\n                for (e3 <- 1 to limit) {\n           \
    \         for (e4 <- 1 to limit) {\n                        val a = e1 * 2\n \
    \                       val b = e2 * 2\n                        val c = e3 * 2\n\
    \                        val d = e4 * 2\n                        if (a + b + c\
    \ + d == n) {\n                            result = true\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \        return result", "        val evenSet = new HashSet[Long]\n        //evenSet.add(2)\n\
    \        var j = 4\n        while (j <= n) {\n            evenSet.add(j)\n   \
    \         j += 2\n        }\n        if (evenSet.size < 4) return false\n    \
    \    for (i <- evenSet) {\n            for (j <- evenSet) {\n                for\
    \ (k <- evenSet) {\n                    for (m <- evenSet) {\n               \
    \         if (i + j + k + m == n) return true\n                    }\n       \
    \         }\n            }\n        }\n        false", '      // Fill in your
    code here!', "        if (n % 2 == 1) return false\n        // Optimization: We\
    \ know that the sum of exactly 4 positive even numbers is even, so if n is even,\
    \ it can be written as the sum of exactly 4 positive even numbers.\n        return\
    \ true", "        if (n % 2 == 1) false\n        else {\n            val m = n\
    \ / 2\n            val summands = ArrayBuffer[Long]()\n            for (i <- 2l\
    \ to m / 2) {\n                if (m % i == 0) summands += i\n            }\n\
    \            summands.sorted.reverse.take(4).sum == m\n        }", "        val\
    \ s = sqrt(n / 4.0).toLong\n        for (a <- (1l to s)) {\n            for (b\
    \ <- (a to s)) {\n                for (c <- (b to s)) {\n                    for\
    \ (d <- (c to s)) {\n                        if (a + b + c + d == n) {\n     \
    \                       if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0 && d % 2 ==\
    \ 0) {\n                                return true\n                        \
    \    }\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return false", "        // Fill in your code\
    \ here!\n        return false", '        ???', "        // Implement Here\n  \
    \      return false", "        val m = (n - 2) / 2\n        var j = 1l\n     \
    \   var i = 0l\n        var k = i\n        while (i <= m && j <= n - i) {\n  \
    \          k = i\n            j = 0l\n            while (k <= m && j <= n - k)\
    \ {\n                j = 0l\n                var l = k\n                while\
    \ (l <= m && j <= n - l) {\n                    if (i + j + k + l == n) return\
    \ true\n                    l += 2\n                }\n                k += 2\n\
    \            }\n            i += 2\n        }\n        false", '        return
    false', "        if (n % 2 == 1) return false\n        var (i, j, k, l) = (2,\
    \ 2, 2, 2)\n        for (i <- 2 until n / 4 + 1) {\n            for (j <- i until\
    \ n / 3 + 1) {\n                for (k <- j until n / 2 + 1) {\n             \
    \       for (l <- k until n + 1) {\n                        if (i + j + k + l\
    \ == n) return true\n                    }\n                }\n            }\n\
    \        }\n        return false", "        val d = n / 2\n        for (a <- (1\
    \ to d.toInt by 2))\n            for (b <- (1 to d.toInt by 2))\n            \
    \    for (c <- (1 to d.toInt by 2))\n                    for (d <- (1 to d.toInt\
    \ by 2))\n                        if (a + b + c + d == n / 2) return true\n  \
    \      return false"]
stop_tokens:
- "\n    }\n"
