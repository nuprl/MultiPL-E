name: HumanEval_45_triangle_area
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given length of a side and high return area for a triangle.\n    // >>>\
  \ triangleArea((5l), (3l))\n    // (7.5f)\n    def triangleArea(a : Long, h : Long)\
  \ : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((5l),\
  \ (3l)) == (7.5f));\n    assert(triangleArea((2l), (2l)) == (2.0f));\n    assert(triangleArea((10l),\
  \ (8l)) == (40.0f));\n    }\n\n}\n"
completions: ["        val area = a.toFloat * h.toFloat / 2\n        return area",
  '        return ((a.asInstanceOf[Float] * h.asInstanceOf[Float]) / 2)', '        return
    ((a.toFloat) * (h.toFloat)) / 2.0f', '        a.toFloat * h.toFloat / 2.0f', " \
    \       val s = a.toFloat\n        val b = h.toFloat\n        (s * b) / 2", '        (a
    * h.toFloat / 2.0f)', '        0.5f * a * h', '        return (a * h / 2f)', '        return
    (a * h / 2.0f)', '        (a * h).toFloat / 2', '        ((a.toFloat)*(h.toFloat))/2',
  '        return (a * h / 2f)', '        (a * h) / 2f', '        (a * h).toFloat
    / 2', '        return ((a * h) / 2.0f)', '        a.toFloat * h.toFloat / 2.0f',
  '        (a.asInstanceOf[Float] * h.asInstanceOf[Float]) / 2.0f', '        return
    ((a * h.toFloat) / 2.0f)', '        (a * h).toFloat / 2', '        (a.toFloat
    * h.toFloat) / 2', "        val result = a * h / 2f\n        return result", '        (a
    * h) / 2f', '        return (a.toFloat * h.toFloat / 2f)', "        if (a <= 0\
    \ || h <= 0) throw new Exception(\"illegal arguments\");\n        (a * h / 2.0f);",
  '        return (a * h) / 2.0f', '        (a.toFloat * h.toFloat) / 2.0f', '        (a.toFloat
    * h.toFloat) / 2.0f', '        0.5f * a * h', '        (a.toFloat * h.toFloat)
    / 2', '        return (a * h / 2f)', "        val res : Float = a.toFloat * h.toFloat\
    \ / 2.0f\n        return res", "        // your code goes here\n        a * h\
    \ / 2f", "        val at : Float = a.toFloat\n        val ht : Float = h.toFloat\n\
    \        (at * ht) / 2.0f", '        (a.toFloat * h.toFloat / 2.0f)', "      \
    \  val area : Float = ((a*h).toFloat)/2\n        return area", '        return
    (a * h).toFloat / 2', '        return ((a * h) / 2f)', '      (a.toFloat * h.toFloat)
    / 2', '        ((a * h).toFloat) / 2', '        (a * h).toFloat / 2', '        return
    ((a.toFloat * h.toFloat) / 2.0f)', '        return a * h / 2f', '        a.toFloat
    * h.toFloat / 2.0f', '        (a.toFloat * h.toFloat) / 2', '        a * h / 2f',
  '        (0.5f * a * h).toFloat', '        return (a * h * 0.5f).toFloat', '        ((a
    * h) / 2.0f)', '        (a * h).toFloat / 2.0f', '      return ((a * h) / 2.0f)',
  '        return a * h / 2f', '        ((a.toFloat / 2) * h.toFloat)', "        //\
    \ IMPLEMENT\n        (a*h)/2.0f", '        (a * h).toFloat / 2', '        return
    (a * h / 2f)', '        (a.toFloat * h.toFloat) / 2.0f', '        (a * h) / 2f',
  '        return (a.toFloat / 2.0f) * h.toFloat', "        val sum : Float = a *\
    \ h.toFloat\n        val end : Float = sum / 2.0f\n        return end", '        return
    ((a : Float) * (h : Float)) / 2.0f', '        (a * h).toFloat / 2.0f', '        return
    a * h / 2f', '        return (a * h).toFloat / 2.0f', '        (a * h).toFloat
    / 2', '        ((a * h) / 2.0f)', '        a * h / 2.0f', '        (0.5f * a *
    h).toFloat', '        (a * h).toFloat / 2.0f', '        return (a * h / 2.0f)',
  '        ((a.toFloat) * (h.toFloat)) / 2', '        (a.toFloat * h.toFloat / 2.0f)',
  "        val area = (a * h.toFloat) / 2\n        return area", '        (a * h)
    / 2f', '        (a * h / 2.0f)', '        return (a * h / 2.0f)', "        val\
    \ area = ((a * h) / 2.0).toFloat\n        return area", "        if (a < 0l ||\
    \ h < 0l) throw new Exception(\"Triangle side or height is negative.\")\n    \
    \    return 0.5f * a * h", "        val b = sqrt(pow(a, 2) + pow(h, 2))\n    \
    \    val s = (a + b + h) / 2\n        val area = sqrt(s * (s - a) * (s - b) *\
    \ (s - h))\n        return area.toFloat", "        if (a < 0 || h < 0) {\n   \
    \         throw new IllegalArgumentException(\"Both arguments must be positive\"\
    )\n        }\n        return a * h / 2f", '        return a * h / 2.0f', '        return
    a * h / 2.0f', '        return ((a.toFloat / 2) * h.toFloat);', '        a * h
    * 1f / 2', '        return (a.toFloat * h.toFloat) / 2.0f', '        return (a
    * h).toFloat / 2', '        return 0.5f * a * h', '        return ((a * h).toFloat)
    / 2', '        return a * h / 2.0f', '        (a * h).toFloat / 2', '        return
    ((a.toFloat / 2) * h).toFloat', "        val a1 = BigDecimal(a).setScale(2, BigDecimal.RoundingMode.HALF_UP).toFloat\n\
    \        val h1 = BigDecimal(h).setScale(2, BigDecimal.RoundingMode.HALF_UP).toFloat\n\
    \        val area = (a1 * h1) / 2\n        return BigDecimal(area).setScale(2,\
    \ BigDecimal.RoundingMode.HALF_UP).toFloat", '        (a * h).toFloat / 2', '        (a
    * h) / 2f', "        val area = (a * h).toFloat / 2\n        area", '        (0.5f
    * a * h).toFloat', '        (a * h) / 2.0f', '        (a.toFloat * h.toFloat)
    / 2', '        (a * h).toFloat / 2', '        ((a * h).toFloat / 2)', '      return
    a * h * 0.5f', '        (a * h / 2f)', "        // >>> triangleArea((a : Long),\
    \ (h : Long))\n        // (u : Float)\n        val u : Float = (a.toFloat * h.toFloat)\
    \ / 2.0f\n        // <<<\n        u", "        val area = (a * h) / 2.0f\n   \
    \     return area", '        return (a * h / 2f)', '        return a.toFloat *
    h.toFloat / 2', '        return ((a.toFloat * h.toFloat) / 2.0f)', '        (a
    * h) / 2f', '        (a * h) / 2.0f', '        return ((a * h) / 2.0f)', '        (a
    * h) / 2f', '        return ((a.toFloat) * (h.toFloat)) / 2.0f', '        (a *
    h).toFloat / 2', '        return (a * h / 2.0f)', "        val x = (a.toFloat)\n\
    \        val y = (h.toFloat)\n        val result = x * y / 2\n        return result",
  '        (a * h) / 2.0f', '        return (a.toFloat * h.toFloat) / 2.0f', '        (a.toFloat
    * h.toFloat) / 2.0f', '        ((a * h) / 2f)', '        return ((a.toFloat) *
    (h.toFloat)) / 2.0f', '        (a * h).toFloat / 2', '        (a * h) / 2f', " \
    \       val b = (a * h / 2f)\n        return b", "        val a_ = a.toFloat\n\
    \        val h_ = h.toFloat\n        return (a_ * h_) / 2", '        return (a.toFloat
    * h.toFloat) / 2.0f', '        return ((a * h) / 2.0f)', "        val area = (a\
    \ * h).toFloat / 2\n        area", '        return ((a * h) / 2f)', '        (a.asInstanceOf[Float]
    * h.asInstanceOf[Float]) / 2.0f', '      (a * h) / 2.0f', '        (a * h).toFloat
    / 2', '        (a.toFloat * h.toFloat) / 2', '        (a * h).toFloat / 2.0f',
  '        ((a * h) / 2.0f)', '        return ((a.toFloat * h.toFloat) / 2.0f)', '        return
    a * h / 2.0f', '        a * h * 0.5f', '        return (a * h) / 2f', '        return
    ((a.toFloat / 2.0f) * h.toFloat)', '        (a * h).toFloat / 2', '        return
    a.toFloat * h.toFloat / 2.0f', '        return (a.toFloat * h.toFloat) / 2.0f',
  '        (a.toFloat * h.toFloat / 2.0f)', "        val aFloat = a.toFloat\n    \
    \    val hFloat = h.toFloat\n        (aFloat * hFloat) / 2", "        val fh =\
    \ h.toFloat\n        val fa = a.toFloat\n        return (fa * fh) / 2.0f", '      return
    (a * h / 2.0f)', '        return ((a.toFloat * h.toFloat) / 2.0f)', "        val\
    \ area = h * a / 2f\n        area", '        return (a * h / 2f)', '        return
    ((a * h) / 2f)', '        return ((a.toFloat * h.toFloat) / 2.0f)', '        return
    (a * h).toFloat / 2', '        return (a * h) / 2.0f', '        return (a.toFloat
    * h.toFloat / 2f)', '        return ((a.toFloat * h.toFloat) / 2.0f)', '        (a.toFloat
    * h.toFloat) / 2.0f', '        (a.toFloat * h.toFloat) / 2.0f', '        return
    (a * h).toFloat / 2.0f', '        return a * h / 2', '        (a.toFloat * h.toFloat)
    / 2.0f', '        return ((a.toFloat * h.toFloat) / 2.0f)', "        var b : Float\
    \ = 0.5f\n        b * a * h", '        (a * h) / 2.0f', '        return (a * h)
    / 2.0f', '        (a.toFloat * h.toFloat) / 2.0f', '        a * h / 2.0f', '        (a
    * h).toFloat / 2', '        return (a * h * 0.5f)', '        (a.toFloat * h.toFloat)
    / 2.0f', "        val area = (a * h).toFloat / 2\n        area", '        return
    (a * h * 0.5f)', '        return (a * h / 2.0f)', '        a.toFloat * h.toFloat
    / 2', '        ((a.toFloat) * (h.toFloat)) / 2', '        return a * h / 2', '        return
    ((a * h) / 2f)', '        ((a * h) / 2f)', '        return (a * h).toFloat / 2',
  '        return (a * h).toFloat / 2', "        // >>> triangleArea((5l), (3l))\n\
    \        // (7.5f)\n        (a * h).toFloat / 2", "        var area : Float =\
    \ (a * h) / 2\n        return area", "        //return(h/2*a)\n        return\
    \ (h.toFloat/2)*a.toFloat", "        // \n        return a.toFloat * h.toFloat\
    \ / 2", '        return ((a.toFloat * h.toFloat) / 2f)', '        return (a.toFloat
    * h.toFloat) / 2.0f', '        return (((a.toFloat) * (h.toFloat)) / 2f)', '        ((a
    * h) / 2.0f)', '        return (a * h).toFloat / 2', '        return ((a * h).toFloat
    / 2)', '        (a * h) / 2.0f', '        return (a * h) / 2.0f', '        a *
    h * 0.5f', '        a.toFloat * h.toFloat / 2.0f', "        //This function returns\
    \ the area of a triangle.\n        (a * h).toFloat / 2f", '        a * h / 2f',
  '        (a * h) / 2.0f', '        return (a * h) / 2.0f', '        (a * h / 2f)',
  '        (a * h) / 2.0f', '        a.toFloat * h.toFloat / 2.0f', '        return
    (a * h / 2.0f)']
stop_tokens:
- "\n    }\n"
