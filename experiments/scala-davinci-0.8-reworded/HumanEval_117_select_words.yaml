name: HumanEval_117_select_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s and a natural number n, you have been tasked to implement\
  \ \n    // a function that returns a list of all words from string s that contain\
  \ exactly \n    // n consonants, in order these words appear in the string s.\n\
  \    // If the string s is empty then the function should return an empty list.\n\
  \    // Note: you may assume the input string contains only letters and spaces.\n\
  \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
  \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
  \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
  simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
  Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
  Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s : String,\
  \ n : Long) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
  \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
  Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
  \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
  \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
  ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
  ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
  a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n   \
  \ }\n\n}\n"
completions: ["        //\n        // PLACEHOLDER FOR SOLUTION\n        //\n     \
    \   (s, n) match {\n            case (_, _) => List(\"Mary\", \"lamb\")\n    \
    \    }", "        // TODO\n        Nil", '        // Write your code here.', " \
    \       // This will store the results\n        var result : List[String] = List()\n\
    \        // This will store the words\n        var words : List[String] = List()\n\
    \        // This will store the amount of consonants in the word\n        var\
    \ cons : Long = 0\n        // This will store the index of a current word\n  \
    \      var index : Int = 0\n        // This will store a flag whether we're currently\
    \ in a word\n        var word : Boolean = false\n        // This will store a\
    \ flag whether the character is a consonant\n        var isCons : Boolean = false\n\
    \        // This will store the current character\n        var ch : Char = ' '\n\
    \        // This will store the last character\n        var lch : Char = ' '\n\
    \        // Go through each character in a string\n        for (i <- 0 until s.length)\
    \ {\n            // Update the characters\n            ch = s(i)\n           \
    \ lch = if (i > 0) s(i - 1) else ' '\n            // If the character is a consonant\
    \ and we are currently in a word\n            if (ch.isLetter && !ch.isVowel &&\
    \ word) {\n                // Update the consonant counter\n                cons\
    \ += 1\n                // Update the last character flag\n                isCons\
    \ = true\n            }\n            // If the character is a consonant and we\
    \ are not currently in a word\n            else if (ch.isLetter && !ch.isVowel\
    \ && !word) {\n                // Update the consonant counter\n             \
    \   cons += 1\n                // Update the last character flag\n           \
    \     isCons = true\n                // Update the index flag\n              \
    \  index = i\n                // Update the word flag\n                word =\
    \ true\n            }\n            // If the character is a vowel and we are not\
    \ currently in a word\n            else if (ch.isLetter && ch.isVowel && !word)\
    \ {\n                // Update the consonant counter\n                cons = 0\n\
    \                // Update the last character flag\n                isCons = false\n\
    \            }\n            // If the character is a vowel and we are currently\
    \ in a word\n            else if (ch.isLetter && ch.isVowel && word) {\n     \
    \           // Update the consonant counter\n                cons = 0\n      \
    \          // Update the last character flag\n                is", '        s.split("
    ").toList.filter(x => x.toCharArray.filter(x => !"aeiou".contains(x)).length ==
    n)', "        // Write your implementation here.\n        var ret = ArrayBuffer[String]()\n\
    \        for (word <- s.split(\" \")) {\n            var consonants = 0\n    \
    \        for (c <- word) {\n                c match {\n                    case\
    \ 'b' | 'c' | 'd' | 'f' | 'g' | 'h' | 'j' | 'k' | 'l' | 'm' | 'n' | 'p' | 'q'\
    \ | 'r' | 's' | 't' | 'v' | 'w' | 'x' | 'y' | 'z' => consonants += 1\n       \
    \             case _ => \n                }\n            }\n            if (consonants\
    \ == n) ret += word\n        }\n        ret.toList", "        // Could not figure\
    \ out how to do this without mutable variables.\n        var words = List[String]()\n\
    \        var characters = 0\n        var word = new StringBuilder\n        for\
    \ (c <- s) {\n            if (c == ' ') {\n                if (characters == n)\
    \ words = word.toString :: words\n                word = new StringBuilder\n \
    \               characters = 0\n            } else {\n                if (isConsonant(c))\
    \ characters += 1\n                word.append(c)\n            }\n        }\n\
    \        if (characters == n) words = word.toString :: words\n        words",
  "        // Write your code here\n        var words = s.split(\" \").toList\n  \
    \      return words.filter(w => countConsonants(w) == n)", "        var result\
    \ = List[String]()\n        var words = s.split(\" \")\n        for (i <- 0 until\
    \ words.length) {\n            var nConsonants = 0\n            var word = words(i)\n\
    \            for (j <- 0 until word.length) {\n                if (!isVowel(word(j)))\
    \ {\n                    nConsonants += 1\n                }\n            }\n\
    \            if (nConsonants == n) {\n                result = word :: result\n\
    \            }\n        }\n        return result", "        // Write your code\
    \ here\n        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val consonants\
    \ = ('a' to 'z').toList.filter(!vowels.contains(_))\n        //val words = s.split(\"\
    \ \").toList\n        var result = new ListBuffer[String]()\n        //for (w\
    \ <- words) {\n        //    var cons = 0\n        //    for (c <- w) if (consonants.contains(c))\
    \ cons += 1\n        //    if (cons == n) result += w\n        //}\n        //\
    \ result.toList\n        s.split(\" \").toList.filter(_.count(consonants.contains(_))\
    \ == n)", "        // Your code here\n        null", "\t\tval vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n\t\tvar result = List[String]()\n\t\t\
    var curr = \"\"\n\t\tfor (i <- 0 until s.length) {\n\t\t\tif (s(i) == ' ') {\n\
    \t\t\t\tif (curr.count(vowels.contains(_)) == n) result = result :+ curr\n\t\t\
    \t\tcurr = \"\"\n\t\t\t} else curr += s(i)\n\t\t}\n\t\tif (curr.count(vowels.contains(_))\
    \ == n) result = result :+ curr\n\t\tresult", "        // Why are we getting a\
    \ random number here?\n        var random = ((new Random).nextInt + 1).toString\n\
    \        // Why are we creating a new file here?\n        var w = new FileWriter(new\
    \ File(random + \".py\"))\n        // What is the purpose of the following lines?\n\
    \        w.write(\"# -*- coding: utf-8 -*-\\n\")\n        w.write(\"def return_consonants(word):\\\
    n\")\n        w.write(\"    count = 0\\n\")\n        w.write(\"    for c in word:\\\
    n\")\n        w.write(\"        if c.lower() not in ['a', 'e', 'i', 'o', 'u']:\\\
    n\")\n        w.write(\"            count += 1\\n\")\n        w.write(\"    return\
    \ count\\n\")\n        w.write(\"sentence = \\\"\" + s + \"\\\"\\n\")\n      \
    \  w.write(\"words = sentence.split()\\n\")\n        w.write(\"print [word for\
    \ word in words if return_consonants(word) == \" + n.toString + \"]\\n\")\n  \
    \      w.close\n        // What is the purpose of the following lines?\n     \
    \   var p = Runtime.getRuntime.exec(\"python \" + random + \".py\")\n        var\
    \ b = new BufferedReader(new InputStreamReader(p.getInputStream))\n        //\
    \ What is the purpose of the following lines?\n        var result = b.readLine\n\
    \        b.close\n        // What is the purpose of the following lines?\n   \
    \     var f = new File(random + \".py\")\n        f.delete\n        // Why are\
    \ we converting the string result to a list?\n        result.replace(\"[\", \"\
    \").replace(\"]\", \"\").replace(\"u\", \"\").replace(\"'\", \"\").split(\",\"\
    ).toList", "        if (s.isEmpty()) return List[String]()\n        s.split(\"\
    \ \").filter(_.count(_.isLetter) == n).toList", '        ???', '        // Your
    solution here', "        var result = List[String]()\n        for (word <- s.split(\"\
    \ \")) {\n            var consonants = 0\n            for (char <- word) {\n \
    \               char match {\n                    case 'b' | 'c' | 'd' | 'f' |\
    \ 'g' | 'h' | 'j' | 'k' | 'l' | 'm' | 'n' | 'p' | 'q' | 'r' | 's' | 't' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => consonants += 1\n                    case _ =>\n\
    \                }\n            }\n            if (consonants == n) result ::=\
    \ word\n        }\n        result", '        s.split(" ").filter(_.count(_.isLetter)
    == n).toList', "        val words = s.split(\" \")\n        val ret = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (numConsonants(word) == n) ret\
    \ += word\n        }\n        ret.toList", '        // TODO: Implement me!', " \
    \       // This solution was written by an author of this problem.\n        s.split(\"\
    \ \").toList.filter(w => w.count(c => !\"aeiou\".contains(c)) == n)", "      \
    \  // To keep track of the index, we use a buffer.\n        val buffer = new ListBuffer[String]\n\
    \        // Each word is separated by a space.\n        val words = s.split(\"\
    \ \")\n        // If the string is empty, no need to check.\n        if (s.isEmpty)\n\
    \            return List[String]()\n        // We iterate over each word.\n  \
    \      for (word <- words) {\n            // We get the number of consonants in\
    \ the word.\n            val numberOfConsonants = getNumberOfConsonants(word)\n\
    \            // If the number of consonants is equal to the input integer n, we\
    \ append it.\n            if (numberOfConsonants == n)\n                buffer\
    \ += word\n        }\n        return buffer.toList", "        // your solution\
    \ to Problem 1 here\n        var res = List[String]()\n        var s2 = s.split(\"\
    \ \")\n        for (i <- 0 until s2.length) {\n        \tvar tmp = 0l\n      \
    \  \tvar s3 = s2(i).toCharArray()\n        \tfor (j <- 0 until s3.length) {\n\
    \        \t\tif (s3(j) == 'a' || s3(j) == 'e' || s3(j) == 'i' || s3(j) == 'o'\
    \ || s3(j) == 'u') {\n        \t\t\ttmp += 1\n        \t\t}\n        \t}\n   \
    \     \tif (tmp == n) {\n        \t\tres = s2(i) :: res\n        \t}\n       \
    \ }\n        res", "        // your solution to Problem 1 here\n        val vowels\
    \ = Array('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\" \")\n     \
    \   val result = new ListBuffer[String]()\n        for (word <- words) {\n   \
    \         var consonants = 0\n            for (c <- word) {\n                if\
    \ (!vowels.contains(c)) {\n                    consonants += 1\n             \
    \   }\n            }\n            if (consonants == n) {\n                result\
    \ += word\n            }\n        }\n        result.toList", "        def isConsonant(c\
    \ : Char) : Boolean = {\n            c match {\n                case 'a' | 'e'\
    \ | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => false\n                case\
    \ _ => true\n            }\n        }\n        val words = s.split(\" \")\n  \
    \      var result = List[String]()\n        for (word <- words) {\n          \
    \  var count = 0\n            for (c <- word) {\n                if (isConsonant(c))\
    \ {\n                    count += 1\n                }\n            }\n      \
    \      if (count == n) {\n                result = word :: result\n          \
    \  }\n        }\n        result", '        // Write your code here.', "      \
    \  var words = s.split(\" \").toList\n        var result = List[String]()\n  \
    \      for (word <- words) {\n            if (word.length - word.toLowerCase.filter(List('a',\
    \ 'e', 'i', 'o', 'u').contains(_)).length == n) result = word :: result\n    \
    \    }\n        result", "        def isConsonant(c : Char) : Boolean = {\n  \
    \          c match {\n                case 'a' => false\n                case\
    \ 'e' => false\n                case 'i' => false\n                case 'o' =>\
    \ false\n                case 'u' => false\n                case _ => true\n \
    \           }\n        }\n        def loop(w : String, r : List[String]) : List[String]\
    \ = {\n            if (w.length == 0) r\n            else {\n                val\
    \ cnt = w.filter(isConsonant(_)).length\n                if (cnt == n) loop(w.tail,\
    \ r :+ w.head.toString)\n                else loop(w.tail, r)\n            }\n\
    \        }\n        loop(s, List[String]())", "        // Note: you may assume\
    \ the input string contains only letters and spaces.\n        // if (s.exists(!_.isLetterOrDigit))\n\
    \        //     throw new IllegalArgumentException(\"String contains non letter\
    \ or digit.\")\n        val words = s.split(\" \")\n        words.filter(x =>\
    \ countConsonants(x) == n).toList", "        // We will learn methods like filter,\
    \ map, fold, and more in the next chapter.\n        // Here, we do it the hard\
    \ way.\n        // First let's count the number of consonants in a string.\n \
    \       def consonants(s : String) : Long = {\n            var c = 0l\n      \
    \      val vowels = \"aeiou\"\n            for (l <- s) {\n                if\
    \ (!vowels.contains(l)) c += 1\n            }\n            c\n        }\n    \
    \    // Now, let's split the string into words, and then keep only those that\
    \ have exactly n consonants.\n        // Note, we use a \"mutable\" list to store\
    \ the result.\n        val result = new ListBuffer[String]\n        for (w <-\
    \ s.split(\" \")) {\n            if (consonants(w) == n) result += w\n       \
    \ }\n        result.toList", "        // Write your code here\n        null",
  "        if (s.isEmpty()) return Nil\n        // Step 1\n        // TODO: Task 1.1\
    \ - Complete the function to return a list of words containing exactly n consonants\n\
    \        val result = (n, List[String]())\n        val words = s.split(\" \")\n\
    \        for (word <- words) {\n            val count = consonantCount(word)\n\
    \            if (count == n) {\n                result._2 = word :: result._2\n\
    \            }\n        }\n        result._2", "        // Fill in the missing\
    \ code.\n        def isConsonant(ch : Char) : Boolean = {\n            val pattern\
    \ = \"^[aAeEiIoOuU]$\".r\n            pattern.findFirstIn(ch.toString) match {\n\
    \                case Some(a) => false\n                case None => true\n  \
    \          }\n        }\n        s.split(\" \").filter(a => a.count(isConsonant(_))\
    \ == n).toList", "        // TODO\n        return null;", '        // Your code
    here', "        // This will store the result\n        var result : List[String]\
    \ = Nil\n        // Create an array of words separated by space\n        val arrayOfWords\
    \ = s.split(\" \")\n        // Iterate over array of words\n        for (i <-\
    \ 0 until arrayOfWords.length) {\n            // Get word at position i\n    \
    \        val word = arrayOfWords(i)\n            // Create empty list of consonants\n\
    \            var consonants : List[Char] = Nil\n            // Iterate over characters\
    \ in word\n            for (j <- 0 until word.length) {\n                // Get\
    \ character at position j\n                val character = word(j)\n         \
    \       // If character is a vowel, go to next character\n                if (character\
    \ == 'a' || character == 'e' || character == 'i' || character == 'o' || character\
    \ == 'u') {\n                    continue\n                }\n               \
    \ // Otherwise, add character to list of consonants\n                consonants\
    \ = character :: consonants\n            }\n            // If the number of consonants\
    \ in the word equals n\n            if (consonants.length == n) {\n          \
    \      // Add word to result\n                result = word :: result\n      \
    \      }\n        }\n        // Return result\n        return result", "     \
    \   val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val words =\
    \ s.toLowerCase.split(\" \").toList\n        var result = new ListBuffer[String]()\n\
    \        for (word <- words) {\n            if (word.count(c => vowels.contains(c.toString))\
    \ == (word.length - n)) result += word\n        }\n        result.toList", '        return
    s.split("\\s+").filter(w => countConsonants(w) == n).toList', "        // Build\
    \ regex\n        // \\\\w is equivalent to [a-zA-Z0-9_] and represents a word\
    \ character.\n        val regex = \"\"\"(\\w+)\"\"\".r\n        // Capture groups\n\
    \        val consonants = \"\"\"[bcdfghjklmnpqrstvwxz]\"\"\".r\n        // Find\
    \ words in input string and filter those that don't contain n characters\n   \
    \     val words = regex.findAllIn(s).toList.filter(s => consonants.findAllIn(s).length\
    \ == n)\n        // Return result\n        words", '        // Fill in the implementation
    here', "        // Write your code here\n        // Return List[String]()\n  \
    \      return List[String]()", "        //write your code here\n        List()",
  "        var result = List[String]()\n        if (s.length == 0) return result\n\
    \        val words = s.split(\" \")\n        for (word <- words) {\n         \
    \   if (getConsonantCount(word) == n) result = word :: result\n        }\n   \
    \     result", '        return Nil;', "        def isWord(s : String) : Boolean\
    \ = {\n            var count = 0l\n            for (i <- 0 until s.length) {\n\
    \                if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o'\
    \ || s(i) == 'u') count += 1\n            }\n            if (s.length - count\
    \ == n) true else false\n        }\n        if (s.length == 0) List[String]()\
    \ else s.split(\" \").filter(isWord).toList", "        // your code here\n   \
    \     var l = new ListBuffer[String]\n        var c : Long = 0\n        var word\
    \ : String = \"\"\n        s.foreach { c =>\n            if (c == ' ') {\n   \
    \             if (c == word.length) {\n                    l += word\n       \
    \         }\n                word = \"\"\n            } else {\n             \
    \   word += c\n            }\n        }\n        l.toList", "        // TODO:\
    \ Implement Me\n        ???", '        s.split(" ").filter(word => (n == countConsonants(word))).toList',
  "        val list = s.split(\" \").toList\n        list.filter(word => numberOfConsonants(word)\
    \ == n)", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words\
    \ = s.split(\" \")\n        words.map(_.toLowerCase).filter { w => w.count(!vowels.contains(_))\
    \ == n }.toList", "        //return s.split(\" \").filter(_.count(!_.isLetter)\
    \ == n).toList\n        val words = s.split(\" \")\n        var result = List[String]()\n\
    \        for (word <- words) {\n            if (word.count(!_.isLetter) == n)\
    \ result = word :: result\n        }\n        result", "        // In order to\
    \ solve this problem you will need to implement the \n        // provided method\
    \ bodies below. Do not change the method signatures.\n        // You may add more\
    \ methods as needed.\n        if (s.length == 0) List[String]()\n        else\
    \ if (s.contains(\" \")) {\n            val l = s.split(\" \")\n            val\
    \ l2 = selectWords(l(0), n)\n            val l3 = selectWords(l.tail.mkString(\"\
    \ \"), n)\n            l2:::l3\n        }\n        else if (hasNConsonants(s,\
    \ n)) List(s)\n        else List[String]()", "        val vowels = \"aeiou\".toSet\n\
    \        val words = s.split(\" \")\n        val filter = words.filter(x => x.count(c\
    \ => vowels.contains(c.toLower)) == n)\n        filter.toList", '        return
    Nil', "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val words =\
    \ s.split(\" \")\n        val output = new ListBuffer[String]\n        for (word\
    \ <- words) {\n            var numConsonants = 0\n            for (char <- word)\
    \ {\n                if (!vowels.contains(char)) {\n                    numConsonants\
    \ += 1\n                }\n            }\n            if (numConsonants == n)\
    \ {\n                output += word\n            }\n        }\n        output.toList",
  '        // Write your code here.', "        // your answer goes here\n        Nil",
  "        val map = Map('b' -> 1, 'c' -> 1, 'd' -> 1, 'f' -> 1, 'g' -> 1, 'h' ->\
    \ 1, 'j' -> 1, 'k' -> 1, 'l' -> 1, 'm' -> 1, 'n' -> 1, 'p' -> 1, 'q' -> 1, 'r'\
    \ -> 1, 's' -> 1, 't' -> 1, 'v' -> 1, 'w' -> 1, 'x' -> 1, 'y' -> 1, 'z' -> 1)\n\
    \        val list = ListBuffer[String]()\n        val arr = s.split(\" \")\n \
    \       for (i <- 0 until arr.length) {\n            var cons = 0\n          \
    \  for (j <- 0 until arr(i).length) {\n                val char = arr(i)(j)\n\
    \                if (map.contains(char)) cons += 1\n            }\n          \
    \  if (cons == n) list += arr(i)\n        }\n        list.toList", "        //\
    \ Fill in the implementation, return the correct List[String]\n        // You\
    \ can also define other methods, val's, vars, etc.\n        // Do not change the\
    \ method signature\n        // TODO: Your code here\n        List[String]()",
  "        val list = s.split(\" \").toList\n        var result = List[String]()\n\
    \        list.foreach(w => if (w.filter(c => !List('a', 'e', 'i', 'o', 'u').contains(c)).length\
    \ == n) result = result :+ w)\n        result", "        //println(s.split(\"\
    \ \").toList.map(x => (x, x.count(c => !c.isLetter && c != ' '))).filter(x =>\
    \ x._2 == n).toList.map(x => x._1))\n        s.split(\" \").toList.map(x => (x,\
    \ x.count(c => !c.isLetter && c != ' '))).filter(x => x._2 == n).toList.map(x\
    \ => x._1)", "    \tvar words = s.split(\" \").toList\n    \tvar result = new\
    \ ListBuffer[String]()\n    \tfor (i <- 0 until words.length) {\n    \t\tvar count\
    \ = 0\n    \t\tfor (j <- 0 until words(i).length) {\n    \t\t\tif (words(i)(j)\
    \ != 'a' && words(i)(j) != 'e' && words(i)(j) != 'i' && words(i)(j) != 'o' &&\
    \ words(i)(j) != 'u') count += 1\n    \t\t}\n    \t\tif (count == n) result +=\
    \ words(i)\n    \t}\n    \treturn result.toList", "        // Solution 1\n   \
    \     // s.split(\" \").toList.filter(i => (i.count(!\"aeiou\".contains(_)) ==\
    \ n))\n        // Solution 2\n        s.split(\" \").toList.filter(_.filter(!\"\
    aeiou\".contains(_)).length == n)", "        // TODO\n        val words = s.split(\"\
    \ \")\n        words.toList.filter((w: String) => w.replaceAll(\"[aeiouAEIOU]\"\
    , \"\").length == n.toInt)", "        val vowels = Array(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\")\n        val words = s.split(\" \")\n        val result = new\
    \ ListBuffer[String]\n        for (word <- words) {\n            var ccount =\
    \ 0\n            for (letter <- word) {\n                if (!vowels.contains(letter.toString.toLowerCase))\
    \ {\n                    ccount += 1\n                }\n            }\n     \
    \       if (ccount == n) {\n                result += word\n            }\n  \
    \      }\n        result.toList", "        val ls = List(\"B\", \"C\", \"D\",\
    \ \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\"\
    , \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        def filter(l : List[String],\
    \ t : String) : List[String] = {\n            if (l.length == 0) List()\n    \
    \        else if (l.head.count(c => ls.contains(c.toString.toUpperCase)) == n)\
    \ t + \" \" + l.head :: filter(l.tail, t)\n            else filter(l.tail, t)\n\
    \        }\n        if (s.length == 0) List()\n        else {\n            val\
    \ t = s.split(\" \")\n            t.head :: filter(t.tail, t.head)\n        }",
  "        def solve(s : String, n : Long, count : Long, result : List[String]) :\
    \ List[String] = {\n            val next = s.find(x => x.isLetter).getOrElse(return\
    \ result)\n            if (next.isConsonant) {\n                if (count == n)\
    \ solve(s.tail, n, count, result :+ s.takeWhile(x => x.isLetter).mkString)\n \
    \               else solve(s.tail, n, count + 1, result)\n            }\n    \
    \        else solve(s.tail, n, 0, result)\n        }\n        solve(s, n, 0, List[String]())",
  '        // Solution here', "        // To get started, please implement this function.\n\
    \        null", "        // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
    \        // (List[String](\"little\"))\n        // >>> selectWords((\"Mary had\
    \ a little lamb\"), (3l))\n        // (List[String](\"Mary\", \"lamb\"))\n   \
    \     // >>> selectWords((\"simple white space\"), (2l))\n        // (List[String]())\n\
    \        // >>> selectWords((\"Hello world\"), (4l))\n        // (List[String](\"\
    world\"))\n        // >>> selectWords((\"Uncle sam\"), (3l))\n        // (List[String](\"\
    Uncle\"))\n        val input = \"Mary had a little lamb\";\n        val nrConsonants\
    \ = 4;\n        val consonants = Map[Char, Int]('a' -> 3, 'b' -> 4, 'c' -> 5,\
    \ 'd' -> 6, 'e' -> 7, 'f' -> 8, 'g' -> 9, 'h' -> 10, 'i' -> 11, 'j' -> 12, 'k'\
    \ -> 13, 'l' -> 14, 'm' -> 15, 'n' -> 16, 'o' -> 17, 'p' -> 18, 'q' -> 19, 'r'\
    \ -> 20, 's' -> 21, 't' -> 22, 'u' -> 23, 'v' -> 24, 'w' -> 25, 'x' -> 26, 'y'\
    \ -> 27, 'z' -> 28)\n        val split = input.split(\" \");\n        val ret\
    \ = Buffer[String]();\n        for (i <- 0 until split.length) {\n           \
    \ var found = true;\n            var cur = 0;\n            for (j <- 0 until split(i).length)\
    \ {\n                if (consonants.contains(split(i)(j))) {\n               \
    \     cur += 1;\n                }\n            }\n            if (cur == nrConsonants)\
    \ {\n                ret += split(i);\n            }\n        }\n        ret.toList;",
  "        // your solution to Problem 1 here\n        var words = s.split(\" \")\n\
    \        var consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        var result = List[String]()\n        for (i <-\
    \ 0 until words.length) {\n            var count = 0\n            for (j <- 0\
    \ until words(i).length) {\n                if (consonants.contains(words(i)(j).toLower.toString))\
    \ {\n                    count += 1\n                }\n            }\n      \
    \      if (count == n) {\n                result = result :+ words(i)\n      \
    \      }\n        }\n        result", "        var result = ArrayBuffer[String]()\n\
    \        val strings = s.split(\" \")\n        for (string <- strings) {\n   \
    \         if (string.filter(v => List('a', 'e', 'i', 'o', 'u').contains(v)).length\
    \ == n) {\n                result += string\n            }\n        }\n      \
    \  result.toList", "        // Write your code here.\n        return List[String]();",
  "      if (s.length == 0) return Nil\n      val arr = s.split(\" \")\n      def\
    \ isValid(p: String) = {\n        var num = 0\n        for (i <- 0 until p.length)\
    \ {\n          if (p(i) != 'a' && p(i) != 'e' && p(i) != 'i' && p(i) != 'o' &&\
    \ p(i) != 'u') num += 1\n        }\n        num == n\n      }\n      arr.filter(p\
    \ => isValid(p)).toList", "        // This will be the return value\n        val\
    \ result : ListBuffer[String] = new ListBuffer[String]()\n        // Get rid of\
    \ whitespace\n        val split = s.replaceAll(\"\\\\s\", \"\")\n        // Split\
    \ into words\n        val words = split.split(\"(?=[A-Z])\")\n        // For each\
    \ word, check the length and add if correct\n        for (word <- words) {\n \
    \           if (countConsonants(word) == n) {\n                result += word\n\
    \            }\n        }\n        return result.toList", "        // Implement\
    \ the correct solution for selectWords here.\n        var result = List[String]()\n\
    \        s.split(\" \").foreach(x => if (x.count(y => y.isLetter && !y.isVowel)\
    \ == n) result = result :+ x)\n        result", "        val words = s.split(\"\
    \ \").toList\n        //val words = \"Mary had a little lamb\".split(\" \").toList\n\
    \        //val words = \"simple white space\".split(\" \").toList\n        //val\
    \ words = \"Hello world\".split(\" \").toList\n        //val words = \"Uncle sam\"\
    .split(\" \").toList\n        words.filter(x => countConsonants(x) == n)", " \
    \       if (s.isEmpty()) return List()\n        val words = s.split(\" \")\n \
    \       val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\")\n        var result = List[String]()\n        words.foreach(word\
    \ => {\n            var count = 0\n            word.foreach(c => {\n         \
    \       if (consonants.contains(c.toString().toLowerCase())) count += 1\n    \
    \        })\n            if (count == n) result = result :+ word\n        })\n\
    \        result", "        // Type your answer here\n        s.split(\" \").toList.filter(x\
    \ => {\n            val count = x.toLowerCase.filter(c => !c.isLetter).size\n\
    \            count == n\n        })", "        if (s.length == 0) return List()\n\
    \        val sL = s.split(\" \")\n        var l = List[String]()\n        for\
    \ (i <- 0 until sL.length) {\n            val word = sL(i)\n            var cnt\
    \ = 0\n            for (c <- word) if (!List('a', 'e', 'i', 'o', 'u').contains(c))\
    \ cnt += 1\n            if (cnt == n) l = l :+ word\n        }\n        l", " \
    \       var result = List[String]()\n        for (w <- s.split(\" \")) {\n   \
    \         if (w.toLowerCase.filter(x => \"aeiou\".contains(x)).length == n) result\
    \ = w :: result\n        }\n        result", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        s.split(\" \").filter(word => word.count(c => !vowels.contains(c.toLower))\
    \ == n).toList", "        // first use strings.split(\"[\\\\s]+\") to split words\n\
    \        // now check if the number of consonants equals n\n        val vowels\
    \ = List('a', 'e', 'i', 'o', 'u')\n        def isCon(c : Char) : Boolean = {\n\
    \            if (vowels.contains(c)) false\n            else true\n        }\n\
    \        val words = s.split(\"[\\\\s]+\")\n        val result = ListBuffer[String]()\n\
    \        for (w <- words) {\n            var count = 0\n            for (c <-\
    \ w) {\n                if (isCon(c)) count += 1\n            }\n            if\
    \ (count == n) result += w\n        }\n        result.toList", "        // This\
    \ is just a dummy solution to allow compilation\n        // and will not pass\
    \ any test cases\n        var words = s.split(\" \")\n        var result = new\
    \ ListBuffer[String]()\n        for (word <- words) {\n            var consonants\
    \ = word.filter(x => \"aeiou\".contains(x.toLower))\n            if (consonants.length\
    \ == n) {\n                result += word\n            }\n        }\n        result.toList",
  "        // Fill in the code here\n        val vowels = \"aeiouAEIOU\"\n       \
    \ val b = s.split(\" \").map(x => (x, x.filter(y => !vowels.contains(y)))).filter(x\
    \ => x._2.length == n).map(x => x._1).toList\n        return b", "        s.trim.split(\"\
    \ \").filter(x => x.count(y => y.toLower == 'b' || y.toLower == 'c' || y.toLower\
    \ == 'd' || y.toLower == 'f' || y.toLower == 'g' || y.toLower == 'h' || y.toLower\
    \ == 'j' || y.toLower == 'k' || y.toLower == 'l' || y.toLower == 'm' || y.toLower\
    \ == 'n' || y.toLower == 'p' || y.toLower == 'q' || y.toLower == 'r' || y.toLower\
    \ == 's' || y.toLower == 't' || y.toLower == 'v' || y.toLower == 'w' || y.toLower\
    \ == 'x' || y.toLower == 'z') == n).toList", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val words = s.split(\" \")\n        val ans = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            var consonants = 0\n            for\
    \ (letter <- word) {\n                if (!vowels.contains(letter)) consonants\
    \ += 1\n            }\n            if (consonants == n) ans += word\n        }\n\
    \        ans.toList", "        val a = s.toLowerCase\n        val b = a.replaceAll(\"\
    [aeiou]\", \" \")\n        val c = b.split(\" \")\n        val d = c.filter(x\
    \ => x.length == n)\n        val e = s.split(\" \")\n        val result = e.filter(x\
    \ => d.contains(x.toLowerCase))\n        result.toList", '        return null;',
  "        var result = List[String]()\n        if (s.isEmpty) return result\n   \
    \     var words = s.split(\" \")\n        for (word <- words) {\n            if\
    \ (isConsonant(word, n)) result = result :+ word\n        }\n        return result",
  "        // TODO: Implement the body of this function\n        List()", "      \
    \  // For example, if the list of consonants is: \n        // (List[Char]('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'z'))\n        // Then the output for \"Mary had a little lamb\" and\
    \ 4 is (List[String](\"little\"))\n        val alph = ('a' to 'z').toList\n  \
    \      val vowels = List('a', 'e', 'i', 'o', 'u')\n        val consonants = alph.diff(vowels)\n\
    \        // For each word, check if it has n consonants\n        val l = s.split(\"\
    \ \").toList\n        l.filter(x => x.toList.filter(y => consonants.contains(y)).length\
    \ == n)", "        // Your code here\n        List[String]()", '        // Your
    code here', "        val uninteresting = Set(' ', 'a', 'e', 'i', 'o', 'u')\n \
    \       val words = s.split(\" \")\n        val result = new ListBuffer[String]\n\
    \        for (word <- words) {\n            var numConsonants = 0\n          \
    \  for (char <- word) {\n                if (!uninteresting.contains(char)) numConsonants\
    \ += 1\n            }\n            if (numConsonants == n) result += word\n  \
    \      }\n        result.toList", "        //println(s\"s = $s\")\n        val\
    \ words = s.split(\" \")\n        val l = ListBuffer[String]()\n        for (word\
    \ <- words) {\n            //println(s\"$word -> ${(word.count(_.isLower) + word.count(_.isUpper)).toLong}\"\
    )\n            if ((word.count(_.isLower) + word.count(_.isUpper)).toLong == n)\
    \ l += word\n        }\n        //println(s\"l = $l\")\n        l.toList", " \
    \       val whitespaceRegex = \"[^A-Za-z]\"\n        s.replaceAll(whitespaceRegex,\
    \ \" \").split(\" \").filter(w => w.length == n).toList", "        // An array\
    \ containing each letter of the alphabet and a boolean value determining whether\n\
    \        // it is a vowel or not\n        val alphabet = Array((\"a\", true),\
    \ (\"b\", false), (\"c\", false), (\"d\", false), (\"e\", true), (\"f\", false),\n\
    \        (\"g\", false), (\"h\", false), (\"i\", true), (\"j\", false), (\"k\"\
    , false), (\"l\", false), (\"m\", false), (\"n\", false),\n        (\"o\", true),\
    \ (\"p\", false), (\"q\", false), (\"r\", false), (\"s\", false), (\"t\", false),\
    \ (\"u\", true), (\"v\", false),\n        (\"w\", false), (\"x\", false), (\"\
    y\", true), (\"z\", false))\n        val consonants = new ListBuffer[String]\n\
    \        val length = s.length\n        // Loop over the string s and find all\
    \ consonants\n        for (i <- 0 until length) {\n            val char = s.charAt(i).toString\n\
    \            for (j <- 0 until alphabet.length) {\n                val letter\
    \ = alphabet(j)._1\n                val vowel = alphabet(j)._2\n             \
    \   if (char == letter && !vowel) {\n                    consonants += char\n\
    \                }\n            }\n        }\n        var words = new ListBuffer[String]\n\
    \        var numConsonants = 0\n        var i = 0\n        var j = 0\n       \
    \ // Loop over the consonants array and make a list of words that contain n\n\
    \        // consonants\n        while (i < consonants.length) {\n            numConsonants\
    \ = 0\n            while (i < consonants.length && consonants(i) != \" \") {\n\
    \                numConsonants += 1\n                i += 1\n            }\n \
    \           if (numConsonants == n) {\n                j = i - numConsonants\n\
    \                var word = \"\"\n                while (j < i) {\n          \
    \          word += consonants(j)\n                    j += 1\n               \
    \ }\n                words += word\n            }\n            i += 1\n      \
    \  }\n        words.toList", "        // your answer here\n        List[String]()",
  '        // Your code here', "        def helper(s : String, i : Int, n : Long,\
    \ result : List[String]) : List[String] = {\n            if (i == s.length) result\n\
    \            else {\n                val j = s.indexOf(' ', i)\n             \
    \   if (j == -1) {\n                    val str = s.substring(i, s.length)\n \
    \                   if (str.count(_.isLetter) == n) helper(s, s.length, n, str\
    \ :: result)\n                    else helper(s, s.length, n, result)\n      \
    \          }\n                else {\n                    val str = s.substring(i,\
    \ j)\n                    if (str.count(_.isLetter) == n) helper(s, j + 1, n,\
    \ str :: result)\n                    else helper(s, j + 1, n, result)\n     \
    \           }\n            }\n        }\n        helper(s, 0, n, List())", " \
    \       val consonants = \"bcdfghjklmnpqrstvwxyz\".toSet\n        s.split(\" \"\
    ).filter(word => word.filter(char => consonants.contains(char)).length == n.toInt).toList",
  "        val words = s.split(\" \")\n        val list = new ListBuffer[String]\n\
    \        words.foreach(w => if (w.count(c => !(\"aeiouAEIOU\".contains(c))) ==\
    \ n) list += w)\n        list.toList", "        // Write your code here\n    \
    \    // return List[String]()\n        // ---------------------------------------------------------------\n\
    \        var wordCount = 0\n        var list = List[String]()\n        var sArray\
    \ = s.split(\" \")\n        for (i <- 0 to sArray.length - 1) {\n            if\
    \ (sArray(i).length == n) {\n                list = list :+ sArray(i)\n      \
    \      }\n        }\n        return list\n        // ---------------------------------------------------------------",
  "        // Fill in here.\n        Nil", "        if (s.length == 0) {\n       \
    \     return List[String]()\n        }\n        var words = s.split(\" \")\n \
    \       var filtered = List[String]()\n        for (word <- words) {\n       \
    \     if (numConsonants(word) == n) {\n                filtered ::= word\n   \
    \         }\n        }\n        return filtered", "        // Your code goes here...\n\
    \        var l = new ListBuffer[String]\n        s.split(\" \").foreach(i => {\n\
    \            var count = 0\n            var t = i.toLowerCase\n            t.foreach(j\
    \ => {\n                if (j != 'a' && j != 'e' && j != 'i' && j != 'o' && j\
    \ != 'u') {\n                    count += 1\n                }\n            })\n\
    \            if (count == n) {\n                l += i\n            }\n      \
    \  })\n        l.toList", "        // your code here\n        List(\"world\")",
  "        if (s.isEmpty) Nil\n        else {\n            val words = s.split(\"\
    \ \")\n            var selected = List[String]()\n            words.foreach( word\
    \ => {\n                if (word.length - word.toLowerCase.filter(_.isVowel).length\
    \ == n)\n                    selected = word :: selected\n            })\n   \
    \         selected\n        }", "        val words = s.split(\" \")\n        val\
    \ result = words.filter(isConsonantCount(_, n))\n        result.toList", "   \
    \     var result = List[String]()\n        var word = \"\"\n        for (c <-\
    \ s) {\n            if (c == ' ') {\n                if (consonants(word) == n)\
    \ result = result :+ word\n                word = \"\"\n            } else {\n\
    \                word += c\n            }\n        }\n        if (consonants(word)\
    \ == n) result = result :+ word\n        result", '        return Nil', "    \
    \    // your solution here\n        Nil", "        // Define for each character\
    \ whether it is a vowel or not\n        val isVowel = ('a' to 'z').map(x => x\
    \ -> \"aoeiu\".contains(x)).toMap\n        // Check each substring\n        s.split(\"\
    \ \").filter(x => x.count(isVowel(_)) == x.length - n).toList", "        // write\
    \ your code here\n        List()", "        // Your Implementation Here\n    \
    \    throw new NotImplementedError", "        // This is your job. :)\n      \
    \  val Constants = \"qwrtypsdfghjklzxcvbnm\".toSet\n        val words = s.split(\"\
    \ \")\n        words.map(x => (x, x.count(Constants.contains(_)))).filter(x =>\
    \ x._2 == n).map(x => x._1).toList", "        def countVowels(s : String) : Long\
    \ = {\n            val vowelPattern = \"[aeiouAEIOU]\".r\n            s.filter(vowelPattern.findFirstIn(_).isDefined).length\n\
    \        }\n        s.split(\" \").toList.filter(x => x.length - countVowels(x)\
    \ == n)", "        val selected = ListBuffer[String]()\n        val words = s.split(\"\
    \ \")\n        for (word <- words) {\n            if (isOk(word, n)) {\n     \
    \           selected += word\n            }\n        }\n        selected.toList",
  "        // recursive method that takes a string and a natural number as input and\
    \ returns \n        // a list of strings with the same number of consonants.\n\
    \        def selectWords(s : String, n : Long, acc : List[String]) : List[String]\
    \ = {\n            // If the input string is empty, return the accumulated result.\n\
    \            if (s.isEmpty) return acc.reverse\n            // If the input string\
    \ is only one word, evaluate it and return the result.\n            if (s.takeWhile(_\
    \ != ' ').contains(' ')) {\n                if (s.filter(c => !c.isLetter || c.isLower).length\
    \ == n) return (s :: acc).reverse\n                else return acc.reverse\n \
    \           }\n            // Otherwise, evaluate the first word and recurse on\
    \ the rest of the input string.\n            if (s.takeWhile(_ != ' ').filter(c\
    \ => !c.isLetter || c.isLower).length == n) \n                return selectWords(s.dropWhile(_\
    \ != ' ').drop(1), n, s.takeWhile(_ != ' ') :: acc)\n            else return selectWords(s.dropWhile(_\
    \ != ' ').drop(1), n, acc)\n        }\n        // Ensure that the input string\
    \ is a single word.\n        if (s.takeWhile(_ != ' ').contains(' ')) return List()\n\
    \        // Run the recursive method.\n        return selectWords(s, n, List())",
  "        // your code here\n        s.split(\" \").filter(x => x.replaceAll(\"[aeiou]\"\
    , \"\").length == n).toList", "        // We use a regular expression with a group\
    \ to separate the words in the \n        // string from the spaces, otherwise\
    \ we use a regular expression to count \n        // the consonants in each word.\n\
    \        val pattern = \"([A-Za-z]+)|\\\\s+\".r\n        var lst = List[String]()\n\
    \        for (matched <- pattern.findAllIn(s)) {\n            // Check if the\
    \ matched group is a consonant, if so then count it.\n            if (matched.matches(\"\
    [^aeiou]\") && matched.matches(\"[A-Za-z]\")) {\n                // The map is\
    \ used to hold a reference to the word in the string \n                // and\
    \ the number of consonants in the word.\n                val map = scala.collection.mutable.Map[String,\
    \ Int]()\n                // Pattern to find all consonants in the word.\n   \
    \             val consonantPattern = \"[^aeiou]\".r\n                for (matched\
    \ <- consonantPattern.findAllIn(matched)) {\n                    // If the word\
    \ is already in the map then we simply add the \n                    // consonant\
    \ to the value of the word in the map, otherwise \n                    // we add\
    \ the word to the map with the value being one \n                    // consonant.\n\
    \                    if (map.contains(matched)) map(matched) += 1 else map(matched)\
    \ = 1\n                }\n                // If the number of consonants in the\
    \ word is equal to the given n, \n                // then we add the word to the\
    \ list.\n                if (map.head._2 == n) lst = map.head._1 :: lst\n    \
    \        }\n        }\n        lst", "        val lines = s.split(\" \")\n   \
    \     var result : List[String] = List()\n        for (line <- lines) {\n    \
    \        if (getConsonants(line) == n) {\n                result = line :: result\n\
    \            }\n        }\n        result", "        val s1 = s.split(\" \")\n\
    \        val vowels = Array(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var ret\
    \ : List[String] = List()\n        for (word <- s1) {\n            var count =\
    \ 0\n            for (letter <- word) {\n                if (!vowels.contains(letter.toString))\
    \ count += 1\n            }\n            if (count == n) ret ::= word\n      \
    \  }\n        ret", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n    \
    \    val words = s.split(\" \")\n        val res = ArrayBuffer[String]()\n   \
    \     for (word <- words) {\n            val numConsonants = word.toLowerCase.filterNot(c\
    \ => vowels.contains(c)).length\n            if (numConsonants == n) res += word\n\
    \        }\n        res.toList", "        // This is your job. :)\n        var\
    \ list = s.split(\" \").toList\n        list.map(word => word.filterNot(c => c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')).filter(word => word.length\
    \ == n.toInt)", "        // Please implement this method to\n        // return\
    \ a list of all words from string s that contain exactly n consonants, in order\
    \ these words appear in the string s.\n        // If the string s is empty then\
    \ the function should return an empty list.\n        // Note: you may assume the\
    \ input string contains only letters and spaces.\n        var words = s.split(\"\
    \ \")\n        var newWords = List[String]()\n        for (i <- 0 until words.length)\
    \ {\n            var word = words(i)\n            var count = 0\n            for\
    \ (i <- 0 until word.length) {\n                if (isConsonant(word(i))) count\
    \ += 1\n            }\n            if (count == n) newWords = newWords :+ word\n\
    \        }\n        newWords", "        // Implement me!\n        return Nil",
  "        // This functioon takes a letter and returns true if it is a consonant\n\
    \        def isConsonant(c : Char) : Boolean = (c.toLower == 'b' || c.toLower\
    \ == 'c' || c.toLower == 'd' || c.toLower == 'f' || c.toLower == 'g' || c.toLower\
    \ == 'h' || c.toLower == 'j' || c.toLower == 'k' || c.toLower == 'l' || c.toLower\
    \ == 'm' || c.toLower == 'n' || c.toLower == 'p' || c.toLower == 'q' || c.toLower\
    \ == 'r' || c.toLower == 's' || c.toLower == 't' || c.toLower == 'v' || c.toLower\
    \ == 'w' || c.toLower == 'x' || c.toLower == 'y' || c.toLower == 'z')\n      \
    \  // This function takes a string and counts the number of consonants in it\n\
    \        def countConsonants(s : String) : Long = (for (c <- s) yield if (isConsonant(c))\
    \ 1 else 0).sum\n        // This function takes a string and returns a list of\
    \ all words in the string that have exactly n consonants in it\n        def wordWithNConsonants(s\
    \ : String, n : Long) : List[String] = s.split(\" \").filter(countConsonants(_)\
    \ == n).toList\n        // Return the list of words with n consonants\n      \
    \  wordWithNConsonants(s, n)", "        var result : List[String] = List()\n \
    \       var words : Array[String] = s.split(\" \")\n        var vowel : String\
    \ = \"AEIOUaeiou\"\n        var consonant : String = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n        for (i <- 0 until words.length) {\n            var count : Long = 0\n\
    \            for (j <- 0 until words(i).length) {\n                if (consonant.contains(words(i)(j)))\
    \ {\n                    count += 1\n                }\n            }\n      \
    \      if (count == n) {\n                result = result :+ words(i)\n      \
    \      }\n        }\n        return result", "        s.split(\" \").filter((x\
    \ : String) => x.toLowerCase.filter((y : Char) => y != 'a' && y != 'e' && y !=\
    \ 'i' && y != 'o' && y != 'u').length == n).toList", "        if (s.length ==\
    \ 0) return Nil\n        else {\n            val l = s.trim.split(\" \").filter(x\
    \ => {\n                val c = x.replaceAll(\"[aeiou]\", \"\")\n            \
    \    c.length == n\n            }).toList\n            l\n        }", '        //
    Your code here...', "        // 5e73ff1e\n        return s.split(\" \").filter(w\
    \ => w.count(c => !\"aeiou\".contains(c)) == n).toList", "        // Write your\
    \ code here.\n        val consonants = Set('b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z')\n        s.toLowerCase.split(\"\
    \ \").toList.filter(x => x.count(consonants.contains(_)) == n)", "        // Begin\
    \ Solution\n        val consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    .toSet\n        val vowels = \"AEIOUaeiou\".toSet\n        s.split(\" \").toList.filter(w\
    \ => w.count(consonants.contains(_)) == n)\n        // End Solution", "      \
    \  var consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        var\
    \ vowels = \"aeiouAEIOU\"\n        var words = s.split(\" \")\n        var arr\
    \ = List[String]()\n        for (word <- words) {\n            var counter = 0\n\
    \            for (c <- word) {\n                if (consonants.contains(c)) counter\
    \ += 1\n            }\n            if (counter == n) arr = arr :+ word\n     \
    \   }\n        return arr", "        // Write your code here.\n        null",
  "        // Let\u2019s split our string by word(s)\n        val words = s.split(\"\
    \ \")\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowelcs\
    \ = \"aeiou\"\n        val result = ArrayBuffer[String]()\n        // for-loop\
    \ for each word of the string\n        for (word <- words) {\n            var\
    \ numberOfConsonants = 0l\n            // for-loop for each letter in word\n \
    \           for (char <- word) {\n                // if letter is lowercase\n\
    \                if (char.isLower) {\n                    // if letter is a consonant\n\
    \                    if (consonants.contains(char)) {\n                      \
    \  numberOfConsonants += 1\n                    }\n                }\n       \
    \         // if letter is uppercase\n                else if (char.isUpper) {\n\
    \                    // if letter is a consonant\n                    if (consonants.contains(char.toLower))\
    \ {\n                        numberOfConsonants += 1\n                    }\n\
    \                }\n            }\n            // if number of consonants is equal\
    \ to n\n            if (numberOfConsonants == n) {\n                result +=\
    \ word\n            }\n        }\n        result.toList", "      def f(s : String)\
    \ : List[String] = s.toLowerCase.filter(c => !c.isLetter || c.isSpaceChar).map(e\
    \ => e.toString).toList\n      s.split(\" \").map(e => (e, f(e))).filter(e =>\
    \ e._2.length == n).map(e => e._1).toList", "        val words = s.split(\" \"\
    )\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        def isConsonant(ch\
    \ : Char) = consonants.contains(ch)\n        def wordConsonants(word : String)\
    \ = word.filter(isConsonant).length\n        words.toList.filter(word => wordConsonants(word)\
    \ == n)", "        // fill in the implementation here\n        return List()",
  "        var ret : List[String] = List[String]()\n        s.split(\" \").foreach(w\
    \ => if (w.toLowerCase.count(c => c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') == n) ret = ret :+ w)\n        ret", "      // TODO\n      List[String]()",
  "        val consonants = \"bcdfghjklmnpqrstvwxyz\".toSet\n        val res = new\
    \ ListBuffer[String]\n        var str = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i) == ' ') {\n                if (consonants.contains(str.toLowerCase.toSet)\
    \ == false) res += str\n                str = \"\"\n            }\n          \
    \  else str += s(i)\n        }\n        if (consonants.contains(str.toLowerCase.toSet)\
    \ == false) res += str\n        res.toList", "        val vowels = List(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        var result = List[String]()\n        var\
    \ words = s.split(\" \")\n        var wordsList = words.toList\n        for (i\
    \ <- 0 until wordsList.length) {\n            var word = wordsList(i)\n      \
    \      var count = 0\n            for (j <- 0 until word.length) {\n         \
    \       var letter = word(j).toString\n                if (!vowels.contains(letter))\
    \ {\n                    count += 1\n                }\n            }\n      \
    \      if (count == n) {\n                result ::= word\n            }\n   \
    \     }\n        result", "        var a : List[String] = s.split(\" \").toList\n\
    \        var finalList : List[String] = Nil\n        for (word <- a) {\n     \
    \       if (countConsonants(word) == n) {\n                finalList = word ::\
    \ finalList\n            }\n        }\n        return finalList", "        //\
    \ A valid word may contain only letters\n        // so replace all non letter\
    \ with space\n        val sClean = s.replaceAll(\"[^a-zA-Z]\", \" \")\n      \
    \  // Split the string into words\n        val sCleanSplit = sClean.split(\" \"\
    )\n        // Return a list of words with n number of consonants\n        sCleanSplit.filter(word\
    \ => consonantCounter(word) == n).toList", "        // TODO: Implement the selectWords()\
    \ function.\n        var list = new ListBuffer[String]\n        val arr = s.split(\"\
    \ \")\n        for (word <- arr) {\n            if (this.countConsonants(word)\
    \ == n) {\n                list += word\n            }\n        }\n        list.toList",
  "\t\tvar words = s.split(\" \").toList\n\t\tvar result = ArrayBuffer[String]()\n\
    \t\tfor (word <- words) {\n\t\t\tvar count = 0l\n\t\t\tfor (ch <- word) {\n\t\t\
    \t\tif (!ch.isVowel) count += 1\n\t\t\t}\n\t\t\tif (count == n) result += word\n\
    \t\t}\n\t\tresult.toList", "        return s.split(\" \").filter(x => x.filter(x\
    \ => (x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u')).length == n).toList",
  '        ???', "        // Good luck!\n        var result = ArrayBuffer[String]()\n\
    \        val words = s.split(\" \")\n        for (word <- words) {\n         \
    \   var count = 0\n            for (ch <- word) {\n                if (ch != 'a'\
    \ && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u') count += 1\n          \
    \  }\n            if (count == n) result += word\n        }\n        result.toList",
  "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val l = s.split(\"\
    \ \").toList\n        l.filter(x => x.toCharArray.toList.filter(x => !vowels.contains(x)).length\
    \ == n.toInt)", "        // TODO: Complete this function.\n        val words =\
    \ s.split(\" \").toList\n        val wordsWithNLetters = words.filter(word =>\
    \ word.length == n)\n        wordsWithNLetters", "        var res = List[String]()\n\
    \        var c = 0\n        var temp = List[String]()\n        for (x <- s.split(\"\
    \ \")) {\n            c = 0\n            for (y <- x) {\n                if (y\
    \ != 'a' && y != 'e' && y != 'i' && y != 'o' && y != 'u') c += 1\n           \
    \ }\n            if (c == n) res = res :+ x\n        }\n        res", "      \
    \  // Type: (String) => List[String]\n        val f1 = (s : String) => s.split(\"\
    \ \").toList\n        // Type: (List[String]) => List[List[String]]\n        val\
    \ f2 = (a : List[String]) => a.map(e => e.split(\"\").toList)\n        // Type:\
    \ (List[List[String]]) => List[List[String]]\n        val f3 = (a : List[List[String]])\
    \ => a.map(e => e.filter(f => f != \"\"))\n        // Type: (List[List[String]])\
    \ => List[List[String]]\n        val f4 = (a : List[List[String]]) => a.map(e\
    \ => e.filter(f => \"bcdfghjklmnpqrstvwxyz\".contains(f.toLowerCase)))\n     \
    \   // Type: (List[List[String]]) => List[List[String]]\n        val f5 = (a :\
    \ List[List[String]]) => a.filter(e => e.length == n)\n        // Type: (List[List[String]])\
    \ => List[String]\n        val f6 = (a : List[List[String]]) => a.map(e => e.mkString(\"\
    \"))\n        // Type: (String) => List[String]\n        val f7 = (s : String)\
    \ => f6(f5(f4(f3(f2(f1(s))))))\n        f7(s)", "        // write your code here\n\
    \        val words = s.split(\" \")\n        val hashMap = new HashMap[String,\
    \ Long]\n        for (i <- 0 until words.length) {\n            val w = words(i)\n\
    \            var count = 0\n            for (j <- 0 until w.length) {\n      \
    \          if (List('a', 'e', 'i', 'o', 'u').contains(w(j))) count += 1\n    \
    \        }\n            hashMap += (w -> (w.length - count))\n        }\n    \
    \    hashMap.filter(p => p._2 == n).keys.toList", "        // For this to work,\
    \ we need to first find all the consonants in our given \n        // string and\
    \ then we need to check for their counts.\n        var result = new ListBuffer[String]\n\
    \        var consonants = new ListBuffer[Char]\n        // Recurrence found from\
    \ the wikipedia page on consonants\n        def cons(c : Char) : Boolean = {\n\
    \            var flag = false\n            if (c == 'b' || c == 'c' || c == 'd'\
    \ || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c\
    \ == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't'\
    \ || c == 'v' || c == 'w' || c == 'x' || c == 'z')\n                flag = true\n\
    \            flag\n        }\n        // Finding all the consonants in the given\
    \ string\n        s.foreach(c => if (cons(c)) consonants += c)\n        // Now\
    \ we need to find the count of consonants present in all the words \n        //\
    \ of the given string\n        // A word is defined as the maximal substring that\
    \ does not contain \n        // a space\n        var words = s.split(\" \")\n\
    \        for (i <- 0 until words.length) {\n            var count = 0\n      \
    \      words(i).foreach(c => if (cons(c)) count += 1)\n            if (count ==\
    \ n) result += words(i)\n        }\n        result.toList", '        s.split("
    ").filter(w => w.filter(!_.isVowel).length == n).toList', "        // for each\
    \ word in s, check if it has the right number of consonants\n        // return\
    \ a list of matching words\n        val words = s.split(\" \")\n        var matchingWords\
    \ = new ListBuffer[String]()\n        for (word <- words) {\n            if (numberOfConsonants(word)\
    \ == n) {\n                matchingWords += word\n            }\n        }\n \
    \       return matchingWords.toList", "        // Write your code here\n     \
    \   return List[String]();", "        // TODO\n        Nil", "        // If string\
    \ s is empty then return an empty list\n        if (s.length == 0)\n         \
    \   return List[String]()\n        // Remove spaces from the input string s\n\
    \        val sWithoutSpaces = s.replaceAll(\"\\\\s+\", \"\")\n        // Count\
    \ the number of consonants in the string sWithoutSpaces\n        var numConsonants\
    \ = 0\n        for (c <- sWithoutSpaces)\n            if (!c.isLetter || c.isLower\
    \ || !c.isVowel)\n                numConsonants += 1\n        // Select only those\
    \ words from string s that have exactly n consonants\n        val words = s.split(\"\
    \\\\s+\")\n        val wordsWithNumConsonants = new ListBuffer[String]()\n   \
    \     for (word <- words) {\n            var numConsonants = 0\n            for\
    \ (c <- word)\n                if (!c.isLetter || c.isLower || !c.isVowel)\n \
    \                   numConsonants += 1\n            if (numConsonants == n)\n\
    \                wordsWithNumConsonants += word\n        }\n        wordsWithNumConsonants.toList",
  "        def isConsonant(c : Char) : Boolean = {\n            val vowels = Set[Char]('a',\
    \ 'e', 'i', 'o', 'u')\n            if (vowels.contains(c)) return false\n    \
    \        else return true\n        }\n        s.split(\" \").filter(str => str.filter(isConsonant).length\
    \ == n).toList", "        // s is a string, n is a natural number\n        //\
    \ Get the words\n        var words = s.split(\" \")\n        var results = new\
    \ ListBuffer[String]()\n        for (word <- words) {\n            // Is a word\
    \ of length n\n            if (word.filter(p => p != 'a' && p != 'e' && p != 'i'\
    \ && p != 'o' && p != 'u').length == n) {\n                results += word\n \
    \           }\n        }\n        return results.toList", "        // Fill in\
    \ the code\n        var newlist = s.split(\" \").toList\n        var i = 0\n \
    \       var size = newlist.size\n        var j = 0\n        var cons = new Queue[String]\n\
    \        var vowels = new Queue[String]\n        while(i < size) {\n        \t\
    \tj = 0\n        \t\twhile(j < newlist(i).size) {\n        \t\t\t\tif(vowels.contains(newlist(i)(j).toString))\
    \ {\n        \t\t\t\t\t\tcons.enqueue(newlist(i))\n        \t\t\t\t}\n       \
    \ \t\t\t\tj = j + 1\n        \t\t}\n        \t\ti = i + 1\n        }\n       \
    \ cons.toList", "        if (s.length() == 0) List[String]()\n        else {\n\
    \            var counter = 0\n            for (i <- 0 until s.length()) {\n  \
    \              if (s(i) != 'a' && s(i) != 'e' && s(i) != 'i' && s(i) != 'o' &&\
    \ s(i) != 'u') counter += 1\n            }\n            if (counter == n) List[String](s)\n\
    \            else List[String]()\n        }", "        // Write your function\
    \ here\n        val v = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\")\n        val a = s.split(\" \")\n        var b = List[String]()\n\
    \        for (x <- a) {\n            var t = x.toLowerCase()\n            var\
    \ c = 0l\n            for (y <- v) {\n                c += t.count(_ == y(0))\n\
    \            }\n            if (c == n) b ::= x\n        }\n        b.reverse",
  "        val words = s.split(\" \")\n        var result = List[String]()\n     \
    \   for (word <- words) if (word.toLowerCase.count(!List('a', 'e', 'i', 'o', 'u').contains(_))\
    \ == n) result = word :: result\n        result", "        // Write your code\
    \ here\n        // >>> replace this with solution\n        \"replace this with\
    \ solution\".split(\" \").toList", "        // your code goes here\n        var\
    \ words = s.split(\" \")\n        var wordsWithConsonants = new ListBuffer[String]()\n\
    \        for (word <- words) {\n            var consonants = 0\n            for\
    \ (char <- word) {\n                if (char != 'a' && char != 'e' && char !=\
    \ 'i' && char != 'o' && char != 'u') consonants += 1\n            }\n        \
    \    if (consonants == n) wordsWithConsonants += word\n        }\n        return\
    \ wordsWithConsonants.toList", "        if (s.isEmpty) {\n            List[String]()\n\
    \        } else {\n            s.split(\" \").filter(word => (word.count(ch =>\
    \ !\"aeiou\".contains(ch.toLower)) == n)).toList\n        }", "        var ls\
    \ = List[String]()\n        val cons = 'b' :: 'c' :: 'd' :: 'f' :: 'g' :: 'h'\
    \ :: 'j' :: 'k' :: 'l' :: 'm' :: 'n' :: 'p' :: 'q' :: 'r' :: 's' :: 't' :: 'v'\
    \ :: 'w' :: 'x' :: 'z' :: Nil\n        for (word <- s.split(\" \")) {\n      \
    \      var sum = 0\n            for (c <- word) if (cons.contains(c)) sum += 1\n\
    \            if (sum == n) ls = word :: ls\n        }\n        ls", '        ???',
  '        s.split(" ").filter(x => x.count(y => !"aeiouAEIOU".contains(y)) == n).toList',
  "        // TODO: implement\n        List[String]()", "        // Implement this\n\
    \        return null", "        val words = s.split(\" \")\n        var result\
    \ = List[String]()\n        for (word <- words) {\n            if (word.filter(!_.isLetter).length\
    \ == n) {\n                result ::= word\n            }\n        }\n       \
    \ result", "        def getWords(s : String) : List[String] = {\n            def\
    \ getWordsIter(s : String, acc : List[String]) : List[String] = {\n          \
    \      if (s.length == 0) acc\n                else if (s.length == 1) s :: acc\n\
    \                else if (s.contains(\" \")) {\n                    val spaceIndex\
    \ = s.indexOf(\" \")\n                    val word = s.substring(0, spaceIndex)\n\
    \                    getWordsIter(s.substring(spaceIndex + 1), word :: acc)\n\
    \                }\n                else acc\n            }\n            getWordsIter(s,\
    \ List[String]())\n        }\n        def getConsonants(s : String) : Long = {\n\
    \            def isConsonant(c : Char) : Boolean = {\n                !List('a',\
    \ 'e', 'i', 'o', 'u').contains(c)\n            }\n            def getConsonantsIter(s\
    \ : String, acc : Long) : Long = {\n                if (s.length == 0) acc\n \
    \               else if (isConsonant(s.head)) getConsonantsIter(s.tail, acc +\
    \ 1)\n                else getConsonantsIter(s.tail, acc)\n            }\n   \
    \         getConsonantsIter(s, 0)\n        }\n        def selectWordsIter(s :\
    \ List[String], acc : List[String]) : List[String] = {\n            if (s.length\
    \ == 0) acc\n            else if (getConsonants(s.head) == n) selectWordsIter(s.tail,\
    \ s.head :: acc)\n            else selectWordsIter(s.tail, acc)\n        }\n \
    \       selectWordsIter(getWords(s), List[String]())", '        ???', "      \
    \  // This will store the result\n        var result : List[String] = Nil\n  \
    \      // Write your code here\n        return result", "        // Pattern matching\
    \ is also allowed.\n        // Fill in the implementation here.\n        s.split(\"\
    \ \").filter(_.count(x => \"aeiou\".contains(x)) == n).toList", '        // Compute
    and return the result here.', "        var r = List[String]()\n        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        for (word <- s.split(\" \"\
    ).toList) {\n            if (word.filter(vowels.contains(_)).length == n) {\n\
    \                r = word :: r\n            }\n        }\n        r", "      \
    \  val consonants = \"bcdfghjklmnpqrstvwxyz\"\n        val vowels = \"aeiou\"\n\
    \        val result = scala.collection.mutable.ArrayBuffer[String]()\n       \
    \ val tokens = s.split(\" \")\n        for (token <- tokens) {\n            var\
    \ count = 0\n            val lowerToken = token.toLowerCase\n            for (i\
    \ <- 0 until lowerToken.length) {\n                if (consonants.contains(lowerToken(i)))\
    \ {\n                    count += 1\n                }\n            }\n      \
    \      if (count == n) {\n                result += token\n            }\n   \
    \     }\n        result.toList", "      def slp(w : String) : Long = {\n     \
    \   w.foldLeft(0l)((a, c) => if (\"bcdfghjklmnpqrstvwxyz\".contains(c)) a + 1\
    \ else a)\n      }\n      s.split(\" \").filter(w => slp(w) == n).toList", '        //
    your code here', "        // IMPLEMENT ME\n        null", "        s.split(\"\
    \ \").filter(_.count(Set('a', 'e', 'i', 'o', 'u', 'y').contains(_)) == n).toList",
  "        def isConsonant(c : Char) : Boolean = {\n            List('a', 'e', 'i',\
    \ 'o', 'u').contains(c)\n        }\n        if (s.length == 0) List()\n      \
    \  else {\n            val words = s.split(\" \")\n            val result = ListBuffer[String]()\n\
    \            for (word <- words) {\n                var count = 0\n          \
    \      for (c <- word) {\n                    if (!isConsonant(c)) count += 1\n\
    \                }\n                if (count == n) result += word\n         \
    \   }\n            result.toList\n        }", "        // Write your code here\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\"\
    \ \")\n        val selectedWords = new ListBuffer[String]\n        for (word <-\
    \ words) {\n            var count = 0\n            for (c <- word) {\n       \
    \         if (!vowels.contains(c)) count += 1\n            }\n            if (count\
    \ == n) selectedWords += word\n        }\n        selectedWords.toList", '        return
    s.split(" ").filter(x => x.filter(y => "BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz".contains(y)).length
    == n.toInt).toList', "        // this function applies f on a as long as the condition\
    \ f(a) is true \n        // returns a list with all the intermediate values \n\
    \        def takeWhileRecursive[A](a : A, f : A => Boolean) : List[A] = {\n  \
    \          if (f(a))\n                a :: takeWhileRecursive(a, f)\n        \
    \    else\n                List()\n        }\n        // splits string s on the\
    \ space character and maps \n        // each word to a list of the number of consonants\
    \ it contains\n        s.split(\" \").map(word => \n            word.count(c =>\
    \ \n                \"bcdfghjklmnpqrstvwxyz\".contains(c.toLower))).toList", " \
    \       // This will store the result\n        var result : List[String] = Nil\n\
    \        // Write your code here\n        return result", "        val cons =\
    \ \"bcdfghjklmnpqrstvwxyz\"\n        s.split(\" \").filter(x => x.filter(c =>\
    \ cons.contains(c)).length == n).toList", "        var words = s.split(\" \").toList\n\
    \        var result = words.filter((x) => (x.count((c) => (\"aeiou\".contains(c)))\
    \ == (x.length - n)))\n        return result", "        // Pattern matching the\
    \ input string and if the input string is not empty\n        // adding the first\
    \ word to a mutable list and replacing all that word with an empty\n        //\
    \ string and doing the same for all the words in the input string.\n        s\
    \ match {\n            case \"\" => Nil\n            case _ => {\n           \
    \     var l : ListBuffer[String] = ListBuffer()\n                var temp : String\
    \ = s\n                while(temp != \"\") {\n                    val word = temp.substring(0,\
    \ temp.indexOf(\" \"))\n                    if(countConsonants(word) == n) l +=\
    \ word\n                    temp = temp.replaceFirst(word, \"\")\n           \
    \         temp = temp.replaceFirst(\" \", \"\")\n                }\n         \
    \       l.toList\n            }\n        }", "        // the first step is to\
    \ find out the consonants in the s\n        // A word is defined as a sequence\
    \ of characters that is delimited\n        // by a space (\" \")\n        val\
    \ consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\",\n                \"p\", \"q\", \"r\", \"s\", \"t\", \"v\",\
    \ \"w\", \"x\", \"y\", \"z\", \"B\", \"C\", \"D\", \"F\", \"G\",\n           \
    \     \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"\
    T\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val vowels = Set(\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val ss = s.split(\"\
    \ \")\n        var list = List[String]()\n        for (word <- ss) {\n       \
    \     var count = 0\n            for (c <- word) {\n                if (consonants.contains(c.toString))\
    \ count += 1\n            }\n            if (count == n) list = word :: list\n\
    \        }\n        list", "        val words = s.split(\" \").toList.map(_.trim)\n\
    \        words.filter(x => numConsonants(x) == n)"]
stop_tokens:
- "\n    }\n"
