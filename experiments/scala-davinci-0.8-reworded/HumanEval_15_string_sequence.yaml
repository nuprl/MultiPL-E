name: HumanEval_15_string_sequence
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>> stringSequence((5l))\n\
  \    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
  0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
  0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
completions: ['      (0 to n).mkString(" ")', "        var result = \"\"\n       \
    \ for (i <- (0l) to n) {\n            result += (\"\" + i + \" \")\n        }\n\
    \        return result.trim", "        if (n < 0) return \"\"\n        var result\
    \ = \"\"\n        for (i <- 0 to n.toInt) {\n            result += i.toString\
    \ + \" \"\n        }\n        return result.trim", "        val s = new StringBuilder\n\
    \        for (i <- 0 to n.toInt) {\n            s.append(i + \" \")\n        }\n\
    \        s.toString.trim", "        if (n == 0) {\n            return \"0\"\n\
    \        }\n        var buf = new StringBuilder\n        buf ++= \"0\"\n     \
    \   var i = 1l\n        while (i <= n) {\n            buf ++= \" \"\n        \
    \    buf ++= i.toString\n            i += 1\n        }\n        return buf.toString",
  "        val limit = n + 1\n        (0l to limit by 1l).map(i => i.toString).mkString(\"\
    \ \")", '        (0l to n).map(_.toString).mkString(" ")', "        val sb = new\
    \ StringBuilder\n        for (i <- 0 to n.toInt) {\n            sb.append(i +\
    \ \" \")\n        }\n        sb.toString", "        if (n == 0) \"0\"\n      \
    \  else {\n            val buffer = new StringBuilder\n            buffer.append(0)\n\
    \            for (i <- 1 to n.toInt) {\n                buffer.append(\" \")\n\
    \                buffer.append(i)\n            }\n            buffer.toString\n\
    \        }", "        val result = new StringBuilder\n        for (x <- 0 to n.toInt)\
    \ {\n            result.append(x.toString + \" \")\n        }\n        result.toString.trim",
  "        val l = for (i <- (0l to n)) yield i.toString\n        l.mkString(\" \"\
    )", "        val r = new StringBuilder\n        var x = 0l\n        while (x <=\
    \ n) {\n            r.append(x)\n            r.append(\" \")\n            x +=\
    \ 1\n        }\n        r.toString", "      var b = new StringBuilder\n      for\
    \ (i <- 0 to n.toInt) b ++= (i + \" \")\n      b.toString", "        val s = new\
    \ StringBuilder();\n        for (i <- 0 to n.toInt) {\n            s.append(i);\n\
    \            s.append(\" \");\n        }\n        s.toString.trim;", "       \
    \ val array = new Array[Long](n.toInt + 1)\n        array(0) = 0\n        var\
    \ idx = 1\n        while (idx <= n) {\n            array(idx) = idx\n        \
    \    idx += 1\n        }\n        array.mkString(\" \")", "        val sequence\
    \ = new ArrayBuffer[String]\n        (0l).to(n).foreach(x => sequence += x.toString)\n\
    \        sequence.mkString(\" \")", "        var result = \"\"\n        for (i\
    \ <- 0 to n.toInt) {\n            result += i.toString + \" \"\n        }\n  \
    \      result", "        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result", "     \
    \   val sb = new StringBuilder\n        for (i <- 0 to n.toInt) {\n          \
    \  sb.append(i)\n            sb.append(\" \")\n        }\n        return sb.toString",
  '        (0l to n).mkString(" ")', '        return (0 to n.toInt).mkString(" ")',
  "        var s = \"\"\n        for (i <- 0 to n.toInt) {\n            s += \" \"\
    \ + i.toString\n        }\n        s.substring(1)", '        (0l to n).mkString("
    ")', "        var result = new StringBuilder(\"\")\n        for (i <- 0 to n.toInt)\
    \ {\n            result.append(i)\n            result.append(\" \")\n        }\n\
    \        result.toString().trim()", "        val sb = new StringBuilder()\n  \
    \      for (i <- 0l to n) {\n            sb.append(i.toString)\n            sb.append(\"\
    \ \")\n        }\n        sb.toString.trim", "        var result = new StringBuilder\n\
    \        for (i <- 0l to n) {\n            result ++= i.toString ++= \" \"\n \
    \       }\n        result.toString", "        def stringSequenceRecur(i : Long,\
    \ s : String) : String = {\n            if (i > n) s\n            else if (i ==\
    \ n) s + i.toString\n            else stringSequenceRecur(i + 1, s + i.toString\
    \ + \" \")\n        }\n        stringSequenceRecur(0, \"\")", "        def reverseString(n\
    \ : Long) : String = n match {\n            case 0 => \"0\"\n            case\
    \ _ => n + \" \" + reverseString(n - 1)\n        }\n        reverseString(n).reverse",
  "        var res = new StringBuilder\n        for (i <- 0 to n.toInt) res.append(i.toString\
    \ + \" \")\n        res.toString", '        (0l to n).map(_.toString).mkString("
    ")', '        (0 to n).map(x => x.toString).reduce(_ + " " + _)', "        var\
    \ s : String = \"\"\n        for (i <- 0l to n) {\n            s += i.toString\n\
    \            if (i != n) {\n                s += \" \"\n            }\n      \
    \  }\n        return s", "        val buffer = new StringBuilder\n        buffer.append(0)\n\
    \        for (i <- 1l to n) {\n            buffer.append(\" \")\n            buffer.append(i)\n\
    \        }\n        buffer.toString", "        val sequence = new StringBuilder()\n\
    \        for (i <- 0l to n) {\n            sequence.append(i.toString)\n     \
    \       sequence.append(\" \")\n        }\n        sequence.deleteCharAt(sequence.length\
    \ - 1)\n        sequence.toString", "        var result = \"\"\n        for (i\
    \ <- 0 to n.toInt) result += i + \" \"\n        result.substring(0, result.length\
    \ - 1)", "        var result = \"\"\n        var i = 0l\n        while (i <= n)\
    \ {\n            result += i.toString + \" \"\n            i += 1\n        }\n\
    \        result.trim", '        return (0l to n).map(_.toString).reduce(_ + "
    " + _)', '        return (0l to n).mkString(" ")', "        var s = \"\";\n  \
    \      for (i <- 0 to n.toInt) s += i + \" \";\n        s.trim", '        return
    (for (x <- (0l to n)) yield x.toString).mkString(" ")', "        var s : String\
    \ = \"\"\n        for (i <- 0l to n) {\n            s += \" \" + i.toString\n\
    \        }\n        return s.trim", "        var sequence = new StringBuilder()\n\
    \        for (i <- 0l to n) {\n            sequence.append(i + \" \")\n      \
    \  }\n        sequence.toString.trim", "        var result = new StringBuilder\n\
    \        for (i <- 0 to n.toInt) result.append(i + \" \")\n        result.toString.trim",
  "        var sequence = new StringBuilder\n        var i = 0\n        while (i <=\
    \ n) {\n            sequence.append(i + \" \")\n            i += 1\n        }\n\
    \        return sequence.toString.trim", "        var l = List[String]()\n   \
    \     for (i <- 0l to n) l ::= i.toString\n        l.reverse.mkString(\" \")",
  "        var result = \"\";\n        for (i <- 0 to n.toInt) {\n            result\
    \ += i + \" \";\n        }\n        return result.trim;", "        def stringSequenceHelper(n\
    \ : Long, ans : String) : String = {\n            if (n == 0) ans + \"0\"\n  \
    \          else stringSequenceHelper(n - 1, ans + n.toString + \" \")\n      \
    \  }\n        stringSequenceHelper(n, \"\")", "        var result = \"\"\n   \
    \     for (i <- 0l to n) result += \" \" + i\n        return result.trim", " \
    \       var x = new ArrayBuffer[String]()\n        for (i <- 0 to n.toInt) x +=\
    \ i.toString\n        return x.mkString(\" \")", '        (0l to n).map(_.toString).reduceLeft(_
    + " " + _)', "        if (n == 0) return \"0\"\n        var r = new StringBuilder\n\
    \        for (i <- 0 to n.toInt) r.append(i + \" \")\n        r.toString", " \
    \       if (n == 0) {\n            return \"0\"\n        }\n        val temp =\
    \ (0l).to(n).mkString(\" \")\n        return temp.substring(1)", "        val\
    \ range = Range(0, (n + 1).toInt)\n        range.mkString(\" \")", "        assert(n\
    \ >= 0)\n        val sb = new StringBuilder(2 * n + 1)\n        for (i <- 0 to\
    \ n) {\n            sb.append(i)\n            sb.append(' ')\n        }\n    \
    \    sb.toString", "        val a = new Array[String](n.toInt + 1)\n        for\
    \ (i <- 0 to n.toInt) {\n            a(i) = i.toString\n        }\n        a.mkString(\"\
    \ \")", "        val a = new Array[String](n.toInt + 1)\n        for (i <- 0 to\
    \ n.toInt) a(i) = i.toString\n        a.mkString(\" \")", "        val s = new\
    \ StringBuilder()\n        var i = 0l\n        while (i <= n) {\n            s.append(i.toString)\n\
    \            s.append(\" \")\n            i += 1\n        }\n        s.toString.trim",
  "        var s = new StringBuilder()\n        for (i <- 0 to n.toInt) {\n      \
    \      s.append(i + \" \")\n        }\n        s.toString().trim()", '        (0l
    to n).mkString(" ")', "        var s = new StringBuilder\n        var r = List[Long]()\n\
    \        var i = 0l\n        while (i <= n) {\n            r = i :: r\n      \
    \      i += 1\n        }\n        s.append(r.reverse.mkString(\" \"))\n      \
    \  return s.toString", "        var res = \"\";\n        for (i <- 0 to n.toInt)\
    \ res += i + \" \";\n        res", "        val result = for(i <- 0l to n) yield\
    \ i.toString\n        result.mkString(\" \")", "        var seq = \"\"\n     \
    \   for (i <- 0l to n) {\n            seq += i + \" \"\n        }\n        seq.stripSuffix(\"\
    \ \")", "      val indices = (0l to n).map(_.toString())\n      return indices.reduceLeft(_\
    \ + \" \" + _)", '        (0l to n).mkString(" ")', "        val sb = new StringBuilder()\n\
    \        for (i <- 0l to n) {\n            sb.append(i)\n            sb.append(\"\
    \ \")\n        }\n        sb.substring(0, sb.length - 1)", "        if (n < 0)\
    \ return \"\";\n        var result = \"\";\n        for (i <- 0l to n) {\n   \
    \         result += i.toString + \" \";\n        }\n        return result.trim;",
  "        var res = \"\";\n        for (i <- 0l to n) res += i + \" \";\n       \
    \ res.substring(0, res.length - 1);", "        if (n == 0) \"0\"\n        else\
    \ {\n            val sb = new StringBuilder\n            for (i <- 0 to n.toInt)\
    \ sb.append(i + \" \")\n            sb.toString.trim\n        }", "        val\
    \ sb = new StringBuilder();\n        var i = 0l;\n        while (i <= n) {\n \
    \           sb.append(i);\n            sb.append(\" \");\n            i += 1;\n\
    \        }\n        sb.toString();", "        val s = new StringBuilder\n    \
    \    for (i <- 0 to n.toInt) {\n            s.append(i)\n            s.append(\"\
    \ \")\n        }\n        s.toString.trim", '      return (0l to n).mkString("
    ")', "        val sb = new StringBuilder\n        for (i <- 0l to n) {\n     \
    \       sb.append(i + \" \")\n        }\n        return sb.toString", '        ((0l)
    to n).mkString(" ")', "        var i = 0l\n        var res = \"\"\n        while\
    \ (i <= n) {\n            res += i + \" \"\n            i += 1\n        }\n  \
    \      res.trim", "        val list = for(i <- 0 to n.toInt) yield i.toString\n\
    \        list.mkString(\" \")", '        return n.toString', "        val builder\
    \ = new StringBuilder\n        var i = 0l\n        while (i <= n) {\n        \
    \    builder.append(i + \" \")\n            i += 1\n        }\n        return\
    \ builder.toString.trim", "        var s = \"\"\n        for (i <- 0 to n.toInt)\
    \ {\n            s += i.toString + \" \"\n        }\n        s.stripSuffix(\"\
    \ \")", "        var s = ArrayBuffer[String]()\n        for (i <- 0l to n) s +=\
    \ i.toString\n        return s.mkString(\" \")", "        var result = \"\"\n\
    \        for (i <- 0l to n) result += i + \" \"\n        result.trim", '        (0l
    to n).map(_.toString).reduce(_ + " " + _)', '        (0 to n.toInt).map(_.toString).reduce(_
    + " " + _)', "        var s : String = \"\"\n        for (i <- 0l to n) {\n  \
    \          s += i.toString + \" \"\n        }\n        s.trim", "        val result\
    \ = new StringBuilder\n        var k = 0\n        while (k <= n) {\n         \
    \   result.append(k)\n            result.append(\" \")\n            k += 1\n \
    \       }\n        result.toString.trim", "        var s : String = \"\"\n   \
    \     var i : Long = 0\n        while (i <= n) {\n            s += i + \" \"\n\
    \            i += 1\n        }\n        s", "        val b = new StringBuilder\n\
    \        for (i <- 0 to n.toInt) {\n            b.append(i.toString).append(\"\
    \ \")\n        }\n        b.toString.trim", "        if (n == 0) return \"0\"\n\
    \        val a = new Array[String](n.toInt + 1)\n        for (i <- 0 to n.toInt)\
    \ a(i) = i.toString\n        a.mkString(\" \")", "        // Your code here.\n\
    \        List.range(0, n.toInt + 1).mkString(\" \")", "        val array = new\
    \ Array[Long](n.toInt)\n        for (i <- 0 to n.toInt) array(i) = i\n       \
    \ return array.mkString(\" \")", '        (0l to n).mkString(" ")', "        var\
    \ res = \"\"\n        for (i <- 0l to n) {\n            res += i.toString\n  \
    \          if (i != n) res += \" \"\n        }\n        res", "        var result\
    \ = \"\"\n        for (i <- 0 to n.toInt) {\n            result += i + \" \"\n\
    \        }\n        result.trim", '      (0l to n).toList.map(x => x.toString).reduce(_
    + " " + _)', "        val b = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            b.append(i)\n            b.append(\" \")\n        }\n       \
    \ b.toString.trim", "        //Base case.\n        if (n == 0) return \"0\"\n\
    \        else return stringSequence(n - 1) + \" \" + n.toString", "        val\
    \ sb = new StringBuilder\n        for (i <- 0l to n) {\n            sb.append(i)\n\
    \            sb.append(\" \")\n        }\n        sb.result", "        var s =\
    \ new StringBuilder\n        for (i <- 0l to n) s.append(i + \" \")\n        s.toString.trim",
  "        var s = new StringBuilder\n        for (i <- 0 to n.toInt) {\n        \
    \    s.append(i.toString)\n            s.append(\" \")\n        }\n        s.toString",
  "        var result = \"\"\n        for (i <- 0l to n) result += i + \" \"\n   \
    \     result.trim", "        var s = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            s += (i.toString + \" \")\n        }\n        s.trim", "        var\
    \ s = new StringBuilder\n        for (i <- 0 to n.toInt) {\n            s ++=\
    \ i.toString\n            s ++= \" \"\n        }\n        s.toString.trim", " \
    \       var result = new StringBuilder\n        for (i <- 0l to n) {\n       \
    \     result.append(i.toString + \" \")\n        }\n        result.toString.trim",
  "        val numbers = new ArrayBuffer[Long]\n        var i = 0l\n        while\
    \ (i <= n) {\n            numbers += i\n            i += 1\n        }\n      \
    \  numbers.mkString(\" \")", "        var array = new Array[Long](n.toInt + 1)\n\
    \        for (i <- 0 to n.toInt) array(i) = i\n        return array.mkString(\"\
    \ \")", "        var r = new ListBuffer[String]()\n        for (i <- 0l to n)\
    \ r += i.toString\n        return r.mkString(\" \")", '        (0l to n).mkString("
    ")', "        var result = \"\"\n        for (i <- 0l to n) result += i + \" \"\
    \n        result", '        List.range(0, (n+1).toInt).mkString(" ")', "     \
    \   var s = \"\";\n        for (i <- 0 to n.toInt) {\n            s += i.toString;\n\
    \            if (i != n.toInt) s += \" \";\n        }\n        return s;", " \
    \       var s : String = \"\"\n        for (i <- 0l to n) {\n            s +=\
    \ i.toString + \" \"\n        }\n        s.trim", "        var ans = \"\";\n \
    \       var i = 0l;\n        while (i <= n) {\n            ans += i.toString()\
    \ + \" \";\n            i += 1;\n        }\n        ans;", "        var result\
    \ = \"\"\n        for (i <- 0 to n.toInt) {\n            result += i.toString\
    \ + \" \"\n        }\n        result.trim", "        if (n == 0) return \"0\"\n\
    \        val a = ArrayBuffer.fill(n.toInt + 1)(\"\")\n        for (i <- 0 to n.toInt)\
    \ a(i) = i.toString\n        return a.mkString(\" \")", "        val a = new Array[String](n.toInt\
    \ + 1)\n        for (i <- 0 to n.toInt) a(i) = i.toString\n        a.mkString(\"\
    \ \")", "        val sb = new StringBuilder()\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i + \" \")\n        }\n        return sb.toString.trim",
  '        return (0l to n).mkString(" ")', "        var s = \"\"\n        for (k\
    \ <- 0 to n.toInt) {\n            s += k + \" \"\n        }\n        s.trim",
  "        val b = ListBuffer[String]()\n        for (i <- 0 to n.toInt) {\n     \
    \       b += i.toString\n        }\n        b.mkString(\" \")", "        val sequence\
    \ = for(i <- 0 to n.toInt) yield i.toString\n        sequence.mkString(\" \")",
  "        val sequence = new StringBuilder\n        for (k <- 0 to n.toInt) {\n \
    \           sequence.append(k)\n            sequence.append(\" \")\n        }\n\
    \        return sequence.toString", "        var tmp = new StringBuilder()\n \
    \       for (i <- 0 to n.toInt) tmp.append(i).append(\" \")\n        tmp.toString",
  '        ((0l to n).mkString(" "))', "        if (n == 0) {\n            \"0\"\n\
    \        } else {\n            (1 to n.toInt).mkString(\" \")\n        }", '        (0
    to n.toInt).map(_.toString).mkString(" ")', "        var s : String = \"\"\n \
    \       for (i <- 0 to n.toInt) s += \" \" + i\n        s", "        def rec(s\
    \ : String, n : Long) : String = {\n            if (n == 0) s\n            else\
    \ rec(s + \" \" + n, n - 1)\n        }\n        rec(\"0\", n)", "        var result\
    \ = new ListBuffer[String]\n        for (i <- 0l to n) result += i.toString\n\
    \        return result.mkString(\" \")", "        if (n == 0) return \"0\"\n \
    \       val array = new Array[String](n.toInt + 1)\n        array(0) = \"0\"\n\
    \        for (i <- 1 to n.toInt) {\n            array(i) = i.toString\n      \
    \  }\n        return array.mkString(\" \")", "      val lst = List.range(0, n.toInt\
    \ + 1)\n      lst.mkString(\" \")", "        if (n == 0) return \"0\"\n      \
    \  else {\n            val sb = new StringBuilder\n            for (i <- (0l to\
    \ n)) {\n                sb.append(i)\n                sb.append(\" \")\n    \
    \        }\n            return sb.toString.trim\n        }", "        var s =\
    \ \"\"\n        for (i <- 0l to n) {\n            s += i.toString\n          \
    \  if (i != n) s += \" \"\n        }\n        s", "        def recurse(n : Long,\
    \ i : Long, s : String) : String = if (i == n) (s + i) else recurse(n, i + 1,\
    \ s + i + \" \")\n        if (n == 0) return \"0\"\n        return recurse(n,\
    \ 0, \"\")", "        val sb = new StringBuilder\n        for (i <- 0l to n) {\n\
    \            sb.append(i.toString)\n            sb.append(\" \")\n        }\n\
    \        return sb.toString.trim", "        if (n == 0) \"0\"\n        else {\n\
    \            val sb = new StringBuilder()\n            for (i <- (0l) to n) sb.append(i.toString\
    \ + \" \")\n            sb.toString().trim()\n        }", "        val range =\
    \ (0l to n)\n        range.mkString(\" \")", '        (0 to n).map(_.toString).reduceLeft(_
    + " " + _)', "        val buf = new StringBuilder()\n        for (i <- 0l to n)\
    \ {\n            buf.append(i + \" \")\n        }\n        return buf.toString().trim()",
  "        var result = new StringBuilder\n        for (i <- 0l to n) {\n        \
    \    result.append(i + \" \")\n        }\n        result.toString.trim", "   \
    \     val sb = new StringBuilder\n        for (i <- 0 to n.toInt) {\n        \
    \    sb.append(i)\n            sb.append(\" \")\n        }\n        sb.toString.trim",
  "        val sb = new StringBuilder()\n        var i = 0\n        for (i <- 0 to\
    \ n.toInt) {\n            sb.append(i + \" \")\n        }\n        sb.toString().trim()",
  "        var output = \"\"\n        var i = 0l\n        while (i <= n) {\n     \
    \       output += i.toString + \" \"\n            i += 1\n        }\n        output.trim",
  "        def stringSequenceIter(i : Long, acc : String) : String = {\n         \
    \   if (i > n) acc\n            else if (i == n) stringSequenceIter(i + 1, acc\
    \ + i.toString)\n            else stringSequenceIter(i + 1, acc + i.toString +\
    \ \" \")\n        }\n        stringSequenceIter(0, \"\")", "        val elements\
    \ = for (i <- 0 to n.toInt) yield i.toString\n        return elements.mkString(\"\
    \ \")", "        val s = new StringBuilder\n        for (i <- 0l to n) {\n   \
    \         s.append(i + \" \")\n        }\n        return s.toString.trim", '        (0l
    to n).mkString(" ")', "        val numbers = new ArrayBuffer[String]\n       \
    \ for (i <- 0l to n) {\n            numbers += i.toString\n        }\n       \
    \ numbers.mkString(\" \")", '        return (0l to n).mkString(" ")', "      \
    \  //return string(n).join(\" \")\n        //now using immutable List\n      \
    \  (0l to n).mkString(\" \")", "        val sb = new StringBuilder\n        for\
    \ (i <- 0 to n.toInt) {\n            sb.append(i.toString)\n            sb.append(\"\
    \ \")\n        }\n        sb.deleteCharAt(sb.length - 1)\n        sb.toString",
  '        (0l to n).map(m => m.toString).mkString(" ")', '        return (0l to n).toList.mkString("
    ")', "        var str : String = \"\"\n        for (i <- 0 to n.toInt) {\n   \
    \         str += i.toString + \" \"\n        }\n        str.trim", '      (0l
    to n).mkString(" ")', '      (0l to n).mkString(" ")', "        if (n == 0) \"\
    0\"\n        else {\n            val result = new StringBuilder()\n          \
    \  for (i <- 0l to n) {\n                result.append(i.toString() + \" \")\n\
    \            }\n            result.toString().trim()\n        }", "        if\
    \ (n == 0) \"0\"\n        else stringSequence(n - 1) + \" \" + n.toString", " \
    \       var s = new StringBuilder\n        for (i <- 0 to n.toInt) {\n       \
    \     s.append(i)\n            s.append(\" \")\n        }\n        return s.toString.trim",
  "        var list : List[Long] = Nil\n        for (i <- 0l to n) list = i :: list\n\
    \        return list.reverse.mkString(\" \")", "        val sb = new StringBuilder\n\
    \        for (i <- 0 to n.toInt) {\n            sb.append(i + \" \")\n       \
    \ }\n        return sb.toString.trim", "        var s : String = \"\"\n      \
    \  var i : Long = 0\n        while (i <= n) {\n            s += i.toString + \"\
    \ \"\n            i += 1\n        }\n        s.trim", '        return (0l to n).mkString("
    ")', "        var s = new ListBuffer[String]\n        for (i <- 0l to n) s +=\
    \ i.toString\n        s.mkString(\" \")", '        return (0l to n).mkString("
    ")', "        var s = \"\"\n        for (i <- 0 to n.toInt) {\n            s +=\
    \ i.toString\n            if (i != n.toInt) s += \" \"\n        }\n        return\
    \ s", "        if (n == 0) \"0\"\n        else (1 to n.toInt).map(_.toString).reduce(_\
    \ + \" \" + _)", "        var s = \"\"\n        for (i <- 0 to n.toInt) {\n  \
    \          s += i.toString\n            if (i != n.toInt) s += \" \"\n       \
    \ }\n        return s", "        val builder = new StringBuilder\n        for\
    \ (i <- 0l to n) {\n            builder.append(i)\n            builder.append(\"\
    \ \")\n        }\n        builder.toString.trim", "        if (n == 0) return\
    \ \"0\"\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt) {\n\
    \            sb.append(i)\n            sb.append(\" \")\n        }\n        sb.setLength(sb.length\
    \ - 1)\n        sb.toString", "        var m = (0l)\n        var s = \"\"\n  \
    \      while ((m <= n)) {\n            {\n                s = (s + (if ((s ==\
    \ \"\")) (\"\") else (\" \"))) + (m.toString)\n                m = (m + 1l)\n\
    \            }\n        }\n        return s", "        var s = \"\"\n        for\
    \ (i <- 0l to n) s += i + \" \"\n        s.substring(0, s.length - 1)", '        (0l
    to n).mkString(" ")', "        var s = new StringBuilder()\n        for (i <-\
    \ 0 to n.toInt) {\n            s.append(i + \" \")\n        }\n        return\
    \ s.toString()", "        var result = \"\"\n        for (i <- 0l to n) {\n  \
    \          result += i.toString + \" \"\n        }\n        result.trim", '        Range(0,
    n.toInt + 1).mkString(" ")', "        var result = new StringBuilder()\n     \
    \   var i = 0l\n        while (i <= n) {\n            result.append(i)\n     \
    \       if (i != n) result.append(\" \")\n            i += 1\n        }\n    \
    \    return result.toString()", "        var s : String = \"\"\n        for (i\
    \ <- 0 to n.toInt) {\n            s += \" \" + i.toString\n        }\n       \
    \ return s.trim", "        // PUT YOUR CODE HERE\n        var s = \"\"\n     \
    \   for (i <- 0 to n.toInt) {\n            s += i + \" \"\n        }\n       \
    \ s.stripSuffix(\" \")", "        val sb = new StringBuilder\n        for (i <-\
    \ 0 to n.toInt) {\n            sb.append(i)\n            sb.append(\" \")\n  \
    \      }\n        sb.toString", "        val result = new StringBuilder();\n \
    \       for (i <- 0l to n) {\n            result.append(i);\n            result.append(\"\
    \ \");\n        }\n        result.toString.trim", "      var s = new StringBuilder()\n\
    \      for (x <- 0l to n) {\n        s.append(x.toString() + \" \")\n      }\n\
    \      s.toString().trim()", "        var s = \"\"\n        for (i <- 0l to n)\
    \ {\n            s += (i + \" \")\n        }\n        s.trim", '        (0l to
    n).mkString(" ")', '        (0l to n).mkString(" ")', '        (0 to n.toInt).mkString("
    ")', "        var s = \"\"\n        for (i <- 0 to n.toInt) {\n            s +=\
    \ i.toString + \" \"\n        }\n        s.stripSuffix(\" \")", "        var s\
    \ = new StringBuilder\n        for (i <- 0 to n.toInt) {\n            s.append(i\
    \ + \" \")\n        }\n        s.toString", "        var s = \"\"\n        for\
    \ (i <- 0 to n.toInt) s += i + \" \"\n        s.trim", "      var r = \"\"\n \
    \     for (i <- 0 to n.toInt) {\n        r += i + \" \"\n      }\n      r.trim",
  "        val s = new StringBuilder\n        for (i <- 0 to n.toInt) {\n        \
    \    s.append(i + \" \")\n        }\n        s.toString.trim", '        (0 to
    n).mkString(" ")', "      val r : ArrayBuffer[String] = new ArrayBuffer[String]()\n\
    \      for (i <- 0l to n) r += i.toString\n      r.mkString(\" \")", "       \
    \ val result = new StringBuilder();\n        for (i <- 0 to n.toInt) {\n     \
    \       result.append(i);\n            result.append(\" \");\n        }\n    \
    \    result.deleteCharAt(result.length - 1);\n        return result.toString();",
  "        val sb = new StringBuilder\n        for (i <- 0l to n) {\n            sb.append(i)\n\
    \            sb.append(\" \")\n        }\n        return sb.toString", "     \
    \   val s = new Array[String](n.toInt + 1)\n        for (i <- 0 to n.toInt) s(i)\
    \ = i.toString\n        s.mkString(\" \")", "        // var result = \"\"\n  \
    \      // for (i <- 0 to n) result += i + \" \"\n        // result.trim\n    \
    \    (0 to n).mkString(\" \")", "        val a = new Array[String](n.toInt + 1)\n\
    \        (0 to n.toInt).foreach(i => a(i) = i.toString)\n        a.mkString(\"\
    \ \")", "        val bldr = new StringBuilder\n        for (i <- 0l to n) {\n\
    \            bldr.append(i)\n            bldr.append(\" \")\n        }\n     \
    \   bldr.toString", "        val buf = new StringBuilder\n        for (i <- 0\
    \ to n.toInt) {\n            buf.append(i)\n            buf.append(\" \")\n  \
    \      }\n        buf.toString.trim", "        var s = new ListBuffer[String]()\n\
    \        for (i <- 0 to n.toInt) s += i.toString\n        return s.mkString(\"\
    \ \")"]
stop_tokens:
- "\n    }\n"
