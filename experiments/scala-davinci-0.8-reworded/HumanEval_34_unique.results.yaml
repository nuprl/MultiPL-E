language: scala
name: HumanEval_34_unique
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var a = l.sortWith(_ > _)\n        var a1 = 0l.toLong\n        var b\
    \ = new ListBuffer[Long]\n        for (a1 <- a) {\n            if (b.length ==\
    \ 0 || b(b.length - 1) != a1) {\n                b += a1\n            }\n    \
    \    }\n        b.toList\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2thiy1na.scala:19)\n\tat Problem.main(tmp2thiy1na.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var m = Map[Long, Int]()\n        for (i <- l) m += i -> 1\n        m.keys.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        // Return sorted unique elements in a list\n        return l.distinct.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \      val res = new ListBuffer[Long]\n      for (x <- l) {\n        if (!res.contains(x))\
    \ res += x\n      }\n      return res.toList.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var d = new HashSet[Long]()\n        for (e <- l) {\n            d +=\
    \ e\n        }\n        d.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        if (l.length == 0) {\n            return List[Long]()\n        }\n  \
    \      else {\n            val e = l.head\n            val n = unique(l.tail.filter(x\
    \ => x != e))\n            return e :: n\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph8bkix2q.scala:18)\n\tat Problem.main(tmph8bkix2q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.foldLeft(List[Long]())((result, x) => if (result.contains(x)) result\
    \ else x :: result).sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var set = Set[Long]()\n        l.foreach(i => set += i)\n        return\
    \ set.toList.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val set = scala.collection.mutable.Set[Long]()\n        set ++= l\n \
    \       val list = set.toList\n        list.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val sorted = l.sortWith(_ < _)\n        sorted.foldLeft(List[Long]())((a,\
    \ b) => a match {\n            case List() => List(b)\n            case x::xs\
    \ => {\n                if (x == b) a\n                else x::a\n           \
    \ }\n        }).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0tsh_7g5.scala:18)\n\tat Problem.main(tmp0tsh_7g5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var s = new TreeSet[Long]()\n        l.foreach(s.add(_))\n        s.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val set = SortedSet[Long]()\n        for (i <- l) set += i\n        return\
    \ set.toList\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.foldLeft(List[Long]())((list, elem) => if (list.contains(elem)) list\
    \ else list :+ elem).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val m = scala.collection.mutable.LinkedHashMap[Long, Boolean]()\n   \
    \     for (x <- l) m += x -> true\n        m.keys.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43airdub.scala:13)\n\tat Problem.main(tmp43airdub.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val set = l.toSet\n        val array = ArrayBuffer[Long]()\n        for\
    \ (a <- set) array += a\n        array.sorted.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val ans = SortedSet[Long]()\n        for (x <- l) ans += x\n        return\
    \ ans.toList\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var result = new ListBuffer[Long]\n        var set = new HashSet[Long]\n\
    \        for (e <- l) {\n            if (!set.contains(e)) {\n               \
    \ set += e\n                result += e\n            }\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val sorted = l.sorted\n        var unique = List[Long]()\n        if\
    \ (sorted.length > 0) {\n            unique = unique :+ sorted(0)\n          \
    \  for (i <- 1 until sorted.length) {\n                if (sorted(i) != sorted(i\
    \ - 1)) {\n                    unique = unique :+ sorted(i)\n                }\n\
    \            }\n        }\n        return unique\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = SortedSet[Long]()\n        for (i <- l) {\n            s += i\n\
    \        }\n        return s.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val m = scala.collection.mutable.HashSet[Long]()\n        for (v <- l)\
    \ m += v\n        val n = scala.collection.mutable.ListBuffer[Long]()\n      \
    \  for (v <- m) n += v\n        return n.toList.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val t = l.sortWith(_ < _)\n        val r = new ListBuffer[Long]\n   \
    \     for (i <- 0 until t.length) {\n            if (i == 0 || t(i) != t(i - 1))\
    \ r += t(i)\n        }\n        r.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = SortedSet[Long]()\n        l.foreach(x => s += x)\n        s.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \      l.sortWith(_<_).foldLeft(List[Long]())((a,b) => if (a.length == 0 || a.last\
    \ != b) a :+ b else a)\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var result = List[Long]()\n        var seen = Set[Long]()\n        for\
    \ (i <- l) {\n            if (!seen.contains(i)) {\n                result = i\
    \ :: result\n                seen += i\n            }\n        }\n        return\
    \ result.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = Set[Long]()\n        var r = List[Long]()\n        for (e <-\
    \ l) {\n            if (!s.contains(e)) {\n                s += e\n          \
    \      r = e :: r\n            }\n        }\n        r.sortWith(_ < _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.toSet.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        if (l.isEmpty) List[Long]()\n        else l.head :: unique(l.tail.filter(_\
    \ != l.head))\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7k66txyy.scala:12)\n\tat Problem.main(tmp7k66txyy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val set = HashSet[Long]()\n        for (n <- l) {\n            set +=\
    \ n\n        }\n        set.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val n = l.size\n        if (n == 0) {\n            return List[Long]()\n\
    \        }\n        else if (n == 1) {\n            return List[Long](l(0))\n\
    \        }\n        else {\n            val m = n / 2\n            val left =\
    \ unique(l.slice(0, m))\n            val right = unique(l.slice(m, n))\n     \
    \       val (l1, l2) = combine(left, right)\n            l1 ::: l2\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcdu2r2e9.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m (l1, l2) = combine(left, right)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Not found: combine\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcdu2r2e9.scala:19:17 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m (l1, l2) = combine(left, right)\n\
    \e[31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                \
    \ Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpcdu2r2e9.scala:19:21 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m (l1, l2) = combine(left, right)\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var ret = List[Long]()\n        for (i <- l) {\n            if (!ret.contains(i))\
    \ {\n                ret = ret :+ i\n            }\n        }\n        return\
    \ ret.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var result = List[Long]()\n        for (x <- l) {\n            if (!result.contains(x))\
    \ result = x :: result\n        }\n        result.sortWith(_ < _)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var ret : List[Long] = List[Long]()\n        for (e <- l) {\n       \
    \     if (!ret.contains(e)) {\n                ret = ret :+ e\n            }\n\
    \        }\n        return ret.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_<_).distinct\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).foldLeft(List[Long]())((res, x) => if (res.length ==\
    \ 0 || res.last != x) res :+ x else res)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        if (l.isEmpty) List[Long]()\n        else {\n            val h = l.head\n\
    \            h :: unique(l.filter(_ != h))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqkb2unf4.scala:15)\n\tat Problem.main(tmpqkb2unf4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var o : List[Long] = List[Long]()\n        for (i <- l) {\n         \
    \   if (!o.contains(i)) o = o :+ i\n        }\n        o.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val map = new HashMap[Long, Int]\n        val res = ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (!map.contains(x)) {\n               \
    \ map(x) = 1\n                res += x\n            }\n        }\n        res.sorted.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var m = new TreeSet[Long]\n        for (i <- l) {\n            m += i\n\
    \        }\n        var ret = List[Long]()\n        for (i <- m) {\n         \
    \   ret = i :: ret\n        }\n        ret.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val sl = SortedSet[Long]() ++ l\n        sl.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = new SortedSet[Long]\n        for (i <- l) s += i\n        s.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeqfq7dfg.scala:9:23 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- l) s += i\n\e[31m\e[31m \
    \ |\e[0m                     ^^^^\e[0m\n\e[31m  |\e[0m                     value\
    \ += is not a member of Unit - did you mean s.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpeqfq7dfg.scala:10:10 ------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        s.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        value toList is not a member of Unit\n2 errors found\n"
  stdout: ''
  timestamp: 1660009856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var list = List[Long]()\n        for (x <- l) {\n            if (!list.contains(x))\
    \ list = list :+ x\n        }\n        list.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var hm = HashMap[Long, Boolean]()\n        l.foreach(x => hm += (x ->\
    \ true))\n        return hm.keys.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.toSet.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = HashSet[Long]()\n        for (i <- l) s += i\n        return\
    \ s.toList.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.toSet.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val set = Set[Long]()\n        l.foreach(set += _)\n        set.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sorted.distinct\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = l.toSet\n        val r = (for (x <- s) yield x).toList\n    \
    \    return r.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = l.toSet\n        val l2 = s.toList\n        l2.sortWith((a, b)\
    \ => a < b)\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var result = new ListBuffer[Long]\n        for (i <- l) {\n         \
    \   if (!result.contains(i)) result += i\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.foldLeft((List[Long]()))((r, c) =>\n            if (r.exists(_ == c))\
    \ r else r :+ c\n        ).sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var result = List[Long]()\n        for (i <- l) {\n            if (!result.contains(i))\
    \ result = i :: result\n        }\n        result.sortWith(_ < _)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).foldLeft(List[Long]())((acc, x) => if (acc.isEmpty\
    \ || x != acc.last) acc :+ x else acc)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val l2 = l.sortWith(_ < _)\n        val s = l2.toSet\n        s.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6d9hnt8r.scala:13)\n\tat Problem.main(tmp6d9hnt8r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        if (l.isEmpty) return List[Long]()\n        var r : Long = l.head\n \
    \       var rlist : List[Long] = List(r)\n        var rest = l.tail\n        while\
    \ (!rest.isEmpty) {\n            if (rest.head != r) {\n                r = rest.head\n\
    \                rlist = rlist :+ r\n            }\n            rest = rest.tail\n\
    \        }\n        return rlist\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_t0exs__.scala:22)\n\tat Problem.main(tmp_t0exs__.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = SortedSet[Long]()\n        l.foreach(e => s += e)\n        s.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val m = Map[Long, Long]()\n        for (i <- l) {\n            m(i) =\
    \ m.getOrElse(i, 0l.toLong) + 1l.toLong\n        }\n        return m.toList.sortWith((a,\
    \ b) => a._1 < b._1).map(x => x._1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val sl = l.sorted\n        val rl = ListBuffer[Long]()\n        for (x\
    \ <- sl) {\n            if (rl.isEmpty || rl.last != x) rl += x\n        }\n \
    \       rl.toList\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        if (l.isEmpty) l\n        else {\n            val hd = l.head\n     \
    \       val set = unique(l.tail)\n            if (set.contains(hd)) set\n    \
    \        else hd :: set\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk2y9q842.scala:17)\n\tat Problem.main(tmpk2y9q842.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val buf = ListBuffer[Long]()\n        for (e <- l) {\n            if\
    \ (!buf.contains(e)) {\n                buf += e\n            }\n        }\n \
    \       buf.toList.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var m = new HashMap[Long, Long]()\n        for (i <- l) m(i) = i\n  \
    \      return m.keys.toList.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).reverse.filter((x : Long) => l.count(_ == x) == 1).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp92xbj_6l.scala:11)\n\tat Problem.main(tmp92xbj_6l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        if (l.length < 2) l\n        else {\n            val sortedList = l.sorted\n\
    \            val first = sortedList.head\n            sortedList.tail.foldLeft(List[Long](first))((acc,\
    \ n) => {\n                if (n == acc.head) acc\n                else n :: acc\n\
    \            }).reverse\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val l2 = l.distinct\n        l2.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val set = HashSet[Long]()\n        l.foreach(e => set += e)\n       \
    \ val array = new Array[Long](set.size)\n        var i = 0\n        set.foreach(e\
    \ => {\n            array(i) = e\n            i += 1\n        })\n        array.sorted.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.toSet.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.foldLeft(List[Long]())((ret, x) => {\n            if (!ret.contains(x))\
    \ x :: ret\n            else ret\n        }).sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.toSet.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val u = l.toSet.toList\n        u.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var uniques = List[Long]()\n        l.foreach(i => if (!uniques.contains(i))\
    \ uniques = uniques :+ i)\n        uniques.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var d : List[Long] = List()\n        for (i <- l) {\n            if (!d.contains(i))\
    \ {\n                d = i :: d\n            }\n        }\n        d = d.sorted\n\
    \        return d\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sorted.distinct\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val result = new ListBuffer[Long]()\n        for (e <- l)\n         \
    \   if (!result.contains(e))\n                result += e\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sorted.distinct\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        // To get unique elements, we need to remove elements that\n        //\
    \ already appear in the list. We can take advantage of the\n        // fact that\
    \ Set is unique.\n        val s = Set() ++ l\n        (s.toList).sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.foldLeft(List[Long]())((r, c) => if (r.contains(c)) r else r ::: List(c)).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        // return sorted, unique elements of l\n        l.sortWith(_ < _).reverse.foldLeft(List[Long]())((a,\
    \ b) => {\n            if (a.length == 0 || a.head != b) b :: a else a\n     \
    \   }).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmhi7dg5.scala:14)\n\tat Problem.main(tmpcmhi7dg5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var hash = new HashSet[Long]()\n        for (x <- l) hash += x\n    \
    \    return hash.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sorted.distinct\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.foldLeft(List[Long]())((a, b) => if (a.contains(b)) a else a :+ b).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return (List[Long]() ++ l.distinct.sorted)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        def unique0(l : List[Long], acc : List[Long]) : List[Long] = l match\
    \ {\n            case Nil => acc\n            case h :: t => unique0(t.filter((e)\
    \ => e != h), h :: acc)\n        }\n        unique0(l, List[Long]()).sortWith((a,\
    \ b) => a < b)\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var result = List[Long]()\n        var hs = HashSet[Long]()\n       \
    \ for (i <- l) {\n            if (!hs.contains(i)) {\n                hs += i\n\
    \                result = result :+ i\n            }\n        }\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        if (l.isEmpty) return List[Long]()\n        var result = new ListBuffer[Long]\n\
    \        result += l.head\n        for (i <- 1 until l.length) {\n           \
    \ if (l(i) != l(i - 1)) result += l(i)\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsupndkj7.scala:17)\n\tat Problem.main(tmpsupndkj7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = Set[Long]()\n        val l2 = ListBuffer[Long]()\n        for\
    \ (i <- l) {\n            if (!s.contains(i)) {\n                s += i\n    \
    \            l2 += i\n            }\n        }\n        l2.toList.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var s = new HashSet[Long]\n        for (x <- l) {\n            s += x\n\
    \        }\n        s.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var m = HashMap[Long, Long]()\n        for (i <- l) m(i) = 1\n      \
    \  var result = m.keys.toList\n        result.sortWith(_ < _)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = Set[Long]()\n        l.foreach(x => s.add(x))\n        s.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var lset = Set[Long]()\n        for (e <- l) lset += e\n        lset.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = SortedSet[Long]()\n        for (i <- l) s += i\n        return\
    \ s.toList\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        // sort the list and get its unique elements\n        val list = l.sortWith(_\
    \ < _)\n        def loop(acc : List[Long], prev : Long, rem : List[Long]) : List[Long]\
    \ = rem match {\n            case Nil => acc\n            case h :: t =>\n   \
    \             if (h == prev) loop(acc, prev, t)\n                else loop(acc\
    \ :+ h, h, t)\n        }\n        list match {\n            case Nil => List[Long]()\n\
    \            case h :: t => loop(List[Long](h), h, t)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.foldLeft(List[Long]())((x, y) => if (x.contains(y)) x else x :+ y).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var l2 = List[Long]()\n        for (e <- l) {\n            if (!l2.contains(e))\
    \ {\n                l2 = e :: l2\n            }\n        }\n        return l2.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.sortWith(_ < _).foldLeft(List[Long]())((acc, i) => {\n     \
    \       if (acc.isEmpty || acc.last != i) acc :+ i\n            else acc\n   \
    \     })\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.sortWith(_<_).foldLeft(List[Long]())((result, current) => {if\
    \ (result.isEmpty || result.last != current) result :+ current else result})\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val r = scala.collection.mutable.ListBuffer[Long]()\n        for (v <-\
    \ l) {\n            r += v\n        }\n        val e = r.toList.sortWith(_ < _)\n\
    \        if (e.length == 0) {\n            return e\n        }\n        val r2\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < e.length) {\n            if (i == 0 || e(i) != e(i - 1)) {\n          \
    \      r2 += e(i)\n            }\n            i += 1\n        }\n        r2.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val hm = HashMap[Long, Int]()\n        l.foreach(x => hm(x) = 1)\n  \
    \      hm.keys.toList.sorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        def unique(l : List[Long], acc : List[Long]) : List[Long] = {\n     \
    \       if (l.isEmpty) acc\n            else if (acc.isEmpty) unique(l.tail, acc\
    \ :+ l.head)\n            else if (l.head == acc.head) unique(l.tail, acc)\n \
    \           else unique(l.tail, acc :+ l.head)\n        }\n        unique(l.sorted,\
    \ List[Long]())\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn2dh8xzy.scala:17)\n\tat Problem.main(tmpn2dh8xzy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.toSet.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        // Union all elements with itself\n        // Then remove all elements\
    \ that are not equal to itself (remove duplicates)\n        l.map((x : Long) =>\
    \ Set(x, x)).reduce((x : Set[Long], y : Set[Long]) => x union y).filter((x : Long)\
    \ => x == x)\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgx8cy0us.scala:10:97\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        l.map((\e[36mx\e[0m :\
    \ \e[35mLong\e[0m) => Set(x, x)).reduce((\e[36mx\e[0m : \e[35mSet\e[0m[\e[35mLong\e\
    [0m], \e[36my\e[0m : \e[35mSet\e[0m[\e[35mLong\e[0m]) => x union y).filter((\e\
    [36mx\e[0m : \e[35mLong\e[0m) => x == x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.Set[Long]\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009913
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = SortedSet[Long]()\n        for (x <- l) {\n            s += x\n\
    \        }\n        s.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        // Sort the list\n        val sorted = l.sortWith((a, b) => a < b)\n\
    \        var prev : Long = -1\n        var result : List[Long] = List[Long]()\n\
    \        for (i <- sorted) {\n            if (i != prev) {\n                result\
    \ = result :+ i\n                prev = i\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        // ??? What's going on here?\n        l.distinct.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val h = HashSet[Long]()\n        l.foreach(x => h.add(x))\n        h.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \      var ret = l.sorted\n      var hset = HashSet[Long]()\n      for (num <-\
    \ ret) {\n        hset += num\n      }\n      return hset.toList.sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \      return l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        def uniqueH(l : List[Long], res : List[Long]) : List[Long] = {\n    \
    \        if (l.length == 0) res\n            else if (res.contains(l.head)) uniqueH(l.tail,\
    \ res)\n            else uniqueH(l.tail, res ++ List(l.head))\n        }\n   \
    \     uniqueH(l, List[Long]())\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuekuvgfz.scala:16)\n\tat Problem.main(tmpuekuvgfz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).foldLeft(List[Long]())((r, c) => if (r.isEmpty || r.last\
    \ != c) r ::: List(c) else r)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.toSet.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var sorted = l.sorted\n        var result = List[Long]()\n        var\
    \ last : Long = 0\n        for (i <- sorted) {\n            if (i != last) {\n\
    \                result = result :+ i\n                last = i\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr1axiwjv.scala:20)\n\tat Problem.main(tmpr1axiwjv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var a = ArrayBuffer[Long]()\n        for (x <- l) {\n            if (!a.contains(x))\
    \ a += x\n        }\n        return a.toList.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong,\
    \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var m = Map[Long, Boolean]()\n        for (n <- l) {\n            m +=\
    \ (n -> true)\n        }\n        return m.keys.toList.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var seen = HashSet[Long]()\n        var uniqueList = List[Long]()\n \
    \       for (i <- l) {\n            if (!seen.contains(i)) {\n               \
    \ seen += i\n                uniqueList = i :: uniqueList\n            }\n   \
    \     }\n        return uniqueList.sortWith(_<_)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sorted.distinct\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.distinct.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return (l.sortWith(_ < _)).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.sortWith(_ < _).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val l2 = (l.sortWith(_<_)).distinct\n        return l2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val s = TreeSet[Long]()\n        for (x <- l) s += x\n        s.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var lp = List[Long]()\n        var m = Map[Long, Boolean]()\n       \
    \ for (x <- l) {\n            if (!m.contains(x)) {\n                m(x) = true\n\
    \                lp = x :: lp\n            }\n        }\n        return lp.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.sortWith(_ < _).foldLeft(List[Long]())((r,c) => if (r.isEmpty || r.last\
    \ != c) r ::: List(c) else r)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        var nl = List[Long]()\n        var prev : Long = 0\n        for (num\
    \ <- l.sorted) {\n            if (num != prev) nl = nl :+ num\n            prev\
    \ = num\n        }\n        return nl\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzjnkgzur.scala:17)\n\tat Problem.main(tmpzjnkgzur.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        val m = new TreeSet[Long]\n        for (x <- l) m += x\n        m.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        l.distinct.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.sortWith(_ < _).foldLeft(List[Long]())((a, b) => {\n       \
    \     if (a.isEmpty || b != a.last) {\n                a :+ b\n            } else\
    \ {\n                a\n            }\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        return l.sortWith(_<_).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong,\
    \ 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
    \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n\
    \        // In the list, swap elements at index1 and index2\n        def swap(l\
    \ : List[Long], index1 : Int, index2 : Int) : List[Long] = {\n            val\
    \ temp = l(index1)\n            l.updated(index1, l(index2)).updated(index2, temp)\n\
    \        }\n        // Partition list from left to right\n        def partition(l\
    \ : List[Long], left : Int, right : Int) : List[Long] = {\n            if (left\
    \ >= right) {\n                l\n            } else {\n                val pivot\
    \ = l(left)\n                var i = left\n                var j = right\n   \
    \             while (i < j) {\n                    while (i < j && l(j) >= pivot)\
    \ {\n                        j -= 1\n                    }\n                 \
    \   while (i < j && l(i) <= pivot) {\n                        i += 1\n       \
    \             }\n                    if (i < j) {\n                        l =\
    \ swap(l, i, j)\n                    }\n                }\n                l =\
    \ swap(l, left, i)\n                partition(l, left, i - 1)\n              \
    \  partition(l, i + 1, right)\n            }\n        }\n        // Quick sort\n\
    \        def quickSort(l : List[Long]) : List[Long] = {\n            partition(l,\
    \ 0, l.length - 1)\n        }\n        // Remove duplicate elements\n        quickSort(l).groupBy(x\
    \ => x).map(_._1).toList\n    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
    \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong,\
    \ 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpy2tl9sb7.scala:29:26 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                        l = swap(l, i, j)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                    Reassignment to val l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpy2tl9sb7.scala:32:18 -----------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                l = swap(l, left, i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009919
