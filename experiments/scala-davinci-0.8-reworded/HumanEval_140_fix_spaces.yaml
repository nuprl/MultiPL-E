name: HumanEval_140_fix_spaces
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string text, replace all spaces in it with underscores, \n    //\
  \ and if a string has more than 2 consecutive spaces, \n    // then replace all\
  \ consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\"\
  )\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\"\
  \ Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n\
  \    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
  )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
completions: ['        text.trim().replaceAll(" ", "_").replaceAll("_+", "-")', " \
    \   \t\ttext.trim().replace(\" \", \"_\").replaceAll(\"_+\", \"-\")", "      \
    \  var sb = new StringBuilder\n        text.foreach(x => {\n            if (x\
    \ == ' ') sb += \"_\"\n            else sb += x\n        })\n        var result\
    \ = sb.toString\n        result = result.replaceAll(\"___\", \"-\")\n        result\
    \ = result.replaceAll(\"__\", \"_\")\n        result", '        return text.replaceAll("
    +", "-").replaceAll(" ", "_")', "        var new_text = \"\"\n        var i =\
    \ 0\n        while (i < text.length) {\n            if (text(i) == ' ') {\n  \
    \              val temp = text.substring(i)\n                if (temp.contains(\"\
    \ \")) {\n                    val first_index = temp.indexOf(\" \")\n        \
    \            val second_index = temp.indexOf(\" \", first_index + 1)\n       \
    \             if (second_index == -1) new_text += temp.substring(0, first_index\
    \ + 1).replace(\" \", \"_\")\n                    else new_text += temp.substring(0,\
    \ second_index).replace(\" \", \"-\")\n                    i += second_index\n\
    \                }\n                else {\n                    new_text += \"\
    _\"\n                    i += 1\n                }\n            }\n          \
    \  else {\n                new_text += text(i)\n                i += 1\n     \
    \       }\n        }\n        new_text", "        val words = text.split(\"\\\\\
    s+\")\n        if (words.length == 1) return words(0)\n        val res = new StringBuilder\n\
    \        for (i <- 0 until words.length - 1) {\n            res.append(words(i))\n\
    \            if (i < words.length - 2) res.append(\"_\")\n            else res.append(\"\
    -\")\n        }\n        res.append(words(words.length - 1))\n        res.toString",
  '        text.split(" ").filter(_ != "").mkString("_").replaceAll("__+", "_")',
  "        var res = \"\"\n        var i = 0\n        while (i < text.length) {\n\
    \            if (text(i) == ' ') {\n                res += '_'\n             \
    \   var j = i + 1\n                while (j < text.length && text(j) == ' ') j\
    \ += 1\n                if (j - i > 2) res += '-'\n                i = j\n   \
    \         } else {\n                res += text(i)\n                i += 1\n \
    \           }\n        }\n        res", "    \tval t = text.split(\" \")\n   \
    \ \tval l = t.length\n    \tvar sb = new StringBuilder\n    \tif (l == 1) {\n\
    \    \t\tsb.append(t(0))\n    \t} else {\n    \t\tfor (i <- 0 until l - 1) {\n\
    \    \t\t\tsb.append(t(i))\n    \t\t\tif (i == 0) {\n    \t\t\t\tsb.append(\"\
    _\")\n    \t\t\t} else if (i == 1) {\n    \t\t\t\tsb.append(\"_\")\n    \t\t\t\
    } else {\n    \t\t\t\tsb.append(\"-\")\n    \t\t\t}\n    \t\t}\n    \t\tsb.append(t(l\
    \ - 1))\n    \t}\n    \tsb.toString", "        var charArray = text.toCharArray\n\
    \        var spaceCount = 0\n        for (i <- 0 until charArray.length) {\n \
    \           if (charArray(i) == ' ') {\n                spaceCount += 1\n    \
    \            if (spaceCount > 2) {\n                    charArray(i) = '-'\n \
    \               } else {\n                    charArray(i) = '_'\n           \
    \     }\n            } else {\n                spaceCount = 0\n            }\n\
    \        }\n        charArray.mkString", "      var s = text.toCharArray.filter(c\
    \ => c != ' ')\n      for (i <- 0 until s.length - 1) {\n        if (s(i) == '\
    \ ' && s(i + 1) == ' ') {\n          s(i) = '-'\n        }\n      }\n      s.mkString.replaceAll(\"\
    \ \", \"_\")", "        // Fix Me\n        return \"fixSpaces\"", "        //\
    \ Your code here\n        \"MISSING\"", "        var result = text\n        for\
    \ (i <- 0 until text.length - 1) {\n            if (text(i) == ' ' && text(i +\
    \ 1) == ' ') result = result.substring(0, i) + \"-\" + result.substring(i + 1)\n\
    \            else if (text(i) == ' ') result = result.substring(0, i) + \"_\"\
    \ + result.substring(i + 1)\n        }\n        result", '        text.trim().replaceAll("\\s+",
    "-")', "        var ans = \"\"\n        var first = true\n        var consecutive\
    \ = 0\n        for (c <- text) {\n            if (c == ' ') {\n              \
    \  consecutive += 1\n                if (first || consecutive > 2) ans += \"-\"\
    \n            } else {\n                if (consecutive == 1) ans += \"_\"\n \
    \               else if (consecutive == 2) ans += \" \"\n                ans +=\
    \ c\n                consecutive = 0\n                first = false\n        \
    \    }\n        }\n        ans", "        def helper(text : String, acc : String)\
    \ : String = {\n            if (text.isEmpty) acc\n            else if (text.head\
    \ == ' ') {\n                if (acc.last == '_') {\n                    helper(text.tail,\
    \ acc :+ '-')\n                } else {\n                    helper(text.tail,\
    \ acc :+ '_')\n                }\n            } else {\n                helper(text.tail,\
    \ acc :+ text.head)\n            }\n        }\n        helper(text, \"\")", " \
    \       // replace consecutive spaces with a placeholder\n        val a = text.replaceAll(\"\
    \ +\", \" \")\n        // replace space with a dash\n        val b = a.replaceAll(\"\
    \ \", \"-\")\n        // replace the placeholder with dash\n        val c = b.replaceAll(\"\
    \ \", \"_\")\n        return c", "    \ttext.replace(\" \", \"_\").replace(\"\
    __\", \"_\").replace(\"___\", \"-\")", '        return text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        val len = text.length\n        val sb = new\
    \ StringBuilder\n        var spaceCount = 0\n        for (c <- text) {\n     \
    \       if (c == ' ') {\n                spaceCount += 1\n                if (spaceCount\
    \ > 2) sb += '-'\n            } else {\n                if (spaceCount == 1) sb\
    \ += '_'\n                spaceCount = 0\n                sb += c\n          \
    \  }\n        }\n        sb.toString", '        return "";', "        var result\
    \ = text.trim\n        if (result.contains(\"  \")) {\n            result = result.replaceAll(\"\
    \  \", \"-\")\n        }\n        result = result.replaceAll(\" \", \"_\")\n \
    \       result", "        val space = ' '\n        val underscore = '_'\n    \
    \    var current = ' '\n        var next = text(0)\n        var hasSpace = false\n\
    \        var hasTwoSpaces = false\n        var hasThreeSpaces = false\n      \
    \  var newString = \"\"\n        var i = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == space) {\n                if (hasSpace) {\n  \
    \                  if (hasTwoSpaces) {\n                        if (hasThreeSpaces)\
    \ {\n                            newString += underscore\n                   \
    \         hasSpace = false\n                            hasTwoSpaces = false\n\
    \                            hasThreeSpaces = false\n                        }\
    \ else {\n                            newString += \"-\"\n                   \
    \         hasSpace = false\n                            hasTwoSpaces = false\n\
    \                            hasThreeSpaces = true\n                        }\n\
    \                    } else {\n                        newString += \"_\"\n  \
    \                      hasSpace = false\n                        hasTwoSpaces\
    \ = true\n                        hasThreeSpaces = false\n                   \
    \ }\n                } else {\n                    newString += text(i)\n    \
    \                hasSpace = true\n                    hasTwoSpaces = false\n \
    \                   hasThreeSpaces = false\n                }\n            } else\
    \ {\n                newString += text(i)\n                hasSpace = false\n\
    \                hasTwoSpaces = false\n                hasThreeSpaces = false\n\
    \            }\n        }\n        newString", '      text.replaceAll(" ", "_").replaceAll("_+",
    "-")', '        ???', '        text.replaceAll("\\s{2,}", "--").replaceAll("\\s",
    "_")', "        val init = \"_\"\n        val trans = \"_-\"\n        text.replaceAll(\"\
    \\\\s{2,}\", \" \").replaceAll(\" \", init).replaceAll(init + \"{2,}\", trans).replaceAll(init,\
    \ \" \").replaceAll(trans, init)", "        val sb = new StringBuilder\n     \
    \   var flag = false\n        for (i <- 0 until text.length) {\n            if\
    \ (text(i) == ' ') {\n                if (sb.length == 0) sb += '_'\n        \
    \        else {\n                    if (sb.last == '_') flag = true\n       \
    \             else sb += '_'\n                }\n            }\n            else\
    \ {\n                if (flag) {\n                    sb += '-'\n            \
    \        flag = false\n                }\n                sb += text(i)\n    \
    \        }\n        }\n        sb.toString", "        var charArray = text.toCharArray()\n\
    \        var spaceCount = 0\n        for (i <- 0 until charArray.length - 1) {\n\
    \            if (charArray(i) == ' ') {\n                spaceCount += 1\n   \
    \             if (spaceCount == 1) {\n                    charArray(i) = '_'\n\
    \                } else if (spaceCount > 2) {\n                    charArray(i)\
    \ = '-'\n                }\n            } else {\n                spaceCount =\
    \ 0\n            }\n        }\n        return charArray.mkString(\"\")", "   \
    \     var str = \"\"\n        var count = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                count += 1\n         \
    \       if (count == 2) {\n                    str += '-'\n                }\n\
    \            } else {\n                if (count != 0) {\n                   \
    \ str += '_'\n                }\n                str += text(i)\n            \
    \    count = 0\n            }\n        }\n        return str", "        val sb\
    \ = new StringBuilder\n        var spaceCount = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                spaceCount += 1\n    \
    \            if (spaceCount > 2) sb.append('-')\n            } else {\n      \
    \          spaceCount = 0\n                sb.append(text(i))\n            }\n\
    \        }\n        sb.toString", '        return null', "        def fixSpacesHelper(text\
    \ : String, current : Int, accum : String) : String = {\n            if (current\
    \ == text.length) accum\n            else if (text(current) == ' ') {\n      \
    \          if (current == 0) fixSpacesHelper(text, current + 1, \"_\")\n     \
    \           else if (text(current - 1) == ' ') {\n                    if (current\
    \ < text.length - 1 && text(current + 1) == ' ') fixSpacesHelper(text, current\
    \ + 1, accum + \"-\")\n                    else fixSpacesHelper(text, current\
    \ + 1, accum + \"_\")\n                }\n                else fixSpacesHelper(text,\
    \ current + 1, accum + \"_\")\n            }\n            else fixSpacesHelper(text,\
    \ current + 1, accum + text(current))\n        }\n        fixSpacesHelper(text,\
    \ 0, \"\")", '        text.replaceAll("\\s", "_").replaceAll("_+", "-")', '        text.replaceAll("
    ", "_").replaceAll("__+", "-")', "        return text.toList.map((c) => if (c\
    \ == ' ') \"_\" else c).mkString", "        var result = \"\";\n        var cnt\
    \ = 0;\n        for (i <- 0 until text.length) {\n            if (text(i) == '\
    \ ') {\n                cnt += 1;\n                if (cnt == 2) result += '_';\n\
    \                else if (cnt > 2) result += '-';\n            } else {\n    \
    \            result += text(i);\n                cnt = 0;\n            }\n   \
    \     }\n        result;", "        val sb = new StringBuilder\n        var spaces\
    \ = 0\n        for (char <- text) {\n            if (char == ' ') {\n        \
    \        spaces += 1\n                if (spaces == 2) {\n                   \
    \ sb.append('-')\n                    spaces = 0\n                }\n        \
    \    } else {\n                if (spaces == 1) {\n                    sb.append('_')\n\
    \                }\n                sb.append(char)\n                spaces =\
    \ 0\n            }\n        }\n        sb.toString", "        val s = text.trim\n\
    \        s.replace(\" \",\"_\").replaceAll(\"_+\",\"-\")", '        ">>> " + text',
  "        // List of patterns to match\n        val patterns = List(\n          \
    \  \" {2,}\",\n            \" +\",\n            \" \"\n        )\n        // List\
    \ of replacements\n        val replacements = List(\n            \"_\",\n    \
    \        \"-\",\n            \"_\"\n        )\n        // return the replaced\
    \ string\n        replace(text, patterns, replacements)", '        return text.split("
    ").filter((s : String) => s != "").mkString("_").replaceAll("_+", "-")', "   \
    \     def loop(str : String, sb : StringBuilder, space : Boolean) : String = {\n\
    \            if (str.isEmpty) return sb.toString\n            if (str.head ==\
    \ ' ') {\n                if (space) sb.append('-')\n                else {\n\
    \                    sb.append('_')\n                    loop(str.tail, sb, true)\n\
    \                }\n            }\n            else {\n                sb.append(str.head)\n\
    \                loop(str.tail, sb, false)\n            }\n        }\n       \
    \ loop(text, new StringBuilder(), false)", "        var newStr = new StringBuilder(text.trim().replaceAll(\"\
    \ \", \"_\"))\n        for (i <- 1 until newStr.length - 1) {\n            if\
    \ (newStr(i) == '_' && newStr(i - 1) == '_' && newStr(i + 1) == '_') {\n     \
    \           newStr(i) = '-'\n            }\n        }\n        newStr.toString()",
  '        return text.replaceAll("[ ]{2,}", "-").replaceAll("[ ]", "_")', "     \
    \   val result = text.replace(\" \", \"_\")\n        val result2 = result.replace(\"\
    __\", \"_\")\n        val result3 = result2.replace(\"___\", \"-\")\n        return\
    \ result3", '      text.replaceAll("  ", "-").replaceAll(" ", "_")', "       \
    \ var output = \"\"\n        var count = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                count += 1\n         \
    \       if (count == 1) {\n                    output += \"_\"\n             \
    \   } else if (count == 2) {\n                    output += \"_\"\n          \
    \      } else if (count > 2) {\n                    output += \"-\"\n        \
    \        }\n            } else {\n                output += text(i)\n        \
    \        count = 0\n            }\n        }\n        output", "    \tdef replaceSpaces(acc\
    \ : String, text : String) : String = {\n    \t\tif (text.length == 0) acc\n \
    \   \t\telse {\n    \t\t\tif (text.head == ' ') {\n    \t\t\t\tif (acc.length\
    \ != 0 && acc.last == ' ') replaceSpaces(acc + '-', text.tail)\n    \t\t\t\telse\
    \ replaceSpaces(acc + '_', text.tail)\n    \t\t\t}\n    \t\t\telse replaceSpaces(acc\
    \ + text.head, text.tail)\n    \t\t}\n    \t}\n    \treplaceSpaces(\"\", text)",
  "      val arr = text.split(\" \")\n      var res = new StringBuilder\n      for\
    \ (i <- 0 until arr.length) {\n        if (arr(i) == \"\") {\n          if (res.toString.endsWith(\"\
    -\")) {\n            res.append(\"-\")\n          } else {\n            res.append(\"\
    _\")\n          }\n        } else {\n          res.append(arr(i))\n          if\
    \ (i < arr.length - 1) res.append(\" \")\n        }\n      }\n      return res.toString",
  "        var c = text.head\n        var res = new StringBuilder\n        var cnt\
    \ = 0\n        for (c <- text) {\n            if (c == ' ') {\n              \
    \  cnt += 1\n                if (cnt == 2) res.append('_')\n                else\
    \ if (cnt > 2) res.append('-')\n            } else {\n                cnt = 0\n\
    \                res.append(c)\n            }\n        }\n        res.toString",
  '        return text.replaceAll("\\s+", " ").trim().replaceAll(" ", "_").replaceAll("
    ", "-")', "        // return text.trim.replaceAll(\" \", \"_\").replaceAll(\"\
    _+\", \"-\")\n        return text.trim.replaceAll(\" {2,}\", \"-\").replaceAll(\"\
    \ \", \"_\")", "        var textFixed = text.split(\" \").map(_.trim).mkString(\"\
    _\")\n        var textFixed2 = textFixed.split(\"__\").map(_.trim).mkString(\"\
    _\")\n        var textFixed3 = textFixed2.split(\"___\").map(_.trim).mkString(\"\
    -\")\n        return textFixed3", "        val s = text.trim.split(\"\\\\s+\"\
    ).mkString(\"_\")\n        if (s.contains(\"__\"))\n            s.replaceAll(\"\
    __\", \"-\")\n        else\n            s", '        text.trim.replaceAll(" +",
    "_")', "        // Write your code below\n        if (text.isEmpty) return text\n\
    \        val text2 = text.replaceAll(\"\\\\s+\", \"_\")\n        text2", "   \
    \     var result = text.trim.replaceAll(\" \", \"_\")\n        if (result.length\
    \ < 3) {\n            return result\n        }\n        result = result.substring(0,\
    \ 2) + result.substring(2).replaceAll(\" \", \"-\")\n        return result", '        text.trim().replace("
    ", "_").replaceAll("\\s+", "-")', "        val regex = new Regex(\"[ ]+\")\n \
    \       regex.replaceAllIn(text, \" \")\n        regex.replaceAllIn(text, \"_\"\
    )\n        regex.replaceAllIn(text, \"-\")", "        var output = text.trim.replaceAll(\"\
    \ +\", \"_\")\n        output.replaceAll(\"_+\", \"-\")", "        var string\
    \ = text.replaceAll(\" \", \"_\")\n        string = string.replaceAll(\"_+\",\
    \ \"_\")\n        string = string.replaceAll(\"_\", \"-\")\n        return string",
  '        text.replaceAll("\\s+", " ").replaceAll(" ", "_").replaceAll("__+", "-")',
  '        text.trim.replaceAll(" +", " ").replaceAll(" ", "_").replaceAll("_+", "-")',
  '        text.replaceAll("\\s+", "_")', '        text.replaceAll("\\s{2,}", "-").replaceAll("
    ", "_")', "        var result = new StringBuilder\n        var previous = ' '\n\
    \        for (c <- text) {\n            if (c == ' ') {\n                if (previous\
    \ == ' ') {\n                    result += '-'\n                } else {\n   \
    \                 result += '_'\n                }\n            } else {\n   \
    \             result += c\n            }\n            previous = c\n        }\n\
    \        result.toString", "        if (text.length() == 0) \"\"\n        else\
    \ if (text.length() == 1) text\n        else if (text.contains(\"   \")) text.replaceAll(\"\
    \   \", \"-\")\n        else if (text.contains(\"  \")) text.replaceAll(\"  \"\
    , \"_\")\n        else text.replaceAll(\" \", \"_\")", '        text.trim.split("\\s+").mkString("_")',
  "    \ttext.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"___\", \"-\")",
  "        var result = text\n        if (text != null) {\n            val max_length\
    \ = text.length\n            var current_length = 0\n            while (current_length\
    \ < max_length) {\n                val char = text.charAt(current_length)\n  \
    \              if (char == ' ') {\n                    if (current_length < 2)\
    \ {\n                        result = result.replaceFirst(\" \", \"_\")\n    \
    \                } else {\n                        result = result.replaceFirst(\"\
    \ \", \"-\")\n                    }\n                }\n                current_length\
    \ += 1\n            }\n        }\n        result", '        text.replaceAll("
    ", "_").replaceAll("_+", "-")', "        // base case: empty string\n        if\
    \ (text.isEmpty) return text\n        // recursive case: starts with space\n \
    \       if (text.startsWith(\" \")) {\n            val t = fixSpaces(text.substring(1))\n\
    \            // return - if we have more than 2 spaces in a row\n            if\
    \ (t.startsWith(\" \")) {\n                return (\"-\" + t)\n            }\n\
    \            // return _ otherwise\n            return (\"_\" + t)\n        }\n\
    \        // recursive case: doesn't start with space\n        return (text.substring(0,\
    \ 1) + fixSpaces(text.substring(1)))", "        // your code here...\n       \
    \ \"not implemented\"", "        def go(text : String, res : String) : String\
    \ = {\n            if (text.length == 0) res\n            else if (text.head !=\
    \ ' ') go(text.tail, res + text.head)\n            else {\n                val\
    \ (spaces, rest) = text.span(x => x == ' ')\n                if (spaces.length\
    \ == 1) go(rest, res + '_')\n                else if (spaces.length == 2) go(rest,\
    \ res + '_')\n                else go(rest, res + '-')\n            }\n      \
    \  }\n        go(text, \"\")", "        // this is just a template for type\n\
    \        \"Example\"", "        var result = text\n        if (text.indexOf(\"\
    \ \") >= 0) {\n            result = result.replaceAll(\" \", \"_\")\n        \
    \    var spaceIndex = result.indexOf(\" \")\n            while (spaceIndex >=\
    \ 0) {\n                result = result.replaceAll(\" \", \"-\")\n           \
    \     spaceIndex = result.indexOf(\" \")\n            }\n        }\n        return\
    \ result", "        val s = text.replaceAll(\"\\\\s+\", \"_\")\n        if (s.length\
    \ == 1) s.toString\n        else {\n            val n = s.zipWithIndex.foldLeft(new\
    \ StringBuilder()) { case (sb, (ch, i)) => {\n                if (ch == '_' &&\
    \ i != 0 && i != s.length - 1) {\n                    if (sb(sb.length - 1) ==\
    \ '_') sb.append('-')\n                    else sb.append('_')\n             \
    \   }\n                else sb.append(ch)\n            }}\n            n.toString\n\
    \        }", "        var result = text\n        for (i <- 0 until result.length)\
    \ {\n            if (result(i) == ' ') {\n                result = result.substring(0,\
    \ i) + '_' + result.substring(i + 1)\n            }\n        }\n        var prev\
    \ = result(0)\n        var count = 0\n        for (i <- 1 until result.length)\
    \ {\n            if (result(i) == '_') {\n                if (prev == '_') {\n\
    \                    count += 1\n                } else {\n                  \
    \  count = 1\n                }\n                if (count > 2) {\n          \
    \          result = result.substring(0, i) + '-' + result.substring(i + 1)\n \
    \               }\n            } else {\n                count = 0\n         \
    \   }\n            prev = result(i)\n        }\n        result", "        val\
    \ replaced = text.replaceAll(\" \", \"_\").replaceAll(\"_+\", \"-\")\n       \
    \ if (replaced.head == '_') replaced.tail else replaced", "        var t = text\n\
    \        while (t.contains(\"  \")) {\n            t = t.replace(\"  \", \" -\"\
    )\n        }\n        return t.replace(\" \", \"_\")", "        // TODO: implement\n\
    \        return \"\";", "        var result = text.trim()\n        result = result.replace(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"[_]+\", \"-\")\n        return\
    \ result", "        val textArray = text.toCharArray\n        var n = textArray.length\n\
    \        var hasSpace = false\n        var numOfSpaces = 0\n        for (i <-\
    \ 0 until n) {\n            if (textArray(i) == ' ') {\n                if (hasSpace)\
    \ {\n                    numOfSpaces += 1\n                } else {\n        \
    \            hasSpace = true\n                    numOfSpaces = 1\n          \
    \      }\n            } else {\n                hasSpace = false\n           \
    \     numOfSpaces = 0\n            }\n            if (numOfSpaces > 2) {\n   \
    \             textArray(i) = '-'\n            } else if (numOfSpaces == 2) {\n\
    \                textArray(i) = '_'\n            }\n        }\n        new String(textArray)",
  '        return text.replaceAll("\\s+", " ").replaceAll(" ", "_").replaceAll("_+",
    "_")', "        val t = text.replace(\" \", \"_\")\n        t.split(\"_\").mkString(\"\
    -\")", '        text.trim.replaceAll(" ", "_").replaceAll("__", "-")', "     \
    \   var cnt = 0\n        var flag = true\n        var newtext = new StringBuilder()\n\
    \        for (i <- 0 until text.length) {\n            if (text(i) == ' ') {\n\
    \                cnt += 1\n                if (cnt >= 2) {\n                 \
    \   flag = false\n                }\n            } else {\n                cnt\
    \ = 0\n            }\n            if (flag) {\n                if (text(i) ==\
    \ ' ') {\n                    newtext.append('_')\n                } else {\n\
    \                    newtext.append(text(i))\n                }\n            }\
    \ else {\n                if (text(i) == ' ') {\n                    newtext.append('-')\n\
    \                } else {\n                    newtext.append(text(i))\n     \
    \           }\n            }\n        }\n        newtext.toString", "      var\
    \ result = new StringBuilder\n      for (i <- 0 until text.length)\n        text(i)\
    \ match {\n          case ' ' => if (i + 1 < text.length && text(i + 1) == ' ')\
    \ result.append('-') else result.append('_')\n          case c => result.append(c)\n\
    \        }\n      result.toString", "        val res = text.trim\n        val\
    \ res2 = if (res.length > 2) {\n            res.replace(\" \", \"_\").replace(\"\
    __\", \"_\").replace(\"__\", \"-\")\n        } else {\n            res.replace(\"\
    \ \", \"_\")\n        }\n        return res2", '        return "(" + text.replace("
    ", "_").replace("  ", "_").replace("__", "-") + ")"', "        var currentChar\
    \ = ' '\n        var nextChar = ' '\n        var newText = text\n        var spaces\
    \ = 0\n        for (i <- 0 until text.length) {\n            currentChar = text(i)\n\
    \            if (currentChar == ' ') {\n                if (i == text.length -\
    \ 1) {\n                    newText = newText.dropRight(1)\n                }\
    \ else {\n                    nextChar = text(i + 1)\n                    if (nextChar\
    \ == ' ') {\n                        if (spaces == 0) {\n                    \
    \        newText = newText.substring(0, i) + \"_\" + newText.substring(i + 1)\n\
    \                        } else if (spaces == 1) {\n                         \
    \   newText = newText.substring(0, i) + \"-\" + newText.substring(i + 1)\n   \
    \                     } else {\n                            newText = newText.substring(0,\
    \ i) + newText.substring(i + 1)\n                        }\n                 \
    \       spaces += 1\n                    } else {\n                        spaces\
    \ = 0\n                    }\n                }\n            }\n        }\n  \
    \      newText", '        return text.replaceAll("\\s+", " ").replaceAll(" ",
    "_")', '        text.replace("  ", "-").replace(" ", "_")', "        var ret =\
    \ text\n        ret = ret.trim()\n        ret = ret.replace(\" \", \"_\")\n  \
    \      ret = ret.replaceAll(\"_+\", \"-\")\n        return ret", "    \tvar count\
    \ = 0\n    \tvar temp = \"\"\n    \tvar result = \"\"\n    \tfor (index <- 0 until\
    \ text.length()) {\n    \t\tif (text(index) == ' ') {\n    \t\t\tcount += 1\n\
    \    \t\t\tif (count > 2) {\n    \t\t\t\ttemp += \"-\"\n    \t\t\t} else {\n \
    \   \t\t\t\ttemp += \"_\"\n    \t\t\t}\n    \t\t} else {\n    \t\t\tresult +=\
    \ temp\n    \t\t\tresult += text(index)\n    \t\t\ttemp = \"\"\n    \t\t\tcount\
    \ = 0\n    \t\t}\n    \t}\n    \tresult", "        // ADD YOUR CODE HERE\n   \
    \     null", "        val charArr = text.toCharArray()\n        val arr = ArrayBuffer[Char]()\n\
    \        var count = 0\n        for (c <- charArr) {\n            if (c == ' ')\
    \ {\n                count += 1\n                if (count == 2) {\n         \
    \           arr += '-'\n                }\n            } else {\n            \
    \    if (count >= 2) {\n                    arr += '_'\n                }\n  \
    \              arr += c\n                count = 0\n            }\n        }\n\
    \        if (count >= 2) {\n            arr += '_'\n        }\n        new String(arr.toArray)",
  '        return text.replace(" ", "_").replace("__", "_").replace("__", "-")', '        return
    text.trim.replaceAll("\\s+", "_").replaceAll("_", " ").replaceAll("\\s{2,}", "-")',
  '        return text.replaceAll(" ", "_").replaceAll("_{2,}", "-")', '        text.replaceAll("
    ", "_").replaceAll("_+", "-")', "        val p = text.replace(\"  \", \"-\").replace(\"\
    \ \", \"_\")\n        if (p.length > 0 && p(0) == '_') p.substring(1) else p",
  "        // The following code is in scala syntax\n        // text.replaceAll(\"\
    \ +\", \"_\")\n        // The following code is in java syntax\n        text.replaceAll(\"\
    \ +\", \"_\")", "        // TODO - Add your code here\n        return \"\"", '        return
    ""', "        def process(text : String, result : String, index : Int) : String\
    \ = {\n            if (index == text.length) result\n            else {\n    \
    \            val c = text(index)\n                if (c == ' ') {\n          \
    \          var count = 0\n                    for (i <- index until text.length)\
    \ {\n                        if (text(i) == ' ') count += 1\n                \
    \        else i = text.length\n                    }\n                    if (count\
    \ > 2) process(text, result + \"-\", index + count)\n                    else\
    \ process(text, result + \"_\", index + 1)\n                }\n              \
    \  else process(text, result + c, index + 1)\n            }\n        }\n     \
    \   process(text, \"\", 0)", "        var newText = text.replaceAll(\" \", \"\
    _\")\n        if (newText.contains(\"__\"))\n            newText = newText.replaceAll(\"\
    __\", \"-\")\n        return newText", "        var current = 0\n        var spaces\
    \ = 0\n        var res = new ArrayBuffer[Char]\n        while (current < text.length)\
    \ {\n            if (text(current) == ' ') {\n                spaces += 1\n  \
    \              if (spaces == 2) {\n                    res += '-'\n          \
    \          spaces = 0\n                }\n            } else {\n             \
    \   if (spaces == 1) res += '_'\n                res += text(current)\n      \
    \          spaces = 0\n            }\n            current += 1\n        }\n  \
    \      if (spaces == 1) res += '_'\n        res.mkString", "        val buffer\
    \ = new StringBuilder()\n        var afterSpace = false\n        for (i <- 0 until\
    \ text.length) {\n            val c = text(i)\n            if (c == ' ') {\n \
    \               if (afterSpace) {\n                    if (buffer.charAt(buffer.length\
    \ - 1) == '_') {\n                        buffer.append('-')\n               \
    \     }\n                } else {\n                    buffer.append('_')\n  \
    \                  afterSpace = true\n                }\n            } else {\n\
    \                buffer.append(c)\n                afterSpace = false\n      \
    \      }\n        }\n        buffer.toString", "        val cnt = text.toArray.count(_\
    \ == ' ')\n        var prev = ' '\n        var idx = 0\n        var out = \"\"\
    \n        for (ch <- text) {\n            if (ch == ' ') {\n                if\
    \ (prev == ' ') {\n                    out += '-'\n                } else {\n\
    \                    out += '_'\n                }\n            } else {\n   \
    \             out += ch\n            }\n            prev = ch\n        }\n   \
    \     return out", "        var result = \"\"\n        var spaces = 0\n      \
    \  for (i <- 0 until text.length) {\n            if (text(i) == ' ') {\n     \
    \           spaces += 1\n                if (spaces == 2) result += \"-\"\n  \
    \          } else {\n                if (spaces == 1) result += \"_\"\n      \
    \          result += text(i)\n                spaces = 0\n            }\n    \
    \    }\n        result", "        val sb = new StringBuilder\n        var count\
    \ = 0\n        for (c <- text) {\n            if (c == ' ') {\n              \
    \  count += 1\n                if (count > 2) sb.append('-')\n            } else\
    \ {\n                if (count == 0) sb.append(c)\n                else if (count\
    \ == 1) {\n                    sb.append('_')\n                    sb.append(c)\n\
    \                } else {\n                    sb.append(c)\n                }\n\
    \                count = 0\n            }\n        }\n        sb.toString", " \
    \       val result = for (i <- text) yield {\n            i match {\n        \
    \        case ' ' => '_'\n                case _ => i\n            }\n       \
    \ }\n        result.mkString", "        val len = text.length\n        var prev\
    \ = ' '\n        var buf = new StringBuilder\n        for (i <- 0 until len) {\n\
    \            val c = text(i)\n            if (c == ' ') {\n                if\
    \ (prev == ' ') {\n                    buf.append('-')\n                } else\
    \ {\n                    buf.append('_')\n                }\n            } else\
    \ {\n                buf.append(c)\n            }\n            prev = c\n    \
    \    }\n        return buf.toString", "        var newString = \"\"\n        var\
    \ count = 0\n        for (i <- 0 until text.length) {\n            if (text(i)\
    \ == ' ') {\n                count += 1\n                if (count == 1) {\n \
    \                   newString += \"_\"\n                } else if (count == 2)\
    \ {\n                    newString += \"-\"\n                }\n            }\
    \ else {\n                newString += text(i)\n                count = 0\n  \
    \          }\n        }\n        newString", "    \tif (text.length <= 1) return\
    \ text\n    \telse {\n    \t\tvar str = \"\"\n    \t\tvar i = 0\n    \t\twhile\
    \ (i < text.length - 1) {\n    \t\t\tif (text(i) == ' ') {\n    \t\t\t\tvar count\
    \ = 0\n    \t\t\t\twhile (i < text.length && text(i) == ' ') {\n    \t\t\t\t\t\
    count += 1\n    \t\t\t\t\ti += 1\n    \t\t\t\t}\n    \t\t\t\tif (count == 1) str\
    \ += \"_\"\n    \t\t\t\telse if (count == 2) str += \"_\"\n    \t\t\t\telse str\
    \ += \"-\"\n    \t\t\t}\n    \t\t\telse {\n    \t\t\t\tstr += text(i)\n    \t\t\
    \t\ti += 1\n    \t\t\t}\n    \t\t}\n    \t\tif (i == text.length - 1) str += text(i)\n\
    \    \t\treturn str\n    \t}", "    \tvar sb = new StringBuilder()\n    \tvar\
    \ isSpace = false\n    \tvar isDoubleSpace = false\n    \tfor (c <- text) {\n\
    \    \t\tif (c == ' ') {\n    \t\t\tif (isSpace) {\n    \t\t\t\tisDoubleSpace\
    \ = true\n    \t\t\t}\n    \t\t\tisSpace = true\n    \t\t} else {\n    \t\t\t\
    if (isDoubleSpace) {\n    \t\t\t\tsb.append('-')\n    \t\t\t\tisDoubleSpace =\
    \ false\n    \t\t\t}\n    \t\t\tif (isSpace) {\n    \t\t\t\tsb.append('_')\n \
    \   \t\t\t\tisSpace = false\n    \t\t\t}\n    \t\t\tsb.append(c)\n    \t\t}\n\
    \    \t}\n    \tif (isDoubleSpace) {\n    \t\tsb.append('-')\n    \t}\n    \t\
    if (isSpace) {\n    \t\tsb.append('_')\n    \t}\n    \tsb.toString", '        text.trim().replaceAll("
    ", "_").replaceAll(" {2,}", "-")', "        val result = new StringBuilder\n \
    \       var lastSpace = false\n        var lastLastSpace = false\n        for\
    \ (c <- text) {\n            if (c == ' ') {\n                if (lastSpace &&\
    \ lastLastSpace) result += '-'\n                else result += '_'\n         \
    \       lastLastSpace = lastSpace\n                lastSpace = true\n        \
    \    } else {\n                result += c\n                lastLastSpace = lastSpace\n\
    \                lastSpace = false\n            }\n        }\n        result.toString",
  "        val sb = new StringBuilder\n        text.foreach(e => {\n            if\
    \ (e == ' ') {\n                if (sb.length > 0 && sb.last == ' ') {\n     \
    \               if (sb.length > 1 && sb.lastIndexOf(\"__\") > 0) sb.append('-')\n\
    \                    else sb.append('_')\n                }\n                else\
    \ sb.append('_')\n            }\n            else sb.append(e)\n        })\n \
    \       sb.toString", "        val fixed = text.split(\" \").foldLeft(\"\")((a,\
    \ b) => if (b.size == 0) a + \"-\" else a + (if (a.size == 0) b else \"_\" + b))\n\
    \        if (fixed(0) == '_') fixed.substring(1) else fixed", "        val sb\
    \ = new StringBuilder();\n        var flag = false;\n        for (i <- 0 until\
    \ text.length) {\n            if (text(i) == ' ') {\n                if (flag)\
    \ {\n                    sb.append('-');\n                } else {\n         \
    \           sb.append('_');\n                    flag = true;\n              \
    \  }\n            } else {\n                sb.append(text(i));\n            \
    \    flag = false;\n            }\n        }\n        sb.toString;", "       \
    \ val a = text.replace(\" \", \"_\").replace(\"__\", \"_\")\n        if (a.contains(\"\
    _\")) a.replace(\"_\", \"-\") else a", "        var sb = new StringBuilder\n \
    \       var i = 0\n        var consecutiveSpaces = 0\n        while (i < text.length)\
    \ {\n            if (text(i) == ' ') {\n                consecutiveSpaces += 1\n\
    \                if (consecutiveSpaces == 2) {\n                    sb.append('_')\n\
    \                }\n                else if (consecutiveSpaces > 2) {\n      \
    \              sb.append('-')\n                }\n            }\n            else\
    \ {\n                sb.append(text(i))\n                consecutiveSpaces = 0\n\
    \            }\n            i += 1\n        }\n        sb.toString", "       \
    \ val trimmedText = text.trim\n        val resText = trimmedText.replaceAll(\"\
    \ \", \"_\")\n        if (resText.contains(\"__\")) {\n            resText.replaceAll(\"\
    __\", \"-\")\n        } else {\n            resText\n        }", '        text.trim().replaceAll("\\s+",
    "_").replaceAll("_","-")', "        val s = text.replaceAll(\" \", \"_\")\n  \
    \      val t = s.replaceAll(\"_+\", \"-\")\n        return t", "        val sb\
    \ = new StringBuilder\n        var n = 0\n        text.foreach(c => {\n      \
    \      if (c == ' ') {\n                n += 1\n                if (n == 1) sb.append(\"\
    _\")\n                else if (n > 2) sb.append(\"-\")\n            } else {\n\
    \                n = 0\n                sb.append(c)\n            }\n        })\n\
    \        sb.toString", "        def f(text : String, flag : Boolean) : String\
    \ = {\n            if (text.length == 0) \"\"\n            else if (text.length\
    \ == 1) {\n                if (text.charAt(0) == ' ') {\n                    if\
    \ (flag) \"-\"\n                    else \"_\"\n                }\n          \
    \      else text\n            }\n            else {\n                if (text.charAt(0)\
    \ == ' ') {\n                    if (text.charAt(1) == ' ') {\n              \
    \          if (flag) \"-\"\n                        else \"--\"\n            \
    \        }\n                    else {\n                        if (flag) \"-\"\
    \n                        else \"_\"\n                    }\n                }\n\
    \                else text.charAt(0).toString\n            } + f(text.substring(1),\
    \ (text.charAt(0) == ' '))\n        }\n        f(text, false)", "        var s\
    \ = text.trim\n        var ans = s.replace(\" \", \"_\")\n        ans = ans.replaceAll(\"\
    _+\", \"_\")\n        ans = ans.replaceAll(\"(_)(_)\", \"-$2\")\n        return\
    \ ans", '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', "       \
    \ if (text.isEmpty) \"\"\n        else {\n            val sb = new StringBuilder\n\
    \            var i = 0\n            var n = 0\n            while (i < text.length)\
    \ {\n                if (text(i) == ' ') {\n                    n += 1\n     \
    \               if (n == 2) sb.append('_')\n                    else if (n > 2)\
    \ sb.append('-')\n                } else {\n                    n = 0\n      \
    \              sb.append(text(i))\n                }\n                i += 1\n\
    \            }\n            sb.toString\n        }", "        var result = text.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"__+\", \"_\")\n        result\
    \ = result.replaceAll(\" _\", \"_\")\n        result = result.replaceAll(\"_ \"\
    , \"_\")\n        result = result.replaceAll(\"_\", \"-\")\n        return result",
  "        val regex = \" {2,}\".r\n        return regex.replaceAllIn(text, \" - \"\
    ).replace(\" \", \"_\")", "        // 1. null check\n        // 2. if null return\
    \ null\n        // 3. if empty return empty\n        // 4. if size = 1 return\
    \ it\n        // 5. check if the first char is a space\n        // 6. replace\
    \ space with _\n        // 7. replace -- with -\n        if (text == null) {\n\
    \            return null\n        }\n        if (text.size == 0) {\n         \
    \   return \"\"\n        }\n        if (text.size == 1) {\n            return\
    \ text\n        }\n        var text2 = if (text(0) == ' ') {\n            text.replace('\
    \ ', '_')\n        } else {\n            text\n        }\n        text2 = text2.replace(\"\
    --\", \"-\")\n        text2", "        var str = text.trim()\n        while (str.contains(\"\
    \  \")) {\n            str = str.replace(\"  \", \"-\")\n        }\n        str\
    \ = str.replace(\" \", \"_\")\n        return str", '        text.split(" ").toList.filter(x
    => x != "").mkString("_")', "        var result = text.replaceAll(\" {2,}\", \"\
    -\")\n        result = result.replaceAll(\" \", \"_\")\n        return result",
  "        val regex = \"  +\".r\n        val r = regex.replaceAllIn(text, \" \")\n\
    \        r.replace(\" \", \"_\").replace(\" \", \"-\")", "        val spaceRegex\
    \ = \" \".r\n        var result = text\n        result = spaceRegex.replaceAllIn(result,\
    \ \"_\")\n        val consecutiveSpaceRegex = \"__\".r\n        result = consecutiveSpaceRegex.replaceAllIn(result,\
    \ \"-\")\n        return result", '        ""', "        // 1) split the text\
    \ into words\n        // 2) for each word, if it contains spaces, then fix spaces\
    \ in it\n        val words = text.split(\"\\\\s+\")\n        val res = new StringBuilder\n\
    \        for (word <- words) {\n            res.append(fixSpacesInWord(word))\n\
    \            res.append(\" \")\n        }\n        return res.toString.trim",
  "        var result = \"\";\n        var count = 0;\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                count += 1;\n        \
    \        if (count == 1) result += \"_\";\n                else if (count == 2)\
    \ result += \"_\";\n                else if (count == 3) {\n                 \
    \   result += \"-\";\n                    count = 0;\n                }\n    \
    \        }\n            else {\n                result += text(i);\n         \
    \       count = 0;\n            }\n        }\n        return result;", "     \
    \   val textBuffer = new StringBuffer(text)\n        val length = textBuffer.length\n\
    \        var count = 0\n        for (i <- 0 until length) {\n            if (textBuffer(i)\
    \ == ' ') {\n                count += 1\n                if (count == 1) {\n \
    \                   textBuffer.setCharAt(i, '_')\n                } else if (count\
    \ > 2) {\n                    textBuffer.setCharAt(i, '-')\n                }\n\
    \            } else {\n                count = 0\n            }\n        }\n \
    \       return textBuffer.toString", "        val underscore : Char = '_'\n  \
    \      val hyphen : Char = '-'\n        val space : Char = ' '\n        var result\
    \ : ListBuffer[Char] = new ListBuffer[Char]\n        var spacesCounter : Int =\
    \ 0\n        for (c <- text) {\n            if (c == space) {\n              \
    \  spacesCounter += 1\n                if (spacesCounter == 1) result += underscore\n\
    \                else if (spacesCounter == 2) result += hyphen\n            }\n\
    \            else {\n                spacesCounter = 0\n                result\
    \ += c\n            }\n        }\n        result.mkString", '        text.replaceAll("
    ", "_").replaceAll("_+", "-")', '        ???', '        return text.trim.replace("
    ", "_").replaceAll(" {2,}", "-")', "        // Edge case\n        if (text.length\
    \ == 0) return text\n        // Count number of consecutive spaces\n        var\
    \ space = 0\n        var result = \"\"\n        for (c <- text) {\n          \
    \  // If current character is space, increment space count\n            if (c\
    \ == ' ') space += 1\n            // If current character is not space\n     \
    \       else {\n                // If there is no consecutive space, append current\
    \ character\n                if (space == 0) result += c\n                // If\
    \ there is one consecutive space, append underscore\n                else if (space\
    \ == 1) {\n                    result += '_'\n                    result += c\n\
    \                }\n                // If there are more than one consecutive\
    \ spaces, \n                // append hyphen and then append current character\n\
    \                else {\n                    result += '-'\n                 \
    \   result += c\n                }\n                // Reset space count\n   \
    \             space = 0\n            }\n        }\n        // Return result\n\
    \        result", '        return text.replaceAll(" ", "_").replaceAll("\\_+",
    "_").replaceAll("\\_+", "-");', '        text.split(" ").reduce(_ + "-" + _)',
  "        def inner(ss : Seq[Char], buf : StringBuilder) : String = {\n         \
    \   if (ss.isEmpty) buf.toString\n            else {\n                val head\
    \ = ss.head\n                if (head == ' ') {\n                    val next\
    \ = buf.lastOption.getOrElse(' ')\n                    if (next == ' ') inner(ss.tail,\
    \ buf.append('-'))\n                    else inner(ss.tail, buf.append('_'))\n\
    \                }\n                else inner(ss.tail, buf.append(head))\n  \
    \          }\n        }\n        inner(text, new StringBuilder())", '        return
    text.replaceAll(" +", " ").replaceAll(" ", "_").replaceAll(" ", "-").replaceAll("--",
    "-")', "        // The concept is to count the number of spaces in the string\n\
    \        // If the number of spaces is more than 2, then replace with '-'\n  \
    \      // Else replace with '_'\n        val sb = new StringBuilder(text)\n  \
    \      var i = 0\n        var spaceCount = 0\n        while (i < sb.length) {\n\
    \            if (sb(i) == ' ') {\n                spaceCount += 1\n          \
    \      if (spaceCount > 2) {\n                    sb.update(i, '-')\n        \
    \        } else {\n                    sb.update(i, '_')\n                }\n\
    \            } else {\n                spaceCount = 0\n            }\n       \
    \     i += 1\n        }\n        sb.toString", "        var result = text\n  \
    \      result = result.replaceAll(\"\\\\s+\", \"_\")\n        result = result.replaceAll(\"\
    \ \", \"-\")\n        result", '        text.replaceAll(" ", "_").replaceAll("__",
    "_").replaceAll("__", "-")', '        text.replace(" ","_").replace("__","_").replace("__","-")',
  '        return text.split(" {2,}").map(x => x.trim()).mkString("-").replace(" ",
    "_")', '        text.replace("  ", "-").replace(" ", "_")', "        text.split(\"\
    \\\\s+\")\n            .map(s => if (s.length > 2) {\n                s.split(\"\
    \").map(c => if (c == \" \") \"-\" else c).mkString(\"\")\n            } else\
    \ {\n                s\n            }).mkString(\" \")", '        text.replaceAll("
    +", " ").replaceAll(" ", "_").replaceAll("_+", "-")', '        text.replace("
    ", "_").replace("__", "-")', "        if (text.length == 0) return text\n    \
    \    var result = text\n        var has_space = false\n        var prev_space\
    \ = false\n        while (result.length > 0 && result(0) == ' ') {\n         \
    \   result = result.tail\n            has_space = true\n        }\n        var\
    \ i = 0\n        while (i < result.length) {\n            if (result(i) == ' ')\
    \ {\n                result = result.take(i) + \"_\" + result.drop(i + 1)\n  \
    \              if (prev_space) {\n                    result = result.take(i)\
    \ + \"-\" + result.drop(i + 1)\n                }\n                prev_space\
    \ = true\n            } else {\n                prev_space = false\n         \
    \   }\n            i += 1\n        }\n        if (has_space) result = \"_\" +\
    \ result\n        result", "        // YOUR CODE HERE\n        return text;",
  "        // Write your code here\n        \"\"", "        // Two Solutions\n   \
    \     // 1. Use replaceAll or replaceAllLiterally\n        // 2. Use regex\n \
    \       // 2.1. Iterate through the string text\n        // 2.2. Iterate through\
    \ the characters, if a character matches a space, add it to stringbuilder\n  \
    \      // 2.3. If the stringbuilder already contains the current character that\
    \ you are iterating over,\n        //      then if the character is a space, continue\
    \ to iterate to see if there are more than 2 spaces\n        //      else add\
    \ the character to the stringbuilder\n        // 2.4. If the character is the\
    \ first character of the string text, add it to the stringbuilder\n        //\
    \ 2.5. If the character is not a space, add it to the stringbuilder\n        val\
    \ stringBuilder = new StringBuilder\n        var spaces = false\n        text.foreach(x\
    \ => {\n            if (stringBuilder.toString.contains(x.toString)) {\n     \
    \           if (x == ' ') {\n                    if (spaces) {\n             \
    \           stringBuilder.append('-')\n                        spaces = false\n\
    \                    }\n                    else spaces = true\n             \
    \   }\n                else {\n                    stringBuilder.append(x)\n \
    \                   spaces = false\n                }\n            }\n       \
    \     else {\n                if (x == ' ') {\n                    stringBuilder.append('_')\n\
    \                    spaces = false\n                }\n                else {\n\
    \                    stringBuilder.append(x)\n                    spaces = false\n\
    \                }\n            }\n        })\n        stringBuilder.toString",
  "        val lst = text.split(\" \").toList\n        var s = \"\"\n        for (e\
    \ <- lst) {\n            if (e != \"\") {\n                s += \"_\" + e\n  \
    \          }\n        }\n        if (s.length > 1) s = s.substring(1)\n      \
    \  return s", "        var result = \"\"\n        var previous = ' '\n       \
    \ for (i <- 0 until text.length) {\n            val c = text(i)\n            if\
    \ (c == ' ') {\n                if (result.length == 0) result += '_'\n      \
    \          else if (previous == ' ') result += '-'\n                else result\
    \ += '_'\n            }\n            else result += c\n            previous =\
    \ c\n        }\n        result", "        var res = text\n        if (text.contains(\"\
    \ \")) {\n            var spaceI = text.indexOf(\" \")\n            res = res.slice(0,\
    \ spaceI) + \"_\" + res.slice(spaceI + 1, res.length)\n            res = fixSpaces(res)\n\
    \        }\n        res", "        var result = text.replaceAll(\"\\\\s\", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result", "  \
    \      var s = \"\"\n        var spaceCount = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                spaceCount += 1\n    \
    \            if (spaceCount == 2) s += \"_\"\n                else if (spaceCount\
    \ > 2) s += \"-\"\n            } else {\n                spaceCount = 0\n    \
    \            s += text(i)\n            }\n        }\n        s", "        if (text.length\
    \ == 0) return \"\"\n        var cnt = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') cnt += 1\n            else cnt = 0\n    \
    \        if (cnt == 3) return text.substring(0, i) + fixSpaces(text.substring(i,\
    \ text.length).replaceAll(\" \", \"-\"))\n        }\n        return text.replaceAll(\"\
    \ \", \"_\")", '      text.split(" ").map(word => word.replaceAll(" ", "_")).mkString("
    ")', "        // text.trim.replaceAll(\" +\", \"_\").replaceAll(\"_+\", \"-\"\
    )\n        // text.trim.replaceAll(\" +\", \"-\")\n        text.trim.replaceAll(\"\
    \ +\", \"|\").replaceAll(\"\\\\|+\", \"-\")", "        var ret = text.replaceAll(\"\
    \ \", \"_\")\n        ret = ret.replaceAll(\"__\", \"_\")\n        ret = ret.replaceAll(\"\
    \ \", \"-\")\n        return ret", '        return ""', "        var s = text\n\
    \        for (i <- 0 until s.length) {\n            if (s(i) == ' ') {\n     \
    \           s = s.replaceFirst(\" \", \"_\")\n                var j = i + 1\n\
    \                while (j < s.length && s(j) == ' ') {\n                    s\
    \ = s.replaceFirst(\" \", \"-\")\n                    j += 1\n               \
    \ }\n            }\n        }\n        s", "        text.toList.foldLeft((new\
    \ StringBuilder(), false)) {(t, x) =>\n            val (sb, flag) = t\n      \
    \      if (x == ' ') {\n                if (flag) {\n                    (sb,\
    \ true)\n                } else {\n                    (sb.append('_'), true)\n\
    \                }\n            } else {\n                if (flag) {\n      \
    \              (sb.append('-'), false)\n                } else {\n           \
    \         (sb.append(x), false)\n                }\n            }\n        }._1.toString",
  "        if (text.length == 0) return \"\"\n        if (text.length == 1) return\
    \ text\n        if (text.length == 2) return text.replaceAll(\" \", \"_\")\n \
    \       var ret = \"\"\n        var cur = 0\n        var last = 0\n        var\
    \ cnt = 0\n        var buffer = new StringBuilder\n        while (cur < text.length)\
    \ {\n            if (text(cur) == ' ') {\n                buffer.append(text.substring(last,\
    \ cur))\n                buffer.append(\"_\")\n                cur += 1\n    \
    \            last = cur\n                cnt = 0\n            } else {\n     \
    \           if (text(cur) == ' ' && text(cur + 1) == ' ') {\n                \
    \    if (cnt == 0) {\n                        buffer.append(text.substring(last,\
    \ cur))\n                        buffer.append(\"_\")\n                      \
    \  last = cur\n                    } else if (cnt == 1) {\n                  \
    \      buffer.append(text.substring(last, cur))\n                        buffer.append(\"\
    -\")\n                        last = cur\n                    }\n            \
    \        cnt += 1\n                } else {\n                    if (cnt > 0)\
    \ {\n                        buffer.append(text.substring(last, cur))\n      \
    \                  buffer.append(\"_\")\n                        last = cur\n\
    \                        cnt = 0\n                    }\n                }\n \
    \               cur += 1\n            }\n        }\n        if (last != cur) buffer.append(text.substring(last,\
    \ cur))\n        return buffer.toString", "        val newText = text.replaceAll(\"\
    \ +\", \" \")\n        return newText.replaceAll(\" \", \"_\").replaceAll(\" +\"\
    , \"-\")", "        // First replace all spaces with underscores\n        var\
    \ newText = text.replaceAll(\" \", \"_\")\n        // Replace all the consecutive\
    \ underscores with -\n        newText = newText.replaceAll(\"_{2,}\", \"-\")\n\
    \        newText", "        def loop(current : Int, accum : String) : String =\
    \ {\n            if (current >= text.length) accum\n            else {\n     \
    \           val next = current + 1\n                if (text(current) == ' ')\
    \ {\n                    val leading = if (next < text.length && text(next) ==\
    \ ' ') \"-\" else \"_\"\n                    loop(next, accum + leading)\n   \
    \             }\n                else loop(next, accum + text(current))\n    \
    \        }\n        }\n        loop(0, \"\")", "        val s = text.replaceAll(\"\
    \\\\s+\", \"_\")\n        if (s.length < 3) s\n        else if (s.length == 3)\
    \ s(0) + \"-\" + s(2)\n        else s(0) + s.substring(1).replaceAll(\"_\", \"\
    -\")", "        var result = text.replace(\" \", \"_\")\n        result = result.replace(\"\
    _ _\", \"__\")\n        result = result.replace(\"_ _\", \"__\")\n        result\
    \ = result.replace(\"__\", \"_ _\")\n        result = result.replace(\"_ _\",\
    \ \"-\")\n        return result", "        val n = text.length\n        val result\
    \ = new StringBuilder\n        var prev = ' '\n        for (i <- 0 until n) {\n\
    \            val c = text(i)\n            if (c == ' ') {\n                if\
    \ (prev == ' ') {\n                    result.append('-')\n                } else\
    \ {\n                    result.append('_')\n                }\n            }\
    \ else {\n                result.append(c)\n            }\n            prev =\
    \ c\n        }\n        result.toString", "        // TODO: Implement Me\n   \
    \     \"\"", '        text.replaceAll(" ", "_").replaceAll("_+", "_").replaceAll("_$",
    "")', "      var result = text.trim.split(\"\\\\s+\").mkString(\"_\")\n      result\
    \ = result.replaceAll(\"__\", \"_\")\n      result = result.replaceAll(\"_\",\
    \ \" \")\n      result = result.replaceAll(\"  \", \"-\")\n      result = result.replaceAll(\"\
    \ \", \"_\")\n      return result", "        val sb = new StringBuilder\n    \
    \    for (i <- 0 until text.length) {\n            val c = text(i)\n         \
    \   if (c == ' ') {\n                if (i == 0 || text(i - 1) == ' ') sb.append('_')\n\
    \                else sb.append('-')\n            }\n            else sb.append(c)\n\
    \        }\n        sb.toString", '        text.replaceAll("\\s", "_").replaceAll("__+",
    "-")', '        text.replace(" ", "_").replace("__", "-")', "    \ttext.replace(\"\
    \ \", \"_\").replace(\"__\", \"_\").replace(\"___\", \"-\")", "        def helper(text\
    \ : String, temp : String) : String = {\n            if (text.isEmpty) temp\n\
    \            else if (text.head == ' ') {\n                if (temp.last == '\
    \ ') helper(text.tail, temp.dropRight(1) + '-')\n                else helper(text.tail,\
    \ temp + '_')\n            }\n            else helper(text.tail, temp + text.head)\n\
    \        }\n        helper(text, \"\")", '        text.replace(" ", "_").replace("__",
    "-")', "        if (text.size == 0) text\n        else {\n            var res\
    \ = text\n            var hasSpace = false\n            var count = 0\n      \
    \      for (i <- 0 until text.size) {\n                if (text(i) == ' ') {\n\
    \                    hasSpace = true\n                    count += 1\n       \
    \         }\n                else {\n                    if (hasSpace) {\n   \
    \                     if (count == 1) res = res.replace(\" \", \"_\")\n      \
    \                  else if (count == 2) res = res.replace(\"  \", \"_\")\n   \
    \                     else res = res.replace(\" \", \"-\")\n                 \
    \       hasSpace = false\n                        count = 0\n                \
    \    }\n                }\n            }\n            if (hasSpace) {\n      \
    \          if (count == 1) res = res.replace(\" \", \"_\")\n                else\
    \ if (count == 2) res = res.replace(\"  \", \"_\")\n                else res =\
    \ res.replace(\" \", \"-\")\n            }\n            res\n        }", "   \
    \     val output = new StringBuilder\n        var isFirstSpace = true\n      \
    \  for (i <- 0 until text.length) {\n            if (text(i) == ' ') {\n     \
    \           if (isFirstSpace) {\n                    output.append('_')\n    \
    \                isFirstSpace = false\n                } else {\n            \
    \        if (output(output.length - 1) == '_') output.append('-')\n          \
    \      }\n            } else {\n                output.append(text(i))\n     \
    \           isFirstSpace = true\n            }\n        }\n        return output.toString",
  "        if (text.length == 0) {\n            return \"\"\n        }\n        var\
    \ cnt = 0\n        var nxt = false\n        var cur = text(0)\n        var ans\
    \ = new StringBuilder\n        for (i <- 0 until text.length) {\n            if\
    \ (text(i) == ' ') {\n                cnt += 1\n                if (cnt >= 2)\
    \ {\n                    if (nxt) {\n                        ans += \"-\"\n  \
    \                  } else {\n                        ans += \"_\"\n          \
    \              nxt = true\n                    }\n                }\n        \
    \    } else {\n                cnt = 0\n                nxt = false\n        \
    \        ans += text(i)\n            }\n        }\n        return ans.toString",
  "        val arr = text.toCharArray\n        var lastSpace = false\n        var\
    \ spaces = 0\n        for (i <- 0 until arr.length) {\n            val c = arr(i)\n\
    \            if (c == ' ') {\n                spaces += 1\n                lastSpace\
    \ = true\n            } else {\n                if (lastSpace) {\n           \
    \         lastSpace = false\n                    if (spaces > 2) {\n         \
    \               arr(i - spaces) = '-'\n                        arr(i - spaces\
    \ + 1) = c\n                        for (j <- i - spaces + 2 until i) {\n    \
    \                        arr(j) = '\\0'\n                        }\n         \
    \           } else {\n                        arr(i - spaces) = '_'\n        \
    \                arr(i - spaces + 1) = c\n                        for (j <- i\
    \ - spaces + 2 until i) {\n                            arr(j) = '\\0'\n      \
    \                  }\n                    }\n                }\n             \
    \   spaces = 0\n            }\n        }\n        if (lastSpace) {\n         \
    \   if (spaces > 2) {\n                arr(arr.length - spaces) = '-'\n      \
    \          for (j <- arr.length - spaces + 1 until arr.length) {\n           \
    \         arr(j) = '\\0'\n                }\n            } else {\n          \
    \      arr(arr.length - spaces) = '_'\n                for (j <- arr.length -\
    \ spaces + 1 until arr.length) {\n                    arr(j) = '\\0'\n       \
    \         }\n            }\n        }\n        arr.filterNot(_ == '\\0').mkString"]
stop_tokens:
- "\n    }\n"
