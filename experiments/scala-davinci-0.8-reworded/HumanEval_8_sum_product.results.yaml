language: scala
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        return (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val (sum, product) = numbers.foldLeft((0l,\
    \ 1l))((a, e) => (a._1 + e, a._2 * e))\n        (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0l\n        var product :\
    \ Long = 1l\n        for (number <- numbers) {\n            sum += number\n  \
    \          product *= number\n        }\n        return (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var total = 0l\n        var product = 1l\n\
    \        for (number <- numbers) {\n            total += number\n            product\
    \ *= number\n        }\n        (total, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((s, n) => (s._1\
    \ + n, s._2 * n))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        return (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((a, i) => (a._1\
    \ + i, a._2 * i))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      // Fill up this function body\n      // You\
    \ can add another function as well, if required\n      if (numbers.length == 0)\
    \ return (0, 1)\n      var a = 0L\n      var b = 1L\n      for (i <- numbers)\
    \ {\n        a += i\n        b *= i\n      }\n      (a, b)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.sumProduct(tmpvb5_tif7.scala:11)\n\tat Problem$.main(tmpvb5_tif7.scala:14)\n\
    \tat Problem.main(tmpvb5_tif7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        Tuple2(numbers.sum, numbers.product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((sumProduct, number)\
    \ => (sumProduct._1 + number, sumProduct._2 * number))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return (numbers.sum, numbers.product)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0L\n        var product = 1L\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.length == 0)\n            (0l,\
    \ 1l)\n        else\n            (numbers.sum, numbers.product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (sum(numbers), product(numbers))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmli1onh0.scala:11:9 -------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        (sum(numbers), product(numbers))\n\e[31m\e[31m\
    \   |\e[0m         ^^^\e[0m\n\e[31m   |\e[0m         Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmli1onh0.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        (sum(numbers), product(numbers))\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: product\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) (0, 1)\n        else\
    \ (numbers.sum, numbers.product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      // Fill up this function body\n      // You\
    \ can add another function as well, if required\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps8alt7w0.scala:10:64\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m    \e[33mdef\e[0m \e[36msumProduct\e\
    [0m(\e[36mnumbers\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mTuple2\e[0m[\e\
    [35mLong\e[0m, \e[35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                   \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                          Found:    Unit\n\e[31m   |\e[0m   \
    \                                               Required: (Long, Long)\n\e[31m11\
    \ |\e[0m      \e[34m// Fill up this function body\e[0m\n\e[31m12 |\e[0m      \e\
    [34m// You can add another function as well, if required\e[0m\n\e[31m13 |\e[0m\
    \    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val x = numbers.foldLeft((0l, 1l))((sumProd,\
    \ number) => (sumProd._1 + number, sumProd._2 * number))\n        return x\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val res = numbers.foldLeft((0l, 1l))((a, b)\
    \ => (a._1 + b, a._2 * b))\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (i <- numbers) {\n            sum += i\n            product *= i\n\
    \        }\n        Tuple2(sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n    \tif (numbers.isEmpty) (0, 1)\n    \telse (numbers.sum,\
    \ numbers.product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((acc, n) => (acc._1\
    \ + n, acc._2 * n))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       numbers.foreach(x => {\n            sum += x\n            product *= x\n\
    \        })\n        Tuple2(sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        return (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      var sum = 0l\n      var product = 1l\n     \
    \ for (i <- numbers) {\n        sum += i\n        product *= i\n      }\n    \
    \  return (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0L, 1L))((a, b) => (a._1\
    \ + b, a._2 * b))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      numbers.foldLeft((0l, 1l)) {\n        case ((s,\
    \ p), n) => (s + n, p * n)\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return (numbers.foldLeft(0l)(_ + _), numbers.foldLeft(1l)(_\
    \ * _))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Implement this function\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprooy3idy.scala:10:64\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m    \e[33mdef\e[0m \e[36msumProduct\e\
    [0m(\e[36mnumbers\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mTuple2\e[0m[\e\
    [35mLong\e[0m, \e[35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                   \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                          Found:    Unit\n\e[31m   |\e[0m   \
    \                                               Required: (Long, Long)\n\e[31m11\
    \ |\e[0m        \e[34m// Implement this function\e[0m\n\e[31m12 |\e[0m    }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var s : Long = 0\n        var p : Long = 1\n\
    \        for (i <- numbers) {\n            s += i\n            p *= i\n      \
    \  }\n        (s, p)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((x, y) => (x._1\
    \ + y, x._2 * y))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (n <- numbers) {\n            sum += n\n            product\
    \ *= n\n        }\n        return (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // (Sum, Product)\n        return ((0l, 1l))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppp_ii13r.scala:16)\n\tat Problem.main(tmppp_ii13r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var product : Long = 1\n        var sum :\
    \ Long = 0\n        for (num <- numbers) {\n            product *= num\n     \
    \       sum += num\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        Tuple2(numbers.sum, numbers.product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (n <- numbers) {\n            sum += n\n            product\
    \ *= n\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val zero : Tuple2[Long, Long] = (0l, 1l)\n\
    \        def mySumProduct(numbers : List[Long], acc : Tuple2[Long, Long]) : Tuple2[Long,\
    \ Long] = {\n            numbers match {\n                case List() => acc\n\
    \                case x :: rest => mySumProduct(rest, (acc._1 + x, acc._2 * x))\n\
    \            }\n        }\n        mySumProduct(numbers, zero)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Implement your code here...\n        var\
    \ sum = 0l\n        var prod = 1l\n        for (number <- numbers) {\n       \
    \     sum += number\n            prod *= number\n        }\n        (sum, prod)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n  \
    \      val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) {\n            return\
    \ (0, 1)\n        }\n        (numbers.sum, numbers.product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val s = numbers.foldLeft(0l)(_ + _)\n    \
    \    val p = numbers.foldLeft(1l)(_ * _)\n        (s, p)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val s = numbers.foldLeft(0l)(_ + _)\n    \
    \    val p = numbers.foldLeft(1l)(_ * _)\n        (s, p)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6s3_01ks.scala:10:64\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m    \e[33mdef\e[0m \e[36msumProduct\e\
    [0m(\e[36mnumbers\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mTuple2\e[0m[\e\
    [35mLong\e[0m, \e[35mLong\e[0m] = {\n\e[31m\e[31m   |\e[0m                   \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                          Found:    Unit\n\e[31m   |\e[0m   \
    \                                               Required: (Long, Long)\n\e[31m11\
    \ |\e[0m        \e[34m// Fill up this function body\e[0m\n\e[31m12 |\e[0m    \
    \    \e[34m// You can add another function as well, if required\e[0m\n\e[31m13\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) {\n            return\
    \ ((0l, 1l))\n        }\n        var sum : Long = 0l\n        var product : Long\
    \ = 1l\n        for (number <- numbers) {\n            sum += number\n       \
    \     product *= number\n        }\n        return ((sum, product))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft(Tuple2(0l, 1l))((acc, i)\
    \ => (acc._1 + i, acc._2 * i))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((t : Tuple2[Long,\
    \ Long], a : Long) => (t._1 + a, t._2 * a))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty)\n            (0, 1)\n\
    \        else {\n            val tail_product = numbers.tail.foldLeft(1l)((current,\
    \ next) => current * next)\n            val tail_sum = numbers.tail.foldLeft(0l)((current,\
    \ next) => current + next)\n            (tail_sum + numbers.head, tail_product\
    \ * numbers.head)\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      // Fill up this function body\n      // You\
    \ can add another function as well, if required\n      var sum = 0l\n      var\
    \ product = 1l\n      for (number <- numbers) {\n        sum += number\n     \
    \   product *= number\n      }\n      (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((acc, x) => (acc._1\
    \ + x, acc._2 * x))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var list = numbers.sortWith(_ < _)\n     \
    \   var sum = 0l\n        var product = 1l\n        list.foreach(l => {\n    \
    \        sum += l\n            product *= l\n        })\n        return (sum,\
    \ product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l) ((acc, x) =>\
    \ acc + x)\n        val product = numbers.foldLeft(1l) ((acc, x) => acc * x)\n\
    \        return (sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      numbers.foldLeft((0l, 1l))((tup, number) =>\
    \ (tup._1 + number, tup._2 * number))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) return (0, 1)\n     \
    \   val product = numbers.reduceLeft((x, y) => x * y)\n        val sum = numbers.reduceLeft((x,\
    \ y) => x + y)\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0L)(_ + _)\n  \
    \      val product = numbers.foldLeft(1L)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        def sumProductAcc(acc : (Long, Long), n :\
    \ Long) : (Long, Long) = {\n            ((acc._1 + n), (acc._2 * n))\n       \
    \ }\n        numbers.foldLeft((0l, 1l))(sumProductAcc)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      return (numbers.sum, numbers.product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val m = numbers.foldLeft((0l, 1l))((x, y)\
    \ => (x._1 + y, x._2 * y))\n        m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((x, y) => (x._1\
    \ + y, x._2 * y))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // WRITE CODE HERE\n        (0, 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_z4vch9w.scala:16)\n\tat Problem.main(tmp_z4vch9w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (i <- numbers) {\n            sum += i\n            product *= i\n\
    \        }\n        return (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        def f(n : Long, tuple : Tuple2[Long, Long])\
    \ : Tuple2[Long, Long] = Tuple2(tuple._1 + n, tuple._2 * n)\n        val result\
    \ = numbers.foldLeft(Tuple2(0l, 1l))(f)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeqao3ekt.scala:12:54\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = numbers.foldLeft(Tuple2(\e[31m0l\e[0m, \e[31m1l\e[0m))(f)\n\e[31m\e[31m\
    \   |\e[0m                                                      ^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    (Long, \e[1m\e[31m(\e[0m\e[1m\e\
    [31mLong\e[0m, Long)\e[1m\e[31m)\e[0m => (Long, Long)\n\e[31m   |\e[0m       \
    \                   Required: (\e[1m\e[32m(\e[0mLong, Long\e[1m\e[32m)\e[0m, Long)\
    \ => (Long, Long)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var s = 0l\n        var p = 1l\n        numbers.foreach(s\
    \ += _)\n        numbers.foreach(p *= _)\n        Tuple2(s, p)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) {\n            (0l, 1l)\n\
    \        } else {\n            (numbers.sum, numbers.product)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      var a = 0l\n      var b = 1l\n      for (x <-\
    \ numbers) {\n        a += x\n        b *= x\n      }\n      return ((a, b))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val s = numbers.sum\n        val p = numbers.product\n\
    \        (s, p)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val s = numbers.sum\n        val p = numbers.product\n\
    \        (s, p)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       numbers.foreach(number => {\n            sum += number\n            product\
    \ *= number\n        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n    \tval s = numbers.foldLeft(0l)(_ + _)\n    \t\
    val p = numbers.foldLeft(1l)(_ * _)\n    \t(s, p)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, if (numbers.length == 0) 1 else\
    \ numbers.reduce((x, y) => x * y))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n    \t(numbers.sum, numbers.product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        def add(x : Long, y : Long) = x + y\n    \
    \    def mul(x : Long, y : Long) = x * y\n        (numbers.foldLeft(0l)(add),\
    \ numbers.foldLeft(1l)(mul))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) return (0, 1)\n     \
    \   else return (numbers.sum, numbers.product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return (numbers.sum, numbers.product)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) return ((0l, 1l))\n \
    \       var sum = 0l\n        var product = 1l\n        for (number <- numbers)\
    \ {\n            sum += number\n            product *= number\n        }\n   \
    \     return ((sum, product))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((x, y) => (x._1\
    \ + y, x._2 * y))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       numbers.foreach(x => {\n            sum += x\n            product *= x\n\
    \        })\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return Tuple2(numbers.sum, numbers.product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var result : Tuple2[Long, Long] = (0l, 1l)\n\
    \        for (n <- numbers) {\n            result = (result._1 + n, result._2\
    \ * n)\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val zero = (0l, 1l)\n        numbers.foldLeft(zero)\
    \ {(t, e) => (t._1 + e, t._2 * e)}\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = if (numbers.length == 0) 0 else\
    \ numbers.reduceLeft(_ + _)\n        val product = if (numbers.length == 0) 1\
    \ else numbers.reduceLeft(_ * _)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        return (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Your code goes here.\n        var sum :\
    \ Long = 0\n        var product : Long = 1\n        for (number <- numbers) {\n\
    \            sum += number\n            product *= number\n        }\n       \
    \ Tuple2(sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val s = numbers.sum\n        val p = numbers.product\n\
    \        (s, p)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // TODO: implement me\n        null\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.sumProduct(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmpcag2yhjh.scala:15)\n\tat Problem.main(tmpcag2yhjh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val zero = Tuple2(0, 1)\n        numbers.foldLeft(zero)((x,\
    \ y) => Tuple2(x._1 + y, x._2 * y))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkhd2r8uv.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        numbers.foldLeft(zero)((\e\
    [36mx\e[0m, \e[36my\e[0m) => Tuple2(x._1 + y, x._2 * y))\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                Found:    Long\n\e[31m   |\e\
    [0m                                                Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkhd2r8uv.scala:12:58 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numbers.foldLeft(zero)((\e[36mx\e[0m, \e[36my\e\
    [0m) => Tuple2(x._1 + y, x._2 * y))\n\e[31m\e[31m   |\e[0m                   \
    \                                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                                   Found:    Long\n\e[31m   |\e\
    [0m                                                          Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      var sum = 0l\n      var product = 1l\n     \
    \ numbers.foreach(n => {sum += n; product *= n})\n      (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var prod = 1l\n    \
    \    numbers.foreach(n => {\n            sum += n\n            prod *= n\n   \
    \     })\n        return (sum, prod)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var totalSum = 0l\n        var totalProduct\
    \ = 1l\n        for (number <- numbers) {\n            totalSum += number\n  \
    \          totalProduct *= number\n        }\n        return (totalSum, totalProduct)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) return (0, 1)\n     \
    \   var sum = 0l\n        var product = 1l\n        for (number <- numbers) {\n\
    \            sum += number\n            product *= number\n        }\n       \
    \ (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var s : Long = 0\n        var p : Long = 1\n\
    \        for (n <- numbers) {\n            s += n\n            p *= n\n      \
    \  }\n        return (s, p)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val acc = new Tuple2[Long, Long](0l, 1l)\n\
    \        numbers.foldLeft(acc)((acc, num) => (acc._1 + num, acc._2 * num))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.foldLeft(0l){_ + _}, numbers.foldLeft(1l){_\
    \ * _})\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // replace this code with your own one\n \
    \       (numbers.sum, numbers.product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (i <- numbers) {\n            sum += i\n            product *= i\n\
    \        }\n        Tuple2(sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val (sum, prod) = numbers.foldLeft(0L, 1L)((acc,\
    \ item) => (acc._1 + item, acc._2 * item))\n        (sum, prod)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum: Long = 0\n        var product: Long\
    \ = 1\n        for (number <- numbers) {\n            sum += number\n        \
    \    product *= number\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        return (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return (numbers.sum, numbers.product)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        def product(acc : Long, numbers : List[Long])\
    \ : Long = {\n            if (numbers.isEmpty) acc\n            else product(acc\
    \ * numbers.head, numbers.tail)\n        }\n        def sum(acc : Long, numbers\
    \ : List[Long]) : Long = {\n            if (numbers.isEmpty) acc\n           \
    \ else sum(acc + numbers.head, numbers.tail)\n        }\n        (sum(0, numbers),\
    \ product(1, numbers))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val (sum, prod) = numbers.foldLeft((0l, 1l))((acc,\
    \ n) => (acc._1 + n, acc._2 * n))\n        (sum, prod)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (i <- numbers) {\n            sum += i\n            product\
    \ *= i\n        }\n        return (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n    \tvar tuple : Tuple2[Long, Long] = Tuple2(0l,\
    \ 1l)\n    \tif (numbers.length == 0) return tuple\n    \tvar product : Long =\
    \ 1l\n    \tvar sum : Long = 0l\n    \tfor (number <- numbers) {\n    \t\tproduct\
    \ *= number\n    \t\tsum += number\n    \t}\n    \treturn Tuple2(sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        def sumProduct(numbers : List[Long], acc :\
    \ Tuple2[Long, Long]) : Tuple2[Long, Long] = {\n            if (numbers.length\
    \ == 0) acc\n            else {\n                var new_acc = (acc._1 + numbers.head,\
    \ acc._2 * numbers.head)\n                sumProduct(numbers.tail, new_acc)\n\
    \            }\n        }\n        sumProduct(numbers, (0l, 1l))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var product : Long = 1\n        var sum :\
    \ Long = 0\n        for (number <- numbers) {\n            product *= number\n\
    \            sum += number\n        }\n        (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return ((sum(numbers), product(numbers)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9xut0qnf.scala:11:17 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mreturn\e[0m ((sum(numbers), product(numbers)))\n\
    \e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m              \
    \   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9xut0qnf.scala:11:31\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mreturn\e[0m\
    \ ((sum(numbers), product(numbers)))\n\e[31m\e[31m   |\e[0m                  \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: product\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n    \tvar sum = 0l\n    \tvar product = 1l\n    \t\
    for (number <- numbers) {\n    \t\tsum += number\n    \t\tproduct *= number\n\
    \    \t}\n    \t(sum, product)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      numbers.foldLeft(0l, 1l)((acc, x) => (acc._1\
    \ + x, acc._2 * x))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        def f(numbers : List[Long], accSum : Long,\
    \ accProduct : Long) : Tuple2[Long, Long] = {\n            if (numbers.length\
    \ == 0) return (accSum, accProduct)\n            else f(numbers.tail, accSum +\
    \ numbers.head, accProduct * numbers.head)\n        }\n        f(numbers, 0, 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft(0l, 1l) {\n            case\
    \ ((sum, product), number) => (sum + number, product * number)\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        return (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // TODO\n        (0, 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpia67kb2j.scala:15)\n\tat Problem.main(tmpia67kb2j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val (sum, prod) = numbers.foldLeft((0l, 1l))((n,\
    \ m) => (n._1 + m, n._2 * m))\n        (sum, prod)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum: Long = 0\n        var product: Long\
    \ = 1\n        for (number <- numbers) {\n            sum += number\n        \
    \    product *= number\n        }\n        return (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n    \t(numbers.sum, numbers.product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return (numbers.sum, numbers.product)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        Tuple2(sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) (0l, 1l)\n        else\
    \ numbers.foldLeft((0l, 1l))((a, b) => (a._1 + b, a._2 * b))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var s = 0l\n        var p = 1l\n        for\
    \ (n <- numbers) {\n            s += n\n            p *= n\n        }\n      \
    \  (s, p)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return (numbers.sum, numbers.product)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      return (numbers.sum, numbers.product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        Tuple2((numbers.sum, numbers.product))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxdayudrw.scala:11:15\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        Tuple2((numbers.sum,\
    \ numbers.product))\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    (Long, Long)\n\e[31m   |\e[0m   \
    \            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return ((numbers.sum, numbers.product))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val zeros = (0L, 1L)\n        val reductions\
    \ = numbers.foldLeft(zeros)((res, a) => (res._1 + a, res._2 * a))\n        return\
    \ reductions\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, if (numbers.length == 0) 1l\
    \ else numbers.product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        return (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // put your code here\n        (0, 1)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw8ys8z5h.scala:16)\n\tat Problem.main(tmpw8ys8z5h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0l\n        var product :\
    \ Long = 1l\n        for (number <- numbers) {\n            sum += number\n  \
    \          product *= number\n        }\n        (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (n <- numbers) {\n            sum += n\n            product *= n\n\
    \        }\n        return (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // >>> numbers.foldLeft((0, 1))((x, y) =>\
    \ (x._1 + y, x._2 * y))\n        // ((10, 24))\n        numbers.foldLeft((0, 1))((x,\
    \ y) => (x._1 + y, x._2 * y))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_ouhfug.scala:13:44\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        numbers.foldLeft((\e\
    [31m0\e[0m, \e[31m1\e[0m))((\e[36mx\e[0m, \e[36my\e[0m) => (x._1 + y, x._2 * y))\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                            Found:    Long\n\e\
    [31m   |\e[0m                                            Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_ouhfug.scala:13:54 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.foldLeft((\e[31m0\e[0m, \e[31m1\e[0m))((\e\
    [36mx\e[0m, \e[36my\e[0m) => (x._1 + y, x._2 * y))\n\e[31m\e[31m   |\e[0m    \
    \                                                  ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                      Found:    Long\n\e[31m\
    \   |\e[0m                                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        def accumulate(accumulator : (Long, Long),\
    \ next : Long) : (Long, Long) = (accumulator._1 + next, accumulator._2 * next)\n\
    \        return numbers.foldLeft((0l, 1l))(accumulate)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       numbers.foreach {number => {\n            sum += number\n            product\
    \ *= number\n        }}\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return (numbers.sum, numbers.product)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      val t = numbers.foldLeft((0l, 1l))((a, b) =>\
    \ (a._1 + b, a._2 * b))\n      t\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val result = (0l, 1l)\n        if (numbers.isEmpty)\
    \ return result\n        numbers.reduce((t1, t2) => (t1._1 + t2._1, t1._2 * t2._2))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdyt_oxx3.scala:13:39 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        numbers.reduce((\e[36mt1\e[0m, \e[36mt2\e[0m)\
    \ => (t1._1 + t2._1, t1._2 * t2._2))\n\e[31m\e[31m   |\e[0m                  \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \     value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpdyt_oxx3.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        numbers.reduce((\e[36mt1\e[0m, \e[36mt2\e[0m) => (t1._1 + t2._1, t1._2\
    \ * t2._2))\n\e[31m\e[31m   |\e[0m                                           \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                                        value\
    \ _2 is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var s : Long = 0\n        var p : Long = 1\n\
    \        numbers.foreach {\n            n => {\n                s += n\n     \
    \           p *= n\n            }\n        }\n        (s, p)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((p, n) => (p._1\
    \ + n, p._2 * n))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       numbers.foreach(n => {sum += n; product *= n})\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        Tuple2(sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return (numbers.sum, numbers.product)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Define a tuple with two values and use\
    \ the tuple to return the result.\n        //var sum = 0l\n        //var product\
    \ = 1l\n        numbers.foldLeft((0l, 1l)) { case ((s, p), n) => (s + n, p * n)\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return (numbers.foldLeft(0l)(_ + _), numbers.foldLeft(1l)(_\
    \ * _))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val s = numbers.foldLeft(0l)(_ + _)\n    \
    \    val p = numbers.foldLeft(1l)(_ * _)\n        (s, p)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((r, c) => (r._1\
    \ + c, r._2 * c))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        return (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((x, y) => (x._1\
    \ + y, x._2 * y))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n    \tval tup = (0L, 1L)\n        numbers.foldLeft(tup)\
    \ { case ((s, p), n) => (s + n, p * n) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkkiydpoq.scala:12:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numbers.foldLeft(tup) { \e[33mcase\e[0m ((s,\
    \ p), n) => (s + n, p * n) }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 4 spaces, 1 tab\n\e[31m   |\e[0m   Latest indent\
    \   : 8 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660010013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        return (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.length == 0) {\n            return\
    \ (0, 1)\n        }\n        if (numbers.length == 1) {\n            return (numbers(0),\
    \ numbers(0))\n        }\n        var tmp = numbers.foldLeft((0l, 1l))((x, y)\
    \ => (x._1 + y, x._2 * y))\n        return tmp\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // TODO\n        (0, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqr3km31x.scala:16)\n\tat Problem.main(tmpqr3km31x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n      var product = 1l\n      var sum = 0l\n     \
    \ for (x <- numbers) {\n        product *= x\n        sum += x\n      }\n    \
    \  (sum, product)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        Tuple2(sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var result = Tuple2(0l, 1l)\n        for (i\
    \ <- numbers) {\n            result = (result._1 + i, result._2 * i)\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l)) {\n           \
    \ case ((sum, product), num) => (sum + num, product * num)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Fill up this function body\n        //\
    \ You may also define other functions\n        return (0l, 0l)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkfv6rv5h.scala:16)\n\tat Problem.main(tmpkfv6rv5h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft(0L, 1L) {\n            case\
    \ ((sum, product), number) => (sum + number, product * number)\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // STUDENT CODE BEGIN\n        return (0l,\
    \ 1l)\n        // STUDENT CODE END\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpope_sh6e.scala:17)\n\tat Problem.main(tmpope_sh6e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return (numbers.sum, numbers.product)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.length == 0) return (0, 1)\n \
    \       (numbers.reduce(_ + _), numbers.reduce(_ * _))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) {\n            return\
    \ (0l, 1l)\n        }\n        val i = numbers.foldLeft(0l)((x, y) => x + y)\n\
    \        val j = numbers.foldLeft(1l)((x, y) => x * y)\n        return (i, j)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0L, 1L))((acc, c) => (acc._1\
    \ + c, acc._2 * c))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) return (0, 1)\n     \
    \   else return (numbers.sum, numbers.product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return (numbers.foldLeft(0l){_ + _}, numbers.foldLeft(1l){_\
    \ * _})\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        return (numbers.sum, numbers.product)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.foldLeft(0l)(_ + _), numbers.foldLeft(1l)(_\
    \ * _))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        Tuple2(numbers.sum, numbers.product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) {\n            (0, 1)\n\
    \        } else {\n            (numbers.sum, numbers.product)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (n <- numbers) {\n            sum += n\n            product *= n\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.foldLeft(0l)(_ + _), numbers.foldLeft(1l)(_\
    \ * _))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // YOUR CODE HERE\n        throw new UnsupportedOperationException\
    \ // Remove this line and implement your own solution\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException\n\tat Problem$.sumProduct(tmp32_0i7wx.scala:12)\n\
    \tat Problem$.main(tmp32_0i7wx.scala:15)\n\tat Problem.main(tmp32_0i7wx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Write your code here\n        null\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.sumProduct(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmplz262z39.scala:15)\n\tat Problem.main(tmplz262z39.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010006
