language: scala
name: HumanEval_66_digitSum
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Fill here!\n        return s.filter(_.isUpper).map(_.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Function body start\n        var sum : Long = 0\n   \
    \     for ( c <- s) {\n            if(c.isUpper) {\n                sum += c.toInt\n\
    \            }\n        }\n        sum\n        // Function body end\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // 0. Your implementation goes here\n        // 0.1. Return\n\
    \        return s.toList.map(x => x.toUpper).map(y => y.toInt).sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx8na2thk.scala:27)\n\tat Problem.main(tmpx8na2thk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toUpperCase.map(c => c.toInt).filter(c => c >= 65 && c\
    \ <= 90).sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4coj7o2e.scala:25)\n\tat Problem.main(tmp4coj7o2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here\n        s.filter(c => c.isUpper).map(c\
    \ => c.toInt).sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toCharArray.filter(_.isUpper).map(_.toLong).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        0l\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy8ecmyu7.scala:25)\n\tat Problem.main(tmpy8ecmyu7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val upper = \"[A-Z]\".r\n        s.toList.map(c => c.toInt).filter(c\
    \ => upper.findFirstIn(c.toChar.toString).isDefined).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.map(_.toInt).filter(_ >= 65).filter(_ <= 90).sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        def isUpper(c : Char) : Boolean = c >= 'A' && c <= 'Z'\n\
    \        return s.filter(isUpper(_)).map(_.toInt).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.foldLeft(0L)((a,b) => if (b.isUpper) a + b.toInt else\
    \ a)\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\"\
    )) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var l : Long = 0\n        for (ch <- s) {\n            val\
    \ n = ch.toInt\n            if (n >= 65 && n <= 90) {\n                l += n\n\
    \            }\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here.\n        return 0;\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n \
    \   assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphhou3o1l.scala:26)\n\tat Problem.main(tmphhou3o1l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // 1. Transform the string into an array of characters\n\
    \        // 2. Filter the array using the condition 'upper'\n        // 3. Transform\
    \ the array into a string\n        // 4. Transform the string into an array of\
    \ characters\n        // 5. Sum the values of the characters after transforming\
    \ them into integers\n        s.toCharArray().filter(_.isUpper).mkString.toCharArray().map(_.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Type your code here\n        var result = 0L\n      \
    \  for (c <- s) {\n            val t = c.toInt\n            if (t >= 65 && t <=\
    \ 90) {\n                result += t\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here\n        s.toList.filter(_.isUpper).map(_.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return s.map(x => {if (x >= 'A' && x <= 'Z') x else 0}).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Code an algorithm to solve this problem\n        val\
    \ upperList = s.filter(_.isUpper)\n        upperList.map(_.toLong).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        if (s.length == 0) return 0\n        else return s.toUpperCase.map(\
    \ c => if (c >= 'A' && c <= 'Z') c.toLong else 0).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdsjqvkfi.scala:26)\n\tat Problem.main(tmpdsjqvkfi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var b = 0l\n        for (a <- s.toCharArray()) {\n     \
    \       if (a >= 'A' && a <= 'Z') b += a\n        }\n        b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val filtered = s.toList.filter(c => c.isUpper)\n       \
    \ val mapped = filtered.map(c => c.toLong)\n        mapped.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        if (s.isEmpty) 0\n        else {\n            var upperChar\
    \ = s.filter(_.isUpper)\n            var sum : Long = 0\n            var i = 0\n\
    \            while (i < upperChar.length) {\n                sum += upperChar(i).toInt\n\
    \                i += 1\n            }\n            sum\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // TODO: Write your code here\n        var sum = 0l\n  \
    \      for (x <- s) {\n            if (x.isUpper) {\n                sum += x.toInt\n\
    \            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum : Long = 0l\n        for (c <- s) {\n          \
    \  if (c.isUpper) {\n                sum += c.toInt\n            }\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var result : Long = 0l\n        for (c <- s.toList) {\n\
    \            if (c.isUpper) {\n                result += c.toInt\n           \
    \ }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        def digitSumAcc(s : String, result : Long) : Long = {\n\
    \            if (s.isEmpty)\n                result\n            else if (s.head\
    \ >= 'A' && s.head <= 'Z')\n                digitSumAcc(s.tail, result + s.head)\n\
    \            else\n                digitSumAcc(s.tail, result)\n        }\n  \
    \      digitSumAcc(s, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toUpperCase.toCharArray.map(c => c.toInt).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdw0sy_ar.scala:25)\n\tat Problem.main(tmpdw0sy_ar.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.filter(isUpper(_)).map(_.toLong).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpouffe2_5.scala:21:17 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        s.filter(isUpper(_)).map(_.toLong).sum\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not\
    \ found: isUpper\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.filter(p => 65 <= p && p <= 90).map(p => p.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.filter(c => c.isUpper).map(c => c.toLong).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Your code here!\n        s.map{_ match {\n          \
    \  case 'a' => 0\n            case 'b' => 0\n            case 'c' => 0\n     \
    \       case 'd' => 0\n            case 'e' => 0\n            case 'f' => 0\n\
    \            case 'g' => 0\n            case 'h' => 0\n            case 'i' =>\
    \ 0\n            case 'j' => 0\n            case 'k' => 0\n            case 'l'\
    \ => 0\n            case 'm' => 0\n            case 'n' => 0\n            case\
    \ 'o' => 0\n            case 'p' => 0\n            case 'q' => 0\n           \
    \ case 'r' => 0\n            case 's' => 0\n            case 't' => 0\n      \
    \      case 'u' => 0\n            case 'v' => 0\n            case 'w' => 0\n \
    \           case 'x' => 0\n            case 'y' => 0\n            case 'z' =>\
    \ 0\n            case 'A' => 65\n            case 'B' => 66\n            case\
    \ 'C' => 67\n            case 'D' => 68\n            case 'E' => 69\n        \
    \    case 'F' => 70\n            case 'G' => 71\n            case 'H' => 72\n\
    \            case 'I' => 73\n            case 'J' => 74\n            case 'K'\
    \ => 75\n            case 'L' => 76\n            case 'M' => 77\n            case\
    \ 'N' => 78\n            case 'O' => 79\n            case 'P' => 80\n        \
    \    case 'Q' => 81\n            case 'R' => 82\n            case 'S' => 83\n\
    \            case 'T' => 84\n            case 'U' => 85\n            case 'V'\
    \ => 86\n            case 'W' => 87\n            case 'X' => 88\n            case\
    \ 'Y' => 89\n            case 'Z' => 90\n        }}.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.digitSum$$anonfun$1(tmpz4mw3jlz.scala:74)\n\
    \tat Problem$.digitSum$$anonfun$adapted$1(tmpz4mw3jlz.scala:75)\n\tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\
    \tat Problem$.digitSum(tmpz4mw3jlz.scala:75)\n\tat Problem$.main(tmpz4mw3jlz.scala:84)\n\
    \tat Problem.main(tmpz4mw3jlz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var res : Long = 0\n        for (c <- s) {\n           \
    \ res += c.toLong\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplbkq8yd2.scala:29)\n\tat Problem.main(tmplbkq8yd2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Your Code Here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsiprhb0x.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mdigitSum\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                      ^\e[0m\n\e[31m   |\e[0m             \
    \                         Found:    Unit\n\e[31m   |\e[0m                    \
    \                  Required: Long\n\e[31m21 |\e[0m        \e[34m// Your Code Here\e\
    [0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var res = 0;\n        for (i <- 0 until s.length) {\n  \
    \          if (s(i).isUpper) {\n                res += s(i).toInt;\n         \
    \   }\n        }\n        return res;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Exercise\n        (0l /: s.toUpperCase) {\n         \
    \   (acc, c) => \n                acc + c.toLong\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuxc_3jpb.scala:29)\n\tat Problem.main(tmpuxc_3jpb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return s.map(ch => if (ch.isUpper) ch.toLong else 0l).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        throw new UnsupportedOperationException\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException\n\tat Problem$.digitSum(tmpvwvf024a.scala:21)\n\
    \tat Problem$.main(tmpvwvf024a.scala:24)\n\tat Problem.main(tmpvwvf024a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here.\n        return 0;\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n \
    \   assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphhou3o1l.scala:26)\n\tat Problem.main(tmphhou3o1l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.filter(_.isUpper).map(_.toInt).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n    // Write your code here\n        var l = 0l\n        for (i\
    \ <- 0 until s.length) {\n            if (s(i).isUpper) {\n                l +=\
    \ s(i).toInt\n            }\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        require(s.length > 0)\n        var sum : Long = 0\n    \
    \    val upper : String = s.toUpperCase\n        for (i <- 0 until s.length) {\n\
    \            if (s(i) == upper(i)) sum += (s(i)).toLong\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: requirement failed\n\tat scala.Predef$.require(Predef.scala:324)\n\
    \tat Problem$.digitSum(tmp0viah9nf.scala:21)\n\tat Problem$.main(tmp0viah9nf.scala:30)\n\
    \tat Problem.main(tmp0viah9nf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // return 0l;\n        s.filter(_.isUpper).map(_.toLong).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toList.filter((c) => c.isUpper).map((c) => c.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val upperCase = (('A' to 'Z') ++ ('0' to '9')).map(_.toInt).toSet\n\
    \        s.toUpperCase.foldLeft(0)((sum, x) => if (upperCase(x)) sum + x else\
    \ sum)\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\"\
    )) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaui5kikb.scala:26)\n\tat Problem.main(tmpaui5kikb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptkigqlmy.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mdigitSum\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                      ^\e[0m\n\e[31m   |\e[0m             \
    \                         Found:    Unit\n\e[31m   |\e[0m                    \
    \                  Required: Long\n\e[31m21 |\e[0m        \e[34m// Write your\
    \ code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        def f(i : Int, acc : Long) : Long = i match {\n        \
    \    case i if i == s.length => acc\n            case _ => \n                if\
    \ (s(i).isUpper) f(i + 1, acc + s(i).toLong)\n                else f(i + 1, acc)\n\
    \        }\n        f(0, 0)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val a : Array[Char] = s.toCharArray\n        var sum : Long\
    \ = 0\n        for (c <- a) {\n            if (c >= 'A' && c <= 'Z') {\n     \
    \           sum += c.toInt\n            }\n        }\n        return sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toUpperCase.filter(_.isUpper).map(_.toLong).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwp2sfgg9.scala:25)\n\tat Problem.main(tmpwp2sfgg9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum = 0l\n        for (c <- s.toCharArray) if (c.isUpper)\
    \ sum += c.toInt\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Implement this\n        s.map{x => if (x <= 90 && x >=\
    \ 65) x else 0}.foldLeft(0l)(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        require(s.length() >= 0)\n        var sum = 0\n        for\
    \ (i <- 0 until s.length()) {\n            val c = s.charAt(i)\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                sum += (c.toInt - 'A' + 1)\n     \
    \       }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmmw0x651.scala:33)\n\tat Problem.main(tmpmmw0x651.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.map(_.toInt).filter(_ >= 65).filter(_ <= 90).sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.map(c => if (c.isUpper) c.toLong else 0l).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaa4cugmf.scala:26)\n\tat Problem.main(tmpaa4cugmf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // this will map the code of the A-Z chars in the String\n\
    \        s.map(x => x.toInt).filter(x => x >= 65 && x <= 90).sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toUpperCase.map(x => x.toInt).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwkkaz8da.scala:25)\n\tat Problem.main(tmpwkkaz8da.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return s.map(_.toInt).filter(_ > 64).filter(_ < 91).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum = 0l\n        for (c <- s) {\n            if (c\
    \ >= 'A' && c <= 'Z') {\n                sum += c.toInt\n            }\n     \
    \   }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // BEGIN SOLUTION\n        val codes = s.toUpperCase().map(_.toLong)\n\
    \        val sum = codes.foldLeft(0L)(_ + _)\n        sum\n        // END SOLUTION\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpai5on4dv.scala:29)\n\tat Problem.main(tmpai5on4dv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptkigqlmy.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mdigitSum\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                      ^\e[0m\n\e[31m   |\e[0m             \
    \                         Found:    Unit\n\e[31m   |\e[0m                    \
    \                  Required: Long\n\e[31m21 |\e[0m        \e[34m// Write your\
    \ code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7sec967.scala:25)\n\tat Problem.main(tmpm7sec967.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var ret = 0l\n        for (i <- 0 until s.length) {\n  \
    \          if (s(i).isUpper) {\n                ret += s(i).toInt\n          \
    \  }\n        }\n        ret\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        if (s.isEmpty) {\n            0l\n        } else {\n   \
    \         val s2 = s.toUpperCase();\n            if (s2.head >= 'A' && s2.head\
    \ <= 'Z') {\n                s2.head.toLong + digitSum(s2.tail)\n            }\
    \ else {\n                digitSum(s2.tail)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt842ywm4.scala:34)\n\tat Problem.main(tmpt842ywm4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Solution here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm0cd2mmj.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mdigitSum\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                      ^\e[0m\n\e[31m   |\e[0m             \
    \                         Found:    Unit\n\e[31m   |\e[0m                    \
    \                  Required: Long\n\e[31m21 |\e[0m        \e[34m// Solution here\e\
    [0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        ???\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.digitSum(tmpahqr0tco.scala:21)\n\tat Problem$.main(tmpahqr0tco.scala:24)\n\
    \tat Problem.main(tmpahqr0tco.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        ???\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.digitSum(tmpahqr0tco.scala:21)\n\tat Problem$.main(tmpahqr0tco.scala:24)\n\
    \tat Problem.main(tmpahqr0tco.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n\t\t// Fill in your solution below\n\t\ts.filter(x => x.isUpper).map(x\
    \ => x.toInt).sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps0wg33bi.scala:23:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1659979887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Fill In\n        return 0l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg314h0f9.scala:26)\n\tat Problem.main(tmpg314h0f9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return s.filter(x => x.isUpper).map(x => x.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toCharArray.map(a => if (a.isUpper) a.toLong else 0).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var c = 0\n        for (x <- s) {\n            if (Character.isUpperCase(x))\
    \ c += x.toInt\n        }\n        return c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.map(x => if (x.isUpper) x.toLong else 0).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979889
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        if (s.size == 0) 0 else s.head.toUpper.toLong + digitSum(s.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppw3c0dpr.scala:25)\n\tat Problem.main(tmppw3c0dpr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.map(x => x.toInt).filter(x => x >= 65 && x <= 90).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.map(x => x.toInt).filter(y => y >= 65 && y <= 90).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        (for(c <- s if c.isUpper) yield c.toLong).sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum = 0l\n        s.foreach((c : Char) => if (c.isUpper)\
    \ sum += c.toInt)\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val digits = s.map(_.toLong)\n        val sum = digits.reduce(_\
    \ + _)\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat scala.collection.IterableOnceOps.reduce(IterableOnce.scala:698)\n\
    \tat scala.collection.IterableOnceOps.reduce$(IterableOnce.scala:698)\n\tat scala.collection.AbstractIterable.reduce(Iterable.scala:926)\n\
    \tat Problem$.digitSum(tmpf1jdfihg.scala:22)\n\tat Problem$.main(tmpf1jdfihg.scala:26)\n\
    \tat Problem.main(tmpf1jdfihg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val valueList = (for (i <- s.toUpperCase().toCharArray()\
    \ if i >= 'A' && i <= 'Z') yield i.toLong).sum\n        return valueList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpakalnvxu.scala:26)\n\tat Problem.main(tmpakalnvxu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        if (s.isEmpty) return 0\n        val sList = s.toList\n\
    \        return sList.filter(c => c.isUpper).map(c => c.toLong).sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        throw new NotImplementedError()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat Problem$.digitSum(tmpvx0v4kjq.scala:21)\n\
    \tat Problem$.main(tmpvx0v4kjq.scala:24)\n\tat Problem.main(tmpvx0v4kjq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        def iter(s : String, acc : Long) : Long = {\n          \
    \  if (s.isEmpty)\n                acc\n            else {\n                val\
    \ x = s.head\n                if (x >= 'A' && x <= 'Z')\n                    iter(s.tail,\
    \ acc + x)\n                else\n                    iter(s.tail, acc)\n    \
    \        }\n        }\n        iter(s, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum = 0l\n        for (c <- s) {\n            if (c\
    \ >= 'A' && c <= 'Z') {\n                sum += c.toInt\n            }\n     \
    \   }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return s.foldLeft(0) { (acc, c) =>\n            if(c.isUpper)\
    \ {\n                acc + c.toInt\n            } else {\n                acc\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return s.filter(_.isUpper).map(_.toLong).sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val s = s.toUpperCase\n        s.foldLeft(0)((acc, c) =>\
    \ acc + c)\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt3ixjqlx.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = s.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ms\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        require(!s.isEmpty)\n        var sum = 0\n        for (i\
    \ <- 0 until s.length) {\n            var x = s(i)\n            if (x.isUpper)\
    \ {\n                sum += x.toInt\n            }\n        }\n        sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: requirement failed\n\tat scala.Predef$.require(Predef.scala:324)\n\
    \tat Problem$.digitSum(tmpb0unlygv.scala:21)\n\tat Problem$.main(tmpb0unlygv.scala:32)\n\
    \tat Problem.main(tmpb0unlygv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var total = 0l\n        for (c <- s) {\n            val\
    \ code = c.toInt\n            if (code >= 65 && code <= 90) {\n              \
    \  total += code\n            }\n        }\n        total\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum : Long = 0\n        s.toUpperCase().foreach(c =>\
    \ sum += (c.toLong - 64))\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptfbiep_y.scala:27)\n\tat Problem.main(tmptfbiep_y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum = 0\n        for (i <- 0 until s.length) {\n   \
    \         val ascii = s(i).toInt\n            if (ascii >= 65 && ascii <= 90)\
    \ {\n                sum += ascii\n            }\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptkigqlmy.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mdigitSum\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                      ^\e[0m\n\e[31m   |\e[0m             \
    \                         Found:    Unit\n\e[31m   |\e[0m                    \
    \                  Required: Long\n\e[31m21 |\e[0m        \e[34m// Write your\
    \ code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // your code here\n        (0l)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmix_5eom.scala:26)\n\tat Problem.main(tmpmix_5eom.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdccxy65z.scala:24)\n\tat Problem.main(tmpdccxy65z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum = 0l\n        s.foreach(c => { if (c.isUpper) sum\
    \ += c.toInt })\n        sum\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.map((c) => if (c.isUpper) c.toInt else 0).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        (for (ch <- s) yield if (ch.isUpper) ch.toInt else 0).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toCharArray.filter(x => x.isUpper).map(x => x.toLong).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979899
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.foldLeft(0l)((acc, c) => {\n            if (c >= 'A' &&\
    \ c <= 'Z')\n                acc + c.toInt\n            else\n               \
    \ acc\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum = 0l\n        for (char <- s) {\n            if\
    \ (char.isUpper) sum += char.toInt\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaa4cugmf.scala:26)\n\tat Problem.main(tmpaa4cugmf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val alphabets = ('A' to 'Z').toList\n        s.toList.map(_.toInt).filter(alphabets.contains(_)).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var buffer = 0L\n        for (i <- 0 until s.length) {\n\
    \            val c = s.charAt(i)\n            if (65 <= c && c <= 90) buffer +=\
    \ c\n        }\n        buffer\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val sum = s.toUpperCase.map(x => if (x >= 'A' && x <= 'Z')\
    \ x.toInt else 0).sum\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0zx8cbjh.scala:26)\n\tat Problem.main(tmp0zx8cbjh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Put your solution here\n        var sum = 0l\n      \
    \  for (c <- s) if (c >= 'A' && c <= 'Z') sum += c\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toCharArray.map(x => if (x >= 'A' && x <= 'Z') x.toLong\
    \ else 0l).sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.filter(x => x.isUpper).map(x => x.toInt).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.foldLeft(0l)((total, c) => if (c.isUpper) total + c.toInt\
    \ else total)\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum : Long = 0\n        for (c <- s) {\n           \
    \ val x = c.toInt\n            if (x >= 65 && x <= 90) {\n                sum\
    \ += x\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val codes = s.map(ch => ch.toLong).filter(n => n >= 'A'.toLong\
    \ && n <= 'Z'.toLong)\n        var result = 0l\n        for (n <- codes) {\n \
    \           result += n\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        def v(c : Char) : Long = c.toLong\n        def f(s : List[Char])\
    \ : Long = s match {\n            case Nil => 0\n            case h :: t => v(h)\
    \ + f(t)\n        }\n        f(s.toList.filter(_.isUpper))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n      val (a, b) = (\n        s.filter(x => x.isUpper).toSeq,\n\
    \        s.filter(x => x.isLower).toSeq\n      )\n      val upperDigits = a.map(char\
    \ => char.toInt).sum\n      val lowerDigits = b.map(char => char.toInt).sum\n\
    \      (upperDigits - lowerDigits).toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0biv24ml.scala:31)\n\tat Problem.main(tmp0biv24ml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // TODO\n        return s.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw1lkyirl.scala:26)\n\tat Problem.main(tmpw1lkyirl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // TODO\n        var result = 0\n        for (c <- s) {\n\
    \            result += if (c >= 'A' && c <= 'Z') c else 0\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpknurgf86.scala:24:22 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            result += \e[33mif\e[0m (c >= \e[31m'A'\e\
    [0m && c <= \e[31m'Z'\e[0m) c \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m                      ^^\e[0m\n\e[31m   |\e[0m                      expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpknurgf86.scala:24:19 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            result += \e[33mif\e[0m (c >= \e[31m'A'\e[0m && c <= \e[31m'Z'\e\
    [0m) c \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val c = s.toUpperCase.toList\n        c.foldLeft(0l)((a,\
    \ b) => a + b)\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq34j880i.scala:26)\n\tat Problem.main(tmpq34j880i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Edge Case\n        if (s.length() == 0) {\n         \
    \   return 0l\n        }\n        // Logic\n        var sum = 0l\n        for\
    \ (i <- 0 until s.length()) {\n            var char = s.charAt(i)\n          \
    \  // Check if uppercase\n            if (char >= 'A' && char <= 'Z') {\n    \
    \            // Convert char to int\n                var charInt = char.toInt\n\
    \                // Sum\n                sum += charInt\n            }\n     \
    \   }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val upper = 'A' to 'Z'\n        s.map(c => if (upper.contains(c))\
    \ c.toInt else 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n      s.filter(_.isUpper).map(_.toLong).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here\n        return 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm8g1wsih.scala:26)\n\tat Problem.main(tmpm8g1wsih.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val upperChar = ('A' to 'Z').toList\n        s.filter(upperChar.contains(_)).map(_.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.filter(x => x.isUpper).foldLeft(0L)((acc, x) => acc +\
    \ x.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // TODO: Your answer here\n        def go(s : String, total\
    \ : Long) : Long = {\n            if (s.isEmpty) total\n            else if (s.head.isUpper)\
    \ go(s.tail, total + s.head.toInt)\n            else go(s.tail, total)\n     \
    \   }\n        go(s, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979910
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum = 0l\n        for (c <- s) if (c.isUpper) sum +=\
    \ c.toInt\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n    }\n}\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5tasetad.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    eof expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5tasetad.scala:20:38 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \    \e[33mdef\e[0m \e[36mdigitSum\e[0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e\
    [35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                                     \
    \ ^\e[0m\n\e[31m   |\e[0m                                      Found:    Unit\n\
    \e[31m   |\e[0m                                      Required: Long\n\e[31m21\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979912
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n      s.toList.map(x => if (x.isUpper) x.toInt else 0).sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Recursive solution\n        if (s.length > 0) s.head.toInt\
    \ + digitSum(s.tail)\n        else 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpex_7lk7f.scala:27)\n\tat Problem.main(tmpex_7lk7f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n      // Replace the line below with your code\n      var sum: Long\
    \ = 0\n      for (i <- 0 until s.length) {\n        if (s(i).isUpper) {\n    \
    \      sum += s(i).toLong\n        }\n      }\n      sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n    s.foldLeft(0)((sum, c) => sum + (if (c.isUpper) c else 0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var x = s.map(x => x.toInt).filter(x => x >= 65 && x <=\
    \ 90).sum\n        println(x)\n        x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: '0

    131

    67

    69

    131

    153

    151

    327

    '
  timestamp: 1659979919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum : Long = 0\n        s.foreach { c =>\n         \
    \   var code : Int = c.toInt\n            if (code >= 65 && code <= 90) {\n  \
    \              sum += code\n            }\n        }\n        return sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toUpperCase.foldLeft(0L)((a, b) => a + b.toLong)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppcbfn86e.scala:25)\n\tat Problem.main(tmppcbfn86e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toUpperCase.foldLeft(0){case (a, x) => a + x.toInt}\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprkkl645j.scala:25)\n\tat Problem.main(tmprkkl645j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toUpperCase.map(x => x.toInt).filter(x => x >= 65 && x\
    \ <= 90).sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp964d5pb6.scala:25)\n\tat Problem.main(tmp964d5pb6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here\n        s.map(ch => if (ch.isUpper)\
    \ ch.toLong else 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum = 0l\n        for (i <- 0 until s.length) {\n  \
    \          val code = s(i).toInt\n            if (code >= 65 && code <= 90) sum\
    \ += code\n        }\n        sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) ==\
    \ (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        0l\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy8ecmyu7.scala:25)\n\tat Problem.main(tmpy8ecmyu7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        0l\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy8ecmyu7.scala:25)\n\tat Problem.main(tmpy8ecmyu7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Long is a signed 64-bit integer.\n        // Int is a\
    \ signed 32-bit integer.\n        // You can omit the 'l' or 'L' on the end of\
    \ a long literal.\n        0L\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_wa7p6u0.scala:28)\n\tat Problem.main(tmp_wa7p6u0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum = 0L\n        for (i <- 0 until s.length()) {\n\
    \            if (s(i).isUpper) {\n                sum += s(i).toInt\n        \
    \    }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Your code here\n        // Return your result\n     \
    \   0l\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\"\
    )) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0fr9vjcu.scala:27)\n\tat Problem.main(tmp0fr9vjcu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979918
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val sb = new StringBuilder\n        sb.append(s)\n     \
    \   val result = sb.filter(_.isUpper).map(_.toInt).sum\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here\n        return 0;\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz3180tgw.scala:26)\n\tat Problem.main(tmpz3180tgw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.map(c => c.toInt).filter(i => i >= 65 && i <= 90).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979920
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        ???\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.digitSum(tmpahqr0tco.scala:21)\n\tat Problem$.main(tmpahqr0tco.scala:24)\n\
    \tat Problem.main(tmpahqr0tco.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // TODO: Write your solution here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe6uicrd6.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mdigitSum\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                      ^\e[0m\n\e[31m   |\e[0m             \
    \                         Found:    Unit\n\e[31m   |\e[0m                    \
    \                  Required: Long\n\e[31m21 |\e[0m        \e[34m// TODO: Write\
    \ your solution here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum : Long = 0l\n        for (i <- 0 until s.length)\
    \ {\n            val c = s.charAt(i)\n            if (c >= 'A' && c <= 'Z') sum\
    \ += c.toInt\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979920
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum : Long = 0\n        for (c <- s) {\n           \
    \ val value = c.toByte\n            if (value > 64 && value < 91) {\n        \
    \        sum += value\n            }\n        }\n        return sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979920
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Start\n        0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprr79z5jk.scala:26)\n\tat Problem.main(tmprr79z5jk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var list = s.toCharArray\n        var total = 0L\n     \
    \   for (i <- 0 until list.length) {\n            if (list(i).isUpper) {\n   \
    \             total += list(i).toLong\n            }\n        }\n        return\
    \ total\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.foldLeft(0) { (sum, c) => sum + (if (c >= 'A' && c <=\
    \ 'Z') c else 0) }\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Implement your solution here\n        var sum:Long =\
    \ 0;\n        val l = s.length;\n        for(i <- 0 to l-1){\n        \tif(s(i)\
    \ > 'A' - 1){\n        \t\tsum += s(i);\n        \t}\n        }\n        return\
    \ sum;\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\"\
    )) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0jd716o.scala:33)\n\tat Problem.main(tmpr0jd716o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return s.filter(x => x >= 'A' && x <= 'Z').map(x => x.toInt).sum.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.digitSum(tmpovj1m0uh.scala:22)\n\tat Problem$.main(tmpovj1m0uh.scala:25)\n\
    \tat Problem.main(tmpovj1m0uh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.map(_.toInt).filter(_>64).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbj_jtha4.scala:25)\n\tat Problem.main(tmpbj_jtha4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.foldLeft(0)((acc, c) => acc + (if(c >= 'A' && c <= 'Z')\
    \ c else 0)).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return 0l\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphb67wxgz.scala:25)\n\tat Problem.main(tmphb67wxgz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toUpperCase.filter(c => c >= 'A' && c <= 'Z').map(c =>\
    \ c.toLong).sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6gsfm6ya.scala:25)\n\tat Problem.main(tmp6gsfm6ya.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return 0l\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphb67wxgz.scala:25)\n\tat Problem.main(tmphb67wxgz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum = 0L\n        for (c <- s.toCharArray() if c.isUpper)\
    \ {\n            sum += c.toInt\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.filter(x => x.isUpper).foldLeft(0l)((x, y) => x + y.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var l : Long = 0;\n        for (c <- s) {\n            if\
    \ (c.isUpper) {\n                l += c.toInt;\n            }\n        }\n   \
    \     return l;\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        ???\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.digitSum(tmpahqr0tco.scala:21)\n\tat Problem$.main(tmpahqr0tco.scala:24)\n\
    \tat Problem.main(tmpahqr0tco.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n\tvar sum : Long = 0\n\tval upperLetters : List[Char] = List('A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n\tfor (char <- s) {\n\t    if\
    \ (upperLetters.contains(char)) {\n\t\tsum += char.toLong\n\t    }\n\t}\n\tsum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj6e64a4q.scala:26:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m\t    }\n\e[31m\e[31m   |\e[0m\t    ^\e[0m\n\e[31m  \
    \ |\e[0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\
    \e[31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent  \
    \ : 1 tab, 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpj6e64a4q.scala:29:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab\n\e[31m   |\e[0m   Latest indent   : 4\
    \ spaces\n2 errors found\n"
  stdout: ''
  timestamp: 1659979925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // >>> digitSum((\"\"))\n        // (0l)\n        if (s.length\
    \ == 0) {\n            0l\n        }\n        // >>> digitSum((\"abAB\"))\n  \
    \      // (131l)\n        // >>> digitSum((\"abcCd\"))\n        // (67l)\n   \
    \     // >>> digitSum((\"helloE\"))\n        // (69l)\n        // >>> digitSum((\"\
    woArBld\"))\n        // (131l)\n        // >>> digitSum((\"aAaaaXa\"))\n     \
    \   // (153l)\n        else {\n            s.toList.map(x => x.toInt).filter(x\
    \ => x <= 90 && x >= 65).sum.toLong\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until s.length())\n\
    \            if (s(i).isUpper)\n                sum += s(i).toLong\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\"\
    )) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var total = 0;\n        for (i <- 0 until s.length) {\n\
    \            if (s(i).isUpper) {\n                total += s(i).toInt;\n     \
    \       }\n        }\n        return total;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var r : Long = 0\n        for (c <- s) {\n            if\
    \ (c.isUpper) r += c.toInt\n        }\n        r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here...\n        0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpclv4zwkt.scala:26)\n\tat Problem.main(tmpclv4zwkt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum : Long = 0l\n        for (i <- 0 until s.length)\
    \ {\n            var ascii : Int = s(i).toInt\n            if (ascii > 64 && ascii\
    \ < 91) {\n                sum += ascii\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\"\
    )) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val out0: Long = 0L\n        //val out = s.toUpperCase().chars().filter(ch\
    \ => ch >= 65 && ch <= 90).sum()\n        val out = s.toUpperCase().chars().filter(ch\
    \ => ch >= 65 && ch <= 90).sum()\n        out\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsdol1mpl.scala:28)\n\tat Problem.main(tmpsdol1mpl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val upperCase = s.filter(c => c.isUpper)\n        upperCase.map(c\
    \ => c.toLong).sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your solution here\n        val ascii = (65 to\
    \ 90).toList ::: (97 to 122).toList\n        s.toList.map(_.toInt).filter(ascii.contains(_)).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg1obqu_2.scala:27)\n\tat Problem.main(tmpg1obqu_2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum : Long = 0l\n        // In Java we can call Character.isUpperCase(char)\
    \ for each character in the string.\n        // In Scala we can call toUpperCase()\
    \ on the character to get the upper case version\n        // of the character.\
    \  If the character is already upper case, then toUpperCase() will\n        //\
    \ simply return the same character.  If we compare the character before and after\n\
    \        // toUpperCase() was called on it, then we will know if the character\
    \ was upper case\n        // or not.\n        s.foreach(c => {\n            if\
    \ (c.toUpper == c) {\n                sum += c.toInt\n            }\n        })\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp66fw5ect.scala:42)\n\tat Problem.main(tmp66fw5ect.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.filter(x => x.isUpper).map(x => x.toInt).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum = 0l\n        for (c <- s) {\n            if (c.isUpper)\
    \ sum += c.toInt\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return s.filter(c => c.isUpper).foldLeft(0l)((acc, c) =>\
    \ acc + c.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toList.filter(_.isUpper).map(_.toInt).sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n \
    \   assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n\t\ts.map(_.toInt).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv11z41e1.scala:22:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1659979933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toUpperCase.map(x => x.toLong).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5r4uyvmo.scala:25)\n\tat Problem.main(tmp5r4uyvmo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val aUpper = s.toArray.filter(c => c.isUpper).map(c => c.toLong)\n\
    \        aUpper.sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7sec967.scala:25)\n\tat Problem.main(tmpm7sec967.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        0\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ii7im6a.scala:25)\n\tat Problem.main(tmp8ii7im6a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var result = 0l\n        for (c <- s) {\n            if\
    \ (c.isUpper) {\n                result += c.toInt\n            }\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum : Long = 0\n        s.foreach(c => sum += c.toInt)\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ty5x4h3.scala:27)\n\tat Problem.main(tmp4ty5x4h3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return s.toUpperCase.map(_.toLong).sum;\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph3enp5e6.scala:25)\n\tat Problem.main(tmph3enp5e6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        return s.foldLeft(0l)((a,b) => if (b.isUpper) a + b.toInt\
    \ else a)\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var sum : Long = 0\n        for (c <- s.toCharArray) if\
    \ (c.isUpper) sum += c.toInt\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.foldLeft(0l)((a, c) => if (c >= 'A' && c <= 'Z') {\n \
    \           a + c.toInt\n        } else {\n            a\n        })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n\
    \    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n\tval u = s.toUpperCase\n\tif (u.isEmpty)\n\t    0\n\telse\n\t \
    \   u.tail.foldLeft(u.head.toLong)((a, b) => a + b.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2czb9w57.scala:26:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab, 4 spaces\n\e[31m   |\e[0m   Latest indent\
    \   : 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1659979935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n    var sum = 0l\n    for (i <- 0 until s.length) {\n        if\
    \ (s(i).isUpper) sum += s(i).toInt\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) ==\
    \ (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdb5et3af.scala:37:0 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdb5et3af.scala:36:1\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val a = s.toList.map(x => x.toInt).filter(x => x >= 65 &&\
    \ x <= 90).sum\n        return a\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n\
    \    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"helloE\"\
    )) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        val upper = s.toUpperCase()\n        val res = upper.map(x\
    \ => (x - 'A' + 1) * (x - 'A' + 1)).sum\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb9pppe5a.scala:27)\n\tat Problem.main(tmpb9pppe5a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.toList.filter(x => x.isUpper).map(x => x.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // TODO\n        // Pattern Matching\n        // ----------------\n\
    \        // case class\n        // case object\n        // val pattern = e\n \
    \       // e match {\n        //     case pattern => expr\n        //     ...\n\
    \        // }\n        //\n        // match \u5F0F\u306F\u6700\u5F8C\u306B\u6765\
    \u305F case \u304C\u9069\u7528\u3055\u308C\u308B.\n        // case _ \u304C\u3042\
    \u308B\u5834\u5408\u306B\u306F\u7121\u8996\u3055\u308C\u308B.\n        //\n  \
    \      // Exhaustiveness Check\n        // --------------------\n        // match\
    \ \u5F0F\u306F\u5B8C\u5168\u6027\u304C\u4FDD\u8A3C\u3055\u308C\u308B.\n      \
    \  // \u4E00\u65B9 switch \u6587\u306F\u5B8C\u5168\u6027\u304C\u4FDD\u8A3C\u3055\
    \u308C\u306A\u3044.\n        // \u4E0D\u5B8C\u5168\u306A match \u5F0F\u306E\u5834\
    \u5408, \u30B3\u30F3\u30D1\u30A4\u30EB\u6642\u306B\u8B66\u544A\u304C\u51FA\u308B\
    .\n        // \u306A\u304A, \u4E0D\u5B8C\u5168\u306A switch \u6587\u306E\u5834\
    \u5408, \u30B3\u30F3\u30D1\u30A4\u30EB\u6642\u306B\u30A8\u30E9\u30FC\u304C\u51FA\
    \u308B.\n        //\n        // Type Parameterization\n        // ---------------------\n\
    \        // \u30AF\u30E9\u30B9 T[A] \u306F A \u3092\u578B\u30D1\u30E9\u30E1\u30FC\
    \u30BF\u5316\u3057\u305F\u30AF\u30E9\u30B9 T \u306E\u30A4\u30F3\u30B9\u30BF\u30F3\
    \u30B9\u3092\u8868\u3059.\n        // \u30B8\u30A7\u30CD\u30EA\u30AF\u30B9\u306E\
    \u5229\u7528\u306B\u3088\u308A, \u30B3\u30F3\u30D1\u30A4\u30EB\u6642\u306B\u578B\
    \u30C1\u30A7\u30C3\u30AF\u304C\u53EF\u80FD.\n        //\n        // Companion\
    \ Object\n        // ----------------\n        // apply() \u3092\u5B9A\u7FA9\u3059\
    \u308B\u3053\u3068\u3067\u30B3\u30F3\u30B9\u30C8\u30E9\u30AF\u30BF\u3092\u547C\
    \u3073\u51FA\u3059\u3088\u3046\u306B\u3059\u308B.\n        // 1, \u3042\u308B\u30AF\
    \u30E9\u30B9 T \u306B\u5BFE\u3057\u3066 T.apply() \u3068\u3057\u3066\u547C\u3076\
    .\n        // 2, \u3042\u308B\u30AF\u30E9\u30B9 T \u306B\u5BFE\u3057\u3066 val\
    \ t = T() \u3068\u3057\u3066\u547C\u3076.\n        //\n        // \u5B9F\u969B\
    \u306B\u306F\u4EE5\u4E0B\u306E\u3088\u3046\u306B\u5B9A\u7FA9\u3059\u308B.\n  \
    \      // class T[A] {\n        //\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\")) ==\
    \ (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgjptoiqd.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mdigitSum\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                      ^\e[0m\n\e[31m   |\e[0m             \
    \                         Found:    Unit\n\e[31m   |\e[0m                    \
    \                  Required: Long\n\e[31m21 |\e[0m        \e[34m// TODO\e[0m\n\
    \e[31m22 |\e[0m        \e[34m// Pattern Matching\e[0m\n\e[31m23 |\e[0m       \
    \ \e[34m// ----------------\e[0m\n\e[31m24 |\e[0m        \e[34m// case class\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// case object\e[0m\n\e[31m26 |\e[0m       \
    \ \e[34m// val pattern = e\e[0m\n\e[31m27 |\e[0m        \e[34m// e match {\e[0m\n\
    \e[31m28 |\e[0m        \e[34m//     case pattern => expr\e[0m\n\e[31m29 |\e[0m\
    \        \e[34m//     ...\e[0m\n\e[31m30 |\e[0m        \e[34m// }\e[0m\n\e[31m31\
    \ |\e[0m        \e[34m//\e[0m\n\e[31m32 |\e[0m        \e[34m// match \u5F0F\u306F\
    \u6700\u5F8C\u306B\u6765\u305F case \u304C\u9069\u7528\u3055\u308C\u308B.\e[0m\n\
    \e[31m33 |\e[0m        \e[34m// case _ \u304C\u3042\u308B\u5834\u5408\u306B\u306F\
    \u7121\u8996\u3055\u308C\u308B.\e[0m\n\e[31m34 |\e[0m        \e[34m//\e[0m\n\e\
    [31m35 |\e[0m        \e[34m// Exhaustiveness Check\e[0m\n\e[31m36 |\e[0m     \
    \   \e[34m// --------------------\e[0m\n\e[31m37 |\e[0m        \e[34m// match\
    \ \u5F0F\u306F\u5B8C\u5168\u6027\u304C\u4FDD\u8A3C\u3055\u308C\u308B.\e[0m\n\e\
    [31m38 |\e[0m        \e[34m// \u4E00\u65B9 switch \u6587\u306F\u5B8C\u5168\u6027\
    \u304C\u4FDD\u8A3C\u3055\u308C\u306A\u3044.\e[0m\n\e[31m39 |\e[0m        \e[34m//\
    \ \u4E0D\u5B8C\u5168\u306A match \u5F0F\u306E\u5834\u5408, \u30B3\u30F3\u30D1\u30A4\
    \u30EB\u6642\u306B\u8B66\u544A\u304C\u51FA\u308B.\e[0m\n\e[31m40 |\e[0m      \
    \  \e[34m// \u306A\u304A, \u4E0D\u5B8C\u5168\u306A switch \u6587\u306E\u5834\u5408\
    , \u30B3\u30F3\u30D1\u30A4\u30EB\u6642\u306B\u30A8\u30E9\u30FC\u304C\u51FA\u308B\
    .\e[0m\n\e[31m41 |\e[0m        \e[34m//\e[0m\n\e[31m42 |\e[0m        \e[34m//\
    \ Type Parameterization\e[0m\n\e[31m43 |\e[0m        \e[34m// ---------------------\e\
    [0m\n\e[31m44 |\e[0m        \e[34m// \u30AF\u30E9\u30B9 T[A] \u306F A \u3092\u578B\
    \u30D1\u30E9\u30E1\u30FC\u30BF\u5316\u3057\u305F\u30AF\u30E9\u30B9 T \u306E\u30A4\
    \u30F3\u30B9\u30BF\u30F3\u30B9\u3092\u8868\u3059.\e[0m\n\e[31m45 |\e[0m      \
    \  \e[34m// \u30B8\u30A7\u30CD\u30EA\u30AF\u30B9\u306E\u5229\u7528\u306B\u3088\
    \u308A, \u30B3\u30F3\u30D1\u30A4\u30EB\u6642\u306B\u578B\u30C1\u30A7\u30C3\u30AF\
    \u304C\u53EF\u80FD.\e[0m\n\e[31m46 |\e[0m        \e[34m//\e[0m\n\e[31m47 |\e[0m\
    \        \e[34m// Companion Object\e[0m\n\e[31m48 |\e[0m        \e[34m// ----------------\e\
    [0m\n\e[31m49 |\e[0m        \e[34m// apply() \u3092\u5B9A\u7FA9\u3059\u308B\u3053\
    \u3068\u3067\u30B3\u30F3\u30B9\u30C8\u30E9\u30AF\u30BF\u3092\u547C\u3073\u51FA\
    \u3059\u3088\u3046\u306B\u3059\u308B.\e[0m\n\e[31m50 |\e[0m        \e[34m// 1,\
    \ \u3042\u308B\u30AF\u30E9\u30B9 T \u306B\u5BFE\u3057\u3066 T.apply() \u3068\u3057\
    \u3066\u547C\u3076.\e[0m\n\e[31m51 |\e[0m        \e[34m// 2, \u3042\u308B\u30AF\
    \u30E9\u30B9 T \u306B\u5BFE\u3057\u3066 val t = T() \u3068\u3057\u3066\u547C\u3076\
    .\e[0m\n\e[31m52 |\e[0m        \e[34m//\e[0m\n\e[31m53 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Write your code here\n        null\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpceo40vnf.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[31mnull\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Null\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        var asciiCodeSum : Long = 0\n        for (i <- 0 until s.length())\
    \ {\n            if (s(i).isUpper) {\n                asciiCodeSum += s(i).toInt\n\
    \            }\n        }\n        return asciiCodeSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Your Code Here\n        val up = s.toUpperCase\n    \
    \    var sum = 0l\n        for (ch <- up) {\n            if (ch >= 'A' && ch <=\
    \ 'Z') {\n                sum += ch.toInt\n            }\n        }\n        sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\")) ==\
    \ (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnln6ro0t.scala:33)\n\tat Problem.main(tmpnln6ro0t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        s.map(_.toInt).filter(_ <= 90).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"\
    abAB\")) == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfgwsh3oa.scala:30)\n\tat Problem.main(tmpfgwsh3oa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        // Fill in the code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(digitSum((\"\")) == (0l));\n    assert(digitSum((\"abAB\"))\
    \ == (131l));\n    assert(digitSum((\"abcCd\")) == (67l));\n    assert(digitSum((\"\
    helloE\")) == (69l));\n    assert(digitSum((\"woArBld\")) == (131l));\n    assert(digitSum((\"\
    aAaaaXa\")) == (153l));\n    assert(digitSum((\" How are yOu?\")) == (151l));\n\
    \    assert(digitSum((\"You arE Very Smart\")) == (327l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0j_q_y1n.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mdigitSum\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                      ^\e[0m\n\e[31m   |\e[0m             \
    \                         Found:    Unit\n\e[31m   |\e[0m                    \
    \                  Required: Long\n\e[31m21 |\e[0m        \e[34m// Fill in the\
    \ code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        def helper(acc : Long, s : String) : Long = {\n        \
    \    if (s.isEmpty) acc\n            else if (s.head >= 'A' && s.head <= 'Z')\
    \ helper(acc + s.head, s.tail)\n            else helper(acc, s.tail)\n       \
    \ }\n        helper(0, s)\n    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\
    \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
    abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
    \    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n \
    \   // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
    helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n\
    \    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String)\
    \ : Long = {\n        if (s.length == 0) {\n            return 0l\n        }\n\
    \        else {\n            val zero = '0'\n            val nine = '9'\n    \
    \        var result = 0l\n            var i = 0\n            while (i < s.length)\
    \ {\n                val c = s(i)\n                if (c >= zero && c <= nine)\
    \ {\n                    result += (c - zero)\n                }\n           \
    \     i += 1\n            }\n            return result\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(digitSum((\"\")) == (0l));\n \
    \   assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"abcCd\"))\
    \ == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
    woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
    \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\"))\
    \ == (327l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi5cjgy87.scala:41)\n\tat Problem.main(tmpi5cjgy87.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979940
