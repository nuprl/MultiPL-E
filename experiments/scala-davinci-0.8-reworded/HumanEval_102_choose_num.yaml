name: HumanEval_102_choose_num
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // This function takes two positive numbers x and y and returns the\n    //\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n    //\
  \ there's no such number, then the function should return -1.\n    // For example:\n\
  \    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l), (12l))\n\
  \    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
  \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
  \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n \
  \   assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
  \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
  \ (546l)) == (546l));\n    }\n\n}\n"
completions: ["        for (n <- (y.toInt).to(x.toInt, -1)) {\n            if (n %\
    \ 2 == 0) return n\n        }\n        return -1", "        val min = min(x, y)\n\
    \        val max = max(x, y)\n        //for (i <- x to y) {\n        //    if\
    \ (i % 2 == 0) return i\n        //}\n        if (max % 2 == 0) max\n        else\
    \ if (min % 2 == 0) min\n        else -1", "        var chosen : Long = -1l\n\
    \        for (num <- x to y) {\n            if (num % 2 == 0) {\n            \
    \    chosen = num\n            }\n        }\n        return chosen", "       \
    \ var i = max(x, y)\n        while (i >= min(x, y)) {\n            if (i % 2 ==\
    \ 0) return i\n            i -= 1\n        }\n        return -1", "        if\
    \ (x % 2 == 0) {\n            val x2 = x\n            val y2 = if (y % 2 == 0)\
    \ y else y - 1\n            if (x2 > y2) -1 else y2\n        } else {\n      \
    \      val x2 = x + 1\n            val y2 = if (y % 2 == 0) y else y - 1\n   \
    \         if (x2 > y2) -1 else y2\n        }", "        // YOUR CODE GOES HERE\n\
    \        return -1", "        require(x >= 0 && y >= 0)\n        var max : Long\
    \ = -1\n        for (i <- x to y) {\n            if (i % 2 == 0 && i > max) max\
    \ = i\n        }\n        max", "        var (i, maxEven) = (x, -1l)\n       \
    \ while (i <= y) {\n            if (i % 2 == 0) maxEven = max(maxEven, i)\n  \
    \          i += 1\n        }\n        maxEven", "        if (x % 2 == 0) x\n \
    \       else if (x + 1 <= y) x + 1\n        else -1", "        if (x > y) {\n\
    \            -1\n        } else {\n            if (x % 2 == 0) x else x + 1\n\
    \        }", "        if (x > y) return -1\n        if (x % 2 == 0) return x\n\
    \        else return x + 1", "        if (x == y) {\n            if (x % 2 ==\
    \ 0) {\n                return x\n            } else {\n                return\
    \ -1\n            }\n        } else if (x < y) {\n            if (x % 2 == 0)\
    \ {\n                return max(x, chooseNum(x + 1, y))\n            } else {\n\
    \                return chooseNum(x + 1, y)\n            }\n        } else {\n\
    \            return -1\n        }", "        val range = x to y\n        if (range.exists(_\
    \ % 2 == 0)) {\n            val sorted_range = range.filter(_ % 2 == 0).toList.sorted\n\
    \            return sorted_range.last\n        }\n        return -1", "      \
    \  if (x > y) {\n            -1\n        } else {\n            if (x % 2 == 0)\
    \ {\n                x\n            } else {\n                chooseNum(x + 1,\
    \ y)\n            }\n        }", "        val z = x+y\n        if (z % 2 == 0\
    \ && x % 2 == 0) z / 2 else if (z % 2 == 0 && y % 2 == 0) z / 2 else -1", '        return
    0', "        if (x > y) {\n            return -1\n        }\n        else if (x\
    \ % 2 == 0) {\n            return x\n        }\n        else {\n            return\
    \ chooseNum(x + 1, y)\n        }", "        var i : Long = x;\n        var res\
    \ : Long = -1;\n        while (i <= y) {\n            if (i % 2 == 0) {\n    \
    \            res = i;\n            }\n            i = i + 1;\n        }\n    \
    \    return res;", "        // TODO: Fix this function to match the problem description\n\
    \        x", "      // This function takes a number x and returns the biggest\
    \ number that \n      // is even and is in the range [0, x]. If there's no such\
    \ number, then \n      // the function should return -1.\n      // For example:\n\
    \      // >>> x(12l)\n      // (12l)\n      // >>> x(13l)\n      // (12l)\n  \
    \    // >>> x(1l)\n      // (0l)\n      // >>> x(0l)\n      // (0l)\n      //\
    \ >>> x(-1l)\n      // (-1l)\n      def x(x : Long) : Long = {\n        if (x\
    \ < 0) -1 else if (x % 2 == 0) x else x - 1\n      }\n      if (x > y) -1 else\
    \ x(y)", "        require(x > 0 && y > 0)\n        if (x > y) {\n            -1\n\
    \        } else {\n            if (x % 2 == 0) {\n                x\n        \
    \    } else {\n                chooseNum(x + 1, y)\n            }\n        }",
  "        val lst = for (i <- x to y) yield i\n        lst.filter(_ % 2 == 0).reduceLeftOption(_\
    \ max _).getOrElse(-1)", '        // Your code here!', "        if (x < 0 || y\
    \ < 0) {\n            println(\"The function takes two positive numbers. Returning\
    \ -1.\")\n            return -1\n        }\n        var tmp : Long = max(x, y)\n\
    \        while (tmp >= min(x, y)) {\n            if (tmp % 2 == 0) {\n       \
    \         return tmp\n            }\n            tmp -= 1\n        }\n       \
    \ return -1", '        ((x to y).toList.filter(_ % 2 == 0)).max', "        if\
    \ (x <= y) {\n            val n = if (x % 2 == 0) x else x + 1\n            if\
    \ (n <= y) n else -1\n        } else -1", "        val (x, y) = (min(x, y), max(x,\
    \ y))\n        val xEven = x % 2 == 0\n        val yEven = y % 2 == 0\n      \
    \  if (xEven && yEven) {\n            return y\n        } else if (!xEven && !yEven)\
    \ {\n            return y - 1\n        } else {\n            return x\n      \
    \  }", "        if (x > y) -1\n        else {\n            var z = max(x, y)\n\
    \            while (z >= x) {\n                if (z % 2 == 0) return z\n    \
    \            z -= 1\n            }\n            -1\n        }", "        // Your\
    \ code goes here.\n        // return 42l;\n        var maxEven : Long = 0\n  \
    \      for (i <- x to y) {\n            if (i % 2 == 0) {\n                maxEven\
    \ = i\n            }\n        }\n        if (maxEven != 0) {\n            return\
    \ maxEven\n        }\n        else {\n            return -1\n        }", "   \
    \     if (x > y) -1\n        else {\n            val r = (x to y).filter(i =>\
    \ i % 2 == 0).max\n            if (r < x) -1 else r\n        }", "\tvar max =\
    \ -1L\n\tfor (i <- x to y) {\n\t    if (i % 2 == 0) {\n\t\tmax = i\n\t    }\n\t\
    }\n\treturn max", "        if (x > y) return -1\n        if (x % 2 == 0) x\n \
    \       else if (y % 2 == 0) y\n        else return -1", "        if (x > y) {\n\
    \            return -1\n        }\n        if (x % 2 == 0) {\n            return\
    \ x\n        }\n        return chooseNum(x + 1, y)", "        var result = -1l\n\
    \        if (x % 2 == 0) result = x\n        else if (x + 1 <= y) result = x +\
    \ 1\n        if (result == -1l && y % 2 == 0) result = y\n        result", " \
    \     if (x > y)\n        return -1\n      for (n <- x to y) {\n        if (n\
    \ % 2 == 0)\n          return n\n      }\n      return -1", "        for (i <-\
    \ (y to x by -1)) {\n            if (i % 2 == 0) return i\n        }\n       \
    \ return -1", "        if (x % 2 == 0) {\n            if (x <= y) x else -1\n\
    \        } else {\n            if (x + 1 <= y) x + 1 else -1\n        }", "  \
    \      val z = if (x % 2 == 0) x else x + 1\n        if (z > y) -1 else z", '        (x
    to y).filter(_ % 2 == 0).reduceOption((a, b) => max(a, b)).getOrElse(-1)', " \
    \       if (x % 2 == 0)\n            if (x > y)\n                -1\n        \
    \    else\n                x\n        else if (x + 1 > y)\n            -1\n  \
    \      else\n            x + 1", "        if (x > y) -1l\n        else if (x %\
    \ 2 == 0) x\n        else chooseNum(x + 1, y)", "        if (x % 2 == 0) {\n \
    \           var f = false\n            var i = x\n            while (i <= y) {\n\
    \                if (i % 2 == 0) {\n                    f = true\n           \
    \         return i\n                }\n                i += 1\n            }\n\
    \            if (!f) return -1\n        }\n        else {\n            var f =\
    \ false\n            var i = x + 1\n            while (i <= y) {\n           \
    \     if (i % 2 == 0) {\n                    f = true\n                    return\
    \ i\n                }\n                i += 1\n            }\n            if\
    \ (!f) return -1\n        }\n        return -1", "        if (x <= y) {\n    \
    \        if (x % 2 == 0) x\n            else if (y % 2 == 0) y\n            else\
    \ -1\n        }\n        else -1", '        if (x > y) -1l else (x + y - 1) &
    ~1', "        var even = x % 2 == 0\n        val start = if (even) x else x +\
    \ 1\n        val end = if (even) y else y - 1\n        if (end < start) -1 else\
    \ end", "        if (x % 2 == 0) return x\n        if (x % 2 == 1) {\n       \
    \     if (x + 1 > y) return -1\n            return x + 1\n        }\n        return\
    \ -1", '      throw new RuntimeException("Not implemented yet!")', "        if\
    \ (x <= y) {\n            if (x % 2 == 0)\n                x\n            else\n\
    \                chooseNum(x + 1, y)\n        }\n        else\n            -1",
  "        if (x > y) -1 else\n            (x to y).toList.filter(z => z % 2 == 0).sortWith(_\
    \ > _).head", "        var i = x\n        while (i <= y) {\n            if (i\
    \ % 2 == 0) return i\n            i += 1\n        }\n        return -1", "   \
    \     // YOUR CODE GOES HERE\n        var z = -1\n        for (a <- x to y) {\n\
    \            if (a % 2 == 0) z = a\n        }\n        z", "        if (x > y)\
    \ return -1\n        else if (x % 2 == 0) x\n        else if (x + 1 == y) return\
    \ -1\n        else chooseNum(x + 1, y)", "        if (x > y) {\n            return\
    \ -1\n        }\n        if (x % 2 == 0) {\n            return x\n        }\n\
    \        if (y % 2 == 0) {\n            return y\n        }\n        return -1",
  "        def chooseNumHelper(n : Long) : Long = n match {\n            case n if\
    \ n < x => -1\n            case n if n % 2 == 0 => n\n            case n => chooseNumHelper(n\
    \ - 1)\n        }\n        chooseNumHelper(y)", "        if (x > y) return -1\n\
    \        var z = x % 2\n        if (z == 0) return x\n        return chooseNum(x\
    \ + 1, y)", "        // If both x and y are equal\n        if (x == y) {\n   \
    \         // If x is even then return x.\n            if (x % 2 == 0) {\n    \
    \            return x\n            }\n            // Return -1 if x is odd.\n\
    \            else {\n                return -1\n            }\n        }\n   \
    \     // If x is less than y\n        else if (x < y) {\n            // If y is\
    \ even, then return y\n            if (y % 2 == 0) {\n                return y\n\
    \            }\n            // Else if y - 1 is even then return y - 1\n     \
    \       else if ((y - 1) % 2 == 0) {\n                return y - 1\n         \
    \   }\n            // Else if y - 2 is even then return y - 2\n            else\
    \ if ((y - 2) % 2 == 0) {\n                return y - 2\n            }\n     \
    \       // Else return -1.\n            else {\n                return -1\n  \
    \          }\n        }\n        // If x is greater than y\n        else {\n \
    \           // If x is even, then return x\n            if (x % 2 == 0) {\n  \
    \              return x\n            }\n            // Else if x - 1 is even then\
    \ return x - 1\n            else if ((x - 1) % 2 == 0) {\n                return\
    \ x - 1\n            }\n            // Else if x - 2 is even then return x - 2\n\
    \            else if ((x - 2) % 2 == 0) {\n                return x - 2\n    \
    \        }\n            // Else return -1.\n            else {\n             \
    \   return -1\n            }\n        }", "        if (x == y) {\n           \
    \ if (x % 2 == 0) return x\n            else return -1\n        }\n        var\
    \ lower = x\n        var upper = y\n        if (x > y) {\n            lower =\
    \ y\n            upper = x\n        }\n        var curr : Long = lower\n     \
    \   while (curr <= upper) {\n            if (curr % 2 == 0) return curr\n    \
    \        curr += 1\n        }\n        return -1", "      val numbers = new ArrayBuffer[Long]\n\
    \      for (i <- x to y) {\n        if (i % 2 == 0) numbers += i\n      }\n  \
    \    numbers.size match {\n        case 0 => -1\n        case 1 => numbers(0)\n\
    \        case _ => numbers.max\n      }", "        if (x % 2 == 0) {\n       \
    \     return x\n        }\n        else if (x+1 < y && (x+1) % 2 == 0) {\n   \
    \         return x+1\n        }\n        else {\n            return -1\n     \
    \   }", "        if (x % 2 == 0) x\n        else if (x + 1 == y) -1\n        else\
    \ chooseNum(x + 1, y)", "        var i = x\n        while (i <= y) {\n       \
    \     if (i % 2 == 0) return i\n            i += 1\n        }\n        return\
    \ -1", "        require(x > 0)\n        require(y > 0)\n        if (x > y) return\
    \ -1\n        return ((2 * (x / 2)).max(2 * (y / 2)))", "        var acc = -1l\n\
    \        var i = x\n        while (i <= y) {\n            if (i % 2 == 0) {\n\
    \                acc = i\n            }\n            i += 1\n        }\n     \
    \   acc", "        if (x > y)\n            -1\n        else if (x%2 == 0)\n  \
    \          x\n        else\n            chooseNum(x+1, y)", "        val z = x.to(y).filter(_\
    \ % 2 == 0).max\n        if (z == 0) -1\n        else z", '      (x to y).find(n
    => n % 2 == 0).getOrElse(-1)', "        var a = x\n        var b = y\n       \
    \ var max : Long = -1\n        if (a > b) {\n            var t = a\n         \
    \   a = b\n            b = t\n        }\n        while (a <= b) {\n          \
    \  if (a % 2 == 0) max = a\n            a += 1\n        }\n        return max",
  '        return -1', "        if (x < y)\n            if (x % 2 == 0) x\n      \
    \      else chooseNum(x + 1, y)\n        else if (x > y) chooseNum(y, x)\n   \
    \     else if (x % 2 == 0) x\n        else -1", "      var b = y - x + 1\n   \
    \   var v = new Array[Long](b.toInt)\n      for (i <- 0 until b.toInt) {\n   \
    \     v(i) = x + i\n      }\n      v = v.filter(i => i % 2 == 0)\n      if (v.length\
    \ > 0) {\n        v.max\n      } else {\n        -1\n      }", "        if (x\
    \ > y) -1l\n        else if (x % 2 == 0) x\n        else chooseNum(x + 1, y)",
  "        if (x > y) -1\n        else {\n            var upperBound : Long = max(x,\
    \ y)\n            while (upperBound % 2 != 0) upperBound -= 1\n            upperBound\n\
    \        }", "        if (x <= y) {\n            if (x % 2 == 0) x\n         \
    \   else chooseNum(x + 1, y)\n        }\n        else -1", "        var chooseNum\
    \ : Long = -1\n        for (i <- x to y) {\n            if (i % 2 == 0) chooseNum\
    \ = i\n        }\n        return chooseNum", "        val a = if (x % 2 == 0)\
    \ x else x + 1\n        if (a > y) return -1\n        else return a", "      \
    \  // TODO: Implement this function.\n        0", "        if (x > y) {\n    \
    \        -1\n        } else {\n            if (x % 2 == 0) {\n               \
    \ x\n            } else {\n                chooseNum(x + 1, y)\n            }\n\
    \        }", "        def chooseNum_helper(i : Long) : Long = {\n            if\
    \ (i % 2 == 0) i\n            else if (i > y) -1\n            else chooseNum_helper(i\
    \ + 1)\n        }\n        chooseNum_helper(x)", "        // Implement this function\n\
    \        if (x%2 == 0 && y%2 == 0) {\n            if (x <= y) x else y\n     \
    \   } else if (x%2 == 1 && y%2 == 1) {\n            if (x > y) (x - 1) else (y\
    \ - 1)\n        } else if (x%2 == 0 && y%2 == 1) {\n            if (x <= y - 1)\
    \ x else (y - 1)\n        } else {\n            if (x - 1 <= y) (x - 1) else y\n\
    \        }", "\t\t// Fast O(1) solution which is better if the input is big\n\t\
    \tval z = x + y\n\t\tif (z % 2 == 0) z / 2 else z / 2 - 1\n\t\t\n\t\t// Brute\
    \ force O(n) solution\n\t\t// (x to y).foldLeft(-1l)((n, m) => if (m % 2 == 0)\
    \ m else n)", "        // The empty list already satisfies the condition.\n  \
    \      val nums = List()\n        // Now, let's generate a list of numbers starting\
    \ from the lowest\n        // number and ending with the highest number.\n   \
    \     val range = nums.range(x, y + 1)\n        // After that, we filter out all\
    \ odd numbers from the list.\n        val evens = range.filter((n) => n % 2 ==\
    \ 0)\n        // If the list of even numbers is not empty, then we get the maximum\n\
    \        // number from it.\n        val largestEven = evens.max((n) => n)\n \
    \       // If the list of even numbers is empty, then the largest even number\n\
    \        // is -1.\n        val result = if(evens.length > 0) largestEven else\
    \ -1\n        // Return the result.\n        result", '        return -1', " \
    \       val bignum = BigInt(max(x, y))\n        // Is this even?\n        if (bignum\
    \ % 2 == 0) {\n            return bignum.toLong\n        }\n        // Is this\
    \ close to a number that is even?\n        if (bignum + 1 == BigInt(0)) {\n  \
    \          return -1\n        }\n        if (bignum + 1 % 2 == 0) {\n        \
    \    return (bignum + 1).toLong\n        }\n        return -1", "        val even\
    \ = (2l to y by 2).toList\n        even.takeWhile(_ <= y).filter(_ >= x).lastOption.getOrElse(-1l)",
  "        // Your code here:\n        var i = y \n        while (i >= x) {\n    \
    \        if (i % 2 == 0) return i\n            i -= 1\n        }\n        return\
    \ -1", "        if (x % 2 == 0)\n            x\n        else if (x + 1 == y)\n\
    \            -1\n        else\n            chooseNum(x + 1, y)", "        val\
    \ min = min(x, y)\n        val max = max(x, y)\n        var biggestEven = -1l\n\
    \        for (i <- min to max) {\n            if (i % 2 == 0) {\n            \
    \    biggestEven = i\n            }\n        }\n        return biggestEven", " \
    \       val evens = (x to y).filter(n => n % 2 == 0)\n        if (evens.isEmpty)\n\
    \            -1\n        else\n            evens.max", "        if (x > y) -1\n\
    \        else if (x % 2 == 0) x\n        else chooseNum(x + 1, y)", "      var\
    \ res : Long = -1\n      var i : Long = y\n      while (i >= x) {\n        if\
    \ (i % 2 == 0) {\n          res = i\n          return res\n        }\n       \
    \ i -= 1\n      }\n      return res", "        if (x > y) return -1\n        var\
    \ best = 0l\n        for (i <- x to y) if (i % 2 == 0) best = i\n        if (best\
    \ != 0) return best\n        else return -1", "        val l : Long = (x % 2)\
    \ + (y % 2)\n        if (l == 0) {\n            if (x == y) {\n              \
    \  x\n            } else {\n                if (x > y) {\n                   \
    \ chooseNum(y, x)\n                } else {\n                    y - 1\n     \
    \           }\n            }\n        } else {\n            if (l == 1) {\n  \
    \              if (x > y) {\n                    chooseNum(y, x)\n           \
    \     } else {\n                    y - 2\n                }\n            } else\
    \ {\n                if (x == y) {\n                    -1\n                }\
    \ else {\n                    if (x > y) {\n                        chooseNum(y,\
    \ x)\n                    } else {\n                        y - 2\n          \
    \          }\n                }\n            }\n        }", "        if (x > y)\
    \ -1 else {\n            var n = x\n            while (n <= y) {\n           \
    \     if (n % 2 == 0) return n\n                n += 1\n            }\n      \
    \      -1\n        }", "        if (x < y)\n            if (x % 2 == 0)\n    \
    \            x\n            else\n                chooseNum(x + 1, y)\n      \
    \  else if (x == y)\n            if (x % 2 == 0)\n                x\n        \
    \    else\n                -1\n        else\n            -1", "\tvar z = y\n\t\
    while (z >= x) {\n\t    if (z % 2 == 0) {\n\t\treturn z\n\t    }\n\t    z -= 1\n\
    \t}\n\treturn -1", '        ???', "        val n = max(x, y)\n        var i =\
    \ n\n        while (i >= min(x, y)) {\n            if (i % 2 == 0) return i\n\
    \            i -= 1\n        }\n        -1", "      var ret = -1l\n      for (i\
    \ <- x to y) {\n        if (i % 2 == 0) ret = i\n      }\n      ret", "      \
    \  var n : Long = x\n        while (n <= y) {\n            if (n % 2 == 0) return\
    \ n\n            n += 1\n        }\n        return -1", "      if (x%2 == 0)\n\
    \        x\n      else if (x == y && x%2 == 1)\n        -1\n      else\n     \
    \   chooseNum(x+1, y)", "        val evens = (x to y).filter(_ % 2 == 0)\n   \
    \     if (evens.isEmpty) {\n            -1\n        } else {\n            evens.last\n\
    \        }", '        ???', "        // IMPLEMENT ME\n        return 0l", "  \
    \      var (x1, y1) = (x, y)\n        if (x1 > y1) {\n            (x1, y1) = (y1,\
    \ x1)\n        }\n        var result = -1l\n        while (x1 <= y1) {\n     \
    \       if (x1 % 2 == 0) {\n                result = x1\n            }\n     \
    \       x1 += 1\n        }\n        result", "        val range = x to y\n   \
    \     val evenNumbers = range.filter(n => n % 2 == 0)\n        if (evenNumbers.size\
    \ == 0) {\n            -1\n        } else {\n            evenNumbers.max\n   \
    \     }", "        if (x == y) return -1\n        var z = if (x % 2 == 0) x else\
    \ x + 1\n        while (z < y) {\n            if (z % 2 == 0) return z\n     \
    \       z += 1\n        }\n        -1", "        if (x > y) {\n            return\
    \ -1\n        }\n        if (x % 2 == 0) {\n            return x\n        }\n\
    \        return chooseNum(x + 1, y)", '        if (x % 2 == 0) x else if (x ==
    y) -1 else chooseNum(x + 1, y)', "\t\tif (x > y) -1l\n\t\telse if (x % 2 == 0)\
    \ x\n\t\telse chooseNum(x + 1, y)", "      if (x > y) -1\n      else {\n     \
    \   val z = x + x % 2\n        if (z > y) -1\n        else z\n      }", "    \
    \    if (x > y) return -1\n        if (x % 2 == 0) return x\n        if (y % 2\
    \ == 0) return y\n        return -1", "        var res = -1L\n        for (i <-\
    \ x to y) {\n            if (i % 2 == 0) res = i\n        }\n        res", " \
    \       val even = (n : Long) => n % 2 == 0\n        var max = -1l\n        for\
    \ (i <- x to y) {\n            if (even(i)) {\n                max = i\n     \
    \       }\n        }\n        max", "        if (x%2 != 0) {\n            if (y%2\
    \ != 0) return -1\n            else return y\n        }\n        else return x",
  "        var z = x\n        if (x % 2 == 0) z -= 1\n        var flag = true\n  \
    \      while (z < y && flag) {\n            if (z % 2 == 0) flag = false\n   \
    \         else z += 2\n        }\n        if (flag) -1 else z", "        if (x\
    \ % 2 == 0) x\n        else if (x + 1 == y) -1\n        else chooseNum(x + 1,\
    \ y)", "        // you're free to define other helper functions as necessary\n\
    \        def helper(n : Long) : Long = {\n            if (n > y) -1\n        \
    \    else if (n % 2 == 0) n\n            else helper(n + 1)\n        }\n     \
    \   helper(x)", "        if (x % 2 == 0) {\n            x\n        } else if (x\
    \ + 1 == y) {\n            -1\n        } else {\n            chooseNum(x + 1,\
    \ y)\n        }", "        val t = if (x % 2 == 0) x else x + 1\n        if (t\
    \ > y) -1 else t", "        val lower = max(x, y)\n        val upper = min(x,\
    \ y)\n        var isEven = true\n        while (isEven && lower >= upper) {\n\
    \            if (lower % 2 == 0) isEven = false\n            else lower -= 1\n\
    \        }\n        if (isEven) -1 else lower", "      // Fill in the code below.\n\
    \      var nums = List[Long]()\n      for (i <- x to y) {\n        if (i % 2 ==\
    \ 0) nums = i :: nums\n      }\n      if (nums.length == 0) -1 else nums.max",
  "        val a = if (x > y) y else x\n        val b = if (x > y) x else y\n    \
    \    val n = (b - a + 1) / 2\n        if (n == 0) -1 else (a + (if (b % 2 == 0)\
    \ b else b - 1)) / 2", "        var ans : Long = -1\n        var best : Long =\
    \ -1\n        for (i <- x to y) {\n            if (i % 2 == 0) {\n           \
    \     ans = i\n                best = i\n            }\n        }\n        return\
    \ best", "        var n = if (x % 2 == 0) x else x + 1\n        if (n >= y) -1\
    \ else if (n % 2 == 0) n else n + 1", '        // WRITE YOUR CODE HERE', "\ty\
    \ match {\n\t    case y if y % 2 == 0 => y\n\t    case y if y == x => -1\n\t \
    \   case y => chooseNum(x, y - 1)\n\t}", "        val rng = (x to y).reverse\n\
    \        rng.filter(n => n % 2 == 0).headOption match {\n            case Some(e)\
    \ => e\n            case None => -1\n        }", "        var k = max(x, y)\n\
    \        while (k >= x) {\n            if (k % 2 == 0) return k\n            k\
    \ -= 1\n        }\n        return -1", "        if (x % 2 == 0) x\n        else\
    \ if (x + 1 == y) {\n            if (y % 2 == 0) y\n            else -1\n    \
    \    }\n        else chooseNum(x + 1, y)", "        if (x == y)\n            if\
    \ (x % 2 == 0)\n                x\n            else\n                -1\n    \
    \    else\n            if (x % 2 == 0)\n                if (y % 2 == 0)\n    \
    \                max(x, y)\n                else\n                    max(x, chooseNum(x\
    \ + 1, y - 1))\n            else\n                chooseNum(x + 1, y)", "    \
    \    // REPLACE THIS LINE WITH YOUR CODE\n        if (x%2 != 0 && y%2 != 0) {\n\
    \            return -1\n        } else if (x%2 == 0 && y%2 == 0) {\n         \
    \   return max(x, y)\n        } else if (x%2 == 0 && y%2 != 0) {\n           \
    \ return x\n        } else {\n            return y\n        }", "        // YOUR\
    \ CODE HERE\n        (y-x).toInt/2+x", "        // BEGIN SOLUTION\n        (x\
    \ to y).filter(_ % 2 == 0).maxOption.getOrElse(-1)\n        // END SOLUTION",
  "        if (x % 2 == 0) x\n        else if (x + 1 == y) y\n        else if (x +\
    \ 1 < y) x + 2\n        else -1", "        if (x > y) -1\n        else {\n   \
    \         val range = (x to y).toList\n            var finalNum = -1l\n      \
    \      for (i <- range) {\n                if (i % 2 == 0) finalNum = i\n    \
    \        }\n            finalNum\n        }", "      if (x > y) -1\n      else\
    \ {\n        val m = max(x, y)\n        if (m % 2 == 0) m\n        else chooseNum(x,\
    \ m - 1)\n      }", "        var sum: Long = 0;\n        if (x % 2 == 0) {\n \
    \           sum = x;\n        } else {\n            sum = x + 1;\n        }\n\
    \        if (sum > y) {\n            return -1;\n        }\n        return sum;",
  "        if (x > y) -1\n        else if (x % 2 == 0) x\n        else chooseNum(x\
    \ + 1, y)", "        val best = if (x % 2 == 0) x else x + 1\n        if (best\
    \ <= y) best else -1", "        if (x % 2 == 0) x\n        else if (x + 1 == y)\
    \ if (y % 2 == 0) y else -1\n        else chooseNum(x + 1, y)", "        var result\
    \ = -1l\n        var i = if (x % 2 == 0) x else x + 1\n        while (i <= y)\
    \ {\n            result = i\n            i += 2\n        }\n        result", " \
    \       // Replace 0 with the correct return value.\n        if (x % 2 == 0) x\
    \ else chooseNum(x + 1, y)", '        return y - (y % 2) + 1 - x + (x % 2)', " \
    \       var bigEven = -1l\n        var i = x\n        while (i <= y) {\n     \
    \       if (i % 2 == 0) {\n                bigEven = i\n            }\n      \
    \      i += 1\n        }\n        return bigEven", "        for (i <- x to y if\
    \ i % 2 == 0) return i\n        -1", "      if (x == y) {\n        if (x % 2 ==\
    \ 0) return x\n        else return -1\n      }\n      var max = 0l\n      for\
    \ (i <- x until y+1) {\n        if (i % 2 == 0) {\n          if (i > max) max\
    \ = i\n        }\n      }\n      if (max == 0) return -1\n      else return max",
  "        if (x % 2 == 0) {\n            x\n        } else if (x+1 <= y) {\n    \
    \        x+1\n        } else {\n            -1\n        }", "        // *************************\n\
    \        // DO NOT TOUCH THIS FUNCTION\n        // *************************\n\
    \        def chooseNumImpl(x : Long, y : Long) : Long = {\n            if (x ==\
    \ y) {\n                if (x % 2 == 0)\n                    x\n             \
    \   else\n                    -1\n            } else {\n                if (x\
    \ % 2 == 0)\n                    x\n                else\n                   \
    \ chooseNumImpl(x + 1, y)\n            }\n        }\n        chooseNumImpl(x,\
    \ y)", "        if (x > y) -1l\n        else if (x % 2 == 0) x\n        else chooseNum(x\
    \ + 1, y)", "        if (x > y) {\n            // Helper function that returns\
    \ the biggest even number in the range\n            // [2, x] inclusive.\n   \
    \         def f(x : Long) : Long = {\n                if (x == 2) 2\n        \
    \        else if (x % 2 == 0) x\n                else f(x - 1)\n            }\n\
    \            if (y >= 2) f(y)\n            else -1\n        } else {\n       \
    \     // Helper function that returns the biggest even number in the range\n \
    \           // [x, 2] inclusive.\n            def f(x : Long) : Long = {\n   \
    \             if (x == 2) 2\n                else if (x % 2 == 0) x\n        \
    \        else f(x + 1)\n            }\n            if (x >= 2) f(x)\n        \
    \    else -1\n        }", "        // BEGIN SOLUTION\n        if (x%2==0)\n  \
    \          x\n        else\n            x+1\n        // END SOLUTION", "     \
    \   val x1 = max(x, y)\n        val y1 = min(x, y)\n        if (x1 % 2 == 0) {\n\
    \            x1\n        } else if (x1 - 1 >= y1 && (x1 - 1) % 2 == 0) {\n   \
    \         x1 - 1\n        } else {\n            -1\n        }", "        // Write\
    \ your code here, and replace the following line with your code.\n        -1",
  "        if (x % 2 == 0) x\n        else if (x + 1 == y) y\n        else if (x +\
    \ 1 > y) -1\n        else chooseNum(x + 1, y)", "        // This function takes\
    \ a number z and returns true if z is even and\n        // false otherwise.\n\
    \        def isEven(z : Long) : Boolean = {\n            if (z % 2 == 0) {\n \
    \               true\n            } else {\n                false\n          \
    \  }\n        }\n        // This function takes a number z and returns the biggest\
    \ even number\n        // that is less than or equal to z. If there's no such\
    \ number, then\n        // the function should return -1.\n        def closestEven(z\
    \ : Long) : Long = {\n            if (isEven(z)) {\n                z\n      \
    \      } else {\n                closestEven(z - 1)\n            }\n        }\n\
    \        // This function takes a number z and returns the smallest even number\n\
    \        // that is greater than or equal to z. If there's no such number, then\n\
    \        // the function should return -1.\n        def farthestEven(z : Long)\
    \ : Long = {\n            if (isEven(z)) {\n                z\n            } else\
    \ {\n                farthestEven(z + 1)\n            }\n        }\n        if\
    \ (x > y) {\n            -1\n        } else if (closestEven(x) == -1) {\n    \
    \        -1\n        } else if (farthestEven(y) == -1) {\n            -1\n   \
    \     } else if (closestEven(x) > farthestEven(y)) {\n            -1\n       \
    \ } else {\n            farthestEven(y)\n        }", "      if (x > y) return\
    \ -1\n      for (i <- x to y) {\n        if (i % 2 == 0) return i\n      }\n \
    \     return -1", "        // Implement the body of this function so that it returns\n\
    \        // the correct value.\n        -1", "        if (x > y) return -1\n \
    \       for (z <- y to x by -1) {\n            if (z % 2 == 0) return z\n    \
    \    }\n        return -1", "      val l = min(x, y)\n      val h = max(x, y)\n\
    \      if (l % 2 == 0) l\n      else if (h % 2 == 0) h\n      else -1", "    \
    \    if (x <= y) {\n            if (x % 2 == 0) x\n            else chooseNum(x\
    \ + 1, y)\n        }\n        else -1", "        // The core of the problem can\
    \ be solved with a math trick.\n        // Note that if x >= 2 and y >= 2, then:\n\
    \        // (x+y) mod 2 = x mod 2 + y mod 2\n        // Let's call (x+y) mod 2\
    \ the parity of x+y.\n        // Now suppose the parity of x+y is 0. \n      \
    \  // Then x+y is even, and it is the biggest even number in the range [x, y].\n\
    \        // Now suppose the parity of x+y is 1. \n        // Then we should subtract\
    \ one from y and call the function again.\n        // But it's possible that we're\
    \ subtracting one from 2.\n        // But in that case we can just return -1 right\
    \ away.\n        if (x < 0 || y < 0) {\n            throw new IllegalArgumentException(\"\
    x and y must be positive.\")\n        }\n        else if (x > y) {\n         \
    \   -1\n        }\n        else if (x == y) {\n            // The two numbers\
    \ are equal. It's either even or odd.\n            if (x % 2 == 0) {\n       \
    \         x\n            }\n            else {\n                -1\n         \
    \   }\n        }\n        else {\n            // x < y.\n            // We should\
    \ add them together and check the parity.\n            if ((x + y) % 2 == 0) {\n\
    \                // The sum is even.\n                x + y\n            }\n \
    \           else {\n                // The sum is odd. We need to subtract one\
    \ from y and call the function again.\n                if (y == 2) {\n       \
    \             // y is equal to 2. We need to return -1.\n                    -1\n\
    \                }\n                else {\n                    // y > 2. We can\
    \ call the function again.\n                    chooseNum(x, y - 1)\n        \
    \        }\n            }\n        }", "        if (x%2 == 0) x\n        else\
    \ if (x+1 <= y) x+1\n        else -1", "        var result = -1l\n        for\
    \ (i <- x to y if i % 2 == 0) result = i\n        result", "      if (x > y) {\
    \ return -1 }\n      else if (x == y) { return (x % 2 == 0) ? x : -1 }\n     \
    \ else {\n        return chooseNum(x + 1, y)\n      }", '        (x to y).filter(x
    => x % 2 == 0).max', "        var x = x\n        while (x <= y) {\n          \
    \  if (x % 2 == 0) {\n                return x\n            }\n            x +=\
    \ 1\n        }\n        return -1", "        if (x > y) -1\n        else if (x\
    \ % 2 == 0) x\n        else chooseNum(x + 1, y)", "        val l = x + (if (x\
    \ % 2 == 0) 0 else 1)\n        val r = y - (if (y % 2 == 0) 0 else 1)\n      \
    \  if (l > r) -1 else r", "        var maxEven = -1l\n        var i = x\n    \
    \    while (i <= y) {\n            if (i % 2 == 0) {\n                maxEven\
    \ = i\n            }\n            i += 1\n        }\n        return maxEven",
  "        val a = if (x%2 == 0) x else x+1\n        if (a > y) -1 else if (a == y)\
    \ a else chooseNum(a+2, y)", "        var result : Long = -1\n        for (i <-\
    \ x to y) {\n            if (i % 2 == 0) {\n                result = i\n     \
    \       }\n        }\n        return result", "        val range = x to y\n  \
    \      val evens = range.filter(x => x % 2 == 0)\n        if (evens.isEmpty) -1\
    \ else evens.last", "        // The range to iterate over is [x, y] inclusive\n\
    \        val range = x to y\n        // You can use 'if' as an expression in Scala.\n\
    \        // The expression following 'if' is the returned value.\n        if (x\
    \ > y) {\n            -1\n        } else {\n            // Iterate over the range.\n\
    \            for (n <- range) {\n                // If n is even, then return\
    \ it.\n                if (n % 2 == 0) {\n                    return n\n     \
    \           }\n            }\n            // If we get here, then there's no even\
    \ number in the range [x, y].\n            -1\n        }", '        ???', "  \
    \      if (x % 2 == 0) {\n            if (x <= y) {\n                x\n     \
    \       } else {\n                chooseNum(x - 1, y)\n            }\n       \
    \ } else {\n            chooseNum(x + 1, y)\n        }", "        if (x == y)\
    \ return -1\n        var m : Long = x\n        while (m % 2 != 0) m += 1\n   \
    \     if (m <= y) return m\n        else return -1", "        var ans = -1l\n\
    \        val max = x.max(y)\n        val min = x.min(y)\n        for (i <- min\
    \ to max) {\n            if (i % 2 == 0) {\n                ans = i\n        \
    \    }\n        }\n        ans", "        if (x % 2 == 0) {\n            if (x\
    \ > y) -1 else x\n        } else if (x + 1 > y) -1 else x + 1", "        var a\
    \ = y\n        while (a >= x) {\n            if (a % 2 == 0) return a\n      \
    \      a -= 1\n        }\n        return -1", "        if (x > y) return -1\n\
    \        if (x % 2 == 0) return x\n        return chooseNum(x + 1, y)", "    \
    \    require(x > 0 && y > 0)\n        // Fill in here\n        for (i <- y to\
    \ x by -1) {\n            if (i % 2 == 0) return i\n        }\n        -1", " \
    \       var maxEven : Long = -1\n        for (i <- x to y) {\n            if (i\
    \ % 2 == 0) {\n                maxEven = i\n            }\n        }\n       \
    \ return maxEven", "        if (x > y) {\n            return -1\n        }\n \
    \       if (x == y) {\n            if (x % 2 == 0) {\n                return x\n\
    \            } else {\n                return -1\n            }\n        }\n \
    \       var res = -1\n        for (i <- x to y) {\n            if (i % 2 == 0)\
    \ {\n                res = i\n            }\n        }\n        return res", '        throw
    new NotImplementedError', "        val ans = (x to y).filter(n => n % 2 == 0).max\n\
    \        if (ans == 0) {\n            return -1\n        }\n        return ans",
  "        // TODO: Implement the chooseNum function.\n        ???", "        // TODO\
    \ - Use recursion to solve this problem\n        if (x <= y) {\n            if\
    \ (x % 2 == 0)\n                x\n            else\n                chooseNum(x\
    \ + 1, y)\n        }\n        else\n            -1", "        if (x % 2 == 0)\
    \ x\n        else if (x + 1 > y) -1\n        else chooseNum(x + 1, y)", "    \
    \    if (x % 2 == 0)\n            if (x == y)\n                x\n           \
    \ else\n                chooseNum(x + 1, y)\n        else\n            if (x ==\
    \ y)\n                -1\n            else\n                chooseNum(x + 1, y)",
  "        if (x % 2 == 0) {\n            if (x <= y) x else -1\n        } else {\n\
    \            if (x + 1 <= y) x + 1 else -1\n        }", "        if (x > y) return\
    \ -1;\n        val sqrtx = sqrt(x);\n        val sqrty = sqrt(y);\n        val\
    \ ceilx = ceil(sqrtx);\n        val floory = floor(sqrty);\n        if (ceilx\
    \ == floory) {\n            val floorx = floor(sqrtx);\n            if (floorx\
    \ % 2 == 0) {\n                val root = floorx;\n                return root\
    \ * root;\n            } else {\n                val root = floorx + 1;\n    \
    \            return root * root;\n            }\n        } else {\n          \
    \  val floorx = floor(sqrtx);\n            val ceily = ceil(sqrty);\n        \
    \    val root = if (floorx % 2 == 0) floorx else floorx + 1;\n            return\
    \ root * root;\n        }", "        if (x == y)\n            if (x % 2 == 0)\n\
    \                x\n            else\n                -1\n        else if (x >\
    \ y)\n            -1\n        else\n            chooseNum(x + 1, y)", "      \
    \  var x_ = x\n        var y_ = y\n        var z = -1l\n        if (x > y) {\n\
    \            x_ = y\n            y_ = x\n        }\n        while (x_ <= y_) {\n\
    \            if (x_ % 2 == 0) {\n                z = x_\n            }\n     \
    \       x_ += 1\n        }\n        return z", '        ???', "        if (x >\
    \ y) {\n            return -1\n        }\n        else if (x == y) {\n       \
    \     if (x % 2 == 0) {\n                return x\n            }\n           \
    \ else {\n                return -1\n            }\n        }\n        else {\n\
    \            if (x % 2 == 0) {\n                return x\n            }\n    \
    \        else {\n                return chooseNum(x + 1, y)\n            }\n \
    \       }", "        if (x > y) return -1\n        if (x % 2 == 0) return x\n\
    \        return chooseNum(x + 1, y)", '        throw new Exception()', "     \
    \   // Since x and y are positive numbers, then one of them should be the\n  \
    \      // biggest even number.\n        if (x % 2 == 0) {\n            // x is\
    \ even\n            if (y % 2 == 0) {\n                // y is even\n        \
    \        // both x and y are even\n                val maxNum = max(x, y)\n  \
    \              return maxNum\n            } else {\n                // y is odd\n\
    \                // x is even and y is odd\n                val maxNum = max(x,\
    \ y - 1)\n                return maxNum\n            }\n        } else {\n   \
    \         // x is odd\n            if (y % 2 == 0) {\n                // y is\
    \ even\n                // x is odd and y is even\n                val maxNum\
    \ = max(x + 1, y)\n                return maxNum\n            } else {\n     \
    \           // y is odd\n                // both x and y are odd\n           \
    \     val maxNum = max(x + 1, y - 1)\n                return maxNum\n        \
    \    }\n        }", "        if (x == y) {\n            if (x % 2 == 0) x else\
    \ -1\n        } else {\n            if (x % 2 == 0) \n                chooseNum(x\
    \ + 1, y) \n            else\n                chooseNum(x + 2, y)\n        }",
  "        var i : Long = min(x, y)\n        var j : Long = max(x, y)\n        if\
    \ (i % 2 == 1) i += 1\n        if (j % 2 == 1) j -= 1\n        if (i <= j) i else\
    \ -1"]
stop_tokens:
- "\n    }\n"
