name: HumanEval_13_greatest_common_divisor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l),\
  \ (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n\
  \    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l),\
  \ (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n  \
  \  assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l),\
  \ (60l)) == (12l));\n    }\n\n}\n"
completions: ["        if (b == 0) return a\n        greatestCommonDivisor(b, a %\
    \ b)", "        if (b == 0) return a\n        return greatestCommonDivisor(b,\
    \ a % b)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "   \
    \     def gcd(a : Long, b : Long) : Long = {\n            if (b == 0) a else gcd(b,\
    \ a % b)\n        }\n        gcd(a, b)", "        var aa = a\n        var bb =\
    \ b\n        while (aa > 0) {\n            val tmp = aa\n            aa = bb %\
    \ aa\n            bb = tmp\n        }\n        return bb", '        if (b == 0)
    a else greatestCommonDivisor(b, a % b)', '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "     \
    \   if (b == 0) return a\n        else return greatestCommonDivisor(b, a % b)",
  '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if (b ==
    0) a else greatestCommonDivisor(b, a % b)', '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "     \
    \   val r = (a % b).toLong\n        if (r == 0) b else greatestCommonDivisor(b,\
    \ r)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "       \
    \ if (b == 0) {\n            return a\n        }\n        return greatestCommonDivisor(b,\
    \ a % b)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', '        if (b == 0) a else
    greatestCommonDivisor(b, a % b)', '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "     \
    \   var (x, y) = (a, b)\n        while (y != 0) {\n            val z = x % y\n\
    \            x = y\n            y = z\n        }\n        x", "        def gcd(x\
    \ : Long, y : Long) : Long = if (y == 0) x else gcd(y, x % y)\n        gcd(a,\
    \ b)", "        def gcd(a : Long, b : Long) : Long = if (b == 0) a else gcd(b,\
    \ a % b)\n        gcd(a, b)", '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "        val pair = (a, b)\n        pair match {\n            case (x,\
    \ y) if (x == y) => x\n            case (x, y) if (x > y) => greatestCommonDivisor(x\
    \ - y, y)\n            case (x, y) if (x < y) => greatestCommonDivisor(x, y -\
    \ x)\n        }", "        var x = a; var y = b\n        while (x != y) {\n  \
    \          if (x > y) x -= y\n            else y -= x\n        }\n        x",
  '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if (b ==
    0) a else greatestCommonDivisor(b, a % b)', "        val c = abs(a)\n        val\
    \ d = abs(b)\n        if (c == 0) d\n        else if (d == 0) c\n        else\
    \ if (c < d) greatestCommonDivisor(c, d % c)\n        else greatestCommonDivisor(d,\
    \ c % d)", "        if (b == 0) return a\n        return greatestCommonDivisor(b,\
    \ a % b)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', "        val result = (a, b)\
    \ match {\n            case (a, b) if (a == b) => a\n            case (a, b) if\
    \ (a > b) => greatestCommonDivisor(a - b, b)\n            case (a, b) if (a <\
    \ b) => greatestCommonDivisor(a, b - a)\n        }\n        return result", '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', "        def gcd(a : Long, b\
    \ : Long) : Long = {\n            if (b == 0) a else gcd(b, a % b)\n        }\n\
    \        gcd(a, b)", "        if (b == 0) {\n            return a\n        }\n\
    \        return greatestCommonDivisor(b, a % b)", "        if (b == 0) {\n   \
    \         return a\n        }\n        return greatestCommonDivisor(b, a % b)",
  '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if (b ==
    0) a else greatestCommonDivisor(b, a % b)', '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "        val min = min(a, b)\n        val max = max(a, b)\n        var\
    \ m = max\n        var n = min\n        var r = 1l\n        while (r != 0) {\n\
    \            r = m % n\n            m = n\n            n = r\n        }\n    \
    \    return m", "        if (b == 0) return a;\n        return greatestCommonDivisor(b,\
    \ a % b);", '        return if (b == 0) a else greatestCommonDivisor(b, a % b)',
  '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '      if (b == 0)
    a else greatestCommonDivisor(b, a % b)', "        var big = max(a, b)\n      \
    \  var small = min(a, b)\n        var r = big % small\n        while (r != 0)\
    \ {\n            big = small\n            small = r\n            r = big % small\n\
    \        }\n        return small", "        if (b == 0) return a\n        greatestCommonDivisor(b,\
    \ a % b)", "        val t = gcd(a, b)\n        if (t < 0) t * -1 else t", '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', "        val aPrime = abs(a)\n\
    \        val bPrime = abs(b)\n        if (aPrime > bPrime) {\n            val\
    \ c = aPrime % bPrime\n            if (c == 0) {\n                bPrime\n   \
    \         } else {\n                greatestCommonDivisor(bPrime, c)\n       \
    \     }\n        } else {\n            val c = bPrime % aPrime\n            if\
    \ (c == 0) {\n                aPrime\n            } else {\n                greatestCommonDivisor(aPrime,\
    \ c)\n            }\n        }", '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', "        def greatestCommonDivisor(a\
    \ : Long, b : Long, c : Long) : Long = if (b % c == 0 && a % c == 0) c else greatestCommonDivisor(a,\
    \ b, c - 1)\n        if (a < b) greatestCommonDivisor(b, a, min(a, b)) else greatestCommonDivisor(a,\
    \ b, min(a, b))", '        if (b == 0) a else greatestCommonDivisor(b, a % b)',
  "        val gcd = (for (d <- (1l to abs(a)).reverse) yield {\n            if (a\
    \ % d == 0 && b % d == 0) d\n            else -1\n        }).filter(_ > 0).head\n\
    \        if (gcd > 0) gcd\n        else {\n            if (a > b) greatestCommonDivisor(b,\
    \ a)\n            else 1\n        }", "        var result = 1l\n        for (i\
    \ <- 2l to min(a, b)) {\n            if (a % i == 0 && b % i == 0) result = i\n\
    \        }\n        return result", "        if (b == 0) return a\n        return\
    \ greatestCommonDivisor(b, a % b)", "        var n = a\n        var m = b\n  \
    \      while (m != 0) {\n            var c = n % m\n            n = m\n      \
    \      m = c\n        }\n        return n", "        var x = a\n        var y\
    \ = b\n        while (x != y) {\n            if (x > y) x -= y\n            else\
    \ y -= x\n        }\n        x", '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "        // Write a function that returns the greatest common divisor\
    \ of two integers a and b\n        if (b == 0) a else greatestCommonDivisor(b,\
    \ a % b)", "        if (b == 0) return a\n        greatestCommonDivisor(b, a %\
    \ b)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', '        if (b == 0) a else
    greatestCommonDivisor(b, a % b)', "        var (p, q) = (a, b)\n        while\
    \ (q != 0) {\n            val r = p % q\n            p = q\n            q = r\n\
    \        }\n        p", '        if (b == 0) a else greatestCommonDivisor(b, a
    % b)', '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "       \
    \ def greatestCommonDivisorAcc(x : Long, y : Long, z : Long) : Long = {\n    \
    \        if (x % z == 0 && y % z == 0) z\n            else greatestCommonDivisorAcc(x,\
    \ y, z - 1)\n        }\n        greatestCommonDivisorAcc(max(a, b), min(a, b),\
    \ min(a, b))", "        if (b == 0) {\n            return a\n        }\n     \
    \   else {\n            return greatestCommonDivisor(b, a % b)\n        }", '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', "        def gcd(x : Long, y\
    \ : Long) : Long = if (y == 0) x else gcd(y, x % y)\n        gcd(a, b)", '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', '        if (b == 0) a else
    greatestCommonDivisor(b, a % b)', '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "      if (b == 0) return a\n      else return greatestCommonDivisor(b,\
    \ a % b)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', "        if (b == 0) return\
    \ a\n        return greatestCommonDivisor(b, a % b)", "        val min = min(a,\
    \ b)\n        val max = max(a, b)\n        if (min == 0) max\n        else greatestCommonDivisor(min,\
    \ max % min)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', " \
    \       var m = a; var n = b\n        while (m != 0 && n != 0) {\n           \
    \ if (m > n) m %= n else n %= m\n        }\n        if (m == 0) n else m", " \
    \       if (b == 0) return a\n        return greatestCommonDivisor(b, a % b)",
  "        if (b == 0) return a\n        return greatestCommonDivisor(b, a % b)",
  '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if (b ==
    0) a else greatestCommonDivisor(b, a % b)', '      if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "        val r = a % b\n        if (r == 0) b else greatestCommonDivisor(b,\
    \ r)", '      if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', "        if (b == 0) return\
    \ a\n        return greatestCommonDivisor(b, a % b)", "        if (b == 0) return\
    \ a;\n        return greatestCommonDivisor(b, a % b);", "        if (b == 0) return\
    \ a\n        return greatestCommonDivisor(b, a % b)", "        if (b == 0) {\n\
    \            return a\n        }\n        return greatestCommonDivisor(b, a %\
    \ b)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        return
    greatestCommonDivisor(b, a % b)', "        def _greatestCommonDivisor(x : Long,\
    \ y : Long) : Long = {\n            if (y == 0)\n                x\n         \
    \   else\n                _greatestCommonDivisor(y, x % y)\n        }\n      \
    \  _greatestCommonDivisor(max(a, b), min(a, b))", '        if (b == 0) a else
    greatestCommonDivisor(b, a % b)', '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "      val max = max(a, b)\n      val min = min(a, b)\n      if (max\
    \ % min == 0) min\n      else greatestCommonDivisor(min, max % min)", "      \
    \  if (b == 0) return a\n        val r = a % b\n        return greatestCommonDivisor(b,\
    \ r)", "        val min = min(a, b)\n        val max = max(a, b)\n        if (max\
    \ % min == 0) return min\n        else return greatestCommonDivisor(min, max %\
    \ min)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "     \
    \   val max : Long = max(a, b)\n        val min : Long = min(a, b)\n        if\
    \ (max % min == 0) {\n            return min\n        }\n        return greatestCommonDivisor(min,\
    \ max % min)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', "        var (a1, b1) = (max(a,\
    \ b), min(a, b))\n        var (a2, b2) = (0l, 0l)\n        while (b1 != 0) {\n\
    \            a2 = a1 % b1\n            b2 = b1\n            a1 = b2\n        \
    \    b1 = a2\n        }\n        return a1", "        def calc(x : Long, y : Long)\
    \ : Long = {\n            val n = x % y\n            if (n == 0) y else calc(y,\
    \ n)\n        }\n        if (a < b) calc(b, a) else calc(a, b)", "        var\
    \ m = max(a, b)\n        var n = min(a, b)\n        var r = 1l\n        while\
    \ (r != 0) {\n            r = m % n\n            m = n\n            n = r\n  \
    \      }\n        return m", '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "        if (b == 0) return a\n        return greatestCommonDivisor(b,\
    \ a % b)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "   \
    \     if (b == 0) return a\n        return greatestCommonDivisor(b, a % b)", '      if
    (b == 0) a else greatestCommonDivisor(b, a % b)', "        var x = a\n       \
    \ var y = b\n        while (x != y) {\n            if (x > y) x -= y\n       \
    \     else y -= x\n        }\n        x", "        def gcd(a : Long, b : Long)\
    \ : Long = if (b == 0) a else gcd(b, a % b)\n        gcd(a, b)", "        val\
    \ gcd = (a, b) match {\n            case (a, 0) => a\n            case (a, b)\
    \ => gcd(b, a % b)\n        }\n        gcd", '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "        val x = max(a, b)\n        val y = min(a, b)\n        if (x\
    \ % y == 0) return y\n        else return greatestCommonDivisor(y, x % y)", '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', '        if (b == 0) a else
    greatestCommonDivisor(b, a % b)', "        a % b match {\n            case 0 =>\
    \ b\n            case x => greatestCommonDivisor(b, x)\n        }", "        val\
    \ c = a % b\n        if (c == 0) b else greatestCommonDivisor(b, c)", "      \
    \  var x = abs(a)\n        var y = abs(b)\n        while (x != 0 && y != 0) {\n\
    \            if (x > y) x %= y\n            else y %= x\n        }\n        if\
    \ (x == 0) y else x", '        if (b == 0) a else greatestCommonDivisor(b, a %
    b)', '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "        val\
    \ t = b\n        b match {\n            case 0 => a\n            case _ => greatestCommonDivisor(t,\
    \ a % t)\n        }", "        var aPrime = a\n        var bPrime = b\n      \
    \  while (bPrime != 0) {\n            val t = bPrime\n            bPrime = aPrime\
    \ % bPrime\n            aPrime = t\n        }\n        return aPrime", "     \
    \   var n1 = a\n        var n2 = b\n        while (n1 != n2) {\n            if\
    \ (n1 > n2) n1 -= n2\n            else n2 -= n1\n        }\n        return n1",
  '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "        var x = max(a,\
    \ b)\n        var y = min(a, b)\n        while (y != 0) {\n            var z =\
    \ x % y\n            x = y\n            y = z\n        }\n        return x", " \
    \       val max = max(a, b)\n        val min = min(a, b)\n        if (max % min\
    \ == 0) min\n        else greatestCommonDivisor(min, max % min)", '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', "        var x = max(a, b)\n\
    \        var y = min(a, b)\n        while (y != 0) {\n            val t = y\n\
    \            y = x % y\n            x = t\n        }\n        x", "        var\
    \ (x, y) = (a, b)\n        while (y != 0) {\n            val z = x % y\n     \
    \       x = y\n            y = z\n        }\n        x", "        if (b == 0)\
    \ {\n            return a\n        }\n        else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        val min = min(a, b)\n        val max = max(a, b)\n\
    \        if (max % min == 0) min\n        else greatestCommonDivisor(min, max\
    \ % min)", "        if (b == 0) { a }\n        else { greatestCommonDivisor(b,\
    \ a % b) }", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', '        if (b == 0) a else
    greatestCommonDivisor(b, a % b)', "        def gcd(c : Long, d : Long) : Long\
    \ = {\n            if (d == 0) c else gcd(d, c % d)\n        }\n        max(gcd(a,\
    \ b), gcd(b, a))", '        if (b == 0) a else greatestCommonDivisor(b, a % b)',
  '        return if (b == 0) a else greatestCommonDivisor(b, a % b)', "        var\
    \ aa = a\n        var bb = b\n        while (aa != 0) {\n            val temp\
    \ = aa\n            aa = bb % aa\n            bb = temp\n        }\n        return\
    \ bb", "        if (b == 0) return a\n        greatestCommonDivisor(b, a % b)",
  "        var x = a\n        var y = b\n        while (x != y) {\n            if\
    \ (x > y) x -= y\n            else y -= x\n        }\n        x", "        var\
    \ n = max(a, b)\n        var d = min(a, b)\n        while (d != 0) {\n       \
    \     val t = d\n            d = n % d\n            n = t\n        }\n       \
    \ n", "        // If a is greater than b, swap them\n        var temp : Long =\
    \ 0\n        if (a > b) {\n            temp = a\n            a = b\n         \
    \   b = temp\n        }\n        // If a == 0, then b is the gcd\n        if (a\
    \ == 0) return b\n        // After if-statement, a must be less than b, then make\
    \ recursive call\n        return greatestCommonDivisor(b % a, a)", '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', '        if (b == 0) a else
    greatestCommonDivisor(b, a % b)', '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "        val (a0, b0) = (abs(a), abs(b))\n        if (a0 == 0) b0\n \
    \       else if (b0 == 0) a0\n        else greatestCommonDivisor(b0, a0 % b0)",
  "        val _m = max(a, b)\n        val _n = min(a, b)\n        def _gcd(m : Long,\
    \ n : Long) : Long = {\n            if (n == 0) m\n            else _gcd(n, m\
    \ % n)\n        }\n        _gcd(_m, _n)", "        // Euclidean algorithm\n  \
    \      def gcd(a : Long, b : Long) : Long = {\n            if (b == 0) a else\
    \ gcd(b, a % b)\n        }\n        gcd(abs(a), abs(b))", "        def gcd0(a\
    \ : Long, b : Long) : Long = if (b == 0) a else gcd0(b, a % b)\n        return\
    \ gcd0(max(a, b), min(a, b))", '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "        if (b == 0) {\n            return a\n        }\n        else\
    \ {\n            return greatestCommonDivisor(b, a % b)\n        }", "       \
    \ if (b == 0) {\n            return a\n        }\n        return greatestCommonDivisor(b,\
    \ a % b)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', '        if (b == 0) a else
    greatestCommonDivisor(b, a % b)', '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', '        if (b == 0) a else greatestCommonDivisor(b, a % b)', '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', "        var (c, d) = (a, b)\n\
    \        while (d != 0) {\n            val t = d\n            d = c % d\n    \
    \        c = t\n        }\n        return c", '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "        // Return gcd(a, b) using Euclid's algorithm\n        def greatestCommonDivisor(a\
    \ : Long, b : Long, x : Long, y : Long) : Long = {\n            if (b == 0) a\n\
    \            else greatestCommonDivisor(b, a % b, y - (a / b) * x, x)\n      \
    \  }\n        val sign = if (a < 0) -1 else 1\n        return sign * greatestCommonDivisor(abs(a),\
    \ abs(b), 1, 0)", "      if (b == 0) return a;\n      return greatestCommonDivisor(b,\
    \ a % b);", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "  \
    \      if (b == 0) return a\n        else return greatestCommonDivisor(b, a %\
    \ b)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "       \
    \ val larger = max(a, b)\n        val smaller = min(a, b)\n        if (larger\
    \ % smaller == 0) smaller\n        else greatestCommonDivisor(smaller, larger\
    \ % smaller)", "        var max = 0l\n        if (a < b) max = a else max = b\n\
    \        var i = max\n        while (i > 0) {\n            if (a % i == 0 && b\
    \ % i == 0) return i\n            i -= 1\n        }\n        return 1l", '        if
    (b == 0) a else greatestCommonDivisor(b, a % b)', "        var a1 = a\n      \
    \  var b1 = b\n        while (b1 != 0) {\n            val tmp = b1\n         \
    \   b1 = a1 % b1\n            a1 = tmp\n        }\n        a1", "        if (b\
    \ == 0) {\n            return a\n        }\n        return greatestCommonDivisor(b,\
    \ a % b)", "        var gcd = 1l\n        for (i <- 2l to min(a, b)) {\n     \
    \       if (a % i == 0 && b % i == 0) {\n                gcd = i\n           \
    \ }\n        }\n        return gcd", '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "     \
    \   var x = a; var y = b\n        if (a < b) {\n            x = b; y = a\n   \
    \     }\n        var r = x % y\n        while (r != 0) {\n            x = y; y\
    \ = r; r = x % y\n        }\n        return y", '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "     \
    \   val min = min(a, b)\n        val max = max(a, b)\n        if (max % min ==\
    \ 0) {\n            min\n        } else {\n            greatestCommonDivisor(min,\
    \ max % min)\n        }", '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "        if (b == 0) return a\n        return greatestCommonDivisor(b,\
    \ a % b)", '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "   \
    \     if (b == 0) return a\n        a % b", '        return if (b == 0) a else
    greatestCommonDivisor(b, a % b)', "        var _a = a\n        var _b = b\n  \
    \      if (_a < _b) {\n            var tmp = _a\n            _a = _b\n       \
    \     _b = tmp\n        }\n        while (_b != 0) {\n            var tmp = _b\n\
    \            _b = _a % _b\n            _a = tmp\n        }\n        return _a",
  "        def gcd(x : Long, y : Long) : Long = {\n            if (x % y == 0) y\n\
    \            else gcd(y, x % y)\n        }\n        if (a >= b) gcd(a, b)\n  \
    \      else gcd(b, a)", '        if (b == 0) a else greatestCommonDivisor(b, a
    % b)', '        if (b == 0) a else greatestCommonDivisor(b, a % b)', "       \
    \ if (b == 0) return a\n        greatestCommonDivisor(b, a % b)", "        var\
    \ l = min(a, b)\n        var h = max(a, b)\n        while (h % l != 0) {\n   \
    \         val tmp = h\n            h = l\n            l = tmp % l\n        }\n\
    \        l", "        var result = 0l\n        for (i <- 1l to min(a, b)) {\n\
    \            if (a % i == 0 && b % i == 0) {\n                result = i\n   \
    \         }\n        }\n        return result", '        if (b == 0) a else greatestCommonDivisor(b,
    a % b)', "        def gcd(a : Long, b : Long) : Long = {\n            if (b ==\
    \ 0) a else gcd(b, a % b)\n        }\n        gcd(a, b)"]
stop_tokens:
- "\n    }\n"
