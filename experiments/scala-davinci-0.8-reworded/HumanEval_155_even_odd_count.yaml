name: HumanEval_155_even_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n    // ((1l,\
  \ 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
  \ : Long) : Tuple2[Long, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
  \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
  \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
  \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
  \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
completions: ["        val sign = if (num < 0) -1 else 1\n        val numAbs = num.abs\n\
    \        val even = numAbs.toString.foldLeft(0l)((r, c) => if (c.asDigit % 2 ==\
    \ 0) r + 1 else r)\n        val odd = numAbs.toString.foldLeft(0l)((r, c) => if\
    \ (c.asDigit % 2 == 1) r + 1 else r)\n        return ((even, odd))", "       \
    \ var numTmp = num\n        var evenCount = 0l\n        var oddCount = 0l\n  \
    \      while (numTmp != 0) {\n            if (numTmp % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            numTmp /= 10\n        }\n       \
    \ (evenCount, oddCount)", "        (num.toString.filter((c : Char) => (c - '0')\
    \ % 2 == 0).length, num.toString.filter((c : Char) => (c - '0') % 2 == 1).length)",
  "        // Write your code here\n        return null;", "        var evenCount\
    \ = 0l\n        var oddCount = 0l\n        var x = abs(num)\n        while (x\
    \ > 0) {\n            if (x % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            x /= 10\n        }\n        return (evenCount, oddCount)",
  "        val sign = if (num >= 0) (1l) else (-1l)\n        val absNum = abs(num)\n\
    \        var evenDigits = 0l\n        var oddDigits = 0l\n        var n = absNum\n\
    \        while (n > 0) {\n            val digit = n % 10\n            if (digit\
    \ % 2 == 0) evenDigits += 1\n            else oddDigits += 1\n            n /=\
    \ 10\n        }\n        return ((evenDigits, oddDigits))", "        val evenCount\
    \ = num.toString.filter(_.asDigit % 2 == 0).length\n        val oddCount = num.toString.filter(_.asDigit\
    \ % 2 == 1).length\n        (evenCount, oddCount)", "        var evens = 0l\n\
    \        var odds = 0l\n        num.toString.foreach(i => if (i.toString.toInt\
    \ % 2 == 0) evens += 1 else odds += 1)\n        (evens, odds)", "        val s\
    \ = num.toString\n        var odd = 0l\n        var even = 0l\n        for (c\
    \ <- s) {\n            if (c == '-') {}\n            else if (c.toInt % 2 == 0)\
    \ even += 1\n            else odd += 1\n        }\n        return (even, odd)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        num.toString.foreach(x\
    \ => if (x.toString.toInt % 2 == 0) evenCount += 1 else oddCount += 1)\n     \
    \   Tuple2(evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var x = if (num < 0) -num else num\n        while (x > 0) {\n\
    \            if (x % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            x /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount : Long = 0\n        var oddCount : Long = 0\n        var num = num\n\
    \        while (num != 0) {\n            if (abs(num % 10) % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            num /= 10\n        }\n   \
    \     (evenCount, oddCount)", "        // If num == 0\n        if (num == 0) {\n\
    \            return (1l, 0l)\n        }\n        // If num < 0\n        if (num\
    \ < 0) {\n            return (1l, 1l)\n        }\n        // Otherwise\n     \
    \   var n = abs(num)\n        var count1 = 0l\n        var count2 = 0l\n     \
    \   while (n > 0) {\n            var d = n % 10\n            if (d % 2 == 0) {\n\
    \                count1 += 1\n            } else {\n                count2 +=\
    \ 1\n            }\n            n /= 10\n        }\n        return (count1, count2)",
  "        var even = 0l\n        var odd = 0l\n        for (x <- num.toString.toList)\
    \ {\n            if (x.asDigit % 2 == 0) even += 1\n            else odd += 1\n\
    \        }\n        (even, odd)", "    \tvar odd = 0l\n    \tvar even = 0l\n \
    \   \tvar n = num\n    \tif (n < 0) {\n    \t    n = -n\n    \t}\n    \twhile\
    \ (n > 0) {\n    \t    if (n % 2 == 0) {\n    \t        even += 1\n    \t    }\
    \ else {\n    \t        odd += 1\n    \t    }\n    \t    n /= 10\n    \t}\n  \
    \  \treturn (even, odd)", "      val (evenCount, oddCount) = num.toString.map(x\
    \ => x.asDigit).partition(x => x % 2 == 0)\n      (evenCount.length, oddCount.length)",
  "        var even = 0l\n        var odd = 0l\n        var num = num\n        while\
    \ (num != 0) {\n            if (num % 2 == 0) even += 1\n            else odd\
    \ += 1\n            num /= 10\n        }\n        return (even, odd)", "     \
    \   var numStr = num.toString\n        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        for (char <- numStr) {\n            if (char.asDigit % 2 == 0)\
    \ {\n                evenCount += 1\n            } else {\n                oddCount\
    \ += 1\n            }\n        }\n        (evenCount, oddCount)", "        val\
    \ n = abs(num)\n        def loop(current : Long, countE : Long, countO : Long)\
    \ : Tuple2[Long, Long] = {\n            if (current == 0) return ((countE, countO))\n\
    \            val next = current / 10\n            val digit = current % 10\n \
    \           if (digit % 2 == 0) loop(next, countE + 1, countO)\n            else\
    \ loop(next, countE, countO + 1)\n        }\n        loop(n, 0, 0)", "       \
    \ var even = 0l\n        var odd = 0l\n        var n = num\n        while (n !=\
    \ 0) {\n            val digit = n % 10\n            if (digit % 2 == 0) even +=\
    \ 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        var count = (0l, 0l)\n        var n = abs(num)\n        while\
    \ (n > 0) {\n            val digit = n % 10\n            if (digit % 2 == 0) count\
    \ = (count._1 + 1, count._2)\n            else count = (count._1, count._2 + 1)\n\
    \            n /= 10\n        }\n        count", "      val evenCount = num.toString.filter(x\
    \ => (x.toString.toInt % 2 == 0)).length\n      val oddCount = num.toString.filter(x\
    \ => (x.toString.toInt % 2 != 0)).length\n      (evenCount, oddCount)", "    \
    \    val odd = num.toString.count(c => c.toString.toInt % 2 == 1)\n        val\
    \ even = num.toString.count(c => c.toString.toInt % 2 == 0)\n        return (even,\
    \ odd)", "      val n = num.abs\n      if (n == 0) (1, 0)\n      else {\n    \
    \    val r = evenOddCount(n / 10)\n        if (n % 2 == 0) (r._1 + 1, r._2)\n\
    \        else (r._1, r._2 + 1)\n      }", "        var evenCount : Long = 0l\n\
    \        var oddCount : Long = 0l\n        var n : Long = num\n        if (n <\
    \ 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            n /= 10\n        }\n        ((evenCount,\
    \ oddCount))", "        var evenCount : Long = 0\n        var oddCount : Long\
    \ = 0\n        var n : Long = num\n        while (n != 0) {\n            if (n\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        val numstr = num.toString\n\
    \        var even = 0l\n        var odd = 0l\n        for (c <- numstr) {\n  \
    \          if (c == '-') continue\n            val digit = c.asDigit\n       \
    \     if (digit % 2 == 0) even += 1\n            else odd += 1\n        }\n  \
    \      return (even, odd)", "        // Fill Up this function body\n        //\
    \ `evenCount` = number of even digits in the number\n        // `oddCount` = number\
    \ of odd digits in the number\n        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var numPos = abs(num)\n        while (numPos > 0) {\n        \
    \    val digit = numPos % 10\n            if (digit % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            numPos /= 10\n        }\n       \
    \ (evenCount, oddCount)", "        if (num == 0) {\n            return ((1l, 0l))\n\
    \        }\n        val (even, odd) = if (num % 2 == 0) ((1l, 0l)) else ((0l,\
    \ 1l))\n        evenOddCount(num / 10) match {case (evens, odds) => (even + evens,\
    \ odd + odds)}", "        val count : Tuple2[Long, Long] = (0l, 0l)\n        var\
    \ n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n            if\
    \ (n % 2 == 0) count._1 += 1\n            else count._2 += 1\n            n /=\
    \ 10\n        }\n        count", "        val numStr = num.toString\n        var\
    \ numEvenDigits = 0\n        var numOddDigits = 0\n        for (d <- numStr) {\n\
    \            if (d.toInt % 2 == 0) {\n                numEvenDigits += 1\n   \
    \         } else {\n                numOddDigits += 1\n            }\n       \
    \ }\n        (numEvenDigits, numOddDigits)", "        val s = num.toString.toList.map((x)\
    \ => x.asDigit)\n        val evenCount = s.filter((x) => x % 2 == 0).length\n\
    \        val oddCount = s.filter((x) => x % 2 == 1).length\n        (evenCount,\
    \ oddCount)", "    \tvar even : Long = 0\n    \tvar odd : Long = 0\n    \tvar\
    \ num1 : Long = num\n    \tif (num1 < 0) num1 = -num1\n    \twhile (num1 > 0)\
    \ {\n    \t\tif (num1 % 2 == 0) even += 1\n    \t\telse odd += 1\n    \t\tnum1\
    \ /= 10\n    \t}\n    \treturn ((even, odd))", '        num.toString.groupBy(x
    => x % 2 == 0).map(x => (x._1, x._2.length)).toArray.map(x => if (x._1) (x._2,
    0l) else (0l, x._2)).reduce((a, b) => (a._1 + b._1, a._2 + b._2))', "        val\
    \ d = digits(num)\n        val evens = d.filter(x => x % 2 == 0)\n        val\
    \ odds = d.filter(x => x % 2 == 1)\n        ((evens.length, odds.length))", " \
    \       var even_count = 0l\n        var odd_count = 0l\n        val digits =\
    \ num.toString.toCharArray\n        digits.foreach {\n            digit => \n\
    \                if (digit % 2 == 0) {\n                    even_count += 1\n\
    \                } else {\n                    odd_count += 1\n              \
    \  }\n        }\n        (even_count, odd_count)", "        if (num == 0)\n  \
    \          return ((1, 0))\n        val isNegative = if (num < 0) true else false\n\
    \        val numAbs = abs(num)\n        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var currentNum = numAbs\n        while (currentNum > 0) {\n  \
    \          val lastDigit = currentNum % 10\n            if (lastDigit % 2 == 0)\n\
    \                evenCount += 1\n            else\n                oddCount +=\
    \ 1\n            currentNum /= 10\n        }\n        return ((evenCount, oddCount))",
  "        // FIXME: implement me\n        val list = num.toString.map(_.asDigit).toList\n\
    \        val xs = list.map(y => if (y % 2 == 0) 1 else 0)\n        (xs.sum, xs.length\
    \ - xs.sum)", "        def aux(num : Long, even : Long, odd : Long) : Tuple2[Long,\
    \ Long] = {\n            if (num == 0) (even, odd)\n            else if (num %\
    \ 2 == 0) aux(num / 10, even + 1, odd)\n            else aux(num / 10, even, odd\
    \ + 1)\n        }\n        aux(abs(num), 0, 0)", "        var countEven = 0l\n\
    \        var countOdd = 0l\n        if (num < 0) {\n            countEven += 1\n\
    \            countOdd += 1\n        }\n        var x = abs(num)\n        while\
    \ (x > 0) {\n            val digit = x % 10\n            if (digit % 2 == 0) countEven\
    \ += 1\n            else countOdd += 1\n            x /= 10\n        }\n     \
    \   (countEven, countOdd)", "        var n = num\n        var even = 0l\n    \
    \    var odd = 0l\n        while (n != 0) {\n            val lastDigit = n % 10\n\
    \            if (lastDigit % 2 == 0) even += 1\n            else odd += 1\n  \
    \          n /= 10\n        }\n        (even, odd)", "        var evenCount =\
    \ 0L\n        var oddCount = 0L\n        var n = if (num < 0) -num else num\n\
    \        while (n > 0) {\n            val digit = n % 10\n            if (digit\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        val s = num.toString.groupBy(c\
    \ => c)\n        (s.getOrElse('0', \"\").length + s.getOrElse('2', \"\").length\
    \ + s.getOrElse('4', \"\").length + s.getOrElse('6', \"\").length + s.getOrElse('8',\
    \ \"\").length, s.getOrElse('1', \"\").length + s.getOrElse('3', \"\").length\
    \ + s.getOrElse('5', \"\").length + s.getOrElse('7', \"\").length + s.getOrElse('9',\
    \ \"\").length)", "        var evenCount : Long = 0\n        var oddCount : Long\
    \ = 0\n        var n : Long = num\n        if (n < 0) n = -n\n        while (n\
    \ > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        return (evenCount, oddCount)",
  "        // your code here\n        var odd: Long = 0\n        var even: Long =\
    \ 0\n        var num2 = num\n        while (num2 != 0) {\n            if (num2\
    \ % 2 == 0) even += 1\n            else odd += 1\n            num2 /= 10\n   \
    \     }\n        return (even, odd)", "        val result = num.toString.foldLeft((0l,\
    \ 0l))((tuple, c) => if (c.asDigit % 2 == 0) (tuple._1 + 1, tuple._2) else (tuple._1,\
    \ tuple._2 + 1))\n        result", "        if (num == 0) return ((1l, 0l))\n\
    \        if (num < 0) return evenOddCount((-num))\n        val digit = num % 10\n\
    \        val r = evenOddCount((num / 10))\n        if (digit % 2 == 0) ((r._1\
    \ + 1), r._2) else (r._1, r._2 + 1)", "        var numOfEven = 0l\n        var\
    \ numOfOdd = 0l\n        var reversed = num.abs.toString.reverse\n        for\
    \ (i <- 0 until reversed.length) {\n            if (reversed(i).asDigit % 2 ==\
    \ 0) {\n                numOfEven += 1\n            } else {\n               \
    \ numOfOdd += 1\n            }\n        }\n        (numOfEven, numOfOdd)", '        (1l,
    1l)', "        var even = 0l\n        var odd = 0l\n        var n = num\n    \
    \    while (n != 0) {\n            val digit = n % 10\n            if (digit %\
    \ 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n        }\n\
    \        return ((even, odd))", "        if (num == 0) return (0, 0)\n       \
    \ val (even, odd) = evenOddCount(num / 10)\n        if (num % 2 == 0) return (even\
    \ + 1, odd)\n        else return (even, odd + 1)", '        (0l, 0l)', "     \
    \   val (evens, odds) = num.toString.map(_.asDigit).foldLeft((0, 0)) {\n     \
    \       case ((evens, odds), digit) => if (digit % 2 == 0) (evens + 1, odds) else\
    \ (evens, odds + 1)\n        }\n        (evens, odds)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var cnum = abs(num)\n        while (cnum\
    \ > 0) {\n            if (cnum % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            cnum /= 10\n        }\n        return (evenCount, oddCount)",
  "        var evenCount : Long = 0\n        var oddCount : Long = 0\n        var\
    \ n : Long = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        val nums = num.toString.toList.map(x => x.asDigit)\n\
    \        (nums.filter(x => x % 2 == 0).length, nums.filter(x => x % 2 == 1).length)",
  "        var even = 0l\n        var odd = 0l\n        num.toString.foreach { x =>\n\
    \            if (x.toString.toInt % 2 == 0) even += 1 else odd += 1\n        }\n\
    \        (even, odd)", "        val nums = num.toString.map(_.asDigit)\n     \
    \   ((nums.filter(_ % 2 == 0).length, nums.filter(_ % 2 == 1).length))", "   \
    \     def evenOddCountRecur(num : Long, even : Long, odd : Long) : Tuple2[Long,\
    \ Long] = {\n            if (num < 10) {\n                if (num % 2 == 0) (even\
    \ + 1, odd)\n                else (even, odd + 1)\n            }\n           \
    \ else {\n                if (num % 2 == 0) evenOddCountRecur(num / 10, even +\
    \ 1, odd)\n                else evenOddCountRecur(num / 10, even, odd + 1)\n \
    \           }\n        }\n        evenOddCountRecur(num, 0, 0)", "        val\
    \ n = if (num < 0) -num else num\n        val digits = n.toString.map(_.asDigit)\n\
    \        digits.filter(_ % 2 == 0).size.toLong -> digits.filter(_ % 2 == 1).size.toLong",
  "        val evenOddCount = (0l, 0l)\n        def helper(remaining : Long, acc :\
    \ Tuple2[Long, Long]) : Tuple2[Long, Long] = {\n            if (remaining == 0)\
    \ acc\n            else {\n                val digit = remaining % 10\n      \
    \          if (digit % 2 == 0) helper(remaining / 10, (acc._1 + 1, acc._2))\n\
    \                else helper(remaining / 10, (acc._1, acc._2 + 1))\n         \
    \   }\n        }\n        if (num < 0) helper(-num, evenOddCount)\n        else\
    \ helper(num, evenOddCount)", "        val digits = Map[Long, Long]()\n      \
    \  var n = num\n        while (n != 0) {\n            val d = abs(n % 10)\n  \
    \          if (digits.contains(d)) digits(d) += 1\n            else digits(d)\
    \ = 1\n            n /= 10\n        }\n        (digits.filter(e => e._1 % 2 ==\
    \ 0).map(e => e._2).foldLeft(0l)(_ + _), digits.filter(e => e._1 % 2 == 1).map(e\
    \ => e._2).foldLeft(0l)(_ + _))", "        val absNum = abs(num)\n        (Iterator.iterate(0l)(_\
    \ + 1).takeWhile(_ <= absNum).count(i => (absNum / pow(10, i)).toLong % 2 == 0),\
    \ \n            Iterator.iterate(0l)(_ + 1).takeWhile(_ <= absNum).count(i =>\
    \ (absNum / pow(10, i)).toLong % 2 == 1))", "        // Implement here\n     \
    \   if (num == 0) return (0, 0)\n        val absNum = abs(num)\n        if (absNum\
    \ % 2 == 0) {\n            val (e, o) = evenOddCount(absNum / 10)\n          \
    \  return (e + 1, o)\n        } else {\n            val (e, o) = evenOddCount(absNum\
    \ / 10)\n            return (e, o + 1)\n        }", "        val s = num.toString()\n\
    \        var e = 0l\n        var o = 0l\n        for (d <- s) {\n            val\
    \ n = d.asDigit\n            if (n % 2 == 0) {\n                e += 1\n     \
    \       } else {\n                o += 1\n            }\n        }\n        (e,\
    \ o)", "        val numStr = num.toString.toCharArray\n        val evenCount =\
    \ numStr.count(_ % 2 == 0)\n        val oddCount = numStr.count(_ % 2 == 1)\n\
    \        ((evenCount, oddCount))", "        num.toString.map(x => ((x - '0') %\
    \ 2)).groupBy(x => x).map(x => (x._1, x._2.length)).toList match {\n         \
    \   case List((0, even), (1, odd)) => (even, odd)\n            case List((1, odd),\
    \ (0, even)) => (even, odd)\n            case _ => (0, 0)\n        }", "     \
    \   val digits = num.toString().map(Character.getNumericValue(_))\n        var\
    \ evens = 0\n        var odds = 0\n        for (digit <- digits) {\n         \
    \   if (digit % 2 == 0) evens += 1\n            else odds += 1\n        }\n  \
    \      (evens, odds)", "        val str = num.toString\n        ((0l /: str) {case\
    \ (x, y) => if (y.toString.toInt % 2 == 0) x + 1 else x},\n        (0l /: str)\
    \ {case (x, y) => if (y.toString.toInt % 2 == 1) x + 1 else x})", "        var\
    \ evens = 0l\n        var odds = 0l\n        var n = abs(num)\n        while (n\
    \ > 0) {\n            if (n % 2 == 0) evens += 1\n            else odds += 1\n\
    \            n /= 10\n        }\n        return Tuple2(evens, odds)", "      val\
    \ n = num.abs\n      var evenCount = 0l\n      var oddCount = 0l\n      var n1\
    \ = n\n      while (n1 > 0) {\n        val digit = n1 % 10\n        if (digit\
    \ % 2 == 0) evenCount += 1\n        else oddCount += 1\n        n1 /= 10\n   \
    \   }\n      (evenCount, oddCount)", "        var (evenDigits, oddDigits) = (0,\
    \ 0)\n        var tmp = num\n        while (tmp != 0) {\n            if (tmp %\
    \ 2 == 0) evenDigits += 1\n            else oddDigits += 1\n            tmp /=\
    \ 10\n        }\n        (evenDigits, oddDigits)", "        val st = new StringTokenizer(num.toString)\n\
    \        var (even, odd) = (0l, 0l)\n        while (st.hasMoreTokens) {\n    \
    \        val token = st.nextToken\n            if (token.toLong % 2 == 0) even\
    \ += 1 else odd += 1\n        }\n        (even, odd)", "        var i = num\n\
    \        var e = 0l\n        var o = 0l\n        if (i < 0) i = -i\n        while\
    \ (i > 0) {\n            if (i % 2 == 0) e += 1\n            else o += 1\n   \
    \         i /= 10\n        }\n        (e, o)", "        val s = num.toString.map(c\
    \ => c.asDigit)\n        val e = s.filter(x => x % 2 == 0)\n        val o = s.filter(x\
    \ => x % 2 == 1)\n        return (e.length.toLong, o.length.toLong)", "      \
    \  def _count(x : Long, even : Long, odd : Long) : Tuple2[Long, Long] = {\n  \
    \          if (x == 0) (even, odd)\n            else if (x % 2 == 0) _count(x\
    \ / 10, even + 1, odd)\n            else _count(x / 10, even, odd + 1)\n     \
    \   }\n        return _count(abs(num), 0, 0)", "        var even = 0l\n      \
    \  var odd = 0l\n        var cur = abs(num)\n        while (cur > 0) {\n     \
    \       if (cur % 2 == 0) even += 1\n            else odd += 1\n            cur\
    \ /= 10\n        }\n        (even, odd)", "        var sumEven = 0l\n        var\
    \ sumOdd = 0l\n        for (i <- num.toString) {\n            if (i.toInt % 2\
    \ == 0) sumEven += 1\n            else sumOdd += 1\n        }\n        (sumEven,\
    \ sumOdd)", "        var even = 0l\n        var odd = 0l\n        val s = num.toString\n\
    \        for (i <- 0 until s.length) {\n            if (num.toString.charAt(i).toString.toInt\
    \ % 2 == 0) even += 1\n            else odd += 1\n        }\n        (even, odd)",
  "        def count(num : Long, flag : Int) : Tuple2[Long, Long] = {\n          \
    \  if (num == 0) {\n                if (flag == 0) ((0l, 0l))\n              \
    \  else if (flag == 1) ((1l, 0l))\n                else ((0l, 1l))\n         \
    \   }\n            else {\n                if (num % 2 == 0) count(num / 10, 1)\n\
    \                else count(num / 10, 2)\n            }\n        }\n        def\
    \ iter(num : Long, acc : Tuple2[Long, Long]) : Tuple2[Long, Long] = {\n      \
    \      if (num == 0) acc\n            else {\n                if (num % 2 == 0)\
    \ iter(num / 10, (acc._1 + 1, acc._2))\n                else iter(num / 10, (acc._1,\
    \ acc._2 + 1))\n            }\n        }\n        if (num < 0) {\n           \
    \ val ret = count(abs(num), 0)\n            (ret._1 + 1, ret._2)\n        }\n\
    \        else iter(num, (0l, 0l))", '        num.toString.map((n) => {if(n % 2
    == 0) (1l, 0l) else (0l, 1l)}).reduce((p, c) => {(p._1 + c._1, p._2 + c._2)})',
  "        var even = 0l\n        var odd = 0l\n        num.toString.foreach(c =>\
    \ {\n            if (c.toInt % 2 == 0) even += 1\n            else odd += 1\n\
    \        })\n        (even, odd)", "        var (evenCount, oddCount) = (0l, 0l)\n\
    \        for (digit <- num.toString().toCharArray().map(x => x.toString.toLong))\
    \ {\n            if (digit % 2 == 0) {\n                evenCount += 1\n     \
    \       } else {\n                oddCount += 1\n            }\n        }\n  \
    \      (evenCount, oddCount)", "      def helper(num : Long, acc : Tuple2[Long,\
    \ Long]) : Tuple2[Long, Long] = {\n        if (num == 0) acc\n        else {\n\
    \          val digit = num % 10;\n          if (digit % 2 == 0) helper(num / 10,\
    \ (acc._1 + 1, acc._2))\n          else helper(num / 10, (acc._1, acc._2 + 1))\n\
    \        }\n      }\n      if (num < 0) evenOddCount(-num)\n      else helper(num,\
    \ (0, 0))", "        // your code here\n        ???", "    \tvar evenCount : Long\
    \ = 0;\n    \tvar oddCount : Long = 0;\n    \tvar temp = num;\n    \twhile (temp\
    \ != 0) {\n    \t\tvar digit = temp % 10;\n    \t\tif (digit % 2 == 0) evenCount\
    \ += 1;\n    \t\telse oddCount += 1;\n    \t\ttemp /= 10;\n    \t}\n    \treturn\
    \ (evenCount, oddCount);", '        (num.toString.toCharArray.filter(_ % 2 ==
    0).length, num.toString.toCharArray.filter(_ % 2 == 1).length)', "        // *****\n\
    \        // Todo: Complete this method.\n        // *****\n        return null",
  "        val even = num.toString.filter(_.isDigit).map(_.asDigit).map(x => if (x\
    \ % 2 == 0) 1 else 0).sum\n        val odd = num.toString.filter(_.isDigit).map(_.asDigit).map(x\
    \ => if (x % 2 == 1) 1 else 0).sum\n        return (even, odd)", "        var\
    \ countEven = 0l\n        var countOdd = 0l\n        var n = abs(num)\n      \
    \  while (n > 0) {\n            val d = n % 10\n            if (d % 2 == 0) countEven\
    \ += 1\n            else countOdd += 1\n            n /= 10\n        }\n     \
    \   (countEven, countOdd)", "        val s = abs(num).toString\n        val l\
    \ = s.length\n        var numEven = 0\n        var numOdd = 0\n        for (i\
    \ <- 0 until l) {\n            val d = s(i).asDigit\n            if (d % 2 ==\
    \ 0) numEven += 1\n            else numOdd += 1\n        }\n        (numEven,\
    \ numOdd)", "      def evenOddCount(remaining : Long, prevOdd : Long, prevEven\
    \ : Long) : Tuple2[Long, Long] = {\n        if (remaining == 0) (prevEven, prevOdd)\n\
    \        else if (remaining % 2 == 0) evenOddCount(remaining / 10, prevOdd, prevEven\
    \ + 1)\n        else evenOddCount(remaining / 10, prevOdd + 1, prevEven)\n   \
    \   }\n      evenOddCount(abs(num), 0, 0)", "        // Write your code here\n\
    \        val neg = num < 0\n        val count = num.toString.zipWithIndex.map(x\
    \ => {\n            val (num, i) = x\n            if ((num - '0') % 2 == 0) (1,\
    \ 0)\n            else (0, 1)\n        }).reduce((x, y) => (x._1 + y._1, x._2\
    \ + y._2))\n        if (neg) (count._1 + 1, count._2)\n        else count", " \
    \       val s = num.toString\n        s.foldLeft((0, 0))( (x, y) => if (y.isDigit)\
    \ if (y.asDigit % 2 == 0) (x._1 + 1, x._2) else (x._1, x._2 + 1) else x)", " \
    \   \tif (num == 0) return ((1l, 0l))\n    \tvar n = abs(num)\n    \tvar evenCount\
    \ = 0l\n    \tvar oddCount = 0l\n    \twhile (n > 0) {\n    \t\tif (n % 2 == 0)\
    \ evenCount += 1\n    \t\telse oddCount += 1\n    \t\tn /= 10\n    \t}\n    \t\
    return ((evenCount, oddCount))", '        //fill in the code here', "        def\
    \ evenOddCountIter(num : Long, evenCount : Long, oddCount : Long) : Tuple2[Long,\
    \ Long] = {\n            if (num == 0) (evenCount, oddCount)\n            else\
    \ if (num % 2 == 0) evenOddCountIter(num / 10, evenCount + 1, oddCount)\n    \
    \        else evenOddCountIter(num / 10, evenCount, oddCount + 1)\n        }\n\
    \        evenOddCountIter(abs(num), 0, 0)", "        var even = 0\n        var\
    \ odd = 0\n        num.toString.foreach((digit : Char) => {\n            if ((digit.toInt\
    \ - '0'.toInt) % 2 == 0) even += 1\n            else odd += 1\n        })\n  \
    \      (even, odd)", "        val str = num.toString\n        val total = str.length\n\
    \        val even = (str.filter((x : Char) => x.isDigit && (x.asDigit % 2 == 0))).length\n\
    \        val odd = total - even\n        return (even, odd)", "        val digits\
    \ = for (c <- num.toString) yield c.asDigit\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 == 1)\n   \
    \     ((evenDigits.length, oddDigits.length))", "        def inner(num : Long,\
    \ odd : Long, even : Long) : Tuple2[Long, Long] = {\n            if (num == 0)\
    \ {\n                return ((even, odd))\n            }\n            val last\
    \ = num % 10\n            if (last % 2 == 0) {\n                inner(num / 10,\
    \ odd, even + 1)\n            } else {\n                inner(num / 10, odd +\
    \ 1, even)\n            }\n        }\n        return inner(abs(num), 0, 0)", " \
    \       // Assume that all input will be positive.\n        // Assume that all\
    \ input will be within range of Long type.\n        val even = new ListBuffer[Long]()\n\
    \        val odd = new ListBuffer[Long]()\n        val st = new Stack[Long]()\n\
    \        var temp = num\n        while (temp > 0) {\n            st.push(temp\
    \ % 10)\n            temp /= 10\n        }\n        while (!st.isEmpty) {\n  \
    \          if (st.pop() % 2 == 0) {\n                even += 1\n            }\
    \ else {\n                odd += 1\n            }\n        }\n        (even.size,\
    \ odd.size)", "        val l = new ListBuffer[Long]\n        val nums = num.toString.toList.map(_.toString.toLong)\n\
    \        nums.foreach(x => {if (x % 2 == 0) l += 1 else l += 0})\n        return\
    \ ((l.filter(_ == 1).length, l.filter(_ == 0).length))", "        // return 1l\
    \ -> 1l\n        var even : Long = 0\n        var odd : Long = 0\n        for\
    \ (i <- num.toString) {\n            if (i.toString.toInt % 2 == 0) even += 1\n\
    \            else odd += 1\n        }\n        return (even, odd)", "      val\
    \ s = num.toString.toList\n      var even = 0l\n      var odd = 0l\n      for\
    \ (i <- s) {\n        if (i.toInt % 2 == 0) even += 1\n        else odd += 1\n\
    \      }\n      (even, odd)", "        val l = num.toString.map(c => (c, if(c.toString.toInt\
    \ % 2 == 0) 0 else 1)).toList\n        (l.foldLeft(0l)((a,c) => a + c._2), l.foldLeft(0l)((a,c)\
    \ => a + (1 - c._2)))", '        ???', "        var posnum = abs(num)\n      \
    \  var evenCount = 0L\n        var oddCount = 0L\n        while (posnum > 0) {\n\
    \            if (posnum % 2 == 0) {\n                evenCount += 1\n        \
    \    } else {\n                oddCount += 1\n            }\n            posnum\
    \ /= 10\n        }\n        (evenCount, oddCount)", "        val even = new ArrayBuffer[Long]\n\
    \        val odd = new ArrayBuffer[Long]\n        var n = num\n        while (n\
    \ != 0) {\n            val digit = n % 10\n            if (digit % 2 == 0) {\n\
    \                even += digit\n            } else {\n                odd += digit\n\
    \            }\n            n /= 10\n        }\n        (even.length, odd.length)",
  "        if (num == 0) return (1, 0)\n        var evenCount = 0\n        var oddCount\
    \ = 0\n        var remainder = 0\n        var number = abs(num)\n        while\
    \ (number > 0) {\n            remainder = number % 10\n            if (remainder\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            number\
    \ /= 10\n        }\n        (evenCount, oddCount)", "        def evenOddCount_helper(num\
    \ : Long, accEven : Long, accOdd : Long) : Tuple2[Long, Long] = {\n          \
    \  if (num == 0) (accEven, accOdd)\n            else {\n                if (num\
    \ % 2 == 0) evenOddCount_helper(num / 10, accEven + 1, accOdd)\n             \
    \   else evenOddCount_helper(num / 10, accEven, accOdd + 1)\n            }\n \
    \       }\n        evenOddCount_helper(abs(num), 0, 0)", "        val a = num.toString.map(_.asDigit).partition(_\
    \ % 2 == 0)\n        Tuple2(a._1.length, a._2.length)", "    \tvar even : Long\
    \ = 0\n    \tvar odd : Long = 0\n    \tfor (c <- (if (num >= 0) num.toString else\
    \ (num * -1).toString).toList) {\n    \t\tif (c.toInt % 2 == 0) even += 1\n  \
    \  \t\telse odd += 1\n    \t}\n    \treturn Tuple2(even, odd)", "        var even\
    \ = 0l\n        var odd = 0l\n        for (c <- num.toString) {\n            if\
    \ (c.asDigit % 2 == 0) even += 1\n            else odd += 1\n        }\n     \
    \   return (even, odd)", "        var evenCount = 0l\n        var oddCount = 0l\n\
    \        var isNegative = false\n        var n = num\n        if (n < 0) {\n \
    \           isNegative = true\n            n = -n\n        }\n        while (n\
    \ > 0) {\n            val digit = n % 10\n            if (digit % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   if (isNegative) {\n            if (oddCount % 2 == 0) evenCount += 1\n   \
    \         else oddCount += 1\n        }\n        (evenCount, oddCount)", "   \
    \     def n(num : Long, e : Long, o : Long) : Tuple2[Long, Long] = {\n       \
    \     if (num == 0)\n                (e, o)\n            else if (num % 2 == 0)\n\
    \                n(num / 10, e + 1, o)\n            else\n                n(num\
    \ / 10, e, o + 1)\n        }\n        n(abs(num), 0, 0)", "        // iterate\
    \ through each digit of the integer\n        // count the number of odd and even\
    \ digits\n        var oddCount = 0l\n        var evenCount = 0l\n        var absNum\
    \ = if (num >= 0) num else -num\n        while (absNum != 0) {\n            var\
    \ digit = absNum % 10\n            if (digit % 2 == 0) evenCount += 1\n      \
    \      else oddCount += 1\n            absNum /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        val arr = num.toString.map(_.asDigit).toList\n        return\
    \ ((arr.filter(_ % 2 == 0).length, arr.filter(_ % 2 == 1).length))", "       \
    \ var r : Tuple2[Long, Long] = ((0l, 0l))\n        var n = num\n        if (n\
    \ < 0) n = -n\n        while (n > 0) {\n            val d = n % 10\n         \
    \   if (d % 2 == 0) r = ((r._1 + 1, r._2))\n            else r = ((r._1, r._2\
    \ + 1))\n            n /= 10\n        }\n        r", "        //If input is a\
    \ negative number, make it positive.\n        val input : Long = abs(num)\n  \
    \      var evenCount : Long = 0l\n        var oddCount : Long = 0l\n        if\
    \ (input == 0) evenCount = 1\n        else {\n            var toProcess : Long\
    \ = input\n            while (toProcess > 0) {\n                val curDigit :\
    \ Long = toProcess % 10\n                if (curDigit % 2 == 0) evenCount += 1\n\
    \                else oddCount += 1\n                toProcess /= 10\n       \
    \     }\n        }\n        Tuple2(evenCount, oddCount)", "        var a = 0l\n\
    \        var b = 0l\n        var c = abs(num)\n        while (c > 0) {\n     \
    \       if (c % 2 == 0) a += 1\n            else b += 1\n            c /= 10\n\
    \        }\n        (a, b)", "        var (even, odd) = (0l, 0l)\n        var\
    \ n = if (num < 0) -num else num\n        while (n > 0) {\n            if (n %\
    \ 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n        }\n\
    \        return (even, odd)", "        val s = num.toString\n        val a = s.map(x\
    \ => x.asDigit)\n        a.foldLeft((0l, 0l))((x, y) => if (y % 2 == 0) (x._1\
    \ + 1, x._2) else (x._1, x._2 + 1))", "        def digitCounts(num : Long, count\
    \ : Long, oddCount : Long, evenCount : Long) : Tuple2[Long, Long] = {\n      \
    \      if (num == 0) {\n                (evenCount, oddCount)\n            } else\
    \ {\n                if (num % 2 == 0) {\n                    digitCounts(num\
    \ / 10, count + 1, oddCount, evenCount + 1)\n                } else {\n      \
    \              digitCounts(num / 10, count + 1, oddCount + 1, evenCount)\n   \
    \             }\n            }\n        }\n        digitCounts(num, 0, 0, 0)",
  "        var even = 0l\n        var odd = 0l\n        var n = num\n        while\
    \ (n != 0) {\n            var d = n % 10\n            if (d % 2 == 0) even +=\
    \ 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        // Fill Up this function body\n        // `evenCount` = number\
    \ of even digits in `num`\n        // `oddCount` = number of odd digits in `num`\n\
    \        var evenCount = 0l\n        var oddCount = 0l\n        val num2 = num.abs\n\
    \        var n = num2\n        while (n > 0) {\n            val digit = n % 10\n\
    \            if (digit % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        ((evenCount, oddCount))", "     \
    \   var evens = 0L\n        var odds = 0L\n        var t = num\n        while\
    \ (t != 0) {\n            if (t % 2 == 0) evens += 1 else odds += 1\n        \
    \    t /= 10\n        }\n        return ((evens, odds))", "        var even, odd\
    \ = 0l\n        var absNum = abs(num)\n        while (absNum > 0) {\n        \
    \    if (absNum % 2 == 0) even += 1\n            else odd += 1\n            absNum\
    \ /= 10\n        }\n        return (even, odd)", "        def f(x : Long, count\
    \ : Tuple2[Long, Long]) : Tuple2[Long, Long] = {\n            if (x == 0) count\n\
    \            else if (x % 2 == 0) f(x / 10, (count._1 + 1, count._2))\n      \
    \      else f(x / 10, (count._1, count._2 + 1))\n        }\n        f(num, (0,\
    \ 0))", "        var (even, odd) = (0l, 0l)\n        for (x <- num.toString) {\n\
    \            if (x.toString.toInt % 2 == 0) even += 1\n            else odd +=\
    \ 1\n        }\n        return (even, odd)", "        def evenOddCountIter(num\
    \ : Long, even : Long, odd : Long) : Tuple2[Long, Long] = {\n            if (num\
    \ == 0) (even, odd)\n            else {\n                if (num % 2 == 0) evenOddCountIter(num\
    \ / 10, even + 1, odd)\n                else evenOddCountIter(num / 10, even,\
    \ odd + 1)\n            }\n        }\n        evenOddCountIter(abs(num), 0, 0)",
  "      val even = num.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2 ==\
    \ 0).length\n      val odd = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 1).length\n      (even, odd)", "        val nums = num.toString.toList.map(_.asDigit).filter(_\
    \ != 0)\n        val ones = nums.map(a => a % 2).sum\n        Tuple2(nums.length\
    \ - ones, ones)", "        val digits = num.toString.map(_.asDigit)\n        val\
    \ evenCount = digits.count(_ % 2 == 0)\n        val oddCount = digits.count(_\
    \ % 2 == 1)\n        (evenCount, oddCount)", "        val str = num.toString\n\
    \        val digits = str.map(_.asDigit)\n        val even = digits.filter(_ %\
    \ 2 == 0).length\n        val odd = digits.filter(_ % 2 == 1).length\n       \
    \ return (even, odd)", "        val count = (0l, 0l)\n        // TODO: write your\
    \ code here.\n        num.toString.foreach(c => c match {\n            case '0'\
    \ | '2' | '4' | '6' | '8' => (count._1 + 1, count._2)\n            case '1' |\
    \ '3' | '5' | '7' | '9' => (count._1, count._2 + 1)\n        })\n        count",
  "        var countEven = 0l\n        var countOdd = 0l\n        var tmp = num\n\
    \        while (tmp != 0) {\n            if (tmp % 2 == 0) countEven += 1\n  \
    \          else countOdd += 1\n            tmp /= 10\n        }\n        (countEven,\
    \ countOdd)", '        // your code goes here', "        var (n1, n2) = (0l, 0l)\n\
    \        var n = abs(num)\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ n1 += 1\n            else n2 += 1\n            n /= 10\n        }\n        return\
    \ (n1, n2)", "        var even = 0l\n        var odd = 0l\n        for (c <- num.toString)\
    \ {\n            if (c.toString.toInt % 2 == 0) even += 1\n            else odd\
    \ += 1\n        }\n        (even, odd)", "        var neg = num < 0;\n       \
    \ var n = num.abs;\n        var evens = 0l;\n        var odds = 0l;\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) {\n                evens += 1;\n    \
    \        } else {\n                odds += 1;\n            }\n            n /=\
    \ 10;\n        }\n        if (neg) return Tuple2((odds + 1), evens);\n       \
    \ return Tuple2(evens, odds);", "    \tvar totalEven = 0l\n    \tvar totalOdd\
    \ = 0l\n    \tvar n = abs(num)\n    \twhile (n > 0) {\n    \t\tval digit = n %\
    \ 10\n    \t\tif (digit % 2 == 0) totalEven += 1\n    \t\telse totalOdd += 1\n\
    \    \t\tn /= 10\n    \t}\n    \t(totalEven, totalOdd)", "        def countDigits(num\
    \ : Long, numEven : Long, numOdd : Long) : Tuple2[Long, Long] = {\n          \
    \  if (num == 0) return (numEven, numOdd)\n            val digit = num % 10\n\
    \            if (digit % 2 == 0) countDigits(num / 10, numEven + 1, numOdd)\n\
    \            else countDigits(num / 10, numEven, numOdd + 1)\n        }\n    \
    \    countDigits(num, 0, 0)", "        if (num > 0) {\n            val digits\
    \ = num.toString.map(_.asDigit)\n            var evenCount = 0\n            var\
    \ oddCount = 0\n            for (digit <- digits) {\n                if (digit\
    \ % 2 == 0) evenCount += 1\n                else oddCount += 1\n            }\n\
    \            (evenCount, oddCount)\n        } else {\n            val digits =\
    \ num.toString.drop(1).map(_.asDigit)\n            var evenCount = 0\n       \
    \     var oddCount = 0\n            for (digit <- digits) {\n                if\
    \ (digit % 2 == 0) evenCount += 1\n                else oddCount += 1\n      \
    \      }\n            (evenCount, oddCount)\n        }", "        // Implement\
    \ this\n        var even = 0l\n        var odd = 0l\n        var n = abs(num)\n\
    \        while (n > 0) {\n            if (n % 2 == 0) even += 1\n            else\
    \ odd += 1\n            n /= 10\n        }\n        (even, odd)", "        val\
    \ str = num.toString()\n        val evenCount = (0 /: str)((a, b) => if (b.toString.toInt\
    \ % 2 == 0) a + 1 else a)\n        val oddCount = str.length - evenCount\n   \
    \     (evenCount, oddCount)", "        var even : Long = 0;\n        var odd :\
    \ Long = 0;\n        var n : Long = num;\n        if (n < 0) {\n            n\
    \ = -n;\n        }\n        while (n > 0) {\n            val dig : Long = n %\
    \ 10;\n            if (dig % 2 == 0) {\n                even += 1;\n         \
    \   } else {\n                odd += 1;\n            }\n            n /= 10;\n\
    \        }\n        return (even, odd);", "        var evenCount = 0l\n      \
    \  var oddCount = 0l\n        var n = num\n        while (n != 0) {\n        \
    \    if (abs(n % 10) % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ even = 0l\n        var odd = 0l\n        var i = num\n        if (i < 0) {\n\
    \            i = -i\n        }\n        while (i > 0) {\n            val d = i\
    \ % 10\n            if (d % 2 == 0) {\n                even += 1\n           \
    \ } else {\n                odd += 1\n            }\n            i /= 10\n   \
    \     }\n        return (even, odd)", "        val digits = num.toString.toList.map(x\
    \ => x.asDigit)\n        (digits.filter(x => x % 2 == 0).length, digits.filter(x\
    \ => x % 2 == 1).length)", "        val stringNum = num.toString\n        var\
    \ evenCount = 0l\n        var oddCount = 0l\n        stringNum.foreach(c => c\
    \ match {\n            case '0' | '2' | '4' | '6' | '8' => evenCount += 1\n  \
    \          case '1' | '3' | '5' | '7' | '9' => oddCount += 1\n        })\n   \
    \     (evenCount, oddCount)", "      val numString = num.toString.toList\n   \
    \   (numString.filter(p => p.toString.toInt % 2 == 0).length, numString.filter(p\
    \ => p.toString.toInt % 2 == 1).length)", "        var sumEven = 0l\n        var\
    \ sumOdd = 0l\n        num.toString.foreach(x => if (x.asDigit % 2 == 0) sumEven\
    \ += 1 else sumOdd += 1)\n        (sumEven, sumOdd)", "        var k = num.abs\n\
    \        var evenCount = 0l\n        var oddCount = 0l\n        while (k > 0)\
    \ {\n            if (k % 2 == 0) {\n                evenCount += 1\n         \
    \   } else {\n                oddCount += 1\n            }\n            k /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var even = 0l\n        var\
    \ odd = 0l\n        var n = abs(num)\n        while (n > 0) {\n            if\
    \ (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n   \
    \     }\n        return (even, odd)", "        val digits = num.toString.toList.map(_.asDigit)\n\
    \        val digitTypes = for (digit <- digits) yield if (digit % 2 == 0) 1 else\
    \ 0\n        (digitTypes.filter(_ == 1).length, digitTypes.filter(_ == 0).length)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        for (e <- num.toString.toCharArray)\
    \ {\n            if (e.toInt % 2 == 0) evenCount += 1 else oddCount += 1\n   \
    \     }\n        (evenCount, oddCount)", "      // Fill Up this function body\n\
    \      // `evenOddCount` should return the tuple of even digits count and odd\
    \ digits count in the number.\n      // Example:\n      // >>> evenOddCount((-12l))\n\
    \      // ((1l, 1l))\n      // >>> evenOddCount((123l))\n      // ((1l, 2l))\n\
    \      var evenCount = 0L\n      var oddCount = 0L\n      var newNum = abs(num)\n\
    \      while (newNum > 0) {\n        val digit = newNum % 10\n        if (digit\
    \ % 2 == 0) {\n          evenCount += 1\n        } else {\n          oddCount\
    \ += 1\n        }\n        newNum /= 10\n      }\n      (evenCount, oddCount)",
  "        var even = 0l\n        var odd = 0l\n        var num_ = num\n        while\
    \ (num_ != 0) {\n            if (num_ % 2 == 0) even += 1 else odd += 1\n    \
    \        num_ /= 10\n        }\n        return Tuple2(even, odd)", "        var\
    \ t : Tuple2[Long, Long] = (0l, 0l)\n        var n = num\n        while (n !=\
    \ 0) {\n            if (n % 2 == 0) t = (t._1 + 1, t._2)\n            else t =\
    \ (t._1, t._2 + 1)\n            n /= 10\n        }\n        t", "        if (num\
    \ == 0) (1, 0)\n        else {\n            val t = evenOddCount(abs(num / 10))\n\
    \            if (num % 2 == 0) (t._1 + 1, t._2)\n            else (t._1, t._2\
    \ + 1)\n        }", "        var (evenCount, oddCount) = (0l, 0l)\n        for\
    \ (digit <- num.toString) {\n            if (digit == '-') evenCount += 1\n  \
    \          else if (digit.toInt % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n        }\n        return (evenCount, oddCount)", "        def check(n\
    \ : Long, evenCount : Long, oddCount : Long) : Tuple2[Long, Long] = {\n      \
    \      if (n == 0)\n                return (evenCount, oddCount)\n           \
    \ val digit = n % 10\n            if (digit % 2 == 0)\n                check(n\
    \ / 10, evenCount + 1, oddCount)\n            else\n                check(n /\
    \ 10, evenCount, oddCount + 1)\n        }\n        check(num, 0, 0)", "      def\
    \ iter(n : Long, even : Long, odd : Long) : Tuple2[Long, Long] = {\n        if\
    \ (n == 0) return ((even, odd))\n        else if (n % 2 == 0) iter(n / 10, even\
    \ + 1, odd)\n        else iter(n / 10, even, odd + 1)\n      }\n      iter(abs(num),\
    \ 0, 0)", "        var neg = 1l\n        if (num < 0) {\n            neg = -1l\n\
    \        }\n        var nums = num.abs.toString.map(x => x.asDigit).filter(x =>\
    \ (x % 2 == 0))\n        var evens = nums.length\n        var odds = num.abs.toString.length\
    \ - evens\n        ((evens * neg, odds * neg))", "        var even : Long = 0\n\
    \        var odd : Long = 0\n        var absNum : Long = abs(num)\n        while\
    \ (absNum > 0) {\n            if (absNum % 2 == 0) even += 1\n            else\
    \ odd += 1\n            absNum /= 10\n        }\n        return (even, odd)",
  "        var even = 0\n        var odd = 0\n        var n = abs(num)\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) {\n                even += 1\n      \
    \      } else {\n                odd += 1\n            }\n            n /= 10\n\
    \        }\n        return ((even, odd))", "        // Fill up this function body\n\
    \        // `0` is considered an even number\n        val l = num.toString.map(x\
    \ => (x.asDigit % 2 == 0, 1l)).groupBy(_._1).map(x => x._2.map(_._2).sum)\n  \
    \      (l.getOrElse(true, 0l), l.getOrElse(false, 0l))", "        val f = (x :\
    \ Char) => (if (x.isDigit) {\n            if (x.asDigit % 2 == 0) (1l, 0l) else\
    \ (0l, 1l)\n        } else (0l, 0l))\n        val (a, b) = num.toString.toCharArray.map(f).reduce((x,\
    \ y) => (x._1 + y._1, x._2 + y._2))\n        return (a, b)", "        val absNum\
    \ = abs(num)\n        if (absNum == 0) {\n            return ((1l, 0l))\n    \
    \    }\n        val even = absNum % 2\n        val power = floor(log10(absNum)).toLong\n\
    \        val divisor = pow(10, power).toLong\n        val firstDigit = absNum\
    \ / divisor\n        val remain = absNum - firstDigit * divisor\n        val remainTuple\
    \ = evenOddCount(remain)\n        if (even == 0) {\n            ((remainTuple._1\
    \ + 1l, remainTuple._2))\n        } else {\n            ((remainTuple._1, remainTuple._2\
    \ + 1l))\n        }", "        if (num == 0) {\n            return (1, 0)\n  \
    \      }\n        var temp = abs(num)\n        var evenCount = 0\n        var\
    \ oddCount = 0\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n\
    \                evenCount += 1\n            } else {\n                oddCount\
    \ += 1\n            }\n            temp /= 10\n        }\n        return (evenCount,\
    \ oddCount)", "        val evens = num.toString.map(d => if (d.toString.toInt\
    \ % 2 == 0) 1 else 0).foldLeft(0l)(_ + _)\n        val odds = num.toString.map(d\
    \ => if (d.toString.toInt % 2 == 1) 1 else 0).foldLeft(0l)(_ + _)\n        (evens,\
    \ odds)", "        var evens = 0l\n        var odds = 0l\n        var x = if (num\
    \ < 0) -num else num\n        while (x > 0) {\n            val d = x % 10\n  \
    \          if (d % 2 == 0) evens += 1\n            else odds += 1\n          \
    \  x /= 10\n        }\n        return ((evens, odds))", "        def inner(n :\
    \ Long, even : Long, odd : Long) : Tuple2[Long, Long] = {\n            if (n ==\
    \ 0) (even, odd)\n            else if (n % 2 == 0) inner(n / 10, even + 1, odd)\n\
    \            else inner(n / 10, even, odd + 1)\n        }\n        inner(abs(num),\
    \ 0, 0)", "        var numStr = num.toString\n        var pos = 0\n        var\
    \ neg = 0\n        var even = 0\n        var odd = 0\n        if (num < 0) {\n\
    \            neg = 1\n            numStr = numStr.tail\n        }\n        for\
    \ (digit <- numStr) {\n            if (digit.asDigit % 2 == 0) even += 1\n   \
    \         else odd += 1\n        }\n        (pos, neg, even, odd)", "        val\
    \ s = num.toString\n        ((s.count(_.isDigit && _.asDigit % 2 == 0)), (s.count(_.isDigit\
    \ && _.asDigit % 2 == 1)))", "        def evenOddCount(num : Long, even : Long,\
    \ odd : Long) : Tuple2[Long, Long] = {\n            if (num == 0) (even, odd)\n\
    \            else {\n                if (num % 2 == 0) evenOddCount(num / 10,\
    \ even + 1, odd)\n                else evenOddCount(num / 10, even, odd + 1)\n\
    \            }\n        }\n        evenOddCount(abs(num), 0, 0)", "        var\
    \ even = 0l\n        var odd = 0l\n        var num2 = num\n        while (num2\
    \ != 0) {\n            if (num2 % 2 == 0) even += 1\n            else odd += 1\n\
    \            num2 /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var tmp = num\n        while (tmp !=\
    \ 0) {\n            if (tmp % 2 == 0) {\n                evenCount += 1\n    \
    \        } else {\n                oddCount += 1\n            }\n            tmp\
    \ /= 10\n        }\n        (evenCount, oddCount)", "        // Please fill in\
    \ the code below\n        ???", "        val sign = if (num < 0) -1 else 1\n \
    \       var evenCount : Long = 0\n        var oddCount : Long = 0\n        var\
    \ temp : Long = sign * num\n        while (temp > 0) {\n            val digit\
    \ = temp % 10\n            if (digit % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            temp /= 10\n        }\n        Tuple2(evenCount,\
    \ oddCount)", "        var evenCount = 0\n        var oddCount = 0\n        var\
    \ d = abs(num)\n        while (d > 0) {\n            if (d % 2 == 0) {\n     \
    \           evenCount += 1\n            } else {\n                oddCount +=\
    \ 1\n            }\n            d /= 10\n        }\n        (evenCount, oddCount)",
  "        // Fill up this function body\n        // `0` indicates an even digit,\
    \ `1` an odd digit\n        val numStr = num.toString.split(\"\")\n        val\
    \ evenDigits = numStr.map(_.toInt).filter(i => i % 2 == 0).size\n        val oddDigits\
    \ = numStr.map(_.toInt).filter(i => i % 2 == 1).size\n        (evenDigits, oddDigits)",
  "        val num_str = num.toString\n        var even_count = 0l\n        var odd_count\
    \ = 0l\n        for (c <- num_str) {\n            val n = c.asDigit\n        \
    \    if (n % 2 == 0) even_count += 1\n            else odd_count += 1\n      \
    \  }\n        (even_count, odd_count)", "    \tvar evenCount = 0l\n    \tvar oddCount\
    \ = 0l\n    \tvar num1 = num\n    \tif (num1 < 0) num1 = -num1\n    \twhile (num1\
    \ > 0) {\n    \t\tif (num1 % 2 == 0) evenCount += 1\n    \t\telse oddCount +=\
    \ 1\n    \t\tnum1 /= 10\n    \t}\n    \treturn (evenCount, oddCount)", "     \
    \   val evens = num.toString.toList.count(_.asDigit % 2 == 0)\n        val odds\
    \ = num.toString.toList.count(_.asDigit % 2 == 1)\n        ((evens, odds))", " \
    \       var count = 0\n        for (i <- num.toString.length - 1 to 0 by -1) {\n\
    \            if (num.toString.charAt(i).toInt % 2 == 0) count += 1\n        }\n\
    \        (count, num.toString.length - count)", "        var evenCount = 0l\n\
    \        var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n \
    \       while (n > 0) {\n            val d = n % 10\n            if (d % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        ((evenCount, oddCount))", '        return ((num.toString.filter(c
    => c.asDigit % 2 == 0).length.toLong, num.toString.filter(c => c.asDigit % 2 ==
    1).length.toLong))', "        val s = num.toString\n        (s.count(c => c.isDigit\
    \ && c.asDigit % 2 == 0), s.count(c => c.isDigit && c.asDigit % 2 == 1))", '        ???',
  '        (num.toString.filter(c => c.asDigit % 2 == 0).length, num.toString.filter(c
    => c.asDigit % 2 == 1).length)', "        val s = num.toString\n        var odd\
    \ = 0l\n        var even = 0l\n        for (c <- s) {\n            if (c == '-')\n\
    \                continue\n            if (c.asDigit % 2 == 0) even += 1\n   \
    \         else odd += 1\n        }\n        (even, odd)", "        val even =\
    \ num.toString.filter(_.isDigit).filter(_.asDigit % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_.isDigit).filter(_.asDigit % 2 == 1).length\n   \
    \     Tuple2(even, odd)", "        val s = num.toString.split(\"\")\n        var\
    \ numOdd = 0\n        var numEven = 0\n        s.foreach(x => {\n            if\
    \ (x.toInt % 2 == 0) numEven += 1\n            else numOdd += 1\n        })\n\
    \        return ((numEven.toLong, numOdd.toLong))", "        val absVal = abs(num)\n\
    \        var evenCount = 0L\n        var oddCount = 0L\n        var curVal = absVal\n\
    \        var idx = 0L\n        while (curVal != 0) {\n            val digit =\
    \ curVal % 10\n            if (digit % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            curVal /= 10\n            idx += 1\n        }\n \
    \       return Tuple2(evenCount, oddCount)", "        var evenCount = 0l\n   \
    \     var oddCount = 0l\n        var numStr = num.toString\n        if (num <\
    \ 0) {\n            numStr = numStr.substring(1)\n        }\n        for (digit\
    \ <- numStr) {\n            if (digit.toInt % 2 == 0) {\n                evenCount\
    \ += 1\n            } else {\n                oddCount += 1\n            }\n \
    \       }\n        return ((evenCount, oddCount))", "        var evenCount = 0l\n\
    \        var oddCount = 0l\n        val absNum = abs(num)\n        var temp =\
    \ absNum\n        while (temp > 0) {\n            val digit = temp % 10\n    \
    \        if (digit % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            temp /= 10\n        }\n        (evenCount, oddCount)", "        val\
    \ iterable = convert(num).map(num => if (num % 2 == 0) (1l, 0l) else (0l, 1l))\n\
    \        iterable.foldLeft((0l, 0l)) { case ((a, b), (c, d)) => (a + c, b + d)\
    \ }", "        var eCount : Long = 0\n        var oCount : Long = 0\n        for\
    \ (a <- num.toString.toList) {\n            if (a.toString.toInt % 2 == 0) {\n\
    \                eCount += 1\n            } else {\n                oCount +=\
    \ 1\n            }\n        }\n        return (eCount, oCount)"]
stop_tokens:
- "\n    }\n"
