language: scala
name: HumanEval_10_make_palindrome
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.isEmpty) return string\n        val\
    \ len = string.length\n        val halfLen = len / 2\n        val postfix = (1\
    \ to halfLen).foldLeft(string)((a, b) => a.take(len - b) + a.takeRight(b).reverse)\n\
    \        return postfix + string.drop(len - halfLen)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6gk16klg.scala:24)\n\tat Problem.main(tmp6gk16klg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Base case: empty strings (not valid)\n  \
    \      if (string.isEmpty) {\n            return \"\"\n        }\n        // Base\
    \ case: single character strings (already palindromes)\n        if (string.length\
    \ == 1) {\n            return string\n        }\n        // Iterate over all postfixes\
    \ of the string and find the longest that is a palindrome\n        var palindromePostfix\
    \ = \"\"\n        for (i <- 0 to string.length - 1) {\n            val postfix\
    \ = string.substring(i)\n            if (isPalindrome(postfix)) {\n          \
    \      palindromePostfix = postfix\n            }\n        }\n        // Return\
    \ the appended string (prefix + postfix + reverse of prefix)\n        val prefix\
    \ = string.substring(0, string.length - palindromePostfix.length)\n        prefix\
    \ + palindromePostfix + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvqlhaxz3.scala:27:16 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (isPalindrome(postfix)) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def reverse(string : String) : String = {\n\
    \            val builder = new StringBuilder\n            for (i <- string.length\
    \ - 1 to 0 by -1) {\n                builder.append(string(i))\n            }\n\
    \            builder.toString\n        }\n        def isPalindrome(string : String)\
    \ : Boolean = {\n            val halfLength = string.length / 2\n            for\
    \ (i <- 0 until halfLength) {\n                if (string(i) != string(string.length\
    \ - 1 - i)) return false\n            }\n            true\n        }\n       \
    \ val length = string.length\n        if (length == 0) return \"\"\n        var\
    \ maxPalindrome = \"\"\n        var maxPalindromeLength = 0\n        for (i <-\
    \ 0 until length) {\n            val prefix = string.substring(0, i)\n       \
    \     val suffix = string.substring(i, length)\n            if (isPalindrome(suffix)\
    \ && suffix.length > maxPalindromeLength) {\n                maxPalindrome = suffix\n\
    \                maxPalindromeLength = suffix.length\n            }\n        }\n\
    \        string + reverse(string.substring(0, length - maxPalindromeLength))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = suffixOfLongestPalindrome(string)\n\
    \        val prefix = string.substring(0, string.length - suffix.length)\n   \
    \     prefix + suffix + (prefix.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdmwz3ck.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msuffix\e[0m = suffixOfLongestPalindrome(string)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: suffixOfLongestPalindrome\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestSuffix = string.substring(string.size\
    \ - string.size / 2, string.size).reverse\n        val prefix = string.substring(0,\
    \ string.size / 2)\n        prefix + longestSuffix + prefix.reverse\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2315pq9f.scala:21)\n\tat Problem.main(tmp2315pq9f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = longestPalindromicSuffix(string)\n\
    \        val prefix = string.slice(0, string.length - suffix.length)\n       \
    \ string + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi5cep246.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msuffix\e[0m = longestPalindromicSuffix(string)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: longestPalindromicSuffix\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffixLength\
    \ = longestPalindromicSuffix(string)\n        val prefix = string.substring(0,\
    \ n - suffixLength)\n        val suffix = string.substring(n - suffixLength)\n\
    \        val prefixReverse = prefix.reverse\n        return prefixReverse + suffix\
    \ + prefixReverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfl0_w9vl.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msuffixLength\e[0m = longestPalindromicSuffix(string)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: longestPalindromicSuffix\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Look for a palindromic postfix.\n       \
    \ var length : Int = string.length\n        val prefix : String = string.substring(0,\
    \ string.length / 2)\n        val palindromeLength : Int = (0 to prefix.length\
    \ - 1).takeWhile(index => prefix(index) == string(length - 1 - index)).lastOption.getOrElse(0)\n\
    \        val suffix : String = prefix.substring(0, prefix.length - palindromeLength)\n\
    \        // Append the reverse of the prefix before palindromic postfix to the\
    \ end of the string.\n        return string + suffix.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl4xd37da.scala:26)\n\tat Problem.main(tmpl4xd37da.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var result = string + reverse(string)\n    \
    \    var palindromeSuffix = \"\"\n        for (i <- 0 to string.length - 1) {\n\
    \            if (isPalindrome(string.substring(i))) {\n                palindromeSuffix\
    \ = string.substring(i)\n                break\n            }\n        }\n   \
    \     var prefix = string.substring(0, string.length - palindromeSuffix.length)\n\
    \        result = prefix + palindromeSuffix + reverse(prefix)\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm4mk2px.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m = string + reverse(string)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Not found: reverse\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqm4mk2px.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (isPalindrome(string.substring(i)))\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqm4mk2px.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                break\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm4mk2px.scala:24:45 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        result = prefix + palindromeSuffix + reverse(prefix)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                             Not found: reverse\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Find the longest palindromic suffix\n   \
    \     def makePalindromeHelper(string : String, longestPalindrome : String) :\
    \ String = {\n            if (string.length < 1) {\n                longestPalindrome\n\
    \            } else {\n                if (isPalindrome(string)) {\n         \
    \           makePalindromeHelper(string.substring(0, string.length - 1), string)\n\
    \                } else {\n                    makePalindromeHelper(string.substring(0,\
    \ string.length - 1), longestPalindrome)\n                }\n            }\n \
    \       }\n        val longestPalindrome = makePalindromeHelper(string, \"\")\n\
    \        // Append reverse of the prefix to the palindromic suffix\n        string.substring(0,\
    \ string.length - longestPalindrome.length) + longestPalindrome + string.substring(0,\
    \ string.length - longestPalindrome.length).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi7vhfmzd.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (isPalindrome(string))\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length;\n        val palindrome\
    \ = new StringBuilder;\n        var i = n - 1;\n        while (i >= 0) {\n   \
    \         if (isPalindrome(string.substring(i))) {\n                palindrome.append(string.substring(0,\
    \ i));\n                palindrome.append(string.substring(i).reverse);\n    \
    \            return palindrome.toString;\n            }\n            i -= 1;\n\
    \        }\n        palindrome.append(string.reverse);\n        palindrome.append(string);\n\
    \        return palindrome.toString;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyixaxv06.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (isPalindrome(string.substring(i)))\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val s = string.toArray\n        val (s1, s2)\
    \ = (s.slice(0, s.length / 2), s.slice(s.length / 2, s.length))\n        val (longestPalindromePrefix,\
    \ longestPalindromePostfix) = (s1.reverse.intersect(s2), s1.intersect(s2.reverse))\n\
    \        val (prefix, postfix) = (s1.drop(longestPalindromePrefix.length), s2.drop(longestPalindromePostfix.length))\n\
    \        if (prefix.length > 0) prefix.reverse ++ s ++ postfix else s\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn4tn_nak.scala:19:31\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (prefix.length\
    \ > \e[31m0\e[0m) prefix.reverse ++ s ++ postfix \e[33melse\e[0m s\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Found:    Array[Char]\n\e[31m  \
    \ |\e[0m                               Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpn4tn_nak.scala:19:67 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (prefix.length > \e[31m0\e[0m)\
    \ prefix.reverse ++ s ++ postfix \e[33melse\e[0m s\n\e[31m\e[31m   |\e[0m    \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                             Found:    (s : Array[Char])\n\
    \e[31m   |\e[0m                                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var reverse : String = string.reverse\n    \
    \    val stringSize : Int = string.size\n        val first : Int = stringSize\n\
    \        val second : Int = stringSize - string.indexOf(reverse)\n        val\
    \ prefix : String = string.slice(0, second)\n        val suffix : String = string.slice(second,\
    \ stringSize)\n        suffix + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplwdyzbft.scala:26)\n\tat Problem.main(tmplwdyzbft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def substring(string : String, start : Int,\
    \ end : Int) : String = {\n            var index = start\n            var result\
    \ = \"\"\n            while (index < end) {\n                result += string(index)\n\
    \                index += 1\n            }\n            result\n        }\n  \
    \      def isPalindrome(string : String) : Boolean = {\n            var i = 0\n\
    \            var j = string.length - 1\n            while (i < j) {\n        \
    \        if (string(i) != string(j)) return false\n                i += 1\n  \
    \              j -= 1\n            }\n            true\n        }\n        var\
    \ suffix = 0\n        while (true) {\n            val substring = substring(string,\
    \ string.length - suffix, string.length)\n            if (isPalindrome(substring))\
    \ return string + substring.reverse\n            suffix += 1\n        }\n    \
    \    \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkc0thgep.scala:36:28 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e[36msubstring\e[0m = substring(string,\
    \ string.length - suffix, string.length)\n\e[31m\e[31m   |\e[0m              \
    \              ^\e[0m\n\e[31m   |\e[0m                            Recursive \e\
    [33mvalue\e[0m \e[35msubstring\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // If the string is not a palindrome then the\
    \ prefix before palindromic suffix is non-empty.\n        // Otherwise, the string\
    \ itself is a palindrome, so the reverse of the prefix before palindromic suffix\
    \ is empty.\n        if (!isPalindrome(string))\n            string + string.substring(0,\
    \ string.length - findLongestPalindromicSuffix(string)).reverse\n        else\n\
    \            string\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbyj6wvf2.scala:17:13 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (!isPalindrome(string))\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Not found:\
    \ isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbyj6wvf2.scala:18:57\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            string + string.substring(\e\
    [31m0\e[0m, string.length - findLongestPalindromicSuffix(string)).reverse\n\e\
    [31m\e[31m   |\e[0m                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: findLongestPalindromicSuffix\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Find the longest palindromic suffix of supplied\
    \ string.\n        def iter(postfix : String, suffix : String) : String = {\n\
    \            if (postfix.isEmpty) suffix\n            else {\n               \
    \ val maybeSuffix = postfix.last + suffix\n                if (maybeSuffix ==\
    \ maybeSuffix.reverse) iter(postfix.init, maybeSuffix)\n                else iter(postfix.init,\
    \ suffix)\n            }\n        }\n        if (string.isEmpty) \"\"\n      \
    \  else string + string.init.reverse.drop(iter(string.init, \"\").length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplkbpsvdq.scala:30)\n\tat Problem.main(tmplkbpsvdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def reverse(string : String) : String = {\n\
    \            var newString = \"\"\n            for (ch <- string) newString =\
    \ ch + newString\n            newString\n        }\n        def isPalindrome(string\
    \ : String) : Boolean = {\n            if (string.length <= 1) true\n        \
    \    else if (string(0) != string(string.length - 1)) false\n            else\
    \ isPalindrome(string.substring(1, string.length - 1))\n        }\n        def\
    \ findLongestPalindrome(string : String) : String = {\n            if (isPalindrome(string))\
    \ string\n            else findLongestPalindrome(string.substring(0, string.length\
    \ - 1))\n        }\n        def findLongestNonPalindrome(string : String) : String\
    \ = {\n            if (!isPalindrome(string)) string\n            else findLongestNonPalindrome(string.substring(1,\
    \ string.length))\n        }\n        var suffix = findLongestPalindrome(string)\n\
    \        var prefix = findLongestNonPalindrome(string.substring(0, string.length\
    \ - suffix.length))\n        prefix + string + reverse(prefix)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.findLongestNonPalindrome$1(tmp44xozjj5.scala:31)\n\tat Problem$.makePalindrome(tmp44xozjj5.scala:34)\n\
    \tat Problem$.main(tmp44xozjj5.scala:38)\n\tat Problem.main(tmp44xozjj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length <= 1) {\n            return\
    \ string\n        }\n        val array = string.toCharArray\n        var palindromeSize\
    \ = 1\n        for (i <- array.length - 1 to 1 by -1) {\n            if (array(i)\
    \ == array(i - 1)) {\n                palindromeSize += 1\n            } else\
    \ {\n                break\n            }\n        }\n        var prefix = \"\"\
    \n        for (i <- 0 until array.length - palindromeSize) {\n            prefix\
    \ += array(i)\n        }\n        prefix.reverse + string\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyz2yndcs.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return string\n    \
    \    val suffixes = Range(string.length - 1, -1, -1).map(i => string.substring(i,\
    \ string.length))\n        val postfixes = suffixes.filter(suffix => isPalindrome(suffix))\n\
    \        val longestPalindromicPostfix = postfixes.maxBy(postfix => postfix.length)\n\
    \        string + reverse(string.substring(0, string.length - longestPalindromicPostfix.length))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua0pnhes.scala:17:50 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpostfixes\e[0m = suffixes.filter(\e\
    [36msuffix\e[0m => isPalindrome(suffix))\n\e[31m\e[31m   |\e[0m              \
    \                                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                           Not found: isPalindrome\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpua0pnhes.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        string + reverse(string.substring(\e[31m0\e[0m,\
    \ string.length - longestPalindromicPostfix.length))\n\e[31m\e[31m   |\e[0m  \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: reverse\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        var longestPalindromeLength\
    \ = 0\n        for (i <- 0 to length) {\n            if (isPalindrome(string.substring(i)))\
    \ longestPalindromeLength = i\n        }\n        val prefix = string.substring(0,\
    \ length - longestPalindromeLength)\n        val reversedPrefix = prefix.reverse\n\
    \        string + reversedPrefix\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa_5nzovw.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (isPalindrome(string.substring(i)))\
    \ longestPalindromeLength = i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: isPalindrome\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.isEmpty) {\n            return string\n\
    \        }\n        var i = string.length - 1\n        while(i >= 0) {\n     \
    \       if (isPalindrome(string.substring(i))) {\n                val reversedPrefix\
    \ = string.substring(0, i).reverse\n                return string + reversedPrefix\n\
    \            }\n            i -= 1\n        }\n        throw new IllegalArgumentException(\"\
    Unable to make palindrome\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ynbbffd.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (isPalindrome(string.substring(i)))\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.isEmpty) return string\n        val\
    \ suffix = makePalindromeSuffix(string)\n        val prefix = string.drop(suffix.length)\n\
    \        prefix.reverse + string\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3ecql7d.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msuffix\e[0m = makePalindromeSuffix(string)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                     Not found: makePalindromeSuffix\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Return the longest postfix that is a palindrome.\n\
    \        def suffix(string : String) : String = {\n            // If string is\
    \ a palindrome, return it.\n            def isPalindrome(string : String) : Boolean\
    \ = {\n                // Return true if `string` is a palindrome and false otherwise.\n\
    \                def stringIterator(string : String) : Iterator[Char] = {\n  \
    \                  // Return iterator to the string.\n                    val\
    \ stringBuffer = new ListBuffer[Char]\n                    for (i <- 0 until string.length)\
    \ {\n                        stringBuffer += string(i)\n                    }\n\
    \                    return stringBuffer.toIterator\n                }\n     \
    \           // `halfLength` will be the length of a string in the middle of a\
    \ string and its reverse.\n                val halfLength = string.length / 2\n\
    \                for (i <- 0 until halfLength) {\n                    if (string(i)\
    \ != string(string.length - 1 - i)) {\n                        return false\n\
    \                    }\n                }\n                return true\n     \
    \       }\n            // Return index of the first occurence of a palindrome.\n\
    \            def recursion(i : Int) : Int = {\n                if (i >= string.length)\
    \ {\n                    return -1\n                }\n                else if\
    \ (isPalindrome(string.substring(i))) {\n                    return i\n      \
    \          }\n                else {\n                    return recursion(i +\
    \ 1)\n                }\n            }\n            if (string.length == 0) {\n\
    \                return \"\"\n            }\n            val index = recursion(0)\n\
    \            if (index != -1) {\n                return string.substring(index)\n\
    \            }\n            else {\n                return \"\"\n            }\n\
    \        }\n        // Return a string that is equal to its reverse.\n       \
    \ def makeReversed(string : String) : String = {\n            val reversed = new\
    \ StringBuilder\n            for (i <- string.length - 1 to 0 by -1) {\n     \
    \           reversed += string(i)\n            }\n            return reversed.toString\n\
    \        }\n        // Return the shortest palindrome that starts with a supplied\
    \ string.\n        def recursion(string : String) : String = {\n            val\
    \ suffix = suffix(string)\n           \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp88l93w6b.scala:82:0 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp88l93w6b.scala:70:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m70 |\e[0m            \e[33mval\e\
    [0m \e[36msuffix\e[0m = suffix(string)\n\e[31m\e[31m   |\e[0m                \
    \         ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35msuffix\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp88l93w6b.scala:72:5 ---------------------\e[0m\e[0m\n\e[31m72\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp88l93w6b.scala:81:1 ---------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp88l93w6b.scala:73:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m73 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Find the longest palindromic suffix.\n  \
    \      def findLongestPalindromicSuffix(string : String) : String = {\n      \
    \      def find(string : String, i : Int) : String = {\n                if (i\
    \ > string.length) \"\"\n                else if (string.take(i) == string.takeRight(i).reverse)\
    \ string.take(i)\n                else find(string, i + 1)\n            }\n  \
    \          find(string, 1)\n        }\n        string + string.take(string.length\
    \ - findLongestPalindromicSuffix(string).length).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwdc184lq.scala:29)\n\tat Problem.main(tmpwdc184lq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val substrings = for(i <- 0 to string.length\
    \ / 2) yield string.substring(0, string.length - i)\n        val palindromes =\
    \ substrings.filter(s => s == s.reverse)\n        val maxPalindrome = palindromes.map(s\
    \ => (s, s.length)).maxBy(_._2)._1\n        maxPalindrome + string.reverse.substring(0,\
    \ string.length - maxPalindrome.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.maxBy\n\tat scala.collection.IterableOnceOps.maxBy(IterableOnce.scala:978)\n\
    \tat scala.collection.IterableOnceOps.maxBy$(IterableOnce.scala:976)\n\tat scala.collection.AbstractIterable.maxBy(Iterable.scala:926)\n\
    \tat Problem$.makePalindrome(tmpt5ftezi0.scala:17)\n\tat Problem$.main(tmpt5ftezi0.scala:23)\n\
    \tat Problem.main(tmpt5ftezi0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val prefix = string.substring(0, string.length\
    \ - longestPalindromeSuffixLength(string))\n        string + prefix.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdw80ctb2.scala:15:57 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprefix\e[0m = string.substring(\e\
    [31m0\e[0m, string.length - longestPalindromeSuffixLength(string))\n\e[31m\e[31m\
    \   |\e[0m                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: longestPalindromeSuffixLength\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def helper(s : String, pos : Int) : String =\
    \ {\n            if (pos == s.length) s\n            else if (s.charAt(pos) ==\
    \ s.charAt(0)) helper(s, pos + 1)\n            else s.substring(pos, s.length)\
    \ + s.substring(0, pos).reverse\n        }\n        if (string.length == 0) string\n\
    \        else helper(string + string.reverse, 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8yzh16ga.scala:25)\n\tat Problem.main(tmp8yzh16ga.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var palindromeSuffix = \"\"\n        var palindromeSuffixLength\
    \ = 0\n        for (i <- 0 to string.length) {\n            val suffix = string.substring(i)\n\
    \            if (isPalindrome(suffix)) {\n                palindromeSuffix = suffix\n\
    \                palindromeSuffixLength = palindromeSuffix.length\n          \
    \      break\n            }\n        }\n        string + (string.substring(0,\
    \ string.length - palindromeSuffixLength).reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpllq5jfqr.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (isPalindrome(suffix)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpllq5jfqr.scala:22:16 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val n =\
    \ 2 * length + 1\n        val longestPalindromeAt = Array.fill(n)(0)\n       \
    \ longestPalindromeAt(0) = 0\n        longestPalindromeAt(1) = 1\n        var\
    \ center = 1\n        var right = 2\n        for (i <- 2 until n) {\n        \
    \    val j = 2 * center - i\n            longestPalindromeAt(i) = min(right -\
    \ i, longestPalindromeAt(j))\n            val left = i - 1 - longestPalindromeAt(i)\n\
    \            val right = i + 1 + longestPalindromeAt(i)\n            while (left\
    \ >= 0 && right < n && string(left / 2) == string(right / 2)) {\n            \
    \    longestPalindromeAt(i) += 1\n                left -= 1\n                right\
    \ += 1\n            }\n            if (i + longestPalindromeAt(i) > right) {\n\
    \                center = i\n                right = i + longestPalindromeAt(i)\n\
    \            }\n        }\n        var maxIndex = 0\n        for (i <- 1 until\
    \ n) {\n            if (longestPalindromeAt(i) > longestPalindromeAt(maxIndex))\
    \ maxIndex = i\n        }\n        string.substring(0, (maxIndex - longestPalindromeAt(maxIndex))\
    \ / 2) + string.reverse + string.substring((maxIndex + longestPalindromeAt(maxIndex))\
    \ / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn8xwrr3z.scala:29:21 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                left -= \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                value -=\
    \ is not a member of Int - did you mean left.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpn8xwrr3z.scala:30:22 ------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m                right += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean right.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpn8xwrr3z.scala:34:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                right\
    \ = i + longestPalindromeAt(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val right\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        def getFirstOccurence(prefix\
    \ : String) : Int = {\n            var i = n - 1\n            while (i >= 0) {\n\
    \                if (string.charAt(i) == prefix.charAt(0)) {\n               \
    \     var j = 1\n                    while (j < prefix.length && i + j < n &&\
    \ string.charAt(i + j) == prefix.charAt(j)) {\n                        j += 1\n\
    \                    }\n                    if (j == prefix.length) return i\n\
    \                }\n                i -= 1\n            }\n            return\
    \ -1\n        }\n        def getFirstOccurenceMirror(prefix : String) : Int =\
    \ {\n            var i = n - 1\n            while (i >= 0) {\n               \
    \ if (string.charAt(i) == prefix.charAt(prefix.length - 1)) {\n              \
    \      var j = 1\n                    while (j < prefix.length && i + j < n &&\
    \ string.charAt(i + j) == prefix.charAt(prefix.length - 1 - j)) {\n          \
    \              j += 1\n                    }\n                    if (j == prefix.length)\
    \ return i\n                }\n                i -= 1\n            }\n       \
    \     return -1\n        }\n        def getFirstOccurenceGreedy(prefix : String)\
    \ : Int = {\n            var i = n - 1\n            while (i >= 0) {\n       \
    \         if (string.charAt(i) == prefix.charAt(prefix.length - 1)) {\n      \
    \              var j = 1\n                    while (j < prefix.length && i +\
    \ j < n && string.charAt(i + j) == prefix.charAt(prefix.length - 1 - j)) {\n \
    \                       j += 1\n                    }\n                    if\
    \ (j == prefix.length) return i\n                }\n                i -= 1\n \
    \           }\n            return -1\n        }\n        var i = 0\n        while\
    \ (i < n) {\n            val prefix = string.substring(0, n - i)\n           \
    \ val mirrorPrefix = string.substring(0, i)\n            val greedyPrefix = string.substring(0,\
    \ n - i)\n            if (prefix == string.substring(i, n)) {\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps_aeai77.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps_aeai77.scala:59:8\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m        \e[33mwhile\e[0m (i\
    \ < n) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found: \
    \   Unit\n\e[31m   |\e[0m        Required: String\n\e[31m60 |\e[0m           \
    \ \e[33mval\e[0m \e[36mprefix\e[0m = string.substring(\e[31m0\e[0m, n - i)\n\e\
    [31m61 |\e[0m            \e[33mval\e[0m \e[36mmirrorPrefix\e[0m = string.substring(\e\
    [31m0\e[0m, i)\n\e[31m62 |\e[0m            \e[33mval\e[0m \e[36mgreedyPrefix\e\
    [0m = string.substring(\e[31m0\e[0m, n - i)\n\e[31m63 |\e[0m            \e[33mif\e\
    [0m (prefix == string.substring(i, n)) {\n\e[31m64 |\e[0m    }\n\e[31m65 |\e[0m\
    \    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e\
    [0m]) = {\n\e[31m66 |\e[0m    assert(makePalindrome((\e[31m\"\"\e[0m)).equals((\e\
    [31m\"\"\e[0m)));\n\e[31m67 |\e[0m    assert(makePalindrome((\e[31m\"x\"\e[0m)).equals((\e\
    [31m\"x\"\e[0m)));\n\e[31m68 |\e[0m    assert(makePalindrome((\e[31m\"xyz\"\e\
    [0m)).equals((\e[31m\"xyzyx\"\e[0m)));\n\e[31m69 |\e[0m    assert(makePalindrome((\e\
    [31m\"xyx\"\e[0m)).equals((\e[31m\"xyx\"\e[0m)));\n\e[31m70 |\e[0m    assert(makePalindrome((\e\
    [31m\"jerry\"\e[0m)).equals((\e[31m\"jerryrrej\"\e[0m)));\n\e[31m71 |\e[0m   \
    \ }\n\e[31m72 |\e[0m}\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val len = string.length\n        val lenOver2\
    \ = len / 2\n        for (i <- 0 to lenOver2) {\n            val curr = string.substring(i)\n\
    \            if (curr == curr.reverse) return string + curr.reverse.substring(0,\
    \ len - i)\n        }\n        string\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr8s3rji7.scala:25)\n\tat Problem.main(tmpr8s3rji7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.isEmpty) return string\n        val\
    \ reverse = string.reverse\n        val reverseIndex = reverse.indexOf(string)\n\
    \        string + reverse.substring(reverseIndex + 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppi0oolfo.scala:23)\n\tat Problem.main(tmppi0oolfo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversed = prefix.reverse\n        val palindrome = reversed + string + reversed\n\
    \        palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp422n9vwt.scala:24)\n\tat Problem.main(tmp422n9vwt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val reversePrefixLength\
    \ = (0 until length).find(i => isPalindrome(string.substring(0, i))).getOrElse(0)\n\
    \        (string + string.substring(0, length - reversePrefixLength).reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi6z50z9.scala:16:61 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mreversePrefixLength\e[0m\
    \ = (\e[31m0\e[0m until length).find(\e[36mi\e[0m => isPalindrome(string.substring(\e\
    [31m0\e[0m, i))).getOrElse(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                 Not found: isPalindrome\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val str = string + \"#\" + string.reverse\n\
    \        val suffixArray = new SuffixArray(str)\n        suffixArray.findShortestPrefix(string)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphx5wf8su.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msuffixArray\e[0m = \e[33mnew\e\
    [0m \e[35mSuffixArray\e[0m(str)\n\e[31m\e[31m   |\e[0m                       \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ type SuffixArray\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val reversed = string.reverse\n        for (i\
    \ <- string.length - 1 to 0 by -1) {\n            if (string.startsWith(reversed.substring(string.length\
    \ - i))) {\n                return string + reversed.substring(0, string.length\
    \ - i)\n            }\n        }\n        throw new IllegalArgumentException(\"\
    Can't make palindrome from string \\\"\" + string + \"\\\"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: Can't make palindrome from string \"\
    \"\n\tat Problem$.makePalindrome(tmpcvlgl80n.scala:21)\n\tat Problem$.main(tmpcvlgl80n.scala:24)\n\
    \tat Problem.main(tmpcvlgl80n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        var maxPalindromeLength\
    \ = 0\n        var maxPalindromeBegin = 0\n        for (i <- 0 until n) {\n  \
    \          var l = i\n            var r = i\n            while (l >= 0 && r <\
    \ n && string(l) == string(r)) {\n                if (r - l + 1 > maxPalindromeLength)\
    \ {\n                    maxPalindromeLength = r - l + 1\n                   \
    \ maxPalindromeBegin = l\n                }\n                l -= 1\n        \
    \        r += 1\n            }\n            l = i\n            r = i + 1\n   \
    \         while (l >= 0 && r < n && string(l) == string(r)) {\n              \
    \  if (r - l + 1 > maxPalindromeLength) {\n                    maxPalindromeLength\
    \ = r - l + 1\n                    maxPalindromeBegin = l\n                }\n\
    \                l -= 1\n                r += 1\n            }\n        }\n  \
    \      string + string.substring(0, n - maxPalindromeLength).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5g53gjhf.scala:47)\n\tat Problem.main(tmp5g53gjhf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Helper function to find the longest palindromic\
    \ suffix, the substring of string that is a palindrome and is at the end of the\
    \ string.\n        def findLongestPalindromicSuffix(string : String) : String\
    \ = {\n            if (string.length == 0) return string\n            for (len\
    \ <- string.length to 0 by -1) {\n                if (isPalindrome(string.substring(string.length\
    \ - len))) return string.substring(string.length - len)\n            }\n     \
    \       return \"\"\n        }\n        // Helper function to check if a string\
    \ is a palindrome.\n        def isPalindrome(string : String) : Boolean = {\n\
    \            for (i <- 0 until string.length / 2) {\n                if (string(i)\
    \ != string(string.length - 1 - i)) return false\n            }\n            return\
    \ true\n        }\n        // Find the longest palindromic suffix.\n        val\
    \ palindromicSuffix = findLongestPalindromicSuffix(string)\n        // The prefix\
    \ of the string is the string minus the palindromic suffix.\n        val prefix\
    \ = string.substring(0, string.length - palindromicSuffix.length)\n        //\
    \ To make a palindrome, take the prefix and reverse it and append it to the original\
    \ string.\n        return string + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010285
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var i = 0\n        var j = string.length - 1\n\
    \        while (i < j) {\n            if (string(i) != string(j)) {\n        \
    \        return string.substring(0, j) + string.reverse.substring(string.length\
    \ - j) + string.substring(j)\n            }\n            i += 1\n            j\
    \ -= 1\n        }\n        return string\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3u47idfv.scala:29)\n\tat Problem.main(tmp3u47idfv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val stringReverse = string.reverse\n       \
    \ val stringWithReverse = string + ' ' + stringReverse\n        val lps = longestPalindromicSubstring(stringWithReverse)\n\
    \        stringReverse.substring(0, stringReverse.length - lps.length) + string\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3syy8bo9.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mlps\e[0m = longestPalindromicSubstring(stringWithReverse)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: longestPalindromicSubstring\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length() == 0) {\n            return\
    \ string\n        }\n        var maxPalindromeSuffixLength = 0\n        for (i\
    \ <- string.length() - 1 to 0 by -1) {\n            val suffix = string.substring(i)\n\
    \            if (isPalindrome(suffix)) {\n                maxPalindromeSuffixLength\
    \ = suffix.length()\n                break\n            }\n        }\n       \
    \ val prefix = string.substring(0, string.length() - maxPalindromeSuffixLength)\n\
    \        string + reverse(prefix)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvhtk5yy.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (isPalindrome(suffix)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdvhtk5yy.scala:23:16 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdvhtk5yy.scala:27:17 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        string + reverse(prefix)\n\e[31m\e[31m   |\e\
    [0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: reverse\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n      def isPalindrome(string : String) : Boolean =\
    \ string == string.reverse\n      def getPostfix(string : String) : (String, String)\
    \ = {\n        val halves = string.splitAt(string.length / 2)\n        val prefix\
    \ = halves._1\n        val postfix = halves._2\n        val reversedPostfix =\
    \ postfix.reverse\n        val prefixesPostfix = prefix.endsWith(reversedPostfix)\n\
    \        if (prefixesPostfix) (string, \"\")\n        else {\n          val postfixWithoutLastChar\
    \ = postfix.tail\n          val prefixWithCharFromPostfix = prefix + postfixWithoutLastChar.head\n\
    \          val withoutCharResult = getPostfix(prefixWithCharFromPostfix)\n   \
    \       (withoutCharResult._1, postfixWithoutLastChar.head + withoutCharResult._2)\n\
    \        }\n      }\n      val nonPalindromicString = getPostfix(string)._1\n\
    \      val palindromicSuffix = getPostfix(string)._2\n      nonPalindromicString\
    \ + palindromicSuffix.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty String\n\tat scala.collection.StringOps$.head$extension(StringOps.scala:1129)\n\
    \tat Problem$.getPostfix$1(tmp2tf5292w.scala:25)\n\tat Problem$.makePalindrome(tmp2tf5292w.scala:30)\n\
    \tat Problem$.main(tmp2tf5292w.scala:36)\n\tat Problem.main(tmp2tf5292w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010285
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val reversedString = string.reverse\n      \
    \  var longestPalindromePostfix = \"\"\n        var longestPalindromePostfixIndex\
    \ = -1\n        for (i <- 0 to string.length - 1) {\n            val candidatePostfix\
    \ = string.slice(i, string.length)\n            if (candidatePostfix == reversedString.slice(0,\
    \ string.length - i)) {\n                longestPalindromePostfix = candidatePostfix\n\
    \                longestPalindromePostfixIndex = i\n            }\n        }\n\
    \        string + reversedString.slice(string.length - longestPalindromePostfixIndex,\
    \ string.length)\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmtuewkhp.scala:31)\n\tat Problem.main(tmpmtuewkhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val sb = new StringBuilder(string)\n       \
    \ sb.append(string.reverse.substring(findLongestPalindromicSuffix(string)))\n\
    \        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzmmno5na.scala:16:43 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        sb.append(string.reverse.substring(findLongestPalindromicSuffix(string)))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: findLongestPalindromicSuffix\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindrome = longestPalindromeInSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        string + reverse(prefix)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxy69t27s.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindrome\e[0m =\
    \ longestPalindromeInSuffix(string)\n\e[31m\e[31m   |\e[0m                   \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                Not found: longestPalindromeInSuffix\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxy69t27s.scala:17:17 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        string + reverse(prefix)\n\e[31m\e[31m   |\e\
    [0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: reverse\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.isEmpty) string\n        else {\n\
    \            val suf = longestSuffixPalindrome(string)\n            string + (string.drop(suf.length)\
    \ reverse)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwmugk_8q.scala:18:53 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            string + (string.drop(suf.length) reverse)\n\
    \e[31m\e[31m   |\e[0m                                                     ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwmugk_8q.scala:17:22 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            \e[33mval\e[0m \e[36msuf\e[0m = longestSuffixPalindrome(string)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: longestSuffixPalindrome\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010282
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def findPalindromeSuffix(string : String) :\
    \ String = {\n            for (i <- 0 to string.length) {\n                if\
    \ (isPalindrome(string.substring(i))) return string.substring(i)\n           \
    \ }\n            \"\"\n        }\n        def isPalindrome(string : String) :\
    \ Boolean = {\n            if (string.length == 0) return true\n            return\
    \ string.substring(0, 1) == string.substring(string.length - 1, string.length)\
    \ && isPalindrome(string.substring(1, string.length - 1))\n        }\n       \
    \ return string + string.substring(0, string.length - findPalindromeSuffix(string).length).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 1\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.isPalindrome$1(tmphv4rknte.scala:23)\n\tat Problem$.findPalindromeSuffix$1$$anonfun$1(tmphv4rknte.scala:17)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.findPalindromeSuffix$1(tmphv4rknte.scala:18)\n\
    \tat Problem$.makePalindrome(tmphv4rknte.scala:25)\n\tat Problem$.main(tmphv4rknte.scala:29)\n\
    \tat Problem.main(tmphv4rknte.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def prefixMatching(index : Int, length : Int)\
    \ : Boolean = {\n            for (i <- index until length) if (string(i) != string(length\
    \ - i + index - 1)) return false\n            return true\n        }\n       \
    \ for (length <- string.length to 1 by -1) {\n            if (prefixMatching(0,\
    \ length)) return string + string.substring(length).reverse\n        }\n     \
    \   return string\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbu9wbn17.scala:27)\n\tat Problem.main(tmpbu9wbn17.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // >>> getPalindromicPostfix((\"\"))._1\n  \
    \      // (\"\")\n        // >>> getPalindromicPostfix((\"cat\"))._1\n       \
    \ // (\"\")\n        // >>> getPalindromicPostfix((\"atac\"))._1\n        // (\"\
    atac\")\n        // >>> getPalindromicPostfix((\"catac\"))._1\n        // (\"\
    catac\")\n        def getPalindromicPostfix(string : String) : (String, Int) =\
    \ {\n            val size = string.size\n            val upperLimit = size / 2\
    \ + 1\n            def getPalindromicPostfixHelper(index : Int) : (String, Int)\
    \ = {\n                if (index == 0) (\"\", 0)\n                else {\n   \
    \                 val c1 = string(size - index)\n                    val c2 =\
    \ string(size - index - 1)\n                    if (c1 == c2) getPalindromicPostfixHelper(index\
    \ - 1)\n                    else {\n                        val (string, size)\
    \ = getPalindromicPostfixHelper(index - 1)\n                        (string, size)\n\
    \                    }\n                }\n            }\n            getPalindromicPostfixHelper(upperLimit)\n\
    \        }\n        val (postfix, postfixSize) = getPalindromicPostfix(string)\n\
    \        val prefix = string.slice(0, string.size - postfixSize)\n        string\
    \ + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.getPalindromicPostfixHelper$1(tmpjegtz1h5.scala:29)\n\
    \tat Problem$.getPalindromicPostfix$1(tmpjegtz1h5.scala:38)\n\tat Problem$.makePalindrome(tmpjegtz1h5.scala:40)\n\
    \tat Problem$.main(tmpjegtz1h5.scala:45)\n\tat Problem.main(tmpjegtz1h5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = (for (i <- 0 to string.length -\
    \ 1) yield string.substring(i, string.length)).filter(s => s == s.reverse).maxBy(_.length)\n\
    \        string + string.substring(0, string.length - suffix.length).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.maxBy\n\tat scala.collection.IterableOnceOps.maxBy(IterableOnce.scala:978)\n\
    \tat scala.collection.IterableOnceOps.maxBy$(IterableOnce.scala:976)\n\tat scala.collection.AbstractIterable.maxBy(Iterable.scala:926)\n\
    \tat Problem$.makePalindrome(tmpbf1onblm.scala:15)\n\tat Problem$.main(tmpbf1onblm.scala:19)\n\
    \tat Problem.main(tmpbf1onblm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val (pre, pal) = string.foldLeft((\"\", \"\"\
    ))((x, e) => {\n            if (isPalindrome(x._1 + e + x._2)) (x._1 + e, x._2)\n\
    \            else (x._1, e + x._2)\n        })\n        pre + pal\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnvy4ajyt.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (isPalindrome(x._1 + e + x._2))\
    \ (x._1 + e, x._2)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def reverse(string : String) : String = {\n\
    \            var stringBuilder = new StringBuilder\n            for (i <- string.length\
    \ - 1 to 0 by -1) stringBuilder += string(i)\n            stringBuilder.toString\n\
    \        }\n        def longestPostfixPalindrome(string : String) : String = {\n\
    \            var map = Map[(Int, Int), Boolean]()\n            var length = 0\n\
    \            var postfix = \"\"\n            for (start <- 0 to string.length\
    \ - 1) {\n                for (i <- start to string.length - 1) {\n          \
    \          val j = string.length - 1 - i + start\n                    val isPalindrome\
    \ = if (start == i) true else if (start + 1 == i) string(start) == string(i) else\
    \ if (map((start + 1, i - 1)) && string(start) == string(i)) true else false\n\
    \                    map += ((start, i) -> isPalindrome)\n                   \
    \ if (isPalindrome && i - start + 1 > length) {\n                        length\
    \ = i - start + 1\n                        postfix = string.substring(start, i\
    \ + 1)\n                    }\n                }\n            }\n            postfix\n\
    \        }\n        val postfix = longestPostfixPalindrome(string)\n        val\
    \ prefix = string.substring(0, string.length - postfix.length)\n        string\
    \ + reverse(prefix)\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: (1,1)\n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.longestPostfixPalindrome$1$$anonfun$1$$anonfun$1(tmpgb900hml.scala:27)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.longestPostfixPalindrome$1$$anonfun$1(tmpgb900hml.scala:33)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.longestPostfixPalindrome$1(tmpgb900hml.scala:34)\n\
    \tat Problem$.makePalindrome(tmpgb900hml.scala:37)\n\tat Problem$.main(tmpgb900hml.scala:44)\n\
    \tat Problem.main(tmpgb900hml.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty."
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var s = string\n        var longestPalindrome\
    \ = \"\"\n        while (s.length != 0) {\n            if (s == s.reverse) {\n\
    \                if (s.length > longestPalindrome.length) longestPalindrome =\
    \ s\n            }\n            s = s.dropRight(1)\n        }\n        string\
    \ + string.reverse.drop(longestPalindrome.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val s = string.toLowerCase\n        var max\
    \ = 0\n        var start = 0\n        for (i <- 0 to s.length / 2) {\n       \
    \     val j = s.length - 1 - i\n            if (s(i) == s(j)) {\n            \
    \    var i1 = i\n                var j1 = j\n                while (i1 < j1 &&\
    \ s(i1) == s(j1)) {\n                    i1 += 1\n                    j1 -= 1\n\
    \                }\n                if (i1 >= j1 && j - i > max) {\n         \
    \           max = j - i\n                    start = i\n                }\n  \
    \          }\n        }\n        s.substring(0, start) + s + s.substring(start,\
    \ start + max + 1).reverse\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.makePalindrome$$anonfun$1(tmpv2gylojq.scala:20)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.makePalindrome(tmpv2gylojq.scala:32)\n\
    \tat Problem$.main(tmpv2gylojq.scala:36)\n\tat Problem.main(tmpv2gylojq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Precondition: n > 0\n        // Postcondition:\
    \ string[0..n-1] returns the longest palindromic suffix of the string[0..n-1]\n\
    \        def findPalindromicSuffix(n : Int) : Int = {\n            if (n == 0)\
    \ 0\n            else {\n                val m = findPalindromicSuffix(n - 1)\n\
    \                // Can we expand prefix of length m by 1 character on each side?\n\
    \                if (n - 1 - m == -1 || string(n - 1 - m) != string(n - 1)) m\n\
    \                else m + 1\n            }\n        }\n        // Precondition:\
    \ 0 <= i < string.length, 0 <= j < string.length, 0 <= j - i < string.length\n\
    \        // Postcondition: returns true iff string[i..j] is a palindrome\n   \
    \     def isPalindrome(i : Int, j : Int) : Boolean = {\n            if (i >= j)\
    \ true\n            else if (string(i) != string(j)) false\n            else isPalindrome(i\
    \ + 1, j - 1)\n        }\n        // Precondition: n > 0\n        // Postcondition:\
    \ string[0..n-1] is a palindrome and\n        // string[0..n-1] is a shortest\
    \ palindrome that starts with the string[0..n-1]\n        def palindromize(n :\
    \ Int) : String = {\n            if (n == 0) \"\"\n            else {\n      \
    \          val m = findPalindromicSuffix(n)\n                if (m == n) string.substring(0,\
    \ n)\n                else {\n                    val postfix = palindromize(n\
    \ - 1 - m)\n                    string.substring(0, m) + postfix + string.substring(m,\
    \ n)\n                }\n            }\n        }\n        palindromize(string.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2tt_qxqs.scala:52)\n\tat Problem.main(tmp2tt_qxqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.isEmpty) return string\n        //\
    \ If string is already a palindrome, we're done.\n        if (string == string.reverse)\
    \ return string\n        // If string is just a single character, append it back\
    \ to itself.\n        if (string.length == 1) return string + string\n       \
    \ // Otherwise, we need to find a suffix of string that is a palindrome.\n   \
    \     val (palindromeSuffix, palindromeSuffixLength) = (0 to string.length).map(l\
    \ => (string.takeRight(l), l)).filter(x => x._1 == x._1.reverse).maxBy(_._2)\n\
    \        // Now we can construct the result.\n        val result = string + string.take(string.length\
    \ - palindromeSuffixLength).reverse\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // This solution is O(n^2) in time complexity.\n\
    \        // Here we use a dynamic programming solution that computes the length\
    \ of the longest palindromic suffix in O(n)\n        // (we can also do O(1) by\
    \ leveraging symmetry).\n        // Next we find the length of a prefix that comes\
    \ before the palindromic suffix by subtracting the length of the\n        // palindromic\
    \ suffix from the original string length.\n        // Finally we append reverse\
    \ of the prefix to the end of the original string to form a new string.\n    \
    \    def palindromicSuffix(string : String) : Int = {\n            val n = string.length\n\
    \            var result = 0\n            for (i <- (0 until n).reverse) {\n  \
    \              val palindrome = ((0 to i).reverse.mkString(string.slice(i, n))\
    \ + string.slice(i, n)).mkString\n                if (palindrome == palindrome.reverse)\
    \ {\n                    result = palindrome.length\n                    return\
    \ result\n                }\n            }\n            result\n        }\n  \
    \      val suffixLength = palindromicSuffix(string)\n        if (suffixLength\
    \ == string.length) return string\n        val prefixLength = string.length -\
    \ suffixLength\n        val prefix = string.slice(0, prefixLength)\n        val\
    \ palindrome = string + prefix.reverse\n        palindrome\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjkt93txc.scala:42)\n\tat Problem.main(tmpjkt93txc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def helper(string : String, m : Int) : String\
    \ = {\n            if (m == 0) {\n                return string + string.reverse\n\
    \            }\n            else {\n                val suffix = string.substring(string.length\
    \ - m)\n                val prefix = string.substring(0, string.length - m)\n\
    \                val reversedPrefix = prefix.reverse\n                if (suffix\
    \ == reversedPrefix) {\n                    return string + reversedPrefix.substring(m)\n\
    \                }\n                else {\n                    return helper(string,\
    \ m - 1)\n                }\n            }\n        }\n        return helper(string,\
    \ string.length)\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpki02ax9r.scala:35)\n\tat Problem.main(tmpki02ax9r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        var longestSuffix\
    \ = 0\n        for (i <- 0 until length - 1) {\n            if (string.substring(i).reverse\
    \ == string.substring(i)) {\n                longestSuffix = length - i\n    \
    \            break\n            }\n        }\n        return string + string.substring(0,\
    \ length - longestSuffix).reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9pqhjbuk.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Algorithm requires O(n^2) running time and\
    \ O(n) space.\n        val n = string.length\n        val prefixLength = (0 until\
    \ n).indexWhere(i => string.substring(0, i + 1) == string.substring(n - i - 1,\
    \ n).reverse)\n        string + string.substring(prefixLength + 1, n).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp66s9x255.scala:23)\n\tat Problem.main(tmp66s9x255.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def isPalindrome(string : String) : Boolean\
    \ = {\n            val length = string.length\n            for (i <- 0 until length\
    \ / 2) {\n                if (string(i) != string(length - 1 - i)) {\n       \
    \             return false\n                }\n            }\n            return\
    \ true\n        }\n        val length = string.length\n        for (i <- length\
    \ to 0 by -1) {\n            if (isPalindrome(string.substring(i))) {\n      \
    \          return string + string.substring(0, i).reverse\n            }\n   \
    \     }\n        return string\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4zzfdmft.scala:34)\n\tat Problem.main(tmp4zzfdmft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length() == 0) return string\n  \
    \      var largestSuffix = 0\n        for (i <- 1 to string.length()) if (string.substring(0,\
    \ i) == string.substring(string.length() - i, string.length())) largestSuffix\
    \ = i\n        var prefix = string.substring(0, string.length() - largestSuffix)\n\
    \        return prefix + string + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_vee70xg.scala:24)\n\tat Problem.main(tmp_vee70xg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindrome = string.sliding(string.length).takeWhile(s\
    \ => s == s.reverse).toList.last\n        string + (string.take(string.length\
    \ - longestPalindrome.length)).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: requirement failed: size=0 and step=1,\
    \ but both must be positive\n\tat scala.collection.Iterator$GroupedIterator.<init>(Iterator.scala:156)\n\
    \tat scala.collection.Iterator.sliding(Iterator.scala:374)\n\tat scala.collection.Iterator.sliding$(Iterator.scala:373)\n\
    \tat scala.collection.AbstractIterator.sliding(Iterator.scala:1293)\n\tat scala.collection.IterableOps.sliding(Iterable.scala:522)\n\
    \tat scala.collection.IterableOps.sliding$(Iterable.scala:521)\n\tat scala.collection.StringOps$.sliding$extension(StringOps.scala:1594)\n\
    \tat Problem$.makePalindrome(tmpqnxn_r65.scala:15)\n\tat Problem$.main(tmpqnxn_r65.scala:19)\n\
    \tat Problem.main(tmpqnxn_r65.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def findPalindromeSuffix() : String = {\n  \
    \          var result = \"\"\n            for (i <- 0 to string.length) {\n  \
    \              val suffix = string.substring(i)\n                if (suffix ==\
    \ suffix.reverse) result = suffix\n            }\n            result\n       \
    \ }\n        if (string == \"\") return \"\"\n        val suffix = findPalindromeSuffix()\n\
    \        if (suffix == string) return string\n        string + string.substring(0,\
    \ string.length - suffix.length).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplxzorlxp.scala:30)\n\tat Problem.main(tmplxzorlxp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val last = string.length - 1\n        val right\
    \ = (0 to last).find(j => string(j) == string(last - j))\n        val palindrome\
    \ = string.substring(0, right.getOrElse(0))\n        string + palindrome.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpipi40snn.scala:23)\n\tat Problem.main(tmpipi40snn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val sLen = string.length\n        val palindrome\
    \ = mutable.StringBuilder.newBuilder\n        val pLen = sLen\n        val isPalindrome\
    \ = Array.ofDim[Boolean](sLen, sLen)\n        for (i <- 0 until sLen) {\n    \
    \        isPalindrome(i)(i) = true\n            if (i > 0) {\n               \
    \ isPalindrome(i)(i - 1) = true\n            }\n        }\n        for (len <-\
    \ 2 to sLen) {\n            for (i <- 0 to sLen - len) {\n                val\
    \ j = i + len - 1\n                isPalindrome(i)(j) = string(i) == string(j)\
    \ && isPalindrome(i + 1)(j - 1)\n            }\n        }\n        var j = 0\n\
    \        while (j < sLen && !isPalindrome(0)(j)) {\n            j += 1\n     \
    \   }\n        palindrome.append(string.substring(j + 1).reverse)\n        palindrome.append(string)\n\
    \        palindrome.toString\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1y_u22s4.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mpalindrome\e[0m = mutable.StringBuilder.newBuilder\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var longestSuffix = -1\n        for (i <- 0\
    \ to string.length) {\n            var prefix = string.substring(0, i)\n     \
    \       var suffix = string.substring(i, string.length)\n            if (suffix\
    \ == prefix.reverse) {\n                longestSuffix = i\n            }\n   \
    \     }\n        string + string.substring(0, string.length - longestSuffix).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 2, length 1\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpwigj684x.scala:23)\n\tat Problem$.main(tmpwigj684x.scala:27)\n\
    \tat Problem.main(tmpwigj684x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val reversedString = string.reverse\n      \
    \  // E.g. reversedString = \"tac\", string = \"cat\"\n        val maxPalindrome\
    \ = string.zip(reversedString).foldLeft(0) {\n            case (maxPalindrome,\
    \ (char1, char2)) => if (char1 == char2) maxPalindrome + 1 else maxPalindrome\n\
    \        }\n        val (prefix, _) = string.splitAt(string.length - maxPalindrome)\n\
    \        string + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var result = \"\"\n        var maxPostfixLength\
    \ = 0\n        var longestPostfix = \"\"\n        // find the longest palindromic\
    \ suffix of the string\n        for (i <- string.length - 1 to 0 by -1) {\n  \
    \          var postfix = string.substring(i)\n            if (isPalindrome(postfix))\
    \ {\n                if (postfix.length > maxPostfixLength) {\n              \
    \      maxPostfixLength = postfix.length\n                    longestPostfix =\
    \ postfix\n                }\n            }\n        }\n        if (longestPostfix\
    \ == \"\") {\n            result = string + reverse(string)\n        } else {\n\
    \            result = string + reverse(string.substring(0, string.length - longestPostfix.length))\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4zkrc_m1.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (isPalindrome(postfix)) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4zkrc_m1.scala:29:30 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m            result = string + reverse(string)\n\e[31m\e[31m   |\e[0m      \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \       Not found: reverse\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4zkrc_m1.scala:31:30 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m            result = string + reverse(string.substring(\e[31m0\e[0m, string.length\
    \ - longestPostfix.length))\n\e[31m\e[31m   |\e[0m                           \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found: reverse\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def invert(string : String) : String = {\n \
    \           var result = \"\"\n            for (ch <- string) {\n            \
    \    result = ch + result\n            }\n            return result\n        }\n\
    \        val strlen = string.length\n        var longestPalindromeIndex = 0\n\
    \        for (i <- 0 to strlen - 1) {\n            // Longest palindrome must\
    \ be with even length.\n            if (i - longestPalindromeIndex < strlen -\
    \ i - 1 && string(i - longestPalindromeIndex) == string(i + 1)) {\n          \
    \      var j = 1\n                while (i - j >= 0 && i + j < strlen && string(i\
    \ - j) == string(i + j)) {\n                    j += 1\n                }\n  \
    \              longestPalindromeIndex = j - 1\n            }\n            // Longest\
    \ palindrome must be with odd length.\n            if (i - longestPalindromeIndex\
    \ >= 0 && string(i - longestPalindromeIndex) == string(i)) {\n               \
    \ var j = 1\n                while (i - j >= 0 && i + j - 1 < strlen && string(i\
    \ - j) == string(i + j - 1)) {\n                    j += 1\n                }\n\
    \                longestPalindromeIndex = j - 1\n            }\n        }\n  \
    \      val palindromeSize = longestPalindromeIndex * 2 + 1\n        val nonPalindromeSize\
    \ = strlen - palindromeSize\n        val nonPalindromeInverted = invert(string.substring(0,\
    \ nonPalindromeSize))\n        return string + nonPalindromeInverted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpoklzfuyx.scala:44)\n\tat Problem$.main(tmpoklzfuyx.scala:48)\n\
    \tat Problem.main(tmpoklzfuyx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val LPS = longestPalindromicSubstring(string)\n\
    \        val rest = string.drop(LPS.length)\n        val prefix = rest.reverse\n\
    \        prefix + string\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw7c_6l74.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mLPS\e[0m = longestPalindromicSubstring(string)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: longestPalindromicSubstring\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPostfix = string.indexOf(string.reverse.find(string.startsWith(_)))\n\
    \        string + string.substring(0, string.length - longestPostfix).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeb48kyof.scala:15:82\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPostfix\e\
    [0m = string.indexOf(string.reverse.find(string.startsWith(_)))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \            Found:    (_$1 : Char)\n\e[31m   |\e[0m                         \
    \                         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def reverse(str : String) : String = {\n   \
    \         if (str.length == 0) return \"\"\n            str.substring(str.length\
    \ - 1) + reverse(str.substring(0, str.length - 1))\n        }\n        def makePalindrome(string\
    \ : String, longest : String) : String = {\n            if (string.length == 0)\
    \ return reverse(longest)\n            val firstChar = string.substring(0, 1)\n\
    \            val rest = string.substring(1)\n            if (firstChar == reverse(longest))\
    \ longest + firstChar + reverse(rest)\n            else makePalindrome(rest, firstChar\
    \ + longest)\n        }\n        makePalindrome(string, \"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy60voc6u.scala:31)\n\tat Problem.main(tmpy60voc6u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val palindrome = findLongestPalindrome(string)\n\
    \        val reverse = string.substring(0, string.length - palindrome.length).reverse\n\
    \        string + reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp853qr_iz.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpalindrome\e[0m = findLongestPalindrome(string)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: findLongestPalindrome\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def makePalindrome(string : String, longestPalindromeLength\
    \ : Int) : String = {\n            val prefix = string.substring(0, string.length\
    \ - longestPalindromeLength)\n            prefix + string + prefix.reverse\n \
    \       }\n        var longestPalindromeLength = 0\n        for (i <- 0 to string.length)\
    \ {\n            val substr = string.substring(i)\n            if (substr == substr.reverse)\
    \ {\n                longestPalindromeLength = max(longestPalindromeLength, substr.length)\n\
    \            }\n        }\n        makePalindrome(string, longestPalindromeLength)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo01a7acv.scala:31)\n\tat Problem.main(tmpo01a7acv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def isPalindrome(string : String) : Boolean\
    \ = string.reverse == string\n        if (isPalindrome(string)) return string\n\
    \        val prefix = string.dropRight(longestPalindromeSuffix(string).length)\n\
    \        prefix.reverse + string\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7uzf0uv0.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mprefix\e[0m = string.dropRight(longestPalindromeSuffix(string).length)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: longestPalindromeSuffix\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val reversed = string.reverse\n        val length\
    \ = string.length\n        var palindrome = string\n        for (i <- length to\
    \ 0 by -1) {\n            val prefix = string.substring(0, i)\n            val\
    \ suffix = reversed.substring(length - i)\n            if (prefix == suffix) {\n\
    \                palindrome += reversed.substring(0, length - i)\n           \
    \     return palindrome\n            }\n        }\n        palindrome\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpknrqjbbv.scala:31)\n\tat Problem.main(tmpknrqjbbv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return \"\"\n      \
    \  val suffix = new StringBuffer(string.substring(string.length - 1, string.length))\n\
    \        val prefix = new StringBuffer()\n        var i = string.length - 2\n\
    \        while (i >= 0) {\n            if (suffix.length > 0 && string(i) == suffix(0))\
    \ {\n                suffix.append(string(i))\n                prefix.append(string(i))\n\
    \            }\n            i -= 1\n        }\n        suffix.toString() + prefix.reverse.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpyuug75fm.scala:20:50 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (suffix.length > \e[31m0\e\
    [0m && string(i) == suffix(\e[31m0\e[0m)) {\n\e[31m\e[31m   |\e[0m           \
    \                                       ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                          \e[33mvalue\e[0m \e[35msuffix\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010298
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var result = \"\"\n        val prefix = string.substring(0,\
    \ string.length() - 1)\n        val suffix = string.substring(string.length()\
    \ - 1)\n        val reversedPrefix = prefix.reverse\n        for (i <- 0 to string.length()\
    \ - 1) {\n            if (isPalindrome(string.substring(i))) {\n             \
    \   result = reversedPrefix + string\n                return result\n        \
    \    }\n        }\n        \"\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf4k2smtt.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (isPalindrome(string.substring(i)))\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val len = string.length\n        for (i <- (0\
    \ to len / 2).reverse) {\n            val prefix = string.slice(0, i)\n      \
    \      val suffix = string.slice(len - i, len)\n            if (prefix == suffix)\
    \ {\n                return string + string.slice(i, len).reverse\n          \
    \  }\n        }\n        return string + string.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfy146f1a.scala:27)\n\tat Problem.main(tmpfy146f1a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return string\n    \
    \    val rev = string.reverse\n        var longestPalindromeLength = 0\n     \
    \   for (i <- 0 to rev.length - 1) {\n            if (rev.substring(i) == string.substring(0,\
    \ string.length - i)) longestPalindromeLength = string.length - i\n        }\n\
    \        return string + rev.substring(0, rev.length - longestPalindromeLength)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqxc287ob.scala:26)\n\tat Problem.main(tmpqxc287ob.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def iter(s : String, acc : List[Char]) : List[Char]\
    \ = s match {\n            case \"\" => acc\n            case x => iter(s.tail,\
    \ s.head :: acc)\n        }\n        def isPalindrome(string : String) : Boolean\
    \ = {\n            val length = string.length\n            for (i <- 0 until length\
    \ / 2) if (string(i) != string(length - 1 - i)) return false\n            true\n\
    \        }\n        for (prefix <- (0 until string.length).reverse) if (isPalindrome(string.substring(prefix)))\
    \ {\n            return string + (iter(string.substring(0, prefix), Nil)).mkString\n\
    \        }\n        throw new NoSuchElementException\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException\n\tat Problem$.makePalindrome(tmpuquynzry.scala:27)\n\
    \tat Problem$.main(tmpuquynzry.scala:30)\n\tat Problem.main(tmpuquynzry.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def isPalindrome(string : String) : Boolean\
    \ = {\n            if (string.length % 2 == 0) {\n                val n = string.length\n\
    \                val middle = n / 2\n                string.substring(0, middle)\
    \ == string.substring(middle, n).reverse\n            } else {\n             \
    \   val n = string.length\n                val middle = n / 2\n              \
    \  string.substring(0, middle) == string.substring(middle + 1, n).reverse\n  \
    \          }\n        }\n        val n = string.length\n        for (length <-\
    \ (n, 1, -1)) {\n            val prefix = string.substring(0, length)\n      \
    \      if (isPalindrome(prefix)) return prefix + string.substring(length, n).reverse\n\
    \        }\n        return string\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7ehpnx6z.scala:27:23 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mfor\e[0m (length <- (n, \e[31m1\e[0m, -\e\
    [31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       value foreach is not a member of (Int, Int,\
    \ Int)\n1 error found\n"
  stdout: ''
  timestamp: 1660010303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return string\n    \
    \    val (suffixStart, suffix) = string.splitAt(string.length - 1)\n        val\
    \ reversedPrefix = suffixStart.reverse\n        suffix + reversedPrefix\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpklsk4r51.scala:23)\n\tat Problem.main(tmpklsk4r51.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        // Find the longest\
    \ palindromic suffix of a supplied string.\n        def longestPalindromicSuffix(string\
    \ : String) : String = {\n            val n = string.length\n            def suffixLength(index\
    \ : Int) : Int = {\n                // Get substring of a supplied string that\
    \ starts at the supplied index.\n                def substr(index : Int) : String\
    \ = string.substring(index)\n                if (index < 0) 0\n              \
    \  else if (substr(index) == substr(0).reverse) n - index\n                else\
    \ suffixLength(index - 1)\n            }\n            string.substring(n - suffixLength(n\
    \ - 1))\n        }\n        val reversedPrefix = string.substring(0, n - longestPalindromicSuffix(string).length).reverse\n\
    \        string + reversedPrefix\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4zokdabi.scala:34)\n\tat Problem.main(tmp4zokdabi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def getPalindromeSuffix(string : String) : String\
    \ = {\n            val prefix : String = string.substring(0, string.length / 2)\n\
    \            val suffix : String = string.substring(string.length / 2, string.length)\n\
    \            if (prefix.equals(suffix.reverse)) suffix else getPalindromeSuffix(prefix)\n\
    \        }\n        val palindromeSuffix : String = getPalindromeSuffix(string)\n\
    \        val prefix : String = string.substring(0, string.length - palindromeSuffix.length)\n\
    \        prefix + palindromeSuffix + prefix.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmm5389cd.scala:26)\n\tat Problem.main(tmpmm5389cd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var prefix : String = \"\"\n        for (start\
    \ <- 0 to string.length) {\n            val substring = string.substring(start)\n\
    \            if (isPalindrome(substring)) {\n                prefix = string.substring(0,\
    \ start)\n                return string + prefix.reverse\n            }\n    \
    \    }\n        return \"\"\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgy3th7x7.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (isPalindrome(substring)) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val reverse = string.reverse\n        var i\
    \ = 0\n        while (i < string.length && string(i) != reverse(0)) i += 1\n \
    \       return if (i < string.length) string + reverse.substring(1) else string\
    \ + reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnppkovba.scala:24)\n\tat Problem.main(tmpnppkovba.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // The function uses this suffix string to check\
    \ if a suffix of a given string is a palindrome.\n        // >>> isPalindromeSuffix(\"\
    catac\", \"ac\")\n        // true\n        // >>> isPalindromeSuffix(\"catac\"\
    , \"cat\")\n        // false\n        def isPalindromeSuffix(string : String,\
    \ suffix : String) : Boolean = {\n            if (suffix.length == 0) true\n \
    \           else if (string.length < suffix.length) false\n            else if\
    \ (string.endsWith(suffix)) true\n            else isPalindromeSuffix(string.dropRight(1),\
    \ suffix)\n        }\n        // Function first finds the longest palindromic\
    \ suffix of a string.\n        // Then it finds a prefix of a string that comes\
    \ before the suffix, and returns a palindrome.\n        // >>> constructPalindrome(\"\
    cat\")\n        // \"catac\"\n        // >>> constructPalindrome(\"cata\")\n \
    \       // \"catac\"\n        def constructPalindrome(string : String) : String\
    \ = {\n            // Finds the longest palindromic suffix.\n            def findPalindromeSuffix(string\
    \ : String, suffix : String) : String = {\n                if (isPalindromeSuffix(string,\
    \ suffix)) suffix\n                else findPalindromeSuffix(string, suffix.drop(1))\n\
    \            }\n            // Returns a prefix of a string that comes before\
    \ the palindromic suffix.\n            def getPrefix(string : String, suffix :\
    \ String) : String = {\n                if (string.endsWith(suffix)) string.dropRight(suffix.length)\n\
    \                else getPrefix(string.dropRight(1), suffix)\n            }\n\
    \            val suffix = findPalindromeSuffix(string, string)\n            val\
    \ prefix = getPrefix(string, suffix)\n            string + prefix.reverse\n  \
    \      }\n        constructPalindrome(string)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgl1xlx51.scala:52)\n\tat Problem.main(tmpgl1xlx51.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def palindromeAt(string : String, position :\
    \ Int) : Boolean = {\n            var char1 = string(position)\n            var\
    \ char2 = string(string.length - 1 - position)\n            (char1 == char2) &&\
    \ (if (position > 0) palindromeAt(string, position - 1) else true)\n        }\n\
    \        def reverse(string : String) : String = {\n            var output = new\
    \ StringBuilder()\n            for (i <- 0 until string.length) {\n          \
    \      output += string(string.length - 1 - i)\n            }\n            output.toString\n\
    \        }\n        def findLongestPalindrome(string : String) : String = {\n\
    \            var long = \"\"\n            for (i <- 0 until string.length) {\n\
    \                if (palindromeAt(string, i)) {\n                    long = string.substring(0,\
    \ i + 1)\n                }\n            }\n            long\n        }\n    \
    \    var long = findLongestPalindrome(string)\n        var prefix = string.substring(long.length,\
    \ string.length)\n        prefix + string + reverse(prefix)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z0o0qob.scala:43)\n\tat Problem.main(tmp8z0o0qob.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val r = string.reverse\n        val complete\
    \ = string + r\n        var (b, e) = (0, string.length)\n        var longest =\
    \ complete.substring(b, e)\n        while (e < complete.length) {\n          \
    \  if (complete.substring(b, e) == complete.substring(b, e).reverse) {\n     \
    \           longest = complete.substring(b, e)\n            }\n            b +=\
    \ 1\n            e += 1\n        }\n        longest + string.substring(longest.length,\
    \ string.length)\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp699x9608.scala:31)\n\tat Problem.main(tmp699x9608.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010306
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val (prefix, suffix) = string.span(s => s !=\
    \ string.last)\n        if (suffix.isEmpty) string\n        else suffix + prefix.reverse\
    \ + suffix.last\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpovnd17gw.scala:21)\n\tat Problem.main(tmpovnd17gw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val reversed = string.reverse\n        val (pre,\
    \ suf) = string.zip(reversed).span(x => x._1 != x._2)\n        return string +\
    \ suf.reverse + pre.map(_._1).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0zai3qe.scala:20)\n\tat Problem.main(tmpv0zai3qe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n      if (string.length <= 1) return string\n      val\
    \ substrings = string.length - 1 to 0 by -1 map(n => string.takeRight(n))\n  \
    \    val palindromicSubstrings = substrings filter {str => str == str.reverse}\n\
    \      val sortedSubstrings = palindromicSubstrings sortBy {_.length}\n      val\
    \ palindrome = sortedSubstrings.last\n      val prefix = string.dropRight(palindrome.length)\n\
    \      string + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpax4ln9fn.scala:27)\n\tat Problem.main(tmpax4ln9fn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def isPalindrome(string : String) : Boolean\
    \ = {\n            val n = string.length\n            if (n <= 1) {\n        \
    \        true\n            } else {\n                string(0) == string(n - 1)\
    \ && isPalindrome(string.substring(1, n - 1))\n            }\n        }\n    \
    \    def findLongestPalindromeSuffix(string : String) : String = {\n         \
    \   if (isPalindrome(string)) {\n                string\n            } else {\n\
    \                findLongestPalindromeSuffix(string.substring(1))\n          \
    \  }\n        }\n        val suffix = findLongestPalindromeSuffix(string)\n  \
    \      string + suffix.reverse.substring(string.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 3, end 1, length 1\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmp8rb5m74m.scala:31)\n\
    \tat Problem$.main(tmp8rb5m74m.scala:36)\n\tat Problem.main(tmp8rb5m74m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var longestPalindromePostfix : String = \"\"\
    \n        for (j <- 0 to string.length) {\n            val postfix : String =\
    \ string.substring(j)\n            if (isPalindrome(postfix)) {\n            \
    \    longestPalindromePostfix = postfix\n                break\n            }\n\
    \        }\n        val suffix : String = string.substring(0, string.length -\
    \ longestPalindromePostfix.length)\n        suffix.reverse + string\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzt9lyqhz.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (isPalindrome(postfix)) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzt9lyqhz.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val map = Map[Char, ListBuffer[Int]]()\n   \
    \     val n = string.length\n        // Build map of indices of each character\
    \ in the string.\n        for (i <- 0 until n) {\n            val c = string(i)\n\
    \            if (!map.contains(c)) map(c) = ListBuffer[Int]()\n            map(c)\
    \ += i\n        }\n        // Find last index of the longest postfix that is a\
    \ palindrome.\n        val palindromeEnd = {\n            var maxEnd = 0\n   \
    \         for (i <- 0 until n) {\n                if (i < maxEnd) {\n        \
    \            val list = map(string(i))\n                    for (j <- list.size\
    \ - 1 to 0 by -1) {\n                        val candidate = list(j)\n       \
    \                 if (i + candidate - 2 * maxEnd + 1 >= 0 && string(i - (candidate\
    \ - maxEnd)) == string(candidate)) {\n                            maxEnd = candidate\n\
    \                            break\n                        }\n              \
    \      }\n                }\n                else {\n                    val list\
    \ = map(string(i))\n                    for (j <- list.size - 1 to 0 by -1) {\n\
    \                        val candidate = list(j)\n                        if (string(candidate)\
    \ == string(i)) {\n                            maxEnd = candidate\n          \
    \                  break\n                        }\n                    }\n \
    \               }\n            }\n            maxEnd\n        }\n        // Append\
    \ reversed prefix to the end of the string.\n        val prefix = string.substring(0,\
    \ n - palindromeEnd - 1)\n        string + prefix.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7hfjefs5.scala:33:28 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                            break\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7hfjefs5.scala:43:28 ------------------------\e[0m\e[0m\n\e[31m43 |\e\
    [0m                            break\n\e[31m\e[31m   |\e[0m                  \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010306
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def makePalindrome(s : String, suffix : String)\
    \ : String = {\n            if (s.length == 0) suffix\n            else {\n  \
    \              val first = s.head\n                val last = s.last\n       \
    \         if (first == last) makePalindrome(s.slice(1, s.length - 1), first +\
    \ suffix)\n                else makePalindrome(s.slice(1, s.length), suffix)\n\
    \            }\n        }\n        val suffix = makePalindrome(string, \"\")\n\
    \        string + suffix.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplvqa7rc9.scala:29)\n\tat Problem.main(tmplvqa7rc9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Finds the longest palindromic suffix of the\
    \ string.\n        def findPalindromicSuffix(s : String) : String = {\n      \
    \      // Keeps track of the index of the suffix that is palindromic so far.\n\
    \            var index : Int = s.length - 1\n            while (index >= 0) {\n\
    \                if (s.substring(index).equals(s.substring(index).reverse)) return\
    \ s.substring(index)\n                index -= 1\n            }\n            return\
    \ s\n        }\n        val suf = findPalindromicSuffix(string)\n        val prefix\
    \ = string.substring(0, string.length - suf.length)\n        return prefix + suf\
    \ + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxp4rkvxx.scala:33)\n\tat Problem.main(tmpxp4rkvxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val len = string.length\n        var palindromePostfixIndex\
    \ = 0\n        for (i <- 1 to len) {\n            if (isPalindrome(string.substring(len\
    \ - i))) {\n                palindromePostfixIndex = len - i\n               \
    \ break\n            }\n        }\n        string + (string.substring(0, palindromePostfixIndex)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp00jar1ft.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (isPalindrome(string.substring(len\
    \ - i))) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp00jar1ft.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m                break\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010307
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val strlen = string.length\n        val palindrome\
    \ = Array.fill(strlen + 1, strlen + 1)(false)\n        var maxPalindrome = \"\"\
    \n        for (len <- 0 to strlen) {\n            for (i <- 0 to strlen - len)\
    \ {\n                if (len == 0) palindrome(i)(i) = true\n                else\
    \ if (len == 1) palindrome(i)(i + 1) = string(i) == string(i + 1)\n          \
    \      else palindrome(i)(i + len) = string(i) == string(i + len) && palindrome(i\
    \ + 1)(i + len - 1)\n                if (palindrome(i)(i + len) && len > maxPalindrome.length)\
    \ maxPalindrome = string.substring(i, i + len + 1)\n            }\n        }\n\
    \        string + string.substring(maxPalindrome.length + 1).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmp6awst63d.scala:26)\n\
    \tat Problem$.main(tmp6awst63d.scala:29)\n\tat Problem.main(tmp6awst63d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        var maxi = -1\n\
    \        var maxlen = -1\n        var palindrome = Array.ofDim[Int](n)\n     \
    \   for (i <- 0 until n) {\n            var start = 0\n            var end = min(i,\
    \ n - i - 1)\n            var len = 0\n            while (start <= end) {\n  \
    \              if (string(start) == string(n - 1 - end)) {\n                 \
    \   len += 1\n                    if (start == end) len += 1\n               \
    \ }\n                else len = 0\n                start += 1\n              \
    \  end -= 1\n            }\n            palindrome(i) = len\n            if (len\
    \ > maxlen) {\n                maxlen = len\n                maxi = i\n      \
    \      }\n        }\n        string + string.substring(maxi + maxlen).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin -2, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmp_0cjrmly.scala:38)\n\
    \tat Problem$.main(tmp_0cjrmly.scala:41)\n\tat Problem.main(tmp_0cjrmly.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var prefix = \"\"\n        var palindrome =\
    \ \"\"\n        for (i <- 0 to string.length - 1) {\n            var j = i\n \
    \           while (j >= 0 && string(j) == string(i - j)) j -= 1\n            if\
    \ (j < 0) {\n                prefix = string.substring(0, i + 1)\n           \
    \     palindrome = string.substring(i + 1)\n            }\n        }\n       \
    \ return prefix + palindrome.reverse + palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk4ne5ruv.scala:30)\n\tat Problem.main(tmpk4ne5ruv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.isEmpty) return string\n        def\
    \ removeLongestPostfix(s : String) : (String, String) = {\n            var palindromeSuffix\
    \ = string.substring(string.length - s.length)\n            if (palindromeSuffix\
    \ == s) (string.substring(0, string.length - s.length), s)\n            else removeLongestPostfix(s.substring(0,\
    \ s.length - 1))\n        }\n        val (prefix, suffix) = removeLongestPostfix(string)\n\
    \        prefix + suffix + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj8vk9uhb.scala:27)\n\tat Problem.main(tmpj8vk9uhb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val len = string.length\n        val len_p =\
    \ 2 * len + 1\n        val pal = Array.fill(len_p)(0)\n        // '#' as a separator\n\
    \        val p : StringBuilder = new StringBuilder(len_p)\n        for (i <- 0\
    \ until len) {\n            p.append('#')\n            p.append(string(i))\n \
    \       }\n        p.append('#')\n        // Process palindromes\n        var\
    \ center = 0\n        var right = 0\n        for (i <- 0 until len_p) {\n    \
    \        var i_mirror = 2 * center - i\n            pal(i) = if (right > i) min(right\
    \ - i, pal(i_mirror)) else 0\n            while (i + 1 + pal(i) < len_p && i -\
    \ 1 - pal(i) >= 0 && p(i + 1 + pal(i)) == p(i - 1 - pal(i))) pal(i) += 1\n   \
    \         if (i + pal(i) > right) {\n                center = i\n            \
    \    right = i + pal(i)\n            }\n        }\n        // Find the longest\
    \ palindrome\n        val max_i = pal.indexOf(pal.max)\n        var prefix : StringBuilder\
    \ = new StringBuilder(max_i)\n        for (i <- 0 until max_i) prefix.append(p(i))\n\
    \        val reverse_prefix = prefix.reverse\n        prefix.append(string)\n\
    \        prefix.append(reverse_prefix)\n        return prefix.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoigxu_6_.scala:48)\n\tat Problem.main(tmpoigxu_6_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val rev = string.reverse\n        def rec(i\
    \ : Int) : String = {\n            if (i == string.length) string + rev\n    \
    \        else if (string.substring(i, string.length) == rev.substring(0, string.length\
    \ - i)) string + rev.substring(string.length - i)\n            else rec(i + 1)\n\
    \        }\n        rec(0)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var palindrome : String = \"\"\n        if (string.length\
    \ == 0) return string\n        val suffix : String = suffixPalindrome(string)\n\
    \        val prefix : String = string.substring(0, string.length - suffix.length)\n\
    \        palindrome = string + reverse(prefix)\n        return palindrome\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbv3borl2.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msuffix\e[0m : \e[35mString\e\
    [0m = suffixPalindrome(string)\n\e[31m\e[31m   |\e[0m                        \
    \      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not\
    \ found: suffixPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbv3borl2.scala:19:30 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        palindrome = string + reverse(prefix)\n\e[31m\e[31m   |\e[0m      \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \       Not found: reverse\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def rev(s : String) : String = if (s.isEmpty)\
    \ \"\" else rev(s.tail) + s.head\n        def loop(string : String, begin : Int,\
    \ end : Int) : String = {\n            val n = string.length\n            if (begin\
    \ >= end) {\n                rev(string.substring(n - begin, n)) + string\n  \
    \          } else if (string(begin) == string(end)) {\n                loop(string,\
    \ begin + 1, end - 1)\n            } else {\n                loop(string, begin,\
    \ end - 1)\n            }\n        }\n        loop(string, 0, string.length -\
    \ 1)\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp41zusweo.scala:31)\n\tat Problem.main(tmp41zusweo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var reversed = string.reverse\n        def isPalindrome(str\
    \ : String) : Boolean = {\n            for (i <- 0 until str.length / 2) if (str(i)\
    \ != str(str.length - 1 - i)) return false\n            return true\n        }\n\
    \        for (i <- 1 to string.length) {\n            if (isPalindrome(string.substring(string.length\
    \ - i))) return string + reversed.substring(string.length - i)\n        }\n  \
    \      return string + reversed\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbo9cc0mw.scala:27)\n\tat Problem.main(tmpbo9cc0mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val halfLength\
    \ = length / 2\n        val postfix = string.substring(halfLength)\n        val\
    \ prefix = string.substring(0, halfLength)\n        val reversedPrefix = prefix.reverse\n\
    \        // Find the suffix of the prefix that is a palindrome.\n        val suffix\
    \ = prefix.zipWithIndex.dropWhile(c => (c._1 != postfix(0))).map(_._1).mkString\n\
    \        if (suffix == \"\") {\n            val prefixLength = prefix.length\n\
    \            val suffixLength = postfix.length\n            val halfSuffixLength\
    \ = suffixLength / 2\n            val prefixSuffix = postfix.substring(0, halfSuffixLength)\n\
    \            val postfixSuffix = postfix.substring(halfSuffixLength)\n       \
    \     val postfixSuffixReversed = postfixSuffix.reverse\n            if (prefixSuffix\
    \ != postfixSuffixReversed) {\n                prefix + reversedPrefix + postfixSuffixReversed\
    \ + postfixSuffix\n            } else {\n                prefix + reversedPrefix\
    \ + postfix\n            }\n        } else {\n            prefix + reversedPrefix\
    \ + suffix\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxexjcixc.scala:40)\n\tat Problem.main(tmpxexjcixc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.isEmpty) return string\n        def\
    \ reverse(s : String) : String = s.reverse\n        def isPalindrome(s : String)\
    \ : Boolean = s == reverse(s)\n        def findLongestPostfixPalindrome(str :\
    \ String) : String = {\n            if (str.isEmpty) return str\n            for\
    \ (i <- 0 to str.length - 1) {\n                val suffix = str.substring(i)\n\
    \                if (isPalindrome(suffix)) return suffix\n            }\n    \
    \        return str\n        }\n        val postfix = findLongestPostfixPalindrome(string)\n\
    \        val prefix = string.substring(0, string.length - postfix.length)\n  \
    \      return string + reverse(prefix)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def recurse(string : String, prefix : String,\
    \ suffix : String) : String = {\n            if (suffix.isEmpty) string + prefix\n\
    \            else if (string(suffix.length) == suffix.last) recurse(string, string(suffix.length)\
    \ + prefix, suffix.dropRight(1))\n            else recurse(string, prefix, suffix.dropRight(1))\n\
    \        }\n        recurse(string, \"\", string)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.recurse$1(tmpv3fpxxu3.scala:17)\n\
    \tat Problem$.makePalindrome(tmpv3fpxxu3.scala:20)\n\tat Problem$.main(tmpv3fpxxu3.scala:24)\n\
    \tat Problem.main(tmpv3fpxxu3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val result : StringBuilder = new StringBuilder(string)\n\
    \        val longestPalindromeSuffix : String = findLongestPalindromeSuffix(string)\n\
    \        val prefix : String = string.substring(0, string.length - longestPalindromeSuffix.length)\n\
    \        result.append(reverse(prefix))\n        return result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5quka6mh.scala:16:47 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindromeSuffix\e\
    [0m : \e[35mString\e[0m = findLongestPalindromeSuffix(string)\n\e[31m\e[31m  \
    \ |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: findLongestPalindromeSuffix\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5quka6mh.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        result.append(reverse(prefix))\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: reverse\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) string\n        else\
    \ {\n            val longestPostfix = longestPalindromicPostfix(string, string.length)\n\
    \            val prefixLength = string.length - longestPostfix\n            val\
    \ prefix = string.substring(0, prefixLength)\n            val reversePrefix =\
    \ prefix.reverse\n            string + reversePrefix\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_re216wr.scala:17:33 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mlongestPostfix\e[0m\
    \ = longestPalindromicPostfix(string, string.length)\n\e[31m\e[31m   |\e[0m  \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Not found: longestPalindromicPostfix\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010312
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Find the longest postfix of supplied string\
    \ that is a palindrome.\n        def findLongestPalindromicSuffix(string : String)\
    \ : (String, String) = {\n            def helper(string : String, suffix : String)\
    \ : (String, String) = {\n                if (suffix.length == string.length)\
    \ return (\"\", string)\n                val stringIndex = string.length - suffix.length\
    \ - 1\n                if (string.charAt(stringIndex) == suffix.charAt(0)) return\
    \ helper(string, suffix.substring(1))\n                (\"\", string.substring(stringIndex\
    \ + 1))\n            }\n            helper(string, string)\n        }\n      \
    \  // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n        def appendReversePrefix(string : String, palindromicSuffix\
    \ : String) : String = {\n            val prefix = string.substring(0, string.length\
    \ - palindromicSuffix.length)\n            string + prefix.reverse\n        }\n\
    \        val (reversePrefix, palindromicSuffix) = findLongestPalindromicSuffix(string)\n\
    \        appendReversePrefix(string, palindromicSuffix)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5vktsab.scala:36)\n\tat Problem.main(tmpu5vktsab.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Find the longest postfix of supplied string\
    \ that is a palindrome.\n        def longestPalindromicPostfix(string : String)\
    \ : String = {\n            val n = string.length\n            var i = n - 1\n\
    \            var j = 0\n            while (i >= 0) {\n                val s =\
    \ string.substring(i, n)\n                if (s == s.reverse) return s\n     \
    \           j += 1\n                i = n - j - 1\n            }\n           \
    \ return \"\"\n        }\n        // Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n        def appendReversePrefix(string\
    \ : String, suffix : String) : String = {\n            val prefix = string.substring(0,\
    \ string.length - suffix.length)\n            return string + prefix.reverse\n\
    \        }\n        // Find the longest postfix of supplied string that is a palindrome.\n\
    \        val suffix = longestPalindromicPostfix(string)\n        // Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n        appendReversePrefix(string, suffix)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp22n5qp9j.scala:42)\n\tat Problem.main(tmp22n5qp9j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010317
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return string\n    \
    \    val length = string.length\n        var longestPalindrome = string(0).toString\n\
    \        for (i <- 1 to length - 1) {\n            val reversed = string.substring(0,\
    \ i).reverse\n            val substring = string.substring(i, length)\n      \
    \      if (substring.startsWith(reversed) && substring.length > longestPalindrome.length)\
    \ {\n                longestPalindrome = substring\n            }\n        }\n\
    \        return (string.substring(0, length - longestPalindrome.length) + longestPalindrome.reverse\
    \ + longestPalindrome)\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3xyjma7e.scala:29)\n\tat Problem.main(tmp3xyjma7e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val lps = longestPalindromicSubstring(string)\n\
    \        val prefix = string.substring(0, string.length - lps.length)\n      \
    \  val reversePrefix = prefix.reverse\n        string + reversePrefix\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplp8s33n3.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlps\e[0m = longestPalindromicSubstring(string)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: longestPalindromicSubstring\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val prefix = new StringBuilder\n        var\
    \ suffix = new StringBuilder\n        var i = 0\n        while (i < string.length)\
    \ {\n            suffix += string(i)\n            if (string.endsWith(suffix.toString))\
    \ prefix += string(i)\n            i += 1\n        }\n        string + prefix.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq2a5hyok.scala:27)\n\tat Problem.main(tmpq2a5hyok.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def postfixIsPalindrome(string : String) : Boolean\
    \ = {\n            string.length <= 1 || string.head == string.last && postfixIsPalindrome(string.tail.init)\n\
    \        }\n        def findLargestPostfixPalindrome(string : String) : String\
    \ = {\n            if (postfixIsPalindrome(string)) string\n            else findLargestPostfixPalindrome(string.init)\n\
    \        }\n        string + string.reverse.drop(findLargestPostfixPalindrome(string).length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010317
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestSuffix = for(i <- string.indices)\
    \ yield (i, string.substring(i))\n        val palindromicSuffix = longestSuffix.find(pair\
    \ => (pair._2 == pair._2.reverse))\n        val reversePrefix = string.substring(0,\
    \ palindromicSuffix.get._1).reverse\n        string + reversePrefix\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: None.get\n\tat scala.None$.get(Option.scala:627)\n\
    \tat scala.None$.get(Option.scala:626)\n\tat Problem$.makePalindrome(tmpag_8ipcu.scala:17)\n\
    \tat Problem$.main(tmpag_8ipcu.scala:21)\n\tat Problem.main(tmpag_8ipcu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        // Find the longest\
    \ suffix that is a palindrome.\n        var longest = -1\n        for (i <- (0\
    \ until n)) {\n            if (string.charAt(i) == string.charAt(n - 1)) {\n \
    \               var j = 0\n                while (j < n && string.charAt(i + j)\
    \ == string.charAt(n - 1 - j)) j += 1\n                if (j > longest) longest\
    \ = j\n            }\n        }\n        if (longest == n) return string\n   \
    \     // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n        val prefix = string.slice(0, n - longest)\n\
    \        (prefix + prefix.reverse).mkString + string\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 3\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.makePalindrome$$anonfun$1(tmpalh63qgk.scala:21)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.makePalindrome(tmpalh63qgk.scala:24)\n\
    \tat Problem$.main(tmpalh63qgk.scala:33)\n\tat Problem.main(tmpalh63qgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010318
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val l = string.length;\n        val palindromeSuffix\
    \ = (1 to l).foreach(i => {\n            if (string.substring(0, l - i).equals(string.substring(i,\
    \ l).reverse)) return string.substring(i, l).reverse + string\n        })\n  \
    \      return string\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvt1xgoke.scala:24)\n\tat Problem.main(tmpvt1xgoke.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010320
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def findPalindrome(string : String) : (String,\
    \ String) = {\n            val palindrome = new ArrayBuffer[Char]\n          \
    \  val (head, tail) = string.splitAt(string.length / 2)\n            var matched\
    \ = true\n            for (i <- (0 until min(head.length, tail.length)).reverse)\
    \ {\n                val (headChar, tailChar) = (head(i), tail(tail.length - i\
    \ - 1))\n                if (headChar != tailChar) {\n                    matched\
    \ = false\n                    val palindrome = new ArrayBuffer[Char]\n      \
    \              val (prefix, suffix) = string.splitAt(i)\n                    for\
    \ (i <- (0 until (prefix.length - 1))) palindrome += prefix(i)\n             \
    \       for (i <- (0 until suffix.length)) palindrome += suffix(i)\n         \
    \           return (string.drop(i + 1), palindrome.mkString)\n               \
    \ }\n            }\n            if (matched) (string.drop(tail.length), string.take(tail.length))\n\
    \            else (\"\", \"\")\n        }\n        val (palindrome, prefix) =\
    \ findPalindrome(string)\n        val suffix = prefix.reverse\n        palindrome\
    \ + suffix\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzjuo3l4m.scala:40)\n\tat Problem.main(tmpzjuo3l4m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Check that supplied string is not empty.\n\
    \        if (string.length == 0) {\n            return \"\";\n        }\n    \
    \    // Find the longest postfix of supplied string that is a palindrome.\n  \
    \      // Keep a map of indices at which a string that starts at 0 ends and a\
    \ postfix of\n        // the remainder is a palindrome.\n        // Map an index\
    \ to a string that starts at 0, ends at the index, and has a postfix that\n  \
    \      // is a palindrome.\n        var map : HashMap[Int, String] = new HashMap[Int,\
    \ String];\n        map(0) = string.substring(0, 1);\n        for (i <- 2 to string.length)\
    \ {\n            val previousString = map(i - 2);\n            val currentSubstring\
    \ = string.substring(i - 1, i);\n            // Substring that starts at 0, ends\
    \ at i - 1, and has a palindromic postfix.\n            val previousPostfix =\
    \ previousString.substring(previousString.length - 1, previousString.length);\n\
    \            val previousStringReversed = previousString.reverse;\n          \
    \  // Substring that starts at 0, ends at i - 1, and has a palindromic postfix.\n\
    \            val currentString = previousString + currentSubstring;\n        \
    \    val currentPostfix = currentString.substring(currentString.length - 1, currentString.length);\n\
    \            val currentStringReversed = currentString.reverse;\n            //\
    \ String that starts at 0, ends at i - 1, and has a palindromic postfix.\n   \
    \         val currentPalindromicPostfixString = if (previousPostfix == currentSubstring)\
    \ previousString else currentString;\n            // Check if a substring that\
    \ starts at 0, ends at i, and has a palindromic postfix exists.\n            if\
    \ (currentStringReversed.substring(0, previousPostfix.length) == previousPostfix)\
    \ {\n                map(i - 1) = currentPalindromicPostfixString;\n         \
    \   }\n            if (currentStringReversed.substring(0, currentPostfix.length)\
    \ == currentPostfix) {\n                map(i) = currentPalindromicPostfixString;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp35a120y4.scala:54:0 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp35a120y4.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to string.length) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\e\
    [31m27 |\e[0m            \e[33mval\e[0m \e[36mpreviousString\e[0m = map(i - \e\
    [31m2\e[0m);\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mcurrentSubstring\e\
    [0m = string.substring(i - \e[31m1\e[0m, i);\n\e[31m29 |\e[0m            \e[34m//\
    \ Substring that starts at 0, ends at i - 1, and has a palindromic postfix.\e\
    [0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mpreviousPostfix\e[0m = previousString.substring(previousString.length\
    \ - \e[31m1\e[0m, previousString.length);\n\e[31m31 |\e[0m            \e[33mval\e\
    [0m \e[36mpreviousStringReversed\e[0m = previousString.reverse;\n\e[31m32 |\e\
    [0m            \e[34m// Substring that starts at 0, ends at i - 1, and has a palindromic\
    \ postfix.\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mcurrentString\e\
    [0m = previousString + currentSubstring;\n\e[31m34 |\e[0m            \e[33mval\e\
    [0m \e[36mcurrentPostfix\e[0m = currentString.substring(currentString.length -\
    \ \e[31m1\e[0m, currentString.length);\n\e[31m35 |\e[0m            \e[33mval\e\
    [0m \e[36mcurrentStringReversed\e[0m = currentString.reverse;\n\e[31m36 |\e[0m\
    \            \e[34m// String that starts at 0, ends at i - 1, and has a palindromic\
    \ postfix.\e[0m\n\e[31m37 |\e[0m            \e[33mval\e[0m \e[36mcurrentPalindromicPostfixString\e\
    [0m = \e[33mif\e[0m (previousPostfix == currentSubstring) previousString \e[33melse\e\
    [0m currentString;\n\e[31m38 |\e[0m            \e[34m// Check if a substring that\
    \ starts at 0, ends at i, and has a palindromic postfix exists.\e[0m\n\e[31m39\
    \ |\e[0m            \e[33mif\e[0m (currentStringReversed.substring(\e[31m0\e[0m,\
    \ previousPostfix.length) == previousPostfix) {\n\e[31m40 |\e[0m             \
    \   map(i - \e[31m1\e[0m) = currentPalind"
  stdout: ''
  timestamp: 1660010321
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.isEmpty) return string\n        val\
    \ reverse = string.reverse\n        val suffix = string.zip(reverse).takeWhile(function\
    \ => function._1 == function._2).map(function => function._1).mkString\n     \
    \   val prefix = string.substring(0, string.length - suffix.length)\n        string\
    \ + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdftz239u.scala:24)\n\tat Problem.main(tmpdftz239u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        for (len <- string.length to 0 by -1) {\n  \
    \          val left = string.substring(0, len)\n            val right = string.substring(len)\n\
    \            if (left == right.reverse) return string + right.reverse.substring(1)\n\
    \        }\n        return \"\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome$$anonfun$1(tmp3l408vuv.scala:18)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.makePalindrome(tmp3l408vuv.scala:19)\n\
    \tat Problem$.main(tmp3l408vuv.scala:23)\n\tat Problem.main(tmp3l408vuv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def solve(string : String, longestPalindromeEndIndex\
    \ : Int) : String = {\n            if (longestPalindromeEndIndex == string.length)\
    \ string\n            else solve(string + string.substring(0, string.length -\
    \ longestPalindromeEndIndex).reverse, longestPalindromeEndIndex + 1)\n       \
    \ }\n        solve(string, (0 to string.length).toList.filter(i => string.substring(i).reverse\
    \ == string.substring(i)).last)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpctdsy09l.scala:24)\n\tat Problem.main(tmpctdsy09l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010323
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val prefix = string.take(string.length - longestPalindromeSuffix(string).length)\n\
    \        string + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppd90dtec.scala:15:49 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprefix\e[0m = string.take(string.length\
    \ - longestPalindromeSuffix(string).length)\n\e[31m\e[31m   |\e[0m           \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                      Not found: longestPalindromeSuffix\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def longestPalindromeSuffix(string : String)\
    \ : String = {\n            val midpoint = string.length / 2\n            val\
    \ left = midpoint\n            val right = midpoint + (string.length % 2)\n  \
    \          var found = false\n            var length = min(left, right)\n    \
    \        while (!found && length > 0) {\n                if (string(left - length)\
    \ == string(right)) {\n                    found = true\n                    for\
    \ (i <- 1 until length) {\n                        if (string(left - i) != string(right\
    \ + i)) {\n                            found = false\n                       \
    \     length = i - 1\n                            break\n                    \
    \    }\n                    }\n                }\n                else length\
    \ -= 1\n            }\n            if (found) string.substring(left - length,\
    \ right + length + 1)\n            else string.substring(0, 1)\n        }\n  \
    \      val suffix = longestPalindromeSuffix(string)\n        val prefix = suffix.substring(0,\
    \ string.length - suffix.length)\n        string + prefix.reverse\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnzru7gn.scala:28:28 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                            break\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return string\n    \
    \    var maxPostfixLength = 0\n        for (i <- 0 to string.length / 2) {\n \
    \           val prefixLength = string.length - i\n            if (prefixLength\
    \ == string.length) return string\n            val postfixLength = string.length\
    \ - prefixLength\n            val prefix = string.substring(0, prefixLength)\n\
    \            val postfix = string.substring(postfixLength, string.length)\n  \
    \          if (prefix == postfix) maxPostfixLength = max(maxPostfixLength, postfixLength)\n\
    \        }\n        return string + string.substring(0, string.length - maxPostfixLength).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpru6kh5y6.scala:30)\n\tat Problem.main(tmpru6kh5y6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = suffixPalindrome(string)\n    \
    \    if (suffix.length == string.length) {\n            string\n        } else\
    \ {\n            string + reverse(string.substring(0, string.length - suffix.length))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx7o806lj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msuffix\e[0m = suffixPalindrome(string)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     Not found: suffixPalindrome\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpx7o806lj.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            string + reverse(string.substring(\e[31m0\e\
    [0m, string.length - suffix.length))\n\e[31m\e[31m   |\e[0m                  \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: reverse\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var suffix = getLongestPalindromicSuffix(string)\n\
    \        if (suffix == string) return string\n        return string + reverse(string.substring(0,\
    \ string.length - suffix.length))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdqfyh6zj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36msuffix\e[0m = getLongestPalindromicSuffix(string)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: getLongestPalindromicSuffix\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdqfyh6zj.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mreturn\e[0m string + reverse(string.substring(\e\
    [31m0\e[0m, string.length - suffix.length))\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ reverse\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010320
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def helper(string : String, n : Int) : String\
    \ = {\n            if (n == 0) {string}\n            else if (string.substring(0,\
    \ n) == string.substring(string.length - n, string.length).reverse) {helper(string,\
    \ n - 1)}\n            else {helper(string, n + 1)}\n        }\n        val prefix\
    \ = string.substring(0, helper(string, 0))\n        return string + prefix.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpojs0s4_0.scala:20:47\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprefix\e\
    [0m = string.substring(\e[31m0\e[0m, helper(string, \e[31m0\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                         Found:    String\n\e[31m\
    \   |\e[0m                                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return string\n    \
    \    var longestPalindromePostfix = 0\n        val L = string.length\n       \
    \ var (i, j) = (0, L - 1)\n        while (i < j) {\n            if (string(i)\
    \ == string(j)) {\n                longestPalindromePostfix += 1\n           \
    \     i += 1\n                j -= 1\n            }\n            else {\n    \
    \            i = 0\n                j -= 1\n                longestPalindromePostfix\
    \ = 0\n            }\n        }\n        val prefix = string.substring(0, L -\
    \ longestPalindromePostfix)\n        return prefix + string + prefix.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3c_wzz4x.scala:36)\n\tat Problem.main(tmp3c_wzz4x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length <= 1) return string\n    \
    \    // We use ints for memoization.\n        // For a character c and index i,\
    \ memo(c)(i) stores the length of a postfix that starts at i and which is a palindrome.\n\
    \        val memo = Array.fill(256)(Array.fill(string.length)(-1))\n        def\
    \ findPalindromeLength(c : Char, i : Int) : Int = {\n            if (memo(c)(i)\
    \ != -1) return memo(c)(i)\n            var l = 0\n            var j = i\n   \
    \         while (j >= 0 && string(j) == c) {\n                if (j > 0 && string(j\
    \ - 1) == c) {\n                    l = 2\n                    if (memo(c)(j -\
    \ 1) != -1) {\n                        l += memo(c)(j - 1)\n                 \
    \       break\n                    }\n                }\n                else\
    \ {\n                    l = 1\n                    break\n                }\n\
    \                j -= 1\n            }\n            memo(c)(i) = l\n         \
    \   return l\n        }\n        var maxLength = 1\n        var i = string.length\
    \ - 1\n        while (i >= 0) {\n            val l = findPalindromeLength(string(i),\
    \ i)\n            if (l > maxLength) maxLength = l\n            i -= 1\n     \
    \   }\n        val prefix = string.substring(0, string.length - maxLength)\n \
    \       val suffix = string.substring(string.length - maxLength)\n        return\
    \ prefix + suffix + prefix.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpee4rsa9n.scala:28:24 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpee4rsa9n.scala:33:20\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        if (n == 0) return\
    \ \"\"\n        var i = n - 1\n        while (i >= 0) {\n            if (string(i)\
    \ == string(0)) {\n                var j = 0\n                while (j < n - i)\
    \ {\n                    if (string(i + j) != string(j)) break\n             \
    \       j += 1\n                }\n                if (j == n - i) return string\
    \ + string.substring(n - i).reverse\n            }\n            i -= 1\n     \
    \   }\n        i = 0\n        while (i < n) {\n            if (string(i) == string(n\
    \ - 1)) {\n                var j = 0\n                while (j < i) {\n      \
    \              if (string(i - j - 1) != string(n - j - 1)) break\n           \
    \         j += 1\n                }\n                if (j == i) return string.substring(0,\
    \ i).reverse + string\n            }\n            i += 1\n        }\n        \"\
    \"\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7esuuc63.scala:22:52 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mif\e[0m (string(i + j) != string(j))\
    \ break\n\e[31m\e[31m   |\e[0m                                               \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                            \
    \        Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7esuuc63.scala:34:64 ------------------------\e[0m\e[0m\n\e[31m34 |\e\
    [0m                    \e[33mif\e[0m (string(i - j - \e[31m1\e[0m) != string(n\
    \ - j - \e[31m1\e[0m)) break\n\e[31m\e[31m   |\e[0m                          \
    \                                      ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                             Not found: break\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n      val l = string.length\n      var i = 1\n     \
    \ while(i <= l / 2) {\n        if (string.substring(0, l - i) == string.substring(i).reverse)\
    \ return string + string.substring(0, l - i).reverse\n        i += 1\n      }\n\
    \      return string + string.substring(1).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmpxx94ype8.scala:21)\n\
    \tat Problem$.main(tmpxx94ype8.scala:24)\n\tat Problem.main(tmpxx94ype8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Find the longest suffix of string that is\
    \ a palindrome\n        def isPalindrome(s : String) : Boolean = s == s.reverse\n\
    \        val longestPalindromePostfix = string.inits.find(isPalindrome(_)).get\n\
    \        val stringPrefix = string.substring(0, string.length - longestPalindromePostfix.length)\n\
    \        string + stringPrefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val s = new StringBuilder(string)\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, string.length)\
    \ == string.substring(i, string.length).reverse) {\n                s.append(string.substring(0,\
    \ i).reverse)\n                return s.toString\n            }\n        }\n \
    \       return string\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010328
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val s = string.toArray\n        val dp = Array.fill(s.length,\
    \ s.length)(0)\n        for (length <- 0 to s.length - 1) {\n            for (start\
    \ <- 0 to s.length - 1 - length) {\n                if (length == 0) dp(start)(start)\
    \ = 1\n                else if (length == 1) dp(start)(start + 1) = if (s(start)\
    \ == s(start + 1)) 2 else 1\n                else dp(start)(start + length) =\
    \ if (s(start) == s(start + length) && dp(start + 1)(start + length - 1) > 0)\
    \ dp(start + 1)(start + length - 1) + 2 else max(dp(start + 1)(start + length),\
    \ dp(start)(start + length - 1))\n            }\n        }\n        val prefix\
    \ = s.slice(0, s.length - dp(0)(s.length - 1)).reverse\n        return string\
    \ + prefix.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length\
    \ 0\n\tat Problem$.makePalindrome(tmpao8wgx7i.scala:24)\n\tat Problem$.main(tmpao8wgx7i.scala:28)\n\
    \tat Problem.main(tmpao8wgx7i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010329
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val postfix = longestPalindromicPostfix(string)\n\
    \        val prefix = string.substring(0, string.length - postfix.length)\n  \
    \      return prefix + postfix + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmcr657ob.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpostfix\e[0m = longestPalindromicPostfix(string)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: longestPalindromicPostfix\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var prefix = string\n        while (!prefix.isEmpty\
    \ && !prefix.equals(prefix.reverse)) {\n            prefix = prefix.substring(0,\
    \ prefix.length - 1)\n        }\n        if (prefix.isEmpty) string + string.reverse\n\
    \        else {\n            val suffix = string.substring(prefix.length)\n  \
    \          val prefix = string.substring(0, string.length - suffix.length)\n \
    \           prefix + suffix + prefix.reverse\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_qln196v.scala:22:61 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mprefix\e[0m = string.substring(\e\
    [31m0\e[0m, string.length - suffix.length)\n\e[31m\e[31m   |\e[0m            \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                   Recursive \e[33mvalue\e[0m \e[35msuffix\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // 1. Build longest suffix that is a palindrome\n\
    \        var suffix = string\n        var suffixPalindrome : String = \"\"\n \
    \       while (suffix.length > 0) {\n            if (isPalindrome(suffix)) {\n\
    \                suffixPalindrome = suffix\n                break\n          \
    \  }\n            suffix = suffix.drop(1)\n        }\n        // 2. Build a reverse\
    \ string that contains everything before the palindromic suffix\n        var prefix\
    \ : String = \"\"\n        for (ch <- string.drop(suffixPalindrome.length)) prefix\
    \ = ch + prefix\n        // 3. Concatenate and return\n        return string +\
    \ prefix\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb6qv20qz.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (isPalindrome(suffix)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpb6qv20qz.scala:21:16 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def reverse(str : String) : String = {\n   \
    \         str.toCharArray.reverse.mkString\n        }\n        if (string.length\
    \ == 0) string\n        else {\n            val postfixLength = palindromePostfixLength(string)\n\
    \            if (postfixLength == string.length) string\n            else {\n\
    \                val prefix = string.substring(0, string.length - postfixLength)\n\
    \                val reversePrefix = reverse(prefix)\n                string +\
    \ reversePrefix\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4bhzuwe.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mpostfixLength\e[0m =\
    \ palindromePostfixLength(string)\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            Not found: palindromePostfixLength\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def reverse(string : String) : String = string.reverse\n\
    \        def checkPalindrome(string : String) : Boolean = string == reverse(string)\n\
    \        def accumulatePalindrome(string : String, accumulator : String) : String\
    \ = {\n            if (checkPalindrome(string)) accumulator\n            else\
    \ accumulatePalindrome(string.dropRight(1), accumulator + string.takeRight(1))\n\
    \        }\n        accumulatePalindrome(string, \"\") + reverse(string.take(string.length\
    \ - accumulatePalindrome(string, \"\").length))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpife0sh74.scala:26)\n\tat Problem.main(tmpife0sh74.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Find the longest palindromic suffix.\n  \
    \      def findSuffix(s : String) : String = {\n            if (s.length <= 1)\
    \ return s\n            val (l, r) = (s.length / 2, s.length / 2 + s.length %\
    \ 2)\n            var i = 0\n            while (i < l && s(i) == s(r + i)) { i\
    \ += 1 }\n            if (i == l) return s\n            else return findSuffix(s.substring(0,\
    \ l - i))\n        }\n        val suffix = findSuffix(string)\n        return\
    \ string + suffix.reverse.substring(string.length - suffix.length)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc3par0hs.scala:29)\n\tat Problem.main(tmpc3par0hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def palindrome(string : String) : Boolean =\
    \ {\n            def loop(i : Int, j : Int) : Boolean = {\n                if\
    \ (i == j) true\n                else if (i + 1 == j) string(i) == string(j)\n\
    \                else if (string(i) == string(j)) loop(i + 1, j - 1)\n       \
    \         else false\n            }\n            loop(0, string.length - 1)\n\
    \        }\n        if (palindrome(string)) string\n        else {\n         \
    \   val prefix = string.take(string.length - 1)\n            val reversedPrefix\
    \ = prefix.reverse\n            string + reversedPrefix\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.loop$1(tmpa7gqz83b.scala:19)\n\
    \tat Problem$.palindrome$1(tmpa7gqz83b.scala:22)\n\tat Problem$.makePalindrome(tmpa7gqz83b.scala:24)\n\
    \tat Problem$.main(tmpa7gqz83b.scala:32)\n\tat Problem.main(tmpa7gqz83b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val maxPalindromeLength\
    \ = (1 to length / 2).foldLeft(1)((accum, i) => {\n            if (string(i -\
    \ 1) == string(length - i)) accum + 2 else accum\n        })\n        string +\
    \ string.take(length - maxPalindromeLength).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return \"\"\n      \
    \  def longestPostfixPalindrome(string : String) : String = {\n            def\
    \ isPalindrome(string : String) : Boolean = {\n                val rev = string.reverse\n\
    \                return string == rev\n            }\n            var index =\
    \ 0\n            while (index < string.length && !isPalindrome(string.substring(index)))\
    \ {\n                index += 1\n            }\n            return string.substring(index)\n\
    \        }\n        val lpp = longestPostfixPalindrome(string)\n        if (lpp.length\
    \ == string.length) return string\n        else return string + string.substring(0,\
    \ string.length - lpp.length).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def findMaxPostfixPalindrome(string : String)\
    \ : (String, String) = {\n            var max : (String, String) = (\"\", \"\"\
    )\n            for (i <- 0 to string.length) {\n                val s = string.substring(0,\
    \ i)\n                if (s == s.reverse) max = (s, string.substring(i))\n   \
    \         }\n            max\n        }\n        val (s1, s2) = findMaxPostfixPalindrome(string)\n\
    \        s1 + s2.reverse + s2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpks1x1i_7.scala:29)\n\tat Problem.main(tmpks1x1i_7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def make(input : String) : String = {\n    \
    \        if (input.isEmpty) \"\"\n            else {\n                val suffix\
    \ = longestPalindrome(input)\n                val prefix = input.substring(0,\
    \ input.length - suffix.length)\n                return input + prefix.reverse\n\
    \            }\n        }\n        return make(string)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyzljlaah.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36msuffix\e[0m = longestPalindrome(input)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: longestPalindrome\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def recurse(length : Int) : Int = if (length\
    \ == 0) 0 else if (string.substring(0, length) == string.substring(string.length\
    \ - length)) length else recurse(length - 1)\n        val prefix = string.substring(0,\
    \ recurse(string.length - 1))\n        string + prefix.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.recurse$1(tmprhnz_l_p.scala:15)\n\tat Problem$.makePalindrome(tmprhnz_l_p.scala:16)\n\
    \tat Problem$.main(tmprhnz_l_p.scala:20)\n\tat Problem.main(tmprhnz_l_p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010332
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val r = new StringBuilder(string).reverse.toString\n\
    \        val p = (string + \"#\" + r).toArray\n        val z = new Array[Int](p.length)\n\
    \        for (i <- 1 until p.length) {\n            if (p(i) == p(z(i - 1))) z(i)\
    \ = z(i - 1) + 1\n            else {\n                var l = 0\n            \
    \    var r = min(z(i - 1), i)\n                while (l < r) {\n             \
    \       val m = (l + r) / 2\n                    if (z(m) < i - m) l = m + 1\n\
    \                    else r = m\n                }\n                z(i) = l\n\
    \            }\n        }\n        string + r.substring(r.length - z(p.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn29onmbx.scala:35)\n\tat Problem.main(tmpn29onmbx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def postfixPalindromeLength(string : String)\
    \ : Int = {\n            var length = 0\n            for (i <- 0 to string.length\
    \ / 2) {\n                if (string(i) == string(string.length - 1 - i)) length\
    \ += 1\n                else return length\n            }\n            length\n\
    \        }\n        val length = postfixPalindromeLength(string)\n        if (length\
    \ == string.length) return string\n        else return string + string.slice(0,\
    \ string.length - length).reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.postfixPalindromeLength$1$$anonfun$1(tmpp_7cajvz.scala:18)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.postfixPalindromeLength$1(tmpp_7cajvz.scala:20)\n\
    \tat Problem$.makePalindrome(tmpp_7cajvz.scala:23)\n\tat Problem$.main(tmpp_7cajvz.scala:28)\n\
    \tat Problem.main(tmpp_7cajvz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val palindrome = new StringBuilder()\n     \
    \   val postfix = new StringBuilder()\n        val prefix = new StringBuilder()\n\
    \        val (end, length) = postfixPalindrome(string)\n        prefix.append(string.substring(0,\
    \ end + 1))\n        postfix.append(string.substring(end + 1, string.length))\n\
    \        palindrome.append(postfix.toString() + prefix.toString().reverse)\n \
    \       palindrome.toString()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplhi6ee5n.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m (end, length) = postfixPalindrome(string)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: postfixPalindrome\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplhi6ee5n.scala:18:13 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m (end, length) = postfixPalindrome(string)\n\
    \e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmplhi6ee5n.scala:18:18 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m (end, length) = postfixPalindrome(string)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var i = 0\n        var j = string.length - 1\n\
    \        while (i < j) {\n            if (string(i) != string(j)) return string.substring(0,\
    \ i) + string.substring(j + 1, string.length) + string.substring(i, j + 1).reverse\n\
    \            i += 1\n            j -= 1\n        }\n        return string\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqttflgp6.scala:27)\n\tat Problem.main(tmpqttflgp6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindromeSuffix = string.tails.find(_\
    \ == _.reverse).get\n        string + longestPalindromeSuffix.reverse.drop(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpr75tc9nj.scala:15:56 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindromeSuffix\e\
    [0m = string.tails.find(_ == _.reverse).get\n\e[31m\e[31m   |\e[0m           \
    \                                             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length() == 0) return \"\"\n    \
    \    val reversed = string.reverse\n        val n = string.length()\n        for\
    \ (i <- n until 0 by -1) {\n            if (string.substring(0, i) == reversed.substring(n\
    \ - i)) return string + reversed.substring(0, n - i)\n        }\n        return\
    \ \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpih74rcs0.scala:26)\n\tat Problem.main(tmpih74rcs0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length <= 1) return string\n    \
    \    var longestPalindromeLength = 0\n        var longestPalindromePosition =\
    \ 0\n        for (position <- 0 to string.length - 1) {\n            var start\
    \ = position - 1\n            var end = position + 1\n            while (start\
    \ >= 0 && end < string.length && string(start) == string(end)) {\n           \
    \     start -= 1\n                end += 1\n            }\n            if (end\
    \ - start - 1 > longestPalindromeLength) {\n                longestPalindromeLength\
    \ = end - start - 1\n                longestPalindromePosition = start + 1\n \
    \           }\n            start = position\n            end = position + 1\n\
    \            while (start >= 0 && end < string.length && string(start) == string(end))\
    \ {\n                start -= 1\n                end += 1\n            }\n   \
    \         if (end - start - 1 > longestPalindromeLength) {\n                longestPalindromeLength\
    \ = end - start - 1\n                longestPalindromePosition = start + 1\n \
    \           }\n        }\n        if (longestPalindromeLength != 0) {\n      \
    \      return string + string.substring(0, string.length - longestPalindromePosition).reverse\n\
    \        }\n        return string + string.reverse.substring(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcq2nddr7.scala:48)\n\tat Problem.main(tmpcq2nddr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def longestPalindromeSuffix(string : String)\
    \ : String = {\n            def isPalindrome(string : String) : Boolean = {\n\
    \                var (i, j) = (0, string.length - 1)\n                while (i\
    \ < j) {\n                    if (string(i) != string(j)) return false\n     \
    \               i += 1\n                    j -= 1\n                }\n      \
    \          return true\n            }\n            var i = string.length\n   \
    \         while (i > 0) {\n                if (isPalindrome(string.substring(string.length\
    \ - i))) return string.substring(string.length - i)\n                i -= 1\n\
    \            }\n            return \"\"\n        }\n        return string + string.substring(0,\
    \ string.length - longestPalindromeSuffix(string).length).reverse\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010335
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffixLength = string.length - 1 - (0 until\
    \ string.length / 2).reverse.find(\n                i => string(i) == string(string.length\
    \ - 1 - i)).getOrElse(0)\n        string + string.substring(0, string.length -\
    \ suffixLength).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmps2phoef1.scala:17)\n\tat Problem$.main(tmps2phoef1.scala:20)\n\
    \tat Problem.main(tmps2phoef1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010335
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val stringReverse = string.reverse\n       \
    \ val suffix = {\n            var result = string.length\n            while (result\
    \ > 0 && !string.endsWith(stringReverse.substring(0, result))) {\n           \
    \     result -= 1\n            }\n            result\n        }\n        string\
    \ + stringReverse.substring(suffix)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suf = SuffixTree(string)\n        val stringSuffixLength\
    \ = suf.getPalindromicSuffixLength()\n        string + string.substring(0, string.length\
    \ - stringSuffixLength).reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptt8yvcuo.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msuf\e[0m = SuffixTree(string)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \            Not found: SuffixTree\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var longestPalindrome : String = \"\"\n    \
    \    for (i <- 0 to string.length) {\n            val str = string.substring(i)\n\
    \            if (isPalindrome(str)) {\n                longestPalindrome = str\n\
    \                break\n            }\n        }\n        val prefix = string.substring(0,\
    \ string.length - longestPalindrome.length)\n        string + prefix.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfwh4z1ns.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (isPalindrome(str)) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \  Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfwh4z1ns.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010333
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var buffer = new StringBuilder(string);\n  \
    \      if (buffer.isEmpty) return \"\";\n        for (i <- 1 to buffer.length)\
    \ {\n            if (buffer.endsWith(buffer.take(i).reverse)) {\n            \
    \    return buffer.reverse.append(buffer.drop(i)).toString;\n            }\n \
    \       }\n        return \"\";\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpllzclbi7.scala:27)\n\tat Problem.main(tmpllzclbi7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def isPalindrome(string : String) : Boolean\
    \ = {\n            val n = string.length\n            for (i <- 0 until (n / 2))\
    \ {\n                if (string(i) != string(n - 1 - i)) {\n                 \
    \   return false\n                }\n            }\n            return true\n\
    \        }\n        var reversed = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            val str = string.substring(0, i)\n            if (isPalindrome(str))\
    \ {\n                reversed = string.substring(i)\n            }\n        }\n\
    \        return string + reversed.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6hqp02i1.scala:35)\n\tat Problem.main(tmp6hqp02i1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return \"\"\n      \
    \  val m = Array.ofDim[Int](string.length + 1, string.length + 1)\n        for\
    \ (i <- 0 to string.length) m(i)(0) = 0\n        for (j <- 0 to string.length)\
    \ m(0)(j) = 0\n        for (i <- 1 to string.length) {\n            for (j <-\
    \ 1 to string.length) {\n                if (string(i - 1) == string(string.length\
    \ - j)) {\n                    m(i)(j) = m(i - 1)(j - 1) + 1\n               \
    \ } else {\n                    m(i)(j) = max(m(i - 1)(j), m(i)(j - 1))\n    \
    \            }\n            }\n        }\n        val maxPostfixLength = m(string.length)(string.length)\n\
    \        var reversePrefix = \"\"\n        for (i <- 0 until string.length - maxPostfixLength)\
    \ reversePrefix += string(i)\n        return string + reversePrefix.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpstjd98az.scala:38)\n\tat Problem.main(tmpstjd98az.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val reversedString = string.reverse\n      \
    \  val pairs = string.zip(reversedString)\n        val index = pairs.lastIndexWhere(_._1\
    \ != _._2)\n        val palindrome = pairs.slice(0, index + 1).unzip._1.mkString\n\
    \        val prefix = string.substring(index + 1, string.length)\n        return\
    \ prefix + palindrome + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz0p2d8bx.scala:17:43 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mindex\e[0m = pairs.lastIndexWhere(_._1\
    \ != _._2)\n\e[31m\e[31m   |\e[0m                                         ^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value _1 is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val N = string.length\n        // Find the longest\
    \ postfix of a string that is a palindrome.\n        // This is done via dynamic\
    \ programming.\n        // The function f(i) is the length of the longest palindromic\
    \ postfix of a string with a length of i.\n        val f = Array.fill(N)(0)\n\
    \        for (i <- (1 to N-1).reverse) {\n            val j = i - f(i) - 1\n \
    \           if (string(i) == string(j)) {\n                var prefixLength =\
    \ 0\n                while (i + prefixLength + 1 < N && string(i + prefixLength\
    \ + 1) == string(j - prefixLength - 1)) {\n                    prefixLength +=\
    \ 1\n                }\n                f(i) = f(i) + prefixLength + 1\n     \
    \       }\n        }\n        // Find the first index k such that f(k) = 0.\n\
    \        // This is where we'll split our string.\n        var k = N - 1\n   \
    \     while (k >= 0 && f(k) != 0) k -= 1\n        val prefix = string.substring(0,\
    \ k + 1)\n        string + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmt1d193o.scala:39)\n\tat Problem.main(tmpmt1d193o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return string\n    \
    \    // Find the longest postfix of the supplied string that is a palindrome\n\
    \        def findLongestPalindromicPostfix(string : String) : (String, String)\
    \ = {\n            if (string.length <= 1) return (string, \"\")\n           \
    \ if (string.charAt(0) == string.charAt(string.length - 1)) {\n              \
    \  val postfix = string.substring(0, string.length - 1)\n                val pair\
    \ = findLongestPalindromicPostfix(postfix)\n                (pair._1 + pair._2,\
    \ pair._2 + string.charAt(string.length - 1))\n            } else {\n        \
    \        (\"\", string)\n            }\n        }\n        val pair = findLongestPalindromicPostfix(string)\n\
    \        pair._1 + string + pair._2.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt6lz9gv9.scala:32)\n\tat Problem.main(tmpt6lz9gv9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        if (length\
    \ == 0) return \"\"\n        // Compute the longest suffix which is a palindrome.\n\
    \        val longestSuffixLength = new Array[Int](length)\n        longestSuffixLength(length\
    \ - 1) = 1\n        // Traverse the string backwards.\n        for (i <- length\
    \ - 2 to 0 by -1) {\n            if (string(i) == string(length - 1)) {\n    \
    \            // Compute the length of palindromic suffix and store it.\n     \
    \           longestSuffixLength(i) = 1 + longestSuffixLength(i + 1)\n        \
    \    } else {\n                // Current suffix is not a palindrome so store\
    \ 0.\n                longestSuffixLength(i) = 0\n            }\n        }\n \
    \       // The idea of this computation is that if the longest palindromic suffix\
    \ of a string does not include\n        // first character of the string then\
    \ the string itself is a palindrome and no further manipulation is\n        //\
    \ needed. Otherwise we need to append to the end of the string the reverse of\
    \ a prefix which comes\n        // before the palindromic suffix.\n        if\
    \ (longestSuffixLength(0) == 0) return string\n        // Append prefix that comes\
    \ before the palindromic suffix.\n        var result = string\n        for (i\
    \ <- 0 until length - longestSuffixLength(0)) {\n            result += string(i)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj75jnpuh.scala:45)\n\tat Problem.main(tmpj75jnpuh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return string\n    \
    \    val length = string.length\n        var i = 1\n        var j = length - 1\n\
    \        var palindrome = \"\"\n        while (i <= j) {\n            if (string(i\
    \ - 1) == string(j)) {\n                palindrome = string.substring(i - 1, j\
    \ + 1)\n                i += 1\n                j -= 1\n            } else {\n\
    \                i = 1\n                j -= 1\n            }\n        }\n   \
    \     return string + new StringBuffer(string.substring(0, length - palindrome.length)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0vumd_t8.scala:34)\n\tat Problem.main(tmp0vumd_t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var prefix : String = \"\"\n        var postfix\
    \ : String = \"\"\n        var length = string.length\n        var length_test\
    \ = length\n        for (i <- length - 1 to 0 by -1) {\n            length_test\
    \ -= 1\n            prefix = string.substring(0, length_test)\n            postfix\
    \ = string.substring(i, length)\n            if (prefix == postfix.reverse) return\
    \ string + postfix.reverse.substring(length_test)\n        }\n        string +\
    \ postfix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkfn6u5as.scala:29)\n\tat Problem.main(tmpkfn6u5as.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0)\n            return\
    \ string\n        val prefix = string.substring(0, string.length - 1)\n      \
    \  return string + prefix.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfw_enypr.scala:24)\n\tat Problem.main(tmpfw_enypr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val maxPostfixLength = findMaxPostfixLength(string)\n\
    \        string + new StringBuilder(string.substring(0, string.length - maxPostfixLength)).reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyko7wy0.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxPostfixLength\e[0m =\
    \ findMaxPostfixLength(string)\n\e[31m\e[31m   |\e[0m                        \
    \       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: findMaxPostfixLength\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010337
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def rotate(string : String) : String = {\n \
    \           if (string.length == 0) return \"\"\n            val h = string.head\n\
    \            val t = string.tail\n            val rotated = t + h\n          \
    \  rotated\n        }\n        def isPalindrome(string : String) : Boolean = {\n\
    \            for (i <- 0 until string.length / 2) {\n                if (string(i)\
    \ != string(string.length - 1 - i)) return false\n            }\n            return\
    \ true\n        }\n        if (isPalindrome(string)) return string\n        var\
    \ prefix = \"\"\n        var suffix = string\n        while (!isPalindrome(suffix))\
    \ {\n            prefix = rotate(prefix)\n            suffix = rotate(suffix)\n\
    \        }\n        val s = string.substring(0, string.length - suffix.length)\n\
    \        return (s + suffix + s.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var length = string.length\n        var index\
    \ = 0\n        var palindrome = string\n        for (index <- 1 to length / 2)\
    \ {\n            var prefix = string.substring(0, length - index)\n          \
    \  var suffix = string.substring(length - index, length)\n            if (prefix\
    \ == suffix.reverse) {\n                palindrome = prefix + string\n       \
    \         return palindrome\n            }\n        }\n        return palindrome\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfxos9q_u.scala:31)\n\tat Problem.main(tmpfxos9q_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        for (i <- string.length - 1 to 0 by -1) {\n\
    \            if (string.substring(i).equals(string.substring(i).reverse)) return\
    \ string + string.substring(0, i).reverse\n        }\n        string\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb91u68u0.scala:24)\n\tat Problem.main(tmpb91u68u0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Find longest palindromic suffix (must be\
    \ non-empty).\n        def findPalindromicSuffix(s : String) : (String, String)\
    \ = {\n            // Check if the string is a palindrome.\n            def isPalindrome(s\
    \ : String) : Boolean = (s == s.reverse)\n            // Make the string longer\
    \ and longer by appending to its postfix.\n            for (suffix <- Range(1,\
    \ s.length + 1)) {\n                val candidateSuffix = s.substring(s.length\
    \ - suffix)\n                if (isPalindrome(candidateSuffix)) {\n          \
    \          val prefix = s.substring(0, s.length - suffix)\n                  \
    \  return (prefix, candidateSuffix)\n                }\n            }\n      \
    \      // No palindromic suffix found.\n            (\"\", \"\")\n        }\n\
    \        val (prefix, suffix) = findPalindromicSuffix(string)\n        prefix\
    \ + suffix + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkjbhtgd8.scala:37)\n\tat Problem.main(tmpkjbhtgd8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val postfixPalindrome = Problem.maxPostfixPalindrome(string)\n\
    \        val prefix = string.substring(0, string.length - postfixPalindrome.length)\n\
    \        prefix + postfixPalindrome + prefix.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcmpqgqfd.scala:15:40 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpostfixPalindrome\e[0m =\
    \ Problem.maxPostfixPalindrome(string)\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value maxPostfixPalindrome is not a member of object Problem\n1 error found\n"
  stdout: ''
  timestamp: 1660010343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val palindromePostfix = findPalindromePostfix(string)\n\
    \        val prefixReverse = findPrefixReverse(string, palindromePostfix)\n  \
    \      string + prefixReverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdxgsr72i.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpalindromePostfix\e[0m =\
    \ findPalindromePostfix(string)\n\e[31m\e[31m   |\e[0m                       \
    \         ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \        Not found: findPalindromePostfix\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdxgsr72i.scala:16:28 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mprefixReverse\e[0m = findPrefixReverse(string,\
    \ palindromePostfix)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: findPrefixReverse\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val l = string.length\n        val end = l\n\
    \        var mid = (l - 1) / 2\n        var i = l - 1\n        while (i >= 0)\
    \ {\n            while (mid - i >= 0 && mid + i < end && string(mid - i) == string(mid\
    \ + i)) i -= 1\n            if (mid - i < 0 || mid + i >= end) {\n           \
    \     val prefix = string.substring(mid + i + 1)\n                return prefix\
    \ + string + prefix.reverse\n            }\n            else i = l - 1\n     \
    \       mid -= 1\n        }\n        string\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.makePalindrome(tmp_dkbc517.scala:20)\n\
    \tat Problem$.main(tmp_dkbc517.scala:32)\n\tat Problem.main(tmp_dkbc517.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def suffix(string : String) : String = if (string.length\
    \ == 0) string else string.charAt(string.length - 1) + suffix(string.substring(0,\
    \ string.length - 1))\n        def isPalindrome(string : String) : Boolean = {\n\
    \            val half = string.length / 2\n            if (string.length == 0)\
    \ true\n            else if (string.charAt(0) != string.charAt(string.length -\
    \ 1)) false\n            else isPalindrome(string.substring(1, string.length -\
    \ 1))\n        }\n        def palindromeSuffix(string : String) : String = {\n\
    \            val suffixLength = 1 to string.length\n            val palindromicSuffix\
    \ = suffixLength.map(l => (l, string.substring(string.length - l, string.length))).filter(x\
    \ => isPalindrome(x._2)).sortBy(x => x._1).last\n            palindromicSuffix._2\n\
    \        }\n        val palindromicSuffix = palindromeSuffix(string)\n       \
    \ val palindromicPrefix = string.substring(0, string.length - palindromicSuffix.length)\n\
    \        palindromicPrefix + palindromicSuffix + suffix(palindromicPrefix)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty.tail\n\tat scala.collection.immutable.Vector.last(Vector.scala:283)\n\
    \tat Problem$.palindromeSuffix$1(tmpg2fhbh_5.scala:24)\n\tat Problem$.makePalindrome(tmpg2fhbh_5.scala:27)\n\
    \tat Problem$.main(tmpg2fhbh_5.scala:32)\n\tat Problem.main(tmpg2fhbh_5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def isPalindrome(string : String) : Boolean\
    \ = string.zip(string.reverse).takeWhile(x => x._1 == x._2).length == string.length\n\
    \        if (isPalindrome(string)) string\n        else {\n            val suffixLength\
    \ = ((string.length - 1) to 0 by -1).find(suffixLength => isPalindrome(string.substring(string.length\
    \ - suffixLength))) match {\n                case Some(suffixLength) => suffixLength\n\
    \                case None => throw new IllegalArgumentException\n           \
    \ }\n            string + string.substring(0, string.length - suffixLength).reverse\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val lps = longestPalindromicSubstring(string)\n\
    \        val p = string.substring(0, n - lps.length)\n        string + reverse(p)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc6ysrz0e.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlps\e[0m = longestPalindromicSubstring(string)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: longestPalindromicSubstring\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc6ysrz0e.scala:18:17 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        string + reverse(p)\n\e[31m\e[31m   |\e[0m  \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: reverse\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        var longestPalindromeLength\
    \ = 0\n        var longestPalindromeEndingAtIndex = -1\n        var i = 0\n  \
    \      while (i < length) {\n            var start = i\n            var end =\
    \ i\n            while (start >= 0 && end < length && string(start) == string(end))\
    \ {\n                start -= 1\n                end += 1\n            }\n   \
    \         start += 1\n            end -= 1\n            val palindromeLength =\
    \ end - start + 1\n            if (palindromeLength > longestPalindromeLength)\
    \ {\n                longestPalindromeLength = palindromeLength\n            \
    \    longestPalindromeEndingAtIndex = end\n            }\n            i += 1\n\
    \        }\n        val longestPalindrome = string.substring(longestPalindromeEndingAtIndex\
    \ - longestPalindromeLength + 1, longestPalindromeEndingAtIndex + 1)\n       \
    \ val stringPrefixBeforePalindrome = string.substring(0, longestPalindromeEndingAtIndex\
    \ - longestPalindromeLength + 1)\n        return longestPalindrome + new StringBuffer(stringPrefixBeforePalindrome).reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpios7b36k.scala:42)\n\tat Problem.main(tmpios7b36k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var palindrome : StringBuilder = new StringBuilder(string)\n\
    \        // If the string is a palindrome already, no need to do anything.\n \
    \       if (!isPalindrome(string)) {\n            // Find the longest palindromic\
    \ suffix of the string.\n            var suffix : String = longestPalindromicSuffix(string)\n\
    \            // Append to the end of the string reverse of a prefix that comes\
    \ before the palindromic suffix.\n            palindrome.append(reverse(string.substring(0,\
    \ string.length - suffix.length)))\n        }\n        return palindrome.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkydyiqtb.scala:17:13 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (!isPalindrome(string)) {\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Not found:\
    \ isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkydyiqtb.scala:19:34\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mvar\e[0m\
    \ \e[36msuffix\e[0m : \e[35mString\e[0m = longestPalindromicSuffix(string)\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: longestPalindromicSuffix\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkydyiqtb.scala:21:30\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            palindrome.append(reverse(string.substring(\e\
    [31m0\e[0m, string.length - suffix.length)))\n\e[31m\e[31m   |\e[0m          \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \   Not found: reverse\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var palindrome = new StringBuilder(string)\n\
    \        val len = string.length\n        for (i <- len - 1 to 0 by -1) {\n  \
    \          val prefix = string.substring(0, i)\n            val suffix = string.substring(i,\
    \ len)\n            if (prefix == suffix.reverse) {\n                palindrome.append(prefix.reverse)\n\
    \                return palindrome.toString\n            }\n        }\n      \
    \  palindrome.append(string.reverse)\n        return palindrome.toString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmv9hbwwf.scala:30)\n\tat Problem.main(tmpmv9hbwwf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        var maxPalindromeStart\
    \ = 0\n        var maxPalindromeLength = 0\n        for (i <- (0 until n).reverse)\
    \ {\n            if (string(i) == string(0)) {\n                var length = 0\n\
    \                for (k <- 0 until n) {\n                    if (k + i < n &&\
    \ string(k) == string(k + i)) length += 1\n                    else break\n  \
    \              }\n                if (length > maxPalindromeLength) {\n      \
    \              maxPalindromeStart = i\n                    maxPalindromeLength\
    \ = length\n                }\n            }\n        }\n        string + string.substring(0,\
    \ maxPalindromeStart).reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp80w0j877.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33melse\e[0m break\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \          Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n      if (string.isEmpty) return string\n      var prefix\
    \ : String = \"\"\n      var suffix : String = \"\"\n      for (i <- 0 to string.length)\
    \ {\n        if (string.substring(0, i) == string.substring(i, string.length).reverse)\
    \ {\n          prefix = string.substring(0, i)\n          suffix = string.substring(i,\
    \ string.length)\n        }\n      }\n      return prefix + suffix.reverse + suffix\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqbflayfh.scala:28)\n\tat Problem.main(tmpqbflayfh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val stringBuffer = new StringBuffer(string)\n\
    \        val stringList = stringBuffer.toList\n        val stringListRev = stringList.reverse\n\
    \        val length = stringList.length\n        for (i <- (1 to length)) {\n\
    \            if (stringList.drop(length - i) == stringListRev.take(i)) return\
    \ stringBuffer.append(stringListRev.drop(i)).toString\n        }\n        stringBuffer.append(stringListRev).toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0fim_9xl.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mstringList\e[0m = stringBuffer.toList\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         value toList is not a member of StringBuffer\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ (0 until n).find(i => isPalindrome(string.substring(i))).getOrElse(0)\n    \
    \    val prefix = string.substring(0, n - suffix)\n        string + prefix.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyuf_ia5c.scala:16:43 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msuffix\e[0m = (\e[31m0\e\
    [0m until n).find(\e[36mi\e[0m => isPalindrome(string.substring(i))).getOrElse(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Not found: isPalindrome\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        if (length\
    \ == 0) {\n            return string\n        }\n        var j = 0\n        while\
    \ (j < length && (string(j) == string(length - 1 - j))) {\n            j += 1\n\
    \        }\n        val prefix = string.substring(0, j)\n        return string\
    \ + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5q_atlu6.scala:28)\n\tat Problem.main(tmp5q_atlu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var longestPostfix : String = \"\"\n       \
    \ for (substring <- string.substrings) if (substring.isPalindrome && substring.length\
    \ > longestPostfix.length) longestPostfix = substring\n        return string +\
    \ string.substring(0, string.length - longestPostfix.length).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxa0vqu53.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m (substring <- string.substrings)\
    \ \e[33mif\e[0m (substring.isPalindrome && substring.length > longestPostfix.length)\
    \ longestPostfix = substring\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue substrings is not a member of String - did you mean\
    \ string.substring?\n1 error found\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return \"\"\n      \
    \  var suffix = findPalindromicSuffix(string)\n        val prefix = string.substring(0,\
    \ string.length - suffix.length)\n        return prefix + suffix + prefix.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdmhkfkym.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36msuffix\e[0m = findPalindromicSuffix(string)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: findPalindromicSuffix\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var longestPalindrome = \"\"\n        for (i\
    \ <- 0 to string.length) {\n            val suffix = string.substring(i)\n   \
    \         if (isPalindrome(suffix)) longestPalindrome = suffix\n        }\n  \
    \      string + string.substring(0, string.length - longestPalindrome.length).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmn6dh_j.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (isPalindrome(suffix)) longestPalindrome\
    \ = suffix\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val l = string.length\n        var max = 0\n\
    \        for (i <- 0 until l) {\n            if (i + 1 < l && string(i) == string(i\
    \ + 1)) {\n                var j = 0\n                while (i - j >= 0 && i +\
    \ 1 + j < l && string(i - j) == string(i + 1 + j)) j += 1\n                if\
    \ (i - j < 0) max = j * 2 + 1\n            }\n            if (string(i) == string(i))\
    \ {\n                var j = 0\n                while (i - j >= 0 && i + j < l\
    \ && string(i - j) == string(i + j)) j += 1\n                if (i - j < 0) max\
    \ = j * 2\n            }\n        }\n        string + string.substring(0, l -\
    \ max).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 1\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpxcdn6tiw.scala:29)\n\tat Problem$.main(tmpxcdn6tiw.scala:33)\n\
    \tat Problem.main(tmpxcdn6tiw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val palindromeSuffix = findPalindromeSuffix(string)\n\
    \        string + reverseString(string.substring(0, string.length - palindromeSuffix.length))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmov_p2ws.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ findPalindromeSuffix(string)\n\e[31m\e[31m   |\e[0m                        \
    \       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: findPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpmov_p2ws.scala:16:17 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        string + reverseString(string.substring(\e[31m0\e\
    [0m, string.length - palindromeSuffix.length))\n\e[31m\e[31m   |\e[0m        \
    \         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: reverseString\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffixes = string.tails.map(_.mkString).toArray.reverse\n\
    \        val matchingSuffix = suffixes.find(suffix => {\n            if (suffix.length\
    \ == 1) true\n            else suffix.substring(0, (suffix.length + 1) / 2) ==\
    \ suffix.substring((suffix.length + 1) / 2).reverse\n        })\n        matchingSuffix\
    \ match {\n            case Some(suffix) => string + string.substring(0, string.length\
    \ - suffix.length).reverse\n            case None => string\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpujek2805.scala:27)\n\tat Problem.main(tmpujek2805.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010348
