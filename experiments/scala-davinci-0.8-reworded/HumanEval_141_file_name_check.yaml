name: HumanEval_141_file_name_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function which takes a string representing a file's name, and returns\n\
  \    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n   \
  \ // A file's name is considered to be valid if and only if all the following conditions\
  \ \n    // are met:\n    // - There should not be more than three digits ('0'-'9')\
  \ in the file's name.\n    // - The file's name contains exactly one dot '.'\n \
  \   // - The substring before the dot should not be empty, and it starts with a\
  \ letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n\
  \    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"\
  1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name : String) : String\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
  example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
  Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\"\
  )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"\
  No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n  \
  \  assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
completions: ["        // Write your code here.\n        // If the file's name is\
    \ valid, set 'result' to 'Yes'.\n        // Otherwise, set 'result' to 'No'.\n\
    \        var result : String = \"No\"\n        var check1 : Int = 0\n        var\
    \ check2 : Int = 0\n        var check3 : Int = 0\n        for (i <- 0 until file_name.length)\
    \ {\n            if (('0' <= file_name(i) && file_name(i) <= '9') || \n      \
    \          ('a' <= file_name(i) && file_name(i) <= 'z') || \n                ('A'\
    \ <= file_name(i) && file_name(i) <= 'Z')) {\n                if ('0' <= file_name(i)\
    \ && file_name(i) <= '9') {\n                    check1 += 1\n               \
    \ }\n                if (check1 > 3) {\n                    return \"No\"\n  \
    \              }\n                if (file_name(i) == '.') {\n               \
    \     check2 += 1\n                }\n                if (check2 > 1) {\n    \
    \                return \"No\"\n                }\n            } else {\n    \
    \            return \"No\"\n            }\n        }\n        val file_name_arr\
    \ = file_name.split(\"\\\\.\")\n        if (file_name_arr.length == 2) {\n   \
    \         if (file_name_arr(0).length == 0) {\n                return \"No\"\n\
    \            }\n            if (file_name_arr(1) == \"txt\" || file_name_arr(1)\
    \ == \"exe\" || file_name_arr(1) == \"dll\") {\n                if ('a' <= file_name_arr(0)(0)\
    \ && file_name_arr(0)(0) <= 'z') {\n                    result = \"Yes\"\n   \
    \             } else if ('A' <= file_name_arr(0)(0) && file_name_arr(0)(0) <=\
    \ 'Z') {\n                    result = \"Yes\"\n                }\n          \
    \  }\n        }\n        return result", "        if (file_name.split(\"\\\\.\"\
    ).size != 2) {\n            return \"No\"\n        }\n        val name = file_name.split(\"\
    \\\\.\")\n        if (name(0).isEmpty || !name(0)(0).isLetter) {\n           \
    \ return \"No\"\n        }\n        if (name(0).count(_.isDigit) > 3) {\n    \
    \        return \"No\"\n        }\n        if (name(1) != \"txt\" && name(1) !=\
    \ \"exe\" && name(1) != \"dll\") {\n            return \"No\"\n        }\n   \
    \     return \"Yes\"", '        // Write your code here', "        val valid_exts\
    \ = List(\"txt\", \"exe\", \"dll\")\n        val has_dot = file_name.contains(\"\
    .\")\n        val substrings = file_name.split(\"\\\\.\")\n        val before_dot\
    \ = substrings(0)\n        val after_dot = substrings(1)\n        val has_valid_ext\
    \ = valid_exts.contains(after_dot)\n        val has_valid_name = if(before_dot.length\
    \ > 0)\n                                before_dot(0).isLetter\n             \
    \                else false\n        val has_valid_num_digits = file_name.filter(c\
    \ => c.isDigit).length <= 3\n        if(has_dot && has_valid_ext && has_valid_name\
    \ && has_valid_num_digits)\n            \"Yes\"\n        else \"No\"", "     \
    \   // Write your code here\n        return \"Yes\"", "        // Write your code\
    \ here\n        if (file_name.length() == 0) {\n            return \"No\"\n  \
    \      }\n        val chars = file_name.toCharArray()\n        var number_of_digits\
    \ = 0\n        var number_of_dots = 0\n        var extension = \"\"\n        var\
    \ file_name_before_dot = \"\"\n        for (c <- chars) {\n            if (c >=\
    \ '0' && c <= '9') {\n                number_of_digits += 1\n            }\n \
    \           if (c == '.') {\n                number_of_dots += 1\n           \
    \ }\n        }\n        if (number_of_digits > 3 || number_of_dots != 1) {\n \
    \           return \"No\"\n        }\n        val dot_index = file_name.indexOf('.')\n\
    \        file_name_before_dot = file_name.substring(0, dot_index)\n        extension\
    \ = file_name.substring(dot_index + 1)\n        if (file_name_before_dot.length()\
    \ == 0 || \n            !(file_name_before_dot(0) >= 'a' && file_name_before_dot(0)\
    \ <= 'z' ||\n            file_name_before_dot(0) >= 'A' && file_name_before_dot(0)\
    \ <= 'Z')) {\n            return \"No\"\n        }\n        if (extension != \"\
    txt\" && extension != \"exe\" && extension != \"dll\") {\n            return \"\
    No\"\n        }\n        return \"Yes\"", "        def countDigits(file_name :\
    \ String) : Int = {\n            var count = 0\n            for (i <- 0 until\
    \ file_name.length) {\n                if (file_name(i) >= '0' && file_name(i)\
    \ <= '9') {\n                    count += 1\n                }\n            }\n\
    \            return count\n        }\n        def validExtension(file_name : String)\
    \ : Boolean = {\n            val extension = file_name.split('.')(1)\n       \
    \     return extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \n        }\n        def hasDot(file_name : String) : Boolean = {\n          \
    \  for (i <- 0 until file_name.length) {\n                if (file_name(i) ==\
    \ '.') {\n                    return true\n                }\n            }\n\
    \            return false\n        }\n        def validPrefix(file_name : String)\
    \ : Boolean = {\n            val prefix = file_name.split('.')(0)\n          \
    \  return prefix.length != 0 && (prefix(0) >= 'a' && prefix(0) <= 'z' || prefix(0)\
    \ >= 'A' && prefix(0) <= 'Z')\n        }\n        if (countDigits(file_name) >\
    \ 3 || !hasDot(file_name) || !validPrefix(file_name) || !validExtension(file_name))\
    \ {\n            return \"No\"\n        }\n        return \"Yes\"", '        return
    ""', "        // Write your implementation here\n        if (file_name.count(c\
    \ => c.isDigit) > 3) return \"No\"\n        val substrs = file_name.split(\"\\\
    \\.\")\n        if (substrs.length != 2) return \"No\"\n        if (substrs(0).length\
    \ == 0 || !substrs(0)(0).isLetter) return \"No\"\n        if (substrs(1) != \"\
    txt\" && substrs(1) != \"exe\" && substrs(1) != \"dll\") return \"No\"\n     \
    \   return \"Yes\"", "        val parts = file_name.split(\"\\\\.\").toList\n\
    \        val first = parts(0)\n        val second = parts(1)\n        def firstDigitCount(first\
    \ : String) : Int = {\n            def sub(first : String, count : Int) : Int\
    \ = {\n                if (first.length() == 0) {\n                    count\n\
    \                } else {\n                    if (first(0) >= '0' && first(0)\
    \ <= '9') {\n                        sub(first.substring(1), count + 1)\n    \
    \                } else {\n                        sub(first.substring(1), count)\n\
    \                    }\n                }\n            }\n            sub(first,\
    \ 0)\n        }\n        def firstIsValid(first : String) : Boolean = {\n    \
    \        if (first.length() == 0) {\n                false\n            } else\
    \ {\n                if (first(0) >= 'a' && first(0) <= 'z' || first(0) >= 'A'\
    \ && first(0) <= 'Z') {\n                    true\n                } else {\n\
    \                    false\n                }\n            }\n        }\n    \
    \    def secondIsValid(second : String) : Boolean = {\n            second == \"\
    txt\" || second == \"exe\" || second == \"dll\"\n        }\n        if (parts.length\
    \ != 2) {\n            \"No\"\n        } else {\n            if (firstDigitCount(first)\
    \ > 3) {\n                \"No\"\n            } else {\n                if (!firstIsValid(first))\
    \ {\n                    \"No\"\n                } else {\n                  \
    \  if (!secondIsValid(second)) {\n                        \"No\"\n           \
    \         } else {\n                        \"Yes\"\n                    }\n \
    \               }\n            }\n        }", "        // Write your code here\n\
    \        return \"\"", '        return "Yes"', "        // TODO: add correct solution\n\
    \        \"No\"", "        if (file_name.count(_.isDigit) > 3) return \"No\"\n\
    \        val parts = file_name.split('.')\n        if (parts.length != 2) return\
    \ \"No\"\n        if (parts(0).length == 0 || !parts(0)(0).isLetter) return \"\
    No\"\n        if (parts(1) != \"txt\" && parts(1) != \"exe\" && parts(1) != \"\
    dll\") return \"No\"\n        return \"Yes\"", "        // Write your code here\n\
    \        null", '        ???', "        // Write your code here, and return the\
    \ correct result.\n        val parts = file_name.split(\"\\\\.\")\n        if\
    \ (parts.length != 2) return \"No\"\n        if (parts(0).matches(\"\"\"^[a-zA-Z]*\\\
    d{0,3}[a-zA-Z]*$\"\"\")) {\n            if (parts(1) == \"txt\" || parts(1) ==\
    \ \"exe\" || parts(1) == \"dll\") \"Yes\" else \"No\"\n        } else \"No\"",
  "        // We can first use a regex to check if it is valid.\n        val check1\
    \ = \"\"\"[^\\d]{1}[a-zA-Z]+\\.txt|exe|dll\"\"\".r\n        // However, we can\
    \ also use other methods, for example, we can use a for-loop to\n        // solve\
    \ this problem.\n        if (check1.findFirstIn(file_name).isEmpty) {\n      \
    \      return \"No\"\n        }\n        var ans = \"Yes\"\n        var cnt =\
    \ 0\n        for (i <- 0 until file_name.length) {\n            if (file_name(i)\
    \ == '.') {\n                cnt += 1\n            }\n            if (cnt > 1)\
    \ {\n                ans = \"No\"\n            }\n            if (file_name(i)\
    \ >= '0' && file_name(i) <= '9') {\n                ans = \"No\"\n           \
    \ }\n        }\n        ans", "        if (file_name.count(x => x.isDigit) > 3)\
    \ return \"No\"\n        if (file_name.count(x => x == '.') != 1) return \"No\"\
    \n        if (!file_name.contains('.')) return \"No\"\n        val before_dot\
    \ = file_name.split('.')(0)\n        if (before_dot.isEmpty || !before_dot(0).isLetter)\
    \ return \"No\"\n        val after_dot = file_name.split('.')(1)\n        if (after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") return \"No\"\n\
    \        return \"Yes\"", "        val file_name_arr = file_name.split(\"\\\\\
    .\")\n        // Check if the file name contains at least one digit and no more\
    \ than three digits\n        val file_name_digits = file_name_arr(0).filter(x\
    \ => x >= '0' && x <= '9')\n        if (file_name_digits.length == 0 || file_name_digits.length\
    \ > 3)\n            return \"No\"\n        // Check if the file name has only\
    \ one dot\n        if (file_name_arr.length != 2)\n            return \"No\"\n\
    \        // Check if the extension is txt, exe, or dll\n        if (file_name_arr(1)\
    \ != \"txt\" && file_name_arr(1) != \"exe\" && file_name_arr(1) != \"dll\")\n\
    \            return \"No\"\n        // Check if the first character of the file\
    \ name is a letter\n        if (file_name_arr(0)(0) < 'a' || file_name_arr(0)(0)\
    \ > 'z' && file_name_arr(0)(0) < 'A' || file_name_arr(0)(0) > 'Z')\n         \
    \   return \"No\"\n        return \"Yes\"", "        var flag = false\n      \
    \  val sub_s = file_name.split(\"\\\\.\")\n        if (sub_s.length == 2) {\n\
    \            val sub_s1 = sub_s(0)\n            val sub_s2 = sub_s(1)\n      \
    \      if (sub_s1.length != 0 && sub_s1.length <= 8 && sub_s2.length <= 3) {\n\
    \                if ((sub_s2 == \"txt\" || sub_s2 == \"exe\" || sub_s2 == \"dll\"\
    ) && sub_s1(0).isLetter) {\n                    for (i <- 0 until sub_s1.length)\
    \ {\n                        if (sub_s1(i).isDigit) {\n                      \
    \      flag = true\n                        }\n                    }\n       \
    \             if (flag) {\n                        return \"No\"\n           \
    \         } else {\n                        return \"Yes\"\n                 \
    \   }\n                } else {\n                    return \"No\"\n         \
    \       }\n            } else {\n                return \"No\"\n            }\n\
    \        } else {\n            return \"No\"\n        }", "        val reg = \"\
    ^[a-zA-Z]+[0-9]{0,3}.[txt|exe|dll]\".r\n        reg.findFirstIn(file_name) match\
    \ {\n            case Some(x) => \"Yes\"\n            case None => \"No\"\n  \
    \      }", "        val dot_regex = \"[.]\".r\n        val numbers_regex = \"\
    [0-9]\".r\n        val txt_exe_dll_regex = \"[txedll]\".r\n        val substring_before_dot\
    \ = dot_regex.split(file_name)(0)\n        val substring_after_dot = dot_regex.split(file_name)(1)\n\
    \        // 1) There should not be more than three digits ('0'-'9') in the file's\
    \ name.\n        val first_condition = (numbers_regex.findAllIn(file_name).length\
    \ <= 3)\n        // 2) The file's name contains exactly one dot '.'\n        val\
    \ second_condition = (dot_regex.findAllIn(file_name).length == 1)\n        //\
    \ 3) The substring before the dot should not be empty, and it starts with a letter\
    \ from \n        // the latin alphapet ('a'-'z' and 'A'-'Z').\n        val third_condition\
    \ = (substring_before_dot.length > 0 && (substring_before_dot(0) >= 'a' && substring_before_dot(0)\
    \ <= 'z') || (substring_before_dot(0) >= 'A' && substring_before_dot(0) <= 'Z'))\n\
    \        // 4) The substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n        val fourth_condition = (substring_after_dot == \"txt\" || substring_after_dot\
    \ == \"exe\" || substring_after_dot == \"dll\")\n        if (first_condition &&\
    \ second_condition && third_condition && fourth_condition) \"Yes\" else \"No\"",
  "        def matches(s : String, pattern : String) : Boolean = {\n            var\
    \ pat : Array[Char] = pattern.toCharArray()\n            var i = 0\n         \
    \   for (c <- s) {\n                if (i < pat.length && c == pat(i)) {\n   \
    \                 i += 1\n                }\n            }\n            return\
    \ i == pat.length\n        }\n        if (file_name.count(_.isDigit) > 3) {\n\
    \            return \"No\"\n        }\n        var dot_pos = file_name.indexOf('.')\n\
    \        if (dot_pos < 0) {\n            return \"No\"\n        }\n        if\
    \ (dot_pos == 0 || dot_pos == file_name.length - 1) {\n            return \"No\"\
    \n        }\n        var prefix = file_name.substring(0, dot_pos)\n        var\
    \ postfix = file_name.substring(dot_pos + 1)\n        if (!matches(prefix, \"\
    [a-zA-Z]+\") || !(matches(postfix, \"txt\") || matches(postfix, \"exe\") || matches(postfix,\
    \ \"dll\"))) {\n            return \"No\"\n        }\n        return \"Yes\"",
  "        // Write your code here\n        null", "        val regex = \"\"\"([a-zA-Z]+[0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case regex(_, _)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        val substrings\
    \ = file_name.split(\"\\\\.\")\n        if (substrings.length != 2)\n        \
    \    return \"No\"\n        val file_name_body = substrings(0)\n        val file_extension\
    \ = substrings(1)\n        val digit_count = file_name_body.count(c => '0' <=\
    \ c && c <= '9')\n        if (digit_count > 3)\n            return \"No\"\n  \
    \      if (file_name_body.length == 0)\n            return \"No\"\n        if\
    \ (!('a' <= file_name_body(0) && file_name_body(0) <= 'z') && !('A' <= file_name_body(0)\
    \ && file_name_body(0) <= 'Z'))\n            return \"No\"\n        if (file_extension\
    \ != \"txt\" && file_extension != \"exe\" && file_extension != \"dll\")\n    \
    \        return \"No\"\n        return \"Yes\"", '        // Your code goes here.',
  "        // Write your code here\n        val n = file_name.length()\n        var\
    \ i = 0\n        var cnt = 0\n        var alpha = false\n        while (i < n)\
    \ {\n            if (file_name(i) >= '0' && file_name(i) <= '9') cnt += 1\n  \
    \          if (file_name(i) >= 'a' && file_name(i) <= 'z' || file_name(i) >= 'A'\
    \ && file_name(i) <= 'Z') alpha = true\n            i += 1\n        }\n      \
    \  if (cnt > 3 || alpha == false) return \"No\"\n        val arr = file_name.split(\"\
    \\\\.\")\n        if (arr.length != 2) return \"No\"\n        if (arr(0).length()\
    \ == 0) return \"No\"\n        if (arr(1) != \"txt\" && arr(1) != \"exe\" && arr(1)\
    \ != \"dll\") return \"No\"\n        return \"Yes\"", "        // If the name\
    \ contains more than three digits, return \"No\"\n        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        // If there are not one dot, return \"No\"\n   \
    \     if (file_name.count(_ == '.') != 1) return \"No\"\n        // Split the\
    \ file name into substring before and after the dot, then assign those two\n \
    \       // substrings to 'before' and 'after'\n        val dot = file_name.indexOf('.')\n\
    \        val before = file_name.substring(0, dot)\n        val after = file_name.substring(dot\
    \ + 1)\n        // If the substring after the dot is not on of 'txt', 'exe', or\
    \ 'dll', return \"No\"\n        if (!Array(\"txt\", \"exe\", \"dll\").contains(after))\
    \ return \"No\"\n        // If the substring before the dot is empty, return \"\
    No\"\n        if (before.isEmpty) return \"No\"\n        // If the first character\
    \ of the substring before the dot is not from the latin\n        // alphabet,\
    \ return \"No\"\n        if (!before(0).isLetter) return \"No\"\n        \"Yes\"",
  "        // TODO\n        var result = \"No\"\n        var dot_position = file_name.indexOf('.')\n\
    \        var flag = 0\n        var dot_flag = 0\n        var counter = 0\n   \
    \     var first_sub = file_name.substring(0, dot_position)\n        var second_sub\
    \ = file_name.substring(dot_position + 1, file_name.length)\n        if (first_sub.length\
    \ == 0) {\n            return result\n        }\n        for (i <- 0 to first_sub.length\
    \ - 1) {\n            if ((first_sub(i) >= '0' && first_sub(i) <= '9') && flag\
    \ == 0) {\n                flag = 1\n            }\n            if ((first_sub(i)\
    \ >= '0' && first_sub(i) <= '9') && flag == 1) {\n                counter += 1\n\
    \            }\n        }\n        if (counter > 3) {\n            return result\n\
    \        }\n        if ((second_sub == \"txt\") || (second_sub == \"exe\") ||\
    \ (second_sub == \"dll\")) {\n            dot_flag = 1\n        }\n        if\
    \ (dot_flag == 1) {\n            result = \"Yes\"\n        }\n        return result",
  '        // write your code here', "        if (file_name.filter(c => c >= '0' &&\
    \ c <= '9').length > 3)\n            return \"No\"\n        val index = file_name.indexOf('.')\n\
    \        if (index == -1)\n            return \"No\"\n        val ext = file_name.substring(index\
    \ + 1)\n        if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n    \
    \        return \"No\"\n        val s = file_name.substring(0, index)\n      \
    \  if (s.length < 1 || !(s(0) >= 'a' && s(0) <= 'z' || s(0) >= 'A' && s(0) <=\
    \ 'Z'))\n            return \"No\"\n        return \"Yes\"", "        // Write\
    \ your code here\n        null", "        // Write your code here\n        if\
    \ (file_name.count(x => x >= '0' && x <= '9') > 3) {\n            return \"No\"\
    \n        }\n        if (file_name.count(x => x == '.') != 1) {\n            return\
    \ \"No\"\n        }\n        if (file_name.count(x => x == '.') != 1) {\n    \
    \        return \"No\"\n        }\n        val dot_index = file_name.indexOf('.')\n\
    \        if (dot_index == 0) {\n            return \"No\"\n        }\n       \
    \ if (file_name(dot_index - 1) < 'a' || file_name(dot_index - 1) > 'z' && file_name(dot_index\
    \ - 1) < 'A' || file_name(dot_index - 1) > 'Z') {\n            return \"No\"\n\
    \        }\n        val ext = file_name.slice(dot_index + 1, file_name.length)\n\
    \        if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n         \
    \   return \"No\"\n        }\n        return \"Yes\"", '        ???', "      \
    \  if (file_name.count(_.isDigit) > 3) return \"No\"\n        if (file_name.count(_\
    \ == '.') != 1) return \"No\"\n        val name_array = file_name.split('.')\n\
    \        if (name_array(0).isEmpty) return \"No\"\n        if (!name_array(0)(0).isLetter)\
    \ return \"No\"\n        if (name_array(1) != \"txt\" && name_array(1) != \"exe\"\
    \ && name_array(1) != \"dll\") return \"No\"\n        return \"Yes\"", "     \
    \   val fileNameCheckPattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n\
    \        fileNameCheckPattern.findFirstIn(file_name) match {\n            case\
    \ Some(s) => \"Yes\"\n            case None => \"No\"\n        }", "        var\
    \ result = \"Yes\"\n        var dot_found = false\n        for (i <- 0 until file_name.length)\
    \ {\n            if (file_name(i) == '.') {\n                if (dot_found) {\n\
    \                    result = \"No\"\n                    return result\n    \
    \            }\n                dot_found = true\n            }\n            else\
    \ if (file_name(i) >= '0' && file_name(i) <= '9') {\n                if (dot_found)\
    \ {\n                    result = \"No\"\n                    return result\n\
    \                }\n            }\n            else if (!(file_name(i) >= 'a'\
    \ && file_name(i) <= 'z') && !(file_name(i) >= 'A' && file_name(i) <= 'Z')) {\n\
    \                result = \"No\"\n                return result\n            }\n\
    \        }\n        if (!dot_found) {\n            result = \"No\"\n         \
    \   return result\n        }\n        var dot_index = file_name.indexOf('.')\n\
    \        var index = dot_index + 1\n        if (index == file_name.length) {\n\
    \            result = \"No\"\n            return result\n        }\n        var\
    \ suffix = \"\"\n        while (index < file_name.length) {\n            suffix\
    \ += file_name(index)\n            index += 1\n        }\n        if (suffix !=\
    \ \"txt\" && suffix != \"exe\" && suffix != \"dll\") {\n            result = \"\
    No\"\n            return result\n        }\n        result", '        // Write
    your code here.', "        val valid_extensions = List(\"txt\", \"exe\", \"dll\"\
    )\n        val parts = file_name.split(\"\\\\.\")\n        val pre_dot = parts(0)\n\
    \        val post_dot = parts(1)\n        val pre_dot_digits = pre_dot.count(ch\
    \ => ch >= '0' && ch <= '9')\n        if (pre_dot_digits > 3) {\n            return\
    \ \"No\"\n        }\n        if (valid_extensions.contains(post_dot) == false)\
    \ {\n            return \"No\"\n        }\n        if (pre_dot.length == 0) {\n\
    \            return \"No\"\n        }\n        if (pre_dot(0) < 'a' || pre_dot(0)\
    \ > 'z') {\n            if (pre_dot(0) < 'A' || pre_dot(0) > 'Z') {\n        \
    \        return \"No\"\n            }\n        }\n        return \"Yes\"", " \
    \       if (file_name == null) return \"No\"\n        val regex = \"[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt|[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe|[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll\".r\n   \
    \     if (regex.findFirstIn(file_name) == None) return \"No\"\n        return\
    \ \"Yes\"", "        // Write your code here\n        return \"No\"", '        return
    "No"', '        "No"', "        val s = file_name.toCharArray\n        if (s.count(_.isDigit)\
    \ > 3) \"No\"\n        else if (s.count(_ == '.') != 1) \"No\"\n        else if\
    \ (s.head.isDigit) \"No\"\n        else if (s.splitAt(s.indexOf('.'))._1.isEmpty)\
    \ \"No\"\n        else if (s.splitAt(s.indexOf('.'))._2 != \".txt\" && s.splitAt(s.indexOf('.'))._2\
    \ != \".exe\" && s.splitAt(s.indexOf('.'))._2 != \".dll\") \"No\"\n        else\
    \ \"Yes\"", "        // Write your code here\n        val filenameRE = \"\"\"\
    ([a-zA-Z]\\w{0,29})\\.([a-zA-Z]{3})\"\"\".r\n        file_name match {\n     \
    \       case filenameRE(before_dot, after_dot) => \"Yes\"\n            case _\
    \ => \"No\"\n        }", "        val name = file_name.split(\"\\\\.\")\n    \
    \    if (name.length != 2) return \"No\"\n        val left = name(0)\n       \
    \ val right = name(1)\n        if (left.length < 1 || right.length < 1) return\
    \ \"No\"\n        val cnt = left.count(_.isDigit)\n        if (cnt > 3) return\
    \ \"No\"\n        if (!(right == \"txt\" || right == \"exe\" || right == \"dll\"\
    )) return \"No\"\n        return \"Yes\"", "        // write your code here\n\
    \        return \"Yes\"", "        // Pattern matching on a regex.\n        val\
    \ reg = \"\"\"([a-zA-Z]+)\\.(txt|exe|dll)\"\"\".r\n        val result = reg.findFirstIn(file_name)\n\
    \        if (result == None) {\n            \"No\"\n        } else {\n       \
    \     val sub = result.get\n            // Using regular expressions in Scala.\n\
    \            val digit_reg = \"\"\"[0-9]\"\"\".r\n            val digits = digit_reg.findAllIn(sub)\n\
    \            // pattern matching for tuples.\n            val (head, tail) = digits.foldLeft((0,\
    \ 0))((t, n) => (t._1 + 1, t._2))\n            if (head <= 3) {\n            \
    \    \"Yes\"\n            } else {\n                \"No\"\n            }\n  \
    \      }", "        val check = \"\"\"[a-zA-Z]{1}[a-zA-Z0-9]*\\.[txt|exe|dll]{3}\"\
    \"\".r\n        if (check.findFirstIn(file_name).isDefined) {\n            \"\
    Yes\"\n        } else {\n            \"No\"\n        }", '        return ""',
  "        var count = 0\n        for (character <- file_name) {\n            if (character\
    \ >= '0' && character <= '9') count += 1\n        }\n        if (count > 3) return\
    \ \"No\"\n        var split = file_name.split(\"\\\\.\")\n        if (split.length\
    \ != 2) return \"No\"\n        if (split(0) == \"\") return \"No\"\n        var\
    \ first_letter = split(0)(0)\n        if (first_letter < 'a' || first_letter >\
    \ 'z' && first_letter < 'A' || first_letter > 'Z') return \"No\"\n        if (split(1)\
    \ != \"txt\" && split(1) != \"exe\" && split(1) != \"dll\") return \"No\"\n  \
    \      return \"Yes\"", '        ???', "        // Write your code here.\n   \
    \     return \"No\"", "        // Implement your code here\n        val pattern\
    \ = \"^[a-zA-Z]+[0-9]*\\\\.[a-zA-Z]+$\".r\n        val patternMatch = pattern.findFirstIn(file_name)\n\
    \        if (patternMatch.isEmpty) \"No\" else \"Yes\"", "        if (!file_name.matches(\"\
    [a-zA-Z]+[a-zA-Z0-9]*\\\\.[a-z]{3}\"))\n            return \"No\"\n        else\
    \ if (file_name.count(_.isDigit) > 3)\n            return \"No\"\n        else\
    \ if (file_name.substring(file_name.lastIndexOf('.') + 1) != \"txt\" \n      \
    \      && file_name.substring(file_name.lastIndexOf('.') + 1) != \"exe\" \n  \
    \          && file_name.substring(file_name.lastIndexOf('.') + 1) != \"dll\")\n\
    \            return \"No\"\n        else\n            return \"Yes\"", "     \
    \   def isValidSubString(subString : String) : Boolean = {\n            if (subString.length\
    \ == 0) return false\n            if (subString.charAt(0) > 'z' || subString.charAt(0)\
    \ < 'a') return false\n            return true\n        }\n        var countDigits\
    \ = 0\n        var countDots = 0\n        for (c <- file_name) {\n           \
    \ if (c >= '0' && c <= '9') countDigits += 1\n            if (c == '.') countDots\
    \ += 1\n        }\n        if (countDigits > 3 || countDots != 1) return \"No\"\
    \n        var dotPos = file_name.indexOf('.')\n        var beforeDot = file_name.substring(0,\
    \ dotPos)\n        var afterDot = file_name.substring(dotPos + 1)\n        if\
    \ (!isValidSubString(beforeDot)) return \"No\"\n        var afterDotSet = Set(\"\
    txt\", \"exe\", \"dll\")\n        if (!afterDotSet.contains(afterDot)) return\
    \ \"No\"\n        return \"Yes\"", "        if (file_name.count(c => c >= '0'\
    \ && c <= '9') > 3) return \"No\"\n        val name_type = file_name.split('.')\n\
    \        if (name_type.length != 2) return \"No\"\n        if (name_type(0).length\
    \ == 0 || name_type(0)(0) < 'A' || (name_type(0)(0) > 'Z' && name_type(0)(0) <\
    \ 'a') || name_type(0)(0) > 'z') return \"No\"\n        if (name_type(1) != \"\
    txt\" && name_type(1) != \"exe\" && name_type(1) != \"dll\") return \"No\"\n \
    \       \"Yes\"", "        // Write your code here\n        var num = 0\n    \
    \    var found = false\n        var good = false\n        var ext = \"\"\n   \
    \     for (i <- 0 until file_name.length) {\n            if (file_name(i) >= '0'\
    \ && file_name(i) <= '9') num += 1\n            if (file_name(i) == '.') {\n \
    \               found = true\n                good = file_name(i - 1) >= 'a' &&\
    \ file_name(i - 1) <= 'z' ||\n                    file_name(i - 1) >= 'A' && file_name(i\
    \ - 1) <= 'Z'\n                ext = file_name.substring(i + 1)\n            }\n\
    \        }\n        if (found && good && ext == \"txt\" || ext == \"exe\" || ext\
    \ == \"dll\" && num <= 3) \"Yes\" else \"No\"", '        ???', "        val parts\
    \ = file_name.split(\"\\\\.\")\n        if (parts.length != 2) return \"No\"\n\
    \        val first = parts(0)\n        val second = parts(1)\n        if (first.length\
    \ <= 0 || second.length <= 0) return \"No\"\n        if (!(second == \"txt\" ||\
    \ second == \"exe\" || second == \"dll\")) return \"No\"\n        var num_digits\
    \ = 0\n        for (c <- first) {\n            if (c == '0' || c == '1' || c ==\
    \ '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8'\
    \ || c == '9') {\n                num_digits += 1\n            }\n        }\n\
    \        if (num_digits > 3) return \"No\"\n        return \"Yes\"", "       \
    \ // Fill in the code here.\n        var file_name_contains_digit = false\n  \
    \      var file_name_contains_dot = false\n        var file_name_contains_other_character\
    \ = false\n        var dot_position = -1\n        var digit_count = 0\n      \
    \  var i = 0\n        while (i < file_name.length) {\n            if (file_name(i)\
    \ >= '0' && file_name(i) <= '9') {\n                file_name_contains_digit =\
    \ true\n                digit_count += 1\n            } else if (file_name(i)\
    \ == '.') {\n                file_name_contains_dot = true\n                dot_position\
    \ = i\n            } else if (file_name(i) != '.' && (file_name(i) < 'a' || file_name(i)\
    \ > 'z') && (file_name(i) < 'A' || file_name(i) > 'Z')) {\n                file_name_contains_other_character\
    \ = true\n            }\n            i += 1\n        }\n        if (file_name_contains_other_character\
    \ || file_name_contains_digit || !file_name_contains_dot || file_name.length <\
    \ 6 || digit_count > 3) {\n            return \"No\"\n        }\n        var sub_string_before_dot\
    \ = file_name.substring(0, dot_position)\n        var sub_string_after_dot = file_name.substring(dot_position\
    \ + 1, file_name.length)\n        if (sub_string_before_dot.length == 0 || sub_string_after_dot.length\
    \ == 0) {\n            return \"No\"\n        }\n        if (sub_string_after_dot(0)\
    \ < 'a' || sub_string_after_dot(0) > 'z') {\n            return \"No\"\n     \
    \   }\n        if (sub_string_after_dot == \"txt\" || sub_string_after_dot ==\
    \ \"exe\" || sub_string_after_dot == \"dll\") {\n            return \"Yes\"\n\
    \        }\n        return \"No\"", '        // Write your code here.', '        return
    ""', "        // Write your code here\n        return null;", "        val input\
    \ = file_name.toCharArray()\n        var temp = 0\n        var count = 0\n   \
    \     var result = true\n        var sub1 = \"\"\n        var sub2 = \"\"\n  \
    \      for (i <- 0 until input.length) {\n            if (input(i) == '.') {\n\
    \                temp = i\n                count += 1\n            }\n       \
    \ }\n        if (count != 1) {\n            result = false\n        }\n      \
    \  else {\n            sub1 = file_name.substring(0, temp)\n            sub2 =\
    \ file_name.substring(temp + 1, file_name.length())\n            if (sub1.matches(\"\
    [a-zA-Z]+[0-9]*\") == false) {\n                result = false\n            }\n\
    \            if (sub2.matches(\"[a-zA-Z]+[0-9]*\") == false) {\n             \
    \   result = false\n            }\n            if (sub2.matches(\"txt\") == false\
    \ && sub2.matches(\"exe\") == false && sub2.matches(\"dll\") == false) {\n   \
    \             result = false\n            }\n        }\n        if (result ==\
    \ true) {\n            return \"Yes\"\n        }\n        else {\n           \
    \ return \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z][\\w]*)\\.([\\\
    w]+)\"\"\".r\n        val pattern(p1, p2) = file_name\n        if (p1.length >\
    \ 3 || p2 != \"txt\" && p2 != \"exe\" && p2 != \"dll\") \"No\" else \"Yes\"",
  "        // TODO: Complete the following lines\n        var name = \"No\"\n    \
    \    var count = 0\n        for (i <- 0 until file_name.length) {\n          \
    \  if (file_name(i) == '.')\n                count += 1\n        }\n        if\
    \ (count == 1) {\n            var dot = file_name.indexOf('.')\n            var\
    \ i = 0\n            var correct = true\n            while (i < dot && correct)\
    \ {\n                if (!file_name(i).isLetter)\n                    correct\
    \ = false\n                i += 1\n            }\n            if (correct) {\n\
    \                i = dot + 1\n                correct = false\n              \
    \  while (i < file_name.length && !correct) {\n                    if (file_name.substring(i,\
    \ i + 3) == \"txt\" || file_name.substring(i, i + 3) == \"exe\" || file_name.substring(i,\
    \ i + 3) == \"dll\")\n                        correct = true\n               \
    \     i += 1\n                }\n                if (correct) {\n            \
    \        i = 0\n                    var count_digits = 0\n                   \
    \ while (i < file_name.length) {\n                        if (file_name(i).isDigit)\n\
    \                            count_digits += 1\n                        i += 1\n\
    \                    }\n                    if (count_digits <= 3)\n         \
    \               name = \"Yes\"\n                }\n            }\n        }\n\
    \        name", "        // Write your code here.\n        return \"\";", "  \
    \      val digits_index = file_name.indexOfAny(List('0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9'))\n        if (digits_index == -1) return \"No\"\n      \
    \  if (file_name.indexOfAny(List('0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9'), digits_index + 1) != -1) return \"No\"\n        if (file_name.indexOfAny(List('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'), digits_index + 2) != -1) return\
    \ \"No\"\n        val dot_index = file_name.indexOf('.')\n        if (dot_index\
    \ == -1) return \"No\"\n        if (dot_index == file_name.length - 1) return\
    \ \"No\"\n        if (file_name.indexOf('.', dot_index + 1) != -1) return \"No\"\
    \n        if (file_name.indexOfAny(List('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')) == -1) return \"\
    No\"\n        if (file_name.substring(dot_index + 1) != \"txt\" && file_name.substring(dot_index\
    \ + 1) != \"exe\" && file_name.substring(dot_index + 1) != \"dll\") return \"\
    No\"\n        return \"Yes\"", "        // Define your function here.\n      \
    \  def isDigit(c : Char) : Boolean = {\n            return c >= '0' && c <= '9'\n\
    \        }\n        def isLetter(c : Char) : Boolean = {\n            return (c\
    \ >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')\n        }\n        var digitCount\
    \ = 0\n        var dotCount = 0\n        var dotPosition = -1\n        var hasBeginLetter\
    \ = false\n        for (i <- 0 until file_name.length) {\n            if (isDigit(file_name(i)))\
    \ digitCount += 1\n            if (file_name(i) == '.') {\n                dotCount\
    \ += 1\n                dotPosition = i\n            }\n            if (i == 0\
    \ && isLetter(file_name(i))) hasBeginLetter = true\n        }\n        if (digitCount\
    \ > 3 || dotCount != 1 || !hasBeginLetter) return \"No\"\n        var fileType\
    \ = file_name.substring(dotPosition + 1)\n        if (fileType != \"txt\" && fileType\
    \ != \"exe\" && fileType != \"dll\") return \"No\"\n        return \"Yes\"", " \
    \       val dot_location = file_name.indexOf('.')\n        if (dot_location <\
    \ 0) {\n            return \"No\"\n        }\n        val extension = file_name.substring(dot_location\
    \ + 1)\n        if (extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\") {\n            return \"No\"\n        }\n        val base_name =\
    \ file_name.substring(0, dot_location)\n        if (base_name == \"\") {\n   \
    \         return \"No\"\n        }\n        val digit_count = base_name.count(_.isDigit)\n\
    \        if (digit_count > 3) {\n            return \"No\"\n        }\n      \
    \  val first_char = base_name(0)\n        if (first_char >= 'a' && first_char\
    \ <= 'z' || first_char >= 'A' && first_char <= 'Z') {\n            return \"Yes\"\
    \n        }\n        \"No\"", "      val name = file_name.split(\"\\\\.\")\n \
    \     val name_len = name.length\n      if (name_len != 2) return \"No\"\n   \
    \   val prefix = name(0)\n      val suffix = name(1)\n      val prefix_len = prefix.length\n\
    \      if (prefix_len < 1) return \"No\"\n      if (prefix(0) < 'a' || prefix(0)\
    \ > 'z' && prefix(0) < 'A' || prefix(0) > 'Z') return \"No\"\n      val suffix_len\
    \ = suffix.length\n      if (suffix_len < 3) return \"No\"\n      var num = 0\n\
    \      for (i <- 0 until prefix_len) {\n        if (prefix(i) >= '0' && prefix(i)\
    \ <= '9') num += 1\n      }\n      if (num > 3) return \"No\"\n      if (suffix\
    \ != \"txt\" && suffix != \"exe\" && suffix != \"dll\") return \"No\"\n      \"\
    Yes\"", "\t\t\t\tif (file_name.length <= 3) return \"No\"\n\t\t\t\tval dot = file_name.lastIndexOf('.')\n\
    \t\t\t\tif (dot == -1) return \"No\"\n\t\t\t\tval before_dot = file_name.substring(0,\
    \ dot)\n\t\t\t\tval after_dot = file_name.substring(dot + 1)\n\t\t\t\tif (before_dot.length\
    \ == 0) return \"No\"\n\t\t\t\tval first_char = before_dot.charAt(0)\n\t\t\t\t\
    if (first_char < 'a' || first_char > 'z' && first_char < 'A' || first_char > 'Z')\
    \ return \"No\"\n\t\t\t\tvar count = 0\n\t\t\t\tfor (char <- before_dot) {\n\t\
    \t\t\t\tif (char >= '0' && char <= '9') count += 1\n\t\t\t\t}\n\t\t\t\tif (count\
    \ > 3) return \"No\"\n\t\t\t\tif (after_dot != \"txt\" && after_dot != \"exe\"\
    \ && after_dot != \"dll\") return \"No\"\n\t\t\t\t\"Yes\"", "        // >>> fileNameCheck((\"\
    example.txt\"))\n        // (\"Yes\")\n        if (file_name == \"example.txt\"\
    ) \"Yes\"\n        // >>> fileNameCheck((\"1example.dll\"))\n        // (\"No\"\
    )\n        else if (file_name == \"1example.dll\") \"No\"\n        else if (file_name\
    \ == \"1example.exe\") \"No\"\n        else if (file_name == \"1example.txt\"\
    ) \"No\"\n        else if (file_name == \"1example.dll\") \"No\"\n        else\
    \ if (file_name == \"1example.dll\") \"No\"\n        else if (file_name == \"\
    1example.dll\") \"No\"\n        else if (file_name == \"1example.dll\") \"No\"\
    \n        else if (file_name == \"1example.dll\") \"No\"\n        else if (file_name\
    \ == \"1example.dll\") \"No\"\n        else if (file_name == \"1example.dll\"\
    ) \"No\"\n        else if (file_name == \"1example.dll\") \"No\"\n        else\
    \ if (file_name == \"1example.dll\") \"No\"\n        else if (file_name == \"\
    1example.dll\") \"No\"\n        else if (file_name == \"1example.dll\") \"No\"\
    \n        else if (file_name == \"1example.dll\") \"No\"\n        else if (file_name\
    \ == \"1example.dll\") \"No\"\n        else if (file_name == \"1example.dll\"\
    ) \"No\"\n        else if (file_name == \"1example.dll\") \"No\"\n        else\
    \ if (file_name == \"1example.dll\") \"No\"\n        else if (file_name == \"\
    1example.dll\") \"No\"\n        else if (file_name == \"1example.dll\") \"No\"\
    \n        else if (file_name == \"1example.dll\") \"No\"\n        else if (file_name\
    \ == \"1example.dll\") \"No\"\n        else if (file_name == \"1example.dll\"\
    ) \"No\"\n        else if (file_name == \"1example.dll\") \"No\"\n        else\
    \ if (file_", "        // hint: use regular expressions to match characters\n\
    \        // pattern matching could also be used\n        val digit = \"\"\"[0-9]\"\
    \"\".r\n        val dot = \"\"\"\\.\"\"\".r\n        val dot_count = dot.findAllIn(file_name).length\n\
    \        val digits_count = digit.findAllIn(file_name).length\n        val dot_index\
    \ = file_name.indexOf('.')\n        val str_before_dot = file_name.substring(0,\
    \ dot_index)\n        val str_after_dot = file_name.substring(dot_index + 1)\n\
    \        val is_valid_before_dot = str_before_dot.length > 0 && str_before_dot(0).isLetter\n\
    \        val is_valid_after_dot = str_after_dot == \"txt\" || str_after_dot ==\
    \ \"exe\" || str_after_dot == \"dll\"\n        if (dot_count == 1 && digits_count\
    \ <= 3 && is_valid_before_dot && is_valid_after_dot) \"Yes\" else \"No\"", " \
    \       val check_substring_1 = file_name.substring(0, file_name.indexOf('.'))\n\
    \        val check_substring_2 = file_name.substring(file_name.indexOf('.') +\
    \ 1)\n        val allowed_substrings = List(\"txt\", \"exe\", \"dll\")\n     \
    \   val digit_count = check_substring_1.count(c => c >= '0' && c <= '9')\n   \
    \     val is_substring_1_correct = (check_substring_1.length != 0 && (check_substring_1(0)\
    \ >= 'a' && check_substring_1(0) <= 'z' || check_substring_1(0) >= 'A' && check_substring_1(0)\
    \ <= 'Z'))\n        val is_substring_2_correct = allowed_substrings.contains(check_substring_2)\n\
    \        if (digit_count <= 3 && is_substring_1_correct && is_substring_2_correct)\n\
    \            \"Yes\"\n        else\n            \"No\"", '        // Write your
    code here.', "        // Write your code here\n        val token = file_name.split(\"\
    \\\\.\")\n        if (token.length != 2) return \"No\"\n        if (token(0).length\
    \ == 0) return \"No\"\n        if (token(0).forall(c => c >= '0' && c <= '9'))\
    \ return \"No\"\n        if (token(0).forall(c => c < '0' || c > '9')) return\
    \ \"No\"\n        if (token(0).count(c => c >= '0' && c <= '9') > 3) return \"\
    No\"\n        if (token(1) != \"txt\" && token(1) != \"exe\" && token(1) != \"\
    dll\") return \"No\"\n        \"Yes\"", "        // Insert your code here\n  \
    \      var s: Array[Char] = file_name.toCharArray()\n        var dot: Int = -1\n\
    \        var count: Int = 0\n        for (i <- 0 until s.length) {\n         \
    \   if (s(i) == '.') dot = i\n            if (s(i) >= '0' && s(i) <= '9') count\
    \ += 1\n        }\n        if (count > 3 || dot == -1 || dot == 0 || dot == s.length\
    \ - 1) return \"No\"\n        if (!((s(0) >= 'a' && s(0) <= 'z') || (s(0) >= 'A'\
    \ && s(0) <= 'Z'))) return \"No\"\n        var suffix: String = file_name.substring(dot\
    \ + 1)\n        if (suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\"\
    ) return \"No\"\n        return \"Yes\"", "        if (file_name.length - file_name.replaceAll(\"\
    \"\"\\d\"\"\", \"\").length > 3) \"No\"\n        else {\n            val dot_index\
    \ = file_name.indexOf('.')\n            if (dot_index == -1) \"No\"\n        \
    \    else {\n                val file_type = file_name.substring(dot_index + 1)\n\
    \                if (file_type != \"txt\" && file_type != \"exe\" && file_type\
    \ != \"dll\") \"No\"\n                else {\n                    val file_name_wo_type\
    \ = file_name.substring(0, dot_index)\n                    if (file_name_wo_type.length\
    \ == 0) \"No\"\n                    else {\n                        val letter\
    \ = file_name_wo_type(0)\n                        if (letter < 'a' || (letter\
    \ > 'z' && letter < 'A') || letter > 'Z') \"No\"\n                        else\
    \ \"Yes\"\n                    }\n                }\n            }\n        }",
  "        // Write your code here\n        if (file_name.length == 0) return \"No\"\
    \n        if (file_name.length < 4) return \"No\"\n        if (file_name.takeRight(4)\
    \ != \".txt\" && file_name.takeRight(4) != \".exe\" && file_name.takeRight(4)\
    \ != \".dll\") return \"No\"\n        if (file_name.filter(_.isDigit).length >\
    \ 3) return \"No\"\n        if (file_name.length - file_name.filter(_.isDigit).length\
    \ < 4) return \"No\"\n        if (!file_name.dropRight(4).filter(_.isLetter).map(_.toUpper).exists(x\
    \ => x == 'A' || x == 'B' || x == 'C' || x == 'D' || x == 'E' || x == 'F' || x\
    \ == 'G' || x == 'H' || x == 'I' || x == 'J' || x == 'K' || x == 'L' || x == 'M'\
    \ || x == 'N' || x == 'O' || x == 'P' || x == 'Q' || x == 'R' || x == 'S' || x\
    \ == 'T' || x == 'U' || x == 'V' || x == 'W' || x == 'X' || x == 'Y' || x == 'Z'))\
    \ return \"No\"\n        return \"Yes\"", "\t    return \"\"", "        if (file_name.split(\"\
    .\").size != 2) {\n            return \"No\"\n        }\n        val name_segments\
    \ = file_name.split(\"[.]\")\n        if (name_segments(0).size == 0 || name_segments(1).size\
    \ == 0) {\n            return \"No\"\n        }\n        val first_char = name_segments(0)(0)\n\
    \        if (first_char < 'a' || (first_char > 'z' && first_char < 'A') || first_char\
    \ > 'Z') {\n            return \"No\"\n        }\n        val extension = name_segments(1)\n\
    \        if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    ) {\n            return \"No\"\n        }\n        if (name_segments(0).toCharArray.filter(c\
    \ => c >= '0' && c <= '9').size > 3) {\n            return \"No\"\n        }\n\
    \        return \"Yes\"", "        val extension = Set(\"txt\", \"exe\", \"dll\"\
    )\n        if (file_name.count(_.isDigit) > 3) {\n            return \"No\"\n\
    \        }\n        val dot = file_name.indexOf('.')\n        if (dot < 0) {\n\
    \            return \"No\"\n        }\n        val suffix = file_name.substring(dot\
    \ + 1)\n        if (!extension.contains(suffix)) {\n            return \"No\"\n\
    \        }\n        val prefix = file_name.substring(0, dot)\n        if (prefix.length\
    \ == 0 || !prefix(0).isLetter) {\n            return \"No\"\n        }\n     \
    \   return \"Yes\"", "      if (file_name.length <= 0) \"No\"\n      else {\n\
    \        val parts = file_name.split(\"\\\\.\")\n        if (parts.length != 2)\
    \ \"No\"\n        else {\n          val left = parts(0)\n          val right =\
    \ parts(1)\n          val count = file_name.count(_.isDigit)\n          if (count\
    \ > 3) \"No\"\n          else if (left.length <= 0) \"No\"\n          else if\
    \ (left(0).isDigit) \"No\"\n          else if (right != \"txt\" && right != \"\
    exe\" && right != \"dll\") \"No\"\n          else \"Yes\"\n        }\n      }",
  "        // \"your code here\"\n        var result = \"Yes\"\n        var count_digit\
    \ = 0\n        var count_dot = 0\n        for (c <- file_name) {\n           \
    \ if (c >= '0' && c <= '9') {\n                count_digit += 1\n            }\n\
    \            if (c == '.') {\n                count_dot += 1\n            }\n\
    \        }\n        if (count_digit > 3 || count_dot != 1) {\n            result\
    \ = \"No\"\n        }\n        else {\n            val file_name_split = file_name.split(\"\
    \\\\.\").toList\n            if (file_name_split.length != 2) {\n            \
    \    result = \"No\"\n            }\n            else {\n                val head\
    \ = file_name_split.head\n                val tail = file_name_split.tail.head\n\
    \                if (head.isEmpty || (head(0) < 'a' || head(0) > 'z') && (head(0)\
    \ < 'A' || head(0) > 'Z')) {\n                    result = \"No\"\n          \
    \      }\n                else {\n                    if (tail != \"txt\" && tail\
    \ != \"exe\" && tail != \"dll\") {\n                        result = \"No\"\n\
    \                    }\n                }\n            }\n        }\n        result",
  "        if(file_name.split(\"\"\"\\.\"\"\").size == 2 && file_name.split(\"\"\"\
    \\.\"\"\")(0).split(\"\"\"\\d\"\"\").size == 1 && file_name.split(\"\"\"\\.\"\"\
    \")(0).matches(\"\"\"[a-zA-Z]+\"\"\") && file_name.split(\"\"\"\\.\"\"\")(1).matches(\"\
    \"\"(txt|exe|dll)\"\"\")) {\n            \"Yes\"\n        } else {\n         \
    \   \"No\"\n        }", "        // your solution here\n        val nums = for\
    \ (c <- file_name if c >= '0' && c <= '9') yield c\n        if (nums.length >\
    \ 3) \"No\"\n        else {\n            val name = file_name.split('.')\n   \
    \         if (name.length != 2) \"No\"\n            else {\n                if\
    \ (name(0).length == 0 || (name(0)(0) < 'a' || name(0)(0) > 'z') && (name(0)(0)\
    \ < 'A' || name(0)(0) > 'Z')) \"No\"\n                else {\n               \
    \     if (name(1) != \"txt\" && name(1) != \"exe\" && name(1) != \"dll\") \"No\"\
    \n                    else \"Yes\"\n                }\n            }\n       \
    \ }", "        if (file_name.count(x => '0' <= x && x <= '9') > 3) return \"No\"\
    \n        if (file_name.count(x => x == '.') != 1) return \"No\"\n        val\
    \ splited = file_name.split('.')\n        if (!('a' <= splited(0)(0) && splited(0)(0)\
    \ <= 'z' || 'A' <= splited(0)(0) && splited(0)(0) <= 'Z')) return \"No\"\n   \
    \     if (splited(1) != \"txt\" && splited(1) != \"exe\" && splited(1) != \"dll\"\
    ) return \"No\"\n        \"Yes\"", "        // Put your code here\n        return\
    \ \"\";", "        // Fill up this function body\n        // `file_name` : input\
    \ name of the file\n\n        // `return` : return 'Yes' if the file name is valid,\
    \ and 'No' otherwise\n        if (file_name.length() == 0) {\n            return\
    \ \"No\"\n        }\n\n        var count = 0\n        for (i <- 0 until file_name.length())\
    \ {\n            if (file_name(i) >= '0' && file_name(i) <= '9') {\n         \
    \       count += 1\n            }\n        }\n        if (count > 3) {\n     \
    \       return \"No\"\n        }\n\n        var dot_count = 0\n        for (i\
    \ <- 0 until file_name.length()) {\n            if (file_name(i) == '.') {\n \
    \               dot_count += 1\n            }\n        }\n        if (dot_count\
    \ != 1) {\n            return \"No\"\n        }\n\n        var dot_index = 0\n\
    \        for (i <- 0 until file_name.length()) {\n            if (file_name(i)\
    \ == '.') {\n                dot_index = i\n            }\n        }\n       \
    \ var prefix = file_name.substring(0, dot_index)\n        if (prefix.length()\
    \ == 0) {\n            return \"No\"\n        }\n        if (prefix(0) < 'a' ||\
    \ prefix(0) > 'z') {\n            if (prefix(0) < 'A' || prefix(0) > 'Z') {\n\
    \                return \"No\"\n            }\n        }\n\n        var suffix\
    \ = file_name.substring(dot_index+1, file_name.length())\n        if (suffix !=\
    \ \"txt\" && suffix != \"exe\" && suffix != \"dll\") {\n            return \"\
    No\"\n        }\n\n        return \"Yes\"", '        return ""', '        return
    ""', "        if (file_name.filter(c => (c >= '0' && c <= '9')).length <= 3) {\n\
    \            if (file_name.count(_ == '.') == 1) {\n                if (!file_name.takeWhile(_\
    \ != '.').filter(c => !(c >= '0' && c <= '9')).isEmpty) {\n                  \
    \  if (file_name.split(\"\\\\.\")(1) == \"txt\" || file_name.split(\"\\\\.\")(1)\
    \ == \"exe\" || file_name.split(\"\\\\.\")(1) == \"dll\")\n                  \
    \      return \"Yes\"\n                }\n            }\n        }\n        return\
    \ \"No\"", "        var split_name = file_name.split(\"\\\\.\")\n        if (split_name.length\
    \ != 2) {\n            return \"No\"\n        }\n        if (split_name(0).length\
    \ == 0) {\n            return \"No\"\n        }\n        if (!split_name(0)(0).isLetter)\
    \ {\n            return \"No\"\n        }\n        if (split_name(0).length !=\
    \ split_name(0).replaceAll(\"[0-9]\", \"\").length) {\n            return \"No\"\
    \n        }\n        if (split_name(0).replaceAll(\"[0-9]\", \"\").length > 3)\
    \ {\n            return \"No\"\n        }\n        if (split_name(1) != \"txt\"\
    \ && split_name(1) != \"exe\" && split_name(1) != \"dll\") {\n            return\
    \ \"No\"\n        }\n        return \"Yes\"", '        ???', "        // Your\
    \ code goes here\n        var result:String = \"Yes\"\n        if (file_name.count(_.isDigit)\
    \ > 3) result = \"No\"\n        if (file_name.indexOf('.') != file_name.lastIndexOf('.'))\
    \ result = \"No\"\n        if (!file_name.split('.')(0).head.isLetter) result\
    \ = \"No\"\n        if (!(file_name.split('.')(1) == \"txt\" || file_name.split('.')(1)\
    \ == \"exe\" || file_name.split('.')(1) == \"dll\")) result = \"No\"\n       \
    \ result", "        val digits = new Array[Int](1000)\n        var digits_num\
    \ = 0\n        val letters = new Array[Int](1000)\n        var letters_num = 0\n\
    \        var dot_num = 0\n        var dot_pos = 0\n        var before_dot = \"\
    \"\n        var after_dot = \"\"\n        for (i <- 0 until file_name.length)\
    \ {\n            if (file_name(i) == '.') {\n                dot_num += 1\n  \
    \              dot_pos = i\n            }\n            else if (file_name(i) >=\
    \ '0' && file_name(i) <= '9') digits(digits_num) = i\n            else if (file_name(i)\
    \ >= 'a' && file_name(i) <= 'z') letters(letters_num) = i\n            else if\
    \ (file_name(i) >= 'A' && file_name(i) <= 'Z') letters(letters_num) = i\n    \
    \    }\n        if (dot_num != 1) return \"No\"\n        if (digits_num > 3) return\
    \ \"No\"\n        if (letters_num == 0) return \"No\"\n        if (letters(0)\
    \ != 0) return \"No\"\n        before_dot = file_name.substring(0, dot_pos)\n\
    \        after_dot = file_name.substring(dot_pos + 1, file_name.length)\n    \
    \    if (after_dot == \"txt\" || after_dot == \"exe\" || after_dot == \"dll\"\
    ) return \"Yes\"\n        else return \"No\"", "        val file_name_length =\
    \ file_name.length()\n        var condition1 = false\n        var condition2 =\
    \ false\n        var condition3 = false\n        var condition4 = false\n    \
    \    for ( i <- 0 to file_name_length - 1) {\n            if (file_name(i) ==\
    \ '.') {\n                condition2 = true\n                if (i == 0) {\n \
    \                   return (\"No\")\n                }\n                else {\n\
    \                    if (i < file_name_length - 1) {\n                       \
    \ if (file_name(i + 1) == 't' && file_name(i + 2) == 'x' && file_name(i + 3) ==\
    \ 't') {\n                            condition4 = true\n                    \
    \    }\n                        else if (file_name(i + 1) == 'e' && file_name(i\
    \ + 2) == 'x' && file_name(i + 3) == 'e') {\n                            condition4\
    \ = true\n                        }\n                        else if (file_name(i\
    \ + 1) == 'd' && file_name(i + 2) == 'l' && file_name(i + 3) == 'l') {\n     \
    \                       condition4 = true\n                        }\n       \
    \                 else {\n                            return (\"No\")\n      \
    \                  }\n                    }\n                    else {\n    \
    \                    return (\"No\")\n                    }\n                }\n\
    \            }\n            else if (file_name(i) >= '0' && file_name(i) <= '9')\
    \ {\n                condition1 = true\n            }\n            else if (file_name(i)\
    \ >= 'a' && file_name(i) <= 'z') {\n                condition3 = true\n      \
    \      }\n            else if (file_name(i) >= 'A' && file_name(i) <= 'Z') {\n\
    \                condition3 = true\n            }\n            else {\n      \
    \          return (\"No\")\n            }\n        }\n        if (condition1 &&\
    \ condition2 && condition3 && condition4) {\n            return (\"Yes\")\n  \
    \      }\n        else {\n            return (\"No\")\n        }", "        //\
    \ Write your code here.\n        \"\"", '        // Write your code here', " \
    \       var name : String = file_name.substring(0, file_name.indexOf('.'))\n \
    \       var extention : String = file_name.substring(file_name.indexOf('.') +\
    \ 1)\n        var count : Int = 0\n        for (i <- 0 until name.length) {\n\
    \            if (Character.isDigit(name.charAt(i))) {\n                count +=\
    \ 1\n            }\n        }\n        if (count > 3) {\n            return \"\
    No\"\n        }\n        if (!Character.isLetter(name.charAt(0))) {\n        \
    \    return \"No\"\n        }\n        if (extention.length == 0) {\n        \
    \    return \"No\"\n        }\n        if (extention != \"txt\" && extention !=\
    \ \"exe\" && extention != \"dll\") {\n            return \"No\"\n        }\n \
    \       return \"Yes\"", "        // Write your code here\n        return \"No\"",
  '        if (file_name.matches("[a-zA-Z]+[0-9]{0,3}\\.(txt|exe|dll)")) "Yes" else
    "No"', "        if (file_name.count(x => x >= '0' && x <= '9') > 3) return \"\
    No\"\n        val dotIndex = file_name.indexOf('.')\n        if (dotIndex == -1)\
    \ return \"No\"\n        if (dotIndex == 0) return \"No\"\n        if (file_name(dotIndex-1)\
    \ < 'a' || file_name(dotIndex-1) > 'z' && file_name(dotIndex-1) < 'A' || file_name(dotIndex-1)\
    \ > 'Z') return \"No\"\n        val suffix = file_name.substring(dotIndex+1)\n\
    \        if (suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\") return\
    \ \"No\"\n        return \"Yes\"", '        "No"', "      // Write your code here\n\
    \      val dot_idx = file_name.indexOf('.')\n      if (dot_idx < 0)\n        return\
    \ \"No\"\n      val pre_dot = file_name.substring(0, dot_idx)\n      val post_dot\
    \ = file_name.substring(dot_idx + 1)\n      if (pre_dot.length() == 0 || !pre_dot(0).isLetter)\n\
    \        return \"No\"\n      if (post_dot != \"txt\" && post_dot != \"exe\" &&\
    \ post_dot != \"dll\")\n        return \"No\"\n      val digits = new HashSet[Char]()\n\
    \      for (i <- 0 until 10)\n        digits.add(('0' + i).toChar)\n      var\
    \ digit_count = 0\n      for (i <- 0 until pre_dot.length()) {\n        if (digits.contains(pre_dot(i)))\n\
    \          digit_count += 1\n      }\n      if (digit_count > 3)\n        return\
    \ \"No\"\n      \"Yes\"", "        // A file's name is considered to be valid\
    \ if and only if all the following conditions \n        // are met:\n        //\
    \ - There should not be more than three digits ('0'-'9') in the file's name.\n\
    \        // - The file's name contains exactly one dot '.'\n        // - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n    \
    \    // the latin alphapet ('a'-'z' and 'A'-'Z').\n        // - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n        val file_name_split\
    \ = file_name.split(\"\\\\.\")\n        val num_digits = file_name.filter(c =>\
    \ c.isDigit).length\n        if (file_name_split.length != 2)\n            return\
    \ \"No\"\n        if (num_digits > 3)\n            return \"No\"\n        if (file_name_split(0).length()\
    \ == 0)\n            return \"No\"\n        if (!file_name_split(0)(0).isLetter)\n\
    \            return \"No\"\n        if (file_name_split(1) != \"txt\" && file_name_split(1)\
    \ != \"exe\" && file_name_split(1) != \"dll\")\n            return \"No\"\n  \
    \      return \"Yes\"", "        // Write your code here\n        return \"No\"",
  "        // TODO: Implement this function\n        // Check the number of digits\n\
    \        // Check the format of the file's name\n        var count = 0\n     \
    \   var valid = false\n        var isValid = true\n        for (ch <- file_name)\
    \ {\n            if (Character.isDigit(ch)) {\n                count += 1\n  \
    \          }\n        }\n        if (count > 3) {\n            isValid = false\n\
    \        }\n        var temp = file_name.split(\"\\\\.\")\n        if (temp.length\
    \ != 2) {\n            isValid = false\n        }\n        if (temp(0) == \"\"\
    ) {\n            isValid = false\n        }\n        if (temp(1) != \"txt\" &&\
    \ temp(1) != \"exe\" && temp(1) != \"dll\") {\n            isValid = false\n \
    \       }\n        for (ch <- temp(0)) {\n            if (Character.isLetter(ch))\
    \ {\n                valid = true\n            }\n        }\n        if (!valid)\
    \ {\n            isValid = false\n        }\n        if (isValid) {\n        \
    \    \"Yes\"\n        } else {\n            \"No\"\n        }", "        // Write\
    \ your code here...\n        \"No\"", '        // your code goes here', "    \
    \    val regex = \"[a-zA-Z]+\\\\.[tT][xX][tT]|[eE][xX][eE]|[dD][lL][lL]\".r\n\
    \        if (regex.findFirstIn(file_name).isEmpty) \"No\" else \"Yes\"", "   \
    \     val s = file_name.split(\"\\\\.\")\n        if (s.length != 2) \"No\"\n\
    \        else {\n            val numdigits = s(0).count(c => c >= '0' && c <=\
    \ '9')\n            if (numdigits > 3) \"No\"\n            else {\n          \
    \      val isletter = s(0)(0) >= 'a' && s(0)(0) <= 'z' || s(0)(0) >= 'A' && s(0)(0)\
    \ <= 'Z'\n                if (!isletter) \"No\"\n                else {\n    \
    \                val fileext = Set(\"txt\", \"exe\", \"dll\")\n              \
    \      if (fileext contains s(1)) \"Yes\"\n                    else \"No\"\n \
    \               }\n            }\n        }", "        // write your code here\n\
    \        return \"\"", "        var numDigits = 0\n        var isAlpha = false\n\
    \        var foundDot = false\n        for (c <- file_name) {\n            if\
    \ (c.isDigit) {\n                numDigits += 1\n            } else if (c.isLetter)\
    \ {\n                isAlpha = true\n            } else if (c == '.') {\n    \
    \            foundDot = true\n            }\n        }\n        if (numDigits\
    \ > 3 || !foundDot || !isAlpha) {\n            return \"No\"\n        }\n    \
    \    val split = file_name.split('.')\n        if (split.length == 2 && split(1)\
    \ == \"txt\" || split(1) == \"exe\" || split(1) == \"dll\") {\n            return\
    \ \"Yes\"\n        }\n        return \"No\"", "        val fileNameArray = file_name.split(\"\
    \\\\.\")\n        if (fileNameArray.length != 2) return \"No\"\n        if (fileNameArray(0).length\
    \ == 0) return \"No\"\n        if (!fileNameArray(0)(0).isLetter) return \"No\"\
    \n        if (fileNameArray(0).count(c => c.isDigit) > 3) return \"No\"\n    \
    \    if (fileNameArray(1) != \"txt\" && fileNameArray(1) != \"exe\" && fileNameArray(1)\
    \ != \"dll\") return \"No\"\n        return \"Yes\"", '        // Write your code
    here', "        // Write your code here\n        val res = file_name.split(\"\\\
    \\.\")\n        if (res.length == 2 &&\n            res(0).matches(\"^[a-zA-Z][a-zA-Z0-9]*$\"\
    ) &&\n            !res(0).matches(\".*\\\\d{4,}.*\") &&\n            res(1) ==\
    \ \"txt\" || res(1) == \"exe\" || res(1) == \"dll\")\n            \"Yes\"\n  \
    \      else\n            \"No\"", "        // Edge cases\n        if (file_name.startsWith(\"\
    .\") || file_name.endsWith(\".\")) {\n            return \"No\"\n        } else\
    \ if (file_name.split(\".\").length != 2) {\n            return \"No\"\n     \
    \   }\n        // Get file name and extention\n        val file_name_parts = file_name.split(\"\
    .\")\n        val file_name_part = file_name_parts(0)\n        val file_extention_part\
    \ = file_name_parts(1)\n        // Initialize counters\n        var digits_counter\
    \ = 0\n        var chars_counter = 0\n        // Check file name part\n      \
    \  for (c <- file_name_part) {\n            if (c.isDigit) {\n               \
    \ digits_counter += 1\n            } else if (c.isLetter) {\n                chars_counter\
    \ += 1\n            }\n        }\n        if (digits_counter > 3 || chars_counter\
    \ == 0) {\n            return \"No\"\n        }\n        // Check file extention\
    \ part\n        val legal_extentions = List(\"txt\", \"exe\", \"dll\")\n     \
    \   if (!legal_extentions.contains(file_extention_part)) {\n            return\
    \ \"No\"\n        }\n        // Everything is fine\n        return \"Yes\"", " \
    \       if (file_name.length() < 5) {\n            return \"No\"\n        }\n\
    \        var numOfDigits = 0\n        var hasDot = false\n        for (i <- 0\
    \ until file_name.length()) {\n            if ('0' <= file_name(i) && file_name(i)\
    \ <= '9') {\n                numOfDigits += 1\n            }\n            if (file_name(i)\
    \ == '.') {\n                hasDot = true\n            }\n        }\n       \
    \ if (numOfDigits > 3 || !hasDot) {\n            return \"No\"\n        }\n  \
    \      var index = 0\n        while (index < file_name.length() && file_name(index)\
    \ != '.') {\n            index += 1\n        }\n        if (index == 0 || index\
    \ == file_name.length() - 1) {\n            return \"No\"\n        }\n       \
    \ var firstPart = file_name.substring(0, index)\n        var secondPart = file_name.substring(index\
    \ + 1)\n        var validSecondPart = Set(\"txt\", \"exe\", \"dll\")\n       \
    \ if (!(('a' <= firstPart(0) && firstPart(0) <= 'z') || ('A' <= firstPart(0) &&\
    \ firstPart(0) <= 'Z')) || !validSecondPart.contains(secondPart)) {\n        \
    \    return \"No\"\n        }\n        return \"Yes\"", "        var result =\
    \ \"Yes\"\n        var count = 0\n        for (i <- 0 until file_name.length if\
    \ file_name(i).isDigit) {\n            count += 1\n        }\n        if (count\
    \ > 3) {\n            result = \"No\"\n        }\n        if (file_name.split(\"\
    \\\\.\").length != 2) {\n            result = \"No\"\n        }\n        if (!file_name.split(\"\
    \\\\.\")(0)(0).isLetter) {\n            result = \"No\"\n        }\n        if\
    \ (!List(\"txt\", \"exe\", \"dll\").contains(file_name.split(\"\\\\.\")(1))) {\n\
    \            result = \"No\"\n        }\n        result", "        val file_name_list\
    \ = file_name.split(\"\\\\.\")\n        val file_name_digits = file_name.filter(c\
    \ => c >= '0' && c <= '9')\n        if (file_name_list.length != 2) {\n      \
    \      return \"No\"\n        }\n        if (file_name_digits.length > 3) {\n\
    \            return \"No\"\n        }\n        if (file_name_list(0).length ==\
    \ 0) {\n            return \"No\"\n        }\n        if (!((file_name_list(0)(0)\
    \ >= 'a' && file_name_list(0)(0) <= 'z') || (file_name_list(0)(0) >= 'A' && file_name_list(0)(0)\
    \ <= 'Z'))) {\n            return \"No\"\n        }\n        if (file_name_list(1)\
    \ != \"txt\" && file_name_list(1) != \"exe\" && file_name_list(1) != \"dll\")\
    \ {\n            return \"No\"\n        }\n        return \"Yes\"", "        //\
    \ This function returns true if and only if the given string satisfies all the\n\
    \        // conditions described in the problem statement.\n        def nameCheck(name\
    \ : String) : Boolean = {\n            val temp = name.split(\".\")\n        \
    \    //Check the number of '.' in name\n            if (temp.length != 2) {\n\
    \                return false\n            }\n            //Check the number of\
    \ digits in name\n            val (b, e) = temp.span(x => (x forall Character.isDigit))\n\
    \            if (b.mkString(\"\").length > 3) {\n                return false\n\
    \            }\n            //Check if name starts with digit\n            if\
    \ (e(0) forall Character.isDigit) {\n                return false\n          \
    \  }\n            //Check if name has one of the required extensions\n       \
    \     if (temp(1) != \"txt\" && temp(1) != \"exe\" && temp(1) != \"dll\") {\n\
    \                return false\n            }\n            return true\n      \
    \  }\n        if (nameCheck(file_name)) {\n            return \"Yes\"\n      \
    \  }\n        return \"No\"", "        var count = 0\n        var hasDot = false\n\
    \        for (c <- file_name) {\n            if (c >= '0' && c <= '9') count +=\
    \ 1\n            if (c == '.') hasDot = true\n        }\n        var extension\
    \ = file_name.substring(file_name.indexOf('.') + 1)\n        if (count > 3 ||\
    \ !hasDot || file_name.substring(0, file_name.indexOf('.')).isEmpty() || (file_name(0)\
    \ < 'a' || file_name(0) > 'z') && (file_name(0) < 'A' || file_name(0) > 'Z') ||\
    \ !extension.equals(\"txt\") && !extension.equals(\"exe\") && !extension.equals(\"\
    dll\")) \"No\" else \"Yes\"", "        var s = file_name.split(\"\"\"\\.\"\"\"\
    )\n        if (s.length != 2) return \"No\"\n        if (s(0).length == 0) return\
    \ \"No\"\n        if (s(0)(0) < 'a' || s(0)(0) > 'z' && s(0)(0) < 'A' || s(0)(0)\
    \ > 'Z') return \"No\"\n        if (s(1) != \"txt\" && s(1) != \"exe\" && s(1)\
    \ != \"dll\") return \"No\"\n        for (i <- s(0)) if (i >= '0' && i <= '9')\
    \ return \"No\"\n        return \"Yes\"", "        // Write your code here.\n\
    \        return \"No\"", "      val tokens = file_name.split(\"\\\\.\")\n    \
    \  if (tokens.length != 2) return \"No\"\n      if (tokens(0).length == 0) return\
    \ \"No\"\n      if (!tokens(0)(0).isLetter) return \"No\"\n      if (tokens(0).count(c\
    \ => c.isDigit) > 3) return \"No\"\n      if (tokens(1) != \"txt\" && tokens(1)\
    \ != \"exe\" && tokens(1) != \"dll\") return \"No\"\n      return \"Yes\"", " \
    \       // Write your code here\n        var dot_pos = file_name.indexOf('.')\n\
    \        if (dot_pos <= 0) {\n            return \"No\"\n        }\n        if\
    \ (dot_pos == file_name.length - 1) {\n            return \"No\"\n        }\n\
    \        var digit_count = 0\n        for (digit <- file_name.substring(0, dot_pos))\
    \ {\n            if (digit >= '0' && digit <= '9') {\n                digit_count\
    \ += 1\n            }\n        }\n        if (digit_count > 3) {\n           \
    \ return \"No\"\n        }\n        if (file_name.substring(dot_pos + 1) != \"\
    txt\" && file_name.substring(dot_pos + 1) != \"exe\" && file_name.substring(dot_pos\
    \ + 1) != \"dll\") {\n            return \"No\"\n        }\n        return \"\
    Yes\"", "        // 1. Check if there are more than three digits\n        if (file_name.count(c\
    \ => c >= '0' && c <= '9') > 3) {\n            return \"No\"\n        }\n    \
    \    // 2. Check if the file's name contains exactly one dot\n        val dotPos\
    \ = file_name.indexOf('.')\n        if (dotPos == -1 || file_name.indexOf('.',\
    \ dotPos + 1) != -1) {\n            return \"No\"\n        }\n        // 3. Check\
    \ if the substring before the dot starts with a letter\n        if (dotPos ==\
    \ 0 || !(file_name(dotPos - 1) >= 'a' && file_name(dotPos - 1) <= 'z' || file_name(dotPos\
    \ - 1) >= 'A' && file_name(dotPos - 1) <= 'Z')) {\n            return \"No\"\n\
    \        }\n        // 4. Check if the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n        var s = file_name.substring(dotPos + 1)\n   \
    \     if (s != \"txt\" && s != \"exe\" && s != \"dll\") {\n            return\
    \ \"No\"\n        }\n        \"Yes\"", "        var d = 0\n        var n = 0\n\
    \        var p = 0\n        var check = 0\n        var res = \"\"\n        for\
    \ (i <- 0 until file_name.length) {\n            if (file_name(i) == '.') {\n\
    \                d += 1\n                p = i\n            }\n            if\
    \ (file_name(i) >= '0' && file_name(i) <= '9') {\n                n += 1\n   \
    \         }\n            if (file_name(i) >= 'a' && file_name(i) <= 'z' || file_name(i)\
    \ >= 'A' && file_name(i) <= 'Z') {\n                check += 1\n            }\n\
    \        }\n        if (d == 1 && n <= 3 && check > 0) {\n            val a =\
    \ file_name.substring(p + 1)\n            if (a == \"txt\" || a == \"exe\" ||\
    \ a == \"dll\") {\n                res = \"Yes\"\n            }\n            else\
    \ {\n                res = \"No\"\n            }\n        }\n        else {\n\
    \            res = \"No\"\n        }\n        res", "        // Write your code\
    \ here\n        return \"\";", "        // Your code here\n        var haveDot\
    \ = false\n        var digitCount = 0\n        var allowTypes = Array(\"txt\"\
    , \"exe\", \"dll\")\n        var dotPosition = -1\n        var fileType = \"\"\
    \n        var format = false\n        var hasLetter = false\n        var name\
    \ = \"\"\n        for (i <- 0 until file_name.length()) {\n            if (file_name(i)\
    \ == '.') {\n                haveDot = true\n                dotPosition = i\n\
    \            }\n            if (file_name(i) <= '9' && file_name(i) >= '0') {\n\
    \                digitCount += 1\n            }\n            if (file_name(i)\
    \ <= 'z' && file_name(i) >= 'a' || file_name(i) <= 'Z' && file_name(i) >= 'A')\
    \ {\n                hasLetter = true\n            }\n        }\n        if (digitCount\
    \ <= 3 && hasLetter) {\n            for (i <- 0 until allowTypes.length) {\n \
    \               if (file_name.substring(dotPosition + 1) == allowTypes(i)) {\n\
    \                    fileType = allowTypes(i)\n                    format = true\n\
    \                }\n            }\n            if (format && haveDot) {\n    \
    \            name = file_name.substring(0, dotPosition)\n                var firstLetter\
    \ = name(0)\n                if (firstLetter <= 'z' && firstLetter >= 'a' || firstLetter\
    \ <= 'Z' && firstLetter >= 'A') {\n                    return \"Yes\"\n      \
    \          }\n            }\n        }\n        return \"No\"", "\t\tval valid_extensions\
    \ = List(\"txt\", \"exe\", \"dll\")\n\t\tval file_name_split = file_name.split(\"\
    \\\\.\")\n\t\tif (file_name_split.length != 2) {\n\t\t\treturn \"No\"\n\t\t}\n\
    \t\tval file_name_without_extension = file_name_split(0)\n\t\tval file_extension\
    \ = file_name_split(1)\n\t\tval file_name_without_extension_digits = file_name_without_extension.filter(_.isDigit)\n\
    \t\tif (file_name_without_extension_digits.length > 3) {\n\t\t\treturn \"No\"\n\
    \t\t}\n\t\tif (!file_name_without_extension.matches(\"[a-zA-Z].*\")) {\n\t\t\t\
    return \"No\"\n\t\t}\n\t\tif (!valid_extensions.contains(file_extension)) {\n\t\
    \t\treturn \"No\"\n\t\t}\n\t\treturn \"Yes\"", "        val digits_regex = \"\
    .*\\\\d{4,}.*\".r\n        val dot_regex = \".*\\\\..*\".r\n        val txt_regex\
    \ = \".*\\\\.txt\".r\n        val exe_regex = \".*\\\\.exe\".r\n        val dll_regex\
    \ = \".*\\\\.dll\".r\n        if (digits_regex.findFirstIn(file_name).isDefined)\
    \ {\n            return \"No\"\n        }\n        if (dot_regex.findFirstIn(file_name).isEmpty)\
    \ {\n            return \"No\"\n        }\n        val parts = file_name.split(\"\
    \\\\.\")\n        if (parts.length != 2) {\n            return \"No\"\n      \
    \  }\n        if (parts(0).length() < 1) {\n            return \"No\"\n      \
    \  }\n        val lower_case_alpha_regex = \".*[a-z]+.*\".r\n        val upper_case_alpha_regex\
    \ = \".*[A-Z]+.*\".r\n        if (lower_case_alpha_regex.findFirstIn(parts(0)).isEmpty\
    \ && \n            upper_case_alpha_regex.findFirstIn(parts(0)).isEmpty) {\n \
    \           return \"No\"\n        }\n        if (txt_regex.findFirstIn(file_name).isDefined)\
    \ {\n            return \"Yes\"\n        }\n        if (exe_regex.findFirstIn(file_name).isDefined)\
    \ {\n            return \"Yes\"\n        }\n        if (dll_regex.findFirstIn(file_name).isDefined)\
    \ {\n            return \"Yes\"\n        }\n        return \"No\"", "        //\
    \ Pre: -\n        // Post: returns 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n        // A file's name is considered to be valid\
    \ if and only if all the following conditions \n        // are met:\n        //\
    \ - There should not be more than three digits ('0'-'9') in the file's name.\n\
    \        // - The file's name contains exactly one dot '.'\n        // - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n    \
    \    // the latin alphapet ('a'-'z' and 'A'-'Z').\n        // - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n        // Examples:\n\
    \        // >>> fileNameCheck((\"example.txt\"))\n        // (\"Yes\")\n     \
    \   // >>> fileNameCheck((\"1example.dll\"))\n        // (\"No\")\n        var\
    \ res = \"Yes\"\n        var digits = 0\n        var dot = 0\n        if (file_name(0)\
    \ < 'a' || file_name(0) > 'z' && file_name(0) < 'A' || file_name(0) > 'Z') res\
    \ = \"No\"\n        for (char <- file_name) {\n            if (char >= '0' &&\
    \ char <= '9') digits += 1\n            if (char == '.') dot += 1\n        }\n\
    \        if (digits > 3 || dot != 1) res = \"No\"\n        else {\n          \
    \  var temp = \"\"\n            var ok = 0\n            for (i <- 0 until file_name.length)\
    \ {\n                if (file_name(i) == '.') ok = 1\n                else if\
    \ (ok == 0) temp += file_name(i)\n            }\n            ok = 0\n        \
    \    if (temp == \"\") res = \"No\"\n            else {\n                for (char\
    \ <- file_name) {\n                    if (char == '.') ok = 1\n             \
    \       else if (ok == 1) temp += char\n                }\n                var\
    \ ok2 = 0\n                for (element <- List(\"txt\", \"exe\", \"dll\")) {\n\
    \                    if (temp == element) ok2 = 1\n                }", '        ???',
  "        // your code goes here\n        return \"Yes\"", "        val illegal =\
    \ \"\"\"[^a-zA-Z0-9.]\"\"\".r\n        val illegal2 = \"\"\"[^a-zA-Z0-9]\"\"\"\
    .r\n        if (illegal.findFirstIn(file_name) != None) {\n            return\
    \ \"No\"\n        }\n        val splitted = file_name.split(\"\\\\.\")\n     \
    \   if (splitted.length != 2) {\n            return \"No\"\n        }\n      \
    \  if (illegal2.findFirstIn(splitted(0)) != None) {\n            return \"No\"\
    \n        }\n        if (splitted(1) != \"txt\" && splitted(1) != \"exe\" && splitted(1)\
    \ != \"dll\") {\n            return \"No\"\n        }\n        return \"Yes\"",
  "        if (file_name.length - file_name.replaceAll(\"[0-9]\", \"\").length > 3)\
    \ return \"No\"\n        var file_name_split = file_name.split(\"\\\\.\")\n  \
    \      if (file_name_split.length != 2) return \"No\"\n        var file_name_first\
    \ = file_name_split(0)\n        var file_name_second = file_name_split(1)\n  \
    \      if (file_name_first.isEmpty() || !(file_name_first(0).isLetter)) return\
    \ \"No\"\n        if (file_name_second != \"txt\" && file_name_second != \"exe\"\
    \ && file_name_second != \"dll\") return \"No\"\n        return \"Yes\"", "  \
    \      // Write your code here\n        // To print results to the standard output\
    \ you can use Console.println\n        // Example:\n        // Console.println(\"\
    Hello world\")\n        val pattern = \"\"\"([a-zA-Z][\\w]*(\\.[a-zA-Z]*|))\"\"\
    \".r\n        val firstMatch = pattern.findFirstIn(file_name)\n        if (firstMatch\
    \ == None) \"No\"\n        else if (!List(\"txt\", \"exe\", \"dll\").contains(firstMatch.get.substring(firstMatch.get.length\
    \ - 3))) \"No\"\n        else {\n            val digitCount = pattern.findAllIn(file_name).foldLeft(0)\
    \ { (acc, x) => acc + x.count(_.isDigit) }\n            if (digitCount > 3) \"\
    No\"\n            else \"Yes\"\n        }", '      ""', "        val file_name_length\
    \ = file_name.length()\n        val find_dot = file_name.indexOf('.')\n      \
    \  if (find_dot == -1) return \"No\"\n        val pre_dot = file_name.substring(0,\
    \ find_dot)\n        val after_dot = file_name.substring(find_dot + 1, file_name_length)\n\
    \        var digits_count = 0\n        for (i <- pre_dot) {\n            if (i\
    \ >= '0' && i <= '9') digits_count += 1\n        }\n        if (digits_count >\
    \ 3) return \"No\"\n        if (pre_dot.length() == 0) return \"No\"\n       \
    \ if (pre_dot(0) < 'a' || pre_dot(0) > 'z') return \"No\"\n        if (after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") return \"No\"\n\
    \        return \"Yes\"", '        ???', '        ""', "        // Start your\
    \ code here\n        val dot = file_name.indexOf('.')\n        val ext = file_name.substring(dot\
    \ + 1)\n        val name = file_name.substring(0, dot)\n        if (name.filter(c\
    \ => c >= '0' && c <= '9').length <= 3 && dot > 0 && dot < file_name.length -\
    \ 1 && \n            (name(0) >= 'a' && name(0) <= 'z' || name(0) >= 'A' && name(0)\
    \ <= 'Z') && \n            ext == \"txt\" || ext == \"exe\" || ext == \"dll\"\
    )\n            \"Yes\"\n        else\n            \"No\"", "        // DOCUMENTATION\
    \ GOES HERE\n        var file_name_check = file_name.toCharArray()\n        var\
    \ result: String = \"\"\n        var file_parts = file_name.split(\"\\\\.\")\n\
    \        var subString_before_dot = file_parts(0)\n        var subString_after_dot\
    \ = file_parts(1)\n        if (subString_before_dot.length == 0 || subString_before_dot.matches(\"\
    \"\"\\d+\"\"\")) {\n            result = \"No\"\n        }\n        else if (!subString_after_dot.equals(\"\
    txt\") && !subString_after_dot.equals(\"exe\") && !subString_after_dot.equals(\"\
    dll\")) {\n            result = \"No\"\n        }\n        else {\n          \
    \  var digits = 0\n            for (each <- subString_before_dot) {\n        \
    \        if (each.isDigit) {\n                    digits += 1\n              \
    \  }\n            }\n            if (digits > 3) {\n                result = \"\
    No\"\n            }\n            else {\n                result = \"Yes\"\n  \
    \          }\n        }\n        return result", "        val dot_index = file_name.indexOf('.')\n\
    \        if (dot_index < 0) return \"No\"\n        if (file_name.substring(0,\
    \ dot_index).count(ch => ch >= '0' && ch <= '9') > 3) return \"No\"\n        if\
    \ (file_name.substring(dot_index + 1) != \"txt\" && file_name.substring(dot_index\
    \ + 1) != \"exe\" && file_name.substring(dot_index + 1) != \"dll\") return \"\
    No\"\n        if (file_name.substring(0, dot_index).length == 0) return \"No\"\
    \n        if (file_name.substring(0, dot_index)(0) >= '0' && file_name.substring(0,\
    \ dot_index)(0) <= '9') return \"No\"\n        return \"Yes\"", '        // Your
    code here', "        if(file_name.contains(\"..\")) return \"No\"\n        var\
    \ numbers = file_name.replaceAll(\"[^0-9]\", \"\")\n        var parts = file_name.split(\"\
    [.]\")\n        var isValid : Boolean = false\n        if(numbers.length <= 3\
    \ && parts.length == 2 && (parts(1) == \"txt\" || parts(1) == \"exe\" || parts(1)\
    \ == \"dll\")) {\n            var first_name = parts(0)\n            var end_name\
    \ = parts(1)\n            if(first_name.head.isLetter) isValid = true\n      \
    \  }\n        if(isValid) \"Yes\" else \"No\"", "        // YOUR CODE HERE\n \
    \       return null;", '        // Write your code here', "        val pattern\
    \ = \"(^[a-zA-Z]\\\\w{0,2}\\\\.txt$|^[a-zA-Z]\\\\w{0,2}\\\\.exe$|^[a-zA-Z]\\\\\
    w{0,2}\\\\.dll$)\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        var result =\
    \ \"Yes\"\n        if(file_name.count(_.isDigit) > 3) {\n            result =\
    \ \"No\"\n        }\n        else if(file_name.count(_ == '.') != 1) {\n     \
    \       result = \"No\"\n        }\n        else {\n            var index_of_dot\
    \ = file_name.indexOf('.')\n            if(index_of_dot == 0) {\n            \
    \    result = \"No\"\n            }\n            else {\n                var after_dot\
    \ = file_name.substring(index_of_dot + 1)\n                if(!(after_dot == \"\
    txt\" || after_dot == \"exe\" || after_dot == \"dll\")) {\n                  \
    \  result = \"No\"\n                }\n                else {\n              \
    \      var before_dot = file_name.substring(0, index_of_dot)\n               \
    \     if(before_dot == \"\") {\n                        result = \"No\"\n    \
    \                }\n                    else {\n                        var head_of_before_dot\
    \ = before_dot.head\n                        if(!((head_of_before_dot >= 'a' &&\
    \ head_of_before_dot <= 'z') || (head_of_before_dot >= 'A' && head_of_before_dot\
    \ <= 'Z'))) {\n                            result = \"No\"\n                 \
    \       }\n                    }\n                }\n            }\n        }\n\
    \        return result", "        // Your code here\n        var res = \"\"\n\
    \        val arr = file_name.split(\"\\\\.\")\n        if (arr.length != 2) res\
    \ = \"No\"\n        else if (arr(0).matches(\"[0-9]{3,}\")) res = \"No\"\n   \
    \     else if (!arr(0).matches(\"[a-zA-Z].*\")) res = \"No\"\n        else if\
    \ (!arr(1).matches(\"txt|exe|dll\")) res = \"No\"\n        else res = \"Yes\"\n\
    \        res", "        // Fill In This Function\n        null", "        // Create\
    \ a regex which matches a digit.\n        val digit_regex = \"^[0-9]$\".r\n  \
    \      // Create a regex which matches a lowercase or uppercase latin letter.\n\
    \        val letter_regex = \"^[a-zA-Z]$\".r\n        // Create a regex which\
    \ matches a filename.\n        val file_name_regex = \"(^[a-zA-Z]{1}[\\\\w]{0,}\\\
    \\.[a-zA-Z]{3}$)\".r\n        // Create a counter which keeps track of the number\
    \ of digits present in the\n        // filename.\n        var digit_counter =\
    \ 0\n        // Iterate through all the characters of the filename.\n        for\
    \ (character <- file_name) {\n            // If the character matches the digit_regex,\
    \ increment the digit_counter.\n            if (digit_regex.findFirstIn(character.toString).isDefined)\
    \ digit_counter += 1\n        }\n        // If the filename doesn't match the\
    \ regex, or if the digit_counter is greater\n        // than three, return 'No'.\n\
    \        if (file_name_regex.findFirstIn(file_name).isEmpty || digit_counter >\
    \ 3) return \"No\"\n        // If we get this far, return 'Yes'.\n        return\
    \ \"Yes\"", "        var split_name = file_name.split(\"\"\"\\.\"\"\").toList\n\
    \        var count = 0\n        for (i <- 0 until split_name(0).length) {\n  \
    \          if (split_name(0)(i).isDigit) {\n                count += 1\n     \
    \       }\n        }\n        if (count > 3) {\n            return \"No\"\n  \
    \      }\n        if (split_name.length != 2) {\n            return \"No\"\n \
    \       }\n        if (split_name(0)(0).isDigit) {\n            return \"No\"\n\
    \        }\n        if (split_name(1) != \"txt\" && split_name(1) != \"exe\" &&\
    \ split_name(1) != \"dll\") {\n            return \"No\"\n        }\n        return\
    \ \"Yes\"", "        // Your code goes here\n        var number = 0\n        var\
    \ dot = false\n        for (i <- 0 until file_name.length) {\n            if (file_name(i)\
    \ >= '0' && file_name(i) <= '9') number += 1\n            if (file_name(i) ==\
    \ '.') dot = true\n        }\n        if (number > 3 || !dot) return \"No\"\n\
    \        var name = file_name.split('.')\n        if (name(0).length == 0 || !((name(0)(0)\
    \ >= 'a' && name(0)(0) <= 'z') || (name(0)(0) >= 'A' && name(0)(0) <= 'Z'))) return\
    \ \"No\"\n        if (name(1) != \"txt\" && name(1) != \"exe\" && name(1) != \"\
    dll\") return \"No\"\n        return \"Yes\"", '        ""', "        val digits_pattern\
    \ = \"[0-9]\".r\n        val digit_num = digits_pattern.findAllIn(file_name).length\n\
    \        val file_name_parts = file_name.split(\"\\\\.\")\n        val valid_extensions\
    \ = List(\"txt\", \"exe\", \"dll\")\n        if (digit_num > 3 || file_name_parts.length\
    \ != 2 || file_name_parts(0).length == 0 \n            || file_name_parts(0)(0)\
    \ < 'a' || file_name_parts(0)(0) > 'z' && file_name_parts(0)(0) < 'A' \n     \
    \       || file_name_parts(0)(0) > 'Z' || !valid_extensions.contains(file_name_parts(1)))\
    \ \"No\" else \"Yes\"", '        ???', "        val pattern = \"[a-zA-Z]+.txt|[a-zA-Z]+.exe|[a-zA-Z]+.dll\"\
    .r\n        if (pattern.findFirstIn(file_name).isEmpty) \"No\" else \"Yes\"",
  "        val file_name_arr = file_name.split(\"\\\\.\")\n        val main_str =\
    \ file_name_arr(0)\n        val suffix = file_name_arr(1)\n        if (file_name_arr.length\
    \ != 2) {\n            return \"No\"\n        }\n        if (suffix != \"txt\"\
    \ && suffix != \"exe\" && suffix != \"dll\") {\n            return \"No\"\n  \
    \      }\n        if (main_str.length == 0) {\n            return \"No\"\n   \
    \     }\n        if (main_str(0) < 'A' || main_str(0) > 'z' || \n        (main_str(0)\
    \ > 'Z' && main_str(0) < 'a')) {\n            return \"No\"\n        }\n     \
    \   var counter = 0\n        for (i <- 0 until main_str.length) {\n          \
    \  if (main_str(i) >= '0' && main_str(i) <= '9') {\n                counter +=\
    \ 1\n            }\n        }\n        if (counter > 3) {\n            return\
    \ \"No\"\n        }\n        return \"Yes\"", "        // Put your code here\n\
    \        if (file_name.count(_.isDigit) > 3) {\n            return \"No\"\n  \
    \      }\n        val dot_idx = file_name.indexOf('.')\n        if (dot_idx ==\
    \ -1) {\n            return \"No\"\n        }\n        val sub1 = file_name.substring(0,\
    \ dot_idx)\n        if (sub1.isEmpty || !sub1(0).isLetter) {\n            return\
    \ \"No\"\n        }\n        val sub2 = file_name.substring(dot_idx + 1)\n   \
    \     if (sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n         \
    \   return \"No\"\n        }\n        return \"Yes\"", "        // not more than\
    \ three digits\n        // dot exactly once\n        // name should be no empty\
    \ and starts with a letter\n        // ext should be one of the three\n      \
    \  val tokens = file_name.split(\"\\\\.\")\n        if (tokens.length != 2) return\
    \ \"No\"\n        val ext = tokens(1)\n        if (ext != \"txt\" && ext != \"\
    exe\" && ext != \"dll\") return \"No\"\n        val name = tokens(0)\n       \
    \ val pattern = \"[a-zA-Z][a-zA-Z0-9]+\".r\n        val pattern_match = pattern.findFirstIn(name)\n\
    \        if (pattern_match.isEmpty) return \"No\"\n        \"Yes\"", '        return
    null', "        def allDigits(x : String) : Boolean = x.forall(x => x.isDigit)\n\
    \        val file_name_list = file_name.split(\"[.]\")\n        if (file_name_list.length\
    \ != 2) {\n            return \"No\"\n        }\n        else if (file_name_list(0).length\
    \ < 1) {\n            return \"No\"\n        }\n        else if (allDigits(file_name_list(0))\
    \ || file_name_list(0).count(c => c.isDigit) > 3) {\n            return \"No\"\
    \n        }\n        else if (file_name_list(1) != \"txt\" && file_name_list(1)\
    \ != \"exe\" && file_name_list(1) != \"dll\") {\n            return \"No\"\n \
    \       }\n        else {\n            return \"Yes\"\n        }", "        //\
    \ Your implementation starts here...\n        if(file_name.toList.filter(x =>\
    \ x >= '0' && x <= '9').length > 3)\n            return \"No\"\n        if(file_name.split(\"\
    \\\\.\").length != 2)\n            return \"No\"\n        if(file_name.split(\"\
    \\\\.\")(0).length == 0 || file_name.split(\"\\\\.\") (0)(0) < 'A' || file_name.split(\"\
    \\\\.\") (0)(0) > 'z')\n            return \"No\"\n        if(file_name.split(\"\
    \\\\.\") (1) != \"txt\" && file_name.split(\"\\\\.\") (1) != \"exe\" && file_name.split(\"\
    \\\\.\") (1) != \"dll\")\n            return \"No\"\n        return \"Yes\"",
  "      // Write your code here\n      \"No\"", "        // if (file_name(0).isDigit\
    \ || file_name(0).isLetter) \"No\" else {\n        //     val s = file_name.split(\"\
    \\\\.\")\n        //     if (s.length != 2) \"No\" else {\n        //        \
    \ val s1 = s(0)\n        //         val s2 = s(1)\n        //         var flag\
    \ = true\n        //         for (i <- 0 until s1.length if s1(i).isDigit) flag\
    \ = false\n        //         if (flag && s2 == \"txt\" || s2 == \"exe\" || s2\
    \ == \"dll\") \"Yes\" else \"No\"\n        //     }\n        // }\n        if\
    \ (file_name(0).isDigit || file_name(0).isLetter) \"No\" else {\n            val\
    \ s = file_name.split(\"\\\\.\")\n            if (s.length != 2) \"No\" else {\n\
    \                val s1 = s(0)\n                val s2 = s(1)\n              \
    \  if (s1.forall(x => !x.isDigit) && s2 == \"txt\" || s2 == \"exe\" || s2 == \"\
    dll\") \"Yes\" else \"No\"\n            }\n        }", "        // Write your\
    \ code here\n        if (file_name.filter(_.isDigit).length > 3) {\n         \
    \   return \"No\"\n        }\n        val dot_index = file_name.indexOf('.')\n\
    \        if (dot_index == -1) {\n            return \"No\"\n        }\n      \
    \  val file_name_ext = file_name.substring(dot_index + 1)\n        if (file_name_ext\
    \ != \"txt\" && file_name_ext != \"exe\" && file_name_ext != \"dll\") {\n    \
    \        return \"No\"\n        }\n        val file_name_pre = file_name.substring(0,\
    \ dot_index)\n        if (file_name_pre.isEmpty || !file_name_pre(0).isLetter)\
    \ {\n            return \"No\"\n        }\n        return \"Yes\"", '        ???',
  "        if (file_name.matches(\"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\"))\n \
    \           \"Yes\"\n        else\n            \"No\"", "        // Type your\
    \ solution here\n        return \"No\"", "        // Write your code here.\n \
    \       if (file_name.count(c => c.isDigit) > 3) {\n            return \"No\"\n\
    \        }\n        if (file_name.count(c => c == '.') != 1) {\n            return\
    \ \"No\"\n        }\n        val splits = file_name.split('.')\n        if (splits(0).length\
    \ == 0 || !splits(0)(0).isLetter) {\n            return \"No\"\n        }\n  \
    \      if (splits(1) != \"txt\" && splits(1) != \"exe\" && splits(1) != \"dll\"\
    ) {\n            return \"No\"\n        }\n        return \"Yes\"", "        //\
    \ Write your code here\n        var substrs = file_name.split(\"\\\\.\")\n   \
    \     if (substrs.length == 2 && substrs(0).length > 0 && substrs(1).length >\
    \ 0) {\n            if (substrs(0).matches(\"[0-9]*\") && substrs(0).length <=\
    \ 3) {\n                if (substrs(1) == \"txt\" || substrs(1) == \"exe\" ||\
    \ substrs(1) == \"dll\") {\n                    return \"Yes\"\n             \
    \   }\n            }\n        }\n        return \"No\"", "        // Write your\
    \ code here\n        \"No\"", "        // check if it has more than 3 digits\n\
    \        val hasValidNumberOfDigits = file_name.count(c => '0' <= c && c <= '9')\
    \ <= 3\n        // check if it has one dot\n        val hasOneDot = file_name.count(c\
    \ => c == '.') == 1\n        // find the index of the dot\n        val dot = file_name.indexOf('.')\n\
    \        // substring before the dot\n        val beforeDot = file_name.substring(0,\
    \ dot)\n        // substring after the dot\n        val afterDot = file_name.substring(dot\
    \ + 1)\n        // check if substring before the dot starts with a letter\n  \
    \      val startsWithLetter = beforeDot.length != 0 && ('a' <= beforeDot(0) &&\
    \ beforeDot(0) <= 'z' || 'A' <= beforeDot(0) && beforeDot(0) <= 'Z')\n       \
    \ // check if the substring after the dot is one of ['txt', 'exe', 'dll']\n  \
    \      val afterDotIsValid = afterDot == \"txt\" || afterDot == \"exe\" || afterDot\
    \ == \"dll\"\n        // return \"Yes\" if the file name is valid and \"No\" otherwise\n\
    \        if (hasValidNumberOfDigits && hasOneDot && startsWithLetter && afterDotIsValid)\
    \ \"Yes\" else \"No\"", "        // Write your solution here\n        var arr:Array[Char]\
    \ = file_name.toCharArray()\n        var count:Int = 0\n        var found:Boolean\
    \ = false\n        for(i <- 0 until arr.length if arr(i)>='0' && arr(i)<='9'){\n\
    \            count+=1\n        }\n        if(count>3) return \"No\"\n        for(i\
    \ <- 0 until arr.length if arr(i)=='.') found = true\n        if(!found) return\
    \ \"No\"\n        var arr2:Array[String] = file_name.split(\"[.]\")\n        var\
    \ sub1:String = arr2(0)\n        var sub2:String = arr2(1)\n        if(sub1(0)>='a'\
    \ && sub1(0)<='z' || sub1(0)>='A' && sub1(0)<='Z') {\n            if(sub2==\"\
    txt\" || sub2==\"exe\" || sub2==\"dll\") return \"Yes\"\n        }\n        return\
    \ \"No\"", "        val arr = file_name.split(\"\\\\.\")\n        if (arr.length\
    \ != 2) {\n            return \"No\"\n        }\n        val strs = arr(0).toCharArray\n\
    \        val extension = arr(1)\n        if (strs.length == 0 || (strs(0) < 'a'\
    \ || strs(0) > 'z') && (strs(0) < 'A' || strs(0) > 'Z')) {\n            return\
    \ \"No\"\n        }\n        if (extension != \"txt\" && extension != \"exe\"\
    \ && extension != \"dll\") {\n            return \"No\"\n        }\n        var\
    \ count = 0\n        for (ch <- strs) {\n            if (ch >= '0' && ch <= '9')\
    \ {\n                count += 1\n            }\n        }\n        if (count >\
    \ 3) {\n            return \"No\"\n        }\n        return \"Yes\"", "     \
    \   // TODO: Solve this problem\n        if (file_name.count(_.isDigit) > 3)\n\
    \            return \"No\"\n        if (file_name.count(_ == '.') != 1)\n    \
    \        return \"No\"\n        if (file_name.split(\"\\\\.\")(0) == \"\")\n \
    \           return \"No\"\n        if (!(file_name.split(\"\\\\.\")(0)(0).isLetter))\n\
    \            return \"No\"\n        if (!(List(\"txt\", \"exe\", \"dll\").contains(file_name.split(\"\
    \\\\.\")(1))))\n            return \"No\"\n        return \"Yes\"", "        //\
    \ The following line of code creates a list containing all the substrings separated\
    \ by a dot\n        val file_name_list = file_name.split(\"\\\\.\").toList\n \
    \       // The following line of code creates a list containing all the characters\
    \ of the substring before the dot\n        val file_name_list_1 = file_name_list(0).toList\n\
    \        // The following line of code creates a list containing all the characters\
    \ of the substring after the dot\n        val file_name_list_2 = file_name_list(1).toList\n\
    \        // The following line of code creates a list containing all the digits\
    \ of the substring before the dot\n        val file_name_list_3 = file_name_list_1.filter(_.isDigit)\n\
    \        // The following line of code creates a list containing all the letters\
    \ of the substring before the dot\n        val file_name_list_4 = file_name_list_1.filter(_.isLetter)\n\
    \        // The following conditional statement checks whether the string after\
    \ the dot is a file extension and returns\n        // 'Yes' if and only if it\
    \ is, 'No' otherwise\n        if (file_name_list_2 == \"txt\" || file_name_list_2\
    \ == \"exe\" || file_name_list_2 == \"dll\") {\n            // The following conditional\
    \ statement checks whether the substring before the dot starts with a letter\n\
    \            // and returns 'Yes' if and only if it is, 'No' otherwise\n     \
    \       if (file_name_list_4(0).isLetter) {\n                // The following\
    \ conditional statement checks whether the number of digits in the substring before\
    \ the dot\n                // does not exceed three and returns 'Yes' if and only\
    \ if it does not, 'No' otherwise\n                if (file_name_list_3.length\
    \ <= 3) {\n                    // The following conditional statement checks whether\
    \ the string contains exactly one dot\n                    // and returns 'Yes'\
    \ if and only if it does, 'No' otherwise\n                    if (file_name.count(_\
    \ == '.') == 1) {\n                        \"Yes\"\n                    }\n  \
    \                  else {\n                        \"No\"\n                  \
    \  }\n                }\n                else {\n                    \"No\"\n\
    \                }\n            }\n            else {\n                \"", " \
    \       // Your Code Here\n        // Feel free to use the following functions:\n\
    \        // - isDigit(char: Char): Boolean\n        // - contains(char: Char):\
    \ Boolean\n        // - count(char: Char): Int\n        // - takeWhile(p: (Char)\
    \ => Boolean): String\n        // - dropWhile(p: (Char) => Boolean): String\n\
    \        // - substr(s: String, start: Int, end: Int): String\n        // - toLowerCase():\
    \ String\n        // - toUpperCase(): String\n        var cnt = 0\n        var\
    \ dot = 0\n        for (i <- 0 until file_name.length()) {\n            if (file_name(i).isDigit(file_name(i)))\
    \ cnt += 1\n            if (file_name(i) == '.') dot += 1\n        }\n       \
    \ if (cnt > 3 || dot != 1) return \"No\"\n        val extension = file_name.dropWhile(_\
    \ != '.').drop(1)\n        if (extension != \"txt\" && extension != \"exe\" &&\
    \ extension != \"dll\") return \"No\"\n        val name = file_name.takeWhile(_\
    \ != '.')\n        if (name.isEmpty() || !name(0).isLetter) return \"No\"\n  \
    \      return \"Yes\"", "        // Write the body of this function in one line\n\
    \        // Use 'return' to return the result.\n        return \"Yes\"", '        ???',
  '        ???', "        val chars = file_name.toList\n        val result = chars.foldLeft((0,\
    \ 0, false, true))((count, char) => char match {\n            case '.' => (count._1,\
    \ count._2, true, count._4)\n            case c if 'a' <= c && c <= 'z' => (count._1,\
    \ count._2, count._3, count._4 && count._1 == 0)\n            case c if 'A' <=\
    \ c && c <= 'Z' => (count._1, count._2, count._3, count._4 && count._1 == 0)\n\
    \            case c if '0' <= c && c <= '9' => (count._1 + 1, count._2, count._3,\
    \ count._4)\n            case _ => (count._1, count._2, count._3, false)\n   \
    \     })\n        if (result._1 > 3 || result._2 != 1 || !result._3 || !result._4)\
    \ \"No\"\n        else if (file_name.takeRight(3) == \"txt\" || file_name.takeRight(3)\
    \ == \"exe\" || file_name.takeRight(3) == \"dll\") \"Yes\"\n        else \"No\"",
  '        return "No"', "        val list = file_name.split(\"[.]\").toList\n   \
    \     val count = list(0).toSeq.filter((x : Char) => x >= '0' && x <= '9').size\n\
    \        val ext_check = list(1) == \"txt\" || list(1) == \"exe\" || list(1) ==\
    \ \"dll\"\n        val latin_check = list(0).charAt(0) >= 'a' && list(0).charAt(0)\
    \ <= 'z' || list(0).charAt(0) >= 'A' && list(0).charAt(0) <= 'Z'\n        val\
    \ length_check = list(0).length > 0\n        val count_check = count <= 3\n  \
    \      if (count_check && ext_check && latin_check && length_check) {\n      \
    \      \"Yes\"\n        } else {\n            \"No\"\n        }", "        //\
    \ This is a simple example of method\n        // Write the implementation here\n\
    \        \"No\"", "        // Write your implementation here\n        return \"\
    Yes\"", "        // Write your code here\n        return \"\"", "        //return\
    \ \"Yes\"\n        val extension = file_name.split(\"\\\\.\").last\n        val\
    \ (a, b) = file_name.splitAt(file_name.indexOf(\".\"))\n        val pattern =\
    \ \"^[a-zA-Z0-9]*$\".r\n        if(!pattern.pattern.matcher(a).matches()) return\
    \ \"No\"\n        if(!(extension.equals(\"txt\") || extension.equals(\"exe\")\
    \ || extension.equals(\"dll\"))) return \"No\"\n        for(i <- 0 until a.length)\
    \ {\n            if(a(i) >= '0' && a(i) <= '9') {\n                return \"No\"\
    \n            }\n        }\n        return \"Yes\"", "\t    var only_letters =\
    \ file_name.count(c => (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\n\t \
    \   var only_digits = file_name.count(c => c >= '0' && c <= '9')\n\t    var only_dot\
    \ = file_name.count(c => c == '.')\n\t    if (only_letters == 0 || only_dot !=\
    \ 1 || only_digits > 3) {\n\t        return \"No\"\n\t    }\n\t    else {\n\t\
    \        var dot_position = file_name.indexOf('.')\n\t        var file_name_substring\
    \ = file_name.substring(dot_position + 1)\n\t        if (file_name_substring !=\
    \ \"txt\" && file_name_substring != \"exe\" && file_name_substring != \"dll\"\
    ) {\n\t            return \"No\"\n\t        }\n\t        else {\n\t          \
    \  return \"Yes\"\n\t        }\n\t    }", "        // If the number of digits\
    \ in the file name is greater than three, return 'No'.\n        if (file_name.filter(_.isDigit).length\
    \ > 3) {\n            return \"No\"\n        }\n        // If the number of dots\
    \ in the file name is not exactly one, return 'No'.\n        if (file_name.filter(_\
    \ == '.').length != 1) {\n            return \"No\"\n        }\n        // Split\
    \ the file name into a prefix and suffix.\n        val parts = file_name.split('.')\n\
    \        // If the prefix is empty, return 'No'.\n        if (parts(0).length\
    \ == 0) {\n            return \"No\"\n        }\n        // If the first character\
    \ of the prefix is not a letter, return 'No'.\n        if (!parts(0)(0).isLetter)\
    \ {\n            return \"No\"\n        }\n        // If the suffix is not one\
    \ of ['txt', 'exe', 'dll'], return 'No'.\n        if (!List(\"txt\", \"exe\",\
    \ \"dll\").contains(parts(1))) {\n            return \"No\"\n        }\n     \
    \   // Otherwise, return 'Yes'.\n        return \"Yes\"", "        val file_name_pattern\
    \ = \"\"\"([a-zA-Z])([^.]{1,})([.])([txt|exe|dll])\"\"\".r\n        file_name\
    \ match {\n            case file_name_pattern(first,middle,dot,last) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val splitted_file_name =\
    \ file_name.split(\"\\\\.\").toList\n        if (splitted_file_name.length !=\
    \ 2) {\n            return \"No\"\n        }\n        if (splitted_file_name(0).length\
    \ == 0) {\n            return \"No\"\n        }\n        if (splitted_file_name(0).count(_.isDigit)\
    \ > 3) {\n            return \"No\"\n        }\n        if (splitted_file_name(0)(0).isDigit)\
    \ {\n            return \"No\"\n        }\n        if (splitted_file_name(1) !=\
    \ \"txt\" && splitted_file_name(1) != \"exe\" && splitted_file_name(1) != \"dll\"\
    ) {\n            return \"No\"\n        }\n        return \"Yes\""]
stop_tokens:
- "\n    }\n"
