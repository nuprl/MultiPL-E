name: HumanEval_97_multiply
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Complete the function that takes two integers and returns \n    // the product\
  \ of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n\
  \    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n\
  \    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l),\
  \ (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
  \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
  \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
  \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
  \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
completions: ["      val x = abs(a) % 10\n      val y = abs(b) % 10\n      x * y",
  '        return (a % 10 * b % 10)', "      // Write your code here\n      def solve(a\
    \ : Long, b : Long) : Long = {\n        if (a < 10 || b < 10) a * b\n        else\
    \ {\n          val a_unit = a % 10\n          val b_unit = b % 10\n          solve(a_unit,\
    \ b_unit)\n        }\n      }\n      if (a < 0 && b < 0) solve(-a, -b)\n     \
    \ else if (a > 0 && b > 0) solve(a, b)\n      else if (a < 0 && b > 0) solve(-a,\
    \ b)\n      else solve(a, -b)", "        val al = a.toString.length\n        val\
    \ bl = b.toString.length\n        //println(al, bl)\n        val x = a.toString.slice(al\
    \ - 1, al).toLong\n        val y = b.toString.slice(bl - 1, bl).toLong\n     \
    \   return x * y", "        val last_digits_of_a = a % 10\n        val last_digits_of_b\
    \ = b % 10\n        return last_digits_of_a * last_digits_of_b", '        return
    (a % 10) * (b % 10)', "        def product(x : Long, y : Long) : Long = (x * y)\
    \ % 10\n        product(abs(a), abs(b))", "        val aUnit = a % 10\n      \
    \  val bUnit = b % 10\n        return aUnit * bUnit", "        val aa = if (a\
    \ > 0) a % 10 else abs(a) % 10\n        val bb = if (b > 0) b % 10 else abs(b)\
    \ % 10\n        aa * bb", "        val a2 = a.abs\n        val b2 = b.abs\n  \
    \      (a2 % 10) * (b2 % 10)", '        // Write your code here', '        ((abs(a)
    % 10) * (abs(b) % 10)) % 10', "        val x = a.abs % 10\n        val y = b.abs\
    \ % 10\n        x * y", '        (abs(a) % 10) * (abs(b) % 10)', '        ((a
    % 10) * (b % 10))', "        var aDigit = a % 10\n        var bDigit = b % 10\n\
    \        return aDigit * bDigit", '        (abs(a) % 10) * (abs(b) % 10)', " \
    \       // Write your code here\n        a % 10 * b % 10", '        (a % 10) *
    (b % 10)', '        abs(a % 10) * abs(b % 10)', "        var result = 1\n    \
    \    a.toString.foreach(x => {\n            if (x != '-') result *= (x - '0')\n\
    \        })\n        b.toString.foreach(x => {\n            if (x != '-') result\
    \ *= (x - '0')\n        })\n        return result", "        var res = 0l\n  \
    \      var a1 = a\n        var b1 = b\n        if (a1 < 0) a1 = -a1\n        if\
    \ (b1 < 0) b1 = -b1\n        res = (a1 % 10) * (b1 % 10)\n        res", "    \
    \    val (div1, unit1) = (abs(a) / 10, abs(a) % 10)\n        val (div2, unit2)\
    \ = (abs(b) / 10, abs(b) % 10)\n        // println(div1, unit1, div2, unit2)\n\
    \        val result = unit1 * unit2\n        // println(result)\n        result\
    \ * (if (a < 0) -1 else 1) * (if (b < 0) -1 else 1)", "        val a_a = abs(a).toString\n\
    \        val b_b = abs(b).toString\n        val a_a_1 = a_a.last.toString.toInt\n\
    \        val b_b_1 = b_b.last.toString.toInt\n        a_a_1 * b_b_1", '        return
    (a % 10l) * (b % 10l)', '        return ((a % 10) * (b % 10)) % 10', "       \
    \ val a1 = math.abs(a) % 10\n        val b1 = math.abs(b) % 10\n        if (a1\
    \ * b1 == 0) 0 else a1 * b1", "        var n = 0l\n        n = Math.abs(a) % 10\
    \ * Math.abs(b) % 10\n        return n", "        var unitA = a % 10\n       \
    \ var unitB = b % 10\n        return unitA * unitB", "        val digits : List[Long]\
    \ = List(a, b).map(n => n % 10)\n        digits.product", '        (a % 10) *
    (b % 10)', '        return (a % 10) * (b % 10)', "        val aUnits = abs(a %\
    \ 10l)\n        val bUnits = abs(b % 10l)\n        aUnits * bUnits", "       \
    \ var l = List(a, b)\n        var f = List((a % 10), (b % 10))\n        return\
    \ f.product", "      val list = List(a, b)\n      var product : Long = 1l\n  \
    \    for (i <- list) {\n        product *= (abs(i) % 10)\n      }\n      product",
  "        // ???\n        0l", "        var c = max(a, b)\n        var d = min(a,\
    \ b)\n        var e = c % 10\n        var f = d % 10\n        return e * f", '        (a%10)
    * (b%10)', "        val aUnit = a % 10\n        val bUnit = b % 10\n        return\
    \ aUnit * bUnit", "        var product : Long = (a % 10) * (b % 10)\n        return\
    \ product", '        (abs(a) % 10) * (abs(b) % 10)', "        if (a < 0) {\n \
    \           if (b < 0) {\n                (a * b) % 10\n            } else {\n\
    \                (-a * b) % 10\n            }\n        } else {\n            if\
    \ (b < 0) {\n                (a * -b) % 10\n            } else {\n           \
    \     (a * b) % 10\n            }\n        }", "        def byLastDigit(num :\
    \ Long, fact : Long) : Long = num match {\n            case 0 => 0\n         \
    \   case _ => (num % 10) * fact + byLastDigit(num / 10, fact)\n        }\n   \
    \     byLastDigit(a, b)", "        var lstA = a.toString.toList.map(x => x.asDigit)\n\
    \        var lstB = b.toString.toList.map(x => x.asDigit)\n        while (lstA.head\
    \ == 0) lstA = lstA.tail\n        while (lstB.head == 0) lstB = lstB.tail\n  \
    \      return lstA.head * lstB.head", "        // The unit digit of (n - n % 10)\
    \ / 10\n        val digits: Map[Long, Long] = Map(\n            0l -> 0l, 1l ->\
    \ 1l, 2l -> 2l, 3l -> 3l, 4l -> 4l,\n            5l -> 5l, 6l -> 6l, 7l -> 7l,\
    \ 8l -> 8l, 9l -> 9l,\n            10l -> 1l, 11l -> 1l, 12l -> 2l, 13l -> 3l,\
    \ 14l -> 4l,\n            15l -> 5l, 16l -> 6l, 17l -> 7l, 18l -> 8l, 19l -> 9l,\n\
    \            20l -> 1l, 21l -> 1l, 22l -> 2l, 23l -> 3l, 24l -> 4l,\n        \
    \    25l -> 5l, 26l -> 6l, 27l -> 7l, 28l -> 8l, 29l -> 9l,\n            30l ->\
    \ 1l, 31l -> 1l, 32l -> 2l, 33l -> 3l, 34l -> 4l,\n            35l -> 5l, 36l\
    \ -> 6l, 37l -> 7l, 38l -> 8l, 39l -> 9l,\n            40l -> 1l, 41l -> 1l, 42l\
    \ -> 2l, 43l -> 3l, 44l -> 4l,\n            45l -> 5l, 46l -> 6l, 47l -> 7l, 48l\
    \ -> 8l, 49l -> 9l,\n            50l -> 1l, 51l -> 1l, 52l -> 2l, 53l -> 3l, 54l\
    \ -> 4l,\n            55l -> 5l, 56l -> 6l, 57l -> 7l, 58l -> 8l, 59l -> 9l,\n\
    \            60l -> 1l, 61l -> 1l, 62l -> 2l, 63l -> 3l, 64l -> 4l,\n        \
    \    65l -> 5l, 66l -> 6l, 67l -> 7l, 68l -> 8l, 69l -> 9l,\n            70l ->\
    \ 1l, 71l -> 1l, 72l -> 2l, 73l -> 3l, 74l -> 4l,\n           ", "        val\
    \ c = (a%10) * (b%10)\n        return c", "        val c = (a % 10) * (b % 10)\n\
    \        return c", '        ((a % 10) * (b % 10))', "        if (a == 0l || b\
    \ == 0l) return 0l\n        var aa = a\n        var bb = b\n        if (a < 0l)\
    \ aa = -a\n        if (b < 0l) bb = -b\n        (aa % 10l) * (bb % 10l)", '        a.abs
    % 10 * b.abs % 10', "        // a, b - integers of the same parity\n        //\
    \ a, b - integers of the same parity\n        // a, b - integer units\n      \
    \  // a, b - integers of the same parity\n        // a, b - integers of the same\
    \ parity\n        // a, b - integers of the same parity\n        // a, b - integers\
    \ of the same parity\n        // a, b - integers of the same parity\n        //\
    \ a, b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same parity\n        // a,\
    \ b - integers of the same parity\n        // a, b - integers of the same parity\n\
    \        // a, b - integers of the same parity\n        // a, b - integers of\
    \ the same parity\n        // a, b - integers of the same", '      a % 10 * b
    % 10', "        val (x, y) = (a, b) match {\n            case (x, y) if x < 0\
    \ && y < 0 => (-x, -y)\n            case (x, y) if x < 0 => (-x, y)\n        \
    \    case (x, y) if y < 0 => (x, -y)\n            case (x, y) => (x, y)\n    \
    \    }\n        (x.toString.last.toInt - '0'.toInt) * (y.toString.last.toInt -\
    \ '0'.toInt)", '        (a % 10) * (b % 10)', "        var a1 = a % 10\n     \
    \   var b1 = b % 10\n        a1 * b1", "        if (a < 0 || b < 0) {\n      \
    \      return multiply(abs(a), abs(b))\n        }\n        (a % 10) * (b % 10)",
  "        val x = a.abs\n        val y = b.abs\n        ((x % 10) * (y % 10)) * ((x\
    \ / 10) * (y / 10))", "        val aa = a % 10\n        val bb = b % 10\n    \
    \    aa * bb", '        a * b;', "        if (a < 0) {\n            if (b < 0)\
    \ {\n                val p = (a * b).toString.toList.map(x => x.toString.toInt).product\n\
    \                if (p < 0) p else (-p)\n            } else {\n              \
    \  val p = (a * -b).toString.toList.map(x => x.toString.toInt).product\n     \
    \           if (p < 0) p else (-p)\n            }\n        } else {\n        \
    \    if (b < 0) {\n                val p = (-a * b).toString.toList.map(x => x.toString.toInt).product\n\
    \                if (p < 0) p else (-p)\n            } else {\n              \
    \  val p = (a * b).toString.toList.map(x => x.toString.toInt).product\n      \
    \          if (p < 0) p else (-p)\n            }\n        }", "        val x =\
    \ a.abs\n        val y = b.abs\n        val unitA = x % 10\n        val unitB\
    \ = y % 10\n        unitA * unitB", '        abs(a % 10) * abs(b % 10)', "   \
    \     // your code here\n        a.abs % 10 * b.abs % 10", "        def getUnitDigit(n\
    \ : Long) : Long = n % 10\n        getUnitDigit(a) * getUnitDigit(b)", "     \
    \   var product = 1\n        var aRemainder = a\n        var bRemainder = b\n\
    \        while (aRemainder > 0) {\n            product *= aRemainder % 10\n  \
    \          aRemainder /= 10\n        }\n        while (bRemainder > 0) {\n   \
    \         product *= bRemainder % 10\n            bRemainder /= 10\n        }\n\
    \        product", "        val unitDigit = (BigInt(abs(a)) % 10) * (BigInt(abs(b))\
    \ % 10)\n        if (((a < 0) && (b > 0)) || ((a > 0) && (b < 0))) -unitDigit.toLong\
    \ else unitDigit.toLong", "        val x = (a % 10) * (b % 10)\n        x", " \
    \       val m = a % 10l\n        val n = b % 10l\n        m * n", '        return
    Math.abs(a%10*b%10)', '        (a % 10) * (b % 10)', '        return (a % 10)
    * (b % 10)', "        // Your code here.\n        0", '        a % 10 * b % 10',
  "        var prod : Long = a * b\n        while (prod >= 10) prod /= 10\n      \
    \  return prod", '        return (a % 10) * (b % 10)', "        val aUnit = a\
    \ % 10l\n        val bUnit = b % 10l\n        return aUnit * bUnit", "       \
    \ val aa = a % 10;\n        val bb = b % 10;\n        aa * bb", "        val c\
    \ = a * b\n        return c % 10", '        return (a % 10) * (b % 10)', '        (abs(a
    % 10) * abs(b % 10)).toLong', '        return Math.abs(a).toString.toList.last.toString.toLong
    * Math.abs(b).toString.toList.last.toString.toLong', '        return ((a % 10)
    * (b % 10)).toLong', '        return (a % 10) * (b % 10)', '        (a % 10) *
    (b % 10)', '        return ((a % 10) * (b % 10)) % 10', "        var product =\
    \ (a % 10) * (b % 10)\n        product", "        val aa = abs(a)\n        val\
    \ bb = abs(b)\n        var as = 0L\n        var bs = 0L\n        var ax = aa\n\
    \        var bx = bb\n        while (ax > 0) {\n            as = as * 10 + ax\
    \ % 10\n            ax /= 10\n        }\n        while (bx > 0) {\n          \
    \  bs = bs * 10 + bx % 10\n            bx /= 10\n        }\n        val ans =\
    \ as * bs\n        if (a * b < 0) -ans else ans", "        val mult = (a % 10)\
    \ * (b % 10)\n        return mult", '        if (a >= 10) multiply(a / 10, b)
    else if (b >= 10) multiply(a, b / 10) else (a * b) % 10', "        if (a < 0)\
    \ multiply(-a, b)\n        else if (b < 0) multiply(a, -b)\n        else {\n \
    \           def f(x : Long) : Long = {\n                if (x < 10) x\n      \
    \          else f(x % 10)\n            }\n            f(a) * f(b)\n        }",
  '        ((a % 10) * (b % 10)) % 10', '        return a % 10 * b % 10', "      \
    \  val as = a.toString().reverse()\n        val bs = b.toString().reverse()\n\
    \        val (al, bl) = (as.length(), bs.length())\n        if(al > bl) {\n  \
    \          var c = bs\n            while(c.length() < al) c += \"0\"\n       \
    \     return (as.toInt * c.toInt) % 10\n        }\n        else {\n          \
    \  var c = as\n            while(c.length() < bl) c += \"0\"\n            return\
    \ (bs.toInt * c.toInt) % 10\n        }", "        // val charArray = a.toString.toCharArray\n\
    \        // val charArray1 = b.toString.toCharArray\n        // val digitA = charArray(charArray.length\
    \ - 1).toInt - 48\n        // val digitB = charArray1(charArray1.length - 1).toInt\
    \ - 48\n        val digitA = a % 10\n        val digitB = b % 10\n        digitA\
    \ * digitB", "        val x = if (a < 0) -a else a\n        val y = if (b < 0)\
    \ -b else b\n        val unitA = x % 10\n        val unitB = y % 10\n        unitA\
    \ * unitB", "        def f(n : Long) : Long = {\n            var sum = 1\n   \
    \         for (i <- 1 to (n % 10).toInt) {\n                sum *= i\n       \
    \     }\n            sum\n        }\n        f(a) * f(b)", '      1l', "     \
    \   val l = List(a, b)\n        val s = l.map(x => x.toString.split(\"\").toList.map(x\
    \ => x.toInt).filter(x => x != 0))\n        (s(0)(0) * s(1)(0)).toLong", '        return
    (a % 10) * (b % 10)', "        val c = a % 10\n        val d = b % 10\n      \
    \  val e = c * d\n        e", "      val x = (a % 10) * (b % 10)\n      return\
    \ x", '        return (a % 10) * (b % 10)', "        // Write your code here\n\
    \        (a % 10) * (b % 10)", "        var product = a * b\n        val isProductNegative\
    \ = product < 0\n        product = abs(product)\n        var remainder = 0\n \
    \       var multiplier = 1\n        var lastDigit = 0\n        while (product\
    \ > 0) {\n            lastDigit = (product % 10).toInt\n            remainder\
    \ += lastDigit * multiplier\n            multiplier *= 10\n            product\
    \ /= 10\n        }\n        if (isProductNegative) -remainder else remainder",
  '        ((a % 10) * (b % 10)) % 10', '        (a % 10) * (b % 10)', "        //\
    \ My Solution\n        val list = List(a, b)\n        list.map(x => abs(x) % 10).product\n\
    \n        // Best Solution\n        // def unitDigit(n: Long): Long = {\n    \
    \    //     n % 10\n        // }\n        // unitDigit(a) * unitDigit(b)", " \
    \       val (ra, rb) = (a.abs, b.abs)\n        (ra % 10) * (rb % 10)", "     \
    \   val a1 = Math.abs(a % 10)\n        val b1 = Math.abs(b % 10)\n        a1 *\
    \ b1", '        return (a % 10) * (b % 10)', "        val unitProduct = List(a\
    \ % 10, b % 10).product\n        val sum = List(a, b).sum\n        return (unitProduct\
    \ * (sum - (sum % 10))) + (unitProduct % 10)", "        var c : Long = 1\n   \
    \     var d : Long = 1\n        while (a > 0) {\n            c *= a % 10\n   \
    \         a /= 10\n        }\n        while (b > 0) {\n            d *= b % 10\n\
    \            b /= 10\n        }\n        c * d", "        val x = (a % 10) * (b\
    \ % 10)\n        x", "        var acount = 0\n        var bcount = 0\n       \
    \ var result = 0l\n        var astr = a.toString()\n        var bstr = b.toString()\n\
    \        var ar = astr.map(_.asDigit).toArray\n        var br = bstr.map(_.asDigit).toArray\n\
    \        if (ar.length > 1) {\n            ar = ar.slice(ar.length - 1, ar.length)\n\
    \        }\n        if (br.length > 1) {\n            br = br.slice(br.length\
    \ - 1, br.length)\n        }\n        result = ar(0) * br(0)\n        result",
  '        return abs(a % 10) * abs(b % 10)', "      var result : Long = 0\n     \
    \ val aString = a.toString()\n      val bString = b.toString()\n      if (aString.length\
    \ > 1) {\n        if (aString.slice(aString.length - 2, aString.length - 1) ==\
    \ \"-\") {\n          aString.slice(aString.length - 1, aString.length).toLong\n\
    \        } else {\n          aString.slice(aString.length - 1, aString.length).toLong\n\
    \        }\n      } else {\n        aString.toLong\n      }\n      if (bString.length\
    \ > 1) {\n        if (bString.slice(bString.length - 2, bString.length - 1) ==\
    \ \"-\") {\n          bString.slice(bString.length - 1, bString.length).toLong\n\
    \        } else {\n          bString.slice(bString.length - 1, bString.length).toLong\n\
    \        }\n      } else {\n        bString.toLong\n      }\n      result = a\
    \ * b\n      if (result.toString().length > 1) {\n        result.toString().slice(result.toString().length\
    \ - 1, result.toString().length).toLong\n      } else {\n        result\n    \
    \  }", "      var x = Math.abs(a).toString().toList.last.toString.toLong\n   \
    \   var y = Math.abs(b).toString().toList.last.toString.toLong\n      return x\
    \ * y", "        // Good luck!\n        var result = (a % 10) * (b % 10)\n   \
    \     return result", "    \tif (a * b == 0) return 0\n    \tabs(a % 10) * abs(b\
    \ % 10)", "        var res : Long = 1\n        var aa : Long = a\n        var\
    \ bb : Long = b\n        if (a < 0) aa = -a\n        if (b < 0) bb = -b\n    \
    \    var aas : String = aa.toString\n        var bbs : String = bb.toString\n\
    \        var as : Char = aas.charAt(aas.length - 1)\n        var bs : Char = bbs.charAt(bbs.length\
    \ - 1)\n        res = (as.toInt - 48) * (bs.toInt - 48)\n        res", "     \
    \   def helper(a : Long, b : Long) : Long = {\n            if (a == 0 || b ==\
    \ 0) {\n                0\n            } else {\n                a % 10 * b %\
    \ 10\n            }\n        }\n        helper(abs(a), abs(b))", "        // Implement\
    \ me\n        return 0", '        (a % 10) * (b % 10)', "        val al = a %\
    \ 10\n        val bl = b % 10\n        return al * bl", "        val n = a * b\n\
    \        var u = n % 10\n        return u", "        if (a < 0 && b < 0) {\n \
    \           return (a.abs % 10) * (b.abs % 10)\n        } else if (a < 0) {\n\
    \            return (a.abs % 10) * (b % 10)\n        } else if (b < 0) {\n   \
    \         return (a % 10) * (b.abs % 10)\n        } else {\n            return\
    \ (a % 10) * (b % 10)\n        }", '        (a%10) * (b%10)', "        val c =\
    \ a.abs * b.abs\n        return (c % 10) * (if ((a < 0 && b > 0) || (a > 0 &&\
    \ b < 0)) -1 else 1)", '        ((a % 10) * (b % 10)) % 10', "        val unit1\
    \ = a % 10\n        val unit2 = b % 10\n        unit1 * unit2", "        def getUnitDigit(n\
    \ : Long) : Long = {\n            return (n % 10)\n        }\n        return getUnitDigit(a)\
    \ * getUnitDigit(b)", "        def gcd(a : Long, b : Long) : Long = if (b == 0)\
    \ a else gcd(b, a % b)\n        val l = if (a < 0) (gcd(abs(a), 10) * gcd(abs(b),\
    \ 10)) else 1\n        val c = (abs(a) % 10) * (abs(b) % 10) / l\n        return\
    \ c", '        a.abs * b.abs % 10', '        abs(a).toString.last.toString.toLong
    * abs(b).toString.last.toString.toLong', "        var l = List[Long]()\n     \
    \   l :+= a % 10\n        l :+= b % 10\n        l.product", "        var x = a\n\
    \        var y = b\n        if (x < 0) {\n            x = -x\n        }\n    \
    \    if (y < 0) {\n            y = -y\n        }\n        var digit = 1l\n   \
    \     var product = 0l\n        for (i <- 0 to 1) {\n            product += (x\
    \ % 10l) * (y % 10l) * digit\n            x /= 10\n            y /= 10\n     \
    \       digit *= 10\n        }\n        return product", '        return (a %
    10) * (b % 10)', "        val (a1, b1) = ((a % 10l), (b % 10l))\n        (a1 *\
    \ b1) % 10l", '        return a % 10 * b % 10', '        (a % 10l) * (b % 10l)',
  '        (a % 10) * (b % 10)', "        val aUnits = math.abs(a % 10)\n        val\
    \ bUnits = math.abs(b % 10)\n        return aUnits * bUnits", '        return
    (a % 10) * (b % 10)', "        val d1 = a % 10\n        val d2 = b % 10\n    \
    \    d1 * d2", "        // your code here\n        val aUnits = (a % 10l).toInt\n\
    \        val bUnits = (b % 10l).toInt\n        aUnits * bUnits", "        var\
    \ k = 1\n        if (a < 0) {\n            k = -1\n            a = -a\n      \
    \  }\n        if (b < 0) {\n            k = -k\n            b = -b\n        }\n\
    \        return ((a % 10) * (b % 10) * k)", '        return (abs(a) % 10) * (abs(b)
    % 10)', '        ((a%10) * (b%10)) % 10', '        return (abs(a) % 10) * (abs(b)
    % 10)', "        // if(a < 0) {\n        //     val a2 = a.abs\n        //   \
    \  val b2 = b.abs\n        //     val prod = a2 % 10 * b2 % 10\n        //   \
    \  if(prod > 9) prod % 10 else prod\n        // }\n        // else {\n       \
    \ //     val prod = a % 10 * b % 10\n        //     if(prod > 9) prod % 10 else\
    \ prod\n        // }\n        // val a2 = if(a < 0) a.abs else a\n        // val\
    \ b2 = if(b < 0) b.abs else b\n        // val prod = a2 % 10 * b2 % 10\n     \
    \   // if(prod > 9) prod % 10 else prod\n        (a % 10 * b % 10) % 10", "  \
    \      val (x, y) = (if (a >= 0) a else a * -1, if (b >= 0) b else b * -1)\n \
    \       val (u, v) = (x % 10, y % 10)\n        u * v", "        val x = abs(a)\n\
    \        val y = abs(b)\n        if (x % 10 == 0 || y % 10 == 0) 0\n        else\
    \ (x % 10) * (y % 10)", "        var res = (a % 10) * (b % 10)\n        res",
  '        (a % 10) * (b % 10)', '        return abs(a % 10 * b % 10)', "    \tval\
    \ aa = a % 10\n    \tval bb = b % 10\n    \treturn aa * bb", '        a % 10 *
    b % 10', '        a % 10 * b % 10', "        val a_u = a % 10\n        val b_u\
    \ = b % 10\n        a_u * b_u", '        return (a % 10) * (b % 10)', "      \
    \  val first = abs(a).toString().last.toString().toLong\n        val second =\
    \ abs(b).toString().last.toString().toLong\n        return first * second", '        return
    (a % 10) * (b % 10)', '        return (a%10) * (b%10)', "        val num = a *\
    \ b\n        val str = math.abs(num).toString\n        str.last.toString.toLong",
  '        a % 10 * b % 10', "        def product(a : Long, b : Long) : Long = {\n\
    \            val x = abs(a % 10)\n            val y = abs(b % 10)\n          \
    \  if (x == 0 || y == 0) 0\n            else x * y\n        }\n        product(a,\
    \ b)", '        (a % 10) * (b % 10)', '        (a % 10) * (b % 10)', "       \
    \ val unitDigitA = abs(a) % 10\n        val unitDigitB = abs(b) % 10\n       \
    \ val product = unitDigitA * unitDigitB\n        product", "        val unit1\
    \ = a % 10\n        val unit2 = b % 10\n        unit1 * unit2", "        var x\
    \ = a\n        var y = b\n        if (x < 0) x = -x\n        if (y < 0) y = -y\n\
    \        var r = 1\n        for (i <- 0 until 10) {\n            if (x % 10 ==\
    \ i) r *= i\n            if (y % 10 == i) r *= i\n        }\n        r", '        (a
    % 10) * (b % 10)', "        if (a < 0) return multiply(a * -1, b)\n        if\
    \ (b < 0) return multiply(a, b * -1)\n        if (a < 10 && b < 10) return a *\
    \ b\n        (a % 10) * (b % 10)", "        val prod = a * b\n        val prodStr\
    \ = prod.toString\n        val prodStrDigits = prodStr.toList.map(_.asDigit)\n\
    \        prodStrDigits.product", "        var nums = List(a % 10, b % 10)\n  \
    \      return nums.product", "        var c = a.abs\n        var d = b.abs\n \
    \       if (a < 0 && b < 0) {\n            c = -a\n            d = -b\n      \
    \  }\n        (c % 10) * (d % 10)", "        def mul(a : Long, b : Long) : Long\
    \ = (a % 10) * (b % 10)\n        if (a < 0) mul(-a, b) else if (b < 0) mul(a,\
    \ -b) else mul(a, b)", '        // Write your code here', '        (a % 10) *
    (b % 10)', '        return (math.abs(a) % 10) * (math.abs(b) % 10)', '        return
    (a % 10) * (b % 10)', "        val x = a % 10;\n        val y = b % 10;\n    \
    \    return x * y;", "        val l = List(a, b)\n        val d = l.map(x => if\
    \ (x < 0) -x else x).map(x => x % 10)\n        return d.product", '        (a
    % 10) * (b % 10)', '        (a % 10) * (b % 10)', '        a.abs * b.abs % 10
    * (a.signum * b.signum)', '        ((a % 10l) * (b % 10l)) % 10l', '        (a
    % 10) * (b % 10)', "        val unitA = a % 10\n        val unitB = b % 10\n \
    \       unitA * unitB", "        val l = List(a, b)\n        val p = l.map(_.abs).reduce(_\
    \ * _)\n        val s = l.filter(_ < 0).size\n        if (s == 0 || s == 2) p\
    \ else -p", '      return -1', "        if(a == 0 || b == 0) return 0\n      \
    \  return (abs(a) % 10) * (abs(b) % 10)", "        def lastDigit(x : Long) : Long\
    \ = x % 10\n        lastDigit(a) * lastDigit(b)", '        (a % 10) * (b % 10)',
  "        val A = a % 10\n        val B = b % 10\n        A * B", "        def extractLastDigit(num\
    \ : Long) : Long = {\n            if (num < 0) {\n                (-num % 10)\n\
    \            } else {\n                (num % 10)\n            }\n        }\n\
    \        extractLastDigit(a) * extractLastDigit(b)", '        return ((a%10) *
    (b%10)).toLong', '      (a % 10) * (b % 10)', '        return ((a % 10) * (b %
    10))', "        val aa = Math.abs(a)\n        val bb = Math.abs(b)\n        val\
    \ uda = aa % 10\n        val udb = bb % 10\n        val result = uda * udb\n \
    \       result"]
stop_tokens:
- "\n    }\n"
