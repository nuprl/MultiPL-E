name: HumanEval_48_is_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\"))\n\
  \    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>> isPalindrome((\"\
  aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n    // (false)\n\
  \    def isPalindrome(text : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\"\
  )) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
  aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
  xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"\
  xywzx\")) == (false));\n    }\n\n}\n"
completions: ["        def isPalindromeHelper(text : String, start : Int, end : Int)\
    \ : Boolean = {\n            if (start == end) return true\n            if (start\
    \ == end + 1) return true\n            if (text(start) != text(end)) return false\n\
    \            return isPalindromeHelper(text, start + 1, end - 1)\n        }\n\
    \        return isPalindromeHelper(text, 0, text.length - 1)", '        return
    text == text.reverse', "        val length = text.length\n        for (i <- 0\
    \ until length/2) {\n            if (text(i) != text(length - i - 1)) return false\n\
    \        }\n        return true", '        text.size > 1 && (text.take(1) == text.takeRight(1)
    && isPalindrome(text.substring(1, text.size - 1)))', "        def recur(text :\
    \ String, i : Int) : Boolean = {\n            if (i >= text.length) return true\n\
    \            if (text(i) != text(text.length - 1 - i)) return false\n        \
    \    return recur(text, i + 1)\n        }\n        return recur(text, 0)", " \
    \       for (i <- 0 until text.length / 2) {\n            if (text(i) != text(text.length\
    \ - i - 1)) return false\n        }\n        return true", "        if (text.length\
    \ == 0) {\n            return true\n        }\n        var left = 0\n        var\
    \ right = text.length - 1\n        while (left < right) {\n            if (text(left)\
    \ != text(right)) {\n                return false\n            }\n           \
    \ left += 1\n            right -= 1\n        }\n        return true", "      \
    \  for (i <- 0 until text.length / 2)\n            if (text(i) != text(text.length\
    \ - i - 1))\n                return false\n        return true", "        val\
    \ len = text.length;\n        for (i <- 0 until len/2) {\n            if (text(i)\
    \ != text(len - i - 1)) return false;\n        }\n        return true;", "   \
    \     val length = text.length\n        for (i <- 0 until length / 2) {\n    \
    \        if (text(i) != text(length - i - 1)) {\n                return false\n\
    \            }\n        }\n        return true", "        if (text.length == 0)\n\
    \            return true\n        var i = 0\n        var j = text.length - 1\n\
    \        while (i < j) {\n            if (text(i) != text(j))\n              \
    \  return false\n            i += 1\n            j -= 1\n        }\n        return\
    \ true", '        text.equals(text.reverse)', "        val length = text.length\n\
    \        for (i <- 0 until length / 2) {\n            if (text(i) != text(length\
    \ - i - 1)) return false\n        }\n        return true", "        var isPalindrome\
    \ = true\n        for (i <- 0 until text.length/2) {\n            if (text(i)\
    \ != text(text.length - 1 - i)) {\n                isPalindrome = false\n    \
    \        }\n        }\n        return isPalindrome", "        for (i <- 0 until\
    \ (text.length / 2)) {\n            if (text(i) != text(text.length - i - 1))\
    \ return false\n        }\n        return true", "        if (text.length == 0)\
    \ return true\n        val sb = new StringBuilder(text)\n        if (sb.charAt(0)\
    \ != sb.charAt(sb.length - 1)) return false\n        sb.deleteCharAt(0)\n    \
    \    sb.deleteCharAt(sb.length - 1)\n        isPalindrome(sb.toString)", "   \
    \     if (text.length() <= 1)\n            return true\n        if (text.charAt(0)\
    \ != text.charAt(text.length() - 1))\n            return false\n        isPalindrome(text.substring(1,\
    \ text.length() - 1))", "        var len = text.length\n        if (len == 0)\
    \ return true\n        if (len == 1) return true\n        var i = 0\n        while\
    \ (i < len / 2) {\n            if (text(i) != text(len - i - 1)) return false\n\
    \            i += 1\n        }\n        return true", "        var newText = text.toLowerCase.filter(x\
    \ => x.isLetter)\n        newText == newText.reverse", "        var reversedText\
    \ = text.reverse;\n        return text == reversedText;", "        def palindromeChecker(text\
    \ : String, left : Int, right : Int) : Boolean = {\n            if (left > right)\
    \ {\n                true\n            } else if (text(left) != text(right)) {\n\
    \                false\n            } else {\n                palindromeChecker(text,\
    \ left + 1, right - 1)\n            }\n        }\n        if (text.length == 0)\
    \ {\n            return true\n        }\n        palindromeChecker(text, 0, text.length\
    \ - 1)", "        if (text.length == 0) {\n            return true\n        }\n\
    \        else if (text.length == 1) {\n            return true\n        }\n  \
    \      else if (text.length == 2) {\n            return text(0) == text(1)\n \
    \       }\n        else {\n            return text(0) == text(text.length - 1)\
    \ && isPalindrome(text.slice(1, text.length - 1))\n        }", "        if (text.length\
    \ < 2) {\n            return true\n        }\n        return text.charAt(0) ==\
    \ text.charAt(text.length - 1) && isPalindrome(text.substring(1, text.length -\
    \ 1))", "        if (text.size < 2) {\n            return true\n        }\n  \
    \      if (text(0) != text(text.size - 1)) {\n            return false\n     \
    \   }\n        isPalindrome(text.substring(1, text.size - 1))", "        if (text.length\
    \ == 0) {\n            return true\n        }\n        return text == text.reverse",
  "        var i = 0\n        var j = text.length() - 1\n        while (i < j) {\n\
    \            if (text(i) != text(j)) return false\n            i += 1\n      \
    \      j -= 1\n        }\n        return true", "        val length = text.length\n\
    \        var i = 0\n        while (i < length/2) {\n            if (text(i) !=\
    \ text(length - i - 1)) return false\n            i += 1\n        }\n        return\
    \ true", "        if (text.length == 0) return true\n        if (text.length ==\
    \ 1) return true\n        if (text.length == 2) return text(0) == text(1)\n  \
    \      if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))", '        return text == text.reverse', "        if (text.size\
    \ == 0)\n            return true\n        var i = 0\n        var j = text.size\
    \ - 1\n        while (i < j) {\n            if (text(i) != text(j))\n        \
    \        return false\n            i += 1\n            j -= 1\n        }\n   \
    \     return true", "        // >>> isPalindrome((\"\"))\n        // (true)\n\
    \        // >>> isPalindrome((\"aba\"))\n        // (true)\n        // >>> isPalindrome((\"\
    aaaaa\"))\n        // (true)\n        // >>> isPalindrome((\"zbcd\"))\n      \
    \  // (false)\n        if (text.length() == 0) {\n            return true\n  \
    \      }\n        var i = 0\n        var j = text.length() - 1\n        while\
    \ (i < j) {\n            if (text(i) != text(j)) {\n                return false\n\
    \            }\n            i += 1\n            j -= 1\n        }\n        return\
    \ true", "        if (text.size < 2) return true\n        return text(0) == text(text.size\
    \ - 1) && isPalindrome(text.slice(1, text.size - 1))", "        var s = text.toLowerCase\n\
    \        val n = s.length - 1\n        for (i <- 0 to n / 2) {\n            if\
    \ (s(i) != s(n - i)) return false\n        }\n        return true", '        text
    == text.reverse', '        return text == text.reverse', "        if (text.length\
    \ == 0)\n            return true\n        if (text.head == text.last)\n      \
    \      return isPalindrome(text.slice(1, text.length - 1))\n        return false",
  "        var left = 0\n        var right = text.length - 1\n        while (left\
    \ < right) {\n            if (text(left) != text(right)) return false\n      \
    \      left += 1\n            right -= 1\n        }\n        return true", " \
    \       val len = text.length()\n        val half = len / 2\n        for (i <-\
    \ 0 until half) {\n            if (text(i) != text(len - i - 1)) return false\n\
    \        }\n        return true", "        def isPalindromeIter(str : String)\
    \ : Boolean = {\n            if (str.length <= 1) true\n            else if (str.head\
    \ != str.last) false\n            else isPalindromeIter(str.substring(1, str.length\
    \ - 1))\n        }\n        isPalindromeIter(text)", "        // Precondition:\
    \ text.length > 0\n        if (text.length <= 1) {\n            return true\n\
    \        }\n        else if (text.head == text.last) {\n            return isPalindrome(text.substring(1,\
    \ text.length - 1))\n        }\n        else {\n            return false\n   \
    \     }", "        for (i <- 0 until text.length / 2) {\n            if (text(i)\
    \ != text(text.length - i - 1)) return false\n        }\n        return true",
  "        def rec(text : String, i : Int) : Boolean = {\n            if (i == text.length\
    \ / 2) true\n            else {\n                if (text(i) != text(text.length\
    \ - i - 1)) false\n                else rec(text, i + 1)\n            }\n    \
    \    }\n        rec(text, 0)", "        if (text.length <= 1) true\n        else\
    \ if (text.head == text.last) isPalindrome(text.substring(1, text.length - 1))\n\
    \        else false", "        var i = 0\n        val j = text.length - 1\n  \
    \      while (i < j) {\n            if (text(i) != text(j)) return false\n   \
    \         i += 1\n            j -= 1\n        }\n        return true", '        return
    (text == text.reverse)', "        val n = text.length()\n        for (i <- 0 until\
    \ n / 2) {\n            if (text(i) != text(n - i - 1)) {\n                return\
    \ false\n            }\n        }\n        return true", "      if (text.length\
    \ < 2) true\n      else if (text.charAt(0) == text.charAt(text.length - 1)) isPalindrome(text.substring(1,\
    \ text.length - 1))\n      else false", "        text.size match {\n         \
    \   case 0 => true\n            case 1 => true\n            case _ => {\n    \
    \            if (text(0) == text(text.size - 1)) isPalindrome(text.substring(1,\
    \ text.size - 1))\n                else false\n            }\n        }", '        return
    text == text.reverse', '        text.reverse == text', "        val length = text.length\n\
    \        for (i <- 0 until (length / 2))\n            if (text(i) != text(length\
    \ - i - 1))\n                return false\n        return true", "        if (text.length()\
    \ == 0) return true\n        val half = text.length() / 2\n        for (i <- 0\
    \ until half)\n            if (text(i) != text(text.length() - i - 1)) return\
    \ false\n        return true", "        val s = text.toLowerCase\n        s ==\
    \ s.reverse", "        val len = text.length\n        for (i <- 0 until len /\
    \ 2) {\n            if (text(i) != text(len - i - 1)) {\n                return\
    \ false\n            }\n        }\n        return true", "        var reverse\
    \ = new StringBuilder(text).reverse.toString\n        return text == reverse",
  "        val length = text.length\n        if (length == 0) return true\n      \
    \  if (length == 1) return true\n        if (length == 2) return text(0) == text(1)\n\
    \        val halfLength = length / 2\n        val lengthIsEven = length % 2 ==\
    \ 0\n        var i = 0\n        for (i <- 0 until halfLength) {\n            if\
    \ (text(i) != text(length - i - 1)) return false\n        }\n        return true",
  "        val n = text.length\n        for (i <- 0 until n / 2) {\n            if\
    \ (text(i) != text(n - i - 1)) return false\n        }\n        return true",
  "        if (text.length == 0) {\n            return true\n        }\n        if\
    \ (text.length == 1) {\n            return true\n        }\n        return text.head\
    \ == text.last && isPalindrome(text.slice(1, text.length - 1))", "        if (text.length()\
    \ <= 1) {\n            return true\n        }\n        if (text.head != text.last)\
    \ {\n            return false\n        }\n        return isPalindrome(text.tail.init)",
  "        var check : Boolean = true\n        for (i <- 0 until (text.length / 2))\
    \ {\n            if (text(i) != text(text.length - 1 - i)) check = false\n   \
    \     }\n        return check", "        val l : Int = text.length\n        return\
    \ (text.take(l / 2) == text.takeRight(l / 2).reverse)", "        var i = 0\n \
    \       var j = text.length - 1\n        while (i < j) {\n            if (text(i)\
    \ != text(j)) return false\n            i += 1\n            j -= 1\n        }\n\
    \        return true", "        if (text.length == 0) return true\n        val\
    \ mid = text.length / 2\n        for (i <- 0 until mid) {\n            if (text(i)\
    \ != text(text.length - i - 1)) return false\n        }\n        return true",
  "        if (text.length() <= 1) return true\n        if (text.charAt(0) != text.charAt(text.length()\
    \ - 1)) return false\n        isPalindrome(text.substring(1, text.length() - 1))",
  '        return text == text.reverse', "        if (text.length <= 1) {\n      \
    \      return true\n        }\n        if (text.head == text.last) {\n       \
    \     return isPalindrome(text.substring(1, text.length - 1))\n        }\n   \
    \     return false", "        val length = text.length\n        if (length ==\
    \ 0)\n            return true\n        val halfLength = length / 2\n        for\
    \ (i <- 0 until halfLength) {\n            if (text(i) != text(length - i - 1))\n\
    \                return false\n        }\n        return true", "        if (text.length\
    \ <= 1) return true\n        return text(0) == text(text.length - 1) && isPalindrome(text.slice(1,\
    \ text.length - 1))", '        return text == text.reverse', "        if (text.length\
    \ == 0) return true\n        for (i <- 0 until text.length/2) {\n            if\
    \ (text(i) != text(text.length - 1 - i)) return false\n        }\n        return\
    \ true", "        var i = 0\n        var j = text.length - 1\n        while (i\
    \ < j) {\n            if (text(i) != text(j)) {\n                return false\n\
    \            }\n            i += 1\n            j -= 1\n        }\n        return\
    \ true", "        if (text.length < 2) return true\n        return (text.charAt(0)\
    \ == text.charAt(text.length - 1)) && isPalindrome(text.substring(1, text.length\
    \ - 1))", "        var palindrome = true\n        for (i <- 0 until (text.length()\
    \ / 2)) {\n            if (text(i) != text(text.length() - 1 - i)) palindrome\
    \ = false\n        }\n        return palindrome", "        val n = text.length\n\
    \        for (i <- 0 until n/2)\n            if (text(i) != text(n-i-1))\n   \
    \             return false\n        return true", "        val length = text.length\n\
    \        if (length == 0) {\n            return true\n        }\n        val half\
    \ = length / 2\n        var c = half\n        while (c >= 0) {\n            if\
    \ (text(c) != text(length - c - 1)) {\n                return false\n        \
    \    }\n            c -= 1\n        }\n        return true", "        if (text.length\
    \ == 0) return true\n        if (text.length == 1) return true\n        if (text.length\
    \ == 2) return text(0) == text(1)\n        text(0) == text(text.length - 1) &&\
    \ isPalindrome(text.substring(1, text.length - 1))", "        for (i <- 0 until\
    \ text.length / 2)\n            if (text(i) != text(text.length - i - 1))\n  \
    \              return false\n        return true", "        val reverseText =\
    \ text.reverse\n        return text == reverseText", '        return text == text.reverse',
  '        return text == text.reverse', "        text.length match {\n          \
    \  case 1 => true\n            case _ => {\n                text.head == text.last\
    \ && isPalindrome(text.slice(1, text.length - 1))\n            }\n        }",
  '        return text == text.reverse', "        if (text.length == 0)\n        \
    \    return true\n        if (text.length == 1)\n            return true\n   \
    \     var n = text.length / 2\n        var i = 0\n        while (i < n) {\n  \
    \          if (text(i) != text(text.length - 1 - i))\n                return false\n\
    \            i += 1\n        }\n        return true", "        if (text.size <=\
    \ 1) return true\n        var result = true\n        for (i <- 0 until text.size\
    \ / 2) {\n            if (text(i) != text(text.size - 1 - i)) result = false\n\
    \        }\n        return result", "        if (text.length < 2)\n          \
    \  return true\n        else if (text.substring(0, 1) == text.substring(text.length\
    \ - 1, text.length))\n            return isPalindrome(text.substring(1, text.length\
    \ - 1))\n        else\n            return false", "        val length = text.length()\n\
    \        if (length == 0) return true\n        var i = 0\n        while (i < length\
    \ / 2) {\n            if (text(i) != text(length - i - 1)) return false\n    \
    \        i += 1\n        }\n        return true", "        var isPalindrome =\
    \ true\n        var i = 0\n        while (i < text.length / 2 && isPalindrome)\
    \ {\n            if (text(i) != text(text.length - 1 - i)) {\n               \
    \ isPalindrome = false\n            }\n            i += 1\n        }\n       \
    \ isPalindrome", "        for (i <- 0 until text.length/2) {\n            if (text(i)\
    \ != text(text.length - i - 1)) {\n                return false\n            }\n\
    \        }\n        return true", "        if (text.length() == 0) return true\n\
    \        if (text.length() == 1) return true\n        if (text.head == text.last)\
    \ {\n            isPalindrome(text.substring(1, text.length() - 1))\n        }\
    \ else {\n            false\n        }", "        def sub1(text : String, i :\
    \ Int) : Boolean = {\n            if (i >= text.length / 2) true\n           \
    \ else if (text(i) != text(text.length - 1 - i)) false\n            else sub1(text,\
    \ i + 1)\n        }\n        sub1(text, 0)", "        if (text.length <= 1) return\
    \ true\n        else if (text.head == text.last) return isPalindrome(text.slice(1,\
    \ text.length - 1))\n        else return false", '        text.equals(text.reverse)',
  "        def isPal(text : String, offset : Int) : Boolean = {\n            if (offset\
    \ < text.length / 2) isPal(text, offset + 1) && text(offset) == text(text.length\
    \ - offset - 1)\n            else true\n        }\n        isPal(text, 0)", " \
    \       if (text.length == 0)\n            return true\n        var l = 0\n  \
    \      var r = text.length - 1\n        while (l < r) {\n            if (text(l)\
    \ != text(r))\n                return false\n            l += 1\n            r\
    \ -= 1\n        }\n        return true", "        val isEven = text.length % 2\
    \ == 0\n        val splitPoint = text.length / 2\n        val characters = text.toCharArray()\n\
    \        for (i <- 0 until splitPoint) {\n            if (characters(i) != characters(text.length\
    \ - i - 1)) {\n                return false\n            }\n        }\n      \
    \  return true", '        return text == text.reverse', '        return (text
    == text.reverse)', "        for (i <- 0 until text.length / 2)\n            if\
    \ (text(i) != text(text.length - i - 1))\n                return false\n     \
    \   return true", "        if (text.size <= 1) true\n        else text.head ==\
    \ text.last && isPalindrome(text.substring(1, text.size - 1))", '        text.size
    <= 1 || (text.head == text.last && isPalindrome(text.tail.init))', "        val\
    \ length = text.length\n        if (length == 0) return true\n        if (length\
    \ == 1) return true\n        if (length == 2) return text(0) == text(1)\n    \
    \    if (text(0) != text(length - 1)) return false\n        else return isPalindrome(text.substring(1,\
    \ length - 1))", "        val n = text.length\n        for (i <- 0 until n / 2)\
    \ {\n            if (text(i) != text(n - i - 1)) return false\n        }\n   \
    \     return true", '        return (text == text.reverse)', '        text ==
    text.reverse', "        if (text.length < 2)\n            return true\n      \
    \  if (text.charAt(0) != text.charAt(text.length - 1))\n            return false\n\
    \        return isPalindrome(text.substring(1, text.length - 1))", "        text.length\
    \ match {\n            case 0 => true\n            case 1 => true\n          \
    \  case 2 => {\n                if (text(0) == text(1)) true\n               \
    \ else false\n            }\n            case 3 => {\n                if (text(0)\
    \ == text(2)) true\n                else false\n            }\n            case\
    \ _ => {\n                val head = text(0)\n                val tail = text(text.length\
    \ - 1)\n                if (head == tail) isPalindrome(text.substring(1, text.length\
    \ - 1))\n                else false\n            }\n        }", "        if (text.length()\
    \ == 0)\n            return true\n        else if (text.charAt(0) == text.charAt(text.length()\
    \ - 1))\n            return isPalindrome(text.substring(1, text.length() - 1))\n\
    \        else\n            return false", '        return text == text.reverse',
  '        text == text.reverse', "        if (text.length() == 0) {\n           \
    \ return true\n        }\n        if (text.charAt(0) == text.charAt(text.length()\
    \ - 1)) {\n            return isPalindrome(text.substring(1, text.length() - 1))\n\
    \        }\n        return false", "        if (text.length == 0) return true\n\
    \        var i = 0\n        var j = text.length - 1\n        while (i < j) {\n\
    \            if (text(i) != text(j)) return false\n            i += 1\n      \
    \      j -= 1\n        }\n        return true", "        def isPalindromeRec(text\
    \ : String, i : Int, j : Int) : Boolean = {\n            if (i >= j)\n       \
    \         true\n            else if (text(i) != text(j))\n                false\n\
    \            else\n                isPalindromeRec(text, i + 1, j - 1)\n     \
    \   }\n        isPalindromeRec(text, 0, text.length - 1)", "        val length\
    \ = text.length\n        if (length == 0) return true\n        val middle = length\
    \ / 2\n        val f = text.substring(0, middle)\n        val s = text.substring(middle\
    \ + (length % 2), length)\n        return f == s.reverse", "        var chars\
    \ = text.toCharArray()\n        var result = true\n        for (i <- 0 to chars.length\
    \ / 2) {\n            if (chars(i) != chars(chars.length - 1 - i)) {\n       \
    \         result = false\n            }\n        }\n        return result", " \
    \       if (text.length <= 1) return true\n        if (text(0) != text(text.length\
    \ - 1)) return false\n        isPalindrome(text.slice(1, text.length - 1))", " \
    \       def isPalindromeHelper(text : String, l : Int, r : Int) : Boolean = {\n\
    \            if (l >= r)\n                true\n            else if (text(l) !=\
    \ text(r))\n                false\n            else\n                isPalindromeHelper(text,\
    \ l + 1, r - 1)\n        }\n        isPalindromeHelper(text, 0, text.length -\
    \ 1)", "        for (i <- 0 until ceil(text.length / 2).toInt) {\n           \
    \ if (text(i) != text(text.length - 1 - i)) return false\n        }\n        return\
    \ true", '        return text == text.reverse', "        for (i <- 0 until text.length\
    \ / 2) {\n            if (text(i) != text(text.length - i - 1)) return false\n\
    \        }\n        return true", '        return text == text.reverse', '        text.zip(text.reverse).forall(pair
    => pair._1 == pair._2)', "        val len = text.length\n        for (i <- 0 until\
    \ len / 2)\n            if (text(i) != text(len - i - 1))\n                return\
    \ false\n        return true", "        val list = text.toList\n        val half\
    \ = list.length / 2\n        list.slice(0, half) == list.slice(half, list.length).reverse",
  '        text == text.reverse', "        // Reverse and compare to original. \n\
    \        return text == text.reverse", "        for (i <- 0 until text.length\
    \ / 2) {\n            if (text(i) != text(text.length - i - 1)) return false\n\
    \        }\n        return true", "        var isPalindrome = true\n        var\
    \ length = text.length\n        for (i <- 0 until length / 2) {\n            isPalindrome\
    \ = (text(i) == text(length - i - 1))\n            if (!isPalindrome) {\n    \
    \            return false\n            }\n        }\n        return isPalindrome",
  "        var res = true\n        val n = text.length\n        for (i <- 0 until\
    \ (n / 2)) {\n            if (text(i) != text(n - i - 1)) {\n                res\
    \ = false\n            }\n        }\n        return res", '        return text
    == text.reverse', "        if (text.length == 0) return true\n        for (i <-\
    \ 0 until text.length / 2) {\n            if (text(i) != text(text.length - 1\
    \ - i)) return false\n        }\n        return true", "        // Trivial case\n\
    \        if (text.length <= 1) {\n            return true\n        }\n       \
    \ // Recursive case\n        else {\n            if (text(0) == text(text.length\
    \ - 1)) {\n                return isPalindrome(text.slice(1, text.length - 1))\n\
    \            }\n            else {\n                return false\n           \
    \ }\n        }", "        val v1 = text.toList\n        v1 == v1.reverse", '        text
    == text.reverse', '        return text == text.reverse', "        var n = text.length\n\
    \        for (i <- (0 until n / 2)) {\n            if (text(i) != text(n - i -\
    \ 1)) {\n                return false\n            }\n        }\n        return\
    \ true", '        text == text.reverse', '        return text == text.reverse',
  "        var s = text.toList\n        var i = 0\n        var j = s.length - 1\n\
    \        while (i < j) {\n            if (s(i) != s(j)) {\n                return\
    \ false\n            }\n            i += 1\n            j -= 1\n        }\n  \
    \      return true", "        if (text.length <= 1) {\n            return true\n\
    \        }\n        if (text.head == text.last) {\n            return isPalindrome(text.substring(1,\
    \ text.length - 1))\n        }\n        return false", "        val half = text.length\
    \ / 2\n        val left = text.substring(0, half)\n        val right = text.substring(half\
    \ + text.length % 2, text.length)\n        left == right.reverse", "        var\
    \ n = text.length()\n        var i = 0\n        while (i < n / 2) {\n        \
    \    if (text(i) != text(n - i - 1)) {\n                return false\n       \
    \     }\n            i += 1\n        }\n        return true", "        val s =\
    \ text.reverse\n        s == text", "        if (text.length == 0) {\n       \
    \     return true\n        }\n        else if (text.length == 1) {\n         \
    \   return true\n        }\n        else if (text.charAt(0) == text.charAt(text.length\
    \ - 1)) {\n            return isPalindrome(text.substring(1, text.length - 1))\n\
    \        }\n        else {\n            return false\n        }", "        val\
    \ length = text.length\n        if (length == 0) return true\n        else if\
    \ (length == 1) return true\n        else if (length == 2) return text(0) == text(1)\n\
    \        else {\n            val hl = length / 2\n            val isEven = length\
    \ % 2 == 0\n            val mid = if (isEven) hl else hl + 1\n            val\
    \ firstHalf = text.substring(0, mid)\n            val secondHalf = if (isEven)\
    \ text.substring(hl) else text.substring(hl + 1)\n            val secondHalfReversed\
    \ = secondHalf.reverse\n            firstHalf == secondHalfReversed\n        }",
  "        var i = 0\n        var j = text.length - 1\n        while (i < j) {\n \
    \           if (text(i) != text(j)) return false\n            i += 1\n       \
    \     j -= 1\n        }\n        return true", "        def loop(a : Int, b :\
    \ Int) : Boolean = {\n            if (a >= b) return true\n            if (text(a)\
    \ != text(b)) return false\n            loop(a + 1, b - 1)\n        }\n      \
    \  loop(0, text.length - 1)", "        if (text.length <= 1) {\n            return\
    \ true\n        }\n        else if (text.charAt(0) == text.charAt(text.length\
    \ - 1)) {\n            return isPalindrome(text.substring(1, text.length - 1))\n\
    \        }\n        else {\n            return false\n        }", "        def\
    \ _isPalindrome(text : String, begin : Int, end : Int) : Boolean = {\n       \
    \     if (begin == end) return true\n            if (begin + 1 == end) return\
    \ text(begin) == text(end)\n            if (text(begin) != text(end)) return false\n\
    \            return _isPalindrome(text, begin + 1, end - 1)\n        }\n     \
    \   return _isPalindrome(text, 0, text.length - 1)", "        def func(i : Int,\
    \ j : Int) : Boolean = {\n            if (i > j) return true\n            if (text(i)\
    \ != text(j)) return false\n            return func(i + 1, j - 1)\n        }\n\
    \        func(0, text.length - 1)", "        val start : Int = 0\n        val\
    \ end : Int = text.length - 1\n        if (start == end) return true\n       \
    \ else if (start > end) return true\n        else {\n            if (text(start)\
    \ == text(end)) return isPalindrome(text.substring(start + 1, end))\n        \
    \    else return false\n        }", "        for (i <- 0 until text.length/2)\n\
    \            if (text(i) != text(text.length - i - 1))\n                return\
    \ false\n        return true", "        if (text.length == 0) return true\n  \
    \      return text == text.reverse", "        val len = text.length()\n      \
    \  for (i <- 0 until len/2) {\n            if (text(i) != text(len - i - 1)) {\n\
    \                return false\n            }\n        }\n        return true",
  "        text.length match {\n            case 1 => true\n            case 2 =>\
    \ text(0) == text(1)\n            case n if n > 2 => {\n                if (text(0)\
    \ == text(n - 1)) isPalindrome(text.substring(1, n - 1))\n                else\
    \ false\n            }\n            case _ => throw new Exception(\"isPalindrome:\
    \ string is empty\")\n        }", '        text == text.reverse', "        if\
    \ (text.length < 2) {\n            return true\n        }\n        return text.head\
    \ == text.last && isPalindrome(text.substring(1, text.length - 1))", "       \
    \ var l = text.length()\n        var i = 0\n        while (i < l) {\n        \
    \    if (text(i) != text(l - i - 1)) {\n                return false\n       \
    \     }\n            i += 1\n        }\n        return true", "        if (text.length\
    \ == 0) return true\n        if (text.length == 1) return true\n        for (i\
    \ <- 0 until text.length / 2) {\n            if (text(i) != text(text.length -\
    \ 1 - i)) return false\n        }\n        return true", "        if (text.length()\
    \ < 2) {\n            return true\n        }\n        if (text.charAt(0) != text.charAt(text.length()\
    \ - 1)) {\n            return false\n        }\n        return isPalindrome(text.substring(1,\
    \ text.length() - 1))", "        val text_rev = text.reverse\n        return text_rev\
    \ == text", "        if (text.length() <= 1) return true\n        else {\n   \
    \         if (text.head == text.last) isPalindrome(text.tail.init)\n         \
    \   else return false\n        }", "        if (text.length == 0) return true\n\
    \        var (i, j) = (0, text.length - 1)\n        while (i < j) {\n        \
    \    if (text(i) != text(j)) return false\n            i += 1\n            j -=\
    \ 1\n        }\n        return true", "        if (text.length == 0) return true\n\
    \        if (text.length == 1) return true\n        if (text.charAt(0) == text.charAt(text.length\
    \ - 1)) {\n            return isPalindrome(text.substring(1, text.length - 1))\n\
    \        }\n        return false", "        if (text.length == 0) return true\n\
    \        val str = text.toLowerCase()\n        val len = str.length\n        for\
    \ (i <- 0 until floor(len/2).toInt) {\n            if (str(i) != str(len - i -\
    \ 1)) return false\n        }\n        return true", "        text.length match\
    \ {\n            case 0 => true\n            case 1 => true\n            case\
    \ _ => {\n                if (text(0) == text(text.length - 1)) {\n          \
    \          isPalindrome(text.substring(1, text.length - 1))\n                }\
    \ else {\n                    false\n                }\n            }\n      \
    \  }", "        val len = text.length()\n        for (i <- 0 until len / 2) {\n\
    \            if (text(i) != text(len - i - 1)) return false\n        }\n     \
    \   return true", "        var i = 0\n        var j = text.length - 1\n      \
    \  while (i < j) {\n            if (text(i) != text(j)) return false\n       \
    \     i += 1\n            j -= 1\n        }\n        return true", "        if\
    \ (text.length <= 1) true\n        else if (text.head == text.last) isPalindrome(text.substring(1,\
    \ text.length - 1))\n        else false", "        if (text.size == 0) {\n   \
    \         return true\n        }\n        var array = text.toCharArray\n     \
    \   while (array.size > 1) {\n            if (array(0) != array(array.size - 1))\
    \ {\n                return false\n            }\n            array = array.slice(1,\
    \ array.size - 1)\n        }\n        return true", '        return text == text.reverse',
  '        text.reverse == text', "        if (text.length == 0) return true\n   \
    \     else if (text.length == 1) return true\n        else if (text.length ==\
    \ 2) return text(0) == text(1)\n        else return text(0) == text(text.length\
    \ - 1) && isPalindrome(text.substring(1, text.length - 1))", "        val length\
    \ = text.length\n        for (i <- 0 until length/2)\n            if (text(i)\
    \ != text(length - i - 1))\n                return false\n        return true",
  "        def reverse(text : String) : String = {\n            def loop(index : Int,\
    \ result : String) : String =\n                if (index == text.length) result\n\
    \                else loop(index + 1, text(index) + result)\n            loop(0,\
    \ \"\")\n        }\n        if (text == reverse(text)) true\n        else false",
  '        return text == text.reverse', '        return text == text.reverse', " \
    \       def isPalindromeRecursive(start : Int, end : Int) : Boolean = {\n    \
    \        if (start > end) {\n                true\n            } else if (text(start)\
    \ != text(end)) {\n                false\n            } else {\n             \
    \   isPalindromeRecursive(start + 1, end - 1)\n            }\n        }\n    \
    \    isPalindromeRecursive(0, text.length - 1)", "        if (text.length() <=\
    \ 1) {\n            return true\n        }\n        val first = text.charAt(0)\n\
    \        val last = text.charAt(text.length() - 1)\n        if (first != last)\
    \ {\n            return false\n        }\n        return isPalindrome(text.substring(1,\
    \ text.length() - 1))", '        text.length <= 1 || (text.head == text.last &&
    isPalindrome(text.tail.init))', "        val limit = text.length / 2\n       \
    \ var i = 0\n        while (i < limit) {\n            if (text(i) != text(text.length\
    \ - 1 - i)) {\n                return false\n            }\n            i += 1\n\
    \        }\n        return true", "        val len = text.length\n        for\
    \ (i <- 0 until len / 2) {\n            if (text(i) != text(len - i - 1)) {\n\
    \                return false\n            }\n        }\n        return true",
  "        val midPoint = (text.length / 2)\n        for (i <- 0 until midPoint)\n\
    \            if (text(i) != text(text.length - 1 - i)) return false\n        return\
    \ true", "        var i = 0\n        var j = text.length - 1\n        while (i\
    \ < j) {\n            if (text(i) != text(j)) return false\n            i += 1\n\
    \            j -= 1\n        }\n        return true", "        if (text.length\
    \ == 0) {\n            return true\n        }\n        if (text.length == 1) {\n\
    \            return true\n        }\n        var s = text.substring(0, 1)\n  \
    \      var e = text.substring(text.length - 1, text.length)\n        if (s ==\
    \ e) {\n            return isPalindrome(text.substring(1, text.length - 1))\n\
    \        }\n        return false", "        for (i <- 0 until text.length/2)\n\
    \            if (text(i) != text(text.length - i - 1))\n                return\
    \ false\n        return true", "        if (text.length <= 1) return true\n  \
    \      else if (text.charAt(0) == text.charAt(text.length - 1)) isPalindrome(text.substring(1,\
    \ text.length - 1))\n        else return false", "        var flag = true\n  \
    \      var i = 0\n        while (i < text.length / 2) {\n            if (text(i)\
    \ != text(text.length - 1 - i)) flag = false\n            i += 1\n        }\n\
    \        return flag", "        // Case where the text is empty\n        if (text.isEmpty)\
    \ {\n            return true\n        }\n        // Case where the text has one\
    \ character\n        if (text.length == 1) {\n            return true\n      \
    \  }\n        // Case where the text has two characters\n        if (text.length\
    \ == 2) {\n            return text(0) == text(1)\n        }\n        // Case where\
    \ the text has more than two characters\n        if (text(0) == text(text.length\
    \ - 1)) {\n            return isPalindrome(text.substring(1, text.length - 1))\n\
    \        }\n        return false", '        return text == text.reverse', "  \
    \      var reversedText = text.reverse\n        return text == reversedText",
  '        return text == text.reverse', "        if (text.length == 0) {\n      \
    \      return true\n        }\n        var i = 0\n        var j = text.length\
    \ - 1\n        while (i < j) {\n            if (text(i) != text(j)) return false\n\
    \            i += 1\n            j -= 1\n        }\n        return true", "  \
    \      if (text.length <= 1) return true\n        else if (text.head == text.last)\
    \ {\n            isPalindrome(text.tail.dropRight(1))\n        } else return false",
  "        var i = 0\n        var j = text.length - 1\n        while (i < j) {\n \
    \           if (text(i) != text(j)) return false\n            i += 1\n       \
    \     j -= 1\n        }\n        return true", "      if (text.length == 0) return\
    \ true\n      var isPal = true\n      for (i <- 0 to (text.length / 2 - 1)) {\n\
    \        if (text(i) != text(text.length - 1 - i)) {\n          isPal = false\n\
    \        }\n      }\n      return isPal", "        val len = text.length\n   \
    \     if (len == 0) return true\n        val iter = (0 until len / 2).iterator\n\
    \        while (iter.hasNext) {\n            val i = iter.next\n            if\
    \ (text(i) != text(len - i - 1)) return false\n        }\n        return true",
  "        val length = text.length\n        for (i <- 0 until length / 2) {\n   \
    \         if (text(i) != text(length - i - 1)) return false\n        }\n     \
    \   return true", "        if (text.length == 0) return true\n        if (text.length\
    \ == 1) return true\n        if (text.length == 2) return text(0) == text(1)\n\
    \        if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))", "      var temp = text.toList.reverse\n      if (text ==\
    \ temp.mkString) return true\n      else return false", "        val length =\
    \ text.length\n        for (i <- 0 until length/2) {\n            if (text(i)\
    \ != text(length - i - 1)) return false\n        }\n        return true"]
stop_tokens:
- "\n    }\n"
