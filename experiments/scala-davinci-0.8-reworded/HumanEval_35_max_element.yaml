name: HumanEval_35_max_element
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
  \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
  \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l :\
  \ List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
  \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
  \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
completions: ["        var max = 0l\n        for (x <- l) if (x > max) max = x\n \
    \       return max", "        val m : Long = 0l\n        return 0l.toLong", " \
    \       var max : Long = l(0)\n        for (i <- 1 until l.length) {\n       \
    \     if (l(i) > max) max = l(i)\n        }\n        return max", "        //if\
    \ (l.length == 0) throw new Exception(\"maxElement: Empty List\")\n        if\
    \ (l.length == 0) 0l\n        else l.max", '        return l.max', "        def\
    \ maxElementR(l : List[Long], max : Long) : Long = {\n            if (l.isEmpty)\
    \ max\n            else {\n                val x = l.head\n                val\
    \ m = if (x > max) x else max\n                maxElementR(l.tail, m)\n      \
    \      }\n        }\n        maxElementR(l, 0l)", "        val list = l\n    \
    \    var max = list(0)\n        for (i <- list) {\n            if (i > max) {\n\
    \                max = i\n            }\n        }\n        return max", '        l.max',
  "        var m = Long.MinValue\n        for (i <- l) if (i > m) m = i\n        return\
    \ m", '        return l.reduceLeft((a, b) => if (a > b) a else b)', "        if\
    \ (l.length == 0) return 0l\n        var m : Long = l(0)\n        for (x <- l)\
    \ m = if (x > m) x else m\n        return m", "        // your code goes here\n\
    \        l.max", '        return l.max', '        l.reduce((a, b) => if (a > b)
    a else b)', '        l.max', "        val result = 0l\n        // Write your code\
    \ here\n        return result", '        return l.max', "        var a = l(0)\n\
    \        for (x <- l) {\n            if (x > a) a = x\n        }\n        return\
    \ a", '        l.max', "        if (l.isEmpty) {\n            return 0l\n    \
    \    }\n        else {\n            var m : Long = l.head\n            for (i\
    \ <- l) {\n                if (i > m) {\n                    m = i\n         \
    \       }\n            }\n            return m\n        }", "        def _maxElement(l\
    \ : List[Long], r : Long) : Long = {\n            if (l.length == 0) r\n     \
    \       else _maxElement(l.tail, max(r, l.head))\n        }\n        return _maxElement(l,\
    \ 0l)", "        var max = l(0)\n        for (i <- 1 until l.length) {\n     \
    \       if (l(i) > max) max = l(i)\n        }\n        return max", '        return
    l.max', '        l.max', '      l.max', '      if (l.isEmpty) 0 else l.max', " \
    \       var max = Long.MinValue\n        for (i <- l) {\n            if (i > max)\
    \ max = i\n        }\n        return max", '        return l.max', '        return
    l.max', "        // Fill here!\n        return l.max", "        var max = l(0)\n\
    \        for (e <- l) {\n            if (e > max) {\n                max = e\n\
    \            }\n        }\n        return max", "        // Replace 'pass' with\
    \ the appropriate return value.\n        pass", "        // >>> Long.MaxValue\n\
    \        // 9223372036854775807\n        val result : Long = 1l.toLong\n     \
    \   val result0 : Long = 0l.toLong\n        var result1 : Long = result0\n   \
    \     var j : Long = 0l.toLong\n        var done : Boolean = false\n        var\
    \ nl : List[Long] = l\n        while (!done) {\n            if (nil(nl)) {\n \
    \               done = true\n            } else {\n                val hd : Long\
    \ = head(nl)\n                val tl : List[Long] = tail(nl)\n               \
    \ if (less(result1, hd)) {\n                    result1 = hd\n               \
    \ }\n                j = plus(j, result)\n                nl = tl\n          \
    \  }\n        }\n        result1", "        // Fill here !\n        return 0l",
  '        return l.max', '        l.foldLeft(Long.MinValue)((a, b) => max(a, b))',
  '        return 0l.toLong', '        return 0', '        l.reduceLeft((x, y) =>
    max(x, y))', "        var result : Long = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > result) {\n                result = l(i)\n       \
    \     }\n        }\n        return result", '        l.max', '        l.foldLeft(l.head)((x,
    y) => if (x > y) x else y)', "        // Your code here\n        return 0l.toLong",
  '        return 0', '        l.reduce((x, y) => max(x, y))', '        return l.reduceLeft(_
    max _)', "        var max : Long = Long.MinValue\n        for (e <- l) {\n   \
    \         if (e > max) {\n                max = e\n            }\n        }\n\
    \        return max", '        return l.max', '        return 0l.toLong', '        return
    l.max', '        l.max', "        var max : Long = Long.MinValue\n        for\
    \ (i <- l) {\n            if (i > max) max = i\n        }\n        return max",
  '        0l', '        l.max', '        // Write your code here.', "        var\
    \ result : Long = 0l.toLong\n        if (!l.isEmpty) {\n            result = l.head\n\
    \            for (i <- l) {\n                if (i > result) result = i\n    \
    \        }\n        }\n        return result", '        l.max', '        return
    l.max', "        // Implement this function.\n        var max = 0L\n        for\
    \ (i <- l) {\n            if (i > max) max = i\n        }\n        return max",
  '        l.max', "        def helper(acc : Long, l : List[Long]) : Long = {\n  \
    \          if (l.isEmpty) {\n                acc\n            } else {\n     \
    \           val m = acc max l.head\n                helper(m, l.tail)\n      \
    \      }\n        }\n        helper(l.head, l.tail)", "        var e : Long =\
    \ 0l\n        for (x <- l) {\n            if (x > e) {\n                e = x\n\
    \            }\n        }\n        return e", '        return l.max', "      \
    \  def go(a : Long, l : List[Long]) : Long = {\n            l match {\n      \
    \          case Nil => a\n                case h :: t => go(if (a > h) a else\
    \ h, t)\n            }\n        }\n        go(l.head, l.tail)", '        l.max',
  "        var max : Long = l(0)\n        for (e <- l) max = if (e > max) e else max\n\
    \        return max", "        var x : Long = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > x) {\n                x = l(i)\n       \
    \     }\n        }\n        return x", "        // Write your code here.\n   \
    \     return 0l", "        if (l.length == 0) return 0l\n        var max: Long\
    \ = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) {\n                max\
    \ = l(i)\n            }\n        }\n        return max", "        var m : Long\
    \ = 0\n        l.foreach(p => {\n            if (p > m) {\n                m =\
    \ p\n            }\n        })\n        return m", "        var m = l(0)\n   \
    \     for (x <- l) {\n            if (x > m) {\n                m = x\n      \
    \      }\n        }\n        return m", "        var max : Long = 0l\n       \
    \ for (i <- l) {\n            if (i > max) max = i\n        }\n        return\
    \ max", "        if (l.isEmpty) return 0\n        var m = l.head\n        for\
    \ (e <- l) {\n            if (e > m) m = e\n        }\n        return m", "  \
    \      if (l.length == 0) {\n            0l\n        } else {\n            var\
    \ max : Long = l(0)\n            for (x <- l) {\n                if (x > max)\
    \ {\n                    max = x\n                }\n            }\n         \
    \   max\n        }", "        // Insert your code here.\n        var h = l.head\n\
    \        for (i <- l) {\n            if (i > h) {\n                h = i\n   \
    \         }\n        }\n        return h", "        require(l.length >= 1)\n \
    \       return l.max", '        return l.reduceLeft((x, y) => if (x > y) x else
    y)', "        if (l.size == 0) 0\n        else l.reduceLeft((a, b) => if (a >\
    \ b) a else b)", '        return -1', '        return l.max', "        // >>>\
    \ l.sortWith(_ < _)\n        // List[Long](-10l, -5l, -3l, 0l, 1l, 2l, 3l, 3l,\
    \ 3l, 5l, 9l, 123l)\n        // >>> l.sortWith(_ > _)\n        // List[Long](123l,\
    \ 9l, 5l, 3l, 3l, 3l, 2l, 1l, 0l, -3l, -5l, -10l)\n        return l.sortWith(_\
    \ > _).head", "        var result : Long = l(0)\n        for (num <- l) {\n  \
    \          if (num > result) {\n                result = num\n            }\n\
    \        }\n        return result", "        var m = l(0)\n        for (e <- l)\
    \ {\n            if (e > m) {\n                m = e\n            }\n        }\n\
    \        return m", "        var result : Long = 0\n        result = l.reduceLeft((x\
    \ : Long, y : Long) => { if (x > y) x else y})\n        return result", '        return
    l.reduce((x, y) => if (x > y) x else y)', "        // Replace 0 with your code.\n\
    \        0", '        l.max', '        0l', "        var max = l(0)\n        for\
    \ (i <- 1 until l.length) {\n            if (l(i) > max) max = l(i)\n        }\n\
    \        return max", '        0l', "        var m : Long = 0\n        for (i\
    \ <- l) {\n            if (i > m) {\n                m = i\n            }\n  \
    \      }\n        return m", "        var x : Long = l(0)\n        var i : Int\
    \ = 1\n        while (i < l.length) {\n            if (l(i) > x) x = l(i)\n  \
    \          i += 1\n        }\n        return x", "        def maxElementHelper(l\
    \ : List[Long], m : Long) : Long = {\n            if (l.length == 0) m\n     \
    \       else {\n                val n = l.head\n                if (n > m) maxElementHelper(l.tail,\
    \ n)\n                else maxElementHelper(l.tail, m)\n            }\n      \
    \  }\n        maxElementHelper(l, 0l)", '        l.foldLeft(Long.MinValue)((a,
    b) => max(a, b))', "        var maxSoFar = l(0)\n        for (e <- l) {\n    \
    \        if (e > maxSoFar) {\n                maxSoFar = e\n            }\n  \
    \      }\n        return maxSoFar", "        if (l.isEmpty) 0\n        else l.foldLeft(l.head)((x,\
    \ y) => max(x, y))", "        var t = l.head\n        for (i <- l) {\n       \
    \     if (i > t) {\n                t = i\n            }\n        }\n        return\
    \ t", "        var maxValue : Long = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > maxValue) maxValue = l(i)\n        }\n        return\
    \ maxValue", '        l.reduceLeft((a, b) => a max b)', '        return l.max',
  "        // Your Code Here\n        return l.max", "        var x = 0l\n       \
    \ for (i <- l) {\n            if (i > x) {\n                x = i\n          \
    \  }\n        }\n        return x", '        return l.max', "        // Write\
    \ your code here.\n        return 0l.toLong", "        if (l.isEmpty) return 0l\n\
    \        var ans = l.head\n        for (x <- l) {\n            if (x > ans) ans\
    \ = x\n        }\n        return ans", '        l.max', '        return l.reduce((x,
    y) => max(x, y))', '        return l.reduceLeft((x, y) => max(x, y))', "     \
    \   val n = l.length\n        var max : Long = 0\n        for (i <- 0 until n)\
    \ {\n            val e = l(i)\n            if (e > max) {\n                max\
    \ = e\n            }\n        }\n        return max", "        var curMax = l(0)\n\
    \        for (i <- l) {\n            if (i > curMax) curMax = i\n        }\n \
    \       return curMax", "        // Replace the following line with your implementation.\n\
    \        return 0l", "        var result : Long = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > result) {\n                result = l(i)\n\
    \            }\n        }\n        return result", "        var max: Long = 0\n\
    \        for (i <- l) {\n            if (i > max) {\n                max = i\n\
    \            }\n        }\n        return max", '        return l.max', '        return
    l.max', '        l.max', '        l.max', '        l.foldLeft(Long.MinValue)((acc,
    x) => if (x > acc) x else acc)', "        var max : Long = 0l\n        for (i\
    \ <- l) {\n            if (i > max) {\n                max = i\n            }\n\
    \        }\n        return max", '        l.max', "        var result : Long =\
    \ 0\n        for (i <- l) if (i > result) result = i\n        return result",
  "        // Your code here (replace 0 with your code, and remove this comment)\n\
    \        return 0", '        l.foldLeft(Long.MinValue)((x, y) => max(x, y))',
  "        var max : Long = 0l\n        for (n <- l) {\n            if (n > max) {\n\
    \                max = n\n            }\n        }\n        return max", '        if
    (l.isEmpty) 0l else l.reduceLeft((a, b) => if (a > b) a else b)', "        var\
    \ max = Long.MinValue\n        for (x <- l) {\n            if (x > max) max =\
    \ x\n        }\n        return max", "        var m : Long = l(0)\n        l.foreach(x\
    \ => if (x > m) m = x)\n        return m", "        var max : Long = 0l.toLong\n\
    \        for (e <- l) {\n            if (e > max) max = e\n        }\n       \
    \ return max", '        return l.max', '        return l.max', '        return
    (l.max)', '        return l.max', "        var result : Long = 0\n        result\
    \ = l.reduceLeft((x, y) => if (x > y) x else y)\n        return result", '        l.foldLeft(Long.MinValue)((a,
    b) => if (a > b) a else b)', "\t\tl.max", "        var maximum = l(0)\n      \
    \  l.foreach(maximum = maximum.max(_))\n        return maximum", '        l.foldLeft(0l)(max)',
  "        // Insert your code here.\n        return l.max", '        return l.max',
  "      var m : Long = l(0)\n      for (i <- l) m = max(m, i)\n      return m", '        return
    0l.toLong', "        // Write your code here...\n        return 0l.toLong", '        l.foldLeft(l.head)((b,
    a) => if (a > b) a else b)', '        return l.max', "        var max = 0l\n \
    \       for (i <- l) {\n            if (i > max) max = i\n        }\n        return\
    \ max", "        var max = 0l\n        for (i <- l) {\n            if (i > max)\
    \ max = i\n        }\n        return max", "        if (l.isEmpty) 0l\n      \
    \  else l.reduceLeft((a, b) => if (a > b) a else b)", '        l.foldLeft(l.head)((a,
    b) => if (a > b) a else b)', '        return l.max', "        // Good luck! Add\
    \ any helper functions you may need.\n        l.max", '        return l.max',
  "        if (l.isEmpty) 0\n        else l.reduceLeft(max)", '        l.max', " \
    \       var max : Long = 0l\n        for (v <- l) {\n            if (v > max)\
    \ max = v\n        }\n        return max", "        var max = 0l\n        for\
    \ (i <- l) {\n            if (i > max) max = i\n        }\n        return max",
  '        return l.max', '        l.max', "        require(l.size > 0)\n        val\
    \ max = l.reduce((x, y) => if (x > y) x else y)\n        return max", '        l.reduce((x,
    y) => if (x > y) x else y)', '        l.max', '        l.max', "        var largest\
    \ : Long = l(0)\n        for (x <- l) {\n            if (x > largest) largest\
    \ = x\n        }\n        return largest", '        l.max', "        var max :\
    \ Long = 0l\n        for (i <- l) if (i > max) max = i\n        return max", '        return
    l.max', "        //throw new NotImplementedError()\n        var max = 0l\n   \
    \     for (el <- l) {\n            if (el > max) {\n                max = el\n\
    \            }\n        }\n        return max", '        return -1l.toLong', '        l.max',
  "        var m : Long = l(0)\n        l.foreach(x => if (x > m) m = x)\n       \
    \ return m", "        var max : Long = l(0)\n        for (item <- l) {\n     \
    \       if (item > max) max = item\n        }\n        return max", "        val\
    \ sorted = l.sorted\n        sorted(sorted.length - 1)", '        0l', '        l.max',
  '        l.max', '        return 0l', '        l.max', '        l.reduceLeft((a,
    b) => max(a, b))', '        return l.max', "        def maxElement0(l : List[Long],\
    \ max: Long) : Long = {\n            if (l.length == 0) max\n            else\
    \ maxElement0(l.tail, if (l.head > max) l.head else max)\n        }\n        if\
    \ (l.length == 0) 0l\n        else maxElement0(l.tail, l.head)", '        0l',
  "        var n = l.size\n        var max : Long = l(0)\n        for (i <- 1 until\
    \ n) {\n            if (l(i) > max) max = l(i)\n        }\n        return max",
  "        var a : Long = l(0)\n        for (i <- 1 until l.length) {\n          \
    \  if (l(i) > a) a = l(i)\n        }\n        return a", "        def iter(l :\
    \ List[Long], m : Long) : Long = {\n            l match {\n                case\
    \ Nil => m\n                case h :: t => iter(t, max(m, h))\n            }\n\
    \        }\n        iter(l, 0l)", '        return l.max', '        return l.max',
  '        return l.max', '        l.max', "        if (l.size == 0) {\n         \
    \   return 0l\n        }\n        var result : Long = l(0)\n        for (i <-\
    \ 1 until l.size) {\n            result = max(result, l(i))\n        }\n     \
    \   return result", "        def maxElementHelp(l : List[Long], cur : Long) :\
    \ Long = {\n            if (l.isEmpty) cur\n            else maxElementHelp(l.tail,\
    \ max(cur, l.head))\n        }\n        maxElementHelp(l, l.head)", '        return
    l.max', "        require(l.length > 0)\n        var ma : Long = l(0)\n       \
    \ for (i <- 0 until l.length) {\n            if (l(i) > ma) {\n              \
    \  ma = l(i)\n            }\n        }\n        return ma", "        var max =\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (l(i) > max) max\
    \ = l(i)\n        }\n        return max", '        l.foldLeft(Long.MinValue)((a,b)
    => max(a,b))', "        // >>> maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \        // (3l)\n        // >>> maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong)))\n        // (123l)\n        var max : Long = l(0);\n\
    \        for (e <- l) {\n            if (e > max) {\n                max = e;\n\
    \            }\n        }\n        return max;", "        val max = l.max\n  \
    \      return max", '        l.max', '      return l.max', '        return l.max',
  "        // >>> maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    \
    \    // (3l)\n        // >>> maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
    \ -10l.toLong)))\n        // (123l)\n        l.max"]
stop_tokens:
- "\n    }\n"
