name: HumanEval_103_rounded_avg
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given two positive integers n and m, and your task is to compute\
  \ the\n    // average of the integers from n through m (including n and m). \n \
  \   // Round the answer to the nearest integer and convert that to binary.\n   \
  \ // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
  \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
  \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
  \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
  \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
  ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
  \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
  0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
  ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
  \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
  0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
  \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n \
  \   }\n\n}\n"
completions: ["        // your code here\n        if (n > m) return Right(-1)\n  \
    \      var s : BigInt = n\n        for (i <- n+1 to m) {\n            s += i\n\
    \        }\n        var r = s / ((m - n) + 1)\n        r = BigInt(round(r.toDouble))\n\
    \        return Left(r.toString(2))", "        val numbers = (n to m).toList\n\
    \        val sum = numbers.sum\n        val avg = sum / numbers.length\n     \
    \   if (n > m) Left(\"-1\")\n        else Right(avg)", "    \tLeft(\"TODO\")",
  "        // Your code here\n        null", "        if (n > m) {\n            return\
    \ Left(\"-1\")\n        }\n        var sum = 0\n        for (i <- n to m) {\n\
    \            sum += i\n        }\n        var res = (sum / (m - n + 1)).toLong\n\
    \        res = res.toBinaryString.toLong\n        return Right(res)", "      \
    \  if (n <= m) {\n            val avg = BigInt(n).max(m)\n            val avg2\
    \ = BigInt(n).min(m)\n            var avg3 = (avg + avg2 + 1) >> 1\n         \
    \   var s = \"\"\n            while (avg3 > 0) {\n                s = (avg3 &\
    \ 1).toString() + s\n                avg3 >>= 1\n            }\n            Right(s.toLong)\n\
    \        } else {\n            Left(\"-1\")\n        }", "        if (n > m) {\n\
    \            Left(\"-1\")\n        } else {\n            val roundedAvg = round((n\
    \ + m).toDouble / 2).toLong\n            Right(roundedAvg)\n        }", "    \
    \    if (n > m) {\n            Left(\"-1\")\n        } else {\n            val\
    \ mean = (n + m) / 2\n            val binary = BigInt(mean).toString(2)\n    \
    \        Right(binary.toLong)\n        }", "        if (n > m) return Left(\"\
    -1\")\n        val avg = (n + m) / 2\n        var avgBinary : String = (BigInt(avg).toString(2)).reverse\n\
    \        if (avgBinary.size < 32) avgBinary = avgBinary.padTo(32, \"0\").mkString\n\
    \        Right(avgBinary.toLong)", "        if (n > m) Left(\"-1\")\n        else\
    \ {\n            val sum = (n to m).sum\n            val avg = sum / (m - n +\
    \ 1)\n            Right(avg)\n        }", "        var i = 0l\n        var sum\
    \ = 0l\n        if (n > m)\n            return Left(\"-1\")\n        for (i <-\
    \ n to m) {\n            sum += i\n        }\n        return Right(sum / (m -\
    \ n + 1))", "        if (n > m) {\n            Right(-1)\n        } else {\n \
    \           Left(\"0b\" + (BigInt(n + m) / 2).toString(2))\n        }", "    \
    \    if (n > m) Left(\"n > m\")\n        else {\n            val sum = (n to m).sum\n\
    \            val average = (sum + 0.5).toLong\n            Right(average)\n  \
    \      }", "        if (n > m) {\n            return Left(\"-1\")\n        }\n\
    \        val average = (n + m).toFloat / 2\n        val rounded = round(average)\n\
    \        val result = rounded.toLong\n        Right(result)", "        // your\
    \ code here\n        if (n > m) Left(\"-1\")\n        else {\n          val avg\
    \ = (n + m) / 2\n          Right(avg)\n        }", "        val x = abs(n - m)\n\
    \        if (n > m) Left(\"-1\")\n        else if (x == 0) Left(\"0b\" + n.toBinaryString)\n\
    \        else if (x < 2) Left(\"0b\" + ((n + m) / 2).toBinaryString)\n       \
    \ else {\n            val avg = (n + m) / 2\n            val a = avg.toBinaryString\n\
    \            val b = (avg + 1).toBinaryString\n            val sum = a.zip(b).foldLeft(0)\
    \ {(acc, x) => if (x._1 == x._2) acc + 1 else acc}\n            if (sum == a.length)\
    \ Left(\"0b\" + b)\n            else Left(\"0b\" + a)\n        }", "        //\
    \ Your Code Here\n        var sum = 0\n        var count = 0\n        if (n >\
    \ m) {\n            return Left(\"-1\")\n        }\n        for (i <- n to m)\
    \ {\n            sum += i\n            count += 1\n        }\n        val avg\
    \ = sum / count\n        return Right(avg)", "        return if (n <= m) {\n \
    \       \tval avg = floor((n + m) / 2)\n        \tRight(avg)\n        } else {\n\
    \        \tLeft(\"-1\")\n        }", "        if (n > m) return Left(\"n should\
    \ be smaller than m.\")\n        val s = Long2Long(n to m sum) / (m - n + 1)\n\
    \        val a = Long2Int(s).toBinaryString\n        Right(a.tail.toLong)", " \
    \       if (n > m) Left(\"-1\")\n        else {\n            val r = (n + m) /\
    \ 2\n            Right(BigInt(r).toString(2).toLong)\n        }", "        if\
    \ (n <= m) {\n            var avg = (n + m) / 2.0\n            Left(Integer.toBinaryString(floor(avg).toInt))\n\
    \        } else {\n            Right(-1)\n        }", "        if (n > m)\n  \
    \      \treturn Left(\"-1\")\n        else {\n            var sum : Long = 0\n\
    \            var count : Long = 0\n            for (i <- n to m) {\n         \
    \       sum += i\n                count += 1\n            }\n            val avg\
    \ : Long = sum / count\n            return Right(avg)\n        }", "        if\
    \ (n > m) Left(\"-1\")\n        else Right((n + m) / 2)", "        if (n > m)\
    \ Left(\"-1\")\n        else Right((BigInt(n) + m) / 2 toLongArray)", "      \
    \  if (n > m) {\n            Left(\"-1\")\n        } else {\n            val (a,\
    \ b) = (n, m)\n            var sum = a\n            for (i <- (a + 1) to b) {\n\
    \                sum += i\n            }\n            val s = sum.toDouble / (b\
    \ - a + 1)\n            var sb = new StringBuilder()\n            sb.append(\"\
    0b\")\n            var d = floor(s)\n            var c = ceil(s)\n           \
    \ if (d == c) {\n                var i = 0\n                for (i <- 0 to d.toInt)\
    \ {\n                    sb.append(\"1\")\n                }\n            } else\
    \ {\n                var i = 0\n                for (i <- 0 to c.toInt) {\n  \
    \                  sb.append(\"1\")\n                }\n            }\n      \
    \      Left(sb.toString)\n        }", "        if (n > m) return Left(\"-1\")\n\
    \        if (n == m) return Left(n.toBinaryString)\n        val avg = Math.round((n\
    \ + m) / 2.0)\n        return Left(avg.toBinaryString)", "        val res = if\
    \ (n > m) -1 else (n + m) / 2\n        if (res == -1) Right(-1) else Left(Integer.toBinaryString(res.toInt))",
  "        if (n > m) Left(\"-1\")\n        else Right((n + m) / 2l)", "        if\
    \ (n <= m) {\n            val avg = round((n + m) / 2.0)\n            Left(toBinaryString(avg.toLong))\n\
    \        } else {\n            Right(-1l)\n        }", "        if (n > m) Right(-1l)\n\
    \        else {\n            val avg = (n + m) / 2\n            Left(avg.toBinaryString)\n\
    \        }", "        if (n > m) Right(-1l)\n        else {\n            val sum\
    \ = (n to m).sum.toDouble\n            val avg = floor(sum / (m - n + 1)).toLong\n\
    \            val bin = avg.toBinaryString\n            Right(bin.length)\n   \
    \     }", "        if (n > m) return Left(\"-1\")\n        val sum = (n + m) *\
    \ (m - n + 1) / 2\n        val ret = sum / (m - n + 1)\n        Right(ret)", " \
    \     if (n > m) Left(\"-1\")\n      else {\n        val avg = ((n + m) / 2l).toInt\n\
    \        val bin = avg.toBinaryString\n        Right(bin.toLong)\n      }", " \
    \   \tvar sum = 0.0\n    \tvar cnt = 0\n    \tif (n > m) return Left(\"-1\")\n\
    \    \tfor (i <- n to m) {\n    \t\tsum += i\n    \t\tcnt += 1\n    \t}\n    \t\
    val avg = Math.round(sum / cnt)\n    \tRight(avg)", "        if (n > m) return\
    \ Left(\"-1\")\n        val answer = (((n + m) / 2.0) + 0.5).toLong\n        Right(answer)",
  "        def recur(n : Long, m : Long, sum : Long, length : Long) : Either[String,\
    \ Long] = {\n            if (n > m) {\n                Right(-1l)\n          \
    \  } else if (n == m) {\n                Right(sum / length)\n            } else\
    \ {\n                recur(n + 1, m, sum + n, length + 1)\n            }\n   \
    \     }\n        for (avg <- recur(n, m, 0, 0)) yield Integer.toBinaryString(avg.toInt)",
  "        if (n <= m) {\n            val binary = ListBuffer[Int]()\n           \
    \ val sum = Range(n.toInt, m.toInt + 1).map(x => x.toString.toInt).sum\n     \
    \       val rounded = round(sum / (m - n + 1)).toInt\n            (rounded, 2)\
    \ match {\n                case (0, _) => binary += 0\n                case (_,\
    \ b) =>\n                    for (i <- 1 to rounded.toString.length) {\n     \
    \                   binary += (rounded % b)\n                        rounded /=\
    \ b\n                    }\n            }\n            if (binary.size < 3) {\n\
    \                val temp = binary.toList\n                val missing = 3 - temp.size\n\
    \                val buffer = ListBuffer[Int]()\n                for (i <- 1 to\
    \ missing) buffer += 0\n                buffer.toList ++ temp\n              \
    \  Left(\"0b\" + buffer.toList.reverse.mkString)\n            }\n            else\
    \ Left(\"0b\" + binary.toList.reverse.mkString)\n        }\n        else Right(-1l)",
  "        def average(n : Long, m : Long) : Double = (n + m) / 2.0\n        val avg\
    \ = average(n, m)\n        if (avg < n || avg > m) Left(\"-1\")\n        else\
    \ Right(math.round(avg).toLong)", "        // Your Code Here\n        Right(0)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = round((n\
    \ + m) / 2.0)\n        Right(avg)", "        // your code here\n        var a\
    \ : String = \"\"\n        if (n > m) a = \"A\"\n        else {\n            val\
    \ sum = (n to m).foldLeft(0l)(_ + _)\n            val avg = sum / ((m - n) + 1)\n\
    \            a = avg.toBinaryString\n        }\n        if (a == \"A\") Right(-1l)\n\
    \        else Left(\"0b\" + a)", "        if (n > m) Left(\"-1\")\n        else\
    \ {\n            val sum = n + m\n            val avg = (sum / 2) + (sum % 2)\n\
    \            Right(avg)\n        }", "        if (n > m) Right(-1l)\n        else\
    \ {\n            val s = for (i <- n to m) yield i\n            val avg = s.sum\
    \ / s.length\n            Right(java.lang.Long.parseLong(Integer.toBinaryString(avg.toInt)))\n\
    \        }", "        // Fill in the function body\n        if (n > m) {\n   \
    \         return Left(\"ERROR\")\n        }\n        var sum = 0l\n        for\
    \ (i <- n to m) {\n            sum += i\n        }\n        return Right(sum /\
    \ (m - n + 1))", "        if (n > m) {\n            Left(\"-1\")\n        } else\
    \ {\n            val s = (n + m) / 2\n            Left(\"0b\" + s.toBinaryString)\n\
    \        }", "        if (n > m) return Left(\"-1\")\n        val s = (BigInt(n)\
    \ to BigInt(m)).sum\n        val r = (s / (BigInt(m) - BigInt(n) + 1)).round.toLong\n\
    \        val b = Integer.toBinaryString(r.toInt)\n        Right(b.toLong)", " \
    \       if (n > m) Left(\"not possible\")\n        else Right(((n + m) / 2.0).toLong)",
  "      var avg = 0\n      for (k <- n to m) {\n        avg += k\n      }\n     \
    \ if (n > m) {\n        return Left(\"-1\")\n      }\n      else {\n        return\
    \ Right(avg)\n      }", "        val res = if (n > m) -1l else (n+m)/2\n     \
    \   Left(res.toBinaryString)", "        val arr = (n to m).toArray\n        val\
    \ avg = (arr.sum.toDouble / arr.length).round.toLong\n        if (n > m) Right(-1)\n\
    \        else {\n            val bin = avg.toBinaryString\n            val binarr\
    \ = bin.toCharArray.reverse\n            var i = 0\n            while (binarr(i)\
    \ == '0') i += 1\n            val j = binarr.length - i\n            Right(binarr.slice(i,\
    \ j).reverse.mkString.toLong)\n        }", "        if (n > m) Left(\"-1\")\n\
    \        else {\n            val avg = (n + m) / 2\n            val b = toBinary(avg)\n\
    \            val s = s\"0b$b\"\n            Right(s.toLong)\n        }", "   \
    \     if (n > m) Left(\"-1\")\n        else {\n            val x = (n + m) / 2\n\
    \            Right(x)\n        }", "        var res : Long = -1\n        if (n\
    \ > m) res = -1\n        else {\n            var sum : Long = 0\n            for\
    \ (i <- n to m) {\n                sum += i\n            }\n            res =\
    \ sum / (m - n + 1)\n        }\n        Left(res.toBinaryString)", "        //\
    \ your code here\n        var temp = 0l\n        var a = 0l\n        if (n > m)\
    \ Right(-1l)\n        else if (n == m) Left(toBinaryString(n))\n        else {\n\
    \            for (i <- n to m) {\n                temp += i\n            }\n \
    \           var r = temp / (m - n + 1)\n            if (r % 2 == 0) Left(toBinaryString(r))\n\
    \            else {\n                var mid = (n + m) / 2\n                if\
    \ (mid % 2 == 0) Left(toBinaryString(mid))\n                else {\n         \
    \           Left(toBinaryString(mid + 1))\n                }\n            }\n\
    \        }", "        val r = if (n > m) -1 else round((n + m) / 2).toLong\n \
    \       Left(Long.toBinaryString(r))", "        if (n > m) {\n            Left(\"\
    n > m\")\n        } else {\n            val result = ((n.toDouble + m.toDouble)\
    \ / 2.0).toLong\n            Right(result)\n        }", "        if (n > m) {\n\
    \            return Left(\"-1\")\n        }\n        val temp = (n + m) / 2\n\
    \        return Right(temp)", "        if (n > m) {\n            Right(-1l)\n\
    \        } else {\n            val s = n.to(m).sum\n            val x = Math.round(s.toDouble\
    \ / (m - n + 1)).toInt\n            val res = Integer.toBinaryString(x)\n    \
    \        Left(\"0b\" + res)\n        }", "        if (n > m) return Left(\"-1\"\
    )\n        val nRoundedAvg = n.toBinaryString.toList.map(_.asDigit).sum / (m -\
    \ n + 1)\n        Right(nRoundedAvg)", "        if (n > m) Right(-1l)\n      \
    \  else {\n            val sum = (n + m) * (abs(m - n) + 1) / 2\n            val\
    \ avg = sum / (abs(m - n) + 1)\n            Left(toBinaryString(avg))\n      \
    \  }", "        val nBigInt = BigInt(n)\n        val mBigInt = BigInt(m)\n   \
    \     (nBigInt, mBigInt) match {\n            case (Nil, _) => Left(\"Invalid\
    \ Input\")\n            case (_, Nil) => Left(\"Invalid Input\")\n           \
    \ case (n, m) if (n == m) => Right(n)\n            case (n, m) if (n > m) => Left(\"\
    -1\")\n            case (n, m) => Right((n+m).toLong)\n        }", "        if\
    \ (n > m) Left(\"-1\")\n        else {\n            val avg = round((n+m).toDouble/2)\n\
    \            Right(avg)\n        }", "        var sum : Long = 0\n        var\
    \ count : Long = 0\n        var range : Array[Long] = Array.empty\n        if\
    \ (n > m) {\n            return Left(\"n is greater than m\")\n        }\n   \
    \     else {\n            range = Range(n.toInt, m.toInt + 1).toArray\n      \
    \      range.foreach(sum += _)\n            count = range.length\n           \
    \ val roundedAvg : Long = round(sum / count)\n            Right(roundedAvg)\n\
    \        }", '        Right(1)', "        if (n > m) {\n            Left(\"n must\
    \ be less than or equal to m\")\n        } else {\n            Right((n + m) /\
    \ 2)\n        }", "        val range = List.range(n.toInt, m.toInt + 1)\n    \
    \    val sum = range.foldLeft(0l)((a,b) => a + b)\n        if (n > m) Right(-1l)\n\
    \        else Left(toBinary(sum / range.length))", "        // Your code here\n\
    \        var sum : Long = 0\n        for (i <- n to m) {\n            sum += i\n\
    \        }\n        var avg : Long = sum / (m - n + 1)\n        return Left(\"\
    0b\" + avg.toBinaryString)", "        if (n > m) Right(-1l)\n        else {\n\
    \            val sum = ((n + m) * (m - n + 1)) / 2\n            val avg = sum\
    \ / (m - n + 1)\n            Left(Integer.toBinaryString(avg.toInt))\n       \
    \ }", "        // Your code here\n        Left(\"No\")", "        // Your code\
    \ here\n        ???", "        if (n > m) return Left(\"n > m\")\n        val\
    \ result = (n + m) / 2.0\n        val rounded = round(result)\n        Right(rounded)",
  "        // Your code here\n        null", "        if (n > m) {\n            return\
    \ Left(\"-1\")\n        }\n        val avg = (n + m).toDouble / 2\n        val\
    \ avg_int = round(avg).toLong\n        val bin_avg = avg_int.toBinaryString\n\
    \        Right(Long.parseLong(bin_avg, 2))", "        if (n <= m) {\n        \
    \    // val l = (n to m).sum / (m - n + 1).toDouble\n            val l = (n to\
    \ m).sum / ((m - n + 1).toDouble)\n            val binary = toBinary(round(l).toLong)\n\
    \            Left(binary)\n        } else {\n            Right(-1)\n        }",
  "        if (n > m) return Left(\"-1\")\n        var sum = 0l\n        for (i <-\
    \ n to m) sum += i\n        return Right(sum / (m - n + 1))", "        // your\
    \ code here\n        null", "        var sum = 0l\n        for (i <- n to m) sum\
    \ += i\n        if (n > m) Left(\"-1\")\n        else {\n            val avg =\
    \ sum / (m - n + 1)\n            val answer = if (avg % 2 == 0) avg else avg +\
    \ 1\n            Right(answer)\n        }", "        if (n > m) Left(\"-1\")\n\
    \        else {\n            val avg = BigInt(n) + BigInt(m) / 2\n           \
    \ Right(BigInt(avg).toString(2).toLong)\n        }", "        if (n <= m) {\n\
    \            val p = n + m\n            val q = (m - n + 1).toLong\n         \
    \   var avg = p / (2 * q)\n            if (p % (2 * q) > q) avg += 1\n       \
    \     Right(avg)\n        } else {\n            Left(\"n > m\")\n        }", " \
    \       val x = (n + m).toDouble / 2\n        x.round.toLong match {\n       \
    \     case num if n > m => Left(\"-1\")\n            case num => Right(BigInt(num).toString(2).toLong)\n\
    \        }", "        // Your code here.\n        Left(\"Not implemented\")",
  "        val l = n to m\n        val size = l.size\n        val sum = l.sum\n  \
    \      val avg = round(sum.toDouble / size)\n        if (n > m) Left(\"-1\")\n\
    \        else Right(avg)", "        if (n > m) Left(\"-1\")\n        else {\n\
    \            val avg = Math.round((n + m).toDouble / 2)\n            val binaryString\
    \ = Long.toBinaryString(avg)\n            Left(\"0b\" + binaryString)\n      \
    \  }", "        if (n > m) Right(-1l)\n        else Left((\"%1$#5s\".format(Integer.toBinaryString(((n\
    \ + m) / 2).toInt))).replace(\" \", \"0b\"))", "        val s = for {\n      \
    \      a <- (n to m).sum\n            b <- (n to m).size\n        } yield a /\
    \ b\n        s match {\n            case v if n > m => Left(\"-1\")\n        \
    \    case v => Right(v.last)\n        }", "        if (n > m) {\n            return\
    \ Left(\"n is greater than m\")\n        }\n        val avg = floor((n + m).toDouble\
    \ / 2).toLong\n        Right(avg)", "        def bitCount(n : Long) : Int = {\n\
    \            var c = 0\n            var x = n\n            while (x > 0) {\n \
    \               c += 1\n                x = x & (x - 1)\n            }\n     \
    \       c\n        }\n        if (n > m) return Left(\"-1\")\n        var c =\
    \ (n + m) / 2\n        c = floor(c).toLong\n        val b = bitCount(c)\n    \
    \    return Right(pow(2, b).toLong)", "    \tval avg = round((n+m).toDouble/2)\n\
    \    \tif (n > m) {\n    \t\tLeft(\"n > m\")\n    \t} else {\n    \t\tRight(avg)\n\
    \    \t}", "        if (n > m) Left(\"-1\")\n        else Right((n + m) / 2)",
  "        // Write your code here\n        Left(\"You need to implement this function\"\
    )", "        var start = n\n        var end = m\n        var sum = 0l\n      \
    \  var count = 0\n        while (start <= end) {\n            sum += start\n \
    \           start += 1\n            count += 1\n        }\n        var average\
    \ = sum / count\n        Left(average.toBinaryString)", "        if (n > m) Left(\"\
    -1\")\n        else {\n            val average = BigInt(n) + BigInt(m)\n     \
    \       Right(round(average.toDouble/2).toLong)\n        }", "        // Your\
    \ Code Here\n        if (n > m) Left(\"-1\")\n        else {\n            var\
    \ sum = 0.0\n            for (x <- n to m) {\n                sum += x\n     \
    \       }\n            val avarage = round(sum / (m - n + 1))\n            val\
    \ binary = avarage.toBinaryString\n            Right(binary.toLong)\n        }",
  "      val bigInt = BigInt(n).setBit(1)\n      val result = if (n > m) -1 else {\n\
    \        var acc = BigInt(0)\n        for (i <- n to m) acc += BigInt(i)\n   \
    \     acc / (m - n + 1)\n      }\n      result.bitLength match {\n        case\
    \ -1 => Right(-1)\n        case 0 => Right(result.toLong)\n        case n => Left(s\"\
    0b${result.toString(2)}\")\n      }", "      (n, m) match {\n        case (x,\
    \ y) if x > y => Left(\"-1\")\n        case (x, y) => Right(((x + y) / 2))\n \
    \     }", "        if (n > m) return Left(\"n must be less than or equal to m\"\
    )\n        var res = ((n + m) / 2.0).toLong\n        res = if (res < 0) res -\
    \ 1 else res\n        Right(BigInt(res).toString(2).toLong)", "        if (n >\
    \ m) return Left(\"-1\")\n        var result = (n + m) / 2\n        var count\
    \ = 0\n        var nCopy = n\n        var mCopy = m\n        while (nCopy != 0)\
    \ {\n            nCopy /= 2\n            count += 1\n        }\n        while\
    \ (mCopy != 0) {\n            mCopy /= 2\n            count += 1\n        }\n\
    \        count /= 2\n        var binary = 1\n        var counter = 1\n       \
    \ while (counter != count) {\n            binary *= 2\n            counter +=\
    \ 1\n        }\n        result /= binary\n        Right(result)", "    \tif (n\
    \ < m) {\n    \t\tvar total : Long = 0\n    \t\tfor (x <- n to m) total += x\n\
    \    \t\ttotal = round(total.toDouble / (m - n + 1)).toLong\n    \t\treturn Right(bin(total))\n\
    \    \t}\n    \telse return Left(\"-1\")", "        if (n > m) return Left(\"\
    -1\")\n        val avg = round((n + m).toDouble / 2).toLong\n        return Right(avg)",
  "        if (n > m) return Left(\"Inverted interval\")\n        var sum = 0l\n \
    \       for (i <- n to m) {\n            sum += i\n        }\n        val avg\
    \ = sum / (m - n + 1)\n        return Right(round(avg))", "        if (n > m)\
    \ return Left(\"-1\")\n        val a = (n + m) / 2\n        val b = toBinary(a)\n\
    \        Right(b)", "        if (n > m)\n            Left(\"-1\")\n        else\n\
    \            Right(((n + m) / 2))", "        // your code here\n        if (n\
    \ <= m) {\n            val rounded = (n + m) / 2\n            if (rounded % 2\
    \ == 0) {\n                Left(s\"0b${rounded.toBinaryString}\")\n          \
    \  } else {\n                Right(rounded)\n            }\n        } else {\n\
    \            Right(-1)\n        }", '        Left("-1")', "        if (n > m)\
    \ Left(\"-1\")\n        else Right((n + m) / 2)", "        if (n > m) return Left(\"\
    Input error: n must be less than or equal to m.\")\n        var sum : Long = 0\n\
    \        for (i <- n to m) {\n            sum += i\n        }\n        val avg\
    \ : Double = sum.toDouble / (m - n + 1).toDouble\n        val roundedAvg : Long\
    \ = round(avg).toLong\n        val binaryResult : String = BigInt(roundedAvg).toString(2)\n\
    \        return Right(binaryResult)", "    \tif (n > m) return Left(\"-1l\")\n\
    \    \tvar sum = 0l\n    \tfor (i <- n to m) {\n    \t\tsum += i\n    \t}\n  \
    \  \tvar avg = sum / (m - n + 1)\n    \tavg = if (avg % 2 == 0) avg else avg +\
    \ 1\n    \treturn Right(avg)", "        if (n > m) Left(\"n is greater than m\"\
    )\n        else {\n            var nn = n\n            var mm = m\n          \
    \  var sum = 0l\n            while (nn <= mm) {\n                sum += nn\n \
    \               nn += 1\n            }\n            val avg = sum / (m - n + 1)\n\
    \            Right(avg)\n        }", "        if (n > m) return Left(\"-1\")\n\
    \        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n        val\
    \ bin = \"%\" + avg.toBinaryString\n        Right(bin.toLong)", "        // Your\
    \ Code Here\n        Right(1l)", "        if (n > m) {\n            Left(\"n is\
    \ greater than m.\")\n        } else {\n            val listOfInts = (n to m).toList\n\
    \            val avg = listOfInts.sum.toFloat / listOfInts.length\n          \
    \  val rounded = round(avg)\n            val binary = rounded.toBinaryString\n\
    \            Right(binary)\n        }", "        if (n <= m) Left(Integer.toBinaryString(Math.round((n\
    \ + m) / 2.0).toInt))\n        else Right(-1l)", "        // convert to binary\n\
    \        val binaryArray = ListBuffer[Int]()\n        val sum = (n+m)*(m-n+1)/2\n\
    \        val avg = sum/(m-n+1)\n        if (n > m) Left(\"-1\")\n        else\
    \ {\n            while (avg > 0) {\n                binaryArray += avg % 2\n \
    \               avg /= 2\n            }\n            Right(binaryArray.reverse.mkString.toLong)\n\
    \        }", "        if (n > m) {\n            Right(-1l)\n        } else {\n\
    \            val avg = Math.round((n + m).toDouble / 2)\n            Left(\"0b\"\
    \ + avg.toBinaryString)\n        }", "        if (n > m) return Left(\"-1\")\n\
    \        val avg = (n + m) / 2\n        Left(toBinary(avg))", "        if (n <=\
    \ m) Left(Integer.toBinaryString(math.round((n+m).toFloat/2).toInt))\n       \
    \ else Right(-1l)", "        if (n > m) Left(\"-1\")\n        else {\n       \
    \     val sum = (n to m).sum\n            val length = (m - n + 1)\n         \
    \   val avg = Math.round(sum / length.toDouble)\n            Left(Integer.toBinaryString(avg.toInt))\n\
    \        }", "        if (n > m) return Left(\"n cannot be greater than m\")\n\
    \        val avg = (n + m) / 2\n        Right(avg)", "        if (n > m) return\
    \ Left(\"-1\")\n        val list = (n to m).toList\n        val average = (list.sum\
    \ / list.length).toLong\n        Right(average)", "        if (n < m) {\n    \
    \        val sum = (n to m).sum\n            val avg = sum / (m - n + 1)\n   \
    \         val b = avg.toBinaryString\n            val roundedAvg = math.round(avg).toBinaryString\n\
    \            if (b == roundedAvg) {\n                Right(sum)\n            }\
    \ else {\n                Left(roundedAvg)\n            }\n        } else {\n\
    \            Right(-1)\n        }", "        if (n > m) {\n            return\
    \ Left(\"-1\")\n        }\n        val average = (n + m) / 2\n        val binaryAverage\
    \ = average.toBinaryString\n        Right(binaryAverage.toLong)", "        //\
    \ your code goes here\n        val start = BigInt(n)\n        val end = BigInt(m)\n\
    \        if (start > end) {\n            Left(\"-1\")\n        } else {\n    \
    \        var sum = BigInt(0)\n            for (i <- start to end) {\n        \
    \        sum += i\n            }\n            val avg = sum / (end - start + 1)\n\
    \            Right(avg.toLong)\n        }", "        if (n > m) Left(\"-1\")\n\
    \        else Right(((n + m) / 2).toBinaryString.toLong)", "        if (n > m)\
    \ {\n            Left(\"n must be less than or equal to m\")\n        } else {\n\
    \            val roundedAvg = round(((n + m).toDouble / 2)).toLong\n         \
    \   Right(java.lang.Long.toBinaryString(roundedAvg))\n        }", '        ???',
  "        if (n > m) {\n            return Left(\"-1\")\n        }\n        var avr\
    \ = (n + m) / 2\n        var avg = avr.toBinaryString.toInt\n        Right(avg)",
  "        if (n > m) {\n            Right(-1l)\n        } else {\n            Left(Integer.toBinaryString((n\
    \ + m).toInt / 2))\n        }", "        if (n > m) Right(-1l)\n        else {\n\
    \            val range = (n to m).toList\n            val sum = range.foldLeft(0l)(_\
    \ + _)\n            val avg = sum / range.length\n            Left(avg.toBinaryString)\n\
    \        }", "        if (n > m) {\n            Left(\"Error: n can't be greater\
    \ than m\")\n        } else {\n            val result = ((n + m) / 2)\n      \
    \      Right(result)\n        }", "        val avg = (n + m) / 2\n        if (n\
    \ > m) Left(\"-1\")\n        else Right(BigInt(avg).toString(2).toLong)", "  \
    \      if (n > m) {\n            Left(\"-1\")\n        } else {\n            Right((n\
    \ + m) / 2)\n        }", "        if (n > m) Left(\"-1\")\n        else {\n  \
    \          val avg = round((n+m).toDouble/2)\n            Right(avg)\n       \
    \ }", "        if (n > m) Right(-1l)\n        else {\n            val num = (m\
    \ + n) / 2\n            val str = Integer.toBinaryString(num.toInt)\n        \
    \    Left(\"0b\" + str)\n        }", "        if (n > m) {\n            return\
    \ Left(\"m must be greater than n\")\n        }\n        var sum = 0.0\n     \
    \   for (i <- n to m) {\n            sum += i\n        }\n        val avg = round(sum\
    \ / (m - n + 1)).toLong\n        return Right(avg)", "        if (n <= m) {\n\
    \            val avg = floor((n + m).toDouble / 2.0).toLong\n            Right(avg)\n\
    \        } else {\n            Left(\"-1\")\n        }", "        // your code\
    \ here\n        var result : Either[String, Long] = null\n        var nStr : String\
    \ = null\n        var mStr : String = null\n        if (n > m) {\n           \
    \ nStr = \"1b1\"\n            result = Left(nStr)\n        } else {\n        \
    \    nStr = toBinary(n)\n            mStr = toBinary(m)\n            val num :\
    \ Int = length(nStr, mStr)\n            result = Right(floor((n + m) / 2.0).toLong)\n\
    \            result = Left(binaryConvert(result.right.get, num))\n        }\n\
    \        result", "        // Your Code Here\n        Right(0)", "        if (n\
    \ > m) return Left(\"-1\")\n        val avg = (n + m) / 2\n        val avgBin\
    \ = avg.toBinaryString\n        return Right(avgBin.toLong)", "        if (n >\
    \ m) return Left(\"-1\")\n        if (n == m) return Left(n.toBinaryString)\n\
    \        var sum = 0l\n        for (i <- n until m + 1) {\n            sum +=\
    \ i\n        }\n        var avg = sum / (m - n + 1)\n        return Left(avg.toBinaryString)",
  "        if (n > m) return Left(\"-1\")\n        val r = round((n + m) / 2)\n  \
    \      val binary = Integer.toBinaryString(r.toInt)\n        Left(\"0b\" + binary)",
  "        val length = (m - n + 1).toInt\n        val range = n to m\n        val\
    \ sum = range.foldLeft(0l)(_ + _)\n        val avg = round(sum.toDouble / length)\n\
    \        if (n > m) Left(\"-1\")\n        else Right(avg)", "        if (n > m)\
    \ return Left(\"-1l\")\n        else {\n            val sum = ((m + n) * (m -\
    \ n + 1)) / 2\n            val avg = (sum + (sum % 2)) / (m - n + 1)\n       \
    \     Right(avg)\n        }", "        if (n > m) {\n            return Left(\"\
    -1\")\n        }\n        var avg = 0\n        for (i <- n to m) {\n         \
    \   avg += i\n        }\n        avg = (avg / (m - n + 1)).toInt\n        val\
    \ binary = avg.toBinaryString\n        return Right(binary.toLong)", "       \
    \ val s = Seq(n, m)\n        val t = s.sorted\n        if (t(0) > t(1)) Left(\"\
    -1\")\n        else {\n            val min = t(0)\n            val max = t(1)\n\
    \            val diff = max - min\n            val avg = (max + min) / 2l\n  \
    \          Right(avg)\n        }", '        Left("Not implemented yet")', "  \
    \      if (n > m) {\n            Right(-1l)\n        } else {\n            Left(\"\
    0b\" + Long.toBinaryString((n + m) / 2))\n        }", "        if (n > m) Left(\"\
    -1\")\n        else {\n            Right(BigInt(0).setBit(round(Math.log(round((m\
    \ - n + 1) / 2.0) + n)).toInt).toString(2))\n        }", "        if (n > m) return\
    \ Left(\"-1l\")\n        val avg = (n + m) / 2\n        val bits = floor(log(avg)\
    \ / log(2)).toInt + 1\n        Right(avg.toBinaryString.reverse.padTo(bits, '0').reverse.toLong)",
  "        if (n > m) Right(-1l)\n        else {\n            val min = min(n, m)\n\
    \            val max = max(n, m)\n            val sum = (min to max).sum\n   \
    \         val avg = (sum.toDouble / (max - min + 1)).round.toLong\n          \
    \  Left(avg.toBinaryString)\n        }", "        var result = BigInt(0)\n   \
    \     if (n > m) {\n            Right(-1)\n        } else {\n            (n to\
    \ m).foreach(x => result += x)\n            var avg = result / (m - n + 1)\n \
    \           Left(Integer.toBinaryString(avg.toInt))\n        }", "        if (n\
    \ > m) return Left(\"-1l\")\n        Right(BigInt(n+m).toString(2).reverse.zipWithIndex.map(x\
    \ => if (x._1 == '1') 1 << x._2 else 0).sum / 2)", "        // your code goes\
    \ here\n        n.toBinaryString\n        m.toBinaryString\n        return Right(-1l)",
  "        if (n > m) Left(\"-1\")\n        else {\n            val average = (n +\
    \ m) / 2\n            Left(average.toBinaryString)\n        }", "        // your\
    \ code here\n        ???", "        if (n > m) Right(-1l)\n        else {\n  \
    \          val result = (n + m) / 2\n            val binary = result.toBinaryString\n\
    \            Left(s\"0b$binary\")\n        }", "    \tif (n > m) Left(\"-1\")\n\
    \    \telse Right((n + m + 1) / 2)", "        if (n > m) {\n            return\
    \ Left(\"-1\")\n        }\n        var s = BigInt(0)\n        for (i <- n to m)\
    \ {\n            s += BigInt(i)\n        }\n        return Right(BigInt(2).pow(((s\
    \ / BigInt(m - n + 1)).toString(2).length - 1)).toLong)", "      if (n > m) {\n\
    \        return Left(\"-1\")\n      }\n      val avg = round(((n + m) / 2.0)).toLong\n\
    \      return Right(avg)", "        if (n > m) return Left(\"-1\")\n        val\
    \ sum = ((n + m) * (m - n + 1) / 2)\n        val result = if (sum % 2 == 0) sum\
    \ / 2 else (sum + 1) / 2\n        Right(result)", "        if (n > m) {\n    \
    \        return Left(\"-1\")\n        }\n        else {\n            val avg =\
    \ floor((n + m) / 2)\n            return Right(avg)\n        }", "        if (n\
    \ <= m) {\n            var avg : Long = 0\n            for (i <- n to m) {\n \
    \               avg += i\n            }\n            val binary = avg / (m - n\
    \ + 1)\n            Right(binary)\n        } else {\n            Left(\"-1\")\n\
    \        }", "        if (n > m) Left(\"-1\")\n        else Left(Long.toBinaryString(Math.round((n\
    \ + m) / 2.0).toLong))", "        if (n < m) {\n            val avg = ((n + m)\
    \ / 2.0).round.toLong\n            Right(avg)\n        } else {\n            Left(\"\
    n is greater than m.\")\n        }", "        if (n > m) return Left(\"-1\")\n\
    \        val b = (n + m) / 2\n        val s = b.toBinaryString\n        Right(Long.parseLong(s,\
    \ 2))", "        val result = if (n > m) Left(\"-1\") else Right((n + m) / 2)\n\
    \        val binary = result.map(t => Long.toBinaryString(t))\n        binary.map(t\
    \ => s\"0b$t\")", "        // Your code here\n        null", "        if (n >\
    \ m) Right(-1l)\n        else {\n            val avg = (n + m) / 2l\n        \
    \    val binary = avg.toBinaryString\n            Left(f\"0b$binary\")\n     \
    \   }", "        if (n > m) Left(\"n is greater than m\")\n        else {\n  \
    \          val result = math.round(((n + m) / 2.0))\n            Right(result)\n\
    \        }", "        if (n > m)\n            return Left(\"-1\")\n        val\
    \ sum = m * (m + 1) / 2 - n * (n - 1) / 2\n        val count = m - n + 1\n   \
    \     Right(Math.round(sum.toDouble / count))", "        var n = n\n        var\
    \ m = m\n        var sum = 0l\n        var count = 0l\n        if (n > m)\n  \
    \          return Left(\"-1\")\n        while (n <= m) {\n            sum += n\n\
    \            count += 1\n            n += 1\n        }\n        Right(sum / count)",
  "        val average = if (n > m) {\n            -1\n        } else {\n        \
    \    val sum = n + m\n            val count = 2\n            (sum/count).toLong\n\
    \        }\n        Right(average)", "        // your code here\n        if (n\
    \ > m) Left(\"-1\")\n        else {\n            val sum = n + m\n           \
    \ val count = (m - n) + 1\n            val result = (sum / count.toDouble).round.toLong\n\
    \            Right(result)\n        }", "        if (n > m)\n            return\
    \ Left(\"-1\")\n        var sum = 0l\n        for (x <- (n to m))\n          \
    \  sum += x\n        return Right(round(sum.toDouble / (m - n + 1)).toLong)",
  '        Right(n + m) / 2', "        if (n > m) Left(\"-1\")\n        else {\n \
    \           val avg = (n + m) / 2\n            val bin = avg.toBinaryString\n\
    \            Right(bin.toLong)\n        }", "        if (n > m)\n            return\
    \ Left(\"-1\")\n        val avg = round(((n + m) / 2.0)).toLong\n        return\
    \ Right(avg)", "        if (n > m) return Left(\"-1\")\n        var sum = 0l\n\
    \        for (i <- n to m) {\n            sum += i\n        }\n        var avg\
    \ = Math.round(sum / (m - n + 1.0)).toString(2)\n        return Right(avg.toLong)",
  "      if (n <= m) {\n        val result = math.round((n + m).toDouble / 2.0)\n\
    \        return Left(s\"0b${BigInt(result).toString(2)}\")\n      }\n      Right(-1)",
  "        if (n > m) {\n            Left(\"-1\")\n        } else {\n            val\
    \ range = Range(n, m + 1)\n            val avg = range.sum.toDouble / range.size\n\
    \            val avgRounded = round(avg)\n            Right(avgRounded)\n    \
    \    }", "        // Your Code Here\n        if (n > m) {\n            return\
    \ Left(\"0b11\");\n        }\n        return Right((n + m) / 2);", "        if\
    \ (n > m) return Left(\"-1\")\n        var sum = 0l\n        for (i <- n to m)\
    \ sum += i\n        val result = round(sum.toDouble / (m - n + 1)).toLong\n  \
    \      return Right(result)", "        val avg : Long = if (n == m) n else (n\
    \ + m) / 2\n        if (n > m) Right(-1) else {\n            val bits : String\
    \ = (1l to avg).map(x => \"1\").mkString(\"\")\n            val b : Long = {\n\
    \                if (bits.length > 32) 0 else (BigInt(bits, 2)).toLong\n     \
    \       }\n            Left(\"0b\" + b.toBinaryString)\n        }", "        if\
    \ (n > m)\n            return Left(\"n was greater than m\")\n        val sum\
    \ = m + n\n        val count = m - n + 1\n        val avg = sum / count\n    \
    \    val roundedAvg = round(avg)\n        return Right(roundedAvg)", "       \
    \ if (n > m) Left(\"n is greater than m\")\n        else {\n            val avg\
    \ = Math.round((n + m) / 2.0)\n            Right(avg)\n        }", "        if\
    \ (n > m) {\n            Right(-1l)\n        } else {\n            val sum = n\
    \ + m\n            val avg = (sum >> 1) + (sum & 1)\n            val rounded =\
    \ (avg << 1) - sum\n            Left(\"0b\" + BigInt(rounded).toString(2))\n \
    \       }", "        if (n > m) Left(\"-1\")\n        else {\n            val\
    \ a = (m + n) / 2\n            Right(a)\n        }", "        if (n > m) {\n \
    \           Left(\"-1\")\n        } else {\n            Right((n + m) / 2)\n \
    \       }", "      if (n > m) Left(\"-1\")\n      else {\n        val avg = floor((n\
    \ + m) / 2.0).toLong\n        val avgBin = avg.toBinaryString\n        val roundedAvgBin\
    \ = \"0b\" + avgBin.take(avgBin.length - 1) + (if (avgBin.last == '0') \"1\" else\
    \ \"0\")\n        Right(roundedAvgBin.toLong(2))\n      }", "        if (n > m)\
    \ Left(\"-1\")\n        else {\n            val avg = math.round((n + m).toDouble\
    \ / 2)\n            Right(avg)\n        }", "        if (n > m) return Left(\"\
    -1\")\n        val sum = (n + m) * (m - n + 1) / 2\n        val roundedAvg = (sum\
    \ + (m - n) / 2) / (m - n + 1)\n        Right(Integer.toBinaryString(roundedAvg.toInt).toLong)",
  '        // Fill in the missing code', "        val range = n to m\n        if (n\
    \ > m) Right(-1)\n        else Right(range.sum / range.size)", "        val avg\
    \ = (n + m) / 2\n        val binary = avg.toBinaryString\n        if (n > m) Right(-1)\n\
    \        else Left(binary)", "        if (n > m) return Left(\"-1\")\n       \
    \ val ret = (n + m) / 2\n        val str = ret.toBinaryString\n        Right(Long.parseLong(str,\
    \ 2))", "        n < m match {\n            case true => {\n                val\
    \ sum = (n to m).sum\n                val avg = sum / (m - n + 1)\n          \
    \      Left(avg.toBinaryString)\n            }\n            case false => Right(-1)\n\
    \        }", "        if (n > m) Left(\"-1\")\n        else {\n            val\
    \ avg = (n + m) / 2l\n            Right(avg)\n        }", "      if (n < 0 ||\
    \ m < 0) throw new Exception(\"n or m is negative\")\n      if (n > m) return\
    \ Left(\"-1\")\n      val ret = ((n + m) / 2.0).round.toLong\n      return Right(ret)",
  "        if (n > m) { return Left(\"-1\") }\n        var sum = 0.0\n        for\
    \ (i <- n to m) {\n            sum += i\n        }\n        var avg = (sum / (m\
    \ - n + 1.0)).round\n        return Right(avg)", "      val result = if (n < m)\
    \ {\n        val length = math.log(m - n) / math.log(2)\n        (1l << length.toInt)\n\
    \      } else if (n == m) {\n        n\n      } else {\n        -1l\n      }\n\
    \      Left(\"0b\" + (Long.toBinaryString(result)))", "      if (n > m) {\n  \
    \      Left(\"-1\")\n      } else {\n        val avg : Int = ((n + m) / 2).toInt\n\
    \        val binary : String = avg.toBinaryString\n        Right(Long.parseLong(binary,\
    \ 2))\n      }"]
stop_tokens:
- "\n    }\n"
