name: HumanEval_64_vowels_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function vowels_count which takes a string representing\n    //\
  \ a word as input and returns the number of vowels in the string.\n    // Vowels\
  \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but\
  \ only when it is at the end of the given word.\n    // Example:\n    // >>> vowelsCount((\"\
  abcde\"))\n    // (2l)\n    // >>> vowelsCount((\"ACEDY\"))\n    // (3l)\n    def\
  \ vowelsCount(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\"\
  )) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"\
  key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"\
  keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"\
  ACEDY\")) == (3l));\n    }\n\n}\n"
completions: ["        val vowels : Set[Char] = Set('a', 'e', 'i', 'o', 'u')\n   \
    \     val c = s.toCharArray\n        var count : Long = 0\n        for (i <- 0\
    \ until c.length) {\n            if (vowels.contains(c(i))) {\n              \
    \  count += 1\n            }\n        }\n        if (vowels.contains(c(c.length\
    \ - 1))) {\n            count\n        } else {\n            count - 1\n     \
    \   }", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var count\
    \ = 0\n        for (c <- s) {\n            if (vowels.contains(c)) count += 1\n\
    \        }\n        if (s.last == 'y') count += 1\n        count", "        //\
    \ TODO: Implement this\n        0", '        return 0l', "        def f(i : Int,\
    \ vowels : Int) : Int = {\n            if (i == s.length) vowels\n           \
    \ else {\n                if (\"aeiou\".contains(s(i))) f(i + 1, vowels + 1)\n\
    \                else f(i + 1, vowels)\n            }\n        }\n        f(0,\
    \ 0)", "        // REPLACE NULL WITH YOUR CODE\n        var count = 0\n      \
    \  if (s.endsWith(\"y\")) {\n            count += 1\n        }\n        s.toLowerCase.filter(Set('a',\
    \ 'e', 'i', 'o', 'u')).size + count", "        // TODO: return the number of vowels\
    \ in the word.\n        s.filter(c => c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'y').length", '      s.filter(_.isLetter).map(_.toLower).toSeq.groupBy(identity).filter(_._1.isLetter).filter(s
    => "aeiouy".contains(s._1)).values.map(_.length).sum', "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val vowelAndY = Set('a', 'e', 'i', 'o', 'u', 'y')\n\
    \        if (s.isEmpty) 0\n        else if (vowels(s.last)) vowelsCount(s.dropRight(1))\
    \ + 1\n        else if (vowelAndY(s.last)) vowelsCount(s.dropRight(1))\n     \
    \   else vowelsCount(s.dropRight(1))", "      val a : Array[Char] = s.toCharArray\n\
    \      var i : Int = 0\n      var count : Long = 0\n      while (i < a.length)\
    \ {\n        val x : Char = a(i)\n        if (x == 'a' || x == 'e' || x == 'i'\
    \ || x == 'o' || x == 'u') {\n          count += 1\n        }\n        i += 1\n\
    \      }\n      val last : Char = a(a.length - 1)\n      if (last == 'y') {\n\
    \        count += 1\n      }\n      return count", '        ???', "        //\
    \ Fill Up this function body\n        // `s` contains only lowercase alphabets\n\
    \        // `s` will contain at least one vowel\n        // 'y' can be a vowel,\
    \ if it is at the end of the word\n        // 'y' is not a vowel otherwise\n \
    \       var c = 0\n        if (s.endsWith(\"y\")) c += 1\n        for (ch <- s.toCharArray)\
    \ if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') c += 1\n\
    \        c", '        s.filter(x => "aeiouyAEIOUY".contains(x)).length', "   \
    \     // YOUR CODE HERE\n        val l = s.length()\n        if (l == 0) {\n \
    \           return 0\n        }\n        var vowel = 0\n        if (s(0) == 'a'\
    \ || s(0) == 'e' || s(0) == 'i' || s(0) == 'o' || s(0) == 'u') {\n           \
    \ vowel += 1\n        }\n        vowel += vowelsCount(s.substring(1))\n      \
    \  return vowel", "        var c : Long = 0\n        for (i <- 0 until s.length)\
    \ {\n            val ch = s(i)\n            if (ch == 'a' || ch == 'e' || ch ==\
    \ 'i' || ch == 'o' || ch == 'u' || (ch == 'y' && i == s.length - 1)) {\n     \
    \           c += 1\n            }\n        }\n        return c", "        val\
    \ vowels = \"aeiouy\"\n        var l = 0\n        for (c <- s) {\n           \
    \ if (vowels.contains(c)) l += 1\n        }\n        return l", '        return
    vowelsCountHelper(s, false)', "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        s.count(vowels contains _) + (if (s.last == 'y') 1 else 0)", "      s.toLowerCase.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').size",
  "        var count = 0l\n        for (i <- 0 until s.length) {\n            val\
    \ c = s(i)\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' || (c == 'y' && i == s.length - 1)) count += 1\n        }\n        count",
  "        val l = List('a', 'e', 'i', 'o', 'u', 'y')\n        val s = s.toLowerCase\n\
    \        return (l.foldLeft(0l)((a, b) => a + s.count(_ == b)))", "        var\
    \ r = 0l\n        var i = 0\n        while (i < s.length) {\n            if (isVowel(s.charAt(i)))\
    \ {\n                r += 1\n            }\n            i += 1\n        }\n  \
    \      return r", "        // Fill in the blanks!\n        0l", "        // Create\
    \ a List[Char] as a set with all vowels and\n        // return the length of the\
    \ intersection between this list\n        // and the list of chars in the input\
    \ string.\n        List('a', 'e', 'i', 'o', 'u', 'y').intersect(s.toList).length",
  "        if (s.isEmpty) 0\n        else {\n            if (s.head == 'a' || s.head\
    \ == 'e' || s.head == 'i' || s.head == 'o' || s.head == 'u') 1 + vowelsCount(s.tail)\n\
    \            else vowelsCount(s.tail)\n        }", "        //YOUR CODE HERE\n\
    \        return 0", "        val vowels : List[Char] = List('a', 'e', 'i', 'o',\
    \ 'u', 'y')\n        s.toLowerCase.toList.foldLeft(0L)((total, char) => if (vowels.contains(char))\
    \ total + 1 else total)", "        // Define a list of vowels\n        val vowels\
    \ = List('a', 'e', 'i', 'o', 'u', 'y')\n        // Go through each character in\
    \ string and count if it's a vowel\n        var count = 0\n        for (c <- s)\
    \ {\n            if (vowels.contains(c)) {\n                count += 1\n     \
    \       }\n        }\n        // if the last letter is 'y', check if this is the\
    \ only vowel\n        if (s.last == 'y' && count == 1) count += 1\n        return\
    \ count", "        return s.filter(c => List('a', 'e', 'i', 'o', 'u', 'y').contains(c)).length",
  "        s.filter(c => (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || (c == 'y' && (s.lastIndexOf(c) == s.length - 1)))).length", "        var\
    \ count = 0L\n        val vowels = List('a', 'e', 'i', 'o', 'u', 'y')\n      \
    \  for (c <- s) {\n            if (vowels.contains(c.toLower)) count += 1\n  \
    \      }\n        return count", "        val vowelList = List('a', 'e', 'i',\
    \ 'o', 'u', 'y')\n        val finalList = s.toList\n        val ouputList = finalList.flatMap(x\
    \ => {\n            if (vowelList.contains(x)) Some(x) else None\n        })\n\
    \        val finalVowelList = ouputList.filter(x => !(vowelList.indexOf(x) ==\
    \ 4 && !finalList.last.equals(x)))\n        return finalVowelList.length", " \
    \     s.count(x => x.equals('a') || x.equals('e') || x.equals('i') || x.equals('o')\
    \ || x.equals('u'))", "        // Fill Up this function body\n        // `s` contains\
    \ only lower case letters\n        s.count(i => List('a', 'e', 'i', 'o', 'u').contains(i))\
    \ +\n        s.lastOption.map(i => List('y').contains(i)).getOrElse(false).toLong",
  "        // TODO: Return the number of vowels in s.\n        var count = 0\n   \
    \     val vowels = List('a', 'e', 'i', 'o', 'u')\n        val vowels_y = List('a',\
    \ 'e', 'i', 'o', 'u', 'y')\n        for (c <- s) {\n            if (vowels.contains(c.toLower))\
    \ {\n                count += 1\n            }\n        }\n        if (vowels_y.contains(s.last.toLower))\
    \ {\n            count += 1\n        }\n        count", "        // Fill in the\
    \ code for this method\n        (for (c <- s if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'y') yield 1).length", "        // Fill in your\
    \ solution here.\n        val vowels = List('a', 'e', 'i', 'o', 'u')\n       \
    \ val word = s.filter(vowels.contains(_)).map(c => c.toLower)\n        word.filter(_\
    \ != 'y').size + (if (word.last == 'y') 1 else 0)", "        // pattern matching\n\
    \        s.toLowerCase().filter(_ == 'a' || _ == 'e' || _ == 'i' || _ == 'o' ||\
    \ _ == 'u').length", "        return (0l /: s) {\n            (count, c) => if\
    \ ((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c == 'u') || ((c ==\
    \ 'y') && (s.last == c))) count + 1 else count\n        }", "        // Fill in\
    \ this function.\n        val x = for (c <- s) yield if (List('a', 'e', 'i', 'o',\
    \ 'u').contains(c.toLower)) 1 else 0\n        x.fold(0)(_ + _)", "        var\
    \ count = 0l\n        val sLen = s.length\n        var i = 0\n        while (i\
    \ < sLen) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i)\
    \ == 'o' || s(i) == 'u') count += 1\n            i += 1\n        }\n        if\
    \ (s(sLen - 1) == 'y') count += 1\n        count", "        val list = s.toList\n\
    \        val vowel = List('a', 'e', 'i', 'o', 'u')\n        // check element is\
    \ contained in 'vowel' or not\n        val isContained = (c : Char) => (vowel\
    \ contains c)\n        // filter the list and take size of the resulting list\n\
    \        list.filter(isContained).size", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        s.toList.foldLeft(0l)((count, c) => \n            if (vowels.contains(c))\
    \ count + 1\n            else count)", '        // Your code here...', "     \
    \   var res = 0l\n        for (c <- s) {\n            if (\"aeiouy\".contains(c))\
    \ res += 1\n        }\n        if (s.contains(\"y\")) res -= 1\n        res",
  "        val word = s.toLowerCase\n        val vowels = new Array[Char](5)\n   \
    \     vowels(0) = 'a'\n        vowels(1) = 'e'\n        vowels(2) = 'i'\n    \
    \    vowels(3) = 'o'\n        vowels(4) = 'u'\n        vowels.contains(word.last)\
    \ match {\n            case true => {\n                word.toCharArray.filter(vowels.contains(_)).size\n\
    \            }\n            case false => {\n                word.toCharArray.filter(vowels.contains(_)).size\
    \ - 1\n            }\n        }", "        val vowels : Set[Char] = Set('a', 'e',\
    \ 'i', 'o', 'u', 'y')\n        if (s.length == 0) {\n            return 0\n  \
    \      }\n        val vc : Long = if (vowels.contains(s.charAt(0))) 1 else 0\n\
    \        return vc + vowelsCount(s.substring(1))", "        val map = Map('a'\
    \ -> 0, 'e' -> 0, 'i' -> 0, 'o' -> 0, 'u' -> 0, 'y' -> 0)\n        val last =\
    \ s.last\n        var count = 0\n        s.foreach { ch =>\n            if (map.contains(ch))\
    \ {\n                map.put(ch, map(ch) + 1)\n            }\n        }\n    \
    \    map.foreach { case (k, v) =>\n            if (k == 'y' && last == 'y') {\n\
    \                if (v > 0) {\n                    count += v\n              \
    \  }\n            } else {\n                count += v\n            }\n      \
    \  }\n        count", "        // Write your code here\n        return 0", " \
    \       val sArray = s.toCharArray\n        var cnt = 0l\n        sArray.foreach((c\
    \ : Char) => {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' || c == 'y') cnt += 1\n        })\n        if (sArray(sArray.length\
    \ - 1) == 'y') cnt += 1\n        cnt", "        var c = 0l\n        for (i <-\
    \ 0 until s.length) {\n            if (isVowel(s(i))) c += 1\n        }\n    \
    \    if (!isVowel(s(s.length - 1)) && (s(s.length - 1) == 'y')) c += 1\n     \
    \   return c", '        ???', "        val vowels = Map('a' -> true, 'e' -> true,\
    \ 'i' -> true, 'o' -> true, 'u' -> true, 'y' -> true)\n        s.filter(vowels.contains(_)).length",
  "      s.toLowerCase.filter(x => x == 'a' || x == 'e' || x == 'i' || x == 'o' ||\
    \ x == 'u' || (x == 'y' && s.toLowerCase.last == 'y')).size", "        val regex\
    \ = \"[aeiouy]\".r\n        regex.findAllIn(s).length", "        return (for (c\
    \ <- s if List('a', 'e', 'i', 'o', 'u').contains(c.toLower)) yield c).length",
  '        s.filter(x => "aeiouyAEIOUY".contains(x)).length', "        // TODO: implement\
    \ this function\n        -1l", "        s.split(\"\").foldLeft(0l) {\n       \
    \     (z, c) => z + (c match {\n                case \"a\" => 1\n            \
    \    case \"e\" => 1\n                case \"i\" => 1\n                case \"\
    o\" => 1\n                case \"u\" => 1\n                case \"y\" => if (s.indexOf(c)\
    \ == s.length - 1) 1 else 0\n                case _ => 0\n            })\n   \
    \     }", "        var count = 0l\n        for (i <- 0 until s.length)\n     \
    \   {\n            if (i == s.length - 1 && s(i) == 'y') count += 1\n        \
    \    else if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i)\
    \ == 'u') count += 1\n        }\n        return count", "        s.filter { x\
    \ =>\n            val c = x.toLower\n            c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' || c == 'y'\n        }.length", "        val numVowels\
    \ = s.filter(ch => Set('a', 'e', 'i', 'o', 'u').contains(ch)).length\n       \
    \ val numY = if (s.last == 'y') 1 else 0\n        return numVowels + numY", " \
    \       var count : Long = 0;\n        for (c <- s.toList) {\n            if (List('a',\
    \ 'e', 'i', 'o', 'u').contains(c.toLower)) {\n                count += 1;\n  \
    \          }\n        }\n        count;", "        // Your code here\n       \
    \ s.filter(x => \"aeiouAEIOUyY\".contains(x)).length", "        return s.toLowerCase.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length.toLong",
  "      //s.length - s.count(c => !Set('a', 'e', 'i', 'o', 'u', 'y').contains(c.toLower))\n\
    \      s.count(c => Set('a', 'e', 'i', 'o', 'u', 'y').contains(c.toLower))", '        //
    Add your code here!', "        var count = 0\n        for (x <- s) if (x == 'a'\
    \ || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y') count += 1\n  \
    \      count", "      s.toLowerCase.filter(_.isLetter).filter(c => List('a', 'e',\
    \ 'i', 'o', 'u', 'y').contains(c)).size", "        var count = 0l\n        for\
    \ (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i)\
    \ == 'i' || s(i) == 'o' || s(i) == 'u') {\n                count += 1\n      \
    \      }\n            if (s(i) == 'y' && i == s.length - 1) {\n              \
    \  count += 1\n            }\n        }\n        return count", "      // Your\
    \ code here\n      0", "        s.foldLeft(0L) {\n            (sum, c) => sum\
    \ + (if (Seq('a', 'e', 'i', 'o', 'u', 'y').contains(c.toLower)) 1 else 0)\n  \
    \      }", "        var count : Long = 0\n        val vowels = List('a', 'e',\
    \ 'i', 'o', 'u')\n        val last = s.last.toLower\n        if (vowels.contains(last))\
    \ count += 1\n        for (c <- s) {\n            if (vowels.contains(c.toLower))\
    \ count += 1\n        }\n        count", "        s.toLowerCase.foldLeft(0l)((b,\
    \ c) => if (Set('a', 'e', 'i', 'o', 'u').contains(c)) b + 1 else b)", "      \
    \  if (s.length == 0) {\n            return 0\n        }\n        val vowels =\
    \ Set('a', 'e', 'i', 'o', 'u')\n        if (vowels.contains(s.head)) {\n     \
    \       return 1 + vowelsCount(s.tail)\n        }\n        return vowelsCount(s.tail)",
  "        var res : Long = 0\n        for (x <- s) {\n            if (List('a', 'e',\
    \ 'i', 'o', 'u').contains(x)) {\n                res += 1\n            }\n   \
    \     }\n        return res", "        var count : Long = 0\n        for (c <-\
    \ s)\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y')\n                count += 1\n        return count", "        //s.filter(c\
    \ => \"aeiouy\".contains(c.toLowerCase)).length\n        s.foldLeft(0l)((sum,c)\
    \ => if(\"aeiouy\".contains(c.toLowerCase)) sum + 1 else sum)", "        // YOUR\
    \ CODE HERE\n        0", "\t\tvar total : Long = 0\n\t\tfor (c <- s) {\n\t\t\t\
    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') total += 1\n\t\t\
    \tif (c == 'y' && s.length() - 1 == s.indexOf(c)) total += 1\n\t\t}\n\t\treturn\
    \ total", "        def f(ch : Char) : Boolean =\n            ch == 'a' || ch ==\
    \ 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'y'\n        val v = s.toList.filter(f).length\n\
    \        if (s.length > 1 && s.last == 'y') v + 1 else v", '        s.map(c =>
    c.toLower).filter(c => "aeiouy".contains(c)).length', "        val letters = ('a'\
    \ to 'z').toList\n        val vowels = List('a', 'e', 'i', 'o', 'u')\n       \
    \ val vowels2 = letters.filter(x => vowels.contains(x))\n        val vowels3 =\
    \ if (s.head.toLower == 'y') 'y' :: vowels2 else vowels2\n        val vowels4\
    \ = if (s.last.toLower == 'y') vowels3 :+ 'y' else vowels3\n        val vowelCount\
    \ = s.toLowerCase.toList.filter(x => vowels4.contains(x)).size\n        vowelCount",
  "      // fill in your answer here\n      (for (i <- 0 until s.length; if List('a',\
    \ 'e', 'i', 'o', 'u').contains(s(i))) yield 1).sum", "        var count = 0l\n\
    \        var last_char_is_y = false\n        for (c <- s) {\n            if (last_char_is_y)\
    \ {\n                last_char_is_y = false\n                if (c == ' ') {\n\
    \                    count += 1\n                }\n            } else {\n   \
    \             if (c == 'y') {\n                    last_char_is_y = true\n   \
    \             } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n                    count += 1\n                }\n            }\n \
    \       }\n        if (last_char_is_y) {\n            count += 1\n        }\n\
    \        count", "        s.foldLeft(0l)((accum, ch) => {\n            if (ch\
    \ == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U' || ch == 'Y')\n \
    \               accum + 1\n            else accum\n        })", "        var count\
    \ = 0L\n        val ss = s.toLowerCase\n        for (i <- 0 until ss.length) {\n\
    \            if (ss(i) == 'a' || ss(i) == 'e' || ss(i) == 'i' || ss(i) == 'o'\
    \ || ss(i) == 'u') {\n                count += 1\n            }\n        }\n \
    \       return count", "        var vowels = List('a', 'e', 'i', 'o', 'u')\n \
    \       var numVowels = 0l\n        s.foreach( x => {\n            if (vowels.contains(x))\
    \ numVowels += 1\n        })\n        if (s.last == 'y') numVowels += 1\n    \
    \    return numVowels", "        val vowels = \"aeiou\"\n        var count = 0\n\
    \        for (i <- 0 until s.length) {\n            val l = s(i).toLower\n   \
    \         if (vowels.contains(l)) count += 1\n        }\n        if (count > 0\
    \ && s(s.length - 1).toLower == 'y') count += 1\n        count", "        // We\
    \ assume that the vowels are already in upper case, so we can\n        // use\
    \ Sets to contain them.\n        val vowels = Set('A', 'E', 'I', 'O', 'U')\n \
    \       // Check if the last character of the string is a 'Y'. If so, add one\n\
    \        // to the result.\n        var result = if (s.last.toUpper == 'Y') 1\
    \ else 0\n        // Go through the rest of the string character by character,\
    \ checking\n        // each one to see if it is a vowel, and if so, increment\
    \ the result.\n        for (c <- s) {\n            if (vowels.contains(c.toUpper))\
    \ {\n                result += 1\n            }\n        }\n        result", " \
    \       val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val cnt = s.filter(c\
    \ => vowels.contains(c.toLower)).foldLeft(0)((acc, c) => acc + 1)\n        if\
    \ (s.last == 'y') cnt + 1 else cnt", "        val last : Char = s.charAt(s.length()\
    \ - 1)\n        if (s.length() > 1) vowelsCount(s.substring(0, s.length() - 1))\
    \ + vowelCheck(last)\n        else vowelCheck(last)", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val endingVowels = Set('y')\n        var count\
    \ = 0l\n        val lastChar = s.last\n        if (endingVowels.contains(lastChar))\
    \ {\n            count += 1\n        }\n        for (c <- s) {\n            if\
    \ (vowels.contains(c)) {\n                count += 1\n            }\n        }\n\
    \        count", "        val x = s.count(c => List('a', 'e', 'i', 'o', 'u').contains(c.toLower))\n\
    \        if (s.last.toLower == 'y') x + 1 else x", "        s.count((x) => (x\
    \ == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || (x == 'y' && (s.length\
    \ - 1) == s.indexOf(x))))", '        ???', "      (for (i <- 0 until s.length)\
    \ yield (s(i) match {\n          case 'a' | 'e' | 'i' | 'o' | 'u' | 'y' => true\n\
    \          case _ => false\n      })).filter(x => x).length", "        var count\
    \ = 0l\n        for (i <- 0 until s.length) {\n            if (s(i) == 'a' ||\
    \ s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n     \
    \   }\n        if (s(s.length - 1) == 'y') count += 1\n        return count",
  "        // Fill in the code\n        val vowels = Array(\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\")\n        s.split(\"\").map(c => if (vowels.contains(c.toLowerCase))\
    \ 1 else 0).sum", '      ???', "        if (s.length == 0) 0\n        else if\
    \ (s.head == 'y' && s.length == 1) 1\n        else if (s.head == 'a' || s.head\
    \ == 'e' || s.head == 'i' || s.head == 'o' || s.head == 'u') 1 + vowelsCount(s.tail)\n\
    \        else vowelsCount(s.tail)", "        val sSet = s.toSet\n        (sSet\
    \ & Set('a', 'e', 'i', 'o', 'u', 'y')).size", '        return s.count(v => "aeiouyAEIOUY".contains(v))',
  "        // Fill in your code here.\n        ???", "        // case is not ignored\n\
    \        var vc = s.toLowerCase().filter(_ match {\n            case 'a' | 'e'\
    \ | 'i' | 'o' | 'u' | 'y' => true\n            case _ => false\n        }).length\n\
    \        if (s.toLowerCase().endsWith(\"y\")) vc += 1\n        vc", "        //\
    \ We use scala.collection.mutable.HashSet because it is\n        // very efficient\
    \ in storing and searching\n        // In this case, we store all the vowels in\
    \ a hashset\n        // and then the number of vowels is the number of\n     \
    \   // elements in the hashset which are also present in\n        // the input\
    \ string.\n        val vowels = scala.collection.mutable.HashSet[Char]('a', 'e',\
    \ 'i', 'o', 'u', 'y')\n        s.count((c : Char) => vowels.contains(c))", '        ???',
  "        // fill in the body\n        (0L /: s) {(sum, ch) => if (List('a', 'e',\
    \ 'i', 'o', 'u', 'y').contains(ch.toLower)) sum + 1 else sum}", "        var c\
    \ = 0\n        for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i)\
    \ == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') c += 1\n        }\n   \
    \     return c", "        var count = 0l\n        for (c <- s) {\n           \
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' &&\
    \ s.last == c)) count += 1\n        }\n        count", "        // YOUR CODE HERE\n\
    \        0", "        //vowels.size\n        var v = 0\n        var vowels = \"\
    \"\n        for (x <- s) {\n            if (x == 'a' || x == 'e' || x == 'i' ||\
    \ x == 'o' || x == 'u') {\n                vowels += x\n            }\n      \
    \  }\n        if (vowels.size > 0) {\n            if (vowels.last == 'y') {\n\
    \                v = vowels.size + 1\n            } else {\n                v\
    \ = vowels.size\n            }\n        }\n        v", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val letters = s.toLowerCase.toSet\n        val\
    \ count = vowels.intersect(letters).size\n        if (s.toLowerCase.last == 'y')\
    \ {\n            count + 1\n        } else {\n            count\n        }", '        ???',
  "        var n : Long = 0\n        for (c <- s.toLowerCase) {\n            if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                n\
    \ += 1\n            }\n        }\n        if (s.toLowerCase.last == 'y') {\n \
    \           n += 1\n        }\n        return n", "        // Your code here\n\
    \        if (s.length == 0) return 0\n        var c = s.head\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            return 1 +\
    \ vowelsCount(s.tail)\n        if (c == 'y' && s.length == 1)\n            return\
    \ 1\n        return vowelsCount(s.tail)", "        var sum = 0l\n        for (i\
    \ <- 0 until s.length) {\n            if (\"aeiouy\".contains(s(i))) sum += 1\n\
    \        }\n        if (s.length > 1 && \"aeiou\".contains(s(s.length - 1)) &&\
    \ s(s.length - 2) == 'y') sum += 1\n        sum", "        // REPLACE THIS LINE\
    \ WITH YOUR CODE\n        0l", "        val v = \"aeiou\"\n        s.filter(v.contains(_)).length()",
  "        def vowelsCount_aux(s : String, l : Long) : Long = s match {\n        \
    \    case \"\" => l\n            case _ => s.head match {\n                case\
    \ 'a' => vowelsCount_aux(s.tail, l + 1)\n                case 'e' => vowelsCount_aux(s.tail,\
    \ l + 1)\n                case 'i' => vowelsCount_aux(s.tail, l + 1)\n       \
    \         case 'o' => vowelsCount_aux(s.tail, l + 1)\n                case 'u'\
    \ => vowelsCount_aux(s.tail, l + 1)\n                case 'y' => vowelsCount_aux(s.tail,\
    \ l + 1)\n                case _ => vowelsCount_aux(s.tail, l)\n            }\n\
    \        }\n        vowelsCount_aux(s, 0)", "        var count = 0l\n        for\
    \ (c <- s) if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c\
    \ == 'y' && (s.length == 1 || s.lastIndexOf(c) == s.length - 1))) count += 1\n\
    \        count", "        var cnt = 0l\n        for (i <- 0 until s.length) {\n\
    \            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i)\
    \ == 'u') {\n                cnt += 1\n            }\n            if (s(i) ==\
    \ 'y' && i == s.length - 1) {\n                cnt += 1\n            }\n     \
    \   }\n        return cnt", '        throw new NotImplementedError()', "     \
    \ // Write a function that takes as argument a string representing\n      // a\
    \ word and returns a list of all the anagrams of that word.\n      // You can\
    \ assume that the given word is lowercase.\n      // Example:\n      // >>> anagrams(\"\
    cat\")\n      // (\"act\" \"atc\" \"cat\" \"cta\" \"tac\" \"tca\")\n      // >>>\
    \ anagrams(\"recursion\")\n      // (\"cenirruor\" \"cirruenor\" \"cirruoner\"\
    \ \"corrienur\" \"crierunor\" \"crinueor\" \"crioneur\" \"croneiur\" \"crurione\"\
    \ \"curiren\" \"enirruor\" \"eirruonc\" \"eirunor\" \"eriunor\" \"erurinoc\" \"\
    iernour\" \"ierruno\" \"irneour\" \"irnoure\" \"ironeur\" \"ironuer\" \"irruoen\"\
    \ \"irruneo\" \"irurneo\" \"neirruo\" \"neoruir\" \"nerurio\" \"neuroir\" \"nieourr\"\
    \ \"nioruer\" \"nioreur\" \"niroure\" \"nirureo\" \"noirure\" \"noreiur\" \"noreuri\"\
    \ \"noruire\" \"noruier\" \"nourrie\" \"nuriroe\" \"nuroeri\" \"nuorrie\" \"onirure\"\
    \ \"oreinur\" \"oreunir\" \"oriunre\" \"oriurne\" \"ornerui\" \"orneuri\" \"orruien\"\
    \ \"oruenir\" \"ourenir\" \"ouriern\" \"ouriren\" \"ournier\" \"ourrien\" \"ourrine\"\
    \ \"reniuro\" \"renriuo\" \"renurio\" \"reoinur\" \"reounir\" \"reurino\" \"rieunor\"\
    \ \"rieruno\" \"rinueo\" \"riounre\" \"riourn\" \"roniuer\" \"ronueir\" \"roeniu\"\
    \ \"roineu\" \"ronuei\" \"rouenir\" \"rouine\" \"rounier\" \"ruenoir\" \"ruenoir\"\
    \ \"ruerino\" \"ruierno\" \"ruine", "        // Write your code here\n       \
    \ s.count(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c ==\
    \ 'y')", '        return 0l', "        // Your code goes here\n        var count\
    \ = 0\n        for (c <- s) {\n            c match {\n                case 'a'\
    \ | 'e' | 'i' | 'o' | 'u' => count += 1\n                case 'y' => if (s.last\
    \ == 'y') count += 1\n                case _ =>\n            }\n        }\n  \
    \      count", "        val vowels = Array('a', 'e', 'i', 'o', 'u', 'y')\n   \
    \     var count = 0\n        val lastIndex = s.length - 1\n        for (i <- 0\
    \ to lastIndex) {\n            val c = s(i)\n            if (vowels.contains(c))\
    \ count += 1\n            if (c == 'y' && i != lastIndex) count -= 1\n       \
    \ }\n        count", "        // Add your code here\n        return 0l", "   \
    \     def isVowel(c : Char) : Boolean = {\n            c match {\n           \
    \     case 'a' | 'e' | 'i' | 'o' | 'u' | 'y' => true\n                case _ =>\
    \ false\n            }\n        }\n        s.filter(isVowel).length", "      \
    \  val vowels = List('a', 'e', 'i', 'o', 'u', 'y')\n        s.toList.foldLeft(0)\
    \ { (acc, cur) => if (vowels.contains(cur)) acc + 1 else acc }", '        return
    0', "        s.toLowerCase().count(c => c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') +\n        (if (s.length > 0 && s.toLowerCase()(s.length\
    \ - 1) == 'y') 1 else 0)", '        // Write your code here', '        ???', " \
    \       val y_is_vowel = s.last == 'y'\n        val vowels = List('a', 'e', 'i',\
    \ 'o', 'u')\n        val count = s.toList.filter(vowels.contains(_)).length\n\
    \        return if (y_is_vowel) count + 1 else count", "        // Replace the\
    \ following line with your implementation\n        -1", "        val ls = s.toLowerCase\n\
    \        ls.foldLeft(0l)((acc, c) => {if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' || c == 'y') acc + 1 else acc})", "        val vowels =\
    \ List('a', 'e', 'i', 'o', 'u')\n        s.toList.filter(vowels.contains(_)).length.toLong",
  "        // Fill in the code here\n        // This is a stub. Replace with your\
    \ own code.\n        0l", "        // Write your code here.\n        null", " \
    \       // REPLACE THE QUESTION MARK WITH YOUR CODE\n        return s.filter(x\
    \ => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y').size",
  "        var c = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n    \
    \            c += 1\n            }\n        }\n        return c", "        val\
    \ vowels = List('a', 'e', 'i', 'o', 'u')\n        var count = 0\n        var last\
    \ = ' '\n        for (char <- s) {\n            if (vowels.contains(char.toLower))\
    \ count += 1\n            last = char\n        }\n        if (vowels.contains(last.toLower))\
    \ count += 1\n        count", "        val vowels = \"aeiouAEIOU\"\n        var\
    \ count = 0\n        if (s.length > 0) {\n            val l = s.last\n       \
    \     if (vowels.contains(l)) count += 1\n        }\n        (0 until s.length\
    \ - 1).foreach(i => if (vowels.contains(s(i))) count += 1)\n        count", '        return
    0l', "        var count : Long = 0\n        for (i <- 0 until s.length) {\n  \
    \          if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i)\
    \ == 'u') {\n                count += 1\n            }\n        }\n        if\
    \ (s(s.length - 1) == 'y') {\n            count += 1\n        }\n        return\
    \ count", "        var result = 0l\n        for (i <- 0 until s.length)\n    \
    \        if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i)\
    \ == 'u' || (s(i) == 'y' && i == s.length - 1))\n                result += 1\n\
    \        result", "        // YOUR CODE HERE\n        0", "\t// Fill up this function\
    \ body\n\t// You can add another function as well, if required\n\t0l", "     \
    \   var count = 0\n        for (c <- s) {\n            if (\"aeiou\".contains(c))\
    \ {\n                count += 1\n            }\n        }\n        if (s.endsWith(\"\
    y\")) count += 1\n        count", "        // Replace the ??? with code which\
    \ accomplishes the task.\n        ???", "        s.toList.filter(c => (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')).length.toLong",
  "        def countVowels(s : String, count : Long) : Long = {\n            if (s.length\
    \ == 0) {\n                count\n            } else {\n                val newCount\
    \ = if (s.head == 'a' || s.head == 'e' || s.head == 'i' || s.head == 'o' || s.head\
    \ == 'u') count + 1 else count\n                countVowels(s.tail, newCount)\n\
    \            }\n        }\n        s.toLowerCase match {\n            case x if\
    \ (x.endsWith(\"y\")) => countVowels(x.slice(0, x.length - 1), 1)\n          \
    \  case x => countVowels(x, 0)\n        }", "        var vowels = \"aeiouy\"\n\
    \        var counter = 0\n        var i = 0\n        while (i < s.length) {\n\
    \            if (vowels.contains(s(i))) counter += 1\n            i += 1\n   \
    \     }\n        return counter", "        var count = 0\n        for (ch <- s)\
    \ {\n            if (isVowel(ch)) count += 1\n        }\n        if (s.length\
    \ >= 2 && s(s.length - 1) == 'y' && isConsonant(s(s.length - 2))) count += 1\n\
    \        return count", "        // ADD YOUR CODE HERE\n        return -1", " \
    \       // Your code goes here.\n        if (s.length() == 0) {\n            return\
    \ 0;\n        }\n        else if (s.length() == 1) {\n            if (s(0) ==\
    \ 'a' || s(0) == 'e' || s(0) == 'i' || s(0) == 'o' || s(0) == 'u') {\n       \
    \         return 1;\n            }\n            else {\n                return\
    \ 0;\n            }\n        }\n        else {\n            if (s(0) == 'a' ||\
    \ s(0) == 'e' || s(0) == 'i' || s(0) == 'o' || s(0) == 'u') {\n              \
    \  return 1 + vowelsCount(s.substring(1, s.length()));\n            }\n      \
    \      else {\n                return vowelsCount(s.substring(1, s.length()));\n\
    \            }\n        }", "        def isVowel(c : Char) : Boolean = {\n   \
    \         c match {\n                case 'a' | 'e' | 'i' | 'o' | 'u' | 'y' =>\
    \ true\n                case _ => false\n            }\n        }\n        def\
    \ vowelsCountRec(s : String, tail : Boolean) : Long = {\n            if (s.isEmpty)\
    \ 0 else {\n                val head : Char = s.head\n                if (isVowel(head))\
    \ {\n                    val tail : Boolean = if (head == 'y') true else false\n\
    \                    1 + vowelsCountRec(s.tail, tail)\n                } else\
    \ {\n                    if (tail) 1 + vowelsCountRec(s.tail, tail) else vowelsCountRec(s.tail,\
    \ tail)\n                }\n            }\n        }\n        vowelsCountRec(s,\
    \ false)", "        def isVowel(x : Char) : Boolean = {\n            return x\
    \ == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y'\n       \
    \ }\n        if (s.length == 0) {\n            return 0l\n        }\n        val\
    \ l = s.last\n        if (isVowel(l)) {\n            return 1l + vowelsCount(s.substring(0,\
    \ s.length - 1))\n        }\n        return vowelsCount(s.substring(0, s.length\
    \ - 1))", '        return s.toLowerCase.filter(x => "aeiouy".contains(x)).size',
  "        s.count(x => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' ||\
    \ (x == 'y' && (s.last == x)))", "      val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \      s.filter(vowels.contains(_)).length", '        // Write your code here.',
  "        s.count(c => List('a', 'e', 'i', 'o', 'u').contains(c.toLower))", "   \
    \     var count : Long = 0\n        for (x <- s) {\n            if (x == 'a' ||\
    \ x == 'e' || x == 'i' || x == 'o' || x == 'u') {\n                count += 1\n\
    \            }\n        }\n        if (s.last == 'y') {\n            count +=\
    \ 1\n        }\n        return count", '        ???', "        // Fill Up this\
    \ function body\n        // `0L` is the Scala notation for Long 0\n        0L",
  "        val vowel = \"aeiouy\"\n        var count = 0\n        for (c <- s.toLowerCase)\
    \ {\n            if (vowel.contains(c)) {\n                count += 1\n      \
    \      }\n        }\n        return count", '        ???', "        // Solution\
    \ goes here\n        val s2 = s.toLowerCase\n        var result = 0l\n       \
    \ for (i <- 0 until s2.length) {\n            val c = s2(i)\n            if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') result += 1\n      \
    \      if (c == 'y' && i != s2.length - 1) result += 1\n        }\n        result",
  "        // YOUR CODE HERE\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val word = s.toLowerCase\n        return word.filter(vowels).length +\n\
    \            (if (word.endsWith(\"y\")) 1 else 0)", "      val str = s.toLowerCase\n\
    \      val l = str.length\n      var i = 0\n      var result = 0l\n      for (i\
    \ <- 0 until l) {\n        str(i) match {\n          case 'a' => result += 1\n\
    \          case 'e' => result += 1\n          case 'i' => result += 1\n      \
    \    case 'o' => result += 1\n          case 'u' => result += 1\n          case\
    \ 'y' => if (i == l - 1) result += 1\n          case _ =>\n        }\n      }\n\
    \      result", "        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i)\
    \ == 'u' || (s(i) == 'y' && i == s.length - 1))\n                count += 1\n\
    \        return count", "        // >>> vowel_count(\"abcde\")\n        // 2\n\
    \        // >>> vowel_count(\"ACEDY\")\n        // 3\n        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        val sv = s.toLowerCase.filter(c => vowels.contains(c))\n\
    \        if (sv.isEmpty) 0\n        else if (sv.last == 'y') sv.size\n       \
    \ else sv.size - 1", "\tval vowels = \"aeiouy\"\n\tvar counter = 0l\n\tvar i =\
    \ 0\n\tval length = s.length\n\twhile (i < length) {\n\t    if (vowels.contains(s(i)))\
    \ {\n\t\tcounter += 1\n\t    }\n\t    i += 1\n\t}\n\tif (vowels.contains(s(length\
    \ - 1))) {\n\t    counter += 1\n\t}\n\tcounter", "        s.count(x => x == 'a'\
    \ || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y')", "        var\
    \ count = 0\n        for (c <- s) {\n            c match {\n                case\
    \ 'a' | 'e' | 'i' | 'o' | 'u' => count += 1\n                case 'y' => if (s.indexOf(c)\
    \ == s.length - 1) count += 1\n                case _ => Unit\n            }\n\
    \        }\n        count", '        ???', '        ???', "        val l = s.toLowerCase.toList\n\
    \        l.filter(x => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u'\
    \ || (x == 'y' && l.last == x)).length", "        val lst = s.toList.filter(x\
    \ => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y');\n\
    \        val ls = lst.zipWithIndex.filter{ case (x, i) => x == 'y' && (i == lst.length\
    \ - 1)};\n        return lst.length - ls.length;", "        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        if (s.isEmpty) return 0\n        return (if (vowels.contains(s.charAt(0).toLower))\
    \ 1 else 0) + vowelsCount(s.drop(1))", "\t    if (s.length() == 0) return 0\n\t\
    \    var total : Long = 0\n\t    val vowels = List('a', 'e', 'i', 'o', 'u', 'y')\n\
    \t    val current = s.charAt(0)\n\t    if (vowels.contains(current)) {\n\t   \
    \ \ttotal += 1\n\t    }\n\t    return total + vowelsCount(s.substring(1))", " \
    \       val vowels = List('a', 'e', 'i', 'o', 'u')\n        val y_vowel = List('y')\n\
    \        var n = 0\n        for (c <- s.toLowerCase()) {\n            if (vowels.contains(c))\
    \ n += 1\n        }\n        if (s.toLowerCase().endsWith(\"y\")) {\n        \
    \    n += 1\n        }\n        n", "        s.filter(i => List('a', 'e', 'i',\
    \ 'o', 'u', 'y').contains(i)).size", "        return s.count(c => c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')", "        // Return\
    \ the number of vowels in string s.\n        s.count(c => \"aeiouyAEIOUY\".contains(c))",
  "        // >>> vowelsCount((\"abcde\"))\n        // (2l)\n        // >>> vowelsCount((\"\
    ACEDY\"))\n        // (3l)\n        s.toLowerCase().count(c => Set('a', 'e', 'i',\
    \ 'o', 'u', 'y').contains(c))", "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val xs = s.toLowerCase().toCharArray\n        xs.foldLeft(0l)\
    \ {\n            (m, c) => {\n                if (vowels.contains(c)) m + 1 else\
    \ m\n            }\n        }", "        s.toLowerCase().split(\"\").foldLeft(0L)((acc,\
    \ ch) => if (List('a', 'e', 'i', 'o', 'u').contains(ch.charAt(0))) acc + 1 else\
    \ acc)", '        ???', '        ???', '        ???', "        if (s.length()\
    \ <= 1)\n            return if (s == \"a\" || s == \"e\" || s == \"i\" || s ==\
    \ \"o\" || s == \"u\" || s == \"y\") 1 else 0\n        return if (s.takeRight(1)\
    \ == \"a\" || s.takeRight(1) == \"e\" || s.takeRight(1) == \"i\" || s.takeRight(1)\
    \ == \"o\" || s.takeRight(1) == \"u\" || s.takeRight(1) == \"y\") vowelsCount(s.dropRight(1))\
    \ + 1 else vowelsCount(s.dropRight(1))", "        var count = 0\n        for (c\
    \ <- s.toLowerCase) {\n            if (List('a', 'e', 'i', 'o', 'u').contains(c))\
    \ {\n                count += 1\n            }\n        }\n        return count",
  "        // TODO\n        return 0;", '        throw new NotImplementedError', " \
    \     s.filter(x => x.toLower == 'a' || x.toLower == 'e' || x.toLower == 'i' ||\
    \ x.toLower == 'o' || x.toLower == 'u' || x.toLower == 'y').length", "       \
    \ // Write your code here\n        s.filter(c => List('a', 'e', 'i', 'o', 'u').contains(c)).length"]
stop_tokens:
- "\n    }\n"
