language: php
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $n) {\n        $rescaled[]\
    \ = ($n - $min) / $range;\n    }\n    return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    return array_map(function($n) use ($min, $range) {\n        return\
    \ ($n - $min) / $range;\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $unit = array();\n    foreach ($numbers as $number) {\n        $unit[]\
    \ = ($number - $min) / $range;\n    }\n    return $unit;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n\
    \  $result = array();\n  foreach ($numbers as $number) {\n    $result[] = ($number\
    \ - $min) / $range;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $unit = array();\n    foreach ($numbers as $number) {\n        $unit[]\
    \ = ($number - $min) / $range;\n    }\n    return $unit;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $n) {\n        $result[]\
    \ = ($n - $min) / $range;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $new_numbers = array();\n    foreach ($numbers as $number) {\n  \
    \      $new_numbers[] = ($number - $min) / $range;\n    }\n    return $new_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $n) {\n        $scaled[]\
    \ = ($n - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    if ($range == 0) {\n        return array_fill(0, count($numbers),\
    \ 0.5);\n    }\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $new_numbers = array();\n    foreach ($numbers as $number) {\n  \
    \      $new_numbers[] = ($number - $min) / $range;\n    }\n    return $new_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $new_numbers = array();\n    foreach ($numbers as $number) {\n  \
    \      $new_numbers[] = ($number - $min) / $range;\n    }\n    return $new_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / ($max\
    \ - $min);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n\
    \  $scaled = array();\n  foreach ($numbers as $number) {\n    $scaled[] = ($number\
    \ - $min) / $range;\n  }\n  return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / ($max\
    \ - $min);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n\
    \  $result = array();\n  foreach ($numbers as $number) {\n    $result[] = ($number\
    \ - $min) / $range;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    if ($range == 0) {\n        return array_fill(0, count($numbers),\
    \ 0.5);\n    } else {\n        return array_map(function($x) use ($min, $range)\
    \ { return ($x - $min) / $range; }, $numbers);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = $max - $min;\n\
    \  $scaled = array();\n  foreach ($numbers as $number) {\n    $scaled[] = ($number\
    \ - $min) / $range;\n  }\n  return $scaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / ($max\
    \ - $min);\n    }\n    return $scaled;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $new_numbers = array();\n    foreach ($numbers as $number) {\n  \
    \      $new_numbers[] = ($number - $min) / $range;\n    }\n    return $new_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $result = array();\n    foreach ($numbers as $number) {\n       \
    \ $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n     \
    \   $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
- exit_code: 0
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max -\
    \ $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n       \
    \ $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730748
