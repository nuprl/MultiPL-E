name: HumanEval_112_reverse_delete
language: php
prompt: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
  \ all the characters in s that are equal to any character in c\n// then check if\
  \ the result string is palindrome.\n// A string is called palindrome if it reads\
  \ the same backward as forward.\n// You should return an array containing the result\
  \ string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\"\
  , \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\", \"b\")\n\
  // array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// array(\"\
  cdedc\", true)\nfunction reverse_delete($s, $c) {\n"
tests: "function candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
  , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
  , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
  dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !==\
  \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n\
    \    foreach ($s as $key => $value) {\n        if (in_array($value, $c)) {\n \
    \           unset($s[$key]);\n        }\n    }\n    $result[] = implode('', $s);\n\
    \    $result[] = $result[0] == strrev($result[0]) ? true : false;\n    return\
    \ $result;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "  $s =\
    \ str_split($s);\n  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key\
    \ => $value) {\n    if (!in_array($value, $c)) {\n      $result[] = $value;\n\
    \    }\n  }\n  $result = implode('', $result);\n  $result = str_split($result);\n\
    \  $result_reversed = array_reverse($result);\n  $result = implode('', $result);\n\
    \  $result_reversed = implode('', $result_reversed);\n  if ($result === $result_reversed)\
    \ {\n    return [$result, true];\n  } else {\n    return [$result, false];\n \
    \ }\n}\n", "    $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n\
    \    foreach ($s as $key => $value) {\n        if (in_array($value, $c)) {\n \
    \           unset($s[$key]);\n        }\n    }\n    $result[] = implode($s);\n\
    \    $result[] = $result[0] == strrev($result[0]) ? true : false;\n    return\
    \ $result;\n}", "    $s = str_split($s);\n    $c = str_split($c);\n    $result\
    \ = [];\n    foreach ($s as $key => $value) {\n        if (in_array($value, $c))\
    \ {\n            unset($s[$key]);\n        }\n    }\n    $s = implode('', $s);\n\
    \    $result[] = $s;\n    $result[] = $s == strrev($s) ? true : false;\n    return\
    \ $result;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $c\
    \ = str_split($c);\n    $s = str_split($s);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $check\
    \ = $result == strrev($result) ? true : false;\n    return [$result, $check];\n\
    }", "    $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n   \
    \ foreach ($s as $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $arr = str_split($s);\n    $arr2 = str_split($c);\n\
    \    $arr3 = [];\n    foreach ($arr as $value) {\n        if (!in_array($value,\
    \ $arr2)) {\n            $arr3[] = $value;\n        }\n    }\n    $str = implode($arr3);\n\
    \    $arr4 = str_split($str);\n    $arr5 = array_reverse($arr4);\n    $str2 =\
    \ implode($arr5);\n    if ($str == $str2) {\n        return [$str, true];\n  \
    \  } else {\n        return [$str, false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $s = str_split($s);\n    $c = str_split($c);\n \
    \   $result = [];\n    foreach ($s as $key => $value) {\n        if (in_array($value,\
    \ $c)) {\n            unset($s[$key]);\n        }\n    }\n    $result[] = implode($s);\n\
    \    $result[] = $result[0] == strrev($result[0]) ? true : false;\n    return\
    \ $result;\n}\n", "  $s = str_split($s);\n  $c = str_split($c);\n  $result = [];\n\
    \  foreach ($s as $key => $value) {\n    if (!in_array($value, $c)) {\n      $result[]\
    \ = $value;\n    }\n  }\n  $result = implode('', $result);\n  $result = str_split($result);\n\
    \  $result_reverse = array_reverse($result);\n  if ($result == $result_reverse)\
    \ {\n    return [implode('', $result), true];\n  } else {\n    return [implode('',\
    \ $result), false];\n  }\n}\n", "    $s = str_split($s);\n    $c = str_split($c);\n\
    \    $result = [];\n    foreach ($s as $key => $value) {\n        foreach ($c\
    \ as $key2 => $value2) {\n            if ($value == $value2) {\n             \
    \   unset($s[$key]);\n            }\n        }\n    }\n    $result[] = implode($s);\n\
    \    $result[] = $result[0] == strrev($result[0]) ? true : false;\n    return\
    \ $result;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $c\
    \ = str_split($c);\n    $s = str_split($s);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode(\"\", $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result_reverse\
    \ = implode(\"\", $result_reverse);\n    $result = implode(\"\", $result);\n \
    \   if ($result === $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    $result = [];\n    foreach ($s as $key => $value)\
    \ {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n     \
    \   }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    $result = [];\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $result[]\
    \ = implode($s);\n    $result[] = $result[0] == strrev($result[0]) ? true : false;\n\
    \    return $result;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "  $s =\
    \ str_split($s);\n  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key\
    \ => $value) {\n    if (in_array($value, $c)) {\n      unset($s[$key]);\n    }\n\
    \  }\n  $result[] = implode('', $s);\n  $result[] = $result[0] == strrev($result[0])\
    \ ? true : false;\n  return $result;\n}\nprint_r(reverse_delete(\"abcde\", \"\
    ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    $s = str_split($s);\n    $c = str_split($c);\n \
    \   $result = [];\n    foreach ($s as $key => $value) {\n        if (in_array($value,\
    \ $c)) {\n            unset($s[$key]);\n        }\n    }\n    $s = implode('',\
    \ $s);\n    $result[] = $s;\n    $result[] = $s == strrev($s) ? true : false;\n\
    \    return $result;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));", "    $s\
    \ = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key2 => $value2) {\n         \
    \   if ($value == $value2) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    $result = [];\n    foreach ($s as $key => $value)\
    \ {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n     \
    \   }\n    }\n    $s = implode($s);\n    $result[] = $s;\n    $result[] = $s ==\
    \ strrev($s) ? true : false;\n    return $result;\n}\n", "    $s = str_split($s);\n\
    \    $c = str_split($c);\n    $result = [];\n    foreach ($s as $key => $value)\
    \ {\n        if (!in_array($value, $c)) {\n            $result[] = $value;\n \
    \       }\n    }\n    $result = implode('', $result);\n    $result = str_split($result);\n\
    \    $result_reverse = array_reverse($result);\n    if ($result == $result_reverse)\
    \ {\n        return [implode('', $result), true];\n    } else {\n        return\
    \ [implode('', $result), false];\n    }\n}\n", "    $s = str_split($s);\n    $c\
    \ = str_split($c);\n    $result = [];\n    foreach ($s as $key => $value) {\n\
    \        if (!in_array($value, $c)) {\n            $result[] = $value;\n     \
    \   }\n    }\n    $result = implode(\"\", $result);\n    $result = str_split($result);\n\
    \    $result_reverse = array_reverse($result);\n    $result = implode(\"\", $result);\n\
    \    $result_reverse = implode(\"\", $result_reverse);\n    if ($result == $result_reverse)\
    \ {\n        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n", "  $s = str_split($s);\n  $c = str_split($c);\n  $result = [];\n\
    \  foreach ($s as $key => $value) {\n    if (in_array($value, $c)) {\n      unset($s[$key]);\n\
    \    }\n  }\n  $result[] = implode($s);\n  $result[] = $result[0] == strrev($result[0])\
    \ ? true : false;\n  return $result;\n}\nprint_r(reverse_delete(\"abcde\", \"\
    ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
