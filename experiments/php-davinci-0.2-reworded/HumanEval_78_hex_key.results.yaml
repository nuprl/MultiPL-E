language: php
name: HumanEval_78_hex_key
results:
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    $num\
    \ = str_split($num);\n    foreach ($num as $value) {\n        if (in_array(hexdec($value),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0' => 0,\n        '1' => 1,\n \
    \       '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n \
    \       '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n \
    \       'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n\
    \        'E' => 14,\n        'F' => 15\n    );\n    $primes = array(2, 3, 5, 7,\
    \ 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n   \
    \     if (in_array($hex[$num[$i]], $primes)) {\n            $count++;\n      \
    \  }\n    }\n    return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    $num\
    \ = str_split($num);\n    foreach ($num as $n) {\n        if (in_array(hexdec($n),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $prime = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array(array_search($num[$i],\
    \ $hex), $prime)) {\n                $count++;\n            }\n        }\n   \
    \ }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n   \
    \ $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(array_search($num[$i], $hex), $primes)) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = ['2','3','5','7','B','D'];\n    $count = 0;\n    for ($i=0; $i\
    \ < strlen($num); $i++) { \n        if (in_array($num[$i], $primes)) {\n     \
    \       $count++;\n        }\n    }\n    return $count;\n}\necho hex_key(\"AB\"\
    ) . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") .\
    \ \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnt1pqkoe.php:46\n\
    Stack trace:\n#0 /tmp/tmpnt1pqkoe.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpnt1pqkoe.php\
    \ on line 46\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0' => 0,\n        '1' => 1,\n \
    \       '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n \
    \       '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n \
    \       'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n\
    \        'E' => 14,\n        'F' => 15\n    );\n    $primes = array(2, 3, 5, 7,\
    \ 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n   \
    \     if (in_array($hex[$num[$i]], $primes)) {\n            $count++;\n      \
    \  }\n    }\n    return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n\
    \    $primes = array(2,3,5,7,11,13);\n    $count = 0;\n    for($i = 0; $i < strlen($num);\
    \ $i++) {\n        if(in_array($num[$i], $hex)) {\n            if(in_array($num[$i],\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaoouhd60.php:41\n\
    Stack trace:\n#0 /tmp/tmpaoouhd60.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpaoouhd60.php\
    \ on line 41\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppih2vf9t.php:42\n\
    Stack trace:\n#0 /tmp/tmppih2vf9t.php(50): test()\n#1 {main}\n  thrown in /tmp/tmppih2vf9t.php\
    \ on line 42\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppih2vf9t.php:42\n\
    Stack trace:\n#0 /tmp/tmppih2vf9t.php(50): test()\n#1 {main}\n  thrown in /tmp/tmppih2vf9t.php\
    \ on line 42\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        \"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\",\n        \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\"\n    );\n    $primes = array(\n        \"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"\n    );\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++)\
    \ {\n        if (in_array($num[$i], $primes)) {\n            $count++;\n     \
    \   }\n    }\n    return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnt1pqkoe.php:46\n\
    Stack trace:\n#0 /tmp/tmpnt1pqkoe.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpnt1pqkoe.php\
    \ on line 46\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"\
    ,\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\");\n    $primes = array(\"\
    2\",\"3\",\"5\",\"7\",\"B\",\"D\");\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $primes)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\necho hex_key(\"AB\").\"\\n\";\necho\
    \ hex_key(\"1077E\").\"\\n\";\necho hex_key(\"ABED1A33\").\"\\n\";\necho hex_key(\"\
    123456789ABCDEF0\").\"\\n\";\necho hex_key(\"2020\").\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex_primes = array(2, 3, 5, 7, 11, 13);\n    $hex_digits\
    \ = str_split(strtoupper($num));\n    $count = 0;\n    foreach ($hex_digits as\
    \ $digit) {\n        if (in_array(hexdec($digit), $hex_primes)) {\n          \
    \  $count++;\n        }\n    }\n    return $count;\n}\n\necho hex_key(\"AB\")\
    \ . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") .\
    \ \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = ['2', '3', '5', '7', 'B', 'D'];\n    $count =\
    \ 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');\n\
    \    $primes = array(2,3,5,7,11,13);\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($num[$i],\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\necho hex_key(\"AB\").\"\\n\";\necho hex_key(\"1077E\").\"\
    \\n\";\necho hex_key(\"ABED1A33\").\"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ).\"\\n\";\necho hex_key(\"2020\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfkjzp4bw.php:46\n\
    Stack trace:\n#0 /tmp/tmpfkjzp4bw.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpfkjzp4bw.php\
    \ on line 46\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\necho hex_key(\"AB\").\"\\n\";\necho hex_key(\"1077E\"\
    ).\"\\n\";\necho hex_key(\"ABED1A33\").\"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ).\"\\n\";\necho hex_key(\"2020\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtfenvm_.php:46\n\
    Stack trace:\n#0 /tmp/tmpbtfenvm_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpbtfenvm_.php\
    \ on line 46\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex_primes = [2, 3, 5, 7, 11, 13];\n    $hex_digits =\
    \ str_split(strtoupper($num));\n    $count = 0;\n    foreach ($hex_digits as $digit)\
    \ {\n        if (in_array(hexdec($digit), $hex_primes)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n\
    \    $prime = array(2,3,5,7,11,13);\n    $count = 0;\n    $num = str_split($num);\n\
    \    foreach($num as $n) {\n        if(in_array($n, $hex)) {\n            if(in_array($n,\
    \ $prime)) {\n                $count++;\n            }\n        }\n    }\n   \
    \ return $count;\n}\n\necho hex_key(\"AB\").\"\\n\";\necho hex_key(\"1077E\").\"\
    \\n\";\necho hex_key(\"ABED1A33\").\"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ).\"\\n\";\necho hex_key(\"2020\").\"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdrc7z03c.php:49\n\
    Stack trace:\n#0 /tmp/tmpdrc7z03c.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpdrc7z03c.php\
    \ on line 49\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = str_split($num);\n    $primes = array(2, 3, 5, 7,\
    \ 11, 13);\n    $count = 0;\n    foreach ($hex as $value) {\n        if (in_array($value,\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    print_r(hex_key(\"AB\"));\nprint_r(hex_key(\"1077E\"));\nprint_r(hex_key(\"ABED1A33\"\
    ));\nprint_r(hex_key(\"123456789ABCDEF0\"));\nprint_r(hex_key(\"2020\"));\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "02242\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0phk0mda.php:44\n\
    Stack trace:\n#0 /tmp/tmp0phk0mda.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp0phk0mda.php\
    \ on line 44\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = ['2', '3', '5', '7', 'B', 'D'];\n\
    \    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n   \
    \ $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            $index = array_search($num[$i], $hex);\n            if\
    \ (in_array($index, $primes)) {\n                $count++;\n            }\n  \
    \      }\n    }\n    return $count;\n}\n\necho hex_key(\"AB\") . \"\\n\";\necho\
    \ hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"\
    123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n  $hex = array(\n    '0' => 0,\n    '1' => 1,\n    '2' => 2,\n\
    \    '3' => 3,\n    '4' => 4,\n    '5' => 5,\n    '6' => 6,\n    '7' => 7,\n \
    \   '8' => 8,\n    '9' => 9,\n    'A' => 10,\n    'B' => 11,\n    'C' => 12,\n\
    \    'D' => 13,\n    'E' => 14,\n    'F' => 15\n  );\n  $primes = array(2, 3,\
    \ 5, 7, 11, 13);\n  $count = 0;\n  for ($i = 0; $i < strlen($num); $i++) {\n \
    \   if (in_array($hex[$num[$i]], $primes)) {\n      $count++;\n    }\n  }\n  return\
    \ $count;\n}\n\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\\
    n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(hexdec($num[$i]), $primes)) {\n         \
    \       $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n\
    echo hex_key(\"AB\");\necho \"<br>\";\necho hex_key(\"1077E\");\necho \"<br>\"\
    ;\necho hex_key(\"ABED1A33\");\necho \"<br>\";\necho hex_key(\"123456789ABCDEF0\"\
    );\necho \"<br>\";\necho hex_key(\"2020\");\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br>2<br>4<br>6<br>2<br>
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    $num\
    \ = str_split($num);\n    foreach ($num as $n) {\n        if (in_array(hexdec($n),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n  \
    \  for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $hex)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n\t$hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \t$prime = [2,3,5,7,11,13];\n\t$count = 0;\n\t$arr = str_split($num);\n\tforeach\
    \ ($arr as $value) {\n\t\tif (in_array($value, $hex)) {\n\t\t\tif (in_array($value,\
    \ $prime)) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\necho\
    \ hex_key(\"AB\").\"\\n\";\necho hex_key(\"1077E\").\"\\n\";\necho hex_key(\"\
    ABED1A33\").\"\\n\";\necho hex_key(\"123456789ABCDEF0\").\"\\n\";\necho hex_key(\"\
    2020\").\"\\n\";\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8ji2tus.php:48\n\
    Stack trace:\n#0 /tmp/tmp_8ji2tus.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_8ji2tus.php\
    \ on line 48\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = str_split($num);\n    $primes = array(2, 3, 5, 7,\
    \ 11, 13);\n    $count = 0;\n    foreach ($hex as $value) {\n        if (in_array($value,\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\");\necho \"<br>\";\necho hex_key(\"1077E\");\necho \"<br>\"\
    ;\necho hex_key(\"ABED1A33\");\necho \"<br>\";\necho hex_key(\"123456789ABCDEF0\"\
    );\necho \"<br>\";\necho hex_key(\"2020\");\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0<br>2<br>2<br>4<br>2<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpduknzsk6.php:49\nStack trace:\n#0 /tmp/tmpduknzsk6.php(57): test()\n\
    #1 {main}\n  thrown in /tmp/tmpduknzsk6.php on line 49\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex_primes = array(2, 3, 5, 7, 11, 13);\n    $hex_digits\
    \ = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D',\
    \ 'E', 'F');\n    $hex_decimal = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15);\n    $hex_prime_count = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        $hex_digit = $num[$i];\n        $hex_digit_decimal = array_search($hex_digit,\
    \ $hex_digits);\n        if (in_array($hex_digit_decimal, $hex_primes)) {\n  \
    \          $hex_prime_count++;\n        }\n    }\n    return $hex_prime_count;\n\
    }\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9',\n        'A', 'B', 'C', 'D', 'E', 'F'\n    );\n    $primes =\
    \ array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if (in_array($num[$i], $hex)) {\n            if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\n\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\"\
    ) . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $hex = array(0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F');\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], $primes))\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\necho hex_key(\"\
    AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\"\
    ) . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptsqbacx2.php:44\n\
    Stack trace:\n#0 /tmp/tmptsqbacx2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmptsqbacx2.php\
    \ on line 44\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $prime = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array(array_search($num[$i],\
    \ $hex), $prime)) {\n                $count++;\n            }\n        }\n   \
    \ }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0' => 0,\n        '1' => 1,\n \
    \       '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n \
    \       '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n \
    \       'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n\
    \        'E' => 14,\n        'F' => 15\n    );\n    $primes = array(2, 3, 5, 7,\
    \ 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n   \
    \     if (in_array($hex[$num[$i]], $primes)) {\n            $count++;\n      \
    \  }\n    }\n    return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0' => 0,\n        '1' => 1,\n \
    \       '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n \
    \       '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n \
    \       'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n\
    \        'E' => 14,\n        'F' => 15\n    );\n    $primes = array(2, 3, 5, 7,\
    \ 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n   \
    \     if (in_array($hex[$num[$i]], $primes)) {\n            $count++;\n      \
    \  }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = ['2', '3', '5', '7', 'B', 'D'];\n\
    \    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\necho hex_key(\"AB\");\necho \"<br>\";\necho hex_key(\"\
    1077E\");\necho \"<br>\";\necho hex_key(\"ABED1A33\");\necho \"<br>\";\necho hex_key(\"\
    123456789ABCDEF0\");\necho \"<br>\";\necho hex_key(\"2020\");\necho \"<br>\";\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0<br>2<br>2<br>4<br>2<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpxacrrbg8.php:51\nStack trace:\n#0 /tmp/tmpxacrrbg8.php(59): test()\n\
    #1 {main}\n  thrown in /tmp/tmpxacrrbg8.php on line 51\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n\
    \    $primes = array(2,3,5,7,11,13);\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($num[$i],\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\"\
    ) . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcfczuooa.php:46\n\
    Stack trace:\n#0 /tmp/tmpcfczuooa.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpcfczuooa.php\
    \ on line 46\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    $num\
    \ = str_split($num);\n    foreach ($num as $digit) {\n        if (in_array(hexdec($digit),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0' => 0,\n        '1' => 1,\n \
    \       '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n \
    \       '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n \
    \       'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n\
    \        'E' => 14,\n        'F' => 15\n    );\n    $primes = array(2, 3, 5, 7,\
    \ 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n   \
    \     if (in_array($hex[$num[$i]], $primes)) {\n            $count++;\n      \
    \  }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    $num\
    \ = str_split($num);\n    foreach ($num as $n) {\n        if (in_array(hexdec($n),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex_primes = 0;\n\
    \    $hex_num = str_split(strtoupper($num));\n    foreach ($hex_num as $digit)\
    \ {\n        if (in_array(hexdec($digit), $primes)) {\n            $hex_primes++;\n\
    \        }\n    }\n    return $hex_primes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        $char = strtoupper($num[$i]);\n\
    \        if (in_array($char, $primes)) {\n            $count++;\n        }\n \
    \   }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pgf3rgb.php:40\n\
    Stack trace:\n#0 /tmp/tmp2pgf3rgb.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2pgf3rgb.php\
    \ on line 40\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    $num = str_split($num);\n    foreach ($num as $digit) {\n        if\
    \ (in_array($digit, $hex)) {\n            if (in_array($digit, $primes)) {\n \
    \               $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho\
    \ hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\\
    n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92dykqga.php:48\n\
    Stack trace:\n#0 /tmp/tmp92dykqga.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp92dykqga.php\
    \ on line 48\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n   \
    \ $count = 0;\n    $num = str_split($num);\n    foreach ($num as $n) {\n     \
    \   if (in_array($n, $hex)) {\n            $index = array_search($n, $hex);\n\
    \            if (in_array($index, $primes)) {\n                $count++;\n   \
    \         }\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    $num\
    \ = str_split($num);\n    foreach ($num as $value) {\n        if (in_array(hexdec($value),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\");\necho \"<br>\";\necho hex_key(\"1077E\");\necho \"<br>\"\
    ;\necho hex_key(\"ABED1A33\");\necho \"<br>\";\necho hex_key(\"123456789ABCDEF0\"\
    );\necho \"<br>\";\necho hex_key(\"2020\");\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br>2<br>4<br>6<br>2
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n\
    \    $primes = array(2,3,5,7,11,13);\n    $count = 0;\n    $num = str_split($num);\n\
    \    foreach($num as $n) {\n        if(in_array($n, $primes)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxtv573vv.php:41\n\
    Stack trace:\n#0 /tmp/tmpxtv573vv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxtv573vv.php\
    \ on line 41\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\necho hex_key(\"AB\").\"\\n\";\necho hex_key(\"1077E\"\
    ).\"\\n\";\necho hex_key(\"ABED1A33\").\"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ).\"\\n\";\necho hex_key(\"2020\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtfenvm_.php:46\n\
    Stack trace:\n#0 /tmp/tmpbtfenvm_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpbtfenvm_.php\
    \ on line 46\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n\
    \    $num = str_split($num);\n    foreach ($num as $n) {\n        if (in_array(hexdec($n),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\necho hex_key(\"AB\");\necho \"\\n\";\necho hex_key(\"\
    1077E\");\necho \"\\n\";\necho hex_key(\"ABED1A33\");\necho \"\\n\";\necho hex_key(\"\
    123456789ABCDEF0\");\necho \"\\n\";\necho hex_key(\"2020\");\necho \"\\n\";\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwe9ps8ax.php:51\n\
    Stack trace:\n#0 /tmp/tmpwe9ps8ax.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpwe9ps8ax.php\
    \ on line 51\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n   \
    \ $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(array_search($num[$i], $hex), $primes)) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0' => 0,\n        '1' => 1,\n \
    \       '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n \
    \       '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n \
    \       'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n\
    \        'E' => 14,\n        'F' => 15\n    );\n    $prime = array(2, 3, 5, 7,\
    \ 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n   \
    \     if (in_array($hex[$num[$i]], $prime)) {\n            $count++;\n       \
    \ }\n    }\n    return $count;\n}\n\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $hex = array(0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    $hex_primes = array();\n\
    \    foreach ($hex as $key => $value) {\n        if (in_array($value, $primes))\
    \ {\n            $hex_primes[] = $key;\n        }\n    }\n    $count = 0;\n  \
    \  for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $hex_primes)) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex) && in_array(array_search($num[$i], $hex), $primes)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0' => 0,\n        '1' => 1,\n \
    \       '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n \
    \       '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n \
    \       'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n\
    \        'E' => 14,\n        'F' => 15\n    );\n    $primes = array(2, 3, 5, 7,\
    \ 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n   \
    \     if (in_array($hex[$num[$i]], $primes)) {\n            $count++;\n      \
    \  }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = str_split(strtoupper($num));\n\
    \    $count = 0;\n    foreach ($hex as $value) {\n        if (in_array($value,\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqed9whug.php:44\n\
    Stack trace:\n#0 /tmp/tmpqed9whug.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqed9whug.php\
    \ on line 44\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n\t$hex = array('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');\n\
    \t$primes = array('2','3','5','7','B','D');\n\t$count = 0;\n\t$num = str_split($num);\n\
    \tforeach ($num as $value) {\n\t\tif (in_array($value, $primes)) {\n\t\t\t$count++;\n\
    \t\t}\n\t}\n\treturn $count;\n}\necho hex_key(\"AB\");\necho \"<br>\";\necho hex_key(\"\
    1077E\");\necho \"<br>\";\necho hex_key(\"ABED1A33\");\necho \"<br>\";\necho hex_key(\"\
    123456789ABCDEF0\");\necho \"<br>\";\necho hex_key(\"2020\");\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br>2<br>4<br>6<br>2
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $prime = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(array_search($num[$i], $hex), $prime)) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n   \
    \ $count = 0;\n    $num = str_split($num);\n    foreach ($num as $value) {\n \
    \       if (in_array($value, $hex)) {\n            $key = array_search($value,\
    \ $hex);\n            if (in_array($key, $primes)) {\n                $count++;\n\
    \            }\n        }\n    }\n    return $count;\n}\necho hex_key(\"AB\")\
    \ . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") .\
    \ \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex_primes = 0;\n\
    \    $hex_num = str_split(strtoupper($num));\n    foreach ($hex_num as $digit)\
    \ {\n        if (in_array(hexdec($digit), $primes)) {\n            $hex_primes++;\n\
    \        }\n    }\n    return $hex_primes;\n}\n\necho hex_key(\"AB\") . \"\\n\"\
    ;\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\n\
    echo hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\") . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\n    );\n    $primes = array(\n\
    \        '2', '3', '5', '7', 'B', 'D'\n    );\n    $count = 0;\n    for ($i =\
    \ 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], $primes)) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\necho hex_key(\"\
    AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\"\
    ) . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n\
    \    $primes = array(2,3,5,7,11,13);\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($num[$i],\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\n\necho hex_key(\"AB\");\necho \"\\n\";\necho hex_key(\"\
    1077E\");\necho \"\\n\";\necho hex_key(\"ABED1A33\");\necho \"\\n\";\necho hex_key(\"\
    123456789ABCDEF0\");\necho \"\\n\";\necho hex_key(\"2020\");\necho \"\\n\";\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_lk7er01.php:52\n\
    Stack trace:\n#0 /tmp/tmp_lk7er01.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp_lk7er01.php\
    \ on line 52\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = str_split(strtoupper($num));\n\
    \    $hex = array_map(function($n) {\n        return hexdec($n);\n    }, $hex);\n\
    \    $hex = array_filter($hex, function($n) use ($primes) {\n        return in_array($n,\
    \ $primes);\n    });\n    return count($hex);\n}\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n   \
    \ $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(array_search($num[$i], $hex), $primes)) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho\
    \ hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\\
    n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = str_split(strtoupper($num));\n\
    \    $count = 0;\n    foreach ($hex as $digit) {\n        if (in_array($digit,\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uk3jbs5.php:40\n\
    Stack trace:\n#0 /tmp/tmp_uk3jbs5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_uk3jbs5.php\
    \ on line 40\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = str_split(strtoupper($num));\n\
    \    $hex_primes = 0;\n    foreach ($hex as $digit) {\n        if (in_array($digit,\
    \ $primes)) {\n            $hex_primes++;\n        }\n    }\n    return $hex_primes;\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw1vppm0x.php:40\n\
    Stack trace:\n#0 /tmp/tmpw1vppm0x.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpw1vppm0x.php\
    \ on line 40\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $prime = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(hexdec($num[$i]), $prime)) {\n          \
    \      $count++;\n            }\n        }\n    }\n    return $count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n  $primes = [2, 3, 5, 7, 11, 13];\n  $hex = str_split(strtoupper($num));\n\
    \  $count = 0;\n  foreach ($hex as $digit) {\n    if (in_array($digit, $primes))\
    \ {\n      $count++;\n    }\n  }\n  return $count;\n}\n\necho hex_key(\"AB\")\
    \ . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") .\
    \ \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0pmel7eg.php:45\n\
    Stack trace:\n#0 /tmp/tmp0pmel7eg.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0pmel7eg.php\
    \ on line 45\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = str_split(strtoupper($num));\n\
    \    $count = 0;\n    foreach ($hex as $digit) {\n        if (in_array($digit,\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4bh8j9u.php:44\n\
    Stack trace:\n#0 /tmp/tmpb4bh8j9u.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpb4bh8j9u.php\
    \ on line 44\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = str_split(strtoupper($num));\n\
    \    $count = 0;\n    foreach ($hex as $value) {\n        if (in_array($value,\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndff__db.php:40\n\
    Stack trace:\n#0 /tmp/tmpndff__db.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpndff__db.php\
    \ on line 40\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n\
    \    $primes = array(2,3,5,7,11,13);\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($num[$i],\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\necho hex_key(\"AB\");\necho \"\\n\";\necho hex_key(\"1077E\"\
    );\necho \"\\n\";\necho hex_key(\"ABED1A33\");\necho \"\\n\";\necho hex_key(\"\
    123456789ABCDEF0\");\necho \"\\n\";\necho hex_key(\"2020\");\necho \"\\n\";\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9kihglf6.php:51\n\
    Stack trace:\n#0 /tmp/tmp9kihglf6.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp9kihglf6.php\
    \ on line 51\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = ['2','3','5','7','B','D'];\n    $count = 0;\n    for ($i=0; $i\
    \ < strlen($num); $i++) { \n        if (in_array($num[$i], $primes)) {\n     \
    \       $count++;\n        }\n    }\n    return $count;\n}\necho hex_key(\"AB\"\
    ) . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") .\
    \ \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\");\necho \"\\n\";\necho hex_key(\"1077E\");\necho \"\\n\"\
    ;\necho hex_key(\"ABED1A33\");\necho \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    );\necho \"\\n\";\necho hex_key(\"2020\");\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9',\n        'A', 'B', 'C', 'D', 'E', 'F'\n    );\n    $primes =\
    \ array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if (in_array($num[$i], $hex)) {\n            if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n   \
    \ $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(array_search($num[$i], $hex), $primes)) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\");\necho \"<br>\";\necho hex_key(\"1077E\");\necho \"<br>\"\
    ;\necho hex_key(\"ABED1A33\");\necho \"<br>\";\necho hex_key(\"123456789ABCDEF0\"\
    );\necho \"<br>\";\necho hex_key(\"2020\");\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br>2<br>4<br>6<br>2
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n  $primes = array(2, 3, 5, 7, 11, 13);\n  $count = 0;\n  for\
    \ ($i = 0; $i < strlen($num); $i++) {\n    if (in_array(hexdec($num[$i]), $primes))\
    \ {\n      $count++;\n    }\n  }\n  return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex_primes = 0;\n\
    \    $hex_array = str_split($num);\n    foreach ($hex_array as $hex_num) {\n \
    \       if (in_array($hex_num, $primes)) {\n            $hex_primes++;\n     \
    \   }\n    }\n    return $hex_primes;\n}\necho hex_key(\"AB\") . PHP_EOL;\necho\
    \ hex_key(\"1077E\") . PHP_EOL;\necho hex_key(\"ABED1A33\") . PHP_EOL;\necho hex_key(\"\
    123456789ABCDEF0\") . PHP_EOL;\necho hex_key(\"2020\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3itp97yq.php:44\n\
    Stack trace:\n#0 /tmp/tmp3itp97yq.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp3itp97yq.php\
    \ on line 44\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $prime = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(array_search($num[$i], $hex), $prime)) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex_primes = array(2, 3, 5, 7, 11, 13);\n    $hex_digits\
    \ = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    $hex_letters\
    \ = array('A', 'B', 'C', 'D', 'E', 'F');\n    $hex_numbers = array_merge($hex_digits,\
    \ $hex_letters);\n    $hex_num = str_split($num);\n    $count = 0;\n    foreach\
    \ ($hex_num as $digit) {\n        if (in_array($digit, $hex_numbers)) {\n    \
    \        if (in_array($digit, $hex_letters)) {\n                $digit = array_search($digit,\
    \ $hex_letters);\n            }\n            if (in_array($digit, $hex_primes))\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho\
    \ hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\\
    n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n3\n7\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgsm5hjd.php:53\n\
    Stack trace:\n#0 /tmp/tmpdgsm5hjd.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpdgsm5hjd.php\
    \ on line 53\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(array_search($num[$i], $hex), $primes)) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n\
    \    $primes = array(2,3,5,7,11,13);\n    $count = 0;\n    for($i = 0; $i < strlen($num);\
    \ $i++) {\n        if(in_array($num[$i], $hex)) {\n            if(in_array($num[$i],\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\necho hex_key(\"AB\");\necho \"\\n\";\necho hex_key(\"1077E\"\
    );\necho \"\\n\";\necho hex_key(\"ABED1A33\");\necho \"\\n\";\necho hex_key(\"\
    123456789ABCDEF0\");\necho \"\\n\";\necho hex_key(\"2020\");\necho \"\\n\";\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvla4it2.php:51\n\
    Stack trace:\n#0 /tmp/tmplvla4it2.php(59): test()\n#1 {main}\n  thrown in /tmp/tmplvla4it2.php\
    \ on line 51\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9',\n        'A', 'B', 'C', 'D', 'E', 'F'\n    );\n    $primes =\
    \ array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if (in_array($num[$i], $hex)) {\n            if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n  $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n  $primes = [2, 3, 5, 7, 11, 13];\n  $count\
    \ = 0;\n  for ($i = 0; $i < strlen($num); $i++) {\n    if (in_array($num[$i],\
    \ $hex) && in_array(array_search($num[$i], $hex), $primes)) {\n      $count++;\n\
    \    }\n  }\n  return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(hexdec($num[$i]), $primes)) {\n         \
    \       $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex_primes = 0;\n\
    \    $hex_digits = str_split(strtoupper($num));\n    foreach ($hex_digits as $digit)\
    \ {\n        if (in_array($digit, $primes)) {\n            $hex_primes++;\n  \
    \      }\n    }\n    return $hex_primes;\n}\necho hex_key(\"AB\");\necho \"\\\
    n\";\necho hex_key(\"1077E\");\necho \"\\n\";\necho hex_key(\"ABED1A33\");\necho\
    \ \"\\n\";\necho hex_key(\"123456789ABCDEF0\");\necho \"\\n\";\necho hex_key(\"\
    2020\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2920b8su.php:49\n\
    Stack trace:\n#0 /tmp/tmp2920b8su.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp2920b8su.php\
    \ on line 49\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n\t$primes = [2, 3, 5, 7, 11, 13];\n\t$count = 0;\n\tforeach\
    \ (str_split($num) as $digit) {\n\t\tif (in_array(hexdec($digit), $primes)) {\n\
    \t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(array_search($num[$i], $hex), $primes)) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho\
    \ hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\\
    n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex_digits = array('0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F');\n    $prime_digits = array('2',\
    \ '3', '5', '7', 'B', 'D');\n    $count = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if (in_array($num[$i], $prime_digits)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(hexdec($num[$i]), $primes)) {\n         \
    \       $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');\n\
    \    $prime = array(2,3,5,7,11,13);\n    $count = 0;\n    for($i = 0; $i < strlen($num);\
    \ $i++){\n        if(in_array($num[$i], $hex)){\n            $index = array_search($num[$i],\
    \ $hex);\n            if(in_array($index, $prime)){\n                $count++;\n\
    \            }\n        }\n    }\n    return $count;\n}\necho hex_key(\"AB\");\n\
    echo \"<br>\";\necho hex_key(\"1077E\");\necho \"<br>\";\necho hex_key(\"ABED1A33\"\
    );\necho \"<br>\";\necho hex_key(\"123456789ABCDEF0\");\necho \"<br>\";\necho\
    \ hex_key(\"2020\");\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br>2<br>4<br>6<br>2
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(array_search($num[$i], $hex), $primes)) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['A', 'B', 'D', '2', '3', '5', '7'];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho\
    \ hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\n2\n6\n7\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhe4w5l4.php:43\n\
    Stack trace:\n#0 /tmp/tmpqhe4w5l4.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpqhe4w5l4.php\
    \ on line 43\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0' => 0,\n        '1' => 1,\n \
    \       '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n \
    \       '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n \
    \       'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n\
    \        'E' => 14,\n        'F' => 15\n    );\n    $prime = array(2, 3, 5, 7,\
    \ 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n   \
    \     if (in_array($hex[$num[$i]], $prime)) {\n            $count++;\n       \
    \ }\n    }\n    return $count;\n}\n\necho hex_key(\"AB\");\necho \"\\n\";\necho\
    \ hex_key(\"1077E\");\necho \"\\n\";\necho hex_key(\"ABED1A33\");\necho \"\\n\"\
    ;\necho hex_key(\"123456789ABCDEF0\");\necho \"\\n\";\necho hex_key(\"2020\");\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n\
    \    $primes = array(2,3,5,7,11,13);\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($num[$i],\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\"\
    ) . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcfczuooa.php:46\n\
    Stack trace:\n#0 /tmp/tmpcfczuooa.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpcfczuooa.php\
    \ on line 46\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n\t$hex_digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n\t$prime_hex_digits = ['2', '3', '5', '7',\
    \ 'B', 'D'];\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($num); $i++) {\n\t\tif\
    \ (in_array($num[$i], $prime_hex_digits)) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn\
    \ $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\\
    n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"\
    ,\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\");\n    $primes = array(\"\
    2\",\"3\",\"5\",\"7\",\"B\",\"D\");\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $primes)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho\
    \ hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"\
    123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    $num = str_split($num);\n\
    \    foreach($num as $n) {\n        if(in_array($n, $hex)) {\n            if(in_array($n,\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxmm2ne54.php:43\n\
    Stack trace:\n#0 /tmp/tmpxmm2ne54.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpxmm2ne54.php\
    \ on line 43\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0' => 0,\n        '1' => 1,\n \
    \       '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n \
    \       '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n \
    \       'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n\
    \        'E' => 14,\n        'F' => 15\n    );\n    $primes = array(2, 3, 5, 7,\
    \ 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n   \
    \     if (in_array($hex[$num[$i]], $primes)) {\n            $count++;\n      \
    \  }\n    }\n    return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0' => 0,\n        '1' => 1,\n \
    \       '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n \
    \       '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n \
    \       'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n\
    \        'E' => 14,\n        'F' => 15\n    );\n    $primes = array(2, 3, 5, 7,\
    \ 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n   \
    \     if (in_array($hex[$num[$i]], $primes)) {\n            $count++;\n      \
    \  }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AB\")\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1077E\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABED1A33\"\
    ) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\"\
    ) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgy5gqa4i.php:47\n\
    Stack trace:\n#0 /tmp/tmpgy5gqa4i.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpgy5gqa4i.php\
    \ on line 47\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = [\n        '0' => 0,\n        '1' => 1,\n      \
    \  '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n      \
    \  '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n      \
    \  'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n  \
    \      'E' => 14,\n        'F' => 15\n    ];\n    $primes = [2, 3, 5, 7, 11, 13];\n\
    \    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($hex[$num[$i]],\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppih2vf9t.php:42\n\
    Stack trace:\n#0 /tmp/tmppih2vf9t.php(50): test()\n#1 {main}\n  thrown in /tmp/tmppih2vf9t.php\
    \ on line 42\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = str_split(strtoupper($num));\n\
    \    $hex_primes = 0;\n    foreach ($hex as $digit) {\n        if (in_array($digit,\
    \ $primes)) {\n            $hex_primes++;\n        }\n    }\n    return $hex_primes;\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw1vppm0x.php:40\n\
    Stack trace:\n#0 /tmp/tmpw1vppm0x.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpw1vppm0x.php\
    \ on line 40\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex) && in_array(array_search($num[$i], $hex), $primes)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $prime = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array(array_search($num[$i],\
    \ $hex), $prime)) {\n                $count++;\n            }\n        }\n   \
    \ }\n    return $count;\n}\necho hex_key(\"AB\").\"\\n\";\necho hex_key(\"1077E\"\
    ).\"\\n\";\necho hex_key(\"ABED1A33\").\"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ).\"\\n\";\necho hex_key(\"2020\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex_digits = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = [2, 3, 5, 7, 11, 13];\n\
    \    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex_digits)) {\n            if (in_array(hexdec($num[$i]), $primes)) {\n  \
    \              $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        \"0\" => 0,\n        \"1\" => 1,\n\
    \        \"2\" => 2,\n        \"3\" => 3,\n        \"4\" => 4,\n        \"5\"\
    \ => 5,\n        \"6\" => 6,\n        \"7\" => 7,\n        \"8\" => 8,\n     \
    \   \"9\" => 9,\n        \"A\" => 10,\n        \"B\" => 11,\n        \"C\" =>\
    \ 12,\n        \"D\" => 13,\n        \"E\" => 14,\n        \"F\" => 15\n    );\n\
    \    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n    for ($i = 0; $i\
    \ < strlen($num); $i++) {\n        if (in_array($hex[$num[$i]], $primes)) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = str_split(strtoupper($num));\n    $primes = [2,\
    \ 3, 5, 7, 11, 13];\n    $count = 0;\n    foreach ($hex as $digit) {\n       \
    \ if (in_array($digit, $primes)) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqx9_ov3d.php:40\n\
    Stack trace:\n#0 /tmp/tmpqx9_ov3d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqx9_ov3d.php\
    \ on line 40\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = [\n        '0' => 0,\n        '1' => 1,\n      \
    \  '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n      \
    \  '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n      \
    \  'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n  \
    \      'E' => 14,\n        'F' => 15\n    ];\n    $primes = [2, 3, 5, 7, 11, 13];\n\
    \    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($hex[$num[$i]],\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9',\n        'A', 'B', 'C', 'D', 'E', 'F'\n    );\n    $primes =\
    \ array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if (in_array($num[$i], $hex)) {\n            if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9',\n        'A', 'B', 'C', 'D', 'E', 'F'\n    );\n    $primes =\
    \ array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num);\
    \ $i++) {\n        if (in_array($num[$i], $hex)) {\n            if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n   \
    \ $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            $index = array_search($num[$i], $hex);\n            if\
    \ (in_array($index, $primes)) {\n                $count++;\n            }\n  \
    \      }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n   \
    \ return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n  \
    \  for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $hex)) {\n            $count++;\n        }\n    }\n    return $count;\n}\necho\
    \ hex_key(\"AB\");\necho \"<br>\";\necho hex_key(\"1077E\");\necho \"<br>\";\n\
    echo hex_key(\"ABED1A33\");\necho \"<br>\";\necho hex_key(\"123456789ABCDEF0\"\
    );\necho \"<br>\";\necho hex_key(\"2020\");\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br>2<br>4<br>6<br>2<br>
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n  $primes = [2, 3, 5, 7, 11, 13];\n  $count = 0;\n  for ($i\
    \ = 0; $i < strlen($num); $i++) {\n    if (in_array(hexdec($num[$i]), $primes))\
    \ {\n      $count++;\n    }\n  }\n  return $count;\n}\necho hex_key(\"AB\") .\
    \ \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\
    \\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\")\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');\n\
    \    $primes = array(2,3,5,7,11,13);\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($num[$i],\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt95mad7t.php:42\n\
    Stack trace:\n#0 /tmp/tmpt95mad7t.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpt95mad7t.php\
    \ on line 42\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');\n\
    \    $primes = array(2,3,5,7,11,13);\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($num[$i],\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\necho hex_key(\"AB\").\"\\n\";\necho hex_key(\"1077E\").\"\
    \\n\";\necho hex_key(\"ABED1A33\").\"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ).\"\\n\";\necho hex_key(\"2020\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfkjzp4bw.php:46\n\
    Stack trace:\n#0 /tmp/tmpfkjzp4bw.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpfkjzp4bw.php\
    \ on line 46\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $prime = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array(array_search($num[$i],\
    \ $hex), $prime)) {\n                $count++;\n            }\n        }\n   \
    \ }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E'\
    \ => 14, 'F' => 15];\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n \
    \   for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], array_keys($hex)))\
    \ {\n            if (in_array($hex[$num[$i]], $primes)) {\n                $count++;\n\
    \            }\n        } else {\n            if (in_array($num[$i], $primes))\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppih2vf9t.php:42\n\
    Stack trace:\n#0 /tmp/tmppih2vf9t.php(50): test()\n#1 {main}\n  thrown in /tmp/tmppih2vf9t.php\
    \ on line 42\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $prime = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(array_search($num[$i], $hex), $prime)) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex_primes = [2, 3, 5, 7, 11, 13];\n    $hex_digits =\
    \ str_split(strtoupper($num));\n    $count = 0;\n    foreach ($hex_digits as $digit)\
    \ {\n        if (in_array(hexdec($digit), $hex_primes)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex_primes = [2, 3, 5, 7, 11, 13];\n    $hex_digits =\
    \ str_split(strtoupper($num));\n    $count = 0;\n    foreach ($hex_digits as $digit)\
    \ {\n        if (in_array(hexdec($digit), $hex_primes)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\n\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkdnbo1d.php:48\n\
    Stack trace:\n#0 /tmp/tmpnkdnbo1d.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpnkdnbo1d.php\
    \ on line 48\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n\t$primes = [2, 3, 5, 7, 11, 13];\n\t$hex = str_split(strtoupper($num));\n\
    \t$count = 0;\n\tforeach ($hex as $digit) {\n\t\tif (in_array($digit, $primes))\
    \ {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\necho hex_key(\"AB\")\
    \ . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") .\
    \ \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04_q53xa.php:45\n\
    Stack trace:\n#0 /tmp/tmp04_q53xa.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp04_q53xa.php\
    \ on line 45\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        $digit = $num[$i];\n        if\
    \ (in_array($digit, $primes)) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxikoazqo.php:40\n\
    Stack trace:\n#0 /tmp/tmpxikoazqo.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpxikoazqo.php\
    \ on line 40\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n  $hex_primes = array(2, 3, 5, 7, 11, 13);\n  $hex_digits =\
    \ array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n  $hex_letters\
    \ = array('A', 'B', 'C', 'D', 'E', 'F');\n  $hex_numbers = array_merge($hex_digits,\
    \ $hex_letters);\n  $hex_numbers_string = implode('', $hex_numbers);\n  $hex_primes_string\
    \ = implode('', $hex_primes);\n  $hex_primes_count = 0;\n  $num_array = str_split($num);\n\
    \  foreach ($num_array as $num) {\n    if (strpos($hex_primes_string, $num) !==\
    \ false) {\n      $hex_primes_count++;\n    }\n  }\n  return $hex_primes_count;\n\
    }\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n3\n3\n5\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7dft15ev.php:49\n\
    Stack trace:\n#0 /tmp/tmp7dft15ev.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp7dft15ev.php\
    \ on line 49\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $hex_primes = 0;\n\
    \    $hex_num = str_split(strtoupper($num));\n    foreach ($hex_num as $hex_digit)\
    \ {\n        if (in_array($hex_digit, $primes)) {\n            $hex_primes++;\n\
    \        }\n    }\n    return $hex_primes;\n}\necho hex_key(\"AB\") . \"\\n\"\
    ;\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\n\
    echo hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\") . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28vdn_e_.php:44\n\
    Stack trace:\n#0 /tmp/tmp28vdn_e_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp28vdn_e_.php\
    \ on line 44\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = str_split($num);\n    $primes = [2, 3, 5, 7, 11,\
    \ 13];\n    $count = 0;\n    foreach ($hex as $value) {\n        if (in_array($value,\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpsu9v99.php:45\n\
    Stack trace:\n#0 /tmp/tmpdpsu9v99.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpdpsu9v99.php\
    \ on line 45\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = [\n        '0' => 0,\n        '1' => 1,\n      \
    \  '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n      \
    \  '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n      \
    \  'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n  \
    \      'E' => 14,\n        'F' => 15\n    ];\n    $primes = [2, 3, 5, 7, 11, 13];\n\
    \    $sum = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($hex[$num[$i]],\
    \ $primes)) {\n            $sum++;\n        }\n    }\n    return $sum;\n}\n\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n\
    \    $hex = str_split($num);\n    foreach ($hex as $digit) {\n        if (in_array(hexdec($digit),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnt1pqkoe.php:46\n\
    Stack trace:\n#0 /tmp/tmpnt1pqkoe.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpnt1pqkoe.php\
    \ on line 46\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $prime_numbers = array(2, 3, 5, 7, 11, 13);\n    $hex_numbers\
    \ = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    $hex_numbers_string\
    \ = array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"A\", \"B\", \"C\", \"D\", \"E\", \"F\");\n    $hex_numbers_string_prime =\
    \ array(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\");\n    $prime_count = 0;\n  \
    \  $hex_numbers_array = str_split($num);\n    foreach ($hex_numbers_array as $hex_number)\
    \ {\n        if (in_array($hex_number, $hex_numbers_string_prime)) {\n       \
    \     $prime_count++;\n        }\n    }\n    return $prime_count;\n}\n\necho hex_key(\"\
    AB\");\necho \"\\n\";\necho hex_key(\"1077E\");\necho \"\\n\";\necho hex_key(\"\
    ABED1A33\");\necho \"\\n\";\necho hex_key(\"123456789ABCDEF0\");\necho \"\\n\"\
    ;\necho hex_key(\"2020\");\necho \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\n\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"\
    1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiamu5jpc.php:47\n\
    Stack trace:\n#0 /tmp/tmpiamu5jpc.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpiamu5jpc.php\
    \ on line 47\n"
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppih2vf9t.php:42\n\
    Stack trace:\n#0 /tmp/tmppih2vf9t.php(50): test()\n#1 {main}\n  thrown in /tmp/tmppih2vf9t.php\
    \ on line 42\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(\n        '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\n    );\n    $primes = array(\n\
    \        '2', '3', '5', '7', 'B', 'D'\n    );\n    $count = 0;\n    for ($i =\
    \ 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], $primes)) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\necho hex_key(\"\
    AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"ABED1A33\"\
    ) . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"2020\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex_key = 0;\n    $hex_array = str_split($num);\n    $hex_array_length\
    \ = count($hex_array);\n    for ($i = 0; $i < $hex_array_length; $i++) {\n   \
    \     if ($hex_array[$i] == \"2\" || $hex_array[$i] == \"3\" || $hex_array[$i]\
    \ == \"5\" || $hex_array[$i] == \"7\" || $hex_array[$i] == \"B\" || $hex_array[$i]\
    \ == \"D\") {\n            $hex_key++;\n        }\n    }\n    return $hex_key;\n\
    }\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = array(0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n\
    \    $primes = array(2,3,5,7,11,13);\n    $count = 0;\n    for($i = 0; $i < strlen($num);\
    \ $i++) {\n        if(in_array($num[$i], $hex)) {\n            if(in_array($num[$i],\
    \ $primes)) {\n                $count++;\n            }\n        }\n    }\n  \
    \  return $count;\n}\necho hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\"\
    ) . \"\\n\";\necho hex_key(\"ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\"\
    ) . \"\\n\";\necho hex_key(\"2020\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n2\n2\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaez_e1hs.php:46\n\
    Stack trace:\n#0 /tmp/tmpaez_e1hs.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpaez_e1hs.php\
    \ on line 46\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    $num\
    \ = str_split($num);\n    foreach ($num as $n) {\n        if (in_array(hexdec($n),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex_digits = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    $prime_hex_digits = ['2', '3',\
    \ '5', '7', 'B', 'D'];\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++)\
    \ {\n        if (in_array($num[$i], $prime_hex_digits)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args) {\n \
    \   return hex_key(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    AB\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1077E\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2020\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    123456789ABCDEF0\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"112233445566778899AABBCCDDEEFF00\") !== 12) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = str_split(strtoupper($num));\n    $primes = [2,\
    \ 3, 5, 7, 11, 13];\n    $count = 0;\n    foreach ($hex as $digit) {\n       \
    \ if (in_array($digit, $primes)) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqx9_ov3d.php:40\n\
    Stack trace:\n#0 /tmp/tmpqx9_ov3d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqx9_ov3d.php\
    \ on line 40\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i],\
    \ $hex)) {\n            if (in_array(hexdec($num[$i]), $primes)) {\n         \
    \       $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n\
    function candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\") !==\
    \ 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = [2, 3, 5, 7, 11, 13];\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    echo hex_key(\"AB\") . \"\\n\";\necho hex_key(\"1077E\") . \"\\n\";\necho hex_key(\"\
    ABED1A33\") . \"\\n\";\necho hex_key(\"123456789ABCDEF0\") . \"\\n\";\necho hex_key(\"\
    2020\") . \"\\n\";\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659730688
- exit_code: 255
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    $primes = [2,3,5,7,11,13];\n    $count = 0;\n    for ($i=0; $i < strlen($num);\
    \ $i++) { \n        if (in_array($num[$i], $hex)) {\n            if (in_array($hex[array_search($num[$i],\
    \ $hex)], $primes)) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}\n\nfunction candidate(...$args) {\n    return hex_key(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppih2vf9t.php:42\n\
    Stack trace:\n#0 /tmp/tmppih2vf9t.php(50): test()\n#1 {main}\n  thrown in /tmp/tmppih2vf9t.php\
    \ on line 42\n"
  timestamp: 1659730688
- exit_code: 0
  program: "<?php\n// You have been tasked to write a function that receives \n//\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n// digits\
    \ that are primes (prime number, or a prime, is a natural number \n// greater\
    \ than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array(hexdec($num[$i]),\
    \ $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \nfunction candidate(...$args) {\n    return hex_key(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"AB\") !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1077E\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ABED1A33\") !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2020\") !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"123456789ABCDEF0\") !== 6) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730688
